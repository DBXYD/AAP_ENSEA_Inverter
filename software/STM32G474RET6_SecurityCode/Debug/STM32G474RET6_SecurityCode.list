
STM32G474RET6_SecurityCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014d1c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000894  08014f00  08014f00  00024f00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015794  08015794  00030358  2**0
                  CONTENTS
  4 .ARM          00000008  08015794  08015794  00025794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801579c  0801579c  00030358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801579c  0801579c  0002579c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080157a0  080157a0  000257a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  080157a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003154  20000358  08015afc  00030358  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200034ac  08015afc  000334ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033d33  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007438  00000000  00000000  000640bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002828  00000000  00000000  0006b4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002500  00000000  00000000  0006dd20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031d56  00000000  00000000  00070220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033e4d  00000000  00000000  000a1f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012845d  00000000  00000000  000d5dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001fe220  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ba04  00000000  00000000  001fe270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000358 	.word	0x20000358
 80001fc:	00000000 	.word	0x00000000
 8000200:	08014ee4 	.word	0x08014ee4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000035c 	.word	0x2000035c
 800021c:	08014ee4 	.word	0x08014ee4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
ADC_HandleTypeDef hadc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	; 0x30
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2220      	movs	r2, #32
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f011 f847 	bl	8011fa8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f1a:	4b32      	ldr	r3, [pc, #200]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f22:	4b30      	ldr	r3, [pc, #192]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f24:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f2a:	4b2e      	ldr	r3, [pc, #184]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f30:	4b2c      	ldr	r3, [pc, #176]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f36:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f3c:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f42:	4b28      	ldr	r3, [pc, #160]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f44:	2204      	movs	r2, #4
 8000f46:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f48:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f4e:	4b25      	ldr	r3, [pc, #148]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f54:	4b23      	ldr	r3, [pc, #140]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f5a:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f62:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f68:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f76:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f84:	4817      	ldr	r0, [pc, #92]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f86:	f002 fcff 	bl	8003988 <HAL_ADC_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f90:	f000 febc 	bl	8001d0c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f94:	2300      	movs	r3, #0
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4811      	ldr	r0, [pc, #68]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000fa0:	f003 fb1a 	bl	80045d8 <HAL_ADCEx_MultiModeConfigChannel>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000faa:	f000 feaf 	bl	8001d0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <MX_ADC1_Init+0xec>)
 8000fb0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fb2:	2306      	movs	r3, #6
 8000fb4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fba:	237f      	movs	r3, #127	; 0x7f
 8000fbc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4806      	ldr	r0, [pc, #24]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000fcc:	f002 fe9e 	bl	8003d0c <HAL_ADC_ConfigChannel>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000fd6:	f000 fe99 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	3730      	adds	r7, #48	; 0x30
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000374 	.word	0x20000374
 8000fe8:	04300002 	.word	0x04300002

08000fec <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2220      	movs	r2, #32
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f010 ffd5 	bl	8011fa8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ffe:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <MX_ADC2_Init+0xc0>)
 8001000:	4a2b      	ldr	r2, [pc, #172]	; (80010b0 <MX_ADC2_Init+0xc4>)
 8001002:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001004:	4b29      	ldr	r3, [pc, #164]	; (80010ac <MX_ADC2_Init+0xc0>)
 8001006:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800100a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800100c:	4b27      	ldr	r3, [pc, #156]	; (80010ac <MX_ADC2_Init+0xc0>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001012:	4b26      	ldr	r3, [pc, #152]	; (80010ac <MX_ADC2_Init+0xc0>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001018:	4b24      	ldr	r3, [pc, #144]	; (80010ac <MX_ADC2_Init+0xc0>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800101e:	4b23      	ldr	r3, [pc, #140]	; (80010ac <MX_ADC2_Init+0xc0>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <MX_ADC2_Init+0xc0>)
 8001026:	2204      	movs	r2, #4
 8001028:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <MX_ADC2_Init+0xc0>)
 800102c:	2200      	movs	r2, #0
 800102e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001030:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <MX_ADC2_Init+0xc0>)
 8001032:	2200      	movs	r2, #0
 8001034:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001036:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <MX_ADC2_Init+0xc0>)
 8001038:	2201      	movs	r2, #1
 800103a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <MX_ADC2_Init+0xc0>)
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001044:	4b19      	ldr	r3, [pc, #100]	; (80010ac <MX_ADC2_Init+0xc0>)
 8001046:	2200      	movs	r2, #0
 8001048:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <MX_ADC2_Init+0xc0>)
 800104c:	2200      	movs	r2, #0
 800104e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001050:	4b16      	ldr	r3, [pc, #88]	; (80010ac <MX_ADC2_Init+0xc0>)
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <MX_ADC2_Init+0xc0>)
 800105a:	2200      	movs	r2, #0
 800105c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <MX_ADC2_Init+0xc0>)
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001066:	4811      	ldr	r0, [pc, #68]	; (80010ac <MX_ADC2_Init+0xc0>)
 8001068:	f002 fc8e 	bl	8003988 <HAL_ADC_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001072:	f000 fe4b 	bl	8001d0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_ADC2_Init+0xc8>)
 8001078:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800107a:	2306      	movs	r3, #6
 800107c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001082:	237f      	movs	r3, #127	; 0x7f
 8001084:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001086:	2304      	movs	r3, #4
 8001088:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800108e:	463b      	mov	r3, r7
 8001090:	4619      	mov	r1, r3
 8001092:	4806      	ldr	r0, [pc, #24]	; (80010ac <MX_ADC2_Init+0xc0>)
 8001094:	f002 fe3a 	bl	8003d0c <HAL_ADC_ConfigChannel>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800109e:	f000 fe35 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	3720      	adds	r7, #32
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200003e0 	.word	0x200003e0
 80010b0:	50000100 	.word	0x50000100
 80010b4:	25b00200 	.word	0x25b00200

080010b8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08c      	sub	sp, #48	; 0x30
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2220      	movs	r2, #32
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f010 ff69 	bl	8011fa8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80010d6:	4b31      	ldr	r3, [pc, #196]	; (800119c <MX_ADC3_Init+0xe4>)
 80010d8:	4a31      	ldr	r2, [pc, #196]	; (80011a0 <MX_ADC3_Init+0xe8>)
 80010da:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010dc:	4b2f      	ldr	r3, [pc, #188]	; (800119c <MX_ADC3_Init+0xe4>)
 80010de:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010e2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010e4:	4b2d      	ldr	r3, [pc, #180]	; (800119c <MX_ADC3_Init+0xe4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ea:	4b2c      	ldr	r3, [pc, #176]	; (800119c <MX_ADC3_Init+0xe4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80010f0:	4b2a      	ldr	r3, [pc, #168]	; (800119c <MX_ADC3_Init+0xe4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010f6:	4b29      	ldr	r3, [pc, #164]	; (800119c <MX_ADC3_Init+0xe4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010fc:	4b27      	ldr	r3, [pc, #156]	; (800119c <MX_ADC3_Init+0xe4>)
 80010fe:	2204      	movs	r2, #4
 8001100:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <MX_ADC3_Init+0xe4>)
 8001104:	2200      	movs	r2, #0
 8001106:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001108:	4b24      	ldr	r3, [pc, #144]	; (800119c <MX_ADC3_Init+0xe4>)
 800110a:	2200      	movs	r2, #0
 800110c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800110e:	4b23      	ldr	r3, [pc, #140]	; (800119c <MX_ADC3_Init+0xe4>)
 8001110:	2201      	movs	r2, #1
 8001112:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001114:	4b21      	ldr	r3, [pc, #132]	; (800119c <MX_ADC3_Init+0xe4>)
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800111c:	4b1f      	ldr	r3, [pc, #124]	; (800119c <MX_ADC3_Init+0xe4>)
 800111e:	2200      	movs	r2, #0
 8001120:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <MX_ADC3_Init+0xe4>)
 8001124:	2200      	movs	r2, #0
 8001126:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001128:	4b1c      	ldr	r3, [pc, #112]	; (800119c <MX_ADC3_Init+0xe4>)
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <MX_ADC3_Init+0xe4>)
 8001132:	2200      	movs	r2, #0
 8001134:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <MX_ADC3_Init+0xe4>)
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800113e:	4817      	ldr	r0, [pc, #92]	; (800119c <MX_ADC3_Init+0xe4>)
 8001140:	f002 fc22 	bl	8003988 <HAL_ADC_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800114a:	f000 fddf 	bl	8001d0c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001156:	4619      	mov	r1, r3
 8001158:	4810      	ldr	r0, [pc, #64]	; (800119c <MX_ADC3_Init+0xe4>)
 800115a:	f003 fa3d 	bl	80045d8 <HAL_ADCEx_MultiModeConfigChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001164:	f000 fdd2 	bl	8001d0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_ADC3_Init+0xec>)
 800116a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800116c:	2306      	movs	r3, #6
 800116e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001174:	237f      	movs	r3, #127	; 0x7f
 8001176:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001178:	2304      	movs	r3, #4
 800117a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	; (800119c <MX_ADC3_Init+0xe4>)
 8001186:	f002 fdc1 	bl	8003d0c <HAL_ADC_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8001190:	f000 fdbc 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	3730      	adds	r7, #48	; 0x30
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	2000044c 	.word	0x2000044c
 80011a0:	50000400 	.word	0x50000400
 80011a4:	04300002 	.word	0x04300002

080011a8 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ae:	463b      	mov	r3, r7
 80011b0:	2220      	movs	r2, #32
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f010 fef7 	bl	8011fa8 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80011ba:	4b2b      	ldr	r3, [pc, #172]	; (8001268 <MX_ADC4_Init+0xc0>)
 80011bc:	4a2b      	ldr	r2, [pc, #172]	; (800126c <MX_ADC4_Init+0xc4>)
 80011be:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011c0:	4b29      	ldr	r3, [pc, #164]	; (8001268 <MX_ADC4_Init+0xc0>)
 80011c2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011c6:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80011c8:	4b27      	ldr	r3, [pc, #156]	; (8001268 <MX_ADC4_Init+0xc0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <MX_ADC4_Init+0xc0>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80011d4:	4b24      	ldr	r3, [pc, #144]	; (8001268 <MX_ADC4_Init+0xc0>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011da:	4b23      	ldr	r3, [pc, #140]	; (8001268 <MX_ADC4_Init+0xc0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011e0:	4b21      	ldr	r3, [pc, #132]	; (8001268 <MX_ADC4_Init+0xc0>)
 80011e2:	2204      	movs	r2, #4
 80011e4:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80011e6:	4b20      	ldr	r3, [pc, #128]	; (8001268 <MX_ADC4_Init+0xc0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 80011ec:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <MX_ADC4_Init+0xc0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 80011f2:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <MX_ADC4_Init+0xc0>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <MX_ADC4_Init+0xc0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001200:	4b19      	ldr	r3, [pc, #100]	; (8001268 <MX_ADC4_Init+0xc0>)
 8001202:	2200      	movs	r2, #0
 8001204:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <MX_ADC4_Init+0xc0>)
 8001208:	2200      	movs	r2, #0
 800120a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 800120c:	4b16      	ldr	r3, [pc, #88]	; (8001268 <MX_ADC4_Init+0xc0>)
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <MX_ADC4_Init+0xc0>)
 8001216:	2200      	movs	r2, #0
 8001218:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <MX_ADC4_Init+0xc0>)
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001222:	4811      	ldr	r0, [pc, #68]	; (8001268 <MX_ADC4_Init+0xc0>)
 8001224:	f002 fbb0 	bl	8003988 <HAL_ADC_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 800122e:	f000 fd6d 	bl	8001d0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_ADC4_Init+0xc8>)
 8001234:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001236:	2306      	movs	r3, #6
 8001238:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800123a:	2304      	movs	r3, #4
 800123c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800123e:	237f      	movs	r3, #127	; 0x7f
 8001240:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001242:	2304      	movs	r3, #4
 8001244:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800124a:	463b      	mov	r3, r7
 800124c:	4619      	mov	r1, r3
 800124e:	4806      	ldr	r0, [pc, #24]	; (8001268 <MX_ADC4_Init+0xc0>)
 8001250:	f002 fd5c 	bl	8003d0c <HAL_ADC_ConfigChannel>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 800125a:	f000 fd57 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	3720      	adds	r7, #32
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200004b8 	.word	0x200004b8
 800126c:	50000500 	.word	0x50000500
 8001270:	0c900008 	.word	0x0c900008

08001274 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b0a6      	sub	sp, #152	; 0x98
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800128c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001290:	2254      	movs	r2, #84	; 0x54
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f010 fe87 	bl	8011fa8 <memset>
  if(adcHandle->Instance==ADC1)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012a2:	d141      	bne.n	8001328 <HAL_ADC_MspInit+0xb4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012a8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012aa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80012ae:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012b4:	4618      	mov	r0, r3
 80012b6:	f006 ffe9 	bl	800828c <HAL_RCCEx_PeriphCLKConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012c0:	f000 fd24 	bl	8001d0c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012c4:	4b91      	ldr	r3, [pc, #580]	; (800150c <HAL_ADC_MspInit+0x298>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	3301      	adds	r3, #1
 80012ca:	4a90      	ldr	r2, [pc, #576]	; (800150c <HAL_ADC_MspInit+0x298>)
 80012cc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012ce:	4b8f      	ldr	r3, [pc, #572]	; (800150c <HAL_ADC_MspInit+0x298>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d10b      	bne.n	80012ee <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012d6:	4b8e      	ldr	r3, [pc, #568]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	4a8d      	ldr	r2, [pc, #564]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80012dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e2:	4b8b      	ldr	r3, [pc, #556]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	4b88      	ldr	r3, [pc, #544]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	4a87      	ldr	r2, [pc, #540]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fa:	4b85      	ldr	r3, [pc, #532]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
 8001304:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001306:	2303      	movs	r3, #3
 8001308:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800130c:	2303      	movs	r3, #3
 800130e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800131c:	4619      	mov	r1, r3
 800131e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001322:	f003 fc1f 	bl	8004b64 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8001326:	e0ed      	b.n	8001504 <HAL_ADC_MspInit+0x290>
  else if(adcHandle->Instance==ADC2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a79      	ldr	r2, [pc, #484]	; (8001514 <HAL_ADC_MspInit+0x2a0>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d15b      	bne.n	80013ea <HAL_ADC_MspInit+0x176>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001338:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800133c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800133e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001342:	4618      	mov	r0, r3
 8001344:	f006 ffa2 	bl	800828c <HAL_RCCEx_PeriphCLKConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_ADC_MspInit+0xde>
      Error_Handler();
 800134e:	f000 fcdd 	bl	8001d0c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001352:	4b6e      	ldr	r3, [pc, #440]	; (800150c <HAL_ADC_MspInit+0x298>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	4a6c      	ldr	r2, [pc, #432]	; (800150c <HAL_ADC_MspInit+0x298>)
 800135a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800135c:	4b6b      	ldr	r3, [pc, #428]	; (800150c <HAL_ADC_MspInit+0x298>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d10b      	bne.n	800137c <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001364:	4b6a      	ldr	r3, [pc, #424]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001368:	4a69      	ldr	r2, [pc, #420]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 800136a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800136e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001370:	4b67      	ldr	r3, [pc, #412]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 8001372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800137c:	4b64      	ldr	r3, [pc, #400]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 800137e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001380:	4a63      	ldr	r2, [pc, #396]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 8001382:	f043 0304 	orr.w	r3, r3, #4
 8001386:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001388:	4b61      	ldr	r3, [pc, #388]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 800138a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	623b      	str	r3, [r7, #32]
 8001392:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001394:	4b5e      	ldr	r3, [pc, #376]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 8001396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001398:	4a5d      	ldr	r2, [pc, #372]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 800139a:	f043 0302 	orr.w	r3, r3, #2
 800139e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a0:	4b5b      	ldr	r3, [pc, #364]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80013a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	61fb      	str	r3, [r7, #28]
 80013aa:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013ac:	2308      	movs	r3, #8
 80013ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b2:	2303      	movs	r3, #3
 80013b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013be:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80013c2:	4619      	mov	r1, r3
 80013c4:	4854      	ldr	r0, [pc, #336]	; (8001518 <HAL_ADC_MspInit+0x2a4>)
 80013c6:	f003 fbcd 	bl	8004b64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013ca:	2304      	movs	r3, #4
 80013cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d0:	2303      	movs	r3, #3
 80013d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013dc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80013e0:	4619      	mov	r1, r3
 80013e2:	484e      	ldr	r0, [pc, #312]	; (800151c <HAL_ADC_MspInit+0x2a8>)
 80013e4:	f003 fbbe 	bl	8004b64 <HAL_GPIO_Init>
}
 80013e8:	e08c      	b.n	8001504 <HAL_ADC_MspInit+0x290>
  else if(adcHandle->Instance==ADC3)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a4c      	ldr	r2, [pc, #304]	; (8001520 <HAL_ADC_MspInit+0x2ac>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d141      	bne.n	8001478 <HAL_ADC_MspInit+0x204>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80013f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80013fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80013fe:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001400:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001404:	4618      	mov	r0, r3
 8001406:	f006 ff41 	bl	800828c <HAL_RCCEx_PeriphCLKConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_ADC_MspInit+0x1a0>
      Error_Handler();
 8001410:	f000 fc7c 	bl	8001d0c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001414:	4b43      	ldr	r3, [pc, #268]	; (8001524 <HAL_ADC_MspInit+0x2b0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	3301      	adds	r3, #1
 800141a:	4a42      	ldr	r2, [pc, #264]	; (8001524 <HAL_ADC_MspInit+0x2b0>)
 800141c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800141e:	4b41      	ldr	r3, [pc, #260]	; (8001524 <HAL_ADC_MspInit+0x2b0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d10b      	bne.n	800143e <HAL_ADC_MspInit+0x1ca>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001426:	4b3a      	ldr	r3, [pc, #232]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	4a39      	ldr	r2, [pc, #228]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 800142c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001432:	4b37      	ldr	r3, [pc, #220]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143a:	61bb      	str	r3, [r7, #24]
 800143c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	4b34      	ldr	r3, [pc, #208]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	4a33      	ldr	r2, [pc, #204]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144a:	4b31      	ldr	r3, [pc, #196]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 8001456:	f242 0302 	movw	r3, #8194	; 0x2002
 800145a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145e:	2303      	movs	r3, #3
 8001460:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800146e:	4619      	mov	r1, r3
 8001470:	482a      	ldr	r0, [pc, #168]	; (800151c <HAL_ADC_MspInit+0x2a8>)
 8001472:	f003 fb77 	bl	8004b64 <HAL_GPIO_Init>
}
 8001476:	e045      	b.n	8001504 <HAL_ADC_MspInit+0x290>
  else if(adcHandle->Instance==ADC4)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a2a      	ldr	r2, [pc, #168]	; (8001528 <HAL_ADC_MspInit+0x2b4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d140      	bne.n	8001504 <HAL_ADC_MspInit+0x290>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001482:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001486:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001488:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800148c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800148e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001492:	4618      	mov	r0, r3
 8001494:	f006 fefa 	bl	800828c <HAL_RCCEx_PeriphCLKConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_ADC_MspInit+0x22e>
      Error_Handler();
 800149e:	f000 fc35 	bl	8001d0c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80014a2:	4b20      	ldr	r3, [pc, #128]	; (8001524 <HAL_ADC_MspInit+0x2b0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	3301      	adds	r3, #1
 80014a8:	4a1e      	ldr	r2, [pc, #120]	; (8001524 <HAL_ADC_MspInit+0x2b0>)
 80014aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80014ac:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <HAL_ADC_MspInit+0x2b0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d10b      	bne.n	80014cc <HAL_ADC_MspInit+0x258>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	4a15      	ldr	r2, [pc, #84]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80014ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80014c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80014ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d0:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80014d2:	f043 0302 	orr.w	r3, r3, #2
 80014d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d8:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80014da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80014e4:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80014e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ec:	2303      	movs	r3, #3
 80014ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80014fc:	4619      	mov	r1, r3
 80014fe:	4807      	ldr	r0, [pc, #28]	; (800151c <HAL_ADC_MspInit+0x2a8>)
 8001500:	f003 fb30 	bl	8004b64 <HAL_GPIO_Init>
}
 8001504:	bf00      	nop
 8001506:	3798      	adds	r7, #152	; 0x98
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000524 	.word	0x20000524
 8001510:	40021000 	.word	0x40021000
 8001514:	50000100 	.word	0x50000100
 8001518:	48000800 	.word	0x48000800
 800151c:	48000400 	.word	0x48000400
 8001520:	50000400 	.word	0x50000400
 8001524:	20000528 	.word	0x20000528
 8001528:	50000500 	.word	0x50000500

0800152c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800152c:	b5b0      	push	{r4, r5, r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <MX_FREERTOS_Init+0x2c>)
 8001534:	1d3c      	adds	r4, r7, #4
 8001536:	461d      	mov	r5, r3
 8001538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800153a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800153c:	682b      	ldr	r3, [r5, #0]
 800153e:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	2100      	movs	r1, #0
 8001544:	4618      	mov	r0, r3
 8001546:	f00d fed9 	bl	800f2fc <osThreadCreate>
 800154a:	4603      	mov	r3, r0
 800154c:	4a03      	ldr	r2, [pc, #12]	; (800155c <MX_FREERTOS_Init+0x30>)
 800154e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001550:	bf00      	nop
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bdb0      	pop	{r4, r5, r7, pc}
 8001558:	08014f0c 	.word	0x08014f0c
 800155c:	2000052c 	.word	0x2000052c

08001560 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001568:	2001      	movs	r0, #1
 800156a:	f00d feee 	bl	800f34a <osDelay>
 800156e:	e7fb      	b.n	8001568 <StartDefaultTask+0x8>

08001570 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <MX_CORDIC_Init+0x20>)
 8001576:	4a07      	ldr	r2, [pc, #28]	; (8001594 <MX_CORDIC_Init+0x24>)
 8001578:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_CORDIC_Init+0x20>)
 800157c:	f003 f934 	bl	80047e8 <HAL_CORDIC_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001586:	f000 fbc1 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000530 	.word	0x20000530
 8001594:	40020c00 	.word	0x40020c00

08001598 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <HAL_CORDIC_MspInit+0x38>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d10b      	bne.n	80015c2 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80015aa:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <HAL_CORDIC_MspInit+0x3c>)
 80015ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ae:	4a09      	ldr	r2, [pc, #36]	; (80015d4 <HAL_CORDIC_MspInit+0x3c>)
 80015b0:	f043 0308 	orr.w	r3, r3, #8
 80015b4:	6493      	str	r3, [r2, #72]	; 0x48
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <HAL_CORDIC_MspInit+0x3c>)
 80015b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 80015c2:	bf00      	nop
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40020c00 	.word	0x40020c00
 80015d4:	40021000 	.word	0x40021000

080015d8 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_FMAC_Init+0x20>)
 80015de:	4a07      	ldr	r2, [pc, #28]	; (80015fc <MX_FMAC_Init+0x24>)
 80015e0:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_FMAC_Init+0x20>)
 80015e4:	f003 fa12 	bl	8004a0c <HAL_FMAC_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 80015ee:	f000 fb8d 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000558 	.word	0x20000558
 80015fc:	40021400 	.word	0x40021400

08001600 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <HAL_FMAC_MspInit+0x38>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d10b      	bne.n	800162a <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <HAL_FMAC_MspInit+0x3c>)
 8001614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001616:	4a09      	ldr	r2, [pc, #36]	; (800163c <HAL_FMAC_MspInit+0x3c>)
 8001618:	f043 0310 	orr.w	r3, r3, #16
 800161c:	6493      	str	r3, [r2, #72]	; 0x48
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <HAL_FMAC_MspInit+0x3c>)
 8001620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40021400 	.word	0x40021400
 800163c:	40021000 	.word	0x40021000

08001640 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ENC_BTN_A_Pin){
		//ENC_Button_Update(HAL_GPIO_ReadPin(ENC_BTN_B_GPIO_Port, ENC_BTN_B_Pin));
	}

}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08c      	sub	sp, #48	; 0x30
 800165c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	f107 031c 	add.w	r3, r7, #28
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800166e:	4b72      	ldr	r3, [pc, #456]	; (8001838 <MX_GPIO_Init+0x1e0>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	4a71      	ldr	r2, [pc, #452]	; (8001838 <MX_GPIO_Init+0x1e0>)
 8001674:	f043 0320 	orr.w	r3, r3, #32
 8001678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167a:	4b6f      	ldr	r3, [pc, #444]	; (8001838 <MX_GPIO_Init+0x1e0>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	f003 0320 	and.w	r3, r3, #32
 8001682:	61bb      	str	r3, [r7, #24]
 8001684:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001686:	4b6c      	ldr	r3, [pc, #432]	; (8001838 <MX_GPIO_Init+0x1e0>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	4a6b      	ldr	r2, [pc, #428]	; (8001838 <MX_GPIO_Init+0x1e0>)
 800168c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001692:	4b69      	ldr	r3, [pc, #420]	; (8001838 <MX_GPIO_Init+0x1e0>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169e:	4b66      	ldr	r3, [pc, #408]	; (8001838 <MX_GPIO_Init+0x1e0>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	4a65      	ldr	r2, [pc, #404]	; (8001838 <MX_GPIO_Init+0x1e0>)
 80016a4:	f043 0304 	orr.w	r3, r3, #4
 80016a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016aa:	4b63      	ldr	r3, [pc, #396]	; (8001838 <MX_GPIO_Init+0x1e0>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	4b60      	ldr	r3, [pc, #384]	; (8001838 <MX_GPIO_Init+0x1e0>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	4a5f      	ldr	r2, [pc, #380]	; (8001838 <MX_GPIO_Init+0x1e0>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c2:	4b5d      	ldr	r3, [pc, #372]	; (8001838 <MX_GPIO_Init+0x1e0>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ce:	4b5a      	ldr	r3, [pc, #360]	; (8001838 <MX_GPIO_Init+0x1e0>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	4a59      	ldr	r2, [pc, #356]	; (8001838 <MX_GPIO_Init+0x1e0>)
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016da:	4b57      	ldr	r3, [pc, #348]	; (8001838 <MX_GPIO_Init+0x1e0>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e6:	4b54      	ldr	r3, [pc, #336]	; (8001838 <MX_GPIO_Init+0x1e0>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	4a53      	ldr	r2, [pc, #332]	; (8001838 <MX_GPIO_Init+0x1e0>)
 80016ec:	f043 0308 	orr.w	r3, r3, #8
 80016f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f2:	4b51      	ldr	r3, [pc, #324]	; (8001838 <MX_GPIO_Init+0x1e0>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_ENABLE_GPIO_Port, PWR_ENABLE_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001704:	484d      	ldr	r0, [pc, #308]	; (800183c <MX_GPIO_Init+0x1e4>)
 8001706:	f003 fbaf 	bl	8004e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_1_GPIO_Port, USR_LED_1_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001714:	f003 fba8 	bl	8004e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USR_LED_2_Pin|USR_LED_3_Pin|USR_LED_4_Pin, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800171e:	4848      	ldr	r0, [pc, #288]	; (8001840 <MX_GPIO_Init+0x1e8>)
 8001720:	f003 fba2 	bl	8004e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_Pin;
 8001724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800172a:	2300      	movs	r3, #0
 800172c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 8001732:	f107 031c 	add.w	r3, r7, #28
 8001736:	4619      	mov	r1, r3
 8001738:	4842      	ldr	r0, [pc, #264]	; (8001844 <MX_GPIO_Init+0x1ec>)
 800173a:	f003 fa13 	bl	8004b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_2_Pin;
 800173e:	2310      	movs	r3, #16
 8001740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001742:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001748:	2301      	movs	r3, #1
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USR_BTN_2_GPIO_Port, &GPIO_InitStruct);
 800174c:	f107 031c 	add.w	r3, r7, #28
 8001750:	4619      	mov	r1, r3
 8001752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001756:	f003 fa05 	bl	8004b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 800175a:	2320      	movs	r3, #32
 800175c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800175e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	4619      	mov	r1, r3
 800176e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001772:	f003 f9f7 	bl	8004b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Nucleo_NRST_Pin;
 8001776:	2301      	movs	r3, #1
 8001778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800177a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800177e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Nucleo_NRST_GPIO_Port, &GPIO_InitStruct);
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	4619      	mov	r1, r3
 800178a:	482c      	ldr	r0, [pc, #176]	; (800183c <MX_GPIO_Init+0x1e4>)
 800178c:	f003 f9ea 	bl	8004b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_ENABLE_Pin;
 8001790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001796:	2301      	movs	r3, #1
 8001798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PWR_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	4619      	mov	r1, r3
 80017a8:	4824      	ldr	r0, [pc, #144]	; (800183c <MX_GPIO_Init+0x1e4>)
 80017aa:	f003 f9db 	bl	8004b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_1_Pin;
 80017ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USR_LED_1_GPIO_Port, &GPIO_InitStruct);
 80017c0:	f107 031c 	add.w	r3, r7, #28
 80017c4:	4619      	mov	r1, r3
 80017c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ca:	f003 f9cb 	bl	8004b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = USR_LED_2_Pin|USR_LED_3_Pin|USR_LED_4_Pin;
 80017ce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d4:	2301      	movs	r3, #1
 80017d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e0:	f107 031c 	add.w	r3, r7, #28
 80017e4:	4619      	mov	r1, r3
 80017e6:	4816      	ldr	r0, [pc, #88]	; (8001840 <MX_GPIO_Init+0x1e8>)
 80017e8:	f003 f9bc 	bl	8004b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_1_Pin;
 80017ec:	2304      	movs	r3, #4
 80017ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USR_BTN_1_GPIO_Port, &GPIO_InitStruct);
 80017fa:	f107 031c 	add.w	r3, r7, #28
 80017fe:	4619      	mov	r1, r3
 8001800:	4811      	ldr	r0, [pc, #68]	; (8001848 <MX_GPIO_Init+0x1f0>)
 8001802:	f003 f9af 	bl	8004b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Soft_NRST_Pin;
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800180a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800180e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001810:	2301      	movs	r3, #1
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Soft_NRST_GPIO_Port, &GPIO_InitStruct);
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4619      	mov	r1, r3
 800181a:	4808      	ldr	r0, [pc, #32]	; (800183c <MX_GPIO_Init+0x1e4>)
 800181c:	f003 f9a2 	bl	8004b64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001820:	2200      	movs	r2, #0
 8001822:	2105      	movs	r1, #5
 8001824:	2017      	movs	r0, #23
 8001826:	f003 f8c9 	bl	80049bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800182a:	2017      	movs	r0, #23
 800182c:	f003 f8e0 	bl	80049f0 <HAL_NVIC_EnableIRQ>

}
 8001830:	bf00      	nop
 8001832:	3730      	adds	r7, #48	; 0x30
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40021000 	.word	0x40021000
 800183c:	48000400 	.word	0x48000400
 8001840:	48000800 	.word	0x48000800
 8001844:	48001800 	.word	0x48001800
 8001848:	48000c00 	.word	0x48000c00

0800184c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <MX_I2C2_Init+0x74>)
 8001852:	4a1c      	ldr	r2, [pc, #112]	; (80018c4 <MX_I2C2_Init+0x78>)
 8001854:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8001856:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_I2C2_Init+0x74>)
 8001858:	4a1b      	ldr	r2, [pc, #108]	; (80018c8 <MX_I2C2_Init+0x7c>)
 800185a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <MX_I2C2_Init+0x74>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <MX_I2C2_Init+0x74>)
 8001864:	2201      	movs	r2, #1
 8001866:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <MX_I2C2_Init+0x74>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800186e:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <MX_I2C2_Init+0x74>)
 8001870:	2200      	movs	r2, #0
 8001872:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <MX_I2C2_Init+0x74>)
 8001876:	2200      	movs	r2, #0
 8001878:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <MX_I2C2_Init+0x74>)
 800187c:	2200      	movs	r2, #0
 800187e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <MX_I2C2_Init+0x74>)
 8001882:	2200      	movs	r2, #0
 8001884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001886:	480e      	ldr	r0, [pc, #56]	; (80018c0 <MX_I2C2_Init+0x74>)
 8001888:	f003 fb38 	bl	8004efc <HAL_I2C_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001892:	f000 fa3b 	bl	8001d0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001896:	2100      	movs	r1, #0
 8001898:	4809      	ldr	r0, [pc, #36]	; (80018c0 <MX_I2C2_Init+0x74>)
 800189a:	f004 f927 	bl	8005aec <HAL_I2CEx_ConfigAnalogFilter>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80018a4:	f000 fa32 	bl	8001d0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80018a8:	2100      	movs	r1, #0
 80018aa:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_I2C2_Init+0x74>)
 80018ac:	f004 f969 	bl	8005b82 <HAL_I2CEx_ConfigDigitalFilter>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80018b6:	f000 fa29 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000590 	.word	0x20000590
 80018c4:	40005800 	.word	0x40005800
 80018c8:	30a0a7fb 	.word	0x30a0a7fb

080018cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b09e      	sub	sp, #120	; 0x78
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e4:	f107 0310 	add.w	r3, r7, #16
 80018e8:	2254      	movs	r2, #84	; 0x54
 80018ea:	2100      	movs	r1, #0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f010 fb5b 	bl	8011fa8 <memset>
  if(i2cHandle->Instance==I2C2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a1f      	ldr	r2, [pc, #124]	; (8001974 <HAL_I2C_MspInit+0xa8>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d137      	bne.n	800196c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001900:	2300      	movs	r3, #0
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001904:	f107 0310 	add.w	r3, r7, #16
 8001908:	4618      	mov	r0, r3
 800190a:	f006 fcbf 	bl	800828c <HAL_RCCEx_PeriphCLKConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001914:	f000 f9fa 	bl	8001d0c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <HAL_I2C_MspInit+0xac>)
 800191a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191c:	4a16      	ldr	r2, [pc, #88]	; (8001978 <HAL_I2C_MspInit+0xac>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <HAL_I2C_MspInit+0xac>)
 8001926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001930:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001934:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001936:	2312      	movs	r3, #18
 8001938:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001942:	2304      	movs	r3, #4
 8001944:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001946:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800194a:	4619      	mov	r1, r3
 800194c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001950:	f003 f908 	bl	8004b64 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <HAL_I2C_MspInit+0xac>)
 8001956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001958:	4a07      	ldr	r2, [pc, #28]	; (8001978 <HAL_I2C_MspInit+0xac>)
 800195a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800195e:	6593      	str	r3, [r2, #88]	; 0x58
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_I2C_MspInit+0xac>)
 8001962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001964:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800196c:	bf00      	nop
 800196e:	3778      	adds	r7, #120	; 0x78
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40005800 	.word	0x40005800
 8001978:	40021000 	.word	0x40021000

0800197c <I2C_Scan>:
  /* USER CODE END I2C2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void I2C_Scan(I2C_HandleTypeDef* i2cHandle){
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	uint8_t i2c_Number = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	73fb      	strb	r3, [r7, #15]
	if(i2cHandle->Instance==I2C1) i2c_Number = 2;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a24      	ldr	r2, [pc, #144]	; (8001a20 <I2C_Scan+0xa4>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d101      	bne.n	8001996 <I2C_Scan+0x1a>
 8001992:	2302      	movs	r3, #2
 8001994:	73fb      	strb	r3, [r7, #15]
	if(i2cHandle->Instance==I2C2) i2c_Number = 2;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a22      	ldr	r2, [pc, #136]	; (8001a24 <I2C_Scan+0xa8>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d101      	bne.n	80019a4 <I2C_Scan+0x28>
 80019a0:	2302      	movs	r3, #2
 80019a2:	73fb      	strb	r3, [r7, #15]
	if(i2cHandle->Instance==I2C3) i2c_Number = 3;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a1f      	ldr	r2, [pc, #124]	; (8001a28 <I2C_Scan+0xac>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d101      	bne.n	80019b2 <I2C_Scan+0x36>
 80019ae:	2303      	movs	r3, #3
 80019b0:	73fb      	strb	r3, [r7, #15]
	printf("### Scanning I2C bus number %d ###\r\n", i2c_Number);
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	4619      	mov	r1, r3
 80019b6:	481d      	ldr	r0, [pc, #116]	; (8001a2c <I2C_Scan+0xb0>)
 80019b8:	f010 ff68 	bl	801288c <iprintf>
	for(uint16_t addr = 0x00; addr < 0x80; addr++){
 80019bc:	2300      	movs	r3, #0
 80019be:	81bb      	strh	r3, [r7, #12]
 80019c0:	e023      	b.n	8001a0a <I2C_Scan+0x8e>
		if(HAL_I2C_IsDeviceReady(i2cHandle, addr<<1, 1, HAL_MAX_DELAY) == HAL_OK){
 80019c2:	89bb      	ldrh	r3, [r7, #12]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	b299      	uxth	r1, r3
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019cc:	2201      	movs	r2, #1
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f003 fd32 	bl	8005438 <HAL_I2C_IsDeviceReady>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d105      	bne.n	80019e6 <I2C_Scan+0x6a>
			printf("0x%2x ", addr);
 80019da:	89bb      	ldrh	r3, [r7, #12]
 80019dc:	4619      	mov	r1, r3
 80019de:	4814      	ldr	r0, [pc, #80]	; (8001a30 <I2C_Scan+0xb4>)
 80019e0:	f010 ff54 	bl	801288c <iprintf>
 80019e4:	e002      	b.n	80019ec <I2C_Scan+0x70>
		}
		else{
			printf(" --  ");
 80019e6:	4813      	ldr	r0, [pc, #76]	; (8001a34 <I2C_Scan+0xb8>)
 80019e8:	f010 ff50 	bl	801288c <iprintf>
		}
		if((addr+1)%8 == 0){
 80019ec:	89bb      	ldrh	r3, [r7, #12]
 80019ee:	3301      	adds	r3, #1
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <I2C_Scan+0x82>
			printf("\r\n");
 80019f8:	480f      	ldr	r0, [pc, #60]	; (8001a38 <I2C_Scan+0xbc>)
 80019fa:	f010 ffcd 	bl	8012998 <puts>
		}
		HAL_Delay(1);
 80019fe:	2001      	movs	r0, #1
 8001a00:	f001 fdc6 	bl	8003590 <HAL_Delay>
	for(uint16_t addr = 0x00; addr < 0x80; addr++){
 8001a04:	89bb      	ldrh	r3, [r7, #12]
 8001a06:	3301      	adds	r3, #1
 8001a08:	81bb      	strh	r3, [r7, #12]
 8001a0a:	89bb      	ldrh	r3, [r7, #12]
 8001a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8001a0e:	d9d8      	bls.n	80019c2 <I2C_Scan+0x46>
	}
	printf("\r\n");
 8001a10:	4809      	ldr	r0, [pc, #36]	; (8001a38 <I2C_Scan+0xbc>)
 8001a12:	f010 ffc1 	bl	8012998 <puts>
}
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40005400 	.word	0x40005400
 8001a24:	40005800 	.word	0x40005800
 8001a28:	40007800 	.word	0x40007800
 8001a2c:	08014f20 	.word	0x08014f20
 8001a30:	08014f48 	.word	0x08014f48
 8001a34:	08014f50 	.word	0x08014f50
 8001a38:	08014f58 	.word	0x08014f58

08001a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af02      	add	r7, sp, #8
//	int uartTxSize = 0;
//	uint16_t bus_voltage_raw;
//	float bus_voltage;
//	int time = 0;
//	BaseType_t xReturned;
	TaskHandle_t xHandle_LCD, xHandle_Rotary, xHandle_LED, xHandle_TCN75A, xHandle_Fan = NULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a46:	f001 fd6c 	bl	8003522 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a4a:	f000 f8ef 	bl	8001c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a4e:	f7ff fe03 	bl	8001658 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001a52:	f7ff fa53 	bl	8000efc <MX_ADC1_Init>
  MX_ADC2_Init();
 8001a56:	f7ff fac9 	bl	8000fec <MX_ADC2_Init>
  MX_ADC3_Init();
 8001a5a:	f7ff fb2d 	bl	80010b8 <MX_ADC3_Init>
  MX_ADC4_Init();
 8001a5e:	f7ff fba3 	bl	80011a8 <MX_ADC4_Init>
  MX_CORDIC_Init();
 8001a62:	f7ff fd85 	bl	8001570 <MX_CORDIC_Init>
  MX_FMAC_Init();
 8001a66:	f7ff fdb7 	bl	80015d8 <MX_FMAC_Init>
  MX_I2C2_Init();
 8001a6a:	f7ff feef 	bl	800184c <MX_I2C2_Init>
  MX_TIM8_Init();
 8001a6e:	f000 fbb9 	bl	80021e4 <MX_TIM8_Init>
  MX_TIM15_Init();
 8001a72:	f000 fc4f 	bl	8002314 <MX_TIM15_Init>
  MX_TIM17_Init();
 8001a76:	f000 fd47 	bl	8002508 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8001a7a:	f000 ff29 	bl	80028d0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001a7e:	f000 ff73 	bl	8002968 <MX_USART3_UART_Init>
  MX_TIM16_Init();
 8001a82:	f000 fcc7 	bl	8002414 <MX_TIM16_Init>
  MX_TIM1_Init();
 8001a86:	f000 fae7 	bl	8002058 <MX_TIM1_Init>
  MX_USB_Device_Init();
 8001a8a:	f00f fd6f 	bl	801156c <MX_USB_Device_Init>
  MX_TIM3_Init();
 8001a8e:	f000 fb51 	bl	8002134 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  I2C_Scan(&hi2c2);
 8001a92:	4849      	ldr	r0, [pc, #292]	; (8001bb8 <main+0x17c>)
 8001a94:	f7ff ff72 	bl	800197c <I2C_Scan>
	printf("*****************************************\r\n"
 8001a98:	4848      	ldr	r0, [pc, #288]	; (8001bbc <main+0x180>)
 8001a9a:	f010 ff7d 	bl	8012998 <puts>
		   "* ENSEA INVERTER PROJECT                *\r\n"
		   "* Firmware revision 1.0                 *\r\n"
		   "* By Nicolas Papazoglou & Alexis Martin *\r\n"
		   "*****************************************\r\n");
	//I2C_Scan(&hi2c2);
	xUartMutex = xSemaphoreCreateMutex();
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f00d fdf3 	bl	800f68a <xQueueCreateMutex>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4a46      	ldr	r2, [pc, #280]	; (8001bc0 <main+0x184>)
 8001aa8:	6013      	str	r3, [r2, #0]
	xI2CMutex = xSemaphoreCreateMutex();
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f00d fded 	bl	800f68a <xQueueCreateMutex>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4a44      	ldr	r2, [pc, #272]	; (8001bc4 <main+0x188>)
 8001ab4:	6013      	str	r3, [r2, #0]
	xTemperatureQueue = xQueueCreate(1, sizeof(float));
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2104      	movs	r1, #4
 8001aba:	2001      	movs	r0, #1
 8001abc:	f00d fd76 	bl	800f5ac <xQueueGenericCreate>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4a41      	ldr	r2, [pc, #260]	; (8001bc8 <main+0x18c>)
 8001ac4:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(PWR_ENABLE_GPIO_Port, PWR_ENABLE_Pin, SET);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001acc:	483f      	ldr	r0, [pc, #252]	; (8001bcc <main+0x190>)
 8001ace:	f003 f9cb 	bl	8004e68 <HAL_GPIO_WritePin>
//	xTaskCreate(vTask_1, "Task_1", STACK_SIZE, NULL, 1, &xHandle_LCD);
//	xTaskCreate(vTask_2, "Task_2", STACK_SIZE, NULL, 2, &xHandle_LCD);

	if(pdPASS==xTaskCreate(vTask_LCD, "LCD_Task", STACK_SIZE, (void *) &hi2c2, LCD_Task_Priority, &xHandle_LCD)){
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	2304      	movs	r3, #4
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	4b36      	ldr	r3, [pc, #216]	; (8001bb8 <main+0x17c>)
 8001ade:	2280      	movs	r2, #128	; 0x80
 8001ae0:	493b      	ldr	r1, [pc, #236]	; (8001bd0 <main+0x194>)
 8001ae2:	483c      	ldr	r0, [pc, #240]	; (8001bd4 <main+0x198>)
 8001ae4:	f00e f9fc 	bl	800fee0 <xTaskCreate>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d103      	bne.n	8001af6 <main+0xba>
		printf("LCD_Task successfully created\r\n");
 8001aee:	483a      	ldr	r0, [pc, #232]	; (8001bd8 <main+0x19c>)
 8001af0:	f010 ff52 	bl	8012998 <puts>
 8001af4:	e002      	b.n	8001afc <main+0xc0>
	}
	else{
		printf("LCD_Task creation error\r\n");
 8001af6:	4839      	ldr	r0, [pc, #228]	; (8001bdc <main+0x1a0>)
 8001af8:	f010 ff4e 	bl	8012998 <puts>
	}

	if(pdPASS==xTaskCreate(vTask_RotaryEnc, "RotEncorder_Task", STACK_SIZE, (void *) &htim3, RotaryEnc_Task_Priority, &xHandle_Rotary)){
 8001afc:	f107 0310 	add.w	r3, r7, #16
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	2302      	movs	r3, #2
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	4b36      	ldr	r3, [pc, #216]	; (8001be0 <main+0x1a4>)
 8001b08:	2280      	movs	r2, #128	; 0x80
 8001b0a:	4936      	ldr	r1, [pc, #216]	; (8001be4 <main+0x1a8>)
 8001b0c:	4836      	ldr	r0, [pc, #216]	; (8001be8 <main+0x1ac>)
 8001b0e:	f00e f9e7 	bl	800fee0 <xTaskCreate>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d103      	bne.n	8001b20 <main+0xe4>
		printf("RotEncorder_Task successfully created\r\n");
 8001b18:	4834      	ldr	r0, [pc, #208]	; (8001bec <main+0x1b0>)
 8001b1a:	f010 ff3d 	bl	8012998 <puts>
 8001b1e:	e002      	b.n	8001b26 <main+0xea>
	}
	else{
		printf("RotEncorder_Task creation error\r\n");
 8001b20:	4833      	ldr	r0, [pc, #204]	; (8001bf0 <main+0x1b4>)
 8001b22:	f010 ff39 	bl	8012998 <puts>
	}

	if(pdPASS==xTaskCreate(vTask_LED, "LED_Task", STACK_SIZE, (void *) NULL, LED_Task_Priority, &xHandle_LED)){
 8001b26:	f107 030c 	add.w	r3, r7, #12
 8001b2a:	9301      	str	r3, [sp, #4]
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	2300      	movs	r3, #0
 8001b32:	2280      	movs	r2, #128	; 0x80
 8001b34:	492f      	ldr	r1, [pc, #188]	; (8001bf4 <main+0x1b8>)
 8001b36:	4830      	ldr	r0, [pc, #192]	; (8001bf8 <main+0x1bc>)
 8001b38:	f00e f9d2 	bl	800fee0 <xTaskCreate>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d103      	bne.n	8001b4a <main+0x10e>
		printf("LED_Task successfully created\r\n");
 8001b42:	482e      	ldr	r0, [pc, #184]	; (8001bfc <main+0x1c0>)
 8001b44:	f010 ff28 	bl	8012998 <puts>
 8001b48:	e002      	b.n	8001b50 <main+0x114>
	}
	else{
		printf("LED_Task creation error\r\n");
 8001b4a:	482d      	ldr	r0, [pc, #180]	; (8001c00 <main+0x1c4>)
 8001b4c:	f010 ff24 	bl	8012998 <puts>
	}

	if(pdPASS==xTaskCreate(vTask_TCN75A, "TCN75A_Task", STACK_SIZE, (void *) &hi2c2, TCN75A_Task_Priority, &xHandle_TCN75A)){
 8001b50:	f107 0308 	add.w	r3, r7, #8
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	2303      	movs	r3, #3
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <main+0x17c>)
 8001b5c:	2280      	movs	r2, #128	; 0x80
 8001b5e:	4929      	ldr	r1, [pc, #164]	; (8001c04 <main+0x1c8>)
 8001b60:	4829      	ldr	r0, [pc, #164]	; (8001c08 <main+0x1cc>)
 8001b62:	f00e f9bd 	bl	800fee0 <xTaskCreate>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d103      	bne.n	8001b74 <main+0x138>
		printf("TCN75A_Task successfully created\r\n");
 8001b6c:	4827      	ldr	r0, [pc, #156]	; (8001c0c <main+0x1d0>)
 8001b6e:	f010 ff13 	bl	8012998 <puts>
 8001b72:	e002      	b.n	8001b7a <main+0x13e>
	}
	else{
		printf("TCN75A_Task creation error\r\n");
 8001b74:	4826      	ldr	r0, [pc, #152]	; (8001c10 <main+0x1d4>)
 8001b76:	f010 ff0f 	bl	8012998 <puts>
	}

	if(pdPASS==xTaskCreate(vTask_Fan, "Fan_Task", STACK_SIZE, (void *) &htim16, Fan_Task_Priority, &xHandle_Fan)){
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	9301      	str	r3, [sp, #4]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <main+0x1d8>)
 8001b84:	2280      	movs	r2, #128	; 0x80
 8001b86:	4924      	ldr	r1, [pc, #144]	; (8001c18 <main+0x1dc>)
 8001b88:	4824      	ldr	r0, [pc, #144]	; (8001c1c <main+0x1e0>)
 8001b8a:	f00e f9a9 	bl	800fee0 <xTaskCreate>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d103      	bne.n	8001b9c <main+0x160>
		printf("Fan_Task successfully created\r\n");
 8001b94:	4822      	ldr	r0, [pc, #136]	; (8001c20 <main+0x1e4>)
 8001b96:	f010 feff 	bl	8012998 <puts>
 8001b9a:	e002      	b.n	8001ba2 <main+0x166>
	}
	else{
		printf("Fan_Task creation error\r\n");
 8001b9c:	4821      	ldr	r0, [pc, #132]	; (8001c24 <main+0x1e8>)
 8001b9e:	f010 fefb 	bl	8012998 <puts>
	}
	printf("Starting Scheduler... \r\n");
 8001ba2:	4821      	ldr	r0, [pc, #132]	; (8001c28 <main+0x1ec>)
 8001ba4:	f010 fef8 	bl	8012998 <puts>


//	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
//	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 8500);

	vTaskStartScheduler();
 8001ba8:	f00e fb00 	bl	80101ac <vTaskStartScheduler>
	//  HAL_GPIO_WritePin(PWR_ENABLE_GPIO_Port, PWR_ENABLE_Pin, SET);

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001bac:	f7ff fcbe 	bl	800152c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001bb0:	f00d fb9d 	bl	800f2ee <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <main+0x178>
 8001bb6:	bf00      	nop
 8001bb8:	20000590 	.word	0x20000590
 8001bbc:	08014fac 	.word	0x08014fac
 8001bc0:	200005dc 	.word	0x200005dc
 8001bc4:	200005e0 	.word	0x200005e0
 8001bc8:	200005e4 	.word	0x200005e4
 8001bcc:	48000400 	.word	0x48000400
 8001bd0:	08015084 	.word	0x08015084
 8001bd4:	08002ef9 	.word	0x08002ef9
 8001bd8:	08015090 	.word	0x08015090
 8001bdc:	080150b0 	.word	0x080150b0
 8001be0:	20000684 	.word	0x20000684
 8001be4:	080150cc 	.word	0x080150cc
 8001be8:	0800342d 	.word	0x0800342d
 8001bec:	080150e0 	.word	0x080150e0
 8001bf0:	08015108 	.word	0x08015108
 8001bf4:	0801512c 	.word	0x0801512c
 8001bf8:	0800336d 	.word	0x0800336d
 8001bfc:	08015138 	.word	0x08015138
 8001c00:	08015158 	.word	0x08015158
 8001c04:	08015174 	.word	0x08015174
 8001c08:	08002b35 	.word	0x08002b35
 8001c0c:	08015180 	.word	0x08015180
 8001c10:	080151a4 	.word	0x080151a4
 8001c14:	20000768 	.word	0x20000768
 8001c18:	080151c0 	.word	0x080151c0
 8001c1c:	08002d09 	.word	0x08002d09
 8001c20:	080151cc 	.word	0x080151cc
 8001c24:	080151ec 	.word	0x080151ec
 8001c28:	08015208 	.word	0x08015208

08001c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b094      	sub	sp, #80	; 0x50
 8001c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c32:	f107 0318 	add.w	r3, r7, #24
 8001c36:	2238      	movs	r2, #56	; 0x38
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f010 f9b4 	bl	8011fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	60da      	str	r2, [r3, #12]
 8001c4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f005 fd16 	bl	8007680 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001c54:	2321      	movs	r3, #33	; 0x21
 8001c56:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c5c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c62:	2302      	movs	r3, #2
 8001c64:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c66:	2303      	movs	r3, #3
 8001c68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001c6e:	2355      	movs	r3, #85	; 0x55
 8001c70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c72:	2302      	movs	r3, #2
 8001c74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001c76:	2304      	movs	r3, #4
 8001c78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c7e:	f107 0318 	add.w	r3, r7, #24
 8001c82:	4618      	mov	r0, r3
 8001c84:	f005 fda0 	bl	80077c8 <HAL_RCC_OscConfig>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001c8e:	f000 f83d 	bl	8001d0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c92:	230f      	movs	r3, #15
 8001c94:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c96:	2303      	movs	r3, #3
 8001c98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	2104      	movs	r1, #4
 8001caa:	4618      	mov	r0, r3
 8001cac:	f006 f8a4 	bl	8007df8 <HAL_RCC_ClockConfig>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001cb6:	f000 f829 	bl	8001d0c <Error_Handler>
  }
}
 8001cba:	bf00      	nop
 8001cbc:	3750      	adds	r7, #80	; 0x50
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001ccc:	1d39      	adds	r1, r7, #4
 8001cce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	4803      	ldr	r0, [pc, #12]	; (8001ce4 <__io_putchar+0x20>)
 8001cd6:	f008 fdc1 	bl	800a85c <HAL_UART_Transmit>

	return ch;
 8001cda:	687b      	ldr	r3, [r7, #4]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000890 	.word	0x20000890

08001ce8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d101      	bne.n	8001cfe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cfa:	f001 fc2b 	bl	8003554 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40001000 	.word	0x40001000

08001d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d10:	b672      	cpsid	i
}
 8001d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d14:	e7fe      	b.n	8001d14 <Error_Handler+0x8>
	...

08001d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <HAL_MspInit+0x4c>)
 8001d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d22:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <HAL_MspInit+0x4c>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6613      	str	r3, [r2, #96]	; 0x60
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <HAL_MspInit+0x4c>)
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	607b      	str	r3, [r7, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <HAL_MspInit+0x4c>)
 8001d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <HAL_MspInit+0x4c>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d40:	6593      	str	r3, [r2, #88]	; 0x58
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <HAL_MspInit+0x4c>)
 8001d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	210f      	movs	r1, #15
 8001d52:	f06f 0001 	mvn.w	r0, #1
 8001d56:	f002 fe31 	bl	80049bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000

08001d68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08c      	sub	sp, #48	; 0x30
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d78:	4b2c      	ldr	r3, [pc, #176]	; (8001e2c <HAL_InitTick+0xc4>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	4a2b      	ldr	r2, [pc, #172]	; (8001e2c <HAL_InitTick+0xc4>)
 8001d7e:	f043 0310 	orr.w	r3, r3, #16
 8001d82:	6593      	str	r3, [r2, #88]	; 0x58
 8001d84:	4b29      	ldr	r3, [pc, #164]	; (8001e2c <HAL_InitTick+0xc4>)
 8001d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d90:	f107 020c 	add.w	r2, r7, #12
 8001d94:	f107 0310 	add.w	r3, r7, #16
 8001d98:	4611      	mov	r1, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f006 fa00 	bl	80081a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001da0:	f006 f9d2 	bl	8008148 <HAL_RCC_GetPCLK1Freq>
 8001da4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da8:	4a21      	ldr	r2, [pc, #132]	; (8001e30 <HAL_InitTick+0xc8>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	0c9b      	lsrs	r3, r3, #18
 8001db0:	3b01      	subs	r3, #1
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001db4:	4b1f      	ldr	r3, [pc, #124]	; (8001e34 <HAL_InitTick+0xcc>)
 8001db6:	4a20      	ldr	r2, [pc, #128]	; (8001e38 <HAL_InitTick+0xd0>)
 8001db8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001dba:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <HAL_InitTick+0xcc>)
 8001dbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dc0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001dc2:	4a1c      	ldr	r2, [pc, #112]	; (8001e34 <HAL_InitTick+0xcc>)
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <HAL_InitTick+0xcc>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dce:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_InitTick+0xcc>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001dd4:	4817      	ldr	r0, [pc, #92]	; (8001e34 <HAL_InitTick+0xcc>)
 8001dd6:	f006 fca7 	bl	8008728 <HAL_TIM_Base_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001de0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d11b      	bne.n	8001e20 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001de8:	4812      	ldr	r0, [pc, #72]	; (8001e34 <HAL_InitTick+0xcc>)
 8001dea:	f006 fcf5 	bl	80087d8 <HAL_TIM_Base_Start_IT>
 8001dee:	4603      	mov	r3, r0
 8001df0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001df4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d111      	bne.n	8001e20 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dfc:	2036      	movs	r0, #54	; 0x36
 8001dfe:	f002 fdf7 	bl	80049f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b0f      	cmp	r3, #15
 8001e06:	d808      	bhi.n	8001e1a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	2036      	movs	r0, #54	; 0x36
 8001e0e:	f002 fdd5 	bl	80049bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e12:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <HAL_InitTick+0xd4>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	e002      	b.n	8001e20 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001e20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3730      	adds	r7, #48	; 0x30
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	431bde83 	.word	0x431bde83
 8001e34:	200005e8 	.word	0x200005e8
 8001e38:	40001000 	.word	0x40001000
 8001e3c:	20000004 	.word	0x20000004

08001e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <NMI_Handler+0x4>

08001e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <HardFault_Handler+0x4>

08001e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <MemManage_Handler+0x4>

08001e52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e56:	e7fe      	b.n	8001e56 <BusFault_Handler+0x4>

08001e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <UsageFault_Handler+0x4>

08001e5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <USB_LP_IRQHandler+0x10>)
 8001e72:	f003 ffd9 	bl	8005e28 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20002f88 	.word	0x20002f88

08001e80 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_Pin);
 8001e84:	2020      	movs	r0, #32
 8001e86:	f003 f821 	bl	8004ecc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_B_Pin);
 8001e8a:	2080      	movs	r0, #128	; 0x80
 8001e8c:	f003 f81e 	bl	8004ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <TIM6_DAC_IRQHandler+0x10>)
 8001e9a:	f007 f81e 	bl	8008eda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	200005e8 	.word	0x200005e8

08001ea8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
	return 1;
 8001eac:	2301      	movs	r3, #1
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <_kill>:

int _kill(int pid, int sig)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ec2:	f010 f839 	bl	8011f38 <__errno>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2216      	movs	r2, #22
 8001eca:	601a      	str	r2, [r3, #0]
	return -1;
 8001ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <_exit>:

void _exit (int status)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ee0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff ffe7 	bl	8001eb8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001eea:	e7fe      	b.n	8001eea <_exit+0x12>

08001eec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	e00a      	b.n	8001f14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001efe:	f3af 8000 	nop.w
 8001f02:	4601      	mov	r1, r0
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	60ba      	str	r2, [r7, #8]
 8001f0a:	b2ca      	uxtb	r2, r1
 8001f0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	3301      	adds	r3, #1
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	dbf0      	blt.n	8001efe <_read+0x12>
	}

return len;
 8001f1c:	687b      	ldr	r3, [r7, #4]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b086      	sub	sp, #24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	e009      	b.n	8001f4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	60ba      	str	r2, [r7, #8]
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff febf 	bl	8001cc4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	dbf1      	blt.n	8001f38 <_write+0x12>
	}
	return len;
 8001f54:	687b      	ldr	r3, [r7, #4]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <_close>:

int _close(int file)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
	return -1;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f86:	605a      	str	r2, [r3, #4]
	return 0;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <_isatty>:

int _isatty(int file)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
	return 1;
 8001f9e:	2301      	movs	r3, #1
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
	return 0;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fd0:	4a14      	ldr	r2, [pc, #80]	; (8002024 <_sbrk+0x5c>)
 8001fd2:	4b15      	ldr	r3, [pc, #84]	; (8002028 <_sbrk+0x60>)
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fdc:	4b13      	ldr	r3, [pc, #76]	; (800202c <_sbrk+0x64>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d102      	bne.n	8001fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <_sbrk+0x64>)
 8001fe6:	4a12      	ldr	r2, [pc, #72]	; (8002030 <_sbrk+0x68>)
 8001fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fea:	4b10      	ldr	r3, [pc, #64]	; (800202c <_sbrk+0x64>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d207      	bcs.n	8002008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ff8:	f00f ff9e 	bl	8011f38 <__errno>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	220c      	movs	r2, #12
 8002000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002006:	e009      	b.n	800201c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <_sbrk+0x64>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800200e:	4b07      	ldr	r3, [pc, #28]	; (800202c <_sbrk+0x64>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	4a05      	ldr	r2, [pc, #20]	; (800202c <_sbrk+0x64>)
 8002018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800201a:	68fb      	ldr	r3, [r7, #12]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20020000 	.word	0x20020000
 8002028:	00000400 	.word	0x00000400
 800202c:	20000634 	.word	0x20000634
 8002030:	200034b0 	.word	0x200034b0

08002034 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <SystemInit+0x20>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203e:	4a05      	ldr	r2, [pc, #20]	; (8002054 <SystemInit+0x20>)
 8002040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08c      	sub	sp, #48	; 0x30
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205e:	f107 0320 	add.w	r3, r7, #32
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 800206c:	f107 0310 	add.w	r3, r7, #16
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002084:	4b29      	ldr	r3, [pc, #164]	; (800212c <MX_TIM1_Init+0xd4>)
 8002086:	4a2a      	ldr	r2, [pc, #168]	; (8002130 <MX_TIM1_Init+0xd8>)
 8002088:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800208a:	4b28      	ldr	r3, [pc, #160]	; (800212c <MX_TIM1_Init+0xd4>)
 800208c:	2200      	movs	r2, #0
 800208e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002090:	4b26      	ldr	r3, [pc, #152]	; (800212c <MX_TIM1_Init+0xd4>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002096:	4b25      	ldr	r3, [pc, #148]	; (800212c <MX_TIM1_Init+0xd4>)
 8002098:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800209c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800209e:	4b23      	ldr	r3, [pc, #140]	; (800212c <MX_TIM1_Init+0xd4>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020a4:	4b21      	ldr	r3, [pc, #132]	; (800212c <MX_TIM1_Init+0xd4>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020aa:	4b20      	ldr	r3, [pc, #128]	; (800212c <MX_TIM1_Init+0xd4>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020b0:	481e      	ldr	r0, [pc, #120]	; (800212c <MX_TIM1_Init+0xd4>)
 80020b2:	f006 fb39 	bl	8008728 <HAL_TIM_Base_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80020bc:	f7ff fe26 	bl	8001d0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020c6:	f107 0320 	add.w	r3, r7, #32
 80020ca:	4619      	mov	r1, r3
 80020cc:	4817      	ldr	r0, [pc, #92]	; (800212c <MX_TIM1_Init+0xd4>)
 80020ce:	f007 fa33 	bl	8009538 <HAL_TIM_ConfigClockSource>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80020d8:	f7ff fe18 	bl	8001d0c <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020dc:	2300      	movs	r3, #0
 80020de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim1, &sConfig) != HAL_OK)
 80020ec:	f107 0310 	add.w	r3, r7, #16
 80020f0:	4619      	mov	r1, r3
 80020f2:	480e      	ldr	r0, [pc, #56]	; (800212c <MX_TIM1_Init+0xd4>)
 80020f4:	f008 f91b 	bl	800a32e <HAL_TIMEx_HallSensor_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80020fe:	f7ff fe05 	bl	8001d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8002102:	2350      	movs	r3, #80	; 0x50
 8002104:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800210e:	1d3b      	adds	r3, r7, #4
 8002110:	4619      	mov	r1, r3
 8002112:	4806      	ldr	r0, [pc, #24]	; (800212c <MX_TIM1_Init+0xd4>)
 8002114:	f008 f9c4 	bl	800a4a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800211e:	f7ff fdf5 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002122:	bf00      	nop
 8002124:	3730      	adds	r7, #48	; 0x30
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000638 	.word	0x20000638
 8002130:	40012c00 	.word	0x40012c00

08002134 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08c      	sub	sp, #48	; 0x30
 8002138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800213a:	f107 030c 	add.w	r3, r7, #12
 800213e:	2224      	movs	r2, #36	; 0x24
 8002140:	2100      	movs	r1, #0
 8002142:	4618      	mov	r0, r3
 8002144:	f00f ff30 	bl	8011fa8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002148:	463b      	mov	r3, r7
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	605a      	str	r2, [r3, #4]
 8002150:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002152:	4b21      	ldr	r3, [pc, #132]	; (80021d8 <MX_TIM3_Init+0xa4>)
 8002154:	4a21      	ldr	r2, [pc, #132]	; (80021dc <MX_TIM3_Init+0xa8>)
 8002156:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002158:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <MX_TIM3_Init+0xa4>)
 800215a:	2200      	movs	r2, #0
 800215c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215e:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <MX_TIM3_Init+0xa4>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002164:	4b1c      	ldr	r3, [pc, #112]	; (80021d8 <MX_TIM3_Init+0xa4>)
 8002166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800216a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800216c:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <MX_TIM3_Init+0xa4>)
 800216e:	2200      	movs	r2, #0
 8002170:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002172:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <MX_TIM3_Init+0xa4>)
 8002174:	2200      	movs	r2, #0
 8002176:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_X1_TI1;
 8002178:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <MX_TIM3_Init+0xac>)
 800217a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800217c:	2300      	movs	r3, #0
 800217e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002180:	2301      	movs	r3, #1
 8002182:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002184:	2300      	movs	r3, #0
 8002186:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800218c:	2300      	movs	r3, #0
 800218e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002190:	2301      	movs	r3, #1
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002194:	2300      	movs	r3, #0
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	4619      	mov	r1, r3
 80021a2:	480d      	ldr	r0, [pc, #52]	; (80021d8 <MX_TIM3_Init+0xa4>)
 80021a4:	f006 fd65 	bl	8008c72 <HAL_TIM_Encoder_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80021ae:	f7ff fdad 	bl	8001d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b2:	2300      	movs	r3, #0
 80021b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021ba:	463b      	mov	r3, r7
 80021bc:	4619      	mov	r1, r3
 80021be:	4806      	ldr	r0, [pc, #24]	; (80021d8 <MX_TIM3_Init+0xa4>)
 80021c0:	f008 f96e 	bl	800a4a0 <HAL_TIMEx_MasterConfigSynchronization>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80021ca:	f7ff fd9f 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021ce:	bf00      	nop
 80021d0:	3730      	adds	r7, #48	; 0x30
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000684 	.word	0x20000684
 80021dc:	40000400 	.word	0x40000400
 80021e0:	00010006 	.word	0x00010006

080021e4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08c      	sub	sp, #48	; 0x30
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ea:	f107 0320 	add.w	r3, r7, #32
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	605a      	str	r2, [r3, #4]
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002204:	1d3b      	adds	r3, r7, #4
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002210:	4b3e      	ldr	r3, [pc, #248]	; (800230c <MX_TIM8_Init+0x128>)
 8002212:	4a3f      	ldr	r2, [pc, #252]	; (8002310 <MX_TIM8_Init+0x12c>)
 8002214:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002216:	4b3d      	ldr	r3, [pc, #244]	; (800230c <MX_TIM8_Init+0x128>)
 8002218:	2200      	movs	r2, #0
 800221a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800221c:	4b3b      	ldr	r3, [pc, #236]	; (800230c <MX_TIM8_Init+0x128>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002222:	4b3a      	ldr	r3, [pc, #232]	; (800230c <MX_TIM8_Init+0x128>)
 8002224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002228:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800222a:	4b38      	ldr	r3, [pc, #224]	; (800230c <MX_TIM8_Init+0x128>)
 800222c:	2200      	movs	r2, #0
 800222e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002230:	4b36      	ldr	r3, [pc, #216]	; (800230c <MX_TIM8_Init+0x128>)
 8002232:	2200      	movs	r2, #0
 8002234:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002236:	4b35      	ldr	r3, [pc, #212]	; (800230c <MX_TIM8_Init+0x128>)
 8002238:	2200      	movs	r2, #0
 800223a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800223c:	4833      	ldr	r0, [pc, #204]	; (800230c <MX_TIM8_Init+0x128>)
 800223e:	f006 fa73 	bl	8008728 <HAL_TIM_Base_Init>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8002248:	f7ff fd60 	bl	8001d0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800224c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002250:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002252:	f107 0320 	add.w	r3, r7, #32
 8002256:	4619      	mov	r1, r3
 8002258:	482c      	ldr	r0, [pc, #176]	; (800230c <MX_TIM8_Init+0x128>)
 800225a:	f007 f96d 	bl	8009538 <HAL_TIM_ConfigClockSource>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002264:	f7ff fd52 	bl	8001d0c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8002268:	4828      	ldr	r0, [pc, #160]	; (800230c <MX_TIM8_Init+0x128>)
 800226a:	f006 fca1 	bl	8008bb0 <HAL_TIM_IC_Init>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8002274:	f7ff fd4a 	bl	8001d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800227c:	2300      	movs	r3, #0
 800227e:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002280:	2300      	movs	r3, #0
 8002282:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	4619      	mov	r1, r3
 800228a:	4820      	ldr	r0, [pc, #128]	; (800230c <MX_TIM8_Init+0x128>)
 800228c:	f008 f908 	bl	800a4a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8002296:	f7ff fd39 	bl	8001d0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800229a:	2300      	movs	r3, #0
 800229c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800229e:	2301      	movs	r3, #1
 80022a0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	2200      	movs	r2, #0
 80022ae:	4619      	mov	r1, r3
 80022b0:	4816      	ldr	r0, [pc, #88]	; (800230c <MX_TIM8_Init+0x128>)
 80022b2:	f006 ff91 	bl	80091d8 <HAL_TIM_IC_ConfigChannel>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 80022bc:	f7ff fd26 	bl	8001d0c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	2204      	movs	r2, #4
 80022c4:	4619      	mov	r1, r3
 80022c6:	4811      	ldr	r0, [pc, #68]	; (800230c <MX_TIM8_Init+0x128>)
 80022c8:	f006 ff86 	bl	80091d8 <HAL_TIM_IC_ConfigChannel>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 80022d2:	f7ff fd1b 	bl	8001d0c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	2208      	movs	r2, #8
 80022da:	4619      	mov	r1, r3
 80022dc:	480b      	ldr	r0, [pc, #44]	; (800230c <MX_TIM8_Init+0x128>)
 80022de:	f006 ff7b 	bl	80091d8 <HAL_TIM_IC_ConfigChannel>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80022e8:	f7ff fd10 	bl	8001d0c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	220c      	movs	r2, #12
 80022f0:	4619      	mov	r1, r3
 80022f2:	4806      	ldr	r0, [pc, #24]	; (800230c <MX_TIM8_Init+0x128>)
 80022f4:	f006 ff70 	bl	80091d8 <HAL_TIM_IC_ConfigChannel>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 80022fe:	f7ff fd05 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002302:	bf00      	nop
 8002304:	3730      	adds	r7, #48	; 0x30
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	200006d0 	.word	0x200006d0
 8002310:	40013400 	.word	0x40013400

08002314 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08c      	sub	sp, #48	; 0x30
 8002318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800231a:	f107 0320 	add.w	r3, r7, #32
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002334:	1d3b      	adds	r3, r7, #4
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	605a      	str	r2, [r3, #4]
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002340:	4b32      	ldr	r3, [pc, #200]	; (800240c <MX_TIM15_Init+0xf8>)
 8002342:	4a33      	ldr	r2, [pc, #204]	; (8002410 <MX_TIM15_Init+0xfc>)
 8002344:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002346:	4b31      	ldr	r3, [pc, #196]	; (800240c <MX_TIM15_Init+0xf8>)
 8002348:	2200      	movs	r2, #0
 800234a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800234c:	4b2f      	ldr	r3, [pc, #188]	; (800240c <MX_TIM15_Init+0xf8>)
 800234e:	2200      	movs	r2, #0
 8002350:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002352:	4b2e      	ldr	r3, [pc, #184]	; (800240c <MX_TIM15_Init+0xf8>)
 8002354:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002358:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800235a:	4b2c      	ldr	r3, [pc, #176]	; (800240c <MX_TIM15_Init+0xf8>)
 800235c:	2200      	movs	r2, #0
 800235e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002360:	4b2a      	ldr	r3, [pc, #168]	; (800240c <MX_TIM15_Init+0xf8>)
 8002362:	2200      	movs	r2, #0
 8002364:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002366:	4b29      	ldr	r3, [pc, #164]	; (800240c <MX_TIM15_Init+0xf8>)
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800236c:	4827      	ldr	r0, [pc, #156]	; (800240c <MX_TIM15_Init+0xf8>)
 800236e:	f006 f9db 	bl	8008728 <HAL_TIM_Base_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM15_Init+0x68>
  {
    Error_Handler();
 8002378:	f7ff fcc8 	bl	8001d0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800237c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002380:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002382:	f107 0320 	add.w	r3, r7, #32
 8002386:	4619      	mov	r1, r3
 8002388:	4820      	ldr	r0, [pc, #128]	; (800240c <MX_TIM15_Init+0xf8>)
 800238a:	f007 f8d5 	bl	8009538 <HAL_TIM_ConfigClockSource>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM15_Init+0x84>
  {
    Error_Handler();
 8002394:	f7ff fcba 	bl	8001d0c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8002398:	481c      	ldr	r0, [pc, #112]	; (800240c <MX_TIM15_Init+0xf8>)
 800239a:	f006 fc09 	bl	8008bb0 <HAL_TIM_IC_Init>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80023a4:	f7ff fcb2 	bl	8001d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	4619      	mov	r1, r3
 80023b6:	4815      	ldr	r0, [pc, #84]	; (800240c <MX_TIM15_Init+0xf8>)
 80023b8:	f008 f872 	bl	800a4a0 <HAL_TIMEx_MasterConfigSynchronization>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_TIM15_Init+0xb2>
  {
    Error_Handler();
 80023c2:	f7ff fca3 	bl	8001d0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023c6:	2300      	movs	r3, #0
 80023c8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80023ca:	2301      	movs	r3, #1
 80023cc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	2200      	movs	r2, #0
 80023da:	4619      	mov	r1, r3
 80023dc:	480b      	ldr	r0, [pc, #44]	; (800240c <MX_TIM15_Init+0xf8>)
 80023de:	f006 fefb 	bl	80091d8 <HAL_TIM_IC_ConfigChannel>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 80023e8:	f7ff fc90 	bl	8001d0c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	2204      	movs	r2, #4
 80023f0:	4619      	mov	r1, r3
 80023f2:	4806      	ldr	r0, [pc, #24]	; (800240c <MX_TIM15_Init+0xf8>)
 80023f4:	f006 fef0 	bl	80091d8 <HAL_TIM_IC_ConfigChannel>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM15_Init+0xee>
  {
    Error_Handler();
 80023fe:	f7ff fc85 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002402:	bf00      	nop
 8002404:	3730      	adds	r7, #48	; 0x30
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	2000071c 	.word	0x2000071c
 8002410:	40014000 	.word	0x40014000

08002414 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b094      	sub	sp, #80	; 0x50
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800241a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	605a      	str	r2, [r3, #4]
 8002424:	609a      	str	r2, [r3, #8]
 8002426:	60da      	str	r2, [r3, #12]
 8002428:	611a      	str	r2, [r3, #16]
 800242a:	615a      	str	r2, [r3, #20]
 800242c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800242e:	463b      	mov	r3, r7
 8002430:	2234      	movs	r2, #52	; 0x34
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f00f fdb7 	bl	8011fa8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800243a:	4b31      	ldr	r3, [pc, #196]	; (8002500 <MX_TIM16_Init+0xec>)
 800243c:	4a31      	ldr	r2, [pc, #196]	; (8002504 <MX_TIM16_Init+0xf0>)
 800243e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002440:	4b2f      	ldr	r3, [pc, #188]	; (8002500 <MX_TIM16_Init+0xec>)
 8002442:	2200      	movs	r2, #0
 8002444:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002446:	4b2e      	ldr	r3, [pc, #184]	; (8002500 <MX_TIM16_Init+0xec>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8500;
 800244c:	4b2c      	ldr	r3, [pc, #176]	; (8002500 <MX_TIM16_Init+0xec>)
 800244e:	f242 1234 	movw	r2, #8500	; 0x2134
 8002452:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002454:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <MX_TIM16_Init+0xec>)
 8002456:	2200      	movs	r2, #0
 8002458:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800245a:	4b29      	ldr	r3, [pc, #164]	; (8002500 <MX_TIM16_Init+0xec>)
 800245c:	2200      	movs	r2, #0
 800245e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002460:	4b27      	ldr	r3, [pc, #156]	; (8002500 <MX_TIM16_Init+0xec>)
 8002462:	2280      	movs	r2, #128	; 0x80
 8002464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002466:	4826      	ldr	r0, [pc, #152]	; (8002500 <MX_TIM16_Init+0xec>)
 8002468:	f006 f95e 	bl	8008728 <HAL_TIM_Base_Init>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002472:	f7ff fc4b 	bl	8001d0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002476:	4822      	ldr	r0, [pc, #136]	; (8002500 <MX_TIM16_Init+0xec>)
 8002478:	f006 fa26 	bl	80088c8 <HAL_TIM_PWM_Init>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002482:	f7ff fc43 	bl	8001d0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002486:	2360      	movs	r3, #96	; 0x60
 8002488:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800248e:	2300      	movs	r3, #0
 8002490:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002492:	2300      	movs	r3, #0
 8002494:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002496:	2300      	movs	r3, #0
 8002498:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800249e:	2300      	movs	r3, #0
 80024a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024a6:	2200      	movs	r2, #0
 80024a8:	4619      	mov	r1, r3
 80024aa:	4815      	ldr	r0, [pc, #84]	; (8002500 <MX_TIM16_Init+0xec>)
 80024ac:	f006 ff30 	bl	8009310 <HAL_TIM_PWM_ConfigChannel>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80024b6:	f7ff fc29 	bl	8001d0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024be:	2300      	movs	r3, #0
 80024c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80024dc:	463b      	mov	r3, r7
 80024de:	4619      	mov	r1, r3
 80024e0:	4807      	ldr	r0, [pc, #28]	; (8002500 <MX_TIM16_Init+0xec>)
 80024e2:	f008 f873 	bl	800a5cc <HAL_TIMEx_ConfigBreakDeadTime>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80024ec:	f7ff fc0e 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80024f0:	4803      	ldr	r0, [pc, #12]	; (8002500 <MX_TIM16_Init+0xec>)
 80024f2:	f000 f991 	bl	8002818 <HAL_TIM_MspPostInit>

}
 80024f6:	bf00      	nop
 80024f8:	3750      	adds	r7, #80	; 0x50
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000768 	.word	0x20000768
 8002504:	40014400 	.word	0x40014400

08002508 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b094      	sub	sp, #80	; 0x50
 800250c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800250e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	609a      	str	r2, [r3, #8]
 800251a:	60da      	str	r2, [r3, #12]
 800251c:	611a      	str	r2, [r3, #16]
 800251e:	615a      	str	r2, [r3, #20]
 8002520:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002522:	463b      	mov	r3, r7
 8002524:	2234      	movs	r2, #52	; 0x34
 8002526:	2100      	movs	r1, #0
 8002528:	4618      	mov	r0, r3
 800252a:	f00f fd3d 	bl	8011fa8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800252e:	4b30      	ldr	r3, [pc, #192]	; (80025f0 <MX_TIM17_Init+0xe8>)
 8002530:	4a30      	ldr	r2, [pc, #192]	; (80025f4 <MX_TIM17_Init+0xec>)
 8002532:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 9-1;
 8002534:	4b2e      	ldr	r3, [pc, #184]	; (80025f0 <MX_TIM17_Init+0xe8>)
 8002536:	2208      	movs	r2, #8
 8002538:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800253a:	4b2d      	ldr	r3, [pc, #180]	; (80025f0 <MX_TIM17_Init+0xe8>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 255;
 8002540:	4b2b      	ldr	r3, [pc, #172]	; (80025f0 <MX_TIM17_Init+0xe8>)
 8002542:	22ff      	movs	r2, #255	; 0xff
 8002544:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002546:	4b2a      	ldr	r3, [pc, #168]	; (80025f0 <MX_TIM17_Init+0xe8>)
 8002548:	2200      	movs	r2, #0
 800254a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800254c:	4b28      	ldr	r3, [pc, #160]	; (80025f0 <MX_TIM17_Init+0xe8>)
 800254e:	2200      	movs	r2, #0
 8002550:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002552:	4b27      	ldr	r3, [pc, #156]	; (80025f0 <MX_TIM17_Init+0xe8>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002558:	4825      	ldr	r0, [pc, #148]	; (80025f0 <MX_TIM17_Init+0xe8>)
 800255a:	f006 f8e5 	bl	8008728 <HAL_TIM_Base_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8002564:	f7ff fbd2 	bl	8001d0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002568:	4821      	ldr	r0, [pc, #132]	; (80025f0 <MX_TIM17_Init+0xe8>)
 800256a:	f006 f9ad 	bl	80088c8 <HAL_TIM_PWM_Init>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8002574:	f7ff fbca 	bl	8001d0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002578:	2360      	movs	r3, #96	; 0x60
 800257a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002580:	2300      	movs	r3, #0
 8002582:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002584:	2300      	movs	r3, #0
 8002586:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002588:	2300      	movs	r3, #0
 800258a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800258c:	2300      	movs	r3, #0
 800258e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002590:	2300      	movs	r3, #0
 8002592:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002594:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002598:	2200      	movs	r2, #0
 800259a:	4619      	mov	r1, r3
 800259c:	4814      	ldr	r0, [pc, #80]	; (80025f0 <MX_TIM17_Init+0xe8>)
 800259e:	f006 feb7 	bl	8009310 <HAL_TIM_PWM_ConfigChannel>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 80025a8:	f7ff fbb0 	bl	8001d0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025b0:	2300      	movs	r3, #0
 80025b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025ca:	2300      	movs	r3, #0
 80025cc:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80025ce:	463b      	mov	r3, r7
 80025d0:	4619      	mov	r1, r3
 80025d2:	4807      	ldr	r0, [pc, #28]	; (80025f0 <MX_TIM17_Init+0xe8>)
 80025d4:	f007 fffa 	bl	800a5cc <HAL_TIMEx_ConfigBreakDeadTime>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 80025de:	f7ff fb95 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80025e2:	4803      	ldr	r0, [pc, #12]	; (80025f0 <MX_TIM17_Init+0xe8>)
 80025e4:	f000 f918 	bl	8002818 <HAL_TIM_MspPostInit>

}
 80025e8:	bf00      	nop
 80025ea:	3750      	adds	r7, #80	; 0x50
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	200007b4 	.word	0x200007b4
 80025f4:	40014800 	.word	0x40014800

080025f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b090      	sub	sp, #64	; 0x40
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a58      	ldr	r2, [pc, #352]	; (8002778 <HAL_TIM_Base_MspInit+0x180>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d128      	bne.n	800266c <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800261a:	4b58      	ldr	r3, [pc, #352]	; (800277c <HAL_TIM_Base_MspInit+0x184>)
 800261c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261e:	4a57      	ldr	r2, [pc, #348]	; (800277c <HAL_TIM_Base_MspInit+0x184>)
 8002620:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002624:	6613      	str	r3, [r2, #96]	; 0x60
 8002626:	4b55      	ldr	r3, [pc, #340]	; (800277c <HAL_TIM_Base_MspInit+0x184>)
 8002628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800262e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002630:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002632:	4b52      	ldr	r3, [pc, #328]	; (800277c <HAL_TIM_Base_MspInit+0x184>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002636:	4a51      	ldr	r2, [pc, #324]	; (800277c <HAL_TIM_Base_MspInit+0x184>)
 8002638:	f043 0304 	orr.w	r3, r3, #4
 800263c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800263e:	4b4f      	ldr	r3, [pc, #316]	; (800277c <HAL_TIM_Base_MspInit+0x184>)
 8002640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800264a:	2307      	movs	r3, #7
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	2302      	movs	r3, #2
 8002650:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002656:	2300      	movs	r3, #0
 8002658:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800265a:	2302      	movs	r3, #2
 800265c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800265e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002662:	4619      	mov	r1, r3
 8002664:	4846      	ldr	r0, [pc, #280]	; (8002780 <HAL_TIM_Base_MspInit+0x188>)
 8002666:	f002 fa7d 	bl	8004b64 <HAL_GPIO_Init>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800266a:	e080      	b.n	800276e <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM8)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a44      	ldr	r2, [pc, #272]	; (8002784 <HAL_TIM_Base_MspInit+0x18c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d129      	bne.n	80026ca <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002676:	4b41      	ldr	r3, [pc, #260]	; (800277c <HAL_TIM_Base_MspInit+0x184>)
 8002678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800267a:	4a40      	ldr	r2, [pc, #256]	; (800277c <HAL_TIM_Base_MspInit+0x184>)
 800267c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002680:	6613      	str	r3, [r2, #96]	; 0x60
 8002682:	4b3e      	ldr	r3, [pc, #248]	; (800277c <HAL_TIM_Base_MspInit+0x184>)
 8002684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800268a:	623b      	str	r3, [r7, #32]
 800268c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800268e:	4b3b      	ldr	r3, [pc, #236]	; (800277c <HAL_TIM_Base_MspInit+0x184>)
 8002690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002692:	4a3a      	ldr	r2, [pc, #232]	; (800277c <HAL_TIM_Base_MspInit+0x184>)
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800269a:	4b38      	ldr	r3, [pc, #224]	; (800277c <HAL_TIM_Base_MspInit+0x184>)
 800269c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	61fb      	str	r3, [r7, #28]
 80026a4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80026a6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ac:	2302      	movs	r3, #2
 80026ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b4:	2300      	movs	r3, #0
 80026b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80026b8:	2304      	movs	r3, #4
 80026ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026c0:	4619      	mov	r1, r3
 80026c2:	482f      	ldr	r0, [pc, #188]	; (8002780 <HAL_TIM_Base_MspInit+0x188>)
 80026c4:	f002 fa4e 	bl	8004b64 <HAL_GPIO_Init>
}
 80026c8:	e051      	b.n	800276e <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM15)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a2e      	ldr	r2, [pc, #184]	; (8002788 <HAL_TIM_Base_MspInit+0x190>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d129      	bne.n	8002728 <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80026d4:	4b29      	ldr	r3, [pc, #164]	; (800277c <HAL_TIM_Base_MspInit+0x184>)
 80026d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d8:	4a28      	ldr	r2, [pc, #160]	; (800277c <HAL_TIM_Base_MspInit+0x184>)
 80026da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026de:	6613      	str	r3, [r2, #96]	; 0x60
 80026e0:	4b26      	ldr	r3, [pc, #152]	; (800277c <HAL_TIM_Base_MspInit+0x184>)
 80026e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ec:	4b23      	ldr	r3, [pc, #140]	; (800277c <HAL_TIM_Base_MspInit+0x184>)
 80026ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f0:	4a22      	ldr	r2, [pc, #136]	; (800277c <HAL_TIM_Base_MspInit+0x184>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026f8:	4b20      	ldr	r3, [pc, #128]	; (800277c <HAL_TIM_Base_MspInit+0x184>)
 80026fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002704:	230c      	movs	r3, #12
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002708:	2302      	movs	r3, #2
 800270a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002710:	2300      	movs	r3, #0
 8002712:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8002714:	2309      	movs	r3, #9
 8002716:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002718:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800271c:	4619      	mov	r1, r3
 800271e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002722:	f002 fa1f 	bl	8004b64 <HAL_GPIO_Init>
}
 8002726:	e022      	b.n	800276e <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM16)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a17      	ldr	r2, [pc, #92]	; (800278c <HAL_TIM_Base_MspInit+0x194>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d10c      	bne.n	800274c <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002732:	4b12      	ldr	r3, [pc, #72]	; (800277c <HAL_TIM_Base_MspInit+0x184>)
 8002734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002736:	4a11      	ldr	r2, [pc, #68]	; (800277c <HAL_TIM_Base_MspInit+0x184>)
 8002738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800273c:	6613      	str	r3, [r2, #96]	; 0x60
 800273e:	4b0f      	ldr	r3, [pc, #60]	; (800277c <HAL_TIM_Base_MspInit+0x184>)
 8002740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	693b      	ldr	r3, [r7, #16]
}
 800274a:	e010      	b.n	800276e <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM17)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a0f      	ldr	r2, [pc, #60]	; (8002790 <HAL_TIM_Base_MspInit+0x198>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d10b      	bne.n	800276e <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <HAL_TIM_Base_MspInit+0x184>)
 8002758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800275a:	4a08      	ldr	r2, [pc, #32]	; (800277c <HAL_TIM_Base_MspInit+0x184>)
 800275c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002760:	6613      	str	r3, [r2, #96]	; 0x60
 8002762:	4b06      	ldr	r3, [pc, #24]	; (800277c <HAL_TIM_Base_MspInit+0x184>)
 8002764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
}
 800276e:	bf00      	nop
 8002770:	3740      	adds	r7, #64	; 0x40
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40012c00 	.word	0x40012c00
 800277c:	40021000 	.word	0x40021000
 8002780:	48000800 	.word	0x48000800
 8002784:	40013400 	.word	0x40013400
 8002788:	40014000 	.word	0x40014000
 800278c:	40014400 	.word	0x40014400
 8002790:	40014800 	.word	0x40014800

08002794 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08a      	sub	sp, #40	; 0x28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a17      	ldr	r2, [pc, #92]	; (8002810 <HAL_TIM_Encoder_MspInit+0x7c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d128      	bne.n	8002808 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027b6:	4b17      	ldr	r3, [pc, #92]	; (8002814 <HAL_TIM_Encoder_MspInit+0x80>)
 80027b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ba:	4a16      	ldr	r2, [pc, #88]	; (8002814 <HAL_TIM_Encoder_MspInit+0x80>)
 80027bc:	f043 0302 	orr.w	r3, r3, #2
 80027c0:	6593      	str	r3, [r2, #88]	; 0x58
 80027c2:	4b14      	ldr	r3, [pc, #80]	; (8002814 <HAL_TIM_Encoder_MspInit+0x80>)
 80027c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ce:	4b11      	ldr	r3, [pc, #68]	; (8002814 <HAL_TIM_Encoder_MspInit+0x80>)
 80027d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d2:	4a10      	ldr	r2, [pc, #64]	; (8002814 <HAL_TIM_Encoder_MspInit+0x80>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027da:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <HAL_TIM_Encoder_MspInit+0x80>)
 80027dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_BTN_A_Pin|ENC_BTN_B_Pin;
 80027e6:	23c0      	movs	r3, #192	; 0xc0
 80027e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ea:	2302      	movs	r3, #2
 80027ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f2:	2300      	movs	r3, #0
 80027f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027f6:	2302      	movs	r3, #2
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fa:	f107 0314 	add.w	r3, r7, #20
 80027fe:	4619      	mov	r1, r3
 8002800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002804:	f002 f9ae 	bl	8004b64 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002808:	bf00      	nop
 800280a:	3728      	adds	r7, #40	; 0x28
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40000400 	.word	0x40000400
 8002814:	40021000 	.word	0x40021000

08002818 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	; 0x28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a22      	ldr	r2, [pc, #136]	; (80028c0 <HAL_TIM_MspPostInit+0xa8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d11c      	bne.n	8002874 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800283a:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <HAL_TIM_MspPostInit+0xac>)
 800283c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283e:	4a21      	ldr	r2, [pc, #132]	; (80028c4 <HAL_TIM_MspPostInit+0xac>)
 8002840:	f043 0302 	orr.w	r3, r3, #2
 8002844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002846:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <HAL_TIM_MspPostInit+0xac>)
 8002848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB4     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002852:	2310      	movs	r3, #16
 8002854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002856:	2302      	movs	r3, #2
 8002858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285e:	2300      	movs	r3, #0
 8002860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002862:	2301      	movs	r3, #1
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002866:	f107 0314 	add.w	r3, r7, #20
 800286a:	4619      	mov	r1, r3
 800286c:	4816      	ldr	r0, [pc, #88]	; (80028c8 <HAL_TIM_MspPostInit+0xb0>)
 800286e:	f002 f979 	bl	8004b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002872:	e020      	b.n	80028b6 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM17)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a14      	ldr	r2, [pc, #80]	; (80028cc <HAL_TIM_MspPostInit+0xb4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d11b      	bne.n	80028b6 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287e:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <HAL_TIM_MspPostInit+0xac>)
 8002880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002882:	4a10      	ldr	r2, [pc, #64]	; (80028c4 <HAL_TIM_MspPostInit+0xac>)
 8002884:	f043 0302 	orr.w	r3, r3, #2
 8002888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800288a:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <HAL_TIM_MspPostInit+0xac>)
 800288c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ISO_PWM_BREAK_Pin;
 8002896:	2320      	movs	r3, #32
 8002898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289a:	2302      	movs	r3, #2
 800289c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	2300      	movs	r3, #0
 80028a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 80028a6:	230a      	movs	r3, #10
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ISO_PWM_BREAK_GPIO_Port, &GPIO_InitStruct);
 80028aa:	f107 0314 	add.w	r3, r7, #20
 80028ae:	4619      	mov	r1, r3
 80028b0:	4805      	ldr	r0, [pc, #20]	; (80028c8 <HAL_TIM_MspPostInit+0xb0>)
 80028b2:	f002 f957 	bl	8004b64 <HAL_GPIO_Init>
}
 80028b6:	bf00      	nop
 80028b8:	3728      	adds	r7, #40	; 0x28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40014400 	.word	0x40014400
 80028c4:	40021000 	.word	0x40021000
 80028c8:	48000400 	.word	0x48000400
 80028cc:	40014800 	.word	0x40014800

080028d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028d4:	4b22      	ldr	r3, [pc, #136]	; (8002960 <MX_USART1_UART_Init+0x90>)
 80028d6:	4a23      	ldr	r2, [pc, #140]	; (8002964 <MX_USART1_UART_Init+0x94>)
 80028d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028da:	4b21      	ldr	r3, [pc, #132]	; (8002960 <MX_USART1_UART_Init+0x90>)
 80028dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028e2:	4b1f      	ldr	r3, [pc, #124]	; (8002960 <MX_USART1_UART_Init+0x90>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028e8:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <MX_USART1_UART_Init+0x90>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028ee:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <MX_USART1_UART_Init+0x90>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028f4:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <MX_USART1_UART_Init+0x90>)
 80028f6:	220c      	movs	r2, #12
 80028f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028fa:	4b19      	ldr	r3, [pc, #100]	; (8002960 <MX_USART1_UART_Init+0x90>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002900:	4b17      	ldr	r3, [pc, #92]	; (8002960 <MX_USART1_UART_Init+0x90>)
 8002902:	2200      	movs	r2, #0
 8002904:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002906:	4b16      	ldr	r3, [pc, #88]	; (8002960 <MX_USART1_UART_Init+0x90>)
 8002908:	2200      	movs	r2, #0
 800290a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800290c:	4b14      	ldr	r3, [pc, #80]	; (8002960 <MX_USART1_UART_Init+0x90>)
 800290e:	2200      	movs	r2, #0
 8002910:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002912:	4b13      	ldr	r3, [pc, #76]	; (8002960 <MX_USART1_UART_Init+0x90>)
 8002914:	2200      	movs	r2, #0
 8002916:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002918:	4811      	ldr	r0, [pc, #68]	; (8002960 <MX_USART1_UART_Init+0x90>)
 800291a:	f007 ff4f 	bl	800a7bc <HAL_UART_Init>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002924:	f7ff f9f2 	bl	8001d0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002928:	2100      	movs	r1, #0
 800292a:	480d      	ldr	r0, [pc, #52]	; (8002960 <MX_USART1_UART_Init+0x90>)
 800292c:	f008 fd16 	bl	800b35c <HAL_UARTEx_SetTxFifoThreshold>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002936:	f7ff f9e9 	bl	8001d0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800293a:	2100      	movs	r1, #0
 800293c:	4808      	ldr	r0, [pc, #32]	; (8002960 <MX_USART1_UART_Init+0x90>)
 800293e:	f008 fd4b 	bl	800b3d8 <HAL_UARTEx_SetRxFifoThreshold>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002948:	f7ff f9e0 	bl	8001d0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800294c:	4804      	ldr	r0, [pc, #16]	; (8002960 <MX_USART1_UART_Init+0x90>)
 800294e:	f008 fccc 	bl	800b2ea <HAL_UARTEx_DisableFifoMode>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002958:	f7ff f9d8 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800295c:	bf00      	nop
 800295e:	bd80      	pop	{r7, pc}
 8002960:	20000800 	.word	0x20000800
 8002964:	40013800 	.word	0x40013800

08002968 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800296c:	4b22      	ldr	r3, [pc, #136]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 800296e:	4a23      	ldr	r2, [pc, #140]	; (80029fc <MX_USART3_UART_Init+0x94>)
 8002970:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002972:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 8002974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002978:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800297a:	4b1f      	ldr	r3, [pc, #124]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 800297c:	2200      	movs	r2, #0
 800297e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002980:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 8002982:	2200      	movs	r2, #0
 8002984:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002986:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 8002988:	2200      	movs	r2, #0
 800298a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800298c:	4b1a      	ldr	r3, [pc, #104]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 800298e:	220c      	movs	r2, #12
 8002990:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002992:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 8002994:	2200      	movs	r2, #0
 8002996:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002998:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 800299a:	2200      	movs	r2, #0
 800299c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800299e:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029a4:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029aa:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029b0:	4811      	ldr	r0, [pc, #68]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 80029b2:	f007 ff03 	bl	800a7bc <HAL_UART_Init>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80029bc:	f7ff f9a6 	bl	8001d0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029c0:	2100      	movs	r1, #0
 80029c2:	480d      	ldr	r0, [pc, #52]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 80029c4:	f008 fcca 	bl	800b35c <HAL_UARTEx_SetTxFifoThreshold>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80029ce:	f7ff f99d 	bl	8001d0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029d2:	2100      	movs	r1, #0
 80029d4:	4808      	ldr	r0, [pc, #32]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 80029d6:	f008 fcff 	bl	800b3d8 <HAL_UARTEx_SetRxFifoThreshold>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80029e0:	f7ff f994 	bl	8001d0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80029e4:	4804      	ldr	r0, [pc, #16]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 80029e6:	f008 fc80 	bl	800b2ea <HAL_UARTEx_DisableFifoMode>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80029f0:	f7ff f98c 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029f4:	bf00      	nop
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20000890 	.word	0x20000890
 80029fc:	40004800 	.word	0x40004800

08002a00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b0a0      	sub	sp, #128	; 0x80
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a18:	f107 0318 	add.w	r3, r7, #24
 8002a1c:	2254      	movs	r2, #84	; 0x54
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f00f fac1 	bl	8011fa8 <memset>
  if(uartHandle->Instance==USART1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a3d      	ldr	r2, [pc, #244]	; (8002b20 <HAL_UART_MspInit+0x120>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d136      	bne.n	8002a9e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a30:	2301      	movs	r3, #1
 8002a32:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a34:	2300      	movs	r3, #0
 8002a36:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a38:	f107 0318 	add.w	r3, r7, #24
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f005 fc25 	bl	800828c <HAL_RCCEx_PeriphCLKConfig>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a48:	f7ff f960 	bl	8001d0c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a4c:	4b35      	ldr	r3, [pc, #212]	; (8002b24 <HAL_UART_MspInit+0x124>)
 8002a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a50:	4a34      	ldr	r2, [pc, #208]	; (8002b24 <HAL_UART_MspInit+0x124>)
 8002a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a56:	6613      	str	r3, [r2, #96]	; 0x60
 8002a58:	4b32      	ldr	r3, [pc, #200]	; (8002b24 <HAL_UART_MspInit+0x124>)
 8002a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a64:	4b2f      	ldr	r3, [pc, #188]	; (8002b24 <HAL_UART_MspInit+0x124>)
 8002a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a68:	4a2e      	ldr	r2, [pc, #184]	; (8002b24 <HAL_UART_MspInit+0x124>)
 8002a6a:	f043 0304 	orr.w	r3, r3, #4
 8002a6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a70:	4b2c      	ldr	r3, [pc, #176]	; (8002b24 <HAL_UART_MspInit+0x124>)
 8002a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002a7c:	2330      	movs	r3, #48	; 0x30
 8002a7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a80:	2302      	movs	r3, #2
 8002a82:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a8c:	2307      	movs	r3, #7
 8002a8e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a90:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a94:	4619      	mov	r1, r3
 8002a96:	4824      	ldr	r0, [pc, #144]	; (8002b28 <HAL_UART_MspInit+0x128>)
 8002a98:	f002 f864 	bl	8004b64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002a9c:	e03b      	b.n	8002b16 <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART3)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a22      	ldr	r2, [pc, #136]	; (8002b2c <HAL_UART_MspInit+0x12c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d136      	bne.n	8002b16 <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002aa8:	2304      	movs	r3, #4
 8002aaa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002aac:	2300      	movs	r3, #0
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ab0:	f107 0318 	add.w	r3, r7, #24
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f005 fbe9 	bl	800828c <HAL_RCCEx_PeriphCLKConfig>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8002ac0:	f7ff f924 	bl	8001d0c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ac4:	4b17      	ldr	r3, [pc, #92]	; (8002b24 <HAL_UART_MspInit+0x124>)
 8002ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac8:	4a16      	ldr	r2, [pc, #88]	; (8002b24 <HAL_UART_MspInit+0x124>)
 8002aca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ace:	6593      	str	r3, [r2, #88]	; 0x58
 8002ad0:	4b14      	ldr	r3, [pc, #80]	; (8002b24 <HAL_UART_MspInit+0x124>)
 8002ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002adc:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <HAL_UART_MspInit+0x124>)
 8002ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae0:	4a10      	ldr	r2, [pc, #64]	; (8002b24 <HAL_UART_MspInit+0x124>)
 8002ae2:	f043 0302 	orr.w	r3, r3, #2
 8002ae6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ae8:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <HAL_UART_MspInit+0x124>)
 8002aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002af4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002af8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afa:	2302      	movs	r3, #2
 8002afc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b02:	2300      	movs	r3, #0
 8002b04:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b06:	2307      	movs	r3, #7
 8002b08:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b0a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4807      	ldr	r0, [pc, #28]	; (8002b30 <HAL_UART_MspInit+0x130>)
 8002b12:	f002 f827 	bl	8004b64 <HAL_GPIO_Init>
}
 8002b16:	bf00      	nop
 8002b18:	3780      	adds	r7, #128	; 0x80
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40013800 	.word	0x40013800
 8002b24:	40021000 	.word	0x40021000
 8002b28:	48000800 	.word	0x48000800
 8002b2c:	40004800 	.word	0x40004800
 8002b30:	48000400 	.word	0x48000400

08002b34 <vTask_TCN75A>:
extern SemaphoreHandle_t xI2CMutex;
extern QueueHandle_t xTemperatureQueue;
TCN75A_HandleTypeDef hTCN75A1;


void vTask_TCN75A(void *pvParameters){
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
	I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*) pvParameters;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	60fb      	str	r3, [r7, #12]
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002b40:	4b32      	ldr	r3, [pc, #200]	; (8002c0c <vTask_TCN75A+0xd8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f00c ff95 	bl	800fa78 <xQueueSemaphoreTake>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d109      	bne.n	8002b68 <vTask_TCN75A+0x34>
		printf("Init Task TCN75A...   ");
 8002b54:	482e      	ldr	r0, [pc, #184]	; (8002c10 <vTask_TCN75A+0xdc>)
 8002b56:	f00f fe99 	bl	801288c <iprintf>
		xSemaphoreGive(xUartMutex);
 8002b5a:	4b2c      	ldr	r3, [pc, #176]	; (8002c0c <vTask_TCN75A+0xd8>)
 8002b5c:	6818      	ldr	r0, [r3, #0]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	2200      	movs	r2, #0
 8002b62:	2100      	movs	r1, #0
 8002b64:	f00c fdaa 	bl	800f6bc <xQueueGenericSend>
	}
	TCN75A_Init(&hTCN75A1, hi2c);
 8002b68:	68f9      	ldr	r1, [r7, #12]
 8002b6a:	482a      	ldr	r0, [pc, #168]	; (8002c14 <vTask_TCN75A+0xe0>)
 8002b6c:	f000 f860 	bl	8002c30 <TCN75A_Init>
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002b70:	4b26      	ldr	r3, [pc, #152]	; (8002c0c <vTask_TCN75A+0xd8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f00c ff7d 	bl	800fa78 <xQueueSemaphoreTake>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d109      	bne.n	8002b98 <vTask_TCN75A+0x64>
		printf(" Done\r\n");
 8002b84:	4824      	ldr	r0, [pc, #144]	; (8002c18 <vTask_TCN75A+0xe4>)
 8002b86:	f00f ff07 	bl	8012998 <puts>
		xSemaphoreGive(xUartMutex);
 8002b8a:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <vTask_TCN75A+0xd8>)
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	2200      	movs	r2, #0
 8002b92:	2100      	movs	r1, #0
 8002b94:	f00c fd92 	bl	800f6bc <xQueueGenericSend>
	}
	vTaskDelay(1000);
 8002b98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b9c:	f00d fad2 	bl	8010144 <vTaskDelay>
	for(;;){
		TCN75A_Read_Temperature(&hTCN75A1);
 8002ba0:	481c      	ldr	r0, [pc, #112]	; (8002c14 <vTask_TCN75A+0xe0>)
 8002ba2:	f000 f867 	bl	8002c74 <TCN75A_Read_Temperature>
		if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002ba6:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <vTask_TCN75A+0xd8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f00c ff62 	bl	800fa78 <xQueueSemaphoreTake>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d11e      	bne.n	8002bf8 <vTask_TCN75A+0xc4>
			printf("Temperature %2.2f°C\r\n",hTCN75A1.temperature);
 8002bba:	4b16      	ldr	r3, [pc, #88]	; (8002c14 <vTask_TCN75A+0xe0>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fd fcea 	bl	8000598 <__aeabi_f2d>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4814      	ldr	r0, [pc, #80]	; (8002c1c <vTask_TCN75A+0xe8>)
 8002bca:	f00f fe5f 	bl	801288c <iprintf>
			xSemaphoreGive(xUartMutex);
 8002bce:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <vTask_TCN75A+0xd8>)
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	f00c fd70 	bl	800f6bc <xQueueGenericSend>
			if(pdPASS == xQueueSend(xTemperatureQueue, &hTCN75A1.temperature, portMAX_DELAY)){
 8002bdc:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <vTask_TCN75A+0xec>)
 8002bde:	6818      	ldr	r0, [r3, #0]
 8002be0:	2300      	movs	r3, #0
 8002be2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002be6:	490f      	ldr	r1, [pc, #60]	; (8002c24 <vTask_TCN75A+0xf0>)
 8002be8:	f00c fd68 	bl	800f6bc <xQueueGenericSend>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d102      	bne.n	8002bf8 <vTask_TCN75A+0xc4>
				printf("Temperature transmit to fan controller\r\n");
 8002bf2:	480d      	ldr	r0, [pc, #52]	; (8002c28 <vTask_TCN75A+0xf4>)
 8002bf4:	f00f fed0 	bl	8012998 <puts>
			}

		}
		vTaskDelay(1000);
 8002bf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bfc:	f00d faa2 	bl	8010144 <vTaskDelay>
		HAL_GPIO_TogglePin(USR_LED_3_GPIO_Port, USR_LED_3_Pin);
 8002c00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c04:	4809      	ldr	r0, [pc, #36]	; (8002c2c <vTask_TCN75A+0xf8>)
 8002c06:	f002 f947 	bl	8004e98 <HAL_GPIO_TogglePin>
	for(;;){
 8002c0a:	e7c9      	b.n	8002ba0 <vTask_TCN75A+0x6c>
 8002c0c:	200005dc 	.word	0x200005dc
 8002c10:	08015220 	.word	0x08015220
 8002c14:	20000920 	.word	0x20000920
 8002c18:	08015238 	.word	0x08015238
 8002c1c:	08015240 	.word	0x08015240
 8002c20:	200005e4 	.word	0x200005e4
 8002c24:	2000092c 	.word	0x2000092c
 8002c28:	08015258 	.word	0x08015258
 8002c2c:	48000800 	.word	0x48000800

08002c30 <TCN75A_Init>:
	}
}

void TCN75A_Init(TCN75A_HandleTypeDef* hTCN75A, I2C_HandleTypeDef* hi2c){
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af02      	add	r7, sp, #8
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
	hTCN75A->hi2c = hi2c;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	601a      	str	r2, [r3, #0]
	hTCN75A->I2C_addr = _TCN75A_I2C_ADDR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2248      	movs	r2, #72	; 0x48
 8002c44:	711a      	strb	r2, [r3, #4]

	uint8_t config[2] = {_TCN75A_RP_CONFIG, _TCN75A_12BITS};
 8002c46:	f246 0301 	movw	r3, #24577	; 0x6001
 8002c4a:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(hTCN75A->hi2c, hTCN75A->I2C_addr<<1, config, 2, HAL_MAX_DELAY);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6818      	ldr	r0, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	791b      	ldrb	r3, [r3, #4]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	b299      	uxth	r1, r3
 8002c5a:	f107 020c 	add.w	r2, r7, #12
 8002c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	2302      	movs	r3, #2
 8002c66:	f002 f9d9 	bl	800501c <HAL_I2C_Master_Transmit>
}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <TCN75A_Read_Temperature>:

void TCN75A_Read_Temperature(TCN75A_HandleTypeDef* hTCN75A){
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af04      	add	r7, sp, #16
 8002c7a:	6078      	str	r0, [r7, #4]
	uint8_t data[2] = {0x00, 0x00};
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	81bb      	strh	r3, [r7, #12]
	if(xSemaphoreTake(xI2CMutex, portMAX_DELAY)==pdTRUE){
 8002c80:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <TCN75A_Read_Temperature+0x90>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f00c fef5 	bl	800fa78 <xQueueSemaphoreTake>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d119      	bne.n	8002cc8 <TCN75A_Read_Temperature+0x54>
		//HAL_I2C_Master_Transmit(hTCN75A->hi2c, hTCN75A->I2C_addr<<1, data, 1, HAL_MAX_DELAY);
		//HAL_I2C_Master_Receive(hTCN75A->hi2c, hTCN75A->I2C_addr<<1, data, 2, HAL_MAX_DELAY);
		HAL_I2C_Mem_Read(hTCN75A->hi2c, hTCN75A->I2C_addr<<1, _TCN75A_RP_TA, 1, data, 2, HAL_MAX_DELAY);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6818      	ldr	r0, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	791b      	ldrb	r3, [r3, #4]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	b299      	uxth	r1, r3
 8002ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ca6:	9302      	str	r3, [sp, #8]
 8002ca8:	2302      	movs	r3, #2
 8002caa:	9301      	str	r3, [sp, #4]
 8002cac:	f107 030c 	add.w	r3, r7, #12
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f002 faa5 	bl	8005204 <HAL_I2C_Mem_Read>
		xSemaphoreGive(xI2CMutex);
 8002cba:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <TCN75A_Read_Temperature+0x90>)
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	f00c fcfa 	bl	800f6bc <xQueueGenericSend>
	}
		hTCN75A->temperature_raw = (data[0]<<4)|(data[1]>>4);
 8002cc8:	7b3b      	ldrb	r3, [r7, #12]
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	b21a      	sxth	r2, r3
 8002cce:	7b7b      	ldrb	r3, [r7, #13]
 8002cd0:	091b      	lsrs	r3, r3, #4
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	b21b      	sxth	r3, r3
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	b21b      	sxth	r3, r3
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	811a      	strh	r2, [r3, #8]
		hTCN75A->temperature = (float)hTCN75A->temperature_raw / 16.0;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	891b      	ldrh	r3, [r3, #8]
 8002ce4:	ee07 3a90 	vmov	s15, r3
 8002ce8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cec:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002cf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8002cfa:	bf00      	nop
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	200005e0 	.word	0x200005e0

08002d08 <vTask_Fan>:
#include "semphr.h"

extern SemaphoreHandle_t xUartMutex;
extern QueueHandle_t xTemperatureQueue;

void vTask_Fan(void *pvParameters){
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	FAN_HandleTypeDef hfan1;
	float temperature;
	float speed = 0;
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002d16:	4b30      	ldr	r3, [pc, #192]	; (8002dd8 <vTask_Fan+0xd0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f00c feaa 	bl	800fa78 <xQueueSemaphoreTake>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d109      	bne.n	8002d3e <vTask_Fan+0x36>
		printf("Init Fan...           ");
 8002d2a:	482c      	ldr	r0, [pc, #176]	; (8002ddc <vTask_Fan+0xd4>)
 8002d2c:	f00f fdae 	bl	801288c <iprintf>
		xSemaphoreGive(xUartMutex);
 8002d30:	4b29      	ldr	r3, [pc, #164]	; (8002dd8 <vTask_Fan+0xd0>)
 8002d32:	6818      	ldr	r0, [r3, #0]
 8002d34:	2300      	movs	r3, #0
 8002d36:	2200      	movs	r2, #0
 8002d38:	2100      	movs	r1, #0
 8002d3a:	f00c fcbf 	bl	800f6bc <xQueueGenericSend>
	}
	Fan_Init(&hfan1, (TIM_HandleTypeDef*)pvParameters);
 8002d3e:	f107 0310 	add.w	r3, r7, #16
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 f84f 	bl	8002de8 <Fan_Init>
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002d4a:	4b23      	ldr	r3, [pc, #140]	; (8002dd8 <vTask_Fan+0xd0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d52:	4618      	mov	r0, r3
 8002d54:	f00c fe90 	bl	800fa78 <xQueueSemaphoreTake>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d109      	bne.n	8002d72 <vTask_Fan+0x6a>
		printf(" Done\r\n");
 8002d5e:	4820      	ldr	r0, [pc, #128]	; (8002de0 <vTask_Fan+0xd8>)
 8002d60:	f00f fe1a 	bl	8012998 <puts>
		xSemaphoreGive(xUartMutex);
 8002d64:	4b1c      	ldr	r3, [pc, #112]	; (8002dd8 <vTask_Fan+0xd0>)
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	2300      	movs	r3, #0
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	f00c fca5 	bl	800f6bc <xQueueGenericSend>
	}

	for(;;){
		if(pdPASS == xQueueReceive(xTemperatureQueue, &temperature, portMAX_DELAY)){
 8002d72:	4b1c      	ldr	r3, [pc, #112]	; (8002de4 <vTask_Fan+0xdc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f107 010c 	add.w	r1, r7, #12
 8002d7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f00c fd9a 	bl	800f8b8 <xQueueReceive>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d120      	bne.n	8002dcc <vTask_Fan+0xc4>
			speed = (temperature > 30) ? 1 : ((temperature < 29) ? 0 : speed);
 8002d8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d8e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002d92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9a:	dd02      	ble.n	8002da2 <vTask_Fan+0x9a>
 8002d9c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002da0:	e00c      	b.n	8002dbc <vTask_Fan+0xb4>
 8002da2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002da6:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8002daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db2:	d502      	bpl.n	8002dba <vTask_Fan+0xb2>
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	e000      	b.n	8002dbc <vTask_Fan+0xb4>
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	61fb      	str	r3, [r7, #28]
			Fan_Set_Speed(&hfan1, speed);
 8002dbe:	f107 0310 	add.w	r3, r7, #16
 8002dc2:	ed97 0a07 	vldr	s0, [r7, #28]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 f836 	bl	8002e38 <Fan_Set_Speed>
		}
		vTaskDelay(1000);
 8002dcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dd0:	f00d f9b8 	bl	8010144 <vTaskDelay>
		if(pdPASS == xQueueReceive(xTemperatureQueue, &temperature, portMAX_DELAY)){
 8002dd4:	e7cd      	b.n	8002d72 <vTask_Fan+0x6a>
 8002dd6:	bf00      	nop
 8002dd8:	200005dc 	.word	0x200005dc
 8002ddc:	08015280 	.word	0x08015280
 8002de0:	08015298 	.word	0x08015298
 8002de4:	200005e4 	.word	0x200005e4

08002de8 <Fan_Init>:
	}
}

void Fan_Init(FAN_HandleTypeDef* hfan, TIM_HandleTypeDef* htim){
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
	hfan->htim = htim;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	601a      	str	r2, [r3, #0]
	hfan->Max_Pwm = __HAL_TIM_GET_AUTORELOAD(htim);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	809a      	strh	r2, [r3, #4]
	hfan->Pwm = 0;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	80da      	strh	r2, [r3, #6]
	hfan->Channel = FAN_CHANNEL;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	721a      	strb	r2, [r3, #8]
	Fan_Set_Speed(hfan, 0);
 8002e10:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8002e34 <Fan_Init+0x4c>
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f80f 	bl	8002e38 <Fan_Set_Speed>
	HAL_TIM_PWM_Start(hfan->htim, hfan->Channel);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	7a1b      	ldrb	r3, [r3, #8]
 8002e22:	4619      	mov	r1, r3
 8002e24:	4610      	mov	r0, r2
 8002e26:	f005 fdb1 	bl	800898c <HAL_TIM_PWM_Start>
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	00000000 	.word	0x00000000

08002e38 <Fan_Set_Speed>:

void Fan_Set_Speed(FAN_HandleTypeDef* hfan, float speed){
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	ed87 0a00 	vstr	s0, [r7]
	hfan->Pwm = (uint16_t)(speed*((float)hfan->Max_Pwm));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	889b      	ldrh	r3, [r3, #4]
 8002e48:	ee07 3a90 	vmov	s15, r3
 8002e4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e50:	edd7 7a00 	vldr	s15, [r7]
 8002e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e5c:	ee17 3a90 	vmov	r3, s15
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	80da      	strh	r2, [r3, #6]
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	7a1b      	ldrb	r3, [r3, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d106      	bne.n	8002e7c <Fan_Set_Speed+0x44>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	88da      	ldrh	r2, [r3, #6]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002e7a:	e036      	b.n	8002eea <Fan_Set_Speed+0xb2>
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	7a1b      	ldrb	r3, [r3, #8]
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d107      	bne.n	8002e94 <Fan_Set_Speed+0x5c>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	88d9      	ldrh	r1, [r3, #6]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002e92:	e02a      	b.n	8002eea <Fan_Set_Speed+0xb2>
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	7a1b      	ldrb	r3, [r3, #8]
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d107      	bne.n	8002eac <Fan_Set_Speed+0x74>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	88d9      	ldrh	r1, [r3, #6]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002eaa:	e01e      	b.n	8002eea <Fan_Set_Speed+0xb2>
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	7a1b      	ldrb	r3, [r3, #8]
 8002eb0:	2b0c      	cmp	r3, #12
 8002eb2:	d107      	bne.n	8002ec4 <Fan_Set_Speed+0x8c>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	88d9      	ldrh	r1, [r3, #6]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002ec2:	e012      	b.n	8002eea <Fan_Set_Speed+0xb2>
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	7a1b      	ldrb	r3, [r3, #8]
 8002ec8:	2b10      	cmp	r3, #16
 8002eca:	d107      	bne.n	8002edc <Fan_Set_Speed+0xa4>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	88d9      	ldrh	r1, [r3, #6]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	6493      	str	r3, [r2, #72]	; 0x48
}
 8002eda:	e006      	b.n	8002eea <Fan_Set_Speed+0xb2>
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	88d9      	ldrh	r1, [r3, #6]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <vTask_LCD>:
LCD_HandleTypeDef hlcd1;
uint8_t LCD_Text_Buffer[_LCD_MAX_CHAR];
const uint8_t _ROW_16[] = {0x80, 0xC0};

// Task
void vTask_LCD(void *pvParameters){
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
	int time = 0;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60fb      	str	r3, [r7, #12]
	I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*) pvParameters;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	60bb      	str	r3, [r7, #8]
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002f08:	4b22      	ldr	r3, [pc, #136]	; (8002f94 <vTask_LCD+0x9c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f10:	4618      	mov	r0, r3
 8002f12:	f00c fdb1 	bl	800fa78 <xQueueSemaphoreTake>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d109      	bne.n	8002f30 <vTask_LCD+0x38>
		printf("Init Task LCD...      ");
 8002f1c:	481e      	ldr	r0, [pc, #120]	; (8002f98 <vTask_LCD+0xa0>)
 8002f1e:	f00f fcb5 	bl	801288c <iprintf>
		xSemaphoreGive(xUartMutex);
 8002f22:	4b1c      	ldr	r3, [pc, #112]	; (8002f94 <vTask_LCD+0x9c>)
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	2300      	movs	r3, #0
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	f00c fbc6 	bl	800f6bc <xQueueGenericSend>
	}
	LCD_Init(&hlcd1, hi2c);
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	481a      	ldr	r0, [pc, #104]	; (8002f9c <vTask_LCD+0xa4>)
 8002f34:	f000 f8a2 	bl	800307c <LCD_Init>
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002f38:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <vTask_LCD+0x9c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f40:	4618      	mov	r0, r3
 8002f42:	f00c fd99 	bl	800fa78 <xQueueSemaphoreTake>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d109      	bne.n	8002f60 <vTask_LCD+0x68>
		printf(" Done\r\n");
 8002f4c:	4814      	ldr	r0, [pc, #80]	; (8002fa0 <vTask_LCD+0xa8>)
 8002f4e:	f00f fd23 	bl	8012998 <puts>
		xSemaphoreGive(xUartMutex);
 8002f52:	4b10      	ldr	r3, [pc, #64]	; (8002f94 <vTask_LCD+0x9c>)
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	2300      	movs	r3, #0
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	f00c fbae 	bl	800f6bc <xQueueGenericSend>
	}
	for(;;){
		snprintf((char*)(&hlcd1)->LCD_Text_Buffer, _LCD_MAX_CHAR, "Time : %4d sec", time);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4a10      	ldr	r2, [pc, #64]	; (8002fa4 <vTask_LCD+0xac>)
 8002f64:	2121      	movs	r1, #33	; 0x21
 8002f66:	4810      	ldr	r0, [pc, #64]	; (8002fa8 <vTask_LCD+0xb0>)
 8002f68:	f00f fd1e 	bl	80129a8 <sniprintf>
		LCD_Print(&hlcd1, (&hlcd1)->LCD_Text_Buffer, _LCD_1ST_LINE);
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	490e      	ldr	r1, [pc, #56]	; (8002fa8 <vTask_LCD+0xb0>)
 8002f70:	480a      	ldr	r0, [pc, #40]	; (8002f9c <vTask_LCD+0xa4>)
 8002f72:	f000 f8df 	bl	8003134 <LCD_Print>
		vTaskDelay(1000);
 8002f76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f7a:	f00d f8e3 	bl	8010144 <vTaskDelay>
		time++;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	3301      	adds	r3, #1
 8002f82:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(USR_LED_1_GPIO_Port, USR_LED_1_Pin);
 8002f84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f8c:	f001 ff84 	bl	8004e98 <HAL_GPIO_TogglePin>
	for(;;){
 8002f90:	e7e6      	b.n	8002f60 <vTask_LCD+0x68>
 8002f92:	bf00      	nop
 8002f94:	200005dc 	.word	0x200005dc
 8002f98:	080152a0 	.word	0x080152a0
 8002f9c:	20000930 	.word	0x20000930
 8002fa0:	080152b8 	.word	0x080152b8
 8002fa4:	080152c0 	.word	0x080152c0
 8002fa8:	2000093a 	.word	0x2000093a

08002fac <LCD_Send_Command>:
	}
}

// Fonction d'écriture d'une commande sur l'écran LCD
HAL_StatusTypeDef LCD_Send_Command(LCD_HandleTypeDef *hlcd, uint8_t command) {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2] = {hlcd->LCD_Command, command};
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	795b      	ldrb	r3, [r3, #5]
 8002fbc:	733b      	strb	r3, [r7, #12]
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret;
	if(xSemaphoreTake(xI2CMutex, portMAX_DELAY)==pdTRUE){
 8002fc2:	4b13      	ldr	r3, [pc, #76]	; (8003010 <LCD_Send_Command+0x64>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f00c fd54 	bl	800fa78 <xQueueSemaphoreTake>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d117      	bne.n	8003006 <LCD_Send_Command+0x5a>
		ret = HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, hlcd->LCD_I2C_addr<<1, data, sizeof(data), HAL_MAX_DELAY);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6818      	ldr	r0, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	791b      	ldrb	r3, [r3, #4]
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	b299      	uxth	r1, r3
 8002fe4:	f107 020c 	add.w	r2, r7, #12
 8002fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	2302      	movs	r3, #2
 8002ff0:	f002 f814 	bl	800501c <HAL_I2C_Master_Transmit>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGive(xI2CMutex);
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <LCD_Send_Command+0x64>)
 8002ffa:	6818      	ldr	r0, [r3, #0]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	2200      	movs	r2, #0
 8003000:	2100      	movs	r1, #0
 8003002:	f00c fb5b 	bl	800f6bc <xQueueGenericSend>
	}
	return ret;
 8003006:	7bfb      	ldrb	r3, [r7, #15]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	200005e0 	.word	0x200005e0

08003014 <LCD_Send_Data>:

// Fonction d'écriture d'une donnée (caractère) sur l'écran LCD
HAL_StatusTypeDef LCD_Send_Data(LCD_HandleTypeDef *hlcd, uint8_t data) {
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af02      	add	r7, sp, #8
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	70fb      	strb	r3, [r7, #3]
	uint8_t data_array[2] = {hlcd->LCD_Data, data};
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	799b      	ldrb	r3, [r3, #6]
 8003024:	733b      	strb	r3, [r7, #12]
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret;
	if(xSemaphoreTake(xI2CMutex, portMAX_DELAY)==pdTRUE){
 800302a:	4b13      	ldr	r3, [pc, #76]	; (8003078 <LCD_Send_Data+0x64>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003032:	4618      	mov	r0, r3
 8003034:	f00c fd20 	bl	800fa78 <xQueueSemaphoreTake>
 8003038:	4603      	mov	r3, r0
 800303a:	2b01      	cmp	r3, #1
 800303c:	d117      	bne.n	800306e <LCD_Send_Data+0x5a>
		ret = HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, hlcd->LCD_I2C_addr<<1, data_array, sizeof(data_array), HAL_MAX_DELAY);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	791b      	ldrb	r3, [r3, #4]
 8003046:	b29b      	uxth	r3, r3
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	b299      	uxth	r1, r3
 800304c:	f107 020c 	add.w	r2, r7, #12
 8003050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	2302      	movs	r3, #2
 8003058:	f001 ffe0 	bl	800501c <HAL_I2C_Master_Transmit>
 800305c:	4603      	mov	r3, r0
 800305e:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGive(xI2CMutex);
 8003060:	4b05      	ldr	r3, [pc, #20]	; (8003078 <LCD_Send_Data+0x64>)
 8003062:	6818      	ldr	r0, [r3, #0]
 8003064:	2300      	movs	r3, #0
 8003066:	2200      	movs	r2, #0
 8003068:	2100      	movs	r1, #0
 800306a:	f00c fb27 	bl	800f6bc <xQueueGenericSend>
	}
	return ret;
 800306e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	200005e0 	.word	0x200005e0

0800307c <LCD_Init>:

// Fonction d'initialisation de l'écran LCD
void LCD_Init(LCD_HandleTypeDef *hlcd, I2C_HandleTypeDef *hi2c) {
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
	//	int debug;
	//	uint8_t data[2];
	hlcd->LCD_hi2c = hi2c;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	601a      	str	r2, [r3, #0]
	hlcd->LCD_I2C_addr = _LCD_I2C_TXT_ADDR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	223e      	movs	r2, #62	; 0x3e
 8003090:	711a      	strb	r2, [r3, #4]
	hlcd->LCD_Command = _LCD_COMMAND;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2280      	movs	r2, #128	; 0x80
 8003096:	715a      	strb	r2, [r3, #5]
	hlcd->LCD_Data = _LCD_DATA;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2240      	movs	r2, #64	; 0x40
 800309c:	719a      	strb	r2, [r3, #6]
	hlcd->LCD_Background_Color[0] = 0;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	71da      	strb	r2, [r3, #7]
	hlcd->LCD_Background_Color[1] = 255;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	22ff      	movs	r2, #255	; 0xff
 80030a8:	721a      	strb	r2, [r3, #8]
	hlcd->LCD_Background_Color[2] = 128;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2280      	movs	r2, #128	; 0x80
 80030ae:	725a      	strb	r2, [r3, #9]
	sprintf((char*)hlcd->LCD_Text_Buffer,"");
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	330a      	adds	r3, #10
 80030b4:	491e      	ldr	r1, [pc, #120]	; (8003130 <LCD_Init+0xb4>)
 80030b6:	4618      	mov	r0, r3
 80030b8:	f00f fcaa 	bl	8012a10 <siprintf>

	HAL_Delay(50);
 80030bc:	2032      	movs	r0, #50	; 0x32
 80030be:	f000 fa67 	bl	8003590 <HAL_Delay>
	LCD_Send_Command(hlcd, _LCD_FUNCTIONSET | _LCD_4BITMODE | _LCD_1LINE | _LCD_5x8DOTS);
 80030c2:	2120      	movs	r1, #32
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7ff ff71 	bl	8002fac <LCD_Send_Command>
	//	LCD_Send_Command(hlcd, 0x28);
	HAL_Delay(5);
 80030ca:	2005      	movs	r0, #5
 80030cc:	f000 fa60 	bl	8003590 <HAL_Delay>
	LCD_Send_Command(hlcd, _LCD_FUNCTIONSET | _LCD_4BITMODE | _LCD_1LINE | _LCD_5x8DOTS);
 80030d0:	2120      	movs	r1, #32
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff ff6a 	bl	8002fac <LCD_Send_Command>
	//	LCD_Send_Command(hlcd, 0x28);
	HAL_Delay(1);
 80030d8:	2001      	movs	r0, #1
 80030da:	f000 fa59 	bl	8003590 <HAL_Delay>
	LCD_Send_Command(hlcd, _LCD_FUNCTIONSET | _LCD_4BITMODE | _LCD_1LINE | _LCD_5x8DOTS);
 80030de:	2120      	movs	r1, #32
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7ff ff63 	bl	8002fac <LCD_Send_Command>
	//	LCD_Send_Command(hlcd, 0x28);
	HAL_Delay(1);
 80030e6:	2001      	movs	r0, #1
 80030e8:	f000 fa52 	bl	8003590 <HAL_Delay>
	LCD_Send_Command(hlcd, _LCD_FUNCTIONSET | _LCD_4BITMODE | _LCD_1LINE | _LCD_5x8DOTS);
 80030ec:	2120      	movs	r1, #32
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff ff5c 	bl	8002fac <LCD_Send_Command>
	//	LCD_Send_Command(hlcd, 0x28);

	LCD_Send_Command(hlcd, _LCD_DISPLAYCONTROL | _LCD_DISPLAYON | _LCD_CURSORON | _LCD_BLINKON);
 80030f4:	210f      	movs	r1, #15
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff ff58 	bl	8002fac <LCD_Send_Command>
	LCD_Send_Command(hlcd, _LCD_CLEARDISPLAY);
 80030fc:	2101      	movs	r1, #1
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff ff54 	bl	8002fac <LCD_Send_Command>
	HAL_Delay(2);
 8003104:	2002      	movs	r0, #2
 8003106:	f000 fa43 	bl	8003590 <HAL_Delay>
	LCD_Send_Command(hlcd, _LCD_ENTRYMODESET | _LCD_ENTRYLEFT | _LCD_ENTRYSHIFTDECREMENT);
 800310a:	2106      	movs	r1, #6
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7ff ff4d 	bl	8002fac <LCD_Send_Command>
	//	LCD_Send_Command(hlcd, 0x28);
	//	LCD_Send_Command(hlcd, 0x01);
	//	LCD_Send_Command(hlcd, 0x0C);
	//	LCD_Send_Command(hlcd, 0x06);

	LCD_Background_Init(hlcd);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f838 	bl	8003188 <LCD_Background_Init>
	LCD_Set_Background_Color(hlcd, hlcd->LCD_Background_Color, _DIMMING_HALF);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3307      	adds	r3, #7
 800311c:	2201      	movs	r2, #1
 800311e:	4619      	mov	r1, r3
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f88f 	bl	8003244 <LCD_Set_Background_Color>
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	080152d0 	.word	0x080152d0

08003134 <LCD_Print>:

void LCD_Clear(LCD_HandleTypeDef *hlcd) {
	LCD_Send_Command(hlcd, _LCD_CLEARDISPLAY);
}

void LCD_Print(LCD_HandleTypeDef *hlcd, uint8_t *message, uint8_t line){
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	4613      	mov	r3, r2
 8003140:	71fb      	strb	r3, [r7, #7]
	LCD_Send_Command(hlcd, _ROW_16[line]);
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	4a0f      	ldr	r2, [pc, #60]	; (8003184 <LCD_Print+0x50>)
 8003146:	5cd3      	ldrb	r3, [r2, r3]
 8003148:	4619      	mov	r1, r3
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f7ff ff2e 	bl	8002fac <LCD_Send_Command>
	uint8_t i = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	75fb      	strb	r3, [r7, #23]
	while (message[i] != '\0') {
 8003154:	e00a      	b.n	800316c <LCD_Print+0x38>
		LCD_Send_Data(hlcd, message[i]);
 8003156:	7dfb      	ldrb	r3, [r7, #23]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	4413      	add	r3, r2
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	4619      	mov	r1, r3
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f7ff ff57 	bl	8003014 <LCD_Send_Data>
		i++;
 8003166:	7dfb      	ldrb	r3, [r7, #23]
 8003168:	3301      	adds	r3, #1
 800316a:	75fb      	strb	r3, [r7, #23]
	while (message[i] != '\0') {
 800316c:	7dfb      	ldrb	r3, [r7, #23]
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	4413      	add	r3, r2
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1ee      	bne.n	8003156 <LCD_Print+0x22>
	}
}
 8003178:	bf00      	nop
 800317a:	bf00      	nop
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	08015390 	.word	0x08015390

08003188 <LCD_Background_Init>:

void LCD_Background_Init(LCD_HandleTypeDef *hlcd){
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af02      	add	r7, sp, #8
 800318e:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	if(xSemaphoreTake(xI2CMutex, portMAX_DELAY)==pdTRUE){
 8003190:	4b2b      	ldr	r3, [pc, #172]	; (8003240 <LCD_Background_Init+0xb8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003198:	4618      	mov	r0, r3
 800319a:	f00c fc6d 	bl	800fa78 <xQueueSemaphoreTake>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d133      	bne.n	800320c <LCD_Background_Init+0x84>
		data[0] = _REG_MODE1;
 80031a4:	2300      	movs	r3, #0
 80031a6:	723b      	strb	r3, [r7, #8]
		data[1] = 0x00;
 80031a8:	2300      	movs	r3, #0
 80031aa:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, _LCD_I2C_RGB_ADDR<<1, data, 2, HAL_MAX_DELAY);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6818      	ldr	r0, [r3, #0]
 80031b0:	f107 0208 	add.w	r2, r7, #8
 80031b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	2302      	movs	r3, #2
 80031bc:	21c4      	movs	r1, #196	; 0xc4
 80031be:	f001 ff2d 	bl	800501c <HAL_I2C_Master_Transmit>
		data[0] = _REG_OUTPUT;
 80031c2:	2308      	movs	r3, #8
 80031c4:	723b      	strb	r3, [r7, #8]
		data[1] = 0xFF;
 80031c6:	23ff      	movs	r3, #255	; 0xff
 80031c8:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, _LCD_I2C_RGB_ADDR<<1, data, 2, HAL_MAX_DELAY);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6818      	ldr	r0, [r3, #0]
 80031ce:	f107 0208 	add.w	r2, r7, #8
 80031d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	2302      	movs	r3, #2
 80031da:	21c4      	movs	r1, #196	; 0xc4
 80031dc:	f001 ff1e 	bl	800501c <HAL_I2C_Master_Transmit>
		data[0] = _REG_MODE2;
 80031e0:	2301      	movs	r3, #1
 80031e2:	723b      	strb	r3, [r7, #8]
		data[1] = 0x20;
 80031e4:	2320      	movs	r3, #32
 80031e6:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, _LCD_I2C_RGB_ADDR<<1, data, 2, HAL_MAX_DELAY);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	f107 0208 	add.w	r2, r7, #8
 80031f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	2302      	movs	r3, #2
 80031f8:	21c4      	movs	r1, #196	; 0xc4
 80031fa:	f001 ff0f 	bl	800501c <HAL_I2C_Master_Transmit>
		xSemaphoreGive(xI2CMutex);
 80031fe:	4b10      	ldr	r3, [pc, #64]	; (8003240 <LCD_Background_Init+0xb8>)
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	2300      	movs	r3, #0
 8003204:	2200      	movs	r2, #0
 8003206:	2100      	movs	r1, #0
 8003208:	f00c fa58 	bl	800f6bc <xQueueGenericSend>
	}
	for(int blink_idx = 0; blink_idx<10; blink_idx++){
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	e00e      	b.n	8003230 <LCD_Background_Init+0xa8>
		LCD_Set_Background_Color_White(hlcd);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f876 	bl	8003304 <LCD_Set_Background_Color_White>
		HAL_Delay(50);
 8003218:	2032      	movs	r0, #50	; 0x32
 800321a:	f000 f9b9 	bl	8003590 <HAL_Delay>
		LCD_Set_Background_Color_Red(hlcd);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f88a 	bl	8003338 <LCD_Set_Background_Color_Red>
		HAL_Delay(50);
 8003224:	2032      	movs	r0, #50	; 0x32
 8003226:	f000 f9b3 	bl	8003590 <HAL_Delay>
	for(int blink_idx = 0; blink_idx<10; blink_idx++){
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	3301      	adds	r3, #1
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b09      	cmp	r3, #9
 8003234:	dded      	ble.n	8003212 <LCD_Background_Init+0x8a>
	}
}
 8003236:	bf00      	nop
 8003238:	bf00      	nop
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	200005e0 	.word	0x200005e0

08003244 <LCD_Set_Background_Color>:

void LCD_Set_Background_Color(LCD_HandleTypeDef *hlcd, uint8_t rgb[3], uint8_t dimming){
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af02      	add	r7, sp, #8
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	4613      	mov	r3, r2
 8003250:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2];
	if(xSemaphoreTake(xI2CMutex, portMAX_DELAY)==pdTRUE){
 8003252:	4b2b      	ldr	r3, [pc, #172]	; (8003300 <LCD_Set_Background_Color+0xbc>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800325a:	4618      	mov	r0, r3
 800325c:	f00c fc0c 	bl	800fa78 <xQueueSemaphoreTake>
 8003260:	4603      	mov	r3, r0
 8003262:	2b01      	cmp	r3, #1
 8003264:	d147      	bne.n	80032f6 <LCD_Set_Background_Color+0xb2>
		data[0] = 0x04;
 8003266:	2304      	movs	r3, #4
 8003268:	753b      	strb	r3, [r7, #20]
		data[1] = rgb[0]>>dimming;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	461a      	mov	r2, r3
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	fa42 f303 	asr.w	r3, r2, r3
 8003276:	b2db      	uxtb	r3, r3
 8003278:	757b      	strb	r3, [r7, #21]
		HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, _LCD_I2C_RGB_ADDR<<1, data, 2, HAL_MAX_DELAY);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6818      	ldr	r0, [r3, #0]
 800327e:	f107 0214 	add.w	r2, r7, #20
 8003282:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	2302      	movs	r3, #2
 800328a:	21c4      	movs	r1, #196	; 0xc4
 800328c:	f001 fec6 	bl	800501c <HAL_I2C_Master_Transmit>

		data[0] = 0x03;
 8003290:	2303      	movs	r3, #3
 8003292:	753b      	strb	r3, [r7, #20]
		data[1] = rgb[1]>>dimming;
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	3301      	adds	r3, #1
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	79fb      	ldrb	r3, [r7, #7]
 800329e:	fa42 f303 	asr.w	r3, r2, r3
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	757b      	strb	r3, [r7, #21]
		HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, _LCD_I2C_RGB_ADDR<<1, data, 2, HAL_MAX_DELAY);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	f107 0214 	add.w	r2, r7, #20
 80032ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	2302      	movs	r3, #2
 80032b6:	21c4      	movs	r1, #196	; 0xc4
 80032b8:	f001 feb0 	bl	800501c <HAL_I2C_Master_Transmit>

		data[0] = 0x02;
 80032bc:	2302      	movs	r3, #2
 80032be:	753b      	strb	r3, [r7, #20]
		data[1] = rgb[2]>>dimming;
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	3302      	adds	r3, #2
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	79fb      	ldrb	r3, [r7, #7]
 80032ca:	fa42 f303 	asr.w	r3, r2, r3
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	757b      	strb	r3, [r7, #21]
		HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, _LCD_I2C_RGB_ADDR<<1, data, 2, HAL_MAX_DELAY);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	f107 0214 	add.w	r2, r7, #20
 80032da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	2302      	movs	r3, #2
 80032e2:	21c4      	movs	r1, #196	; 0xc4
 80032e4:	f001 fe9a 	bl	800501c <HAL_I2C_Master_Transmit>
		xSemaphoreGive(xI2CMutex);
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <LCD_Set_Background_Color+0xbc>)
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	2300      	movs	r3, #0
 80032ee:	2200      	movs	r2, #0
 80032f0:	2100      	movs	r1, #0
 80032f2:	f00c f9e3 	bl	800f6bc <xQueueGenericSend>
	}
}
 80032f6:	bf00      	nop
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	200005e0 	.word	0x200005e0

08003304 <LCD_Set_Background_Color_White>:

void LCD_Set_Background_Color_White(LCD_HandleTypeDef *hlcd){
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
	uint8_t rgb[3] = _COLOR_WHITE;
 800330c:	4a09      	ldr	r2, [pc, #36]	; (8003334 <LCD_Set_Background_Color_White+0x30>)
 800330e:	f107 030c 	add.w	r3, r7, #12
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	4611      	mov	r1, r2
 8003316:	8019      	strh	r1, [r3, #0]
 8003318:	3302      	adds	r3, #2
 800331a:	0c12      	lsrs	r2, r2, #16
 800331c:	701a      	strb	r2, [r3, #0]
	LCD_Set_Background_Color(hlcd, rgb, _DIMMING_NO);
 800331e:	f107 030c 	add.w	r3, r7, #12
 8003322:	2200      	movs	r2, #0
 8003324:	4619      	mov	r1, r3
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7ff ff8c 	bl	8003244 <LCD_Set_Background_Color>
}
 800332c:	bf00      	nop
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	080152d4 	.word	0x080152d4

08003338 <LCD_Set_Background_Color_Red>:

void LCD_Set_Background_Color_Red(LCD_HandleTypeDef *hlcd){
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
	uint8_t rgb[3] = _COLOR_RED;
 8003340:	4a09      	ldr	r2, [pc, #36]	; (8003368 <LCD_Set_Background_Color_Red+0x30>)
 8003342:	f107 030c 	add.w	r3, r7, #12
 8003346:	6812      	ldr	r2, [r2, #0]
 8003348:	4611      	mov	r1, r2
 800334a:	8019      	strh	r1, [r3, #0]
 800334c:	3302      	adds	r3, #2
 800334e:	0c12      	lsrs	r2, r2, #16
 8003350:	701a      	strb	r2, [r3, #0]
	LCD_Set_Background_Color(hlcd, rgb, _DIMMING_NO);
 8003352:	f107 030c 	add.w	r3, r7, #12
 8003356:	2200      	movs	r2, #0
 8003358:	4619      	mov	r1, r3
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff ff72 	bl	8003244 <LCD_Set_Background_Color>
}
 8003360:	bf00      	nop
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	080152d8 	.word	0x080152d8

0800336c <vTask_LED>:
 *  Created on: Aug 1, 2023
 *      Author: nicolas
 */
#include "mylibs/led.h"

void vTask_LED(void *pvParameters){
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
	uint8_t led = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	73fb      	strb	r3, [r7, #15]
	printf("Init LED...           ");
 8003378:	4809      	ldr	r0, [pc, #36]	; (80033a0 <vTask_LED+0x34>)
 800337a:	f00f fa87 	bl	801288c <iprintf>
	LED_Init();
 800337e:	f000 f813 	bl	80033a8 <LED_Init>
	printf(" Done\r\n");
 8003382:	4808      	ldr	r0, [pc, #32]	; (80033a4 <vTask_LED+0x38>)
 8003384:	f00f fb08 	bl	8012998 <puts>
	for(;;){
		LED_Write(led);
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	4618      	mov	r0, r3
 800338c:	f000 f814 	bl	80033b8 <LED_Write>
		led++;
 8003390:	7bfb      	ldrb	r3, [r7, #15]
 8003392:	3301      	adds	r3, #1
 8003394:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(500);
 8003396:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800339a:	f00c fed3 	bl	8010144 <vTaskDelay>
	for(;;){
 800339e:	e7f3      	b.n	8003388 <vTask_LED+0x1c>
 80033a0:	080152e4 	.word	0x080152e4
 80033a4:	080152fc 	.word	0x080152fc

080033a8 <LED_Init>:
	}
}

void LED_Init(){
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0

}
 80033ac:	bf00      	nop
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
	...

080033b8 <LED_Write>:

void LED_Write(uint8_t leds){
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(USR_LED_1_GPIO_Port, USR_LED_1_Pin, (leds>>0)&1);
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	461a      	mov	r2, r3
 80033cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033d4:	f001 fd48 	bl	8004e68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USR_LED_2_GPIO_Port, USR_LED_2_Pin, (leds>>1)&1);
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	085b      	lsrs	r3, r3, #1
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033ea:	480f      	ldr	r0, [pc, #60]	; (8003428 <LED_Write+0x70>)
 80033ec:	f001 fd3c 	bl	8004e68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USR_LED_3_GPIO_Port, USR_LED_3_Pin, (leds>>2)&1);
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	089b      	lsrs	r3, r3, #2
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	461a      	mov	r2, r3
 80033fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003402:	4809      	ldr	r0, [pc, #36]	; (8003428 <LED_Write+0x70>)
 8003404:	f001 fd30 	bl	8004e68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USR_LED_4_GPIO_Port, USR_LED_4_Pin, (leds>>3)&1);
 8003408:	79fb      	ldrb	r3, [r7, #7]
 800340a:	08db      	lsrs	r3, r3, #3
 800340c:	b2db      	uxtb	r3, r3
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	b2db      	uxtb	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800341a:	4803      	ldr	r0, [pc, #12]	; (8003428 <LED_Write+0x70>)
 800341c:	f001 fd24 	bl	8004e68 <HAL_GPIO_WritePin>
}
 8003420:	bf00      	nop
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	48000800 	.word	0x48000800

0800342c <vTask_RotaryEnc>:
extern SemaphoreHandle_t xUartMutex;

uint8_t value;
uint32_t last_Tick = 0;

void vTask_RotaryEnc(void *pvParameters){
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef* htim = (TIM_HandleTypeDef*) pvParameters;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	613b      	str	r3, [r7, #16]
	uint32_t RotaryEnc_Previous_Value = 0;
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]
	uint32_t RotaryEnc_Value = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	60fb      	str	r3, [r7, #12]
	printf("Init Rotary Encoder...");
 8003440:	4818      	ldr	r0, [pc, #96]	; (80034a4 <vTask_RotaryEnc+0x78>)
 8003442:	f00f fa23 	bl	801288c <iprintf>
	RotaryEnc_Init(htim);
 8003446:	6938      	ldr	r0, [r7, #16]
 8003448:	f000 f836 	bl	80034b8 <RotaryEnc_Init>
	printf(" Done\r\n");
 800344c:	4816      	ldr	r0, [pc, #88]	; (80034a8 <vTask_RotaryEnc+0x7c>)
 800344e:	f00f faa3 	bl	8012998 <puts>
	for(;;){
		RotaryEnc_Value = __HAL_TIM_GET_COUNTER(htim);
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	60fb      	str	r3, [r7, #12]

		if(RotaryEnc_Previous_Value != RotaryEnc_Value){
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	429a      	cmp	r2, r3
 8003460:	d015      	beq.n	800348e <vTask_RotaryEnc+0x62>
			if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8003462:	4b12      	ldr	r3, [pc, #72]	; (80034ac <vTask_RotaryEnc+0x80>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800346a:	4618      	mov	r0, r3
 800346c:	f00c fb04 	bl	800fa78 <xQueueSemaphoreTake>
 8003470:	4603      	mov	r3, r0
 8003472:	2b01      	cmp	r3, #1
 8003474:	d109      	bne.n	800348a <vTask_RotaryEnc+0x5e>
				printf("!\r\n");
 8003476:	480e      	ldr	r0, [pc, #56]	; (80034b0 <vTask_RotaryEnc+0x84>)
 8003478:	f00f fa8e 	bl	8012998 <puts>
				xSemaphoreGive(xUartMutex);
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <vTask_RotaryEnc+0x80>)
 800347e:	6818      	ldr	r0, [r3, #0]
 8003480:	2300      	movs	r3, #0
 8003482:	2200      	movs	r2, #0
 8003484:	2100      	movs	r1, #0
 8003486:	f00c f919 	bl	800f6bc <xQueueGenericSend>
			}
			RotaryEnc_Previous_Value = RotaryEnc_Value;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	617b      	str	r3, [r7, #20]
		}

		vTaskDelay(1000);
 800348e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003492:	f00c fe57 	bl	8010144 <vTaskDelay>
		HAL_GPIO_TogglePin(USR_LED_2_GPIO_Port, USR_LED_2_Pin);
 8003496:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800349a:	4806      	ldr	r0, [pc, #24]	; (80034b4 <vTask_RotaryEnc+0x88>)
 800349c:	f001 fcfc 	bl	8004e98 <HAL_GPIO_TogglePin>
		RotaryEnc_Value = __HAL_TIM_GET_COUNTER(htim);
 80034a0:	e7d7      	b.n	8003452 <vTask_RotaryEnc+0x26>
 80034a2:	bf00      	nop
 80034a4:	08015304 	.word	0x08015304
 80034a8:	0801531c 	.word	0x0801531c
 80034ac:	200005dc 	.word	0x200005dc
 80034b0:	08015324 	.word	0x08015324
 80034b4:	48000800 	.word	0x48000800

080034b8 <RotaryEnc_Init>:
	}
}

void RotaryEnc_Init(TIM_HandleTypeDef* htim){
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_1);
 80034c0:	2100      	movs	r1, #0
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f005 fc7b 	bl	8008dbe <HAL_TIM_Encoder_Start>
}
 80034c8:	bf00      	nop
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80034d0:	480d      	ldr	r0, [pc, #52]	; (8003508 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80034d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034d4:	480d      	ldr	r0, [pc, #52]	; (800350c <LoopForever+0x6>)
  ldr r1, =_edata
 80034d6:	490e      	ldr	r1, [pc, #56]	; (8003510 <LoopForever+0xa>)
  ldr r2, =_sidata
 80034d8:	4a0e      	ldr	r2, [pc, #56]	; (8003514 <LoopForever+0xe>)
  movs r3, #0
 80034da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80034dc:	e002      	b.n	80034e4 <LoopCopyDataInit>

080034de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034e2:	3304      	adds	r3, #4

080034e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034e8:	d3f9      	bcc.n	80034de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034ea:	4a0b      	ldr	r2, [pc, #44]	; (8003518 <LoopForever+0x12>)
  ldr r4, =_ebss
 80034ec:	4c0b      	ldr	r4, [pc, #44]	; (800351c <LoopForever+0x16>)
  movs r3, #0
 80034ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034f0:	e001      	b.n	80034f6 <LoopFillZerobss>

080034f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034f4:	3204      	adds	r2, #4

080034f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034f8:	d3fb      	bcc.n	80034f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80034fa:	f7fe fd9b 	bl	8002034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034fe:	f00e fd21 	bl	8011f44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003502:	f7fe fa9b 	bl	8001a3c <main>

08003506 <LoopForever>:

LoopForever:
    b LoopForever
 8003506:	e7fe      	b.n	8003506 <LoopForever>
  ldr   r0, =_estack
 8003508:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800350c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003510:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8003514:	080157a4 	.word	0x080157a4
  ldr r2, =_sbss
 8003518:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 800351c:	200034ac 	.word	0x200034ac

08003520 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003520:	e7fe      	b.n	8003520 <ADC1_2_IRQHandler>

08003522 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800352c:	2003      	movs	r0, #3
 800352e:	f001 fa3a 	bl	80049a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003532:	200f      	movs	r0, #15
 8003534:	f7fe fc18 	bl	8001d68 <HAL_InitTick>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	71fb      	strb	r3, [r7, #7]
 8003542:	e001      	b.n	8003548 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003544:	f7fe fbe8 	bl	8001d18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003548:	79fb      	ldrb	r3, [r7, #7]

}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003558:	4b05      	ldr	r3, [pc, #20]	; (8003570 <HAL_IncTick+0x1c>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <HAL_IncTick+0x20>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4413      	add	r3, r2
 8003562:	4a03      	ldr	r2, [pc, #12]	; (8003570 <HAL_IncTick+0x1c>)
 8003564:	6013      	str	r3, [r2, #0]
}
 8003566:	bf00      	nop
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	2000095c 	.word	0x2000095c
 8003574:	20000008 	.word	0x20000008

08003578 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  return uwTick;
 800357c:	4b03      	ldr	r3, [pc, #12]	; (800358c <HAL_GetTick+0x14>)
 800357e:	681b      	ldr	r3, [r3, #0]
}
 8003580:	4618      	mov	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	2000095c 	.word	0x2000095c

08003590 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003598:	f7ff ffee 	bl	8003578 <HAL_GetTick>
 800359c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035a8:	d004      	beq.n	80035b4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80035aa:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <HAL_Delay+0x40>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4413      	add	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035b4:	bf00      	nop
 80035b6:	f7ff ffdf 	bl	8003578 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d8f7      	bhi.n	80035b6 <HAL_Delay+0x26>
  {
  }
}
 80035c6:	bf00      	nop
 80035c8:	bf00      	nop
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	20000008 	.word	0x20000008

080035d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	609a      	str	r2, [r3, #8]
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	609a      	str	r2, [r3, #8]
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	3360      	adds	r3, #96	; 0x60
 800364e:	461a      	mov	r2, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	4b08      	ldr	r3, [pc, #32]	; (8003680 <LL_ADC_SetOffset+0x44>)
 800365e:	4013      	ands	r3, r2
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	4313      	orrs	r3, r2
 800366c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003674:	bf00      	nop
 8003676:	371c      	adds	r7, #28
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	03fff000 	.word	0x03fff000

08003684 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3360      	adds	r3, #96	; 0x60
 8003692:	461a      	mov	r2, r3
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	3360      	adds	r3, #96	; 0x60
 80036c0:	461a      	mov	r2, r3
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	431a      	orrs	r2, r3
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80036da:	bf00      	nop
 80036dc:	371c      	adds	r7, #28
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b087      	sub	sp, #28
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3360      	adds	r3, #96	; 0x60
 80036f6:	461a      	mov	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	431a      	orrs	r2, r3
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003710:	bf00      	nop
 8003712:	371c      	adds	r7, #28
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3360      	adds	r3, #96	; 0x60
 800372c:	461a      	mov	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	431a      	orrs	r2, r3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003746:	bf00      	nop
 8003748:	371c      	adds	r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	615a      	str	r2, [r3, #20]
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003778:	b480      	push	{r7}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	3330      	adds	r3, #48	; 0x30
 8003788:	461a      	mov	r2, r3
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	0a1b      	lsrs	r3, r3, #8
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	f003 030c 	and.w	r3, r3, #12
 8003794:	4413      	add	r3, r2
 8003796:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	211f      	movs	r1, #31
 80037a4:	fa01 f303 	lsl.w	r3, r1, r3
 80037a8:	43db      	mvns	r3, r3
 80037aa:	401a      	ands	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	0e9b      	lsrs	r3, r3, #26
 80037b0:	f003 011f 	and.w	r1, r3, #31
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f003 031f 	and.w	r3, r3, #31
 80037ba:	fa01 f303 	lsl.w	r3, r1, r3
 80037be:	431a      	orrs	r2, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80037c4:	bf00      	nop
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	3314      	adds	r3, #20
 80037e0:	461a      	mov	r2, r3
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	0e5b      	lsrs	r3, r3, #25
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	4413      	add	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	0d1b      	lsrs	r3, r3, #20
 80037f8:	f003 031f 	and.w	r3, r3, #31
 80037fc:	2107      	movs	r1, #7
 80037fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003802:	43db      	mvns	r3, r3
 8003804:	401a      	ands	r2, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	0d1b      	lsrs	r3, r3, #20
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	fa01 f303 	lsl.w	r3, r1, r3
 8003814:	431a      	orrs	r2, r3
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800381a:	bf00      	nop
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
	...

08003828 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a0f      	ldr	r2, [pc, #60]	; (8003874 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d10a      	bne.n	8003852 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003848:	431a      	orrs	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003850:	e00a      	b.n	8003868 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800385e:	43db      	mvns	r3, r3
 8003860:	401a      	ands	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003868:	bf00      	nop
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	407f0000 	.word	0x407f0000

08003878 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003888:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6093      	str	r3, [r2, #8]
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038b0:	d101      	bne.n	80038b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80038d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003900:	d101      	bne.n	8003906 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <LL_ADC_IsEnabled+0x18>
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <LL_ADC_IsEnabled+0x1a>
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b04      	cmp	r3, #4
 800394c:	d101      	bne.n	8003952 <LL_ADC_REG_IsConversionOngoing+0x18>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b08      	cmp	r3, #8
 8003972:	d101      	bne.n	8003978 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
	...

08003988 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003988:	b590      	push	{r4, r7, lr}
 800398a:	b089      	sub	sp, #36	; 0x24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003994:	2300      	movs	r3, #0
 8003996:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e1af      	b.n	8003d02 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d109      	bne.n	80039c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7fd fc5f 	bl	8001274 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff ff67 	bl	800389c <LL_ADC_IsDeepPowerDownEnabled>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d004      	beq.n	80039de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff ff4d 	bl	8003878 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff ff82 	bl	80038ec <LL_ADC_IsInternalRegulatorEnabled>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d115      	bne.n	8003a1a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff ff66 	bl	80038c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039f8:	4b9f      	ldr	r3, [pc, #636]	; (8003c78 <HAL_ADC_Init+0x2f0>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	099b      	lsrs	r3, r3, #6
 80039fe:	4a9f      	ldr	r2, [pc, #636]	; (8003c7c <HAL_ADC_Init+0x2f4>)
 8003a00:	fba2 2303 	umull	r2, r3, r2, r3
 8003a04:	099b      	lsrs	r3, r3, #6
 8003a06:	3301      	adds	r3, #1
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a0c:	e002      	b.n	8003a14 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	3b01      	subs	r3, #1
 8003a12:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1f9      	bne.n	8003a0e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff ff64 	bl	80038ec <LL_ADC_IsInternalRegulatorEnabled>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10d      	bne.n	8003a46 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2e:	f043 0210 	orr.w	r2, r3, #16
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3a:	f043 0201 	orr.w	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff ff75 	bl	800393a <LL_ADC_REG_IsConversionOngoing>
 8003a50:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f040 8148 	bne.w	8003cf0 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f040 8144 	bne.w	8003cf0 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003a70:	f043 0202 	orr.w	r2, r3, #2
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff ff49 	bl	8003914 <LL_ADC_IsEnabled>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d141      	bne.n	8003b0c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a90:	d004      	beq.n	8003a9c <HAL_ADC_Init+0x114>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a7a      	ldr	r2, [pc, #488]	; (8003c80 <HAL_ADC_Init+0x2f8>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d10f      	bne.n	8003abc <HAL_ADC_Init+0x134>
 8003a9c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003aa0:	f7ff ff38 	bl	8003914 <LL_ADC_IsEnabled>
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	4876      	ldr	r0, [pc, #472]	; (8003c80 <HAL_ADC_Init+0x2f8>)
 8003aa8:	f7ff ff34 	bl	8003914 <LL_ADC_IsEnabled>
 8003aac:	4603      	mov	r3, r0
 8003aae:	4323      	orrs	r3, r4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2301      	moveq	r3, #1
 8003ab6:	2300      	movne	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	e012      	b.n	8003ae2 <HAL_ADC_Init+0x15a>
 8003abc:	4871      	ldr	r0, [pc, #452]	; (8003c84 <HAL_ADC_Init+0x2fc>)
 8003abe:	f7ff ff29 	bl	8003914 <LL_ADC_IsEnabled>
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	4870      	ldr	r0, [pc, #448]	; (8003c88 <HAL_ADC_Init+0x300>)
 8003ac6:	f7ff ff25 	bl	8003914 <LL_ADC_IsEnabled>
 8003aca:	4603      	mov	r3, r0
 8003acc:	431c      	orrs	r4, r3
 8003ace:	486f      	ldr	r0, [pc, #444]	; (8003c8c <HAL_ADC_Init+0x304>)
 8003ad0:	f7ff ff20 	bl	8003914 <LL_ADC_IsEnabled>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	4323      	orrs	r3, r4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	bf0c      	ite	eq
 8003adc:	2301      	moveq	r3, #1
 8003ade:	2300      	movne	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d012      	beq.n	8003b0c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aee:	d004      	beq.n	8003afa <HAL_ADC_Init+0x172>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a62      	ldr	r2, [pc, #392]	; (8003c80 <HAL_ADC_Init+0x2f8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d101      	bne.n	8003afe <HAL_ADC_Init+0x176>
 8003afa:	4a65      	ldr	r2, [pc, #404]	; (8003c90 <HAL_ADC_Init+0x308>)
 8003afc:	e000      	b.n	8003b00 <HAL_ADC_Init+0x178>
 8003afe:	4a65      	ldr	r2, [pc, #404]	; (8003c94 <HAL_ADC_Init+0x30c>)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	4619      	mov	r1, r3
 8003b06:	4610      	mov	r0, r2
 8003b08:	f7ff fd64 	bl	80035d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	7f5b      	ldrb	r3, [r3, #29]
 8003b10:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b16:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003b1c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003b22:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b2a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d106      	bne.n	8003b48 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	045b      	lsls	r3, r3, #17
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d009      	beq.n	8003b64 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b54:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	4b4b      	ldr	r3, [pc, #300]	; (8003c98 <HAL_ADC_Init+0x310>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	69b9      	ldr	r1, [r7, #24]
 8003b74:	430b      	orrs	r3, r1
 8003b76:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff fed1 	bl	800393a <LL_ADC_REG_IsConversionOngoing>
 8003b98:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff fede 	bl	8003960 <LL_ADC_INJ_IsConversionOngoing>
 8003ba4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d17f      	bne.n	8003cac <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d17c      	bne.n	8003cac <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003bb6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bbe:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bce:	f023 0302 	bic.w	r3, r3, #2
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6812      	ldr	r2, [r2, #0]
 8003bd6:	69b9      	ldr	r1, [r7, #24]
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d017      	beq.n	8003c14 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691a      	ldr	r2, [r3, #16]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003bf2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003bfc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6911      	ldr	r1, [r2, #16]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6812      	ldr	r2, [r2, #0]
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003c12:	e013      	b.n	8003c3c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691a      	ldr	r2, [r3, #16]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c22:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6812      	ldr	r2, [r2, #0]
 8003c30:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c38:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d12a      	bne.n	8003c9c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003c50:	f023 0304 	bic.w	r3, r3, #4
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c5c:	4311      	orrs	r1, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003c62:	4311      	orrs	r1, r2
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f042 0201 	orr.w	r2, r2, #1
 8003c74:	611a      	str	r2, [r3, #16]
 8003c76:	e019      	b.n	8003cac <HAL_ADC_Init+0x324>
 8003c78:	20000000 	.word	0x20000000
 8003c7c:	053e2d63 	.word	0x053e2d63
 8003c80:	50000100 	.word	0x50000100
 8003c84:	50000400 	.word	0x50000400
 8003c88:	50000500 	.word	0x50000500
 8003c8c:	50000600 	.word	0x50000600
 8003c90:	50000300 	.word	0x50000300
 8003c94:	50000700 	.word	0x50000700
 8003c98:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	691a      	ldr	r2, [r3, #16]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0201 	bic.w	r2, r2, #1
 8003caa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d10c      	bne.n	8003cce <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	f023 010f 	bic.w	r1, r3, #15
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	1e5a      	subs	r2, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30
 8003ccc:	e007      	b.n	8003cde <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 020f 	bic.w	r2, r2, #15
 8003cdc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce2:	f023 0303 	bic.w	r3, r3, #3
 8003ce6:	f043 0201 	orr.w	r2, r3, #1
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	65da      	str	r2, [r3, #92]	; 0x5c
 8003cee:	e007      	b.n	8003d00 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf4:	f043 0210 	orr.w	r2, r3, #16
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d00:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3724      	adds	r7, #36	; 0x24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd90      	pop	{r4, r7, pc}
 8003d0a:	bf00      	nop

08003d0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b0b6      	sub	sp, #216	; 0xd8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d102      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x24>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	f000 bc13 	b.w	8004556 <HAL_ADC_ConfigChannel+0x84a>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff fdfc 	bl	800393a <LL_ADC_REG_IsConversionOngoing>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f040 83f3 	bne.w	8004530 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	6859      	ldr	r1, [r3, #4]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	f7ff fd0e 	bl	8003778 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff fdea 	bl	800393a <LL_ADC_REG_IsConversionOngoing>
 8003d66:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff fdf6 	bl	8003960 <LL_ADC_INJ_IsConversionOngoing>
 8003d74:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d78:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f040 81d9 	bne.w	8004134 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f040 81d4 	bne.w	8004134 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d94:	d10f      	bne.n	8003db6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	4619      	mov	r1, r3
 8003da2:	f7ff fd15 	bl	80037d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fccf 	bl	8003752 <LL_ADC_SetSamplingTimeCommonConfig>
 8003db4:	e00e      	b.n	8003dd4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	6819      	ldr	r1, [r3, #0]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	f7ff fd04 	bl	80037d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2100      	movs	r1, #0
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff fcbf 	bl	8003752 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	695a      	ldr	r2, [r3, #20]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	08db      	lsrs	r3, r3, #3
 8003de0:	f003 0303 	and.w	r3, r3, #3
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d022      	beq.n	8003e3c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6818      	ldr	r0, [r3, #0]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	6919      	ldr	r1, [r3, #16]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e06:	f7ff fc19 	bl	800363c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	6919      	ldr	r1, [r3, #16]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	461a      	mov	r2, r3
 8003e18:	f7ff fc65 	bl	80036e6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	6919      	ldr	r1, [r3, #16]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	7f1b      	ldrb	r3, [r3, #28]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d102      	bne.n	8003e32 <HAL_ADC_ConfigChannel+0x126>
 8003e2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e30:	e000      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x128>
 8003e32:	2300      	movs	r3, #0
 8003e34:	461a      	mov	r2, r3
 8003e36:	f7ff fc71 	bl	800371c <LL_ADC_SetOffsetSaturation>
 8003e3a:	e17b      	b.n	8004134 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2100      	movs	r1, #0
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff fc1e 	bl	8003684 <LL_ADC_GetOffsetChannel>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10a      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x15c>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2100      	movs	r1, #0
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff fc13 	bl	8003684 <LL_ADC_GetOffsetChannel>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	0e9b      	lsrs	r3, r3, #26
 8003e62:	f003 021f 	and.w	r2, r3, #31
 8003e66:	e01e      	b.n	8003ea6 <HAL_ADC_ConfigChannel+0x19a>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff fc08 	bl	8003684 <LL_ADC_GetOffsetChannel>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e7e:	fa93 f3a3 	rbit	r3, r3
 8003e82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003e96:	2320      	movs	r3, #32
 8003e98:	e004      	b.n	8003ea4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003e9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e9e:	fab3 f383 	clz	r3, r3
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d105      	bne.n	8003ebe <HAL_ADC_ConfigChannel+0x1b2>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	0e9b      	lsrs	r3, r3, #26
 8003eb8:	f003 031f 	and.w	r3, r3, #31
 8003ebc:	e018      	b.n	8003ef0 <HAL_ADC_ConfigChannel+0x1e4>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003eca:	fa93 f3a3 	rbit	r3, r3
 8003ece:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003ed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ed6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003eda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003ee2:	2320      	movs	r3, #32
 8003ee4:	e004      	b.n	8003ef0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003ee6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003eea:	fab3 f383 	clz	r3, r3
 8003eee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d106      	bne.n	8003f02 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff fbd7 	bl	80036b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2101      	movs	r1, #1
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff fbbb 	bl	8003684 <LL_ADC_GetOffsetChannel>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10a      	bne.n	8003f2e <HAL_ADC_ConfigChannel+0x222>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff fbb0 	bl	8003684 <LL_ADC_GetOffsetChannel>
 8003f24:	4603      	mov	r3, r0
 8003f26:	0e9b      	lsrs	r3, r3, #26
 8003f28:	f003 021f 	and.w	r2, r3, #31
 8003f2c:	e01e      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x260>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2101      	movs	r1, #1
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff fba5 	bl	8003684 <LL_ADC_GetOffsetChannel>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f44:	fa93 f3a3 	rbit	r3, r3
 8003f48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003f4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003f54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003f5c:	2320      	movs	r3, #32
 8003f5e:	e004      	b.n	8003f6a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003f60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f64:	fab3 f383 	clz	r3, r3
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d105      	bne.n	8003f84 <HAL_ADC_ConfigChannel+0x278>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	0e9b      	lsrs	r3, r3, #26
 8003f7e:	f003 031f 	and.w	r3, r3, #31
 8003f82:	e018      	b.n	8003fb6 <HAL_ADC_ConfigChannel+0x2aa>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f90:	fa93 f3a3 	rbit	r3, r3
 8003f94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003f98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003fa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003fa8:	2320      	movs	r3, #32
 8003faa:	e004      	b.n	8003fb6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003fac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fb0:	fab3 f383 	clz	r3, r3
 8003fb4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d106      	bne.n	8003fc8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff fb74 	bl	80036b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2102      	movs	r1, #2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff fb58 	bl	8003684 <LL_ADC_GetOffsetChannel>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10a      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x2e8>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2102      	movs	r1, #2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff fb4d 	bl	8003684 <LL_ADC_GetOffsetChannel>
 8003fea:	4603      	mov	r3, r0
 8003fec:	0e9b      	lsrs	r3, r3, #26
 8003fee:	f003 021f 	and.w	r2, r3, #31
 8003ff2:	e01e      	b.n	8004032 <HAL_ADC_ConfigChannel+0x326>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2102      	movs	r1, #2
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff fb42 	bl	8003684 <LL_ADC_GetOffsetChannel>
 8004000:	4603      	mov	r3, r0
 8004002:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800400a:	fa93 f3a3 	rbit	r3, r3
 800400e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004012:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004016:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800401a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004022:	2320      	movs	r3, #32
 8004024:	e004      	b.n	8004030 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004026:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800402a:	fab3 f383 	clz	r3, r3
 800402e:	b2db      	uxtb	r3, r3
 8004030:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800403a:	2b00      	cmp	r3, #0
 800403c:	d105      	bne.n	800404a <HAL_ADC_ConfigChannel+0x33e>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	0e9b      	lsrs	r3, r3, #26
 8004044:	f003 031f 	and.w	r3, r3, #31
 8004048:	e016      	b.n	8004078 <HAL_ADC_ConfigChannel+0x36c>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004052:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004056:	fa93 f3a3 	rbit	r3, r3
 800405a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800405c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800405e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004062:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800406a:	2320      	movs	r3, #32
 800406c:	e004      	b.n	8004078 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800406e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004072:	fab3 f383 	clz	r3, r3
 8004076:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004078:	429a      	cmp	r2, r3
 800407a:	d106      	bne.n	800408a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2200      	movs	r2, #0
 8004082:	2102      	movs	r1, #2
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff fb13 	bl	80036b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2103      	movs	r1, #3
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff faf7 	bl	8003684 <LL_ADC_GetOffsetChannel>
 8004096:	4603      	mov	r3, r0
 8004098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10a      	bne.n	80040b6 <HAL_ADC_ConfigChannel+0x3aa>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2103      	movs	r1, #3
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff faec 	bl	8003684 <LL_ADC_GetOffsetChannel>
 80040ac:	4603      	mov	r3, r0
 80040ae:	0e9b      	lsrs	r3, r3, #26
 80040b0:	f003 021f 	and.w	r2, r3, #31
 80040b4:	e017      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x3da>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2103      	movs	r1, #3
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff fae1 	bl	8003684 <LL_ADC_GetOffsetChannel>
 80040c2:	4603      	mov	r3, r0
 80040c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040c8:	fa93 f3a3 	rbit	r3, r3
 80040cc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80040ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040d0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80040d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80040d8:	2320      	movs	r3, #32
 80040da:	e003      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80040dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040de:	fab3 f383 	clz	r3, r3
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d105      	bne.n	80040fe <HAL_ADC_ConfigChannel+0x3f2>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	0e9b      	lsrs	r3, r3, #26
 80040f8:	f003 031f 	and.w	r3, r3, #31
 80040fc:	e011      	b.n	8004122 <HAL_ADC_ConfigChannel+0x416>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004104:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004106:	fa93 f3a3 	rbit	r3, r3
 800410a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800410c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800410e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004116:	2320      	movs	r3, #32
 8004118:	e003      	b.n	8004122 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800411a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800411c:	fab3 f383 	clz	r3, r3
 8004120:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004122:	429a      	cmp	r2, r3
 8004124:	d106      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2200      	movs	r2, #0
 800412c:	2103      	movs	r1, #3
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff fabe 	bl	80036b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff fbeb 	bl	8003914 <LL_ADC_IsEnabled>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	f040 813d 	bne.w	80043c0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6818      	ldr	r0, [r3, #0]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	6819      	ldr	r1, [r3, #0]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	461a      	mov	r2, r3
 8004154:	f7ff fb68 	bl	8003828 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	4aa2      	ldr	r2, [pc, #648]	; (80043e8 <HAL_ADC_ConfigChannel+0x6dc>)
 800415e:	4293      	cmp	r3, r2
 8004160:	f040 812e 	bne.w	80043c0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10b      	bne.n	800418c <HAL_ADC_ConfigChannel+0x480>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	0e9b      	lsrs	r3, r3, #26
 800417a:	3301      	adds	r3, #1
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2b09      	cmp	r3, #9
 8004182:	bf94      	ite	ls
 8004184:	2301      	movls	r3, #1
 8004186:	2300      	movhi	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	e019      	b.n	80041c0 <HAL_ADC_ConfigChannel+0x4b4>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004194:	fa93 f3a3 	rbit	r3, r3
 8004198:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800419a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800419c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800419e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80041a4:	2320      	movs	r3, #32
 80041a6:	e003      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80041a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041aa:	fab3 f383 	clz	r3, r3
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	3301      	adds	r3, #1
 80041b2:	f003 031f 	and.w	r3, r3, #31
 80041b6:	2b09      	cmp	r3, #9
 80041b8:	bf94      	ite	ls
 80041ba:	2301      	movls	r3, #1
 80041bc:	2300      	movhi	r3, #0
 80041be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d079      	beq.n	80042b8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d107      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0x4d4>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	0e9b      	lsrs	r3, r3, #26
 80041d6:	3301      	adds	r3, #1
 80041d8:	069b      	lsls	r3, r3, #26
 80041da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041de:	e015      	b.n	800420c <HAL_ADC_ConfigChannel+0x500>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041e8:	fa93 f3a3 	rbit	r3, r3
 80041ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80041ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80041f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80041f8:	2320      	movs	r3, #32
 80041fa:	e003      	b.n	8004204 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80041fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041fe:	fab3 f383 	clz	r3, r3
 8004202:	b2db      	uxtb	r3, r3
 8004204:	3301      	adds	r3, #1
 8004206:	069b      	lsls	r3, r3, #26
 8004208:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004214:	2b00      	cmp	r3, #0
 8004216:	d109      	bne.n	800422c <HAL_ADC_ConfigChannel+0x520>
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	0e9b      	lsrs	r3, r3, #26
 800421e:	3301      	adds	r3, #1
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	2101      	movs	r1, #1
 8004226:	fa01 f303 	lsl.w	r3, r1, r3
 800422a:	e017      	b.n	800425c <HAL_ADC_ConfigChannel+0x550>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004234:	fa93 f3a3 	rbit	r3, r3
 8004238:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800423a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800423c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800423e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004244:	2320      	movs	r3, #32
 8004246:	e003      	b.n	8004250 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800424a:	fab3 f383 	clz	r3, r3
 800424e:	b2db      	uxtb	r3, r3
 8004250:	3301      	adds	r3, #1
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	2101      	movs	r1, #1
 8004258:	fa01 f303 	lsl.w	r3, r1, r3
 800425c:	ea42 0103 	orr.w	r1, r2, r3
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10a      	bne.n	8004282 <HAL_ADC_ConfigChannel+0x576>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	0e9b      	lsrs	r3, r3, #26
 8004272:	3301      	adds	r3, #1
 8004274:	f003 021f 	and.w	r2, r3, #31
 8004278:	4613      	mov	r3, r2
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	4413      	add	r3, r2
 800427e:	051b      	lsls	r3, r3, #20
 8004280:	e018      	b.n	80042b4 <HAL_ADC_ConfigChannel+0x5a8>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428a:	fa93 f3a3 	rbit	r3, r3
 800428e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004292:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800429a:	2320      	movs	r3, #32
 800429c:	e003      	b.n	80042a6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800429e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a0:	fab3 f383 	clz	r3, r3
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	3301      	adds	r3, #1
 80042a8:	f003 021f 	and.w	r2, r3, #31
 80042ac:	4613      	mov	r3, r2
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	4413      	add	r3, r2
 80042b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042b4:	430b      	orrs	r3, r1
 80042b6:	e07e      	b.n	80043b6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d107      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x5c8>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	0e9b      	lsrs	r3, r3, #26
 80042ca:	3301      	adds	r3, #1
 80042cc:	069b      	lsls	r3, r3, #26
 80042ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042d2:	e015      	b.n	8004300 <HAL_ADC_ConfigChannel+0x5f4>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042dc:	fa93 f3a3 	rbit	r3, r3
 80042e0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80042e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80042ec:	2320      	movs	r3, #32
 80042ee:	e003      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80042f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f2:	fab3 f383 	clz	r3, r3
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	3301      	adds	r3, #1
 80042fa:	069b      	lsls	r3, r3, #26
 80042fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004308:	2b00      	cmp	r3, #0
 800430a:	d109      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x614>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	0e9b      	lsrs	r3, r3, #26
 8004312:	3301      	adds	r3, #1
 8004314:	f003 031f 	and.w	r3, r3, #31
 8004318:	2101      	movs	r1, #1
 800431a:	fa01 f303 	lsl.w	r3, r1, r3
 800431e:	e017      	b.n	8004350 <HAL_ADC_ConfigChannel+0x644>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	fa93 f3a3 	rbit	r3, r3
 800432c:	61fb      	str	r3, [r7, #28]
  return result;
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004338:	2320      	movs	r3, #32
 800433a:	e003      	b.n	8004344 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	fab3 f383 	clz	r3, r3
 8004342:	b2db      	uxtb	r3, r3
 8004344:	3301      	adds	r3, #1
 8004346:	f003 031f 	and.w	r3, r3, #31
 800434a:	2101      	movs	r1, #1
 800434c:	fa01 f303 	lsl.w	r3, r1, r3
 8004350:	ea42 0103 	orr.w	r1, r2, r3
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10d      	bne.n	800437c <HAL_ADC_ConfigChannel+0x670>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	0e9b      	lsrs	r3, r3, #26
 8004366:	3301      	adds	r3, #1
 8004368:	f003 021f 	and.w	r2, r3, #31
 800436c:	4613      	mov	r3, r2
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	4413      	add	r3, r2
 8004372:	3b1e      	subs	r3, #30
 8004374:	051b      	lsls	r3, r3, #20
 8004376:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800437a:	e01b      	b.n	80043b4 <HAL_ADC_ConfigChannel+0x6a8>
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	fa93 f3a3 	rbit	r3, r3
 8004388:	613b      	str	r3, [r7, #16]
  return result;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004394:	2320      	movs	r3, #32
 8004396:	e003      	b.n	80043a0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	fab3 f383 	clz	r3, r3
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	3301      	adds	r3, #1
 80043a2:	f003 021f 	and.w	r2, r3, #31
 80043a6:	4613      	mov	r3, r2
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	4413      	add	r3, r2
 80043ac:	3b1e      	subs	r3, #30
 80043ae:	051b      	lsls	r3, r3, #20
 80043b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043b4:	430b      	orrs	r3, r1
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	6892      	ldr	r2, [r2, #8]
 80043ba:	4619      	mov	r1, r3
 80043bc:	f7ff fa08 	bl	80037d0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	4b09      	ldr	r3, [pc, #36]	; (80043ec <HAL_ADC_ConfigChannel+0x6e0>)
 80043c6:	4013      	ands	r3, r2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 80be 	beq.w	800454a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043d6:	d004      	beq.n	80043e2 <HAL_ADC_ConfigChannel+0x6d6>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a04      	ldr	r2, [pc, #16]	; (80043f0 <HAL_ADC_ConfigChannel+0x6e4>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d10a      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x6ec>
 80043e2:	4b04      	ldr	r3, [pc, #16]	; (80043f4 <HAL_ADC_ConfigChannel+0x6e8>)
 80043e4:	e009      	b.n	80043fa <HAL_ADC_ConfigChannel+0x6ee>
 80043e6:	bf00      	nop
 80043e8:	407f0000 	.word	0x407f0000
 80043ec:	80080000 	.word	0x80080000
 80043f0:	50000100 	.word	0x50000100
 80043f4:	50000300 	.word	0x50000300
 80043f8:	4b59      	ldr	r3, [pc, #356]	; (8004560 <HAL_ADC_ConfigChannel+0x854>)
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff f910 	bl	8003620 <LL_ADC_GetCommonPathInternalCh>
 8004400:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a56      	ldr	r2, [pc, #344]	; (8004564 <HAL_ADC_ConfigChannel+0x858>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d004      	beq.n	8004418 <HAL_ADC_ConfigChannel+0x70c>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a55      	ldr	r2, [pc, #340]	; (8004568 <HAL_ADC_ConfigChannel+0x85c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d13a      	bne.n	800448e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004418:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800441c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d134      	bne.n	800448e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800442c:	d005      	beq.n	800443a <HAL_ADC_ConfigChannel+0x72e>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a4e      	ldr	r2, [pc, #312]	; (800456c <HAL_ADC_ConfigChannel+0x860>)
 8004434:	4293      	cmp	r3, r2
 8004436:	f040 8085 	bne.w	8004544 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004442:	d004      	beq.n	800444e <HAL_ADC_ConfigChannel+0x742>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a49      	ldr	r2, [pc, #292]	; (8004570 <HAL_ADC_ConfigChannel+0x864>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d101      	bne.n	8004452 <HAL_ADC_ConfigChannel+0x746>
 800444e:	4a49      	ldr	r2, [pc, #292]	; (8004574 <HAL_ADC_ConfigChannel+0x868>)
 8004450:	e000      	b.n	8004454 <HAL_ADC_ConfigChannel+0x748>
 8004452:	4a43      	ldr	r2, [pc, #268]	; (8004560 <HAL_ADC_ConfigChannel+0x854>)
 8004454:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004458:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800445c:	4619      	mov	r1, r3
 800445e:	4610      	mov	r0, r2
 8004460:	f7ff f8cb 	bl	80035fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004464:	4b44      	ldr	r3, [pc, #272]	; (8004578 <HAL_ADC_ConfigChannel+0x86c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	099b      	lsrs	r3, r3, #6
 800446a:	4a44      	ldr	r2, [pc, #272]	; (800457c <HAL_ADC_ConfigChannel+0x870>)
 800446c:	fba2 2303 	umull	r2, r3, r2, r3
 8004470:	099b      	lsrs	r3, r3, #6
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	4613      	mov	r3, r2
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800447e:	e002      	b.n	8004486 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	3b01      	subs	r3, #1
 8004484:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f9      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800448c:	e05a      	b.n	8004544 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a3b      	ldr	r2, [pc, #236]	; (8004580 <HAL_ADC_ConfigChannel+0x874>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d125      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x7d8>
 8004498:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800449c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d11f      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a31      	ldr	r2, [pc, #196]	; (8004570 <HAL_ADC_ConfigChannel+0x864>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d104      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x7ac>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a34      	ldr	r2, [pc, #208]	; (8004584 <HAL_ADC_ConfigChannel+0x878>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d047      	beq.n	8004548 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044c0:	d004      	beq.n	80044cc <HAL_ADC_ConfigChannel+0x7c0>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a2a      	ldr	r2, [pc, #168]	; (8004570 <HAL_ADC_ConfigChannel+0x864>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d101      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x7c4>
 80044cc:	4a29      	ldr	r2, [pc, #164]	; (8004574 <HAL_ADC_ConfigChannel+0x868>)
 80044ce:	e000      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x7c6>
 80044d0:	4a23      	ldr	r2, [pc, #140]	; (8004560 <HAL_ADC_ConfigChannel+0x854>)
 80044d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044da:	4619      	mov	r1, r3
 80044dc:	4610      	mov	r0, r2
 80044de:	f7ff f88c 	bl	80035fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044e2:	e031      	b.n	8004548 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a27      	ldr	r2, [pc, #156]	; (8004588 <HAL_ADC_ConfigChannel+0x87c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d12d      	bne.n	800454a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80044ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d127      	bne.n	800454a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1c      	ldr	r2, [pc, #112]	; (8004570 <HAL_ADC_ConfigChannel+0x864>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d022      	beq.n	800454a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800450c:	d004      	beq.n	8004518 <HAL_ADC_ConfigChannel+0x80c>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a17      	ldr	r2, [pc, #92]	; (8004570 <HAL_ADC_ConfigChannel+0x864>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d101      	bne.n	800451c <HAL_ADC_ConfigChannel+0x810>
 8004518:	4a16      	ldr	r2, [pc, #88]	; (8004574 <HAL_ADC_ConfigChannel+0x868>)
 800451a:	e000      	b.n	800451e <HAL_ADC_ConfigChannel+0x812>
 800451c:	4a10      	ldr	r2, [pc, #64]	; (8004560 <HAL_ADC_ConfigChannel+0x854>)
 800451e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004522:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004526:	4619      	mov	r1, r3
 8004528:	4610      	mov	r0, r2
 800452a:	f7ff f866 	bl	80035fa <LL_ADC_SetCommonPathInternalCh>
 800452e:	e00c      	b.n	800454a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004534:	f043 0220 	orr.w	r2, r3, #32
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004542:	e002      	b.n	800454a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004544:	bf00      	nop
 8004546:	e000      	b.n	800454a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004548:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004552:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004556:	4618      	mov	r0, r3
 8004558:	37d8      	adds	r7, #216	; 0xd8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	50000700 	.word	0x50000700
 8004564:	c3210000 	.word	0xc3210000
 8004568:	90c00010 	.word	0x90c00010
 800456c:	50000600 	.word	0x50000600
 8004570:	50000100 	.word	0x50000100
 8004574:	50000300 	.word	0x50000300
 8004578:	20000000 	.word	0x20000000
 800457c:	053e2d63 	.word	0x053e2d63
 8004580:	c7520000 	.word	0xc7520000
 8004584:	50000500 	.word	0x50000500
 8004588:	cb840000 	.word	0xcb840000

0800458c <LL_ADC_IsEnabled>:
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <LL_ADC_IsEnabled+0x18>
 80045a0:	2301      	movs	r3, #1
 80045a2:	e000      	b.n	80045a6 <LL_ADC_IsEnabled+0x1a>
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 0304 	and.w	r3, r3, #4
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d101      	bne.n	80045ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80045d8:	b590      	push	{r4, r7, lr}
 80045da:	b0a1      	sub	sp, #132	; 0x84
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d101      	bne.n	80045f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80045f2:	2302      	movs	r3, #2
 80045f4:	e0e7      	b.n	80047c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80045fe:	2300      	movs	r3, #0
 8004600:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004602:	2300      	movs	r3, #0
 8004604:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800460e:	d102      	bne.n	8004616 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004610:	4b6f      	ldr	r3, [pc, #444]	; (80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004612:	60bb      	str	r3, [r7, #8]
 8004614:	e009      	b.n	800462a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a6e      	ldr	r2, [pc, #440]	; (80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d102      	bne.n	8004626 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004620:	4b6d      	ldr	r3, [pc, #436]	; (80047d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004622:	60bb      	str	r3, [r7, #8]
 8004624:	e001      	b.n	800462a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004626:	2300      	movs	r3, #0
 8004628:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10b      	bne.n	8004648 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004634:	f043 0220 	orr.w	r2, r3, #32
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e0be      	b.n	80047c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff ffb1 	bl	80045b2 <LL_ADC_REG_IsConversionOngoing>
 8004650:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff ffab 	bl	80045b2 <LL_ADC_REG_IsConversionOngoing>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	f040 80a0 	bne.w	80047a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004666:	2b00      	cmp	r3, #0
 8004668:	f040 809c 	bne.w	80047a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004674:	d004      	beq.n	8004680 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a55      	ldr	r2, [pc, #340]	; (80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d101      	bne.n	8004684 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004680:	4b56      	ldr	r3, [pc, #344]	; (80047dc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004682:	e000      	b.n	8004686 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004684:	4b56      	ldr	r3, [pc, #344]	; (80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004686:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d04b      	beq.n	8004728 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	6859      	ldr	r1, [r3, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046a2:	035b      	lsls	r3, r3, #13
 80046a4:	430b      	orrs	r3, r1
 80046a6:	431a      	orrs	r2, r3
 80046a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046b4:	d004      	beq.n	80046c0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a45      	ldr	r2, [pc, #276]	; (80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d10f      	bne.n	80046e0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80046c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80046c4:	f7ff ff62 	bl	800458c <LL_ADC_IsEnabled>
 80046c8:	4604      	mov	r4, r0
 80046ca:	4841      	ldr	r0, [pc, #260]	; (80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046cc:	f7ff ff5e 	bl	800458c <LL_ADC_IsEnabled>
 80046d0:	4603      	mov	r3, r0
 80046d2:	4323      	orrs	r3, r4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	bf0c      	ite	eq
 80046d8:	2301      	moveq	r3, #1
 80046da:	2300      	movne	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	e012      	b.n	8004706 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80046e0:	483c      	ldr	r0, [pc, #240]	; (80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80046e2:	f7ff ff53 	bl	800458c <LL_ADC_IsEnabled>
 80046e6:	4604      	mov	r4, r0
 80046e8:	483b      	ldr	r0, [pc, #236]	; (80047d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80046ea:	f7ff ff4f 	bl	800458c <LL_ADC_IsEnabled>
 80046ee:	4603      	mov	r3, r0
 80046f0:	431c      	orrs	r4, r3
 80046f2:	483c      	ldr	r0, [pc, #240]	; (80047e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80046f4:	f7ff ff4a 	bl	800458c <LL_ADC_IsEnabled>
 80046f8:	4603      	mov	r3, r0
 80046fa:	4323      	orrs	r3, r4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	bf0c      	ite	eq
 8004700:	2301      	moveq	r3, #1
 8004702:	2300      	movne	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d056      	beq.n	80047b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800470a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004712:	f023 030f 	bic.w	r3, r3, #15
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	6811      	ldr	r1, [r2, #0]
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	6892      	ldr	r2, [r2, #8]
 800471e:	430a      	orrs	r2, r1
 8004720:	431a      	orrs	r2, r3
 8004722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004724:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004726:	e047      	b.n	80047b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004728:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004732:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800473c:	d004      	beq.n	8004748 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a23      	ldr	r2, [pc, #140]	; (80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d10f      	bne.n	8004768 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004748:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800474c:	f7ff ff1e 	bl	800458c <LL_ADC_IsEnabled>
 8004750:	4604      	mov	r4, r0
 8004752:	481f      	ldr	r0, [pc, #124]	; (80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004754:	f7ff ff1a 	bl	800458c <LL_ADC_IsEnabled>
 8004758:	4603      	mov	r3, r0
 800475a:	4323      	orrs	r3, r4
 800475c:	2b00      	cmp	r3, #0
 800475e:	bf0c      	ite	eq
 8004760:	2301      	moveq	r3, #1
 8004762:	2300      	movne	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	e012      	b.n	800478e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004768:	481a      	ldr	r0, [pc, #104]	; (80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800476a:	f7ff ff0f 	bl	800458c <LL_ADC_IsEnabled>
 800476e:	4604      	mov	r4, r0
 8004770:	4819      	ldr	r0, [pc, #100]	; (80047d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004772:	f7ff ff0b 	bl	800458c <LL_ADC_IsEnabled>
 8004776:	4603      	mov	r3, r0
 8004778:	431c      	orrs	r4, r3
 800477a:	481a      	ldr	r0, [pc, #104]	; (80047e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800477c:	f7ff ff06 	bl	800458c <LL_ADC_IsEnabled>
 8004780:	4603      	mov	r3, r0
 8004782:	4323      	orrs	r3, r4
 8004784:	2b00      	cmp	r3, #0
 8004786:	bf0c      	ite	eq
 8004788:	2301      	moveq	r3, #1
 800478a:	2300      	movne	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d012      	beq.n	80047b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800479a:	f023 030f 	bic.w	r3, r3, #15
 800479e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80047a0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047a2:	e009      	b.n	80047b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a8:	f043 0220 	orr.w	r2, r3, #32
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80047b6:	e000      	b.n	80047ba <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80047c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3784      	adds	r7, #132	; 0x84
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd90      	pop	{r4, r7, pc}
 80047ce:	bf00      	nop
 80047d0:	50000100 	.word	0x50000100
 80047d4:	50000400 	.word	0x50000400
 80047d8:	50000500 	.word	0x50000500
 80047dc:	50000300 	.word	0x50000300
 80047e0:	50000700 	.word	0x50000700
 80047e4:	50000600 	.word	0x50000600

080047e8 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e023      	b.n	8004842 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d106      	bne.n	8004814 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fc fec2 	bl	8001598 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800485c:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <__NVIC_SetPriorityGrouping+0x44>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004868:	4013      	ands	r3, r2
 800486a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800487c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800487e:	4a04      	ldr	r2, [pc, #16]	; (8004890 <__NVIC_SetPriorityGrouping+0x44>)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	60d3      	str	r3, [r2, #12]
}
 8004884:	bf00      	nop
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	e000ed00 	.word	0xe000ed00

08004894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004898:	4b04      	ldr	r3, [pc, #16]	; (80048ac <__NVIC_GetPriorityGrouping+0x18>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	0a1b      	lsrs	r3, r3, #8
 800489e:	f003 0307 	and.w	r3, r3, #7
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	e000ed00 	.word	0xe000ed00

080048b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	db0b      	blt.n	80048da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048c2:	79fb      	ldrb	r3, [r7, #7]
 80048c4:	f003 021f 	and.w	r2, r3, #31
 80048c8:	4907      	ldr	r1, [pc, #28]	; (80048e8 <__NVIC_EnableIRQ+0x38>)
 80048ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	2001      	movs	r0, #1
 80048d2:	fa00 f202 	lsl.w	r2, r0, r2
 80048d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	e000e100 	.word	0xe000e100

080048ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	6039      	str	r1, [r7, #0]
 80048f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	db0a      	blt.n	8004916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	b2da      	uxtb	r2, r3
 8004904:	490c      	ldr	r1, [pc, #48]	; (8004938 <__NVIC_SetPriority+0x4c>)
 8004906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800490a:	0112      	lsls	r2, r2, #4
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	440b      	add	r3, r1
 8004910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004914:	e00a      	b.n	800492c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	b2da      	uxtb	r2, r3
 800491a:	4908      	ldr	r1, [pc, #32]	; (800493c <__NVIC_SetPriority+0x50>)
 800491c:	79fb      	ldrb	r3, [r7, #7]
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	3b04      	subs	r3, #4
 8004924:	0112      	lsls	r2, r2, #4
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	440b      	add	r3, r1
 800492a:	761a      	strb	r2, [r3, #24]
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	e000e100 	.word	0xe000e100
 800493c:	e000ed00 	.word	0xe000ed00

08004940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004940:	b480      	push	{r7}
 8004942:	b089      	sub	sp, #36	; 0x24
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	f1c3 0307 	rsb	r3, r3, #7
 800495a:	2b04      	cmp	r3, #4
 800495c:	bf28      	it	cs
 800495e:	2304      	movcs	r3, #4
 8004960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	3304      	adds	r3, #4
 8004966:	2b06      	cmp	r3, #6
 8004968:	d902      	bls.n	8004970 <NVIC_EncodePriority+0x30>
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	3b03      	subs	r3, #3
 800496e:	e000      	b.n	8004972 <NVIC_EncodePriority+0x32>
 8004970:	2300      	movs	r3, #0
 8004972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	43da      	mvns	r2, r3
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	401a      	ands	r2, r3
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004988:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	fa01 f303 	lsl.w	r3, r1, r3
 8004992:	43d9      	mvns	r1, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004998:	4313      	orrs	r3, r2
         );
}
 800499a:	4618      	mov	r0, r3
 800499c:	3724      	adds	r7, #36	; 0x24
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b082      	sub	sp, #8
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7ff ff4c 	bl	800484c <__NVIC_SetPriorityGrouping>
}
 80049b4:	bf00      	nop
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049ca:	f7ff ff63 	bl	8004894 <__NVIC_GetPriorityGrouping>
 80049ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	68b9      	ldr	r1, [r7, #8]
 80049d4:	6978      	ldr	r0, [r7, #20]
 80049d6:	f7ff ffb3 	bl	8004940 <NVIC_EncodePriority>
 80049da:	4602      	mov	r2, r0
 80049dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049e0:	4611      	mov	r1, r2
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7ff ff82 	bl	80048ec <__NVIC_SetPriority>
}
 80049e8:	bf00      	nop
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	4603      	mov	r3, r0
 80049f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff ff56 	bl	80048b0 <__NVIC_EnableIRQ>
}
 8004a04:	bf00      	nop
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e033      	b.n	8004a86 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fc fde4 	bl	8001600 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f854 	bl	8004aec <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f822 	bl	8004a8e <FMAC_Reset>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d10c      	bne.n	8004a6a <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a54:	f043 0210 	orr.w	r2, r3, #16
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	22a0      	movs	r2, #160	; 0xa0
 8004a60:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	73fb      	strb	r3, [r7, #15]
 8004a68:	e008      	b.n	8004a7c <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b084      	sub	sp, #16
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a96:	f7fe fd6f 	bl	8003578 <HAL_GetTick>
 8004a9a:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691a      	ldr	r2, [r3, #16]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004aaa:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8004aac:	e00f      	b.n	8004ace <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8004aae:	f7fe fd63 	bl	8003578 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004abc:	d907      	bls.n	8004ace <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e00a      	b.n	8004ae4 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e8      	bne.n	8004aae <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f807 	bl	8004b08 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f81b 	bl	8004b36 <FMAC_ResetOutputStateAndDataPointers>
}
 8004b00:	bf00      	nop
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b72:	e15a      	b.n	8004e2a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	2101      	movs	r1, #1
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b80:	4013      	ands	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 814c 	beq.w	8004e24 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f003 0303 	and.w	r3, r3, #3
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d005      	beq.n	8004ba4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d130      	bne.n	8004c06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	2203      	movs	r2, #3
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bda:	2201      	movs	r2, #1
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	43db      	mvns	r3, r3
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4013      	ands	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	091b      	lsrs	r3, r3, #4
 8004bf0:	f003 0201 	and.w	r2, r3, #1
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d017      	beq.n	8004c42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	005b      	lsls	r3, r3, #1
 8004c1c:	2203      	movs	r2, #3
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	43db      	mvns	r3, r3
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	4013      	ands	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	fa02 f303 	lsl.w	r3, r2, r3
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d123      	bne.n	8004c96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	08da      	lsrs	r2, r3, #3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3208      	adds	r2, #8
 8004c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f003 0307 	and.w	r3, r3, #7
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	220f      	movs	r2, #15
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	43db      	mvns	r3, r3
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	08da      	lsrs	r2, r3, #3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3208      	adds	r2, #8
 8004c90:	6939      	ldr	r1, [r7, #16]
 8004c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	2203      	movs	r2, #3
 8004ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca6:	43db      	mvns	r3, r3
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	4013      	ands	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f003 0203 	and.w	r2, r3, #3
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 80a6 	beq.w	8004e24 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cd8:	4b5b      	ldr	r3, [pc, #364]	; (8004e48 <HAL_GPIO_Init+0x2e4>)
 8004cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cdc:	4a5a      	ldr	r2, [pc, #360]	; (8004e48 <HAL_GPIO_Init+0x2e4>)
 8004cde:	f043 0301 	orr.w	r3, r3, #1
 8004ce2:	6613      	str	r3, [r2, #96]	; 0x60
 8004ce4:	4b58      	ldr	r3, [pc, #352]	; (8004e48 <HAL_GPIO_Init+0x2e4>)
 8004ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	60bb      	str	r3, [r7, #8]
 8004cee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cf0:	4a56      	ldr	r2, [pc, #344]	; (8004e4c <HAL_GPIO_Init+0x2e8>)
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	089b      	lsrs	r3, r3, #2
 8004cf6:	3302      	adds	r3, #2
 8004cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f003 0303 	and.w	r3, r3, #3
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	220f      	movs	r2, #15
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4013      	ands	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d1a:	d01f      	beq.n	8004d5c <HAL_GPIO_Init+0x1f8>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a4c      	ldr	r2, [pc, #304]	; (8004e50 <HAL_GPIO_Init+0x2ec>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d019      	beq.n	8004d58 <HAL_GPIO_Init+0x1f4>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a4b      	ldr	r2, [pc, #300]	; (8004e54 <HAL_GPIO_Init+0x2f0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d013      	beq.n	8004d54 <HAL_GPIO_Init+0x1f0>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a4a      	ldr	r2, [pc, #296]	; (8004e58 <HAL_GPIO_Init+0x2f4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00d      	beq.n	8004d50 <HAL_GPIO_Init+0x1ec>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a49      	ldr	r2, [pc, #292]	; (8004e5c <HAL_GPIO_Init+0x2f8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d007      	beq.n	8004d4c <HAL_GPIO_Init+0x1e8>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a48      	ldr	r2, [pc, #288]	; (8004e60 <HAL_GPIO_Init+0x2fc>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d101      	bne.n	8004d48 <HAL_GPIO_Init+0x1e4>
 8004d44:	2305      	movs	r3, #5
 8004d46:	e00a      	b.n	8004d5e <HAL_GPIO_Init+0x1fa>
 8004d48:	2306      	movs	r3, #6
 8004d4a:	e008      	b.n	8004d5e <HAL_GPIO_Init+0x1fa>
 8004d4c:	2304      	movs	r3, #4
 8004d4e:	e006      	b.n	8004d5e <HAL_GPIO_Init+0x1fa>
 8004d50:	2303      	movs	r3, #3
 8004d52:	e004      	b.n	8004d5e <HAL_GPIO_Init+0x1fa>
 8004d54:	2302      	movs	r3, #2
 8004d56:	e002      	b.n	8004d5e <HAL_GPIO_Init+0x1fa>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <HAL_GPIO_Init+0x1fa>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	f002 0203 	and.w	r2, r2, #3
 8004d64:	0092      	lsls	r2, r2, #2
 8004d66:	4093      	lsls	r3, r2
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d6e:	4937      	ldr	r1, [pc, #220]	; (8004e4c <HAL_GPIO_Init+0x2e8>)
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	089b      	lsrs	r3, r3, #2
 8004d74:	3302      	adds	r3, #2
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d7c:	4b39      	ldr	r3, [pc, #228]	; (8004e64 <HAL_GPIO_Init+0x300>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	43db      	mvns	r3, r3
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004da0:	4a30      	ldr	r2, [pc, #192]	; (8004e64 <HAL_GPIO_Init+0x300>)
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004da6:	4b2f      	ldr	r3, [pc, #188]	; (8004e64 <HAL_GPIO_Init+0x300>)
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	43db      	mvns	r3, r3
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	4013      	ands	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004dca:	4a26      	ldr	r2, [pc, #152]	; (8004e64 <HAL_GPIO_Init+0x300>)
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004dd0:	4b24      	ldr	r3, [pc, #144]	; (8004e64 <HAL_GPIO_Init+0x300>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004df4:	4a1b      	ldr	r2, [pc, #108]	; (8004e64 <HAL_GPIO_Init+0x300>)
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004dfa:	4b1a      	ldr	r3, [pc, #104]	; (8004e64 <HAL_GPIO_Init+0x300>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	43db      	mvns	r3, r3
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4013      	ands	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e1e:	4a11      	ldr	r2, [pc, #68]	; (8004e64 <HAL_GPIO_Init+0x300>)
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	3301      	adds	r3, #1
 8004e28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	fa22 f303 	lsr.w	r3, r2, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f47f ae9d 	bne.w	8004b74 <HAL_GPIO_Init+0x10>
  }
}
 8004e3a:	bf00      	nop
 8004e3c:	bf00      	nop
 8004e3e:	371c      	adds	r7, #28
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	40010000 	.word	0x40010000
 8004e50:	48000400 	.word	0x48000400
 8004e54:	48000800 	.word	0x48000800
 8004e58:	48000c00 	.word	0x48000c00
 8004e5c:	48001000 	.word	0x48001000
 8004e60:	48001400 	.word	0x48001400
 8004e64:	40010400 	.word	0x40010400

08004e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	460b      	mov	r3, r1
 8004e72:	807b      	strh	r3, [r7, #2]
 8004e74:	4613      	mov	r3, r2
 8004e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e78:	787b      	ldrb	r3, [r7, #1]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e7e:	887a      	ldrh	r2, [r7, #2]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e84:	e002      	b.n	8004e8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e86:	887a      	ldrh	r2, [r7, #2]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004eaa:	887a      	ldrh	r2, [r7, #2]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	041a      	lsls	r2, r3, #16
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	43d9      	mvns	r1, r3
 8004eb6:	887b      	ldrh	r3, [r7, #2]
 8004eb8:	400b      	ands	r3, r1
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	619a      	str	r2, [r3, #24]
}
 8004ec0:	bf00      	nop
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ed6:	4b08      	ldr	r3, [pc, #32]	; (8004ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ed8:	695a      	ldr	r2, [r3, #20]
 8004eda:	88fb      	ldrh	r3, [r7, #6]
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d006      	beq.n	8004ef0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ee2:	4a05      	ldr	r2, [pc, #20]	; (8004ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ee4:	88fb      	ldrh	r3, [r7, #6]
 8004ee6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ee8:	88fb      	ldrh	r3, [r7, #6]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fc fba8 	bl	8001640 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40010400 	.word	0x40010400

08004efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e081      	b.n	8005012 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d106      	bne.n	8004f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fc fcd2 	bl	80018cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2224      	movs	r2, #36	; 0x24
 8004f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0201 	bic.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d107      	bne.n	8004f76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f72:	609a      	str	r2, [r3, #8]
 8004f74:	e006      	b.n	8004f84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689a      	ldr	r2, [r3, #8]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004f82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d104      	bne.n	8004f96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6812      	ldr	r2, [r2, #0]
 8004fa0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fa8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fb8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691a      	ldr	r2, [r3, #16]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69d9      	ldr	r1, [r3, #28]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a1a      	ldr	r2, [r3, #32]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0201 	orr.w	r2, r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af02      	add	r7, sp, #8
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	607a      	str	r2, [r7, #4]
 8005026:	461a      	mov	r2, r3
 8005028:	460b      	mov	r3, r1
 800502a:	817b      	strh	r3, [r7, #10]
 800502c:	4613      	mov	r3, r2
 800502e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b20      	cmp	r3, #32
 800503a:	f040 80da 	bne.w	80051f2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_I2C_Master_Transmit+0x30>
 8005048:	2302      	movs	r3, #2
 800504a:	e0d3      	b.n	80051f4 <HAL_I2C_Master_Transmit+0x1d8>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005054:	f7fe fa90 	bl	8003578 <HAL_GetTick>
 8005058:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	2319      	movs	r3, #25
 8005060:	2201      	movs	r2, #1
 8005062:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 fb66 	bl	8005738 <I2C_WaitOnFlagUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e0be      	b.n	80051f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2221      	movs	r2, #33	; 0x21
 800507a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2210      	movs	r2, #16
 8005082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	893a      	ldrh	r2, [r7, #8]
 8005096:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	2bff      	cmp	r3, #255	; 0xff
 80050a6:	d90e      	bls.n	80050c6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	22ff      	movs	r2, #255	; 0xff
 80050ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	8979      	ldrh	r1, [r7, #10]
 80050b6:	4b51      	ldr	r3, [pc, #324]	; (80051fc <HAL_I2C_Master_Transmit+0x1e0>)
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 fce2 	bl	8005a88 <I2C_TransferConfig>
 80050c4:	e06c      	b.n	80051a0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	8979      	ldrh	r1, [r7, #10]
 80050d8:	4b48      	ldr	r3, [pc, #288]	; (80051fc <HAL_I2C_Master_Transmit+0x1e0>)
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 fcd1 	bl	8005a88 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80050e6:	e05b      	b.n	80051a0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	6a39      	ldr	r1, [r7, #32]
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 fb63 	bl	80057b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e07b      	b.n	80051f4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	781a      	ldrb	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005116:	b29b      	uxth	r3, r3
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005124:	3b01      	subs	r3, #1
 8005126:	b29a      	uxth	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005130:	b29b      	uxth	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d034      	beq.n	80051a0 <HAL_I2C_Master_Transmit+0x184>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800513a:	2b00      	cmp	r3, #0
 800513c:	d130      	bne.n	80051a0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	2200      	movs	r2, #0
 8005146:	2180      	movs	r1, #128	; 0x80
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 faf5 	bl	8005738 <I2C_WaitOnFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e04d      	b.n	80051f4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515c:	b29b      	uxth	r3, r3
 800515e:	2bff      	cmp	r3, #255	; 0xff
 8005160:	d90e      	bls.n	8005180 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	22ff      	movs	r2, #255	; 0xff
 8005166:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516c:	b2da      	uxtb	r2, r3
 800516e:	8979      	ldrh	r1, [r7, #10]
 8005170:	2300      	movs	r3, #0
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 fc85 	bl	8005a88 <I2C_TransferConfig>
 800517e:	e00f      	b.n	80051a0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518e:	b2da      	uxtb	r2, r3
 8005190:	8979      	ldrh	r1, [r7, #10]
 8005192:	2300      	movs	r3, #0
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 fc74 	bl	8005a88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d19e      	bne.n	80050e8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	6a39      	ldr	r1, [r7, #32]
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 fb42 	bl	8005838 <I2C_WaitOnSTOPFlagUntilTimeout>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e01a      	b.n	80051f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2220      	movs	r2, #32
 80051c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6859      	ldr	r1, [r3, #4]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <HAL_I2C_Master_Transmit+0x1e4>)
 80051d2:	400b      	ands	r3, r1
 80051d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	e000      	b.n	80051f4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80051f2:	2302      	movs	r3, #2
  }
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	80002000 	.word	0x80002000
 8005200:	fe00e800 	.word	0xfe00e800

08005204 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af02      	add	r7, sp, #8
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	4608      	mov	r0, r1
 800520e:	4611      	mov	r1, r2
 8005210:	461a      	mov	r2, r3
 8005212:	4603      	mov	r3, r0
 8005214:	817b      	strh	r3, [r7, #10]
 8005216:	460b      	mov	r3, r1
 8005218:	813b      	strh	r3, [r7, #8]
 800521a:	4613      	mov	r3, r2
 800521c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b20      	cmp	r3, #32
 8005228:	f040 80fd 	bne.w	8005426 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <HAL_I2C_Mem_Read+0x34>
 8005232:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005234:	2b00      	cmp	r3, #0
 8005236:	d105      	bne.n	8005244 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800523e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e0f1      	b.n	8005428 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800524a:	2b01      	cmp	r3, #1
 800524c:	d101      	bne.n	8005252 <HAL_I2C_Mem_Read+0x4e>
 800524e:	2302      	movs	r3, #2
 8005250:	e0ea      	b.n	8005428 <HAL_I2C_Mem_Read+0x224>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800525a:	f7fe f98d 	bl	8003578 <HAL_GetTick>
 800525e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	2319      	movs	r3, #25
 8005266:	2201      	movs	r2, #1
 8005268:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 fa63 	bl	8005738 <I2C_WaitOnFlagUntilTimeout>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e0d5      	b.n	8005428 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2222      	movs	r2, #34	; 0x22
 8005280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2240      	movs	r2, #64	; 0x40
 8005288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a3a      	ldr	r2, [r7, #32]
 8005296:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800529c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052a4:	88f8      	ldrh	r0, [r7, #6]
 80052a6:	893a      	ldrh	r2, [r7, #8]
 80052a8:	8979      	ldrh	r1, [r7, #10]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	9301      	str	r3, [sp, #4]
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	4603      	mov	r3, r0
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 f9c7 	bl	8005648 <I2C_RequestMemoryRead>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d005      	beq.n	80052cc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e0ad      	b.n	8005428 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2bff      	cmp	r3, #255	; 0xff
 80052d4:	d90e      	bls.n	80052f4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	22ff      	movs	r2, #255	; 0xff
 80052da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	8979      	ldrh	r1, [r7, #10]
 80052e4:	4b52      	ldr	r3, [pc, #328]	; (8005430 <HAL_I2C_Mem_Read+0x22c>)
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 fbcb 	bl	8005a88 <I2C_TransferConfig>
 80052f2:	e00f      	b.n	8005314 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005302:	b2da      	uxtb	r2, r3
 8005304:	8979      	ldrh	r1, [r7, #10]
 8005306:	4b4a      	ldr	r3, [pc, #296]	; (8005430 <HAL_I2C_Mem_Read+0x22c>)
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 fbba 	bl	8005a88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	2200      	movs	r2, #0
 800531c:	2104      	movs	r1, #4
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 fa0a 	bl	8005738 <I2C_WaitOnFlagUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e07c      	b.n	8005428 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800534a:	3b01      	subs	r3, #1
 800534c:	b29a      	uxth	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005356:	b29b      	uxth	r3, r3
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005364:	b29b      	uxth	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d034      	beq.n	80053d4 <HAL_I2C_Mem_Read+0x1d0>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800536e:	2b00      	cmp	r3, #0
 8005370:	d130      	bne.n	80053d4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005378:	2200      	movs	r2, #0
 800537a:	2180      	movs	r1, #128	; 0x80
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 f9db 	bl	8005738 <I2C_WaitOnFlagUntilTimeout>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e04d      	b.n	8005428 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005390:	b29b      	uxth	r3, r3
 8005392:	2bff      	cmp	r3, #255	; 0xff
 8005394:	d90e      	bls.n	80053b4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	22ff      	movs	r2, #255	; 0xff
 800539a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	8979      	ldrh	r1, [r7, #10]
 80053a4:	2300      	movs	r3, #0
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 fb6b 	bl	8005a88 <I2C_TransferConfig>
 80053b2:	e00f      	b.n	80053d4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	8979      	ldrh	r1, [r7, #10]
 80053c6:	2300      	movs	r3, #0
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 fb5a 	bl	8005a88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d8:	b29b      	uxth	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d19a      	bne.n	8005314 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 fa28 	bl	8005838 <I2C_WaitOnSTOPFlagUntilTimeout>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e01a      	b.n	8005428 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2220      	movs	r2, #32
 80053f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6859      	ldr	r1, [r3, #4]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <HAL_I2C_Mem_Read+0x230>)
 8005406:	400b      	ands	r3, r1
 8005408:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	e000      	b.n	8005428 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005426:	2302      	movs	r3, #2
  }
}
 8005428:	4618      	mov	r0, r3
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	80002400 	.word	0x80002400
 8005434:	fe00e800 	.word	0xfe00e800

08005438 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08a      	sub	sp, #40	; 0x28
 800543c:	af02      	add	r7, sp, #8
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	607a      	str	r2, [r7, #4]
 8005442:	603b      	str	r3, [r7, #0]
 8005444:	460b      	mov	r3, r1
 8005446:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005448:	2300      	movs	r3, #0
 800544a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b20      	cmp	r3, #32
 8005456:	f040 80f1 	bne.w	800563c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005468:	d101      	bne.n	800546e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800546a:	2302      	movs	r3, #2
 800546c:	e0e7      	b.n	800563e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <HAL_I2C_IsDeviceReady+0x44>
 8005478:	2302      	movs	r3, #2
 800547a:	e0e0      	b.n	800563e <HAL_I2C_IsDeviceReady+0x206>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2224      	movs	r2, #36	; 0x24
 8005488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d107      	bne.n	80054aa <HAL_I2C_IsDeviceReady+0x72>
 800549a:	897b      	ldrh	r3, [r7, #10]
 800549c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80054a8:	e004      	b.n	80054b4 <HAL_I2C_IsDeviceReady+0x7c>
 80054aa:	897b      	ldrh	r3, [r7, #10]
 80054ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054b0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	6812      	ldr	r2, [r2, #0]
 80054b8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80054ba:	f7fe f85d 	bl	8003578 <HAL_GetTick>
 80054be:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	f003 0320 	and.w	r3, r3, #32
 80054ca:	2b20      	cmp	r3, #32
 80054cc:	bf0c      	ite	eq
 80054ce:	2301      	moveq	r3, #1
 80054d0:	2300      	movne	r3, #0
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	f003 0310 	and.w	r3, r3, #16
 80054e0:	2b10      	cmp	r3, #16
 80054e2:	bf0c      	ite	eq
 80054e4:	2301      	moveq	r3, #1
 80054e6:	2300      	movne	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80054ec:	e034      	b.n	8005558 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054f4:	d01a      	beq.n	800552c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80054f6:	f7fe f83f 	bl	8003578 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	429a      	cmp	r2, r3
 8005504:	d302      	bcc.n	800550c <HAL_I2C_IsDeviceReady+0xd4>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10f      	bne.n	800552c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005518:	f043 0220 	orr.w	r2, r3, #32
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e088      	b.n	800563e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b20      	cmp	r3, #32
 8005538:	bf0c      	ite	eq
 800553a:	2301      	moveq	r3, #1
 800553c:	2300      	movne	r3, #0
 800553e:	b2db      	uxtb	r3, r3
 8005540:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	f003 0310 	and.w	r3, r3, #16
 800554c:	2b10      	cmp	r3, #16
 800554e:	bf0c      	ite	eq
 8005550:	2301      	moveq	r3, #1
 8005552:	2300      	movne	r3, #0
 8005554:	b2db      	uxtb	r3, r3
 8005556:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005558:	7ffb      	ldrb	r3, [r7, #31]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d102      	bne.n	8005564 <HAL_I2C_IsDeviceReady+0x12c>
 800555e:	7fbb      	ldrb	r3, [r7, #30]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0c4      	beq.n	80054ee <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	f003 0310 	and.w	r3, r3, #16
 800556e:	2b10      	cmp	r3, #16
 8005570:	d01a      	beq.n	80055a8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2200      	movs	r2, #0
 800557a:	2120      	movs	r1, #32
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 f8db 	bl	8005738 <I2C_WaitOnFlagUntilTimeout>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e058      	b.n	800563e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2220      	movs	r2, #32
 8005592:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2220      	movs	r2, #32
 8005598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80055a4:	2300      	movs	r3, #0
 80055a6:	e04a      	b.n	800563e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	2200      	movs	r2, #0
 80055b0:	2120      	movs	r1, #32
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 f8c0 	bl	8005738 <I2C_WaitOnFlagUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e03d      	b.n	800563e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2210      	movs	r2, #16
 80055c8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2220      	movs	r2, #32
 80055d0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d118      	bne.n	800560c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055e8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2200      	movs	r2, #0
 80055f2:	2120      	movs	r1, #32
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 f89f 	bl	8005738 <I2C_WaitOnFlagUntilTimeout>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e01c      	b.n	800563e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2220      	movs	r2, #32
 800560a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	3301      	adds	r3, #1
 8005610:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	429a      	cmp	r2, r3
 8005618:	f63f af3b 	bhi.w	8005492 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2220      	movs	r2, #32
 8005620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005628:	f043 0220 	orr.w	r2, r3, #32
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e000      	b.n	800563e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800563c:	2302      	movs	r3, #2
  }
}
 800563e:	4618      	mov	r0, r3
 8005640:	3720      	adds	r7, #32
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
	...

08005648 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af02      	add	r7, sp, #8
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	4608      	mov	r0, r1
 8005652:	4611      	mov	r1, r2
 8005654:	461a      	mov	r2, r3
 8005656:	4603      	mov	r3, r0
 8005658:	817b      	strh	r3, [r7, #10]
 800565a:	460b      	mov	r3, r1
 800565c:	813b      	strh	r3, [r7, #8]
 800565e:	4613      	mov	r3, r2
 8005660:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005662:	88fb      	ldrh	r3, [r7, #6]
 8005664:	b2da      	uxtb	r2, r3
 8005666:	8979      	ldrh	r1, [r7, #10]
 8005668:	4b20      	ldr	r3, [pc, #128]	; (80056ec <I2C_RequestMemoryRead+0xa4>)
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	2300      	movs	r3, #0
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 fa0a 	bl	8005a88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005674:	69fa      	ldr	r2, [r7, #28]
 8005676:	69b9      	ldr	r1, [r7, #24]
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 f89d 	bl	80057b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e02c      	b.n	80056e2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005688:	88fb      	ldrh	r3, [r7, #6]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d105      	bne.n	800569a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800568e:	893b      	ldrh	r3, [r7, #8]
 8005690:	b2da      	uxtb	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	629a      	str	r2, [r3, #40]	; 0x28
 8005698:	e015      	b.n	80056c6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800569a:	893b      	ldrh	r3, [r7, #8]
 800569c:	0a1b      	lsrs	r3, r3, #8
 800569e:	b29b      	uxth	r3, r3
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056a8:	69fa      	ldr	r2, [r7, #28]
 80056aa:	69b9      	ldr	r1, [r7, #24]
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 f883 	bl	80057b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e012      	b.n	80056e2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056bc:	893b      	ldrh	r3, [r7, #8]
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	2200      	movs	r2, #0
 80056ce:	2140      	movs	r1, #64	; 0x40
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 f831 	bl	8005738 <I2C_WaitOnFlagUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	80002000 	.word	0x80002000

080056f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b02      	cmp	r3, #2
 8005704:	d103      	bne.n	800570e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2200      	movs	r2, #0
 800570c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	2b01      	cmp	r3, #1
 800571a:	d007      	beq.n	800572c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0201 	orr.w	r2, r2, #1
 800572a:	619a      	str	r2, [r3, #24]
  }
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	603b      	str	r3, [r7, #0]
 8005744:	4613      	mov	r3, r2
 8005746:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005748:	e022      	b.n	8005790 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005750:	d01e      	beq.n	8005790 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005752:	f7fd ff11 	bl	8003578 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	429a      	cmp	r2, r3
 8005760:	d302      	bcc.n	8005768 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d113      	bne.n	8005790 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576c:	f043 0220 	orr.w	r2, r3, #32
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2220      	movs	r2, #32
 8005778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e00f      	b.n	80057b0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	699a      	ldr	r2, [r3, #24]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	4013      	ands	r3, r2
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	429a      	cmp	r2, r3
 800579e:	bf0c      	ite	eq
 80057a0:	2301      	moveq	r3, #1
 80057a2:	2300      	movne	r3, #0
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	461a      	mov	r2, r3
 80057a8:	79fb      	ldrb	r3, [r7, #7]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d0cd      	beq.n	800574a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057c4:	e02c      	b.n	8005820 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	68b9      	ldr	r1, [r7, #8]
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f000 f870 	bl	80058b0 <I2C_IsErrorOccurred>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e02a      	b.n	8005830 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057e0:	d01e      	beq.n	8005820 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057e2:	f7fd fec9 	bl	8003578 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d302      	bcc.n	80057f8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d113      	bne.n	8005820 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fc:	f043 0220 	orr.w	r2, r3, #32
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e007      	b.n	8005830 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b02      	cmp	r3, #2
 800582c:	d1cb      	bne.n	80057c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005844:	e028      	b.n	8005898 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	68b9      	ldr	r1, [r7, #8]
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 f830 	bl	80058b0 <I2C_IsErrorOccurred>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e026      	b.n	80058a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800585a:	f7fd fe8d 	bl	8003578 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	429a      	cmp	r2, r3
 8005868:	d302      	bcc.n	8005870 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d113      	bne.n	8005898 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005874:	f043 0220 	orr.w	r2, r3, #32
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2220      	movs	r2, #32
 8005880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e007      	b.n	80058a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	f003 0320 	and.w	r3, r3, #32
 80058a2:	2b20      	cmp	r3, #32
 80058a4:	d1cf      	bne.n	8005846 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08a      	sub	sp, #40	; 0x28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058bc:	2300      	movs	r3, #0
 80058be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80058ca:	2300      	movs	r3, #0
 80058cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	f003 0310 	and.w	r3, r3, #16
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d075      	beq.n	80059c8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2210      	movs	r2, #16
 80058e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80058e4:	e056      	b.n	8005994 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058ec:	d052      	beq.n	8005994 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80058ee:	f7fd fe43 	bl	8003578 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d302      	bcc.n	8005904 <I2C_IsErrorOccurred+0x54>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d147      	bne.n	8005994 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800590e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005916:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005926:	d12e      	bne.n	8005986 <I2C_IsErrorOccurred+0xd6>
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800592e:	d02a      	beq.n	8005986 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005930:	7cfb      	ldrb	r3, [r7, #19]
 8005932:	2b20      	cmp	r3, #32
 8005934:	d027      	beq.n	8005986 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005944:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005946:	f7fd fe17 	bl	8003578 <HAL_GetTick>
 800594a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800594c:	e01b      	b.n	8005986 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800594e:	f7fd fe13 	bl	8003578 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	2b19      	cmp	r3, #25
 800595a:	d914      	bls.n	8005986 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005960:	f043 0220 	orr.w	r2, r3, #32
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	f003 0320 	and.w	r3, r3, #32
 8005990:	2b20      	cmp	r3, #32
 8005992:	d1dc      	bne.n	800594e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	f003 0320 	and.w	r3, r3, #32
 800599e:	2b20      	cmp	r3, #32
 80059a0:	d003      	beq.n	80059aa <I2C_IsErrorOccurred+0xfa>
 80059a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d09d      	beq.n	80058e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80059aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d103      	bne.n	80059ba <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2220      	movs	r2, #32
 80059b8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	f043 0304 	orr.w	r3, r3, #4
 80059c0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00b      	beq.n	80059f2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	f043 0301 	orr.w	r3, r3, #1
 80059e0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00b      	beq.n	8005a14 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	f043 0308 	orr.w	r3, r3, #8
 8005a02:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00b      	beq.n	8005a36 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	f043 0302 	orr.w	r3, r3, #2
 8005a24:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005a36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d01c      	beq.n	8005a78 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f7ff fe56 	bl	80056f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6859      	ldr	r1, [r3, #4]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	4b0d      	ldr	r3, [pc, #52]	; (8005a84 <I2C_IsErrorOccurred+0x1d4>)
 8005a50:	400b      	ands	r3, r1
 8005a52:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3728      	adds	r7, #40	; 0x28
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	fe00e800 	.word	0xfe00e800

08005a88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	607b      	str	r3, [r7, #4]
 8005a92:	460b      	mov	r3, r1
 8005a94:	817b      	strh	r3, [r7, #10]
 8005a96:	4613      	mov	r3, r2
 8005a98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a9a:	897b      	ldrh	r3, [r7, #10]
 8005a9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005aa0:	7a7b      	ldrb	r3, [r7, #9]
 8005aa2:	041b      	lsls	r3, r3, #16
 8005aa4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005aa8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ab6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	0d5b      	lsrs	r3, r3, #21
 8005ac2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005ac6:	4b08      	ldr	r3, [pc, #32]	; (8005ae8 <I2C_TransferConfig+0x60>)
 8005ac8:	430b      	orrs	r3, r1
 8005aca:	43db      	mvns	r3, r3
 8005acc:	ea02 0103 	and.w	r1, r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005ada:	bf00      	nop
 8005adc:	371c      	adds	r7, #28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	03ff63ff 	.word	0x03ff63ff

08005aec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b20      	cmp	r3, #32
 8005b00:	d138      	bne.n	8005b74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d101      	bne.n	8005b10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	e032      	b.n	8005b76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2224      	movs	r2, #36	; 0x24
 8005b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 0201 	bic.w	r2, r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6819      	ldr	r1, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0201 	orr.w	r2, r2, #1
 8005b5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2220      	movs	r2, #32
 8005b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b70:	2300      	movs	r3, #0
 8005b72:	e000      	b.n	8005b76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b74:	2302      	movs	r3, #2
  }
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b085      	sub	sp, #20
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b20      	cmp	r3, #32
 8005b96:	d139      	bne.n	8005c0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d101      	bne.n	8005ba6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	e033      	b.n	8005c0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2224      	movs	r2, #36	; 0x24
 8005bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0201 	bic.w	r2, r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005bd4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	021b      	lsls	r3, r3, #8
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0201 	orr.w	r2, r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	e000      	b.n	8005c0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c0c:	2302      	movs	r3, #2
  }
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005c1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c1c:	b08b      	sub	sp, #44	; 0x2c
 8005c1e:	af06      	add	r7, sp, #24
 8005c20:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e0d7      	b.n	8005ddc <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d106      	bne.n	8005c46 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f00b fe73 	bl	801192c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2203      	movs	r2, #3
 8005c4a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f005 fc63 	bl	800b51e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c58:	2300      	movs	r3, #0
 8005c5a:	73fb      	strb	r3, [r7, #15]
 8005c5c:	e04c      	b.n	8005cf8 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
 8005c60:	6879      	ldr	r1, [r7, #4]
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	4613      	mov	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	440b      	add	r3, r1
 8005c6e:	3301      	adds	r3, #1
 8005c70:	2201      	movs	r2, #1
 8005c72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
 8005c76:	6879      	ldr	r1, [r7, #4]
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	00db      	lsls	r3, r3, #3
 8005c82:	440b      	add	r3, r1
 8005c84:	7bfa      	ldrb	r2, [r7, #15]
 8005c86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005c88:	7bfa      	ldrb	r2, [r7, #15]
 8005c8a:	7bfb      	ldrb	r3, [r7, #15]
 8005c8c:	b298      	uxth	r0, r3
 8005c8e:	6879      	ldr	r1, [r7, #4]
 8005c90:	4613      	mov	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	00db      	lsls	r3, r3, #3
 8005c98:	440b      	add	r3, r1
 8005c9a:	3336      	adds	r3, #54	; 0x36
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
 8005ca2:	6879      	ldr	r1, [r7, #4]
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	440b      	add	r3, r1
 8005cb0:	3303      	adds	r3, #3
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005cb6:	7bfa      	ldrb	r2, [r7, #15]
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	440b      	add	r3, r1
 8005cc4:	3338      	adds	r3, #56	; 0x38
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005cca:	7bfa      	ldrb	r2, [r7, #15]
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	00db      	lsls	r3, r3, #3
 8005cd6:	440b      	add	r3, r1
 8005cd8:	333c      	adds	r3, #60	; 0x3c
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005cde:	7bfa      	ldrb	r2, [r7, #15]
 8005ce0:	6879      	ldr	r1, [r7, #4]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	440b      	add	r3, r1
 8005cec:	3340      	adds	r3, #64	; 0x40
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cf2:	7bfb      	ldrb	r3, [r7, #15]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	73fb      	strb	r3, [r7, #15]
 8005cf8:	7bfa      	ldrb	r2, [r7, #15]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d3ad      	bcc.n	8005c5e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d02:	2300      	movs	r3, #0
 8005d04:	73fb      	strb	r3, [r7, #15]
 8005d06:	e044      	b.n	8005d92 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d08:	7bfa      	ldrb	r2, [r7, #15]
 8005d0a:	6879      	ldr	r1, [r7, #4]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	440b      	add	r3, r1
 8005d16:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d1e:	7bfa      	ldrb	r2, [r7, #15]
 8005d20:	6879      	ldr	r1, [r7, #4]
 8005d22:	4613      	mov	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	440b      	add	r3, r1
 8005d2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005d30:	7bfa      	ldrb	r2, [r7, #15]
 8005d32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005d34:	7bfa      	ldrb	r2, [r7, #15]
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	440b      	add	r3, r1
 8005d42:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005d46:	2200      	movs	r2, #0
 8005d48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005d4a:	7bfa      	ldrb	r2, [r7, #15]
 8005d4c:	6879      	ldr	r1, [r7, #4]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	440b      	add	r3, r1
 8005d58:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005d60:	7bfa      	ldrb	r2, [r7, #15]
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	4613      	mov	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	440b      	add	r3, r1
 8005d6e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005d72:	2200      	movs	r2, #0
 8005d74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005d76:	7bfa      	ldrb	r2, [r7, #15]
 8005d78:	6879      	ldr	r1, [r7, #4]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	440b      	add	r3, r1
 8005d84:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005d88:	2200      	movs	r2, #0
 8005d8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	73fb      	strb	r3, [r7, #15]
 8005d92:	7bfa      	ldrb	r2, [r7, #15]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d3b5      	bcc.n	8005d08 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	603b      	str	r3, [r7, #0]
 8005da2:	687e      	ldr	r6, [r7, #4]
 8005da4:	466d      	mov	r5, sp
 8005da6:	f106 0410 	add.w	r4, r6, #16
 8005daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	602b      	str	r3, [r5, #0]
 8005db2:	1d33      	adds	r3, r6, #4
 8005db4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005db6:	6838      	ldr	r0, [r7, #0]
 8005db8:	f005 fbcc 	bl	800b554 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d102      	bne.n	8005dda <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f001 fc29 	bl	800762c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005de4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d101      	bne.n	8005dfa <HAL_PCD_Start+0x16>
 8005df6:	2302      	movs	r3, #2
 8005df8:	e012      	b.n	8005e20 <HAL_PCD_Start+0x3c>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f005 fb72 	bl	800b4f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4618      	mov	r0, r3
 8005e12:	f007 fd8b 	bl	800d92c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f007 fd90 	bl	800d95a <USB_ReadInterrupts>
 8005e3a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fb26 	bl	8006498 <PCD_EP_ISR_Handler>

    return;
 8005e4c:	e110      	b.n	8006070 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d013      	beq.n	8005e80 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e6a:	b292      	uxth	r2, r2
 8005e6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f00b fdec 	bl	8011a4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005e76:	2100      	movs	r1, #0
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f8fc 	bl	8006076 <HAL_PCD_SetAddress>

    return;
 8005e7e:	e0f7      	b.n	8006070 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00c      	beq.n	8005ea4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e9c:	b292      	uxth	r2, r2
 8005e9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005ea2:	e0e5      	b.n	8006070 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00c      	beq.n	8005ec8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ec0:	b292      	uxth	r2, r2
 8005ec2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005ec6:	e0d3      	b.n	8006070 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d034      	beq.n	8005f3c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0204 	bic.w	r2, r2, #4
 8005ee4:	b292      	uxth	r2, r2
 8005ee6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0208 	bic.w	r2, r2, #8
 8005efc:	b292      	uxth	r2, r2
 8005efe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d107      	bne.n	8005f1c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005f14:	2100      	movs	r1, #0
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f00b ff8e 	bl	8011e38 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f00b fdcf 	bl	8011ac0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f34:	b292      	uxth	r2, r2
 8005f36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005f3a:	e099      	b.n	8006070 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d027      	beq.n	8005f96 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f042 0208 	orr.w	r2, r2, #8
 8005f58:	b292      	uxth	r2, r2
 8005f5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f70:	b292      	uxth	r2, r2
 8005f72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f042 0204 	orr.w	r2, r2, #4
 8005f88:	b292      	uxth	r2, r2
 8005f8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f00b fd7c 	bl	8011a8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005f94:	e06c      	b.n	8006070 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d040      	beq.n	8006022 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fb2:	b292      	uxth	r2, r2
 8005fb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d12b      	bne.n	800601a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f042 0204 	orr.w	r2, r2, #4
 8005fd4:	b292      	uxth	r2, r2
 8005fd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f042 0208 	orr.w	r2, r2, #8
 8005fec:	b292      	uxth	r2, r2
 8005fee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006002:	b29b      	uxth	r3, r3
 8006004:	089b      	lsrs	r3, r3, #2
 8006006:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006010:	2101      	movs	r1, #1
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f00b ff10 	bl	8011e38 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006018:	e02a      	b.n	8006070 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f00b fd36 	bl	8011a8c <HAL_PCD_SuspendCallback>
    return;
 8006020:	e026      	b.n	8006070 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00f      	beq.n	800604c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006034:	b29a      	uxth	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800603e:	b292      	uxth	r2, r2
 8006040:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f00b fcf4 	bl	8011a32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800604a:	e011      	b.n	8006070 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00c      	beq.n	8006070 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800605e:	b29a      	uxth	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006068:	b292      	uxth	r2, r2
 800606a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800606e:	bf00      	nop
  }
}
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b082      	sub	sp, #8
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	460b      	mov	r3, r1
 8006080:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006088:	2b01      	cmp	r3, #1
 800608a:	d101      	bne.n	8006090 <HAL_PCD_SetAddress+0x1a>
 800608c:	2302      	movs	r3, #2
 800608e:	e013      	b.n	80060b8 <HAL_PCD_SetAddress+0x42>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	78fa      	ldrb	r2, [r7, #3]
 800609c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	78fa      	ldrb	r2, [r7, #3]
 80060a6:	4611      	mov	r1, r2
 80060a8:	4618      	mov	r0, r3
 80060aa:	f007 fc2b 	bl	800d904 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	4608      	mov	r0, r1
 80060ca:	4611      	mov	r1, r2
 80060cc:	461a      	mov	r2, r3
 80060ce:	4603      	mov	r3, r0
 80060d0:	70fb      	strb	r3, [r7, #3]
 80060d2:	460b      	mov	r3, r1
 80060d4:	803b      	strh	r3, [r7, #0]
 80060d6:	4613      	mov	r3, r2
 80060d8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80060de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	da0e      	bge.n	8006104 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060e6:	78fb      	ldrb	r3, [r7, #3]
 80060e8:	f003 0307 	and.w	r3, r3, #7
 80060ec:	1c5a      	adds	r2, r3, #1
 80060ee:	4613      	mov	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	4413      	add	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2201      	movs	r2, #1
 8006100:	705a      	strb	r2, [r3, #1]
 8006102:	e00e      	b.n	8006122 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006104:	78fb      	ldrb	r3, [r7, #3]
 8006106:	f003 0207 	and.w	r2, r3, #7
 800610a:	4613      	mov	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	4413      	add	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006122:	78fb      	ldrb	r3, [r7, #3]
 8006124:	f003 0307 	and.w	r3, r3, #7
 8006128:	b2da      	uxtb	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800612e:	883a      	ldrh	r2, [r7, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	78ba      	ldrb	r2, [r7, #2]
 8006138:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	785b      	ldrb	r3, [r3, #1]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d004      	beq.n	800614c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	b29a      	uxth	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800614c:	78bb      	ldrb	r3, [r7, #2]
 800614e:	2b02      	cmp	r3, #2
 8006150:	d102      	bne.n	8006158 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800615e:	2b01      	cmp	r3, #1
 8006160:	d101      	bne.n	8006166 <HAL_PCD_EP_Open+0xa6>
 8006162:	2302      	movs	r3, #2
 8006164:	e00e      	b.n	8006184 <HAL_PCD_EP_Open+0xc4>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68f9      	ldr	r1, [r7, #12]
 8006174:	4618      	mov	r0, r3
 8006176:	f005 fa0f 	bl	800b598 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8006182:	7afb      	ldrb	r3, [r7, #11]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006198:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800619c:	2b00      	cmp	r3, #0
 800619e:	da0e      	bge.n	80061be <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061a0:	78fb      	ldrb	r3, [r7, #3]
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	00db      	lsls	r3, r3, #3
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	4413      	add	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2201      	movs	r2, #1
 80061ba:	705a      	strb	r2, [r3, #1]
 80061bc:	e00e      	b.n	80061dc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061be:	78fb      	ldrb	r3, [r7, #3]
 80061c0:	f003 0207 	and.w	r2, r3, #7
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	4413      	add	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80061dc:	78fb      	ldrb	r3, [r7, #3]
 80061de:	f003 0307 	and.w	r3, r3, #7
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d101      	bne.n	80061f6 <HAL_PCD_EP_Close+0x6a>
 80061f2:	2302      	movs	r3, #2
 80061f4:	e00e      	b.n	8006214 <HAL_PCD_EP_Close+0x88>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68f9      	ldr	r1, [r7, #12]
 8006204:	4618      	mov	r0, r3
 8006206:	f005 fd5b 	bl	800bcc0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	607a      	str	r2, [r7, #4]
 8006226:	603b      	str	r3, [r7, #0]
 8006228:	460b      	mov	r3, r1
 800622a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800622c:	7afb      	ldrb	r3, [r7, #11]
 800622e:	f003 0207 	and.w	r2, r3, #7
 8006232:	4613      	mov	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	4413      	add	r3, r2
 8006242:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	2200      	movs	r2, #0
 8006254:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2200      	movs	r2, #0
 800625a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800625c:	7afb      	ldrb	r3, [r7, #11]
 800625e:	f003 0307 	and.w	r3, r3, #7
 8006262:	b2da      	uxtb	r2, r3
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006268:	7afb      	ldrb	r3, [r7, #11]
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	2b00      	cmp	r3, #0
 8006270:	d106      	bne.n	8006280 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6979      	ldr	r1, [r7, #20]
 8006278:	4618      	mov	r0, r3
 800627a:	f005 ff0e 	bl	800c09a <USB_EPStartXfer>
 800627e:	e005      	b.n	800628c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6979      	ldr	r1, [r7, #20]
 8006286:	4618      	mov	r0, r3
 8006288:	f005 ff07 	bl	800c09a <USB_EPStartXfer>
  }

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3718      	adds	r7, #24
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006296:	b480      	push	{r7}
 8006298:	b083      	sub	sp, #12
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	460b      	mov	r3, r1
 80062a0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80062a2:	78fb      	ldrb	r3, [r7, #3]
 80062a4:	f003 0207 	and.w	r2, r3, #7
 80062a8:	6879      	ldr	r1, [r7, #4]
 80062aa:	4613      	mov	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	00db      	lsls	r3, r3, #3
 80062b2:	440b      	add	r3, r1
 80062b4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80062b8:	681b      	ldr	r3, [r3, #0]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b086      	sub	sp, #24
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	60f8      	str	r0, [r7, #12]
 80062ce:	607a      	str	r2, [r7, #4]
 80062d0:	603b      	str	r3, [r7, #0]
 80062d2:	460b      	mov	r3, r1
 80062d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062d6:	7afb      	ldrb	r3, [r7, #11]
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	1c5a      	adds	r2, r3, #1
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	00db      	lsls	r3, r3, #3
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	4413      	add	r3, r2
 80062ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	2200      	movs	r2, #0
 800630a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	2201      	movs	r2, #1
 8006310:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006312:	7afb      	ldrb	r3, [r7, #11]
 8006314:	f003 0307 	and.w	r3, r3, #7
 8006318:	b2da      	uxtb	r2, r3
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800631e:	7afb      	ldrb	r3, [r7, #11]
 8006320:	f003 0307 	and.w	r3, r3, #7
 8006324:	2b00      	cmp	r3, #0
 8006326:	d106      	bne.n	8006336 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6979      	ldr	r1, [r7, #20]
 800632e:	4618      	mov	r0, r3
 8006330:	f005 feb3 	bl	800c09a <USB_EPStartXfer>
 8006334:	e005      	b.n	8006342 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6979      	ldr	r1, [r7, #20]
 800633c:	4618      	mov	r0, r3
 800633e:	f005 feac 	bl	800c09a <USB_EPStartXfer>
  }

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3718      	adds	r7, #24
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	460b      	mov	r3, r1
 8006356:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006358:	78fb      	ldrb	r3, [r7, #3]
 800635a:	f003 0207 	and.w	r2, r3, #7
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	429a      	cmp	r2, r3
 8006364:	d901      	bls.n	800636a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e03e      	b.n	80063e8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800636a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800636e:	2b00      	cmp	r3, #0
 8006370:	da0e      	bge.n	8006390 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006372:	78fb      	ldrb	r3, [r7, #3]
 8006374:	f003 0307 	and.w	r3, r3, #7
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	4613      	mov	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	00db      	lsls	r3, r3, #3
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	4413      	add	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2201      	movs	r2, #1
 800638c:	705a      	strb	r2, [r3, #1]
 800638e:	e00c      	b.n	80063aa <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006390:	78fa      	ldrb	r2, [r7, #3]
 8006392:	4613      	mov	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	4413      	add	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063b0:	78fb      	ldrb	r3, [r7, #3]
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d101      	bne.n	80063ca <HAL_PCD_EP_SetStall+0x7e>
 80063c6:	2302      	movs	r3, #2
 80063c8:	e00e      	b.n	80063e8 <HAL_PCD_EP_SetStall+0x9c>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68f9      	ldr	r1, [r7, #12]
 80063d8:	4618      	mov	r0, r3
 80063da:	f007 f994 	bl	800d706 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	460b      	mov	r3, r1
 80063fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80063fc:	78fb      	ldrb	r3, [r7, #3]
 80063fe:	f003 020f 	and.w	r2, r3, #15
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	429a      	cmp	r2, r3
 8006408:	d901      	bls.n	800640e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e040      	b.n	8006490 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800640e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006412:	2b00      	cmp	r3, #0
 8006414:	da0e      	bge.n	8006434 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006416:	78fb      	ldrb	r3, [r7, #3]
 8006418:	f003 0307 	and.w	r3, r3, #7
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	4613      	mov	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	4413      	add	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2201      	movs	r2, #1
 8006430:	705a      	strb	r2, [r3, #1]
 8006432:	e00e      	b.n	8006452 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006434:	78fb      	ldrb	r3, [r7, #3]
 8006436:	f003 0207 	and.w	r2, r3, #7
 800643a:	4613      	mov	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	00db      	lsls	r3, r3, #3
 8006442:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	4413      	add	r3, r2
 800644a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006458:	78fb      	ldrb	r3, [r7, #3]
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	b2da      	uxtb	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800646a:	2b01      	cmp	r3, #1
 800646c:	d101      	bne.n	8006472 <HAL_PCD_EP_ClrStall+0x82>
 800646e:	2302      	movs	r3, #2
 8006470:	e00e      	b.n	8006490 <HAL_PCD_EP_ClrStall+0xa0>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68f9      	ldr	r1, [r7, #12]
 8006480:	4618      	mov	r0, r3
 8006482:	f007 f991 	bl	800d7a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b096      	sub	sp, #88	; 0x58
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80064a0:	e39c      	b.n	8006bdc <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80064aa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80064ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	f003 030f 	and.w	r3, r3, #15
 80064b8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80064bc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f040 815e 	bne.w	8006782 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80064c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80064ca:	f003 0310 	and.w	r3, r3, #16
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d150      	bne.n	8006574 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	b29b      	uxth	r3, r3
 80064da:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80064de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e2:	81fb      	strh	r3, [r7, #14]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	89fb      	ldrh	r3, [r7, #14]
 80064ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	3328      	adds	r3, #40	; 0x28
 80064fa:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006504:	b29b      	uxth	r3, r3
 8006506:	461a      	mov	r2, r3
 8006508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	00db      	lsls	r3, r3, #3
 800650e:	4413      	add	r3, r2
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6812      	ldr	r2, [r2, #0]
 8006514:	4413      	add	r3, r2
 8006516:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006522:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006526:	695a      	ldr	r2, [r3, #20]
 8006528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800652a:	69db      	ldr	r3, [r3, #28]
 800652c:	441a      	add	r2, r3
 800652e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006530:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006532:	2100      	movs	r1, #0
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f00b fa62 	bl	80119fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 834a 	beq.w	8006bdc <PCD_EP_ISR_Handler+0x744>
 8006548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	2b00      	cmp	r3, #0
 800654e:	f040 8345 	bne.w	8006bdc <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006558:	b2db      	uxtb	r3, r3
 800655a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800655e:	b2da      	uxtb	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	b292      	uxth	r2, r2
 8006566:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006572:	e333      	b.n	8006bdc <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800657a:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006586:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800658a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800658e:	2b00      	cmp	r3, #0
 8006590:	d032      	beq.n	80065f8 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800659a:	b29b      	uxth	r3, r3
 800659c:	461a      	mov	r2, r3
 800659e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	4413      	add	r3, r2
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	6812      	ldr	r2, [r2, #0]
 80065aa:	4413      	add	r3, r2
 80065ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80065b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065b8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6818      	ldr	r0, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80065c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80065c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ca:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	f007 fa16 	bl	800d9fe <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	b29a      	uxth	r2, r3
 80065da:	f640 738f 	movw	r3, #3983	; 0xf8f
 80065de:	4013      	ands	r3, r2
 80065e0:	823b      	strh	r3, [r7, #16]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	8a3a      	ldrh	r2, [r7, #16]
 80065e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065ec:	b292      	uxth	r2, r2
 80065ee:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f00b f9d7 	bl	80119a4 <HAL_PCD_SetupStageCallback>
 80065f6:	e2f1      	b.n	8006bdc <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80065f8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f280 82ed 	bge.w	8006bdc <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	b29a      	uxth	r2, r3
 800660a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800660e:	4013      	ands	r3, r2
 8006610:	83fb      	strh	r3, [r7, #30]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	8bfa      	ldrh	r2, [r7, #30]
 8006618:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800661c:	b292      	uxth	r2, r2
 800661e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006628:	b29b      	uxth	r3, r3
 800662a:	461a      	mov	r2, r3
 800662c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	00db      	lsls	r3, r3, #3
 8006632:	4413      	add	r3, r2
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6812      	ldr	r2, [r2, #0]
 8006638:	4413      	add	r3, r2
 800663a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006646:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800664a:	69db      	ldr	r3, [r3, #28]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d019      	beq.n	8006684 <PCD_EP_ISR_Handler+0x1ec>
 8006650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d015      	beq.n	8006684 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6818      	ldr	r0, [r3, #0]
 800665c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800665e:	6959      	ldr	r1, [r3, #20]
 8006660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006662:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006666:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006668:	b29b      	uxth	r3, r3
 800666a:	f007 f9c8 	bl	800d9fe <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800666e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006670:	695a      	ldr	r2, [r3, #20]
 8006672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	441a      	add	r2, r3
 8006678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800667a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800667c:	2100      	movs	r1, #0
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f00b f9a2 	bl	80119c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	b29b      	uxth	r3, r3
 800668c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006690:	2b00      	cmp	r3, #0
 8006692:	f040 82a3 	bne.w	8006bdc <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	61bb      	str	r3, [r7, #24]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	461a      	mov	r2, r3
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	4413      	add	r3, r2
 80066ac:	61bb      	str	r3, [r7, #24]
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066b4:	617b      	str	r3, [r7, #20]
 80066b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	2b3e      	cmp	r3, #62	; 0x3e
 80066bc:	d918      	bls.n	80066f0 <PCD_EP_ISR_Handler+0x258>
 80066be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	095b      	lsrs	r3, r3, #5
 80066c4:	647b      	str	r3, [r7, #68]	; 0x44
 80066c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f003 031f 	and.w	r3, r3, #31
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d102      	bne.n	80066d8 <PCD_EP_ISR_Handler+0x240>
 80066d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066d4:	3b01      	subs	r3, #1
 80066d6:	647b      	str	r3, [r7, #68]	; 0x44
 80066d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066da:	b29b      	uxth	r3, r3
 80066dc:	029b      	lsls	r3, r3, #10
 80066de:	b29b      	uxth	r3, r3
 80066e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	801a      	strh	r2, [r3, #0]
 80066ee:	e029      	b.n	8006744 <PCD_EP_ISR_Handler+0x2ac>
 80066f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d112      	bne.n	800671e <PCD_EP_ISR_Handler+0x286>
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006702:	b29a      	uxth	r2, r3
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	801a      	strh	r2, [r3, #0]
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	b29b      	uxth	r3, r3
 800670e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006716:	b29a      	uxth	r2, r3
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	801a      	strh	r2, [r3, #0]
 800671c:	e012      	b.n	8006744 <PCD_EP_ISR_Handler+0x2ac>
 800671e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	085b      	lsrs	r3, r3, #1
 8006724:	647b      	str	r3, [r7, #68]	; 0x44
 8006726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <PCD_EP_ISR_Handler+0x2a0>
 8006732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006734:	3301      	adds	r3, #1
 8006736:	647b      	str	r3, [r7, #68]	; 0x44
 8006738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800673a:	b29b      	uxth	r3, r3
 800673c:	029b      	lsls	r3, r3, #10
 800673e:	b29a      	uxth	r2, r3
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	b29b      	uxth	r3, r3
 800674c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006754:	827b      	strh	r3, [r7, #18]
 8006756:	8a7b      	ldrh	r3, [r7, #18]
 8006758:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800675c:	827b      	strh	r3, [r7, #18]
 800675e:	8a7b      	ldrh	r3, [r7, #18]
 8006760:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006764:	827b      	strh	r3, [r7, #18]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	8a7b      	ldrh	r3, [r7, #18]
 800676c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800677c:	b29b      	uxth	r3, r3
 800677e:	8013      	strh	r3, [r2, #0]
 8006780:	e22c      	b.n	8006bdc <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006796:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800679a:	2b00      	cmp	r3, #0
 800679c:	f280 80f6 	bge.w	800698c <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	461a      	mov	r2, r3
 80067a6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80067b6:	4013      	ands	r3, r2
 80067b8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	461a      	mov	r2, r3
 80067c2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80067ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067d2:	b292      	uxth	r2, r2
 80067d4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80067d6:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80067da:	4613      	mov	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	00db      	lsls	r3, r3, #3
 80067e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	4413      	add	r3, r2
 80067ea:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80067ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ee:	7b1b      	ldrb	r3, [r3, #12]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d123      	bne.n	800683c <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	461a      	mov	r2, r3
 8006800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	00db      	lsls	r3, r3, #3
 8006806:	4413      	add	r3, r2
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	6812      	ldr	r2, [r2, #0]
 800680c:	4413      	add	r3, r2
 800680e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006818:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800681c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 808e 	beq.w	8006942 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6818      	ldr	r0, [r3, #0]
 800682a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800682c:	6959      	ldr	r1, [r3, #20]
 800682e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006830:	88da      	ldrh	r2, [r3, #6]
 8006832:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006836:	f007 f8e2 	bl	800d9fe <USB_ReadPMA>
 800683a:	e082      	b.n	8006942 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800683c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800683e:	78db      	ldrb	r3, [r3, #3]
 8006840:	2b02      	cmp	r3, #2
 8006842:	d10a      	bne.n	800685a <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006844:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006848:	461a      	mov	r2, r3
 800684a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f9d3 	bl	8006bf8 <HAL_PCD_EP_DB_Receive>
 8006852:	4603      	mov	r3, r0
 8006854:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006858:	e073      	b.n	8006942 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	b29b      	uxth	r3, r3
 800686c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006874:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	461a      	mov	r2, r3
 800687e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	441a      	add	r2, r3
 8006886:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800688a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800688e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006896:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800689a:	b29b      	uxth	r3, r3
 800689c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d022      	beq.n	80068fe <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	461a      	mov	r2, r3
 80068c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	4413      	add	r3, r2
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	6812      	ldr	r2, [r2, #0]
 80068d0:	4413      	add	r3, r2
 80068d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068dc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80068e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d02c      	beq.n	8006942 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6818      	ldr	r0, [r3, #0]
 80068ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ee:	6959      	ldr	r1, [r3, #20]
 80068f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f2:	891a      	ldrh	r2, [r3, #8]
 80068f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80068f8:	f007 f881 	bl	800d9fe <USB_ReadPMA>
 80068fc:	e021      	b.n	8006942 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006906:	b29b      	uxth	r3, r3
 8006908:	461a      	mov	r2, r3
 800690a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	00db      	lsls	r3, r3, #3
 8006910:	4413      	add	r3, r2
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	6812      	ldr	r2, [r2, #0]
 8006916:	4413      	add	r3, r2
 8006918:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006922:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8006926:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800692a:	2b00      	cmp	r3, #0
 800692c:	d009      	beq.n	8006942 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006934:	6959      	ldr	r1, [r3, #20]
 8006936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006938:	895a      	ldrh	r2, [r3, #10]
 800693a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800693e:	f007 f85e 	bl	800d9fe <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006944:	69da      	ldr	r2, [r3, #28]
 8006946:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800694a:	441a      	add	r2, r3
 800694c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800694e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006952:	695a      	ldr	r2, [r3, #20]
 8006954:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006958:	441a      	add	r2, r3
 800695a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800695c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800695e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d005      	beq.n	8006972 <PCD_EP_ISR_Handler+0x4da>
 8006966:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800696a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	429a      	cmp	r2, r3
 8006970:	d206      	bcs.n	8006980 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f00b f825 	bl	80119c8 <HAL_PCD_DataOutStageCallback>
 800697e:	e005      	b.n	800698c <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006986:	4618      	mov	r0, r3
 8006988:	f005 fb87 	bl	800c09a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800698c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 8121 	beq.w	8006bdc <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800699a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	4613      	mov	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	00db      	lsls	r3, r3, #3
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	4413      	add	r3, r2
 80069ac:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	461a      	mov	r2, r3
 80069b4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	b29b      	uxth	r3, r3
 80069c0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80069c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	461a      	mov	r2, r3
 80069d2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	441a      	add	r2, r3
 80069da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80069de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80069ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ec:	78db      	ldrb	r3, [r3, #3]
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	f000 80a2 	beq.w	8006b38 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80069f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069f6:	2200      	movs	r2, #0
 80069f8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80069fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069fc:	7b1b      	ldrb	r3, [r3, #12]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 8093 	beq.w	8006b2a <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006a04:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d046      	beq.n	8006a9e <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a12:	785b      	ldrb	r3, [r3, #1]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d126      	bne.n	8006a66 <PCD_EP_ISR_Handler+0x5ce>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	461a      	mov	r2, r3
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	4413      	add	r3, r2
 8006a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	00da      	lsls	r2, r3, #3
 8006a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a38:	4413      	add	r3, r2
 8006a3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a3e:	623b      	str	r3, [r7, #32]
 8006a40:	6a3b      	ldr	r3, [r7, #32]
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	801a      	strh	r2, [r3, #0]
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	801a      	strh	r2, [r3, #0]
 8006a64:	e061      	b.n	8006b2a <PCD_EP_ISR_Handler+0x692>
 8006a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a68:	785b      	ldrb	r3, [r3, #1]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d15d      	bne.n	8006b2a <PCD_EP_ISR_Handler+0x692>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	461a      	mov	r2, r3
 8006a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a82:	4413      	add	r3, r2
 8006a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	00da      	lsls	r2, r3, #3
 8006a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8e:	4413      	add	r3, r2
 8006a90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a98:	2200      	movs	r2, #0
 8006a9a:	801a      	strh	r2, [r3, #0]
 8006a9c:	e045      	b.n	8006b2a <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa6:	785b      	ldrb	r3, [r3, #1]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d126      	bne.n	8006afa <PCD_EP_ISR_Handler+0x662>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	461a      	mov	r2, r3
 8006abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac0:	4413      	add	r3, r2
 8006ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	00da      	lsls	r2, r3, #3
 8006aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006acc:	4413      	add	r3, r2
 8006ace:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ad2:	633b      	str	r3, [r7, #48]	; 0x30
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae2:	801a      	strh	r2, [r3, #0]
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af6:	801a      	strh	r2, [r3, #0]
 8006af8:	e017      	b.n	8006b2a <PCD_EP_ISR_Handler+0x692>
 8006afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006afc:	785b      	ldrb	r3, [r3, #1]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d113      	bne.n	8006b2a <PCD_EP_ISR_Handler+0x692>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b10:	4413      	add	r3, r2
 8006b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	00da      	lsls	r2, r3, #3
 8006b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b22:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b26:	2200      	movs	r2, #0
 8006b28:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f00a ff64 	bl	80119fe <HAL_PCD_DataInStageCallback>
 8006b36:	e051      	b.n	8006bdc <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006b38:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d144      	bne.n	8006bce <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	461a      	mov	r2, r3
 8006b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	00db      	lsls	r3, r3, #3
 8006b56:	4413      	add	r3, r2
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	6812      	ldr	r2, [r2, #0]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b62:	881b      	ldrh	r3, [r3, #0]
 8006b64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b68:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b6e:	699a      	ldr	r2, [r3, #24]
 8006b70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d907      	bls.n	8006b88 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8006b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b7a:	699a      	ldr	r2, [r3, #24]
 8006b7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b80:	1ad2      	subs	r2, r2, r3
 8006b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b84:	619a      	str	r2, [r3, #24]
 8006b86:	e002      	b.n	8006b8e <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8006b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d106      	bne.n	8006ba4 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f00a ff2e 	bl	80119fe <HAL_PCD_DataInStageCallback>
 8006ba2:	e01b      	b.n	8006bdc <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ba6:	695a      	ldr	r2, [r3, #20]
 8006ba8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006bac:	441a      	add	r2, r3
 8006bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb4:	69da      	ldr	r2, [r3, #28]
 8006bb6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006bba:	441a      	add	r2, r3
 8006bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bbe:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f005 fa67 	bl	800c09a <USB_EPStartXfer>
 8006bcc:	e006      	b.n	8006bdc <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006bce:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f917 	bl	8006e0a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	b21b      	sxth	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f6ff ac5a 	blt.w	80064a2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3758      	adds	r7, #88	; 0x58
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b088      	sub	sp, #32
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	4613      	mov	r3, r2
 8006c04:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006c06:	88fb      	ldrh	r3, [r7, #6]
 8006c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d07c      	beq.n	8006d0a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	00db      	lsls	r3, r3, #3
 8006c22:	4413      	add	r3, r2
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	6812      	ldr	r2, [r2, #0]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c34:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	699a      	ldr	r2, [r3, #24]
 8006c3a:	8b7b      	ldrh	r3, [r7, #26]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d306      	bcc.n	8006c4e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	699a      	ldr	r2, [r3, #24]
 8006c44:	8b7b      	ldrh	r3, [r7, #26]
 8006c46:	1ad2      	subs	r2, r2, r3
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	619a      	str	r2, [r3, #24]
 8006c4c:	e002      	b.n	8006c54 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2200      	movs	r2, #0
 8006c52:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d123      	bne.n	8006ca4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	461a      	mov	r2, r3
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c76:	833b      	strh	r3, [r7, #24]
 8006c78:	8b3b      	ldrh	r3, [r7, #24]
 8006c7a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c7e:	833b      	strh	r3, [r7, #24]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	461a      	mov	r2, r3
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	441a      	add	r2, r3
 8006c8e:	8b3b      	ldrh	r3, [r7, #24]
 8006c90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006ca4:	88fb      	ldrh	r3, [r7, #6]
 8006ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d01f      	beq.n	8006cee <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc8:	82fb      	strh	r3, [r7, #22]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	441a      	add	r2, r3
 8006cd8:	8afb      	ldrh	r3, [r7, #22]
 8006cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006cee:	8b7b      	ldrh	r3, [r7, #26]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 8085 	beq.w	8006e00 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6818      	ldr	r0, [r3, #0]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	6959      	ldr	r1, [r3, #20]
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	891a      	ldrh	r2, [r3, #8]
 8006d02:	8b7b      	ldrh	r3, [r7, #26]
 8006d04:	f006 fe7b 	bl	800d9fe <USB_ReadPMA>
 8006d08:	e07a      	b.n	8006e00 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	461a      	mov	r2, r3
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	00db      	lsls	r3, r3, #3
 8006d1c:	4413      	add	r3, r2
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	6812      	ldr	r2, [r2, #0]
 8006d22:	4413      	add	r3, r2
 8006d24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d2e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	699a      	ldr	r2, [r3, #24]
 8006d34:	8b7b      	ldrh	r3, [r7, #26]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d306      	bcc.n	8006d48 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	699a      	ldr	r2, [r3, #24]
 8006d3e:	8b7b      	ldrh	r3, [r7, #26]
 8006d40:	1ad2      	subs	r2, r2, r3
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	619a      	str	r2, [r3, #24]
 8006d46:	e002      	b.n	8006d4e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d123      	bne.n	8006d9e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d70:	83fb      	strh	r3, [r7, #30]
 8006d72:	8bfb      	ldrh	r3, [r7, #30]
 8006d74:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d78:	83fb      	strh	r3, [r7, #30]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	441a      	add	r2, r3
 8006d88:	8bfb      	ldrh	r3, [r7, #30]
 8006d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006d9e:	88fb      	ldrh	r3, [r7, #6]
 8006da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d11f      	bne.n	8006de8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	461a      	mov	r2, r3
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	881b      	ldrh	r3, [r3, #0]
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc2:	83bb      	strh	r3, [r7, #28]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	441a      	add	r2, r3
 8006dd2:	8bbb      	ldrh	r3, [r7, #28]
 8006dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006de0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006de8:	8b7b      	ldrh	r3, [r7, #26]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d008      	beq.n	8006e00 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6818      	ldr	r0, [r3, #0]
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	6959      	ldr	r1, [r3, #20]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	895a      	ldrh	r2, [r3, #10]
 8006dfa:	8b7b      	ldrh	r3, [r7, #26]
 8006dfc:	f006 fdff 	bl	800d9fe <USB_ReadPMA>
    }
  }

  return count;
 8006e00:	8b7b      	ldrh	r3, [r7, #26]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3720      	adds	r7, #32
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b0a2      	sub	sp, #136	; 0x88
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	60f8      	str	r0, [r7, #12]
 8006e12:	60b9      	str	r1, [r7, #8]
 8006e14:	4613      	mov	r3, r2
 8006e16:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006e18:	88fb      	ldrh	r3, [r7, #6]
 8006e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 81c5 	beq.w	80071ae <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	461a      	mov	r2, r3
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	00db      	lsls	r3, r3, #3
 8006e36:	4413      	add	r3, r2
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	6812      	ldr	r2, [r2, #0]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e42:	881b      	ldrh	r3, [r3, #0]
 8006e44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e48:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	699a      	ldr	r2, [r3, #24]
 8006e50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d907      	bls.n	8006e68 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	699a      	ldr	r2, [r3, #24]
 8006e5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e60:	1ad2      	subs	r2, r2, r3
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	619a      	str	r2, [r3, #24]
 8006e66:	e002      	b.n	8006e6e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f040 80b9 	bne.w	8006fea <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	785b      	ldrb	r3, [r3, #1]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d126      	bne.n	8006ece <HAL_PCD_EP_DB_Transmit+0xc4>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	461a      	mov	r2, r3
 8006e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e94:	4413      	add	r3, r2
 8006e96:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	00da      	lsls	r2, r3, #3
 8006e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	801a      	strh	r2, [r3, #0]
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	881b      	ldrh	r3, [r3, #0]
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ec2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	801a      	strh	r2, [r3, #0]
 8006ecc:	e01a      	b.n	8006f04 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	785b      	ldrb	r3, [r3, #1]
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d116      	bne.n	8006f04 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	633b      	str	r3, [r7, #48]	; 0x30
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eea:	4413      	add	r3, r2
 8006eec:	633b      	str	r3, [r7, #48]	; 0x30
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	00da      	lsls	r2, r3, #3
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f00:	2200      	movs	r2, #0
 8006f02:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	623b      	str	r3, [r7, #32]
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	785b      	ldrb	r3, [r3, #1]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d126      	bne.n	8006f60 <HAL_PCD_EP_DB_Transmit+0x156>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	61bb      	str	r3, [r7, #24]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	461a      	mov	r2, r3
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	4413      	add	r3, r2
 8006f28:	61bb      	str	r3, [r7, #24]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	00da      	lsls	r2, r3, #3
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	4413      	add	r3, r2
 8006f34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f38:	617b      	str	r3, [r7, #20]
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	801a      	strh	r2, [r3, #0]
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	801a      	strh	r2, [r3, #0]
 8006f5e:	e017      	b.n	8006f90 <HAL_PCD_EP_DB_Transmit+0x186>
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	785b      	ldrb	r3, [r3, #1]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d113      	bne.n	8006f90 <HAL_PCD_EP_DB_Transmit+0x186>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	461a      	mov	r2, r3
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	4413      	add	r3, r2
 8006f78:	623b      	str	r3, [r7, #32]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	00da      	lsls	r2, r3, #3
 8006f80:	6a3b      	ldr	r3, [r7, #32]
 8006f82:	4413      	add	r3, r2
 8006f84:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f88:	61fb      	str	r3, [r7, #28]
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	4619      	mov	r1, r3
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f00a fd31 	bl	80119fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006f9c:	88fb      	ldrh	r3, [r7, #6]
 8006f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f000 82d2 	beq.w	800754c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	461a      	mov	r2, r3
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	881b      	ldrh	r3, [r3, #0]
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc2:	827b      	strh	r3, [r7, #18]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	461a      	mov	r2, r3
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	441a      	add	r2, r3
 8006fd2:	8a7b      	ldrh	r3, [r7, #18]
 8006fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	8013      	strh	r3, [r2, #0]
 8006fe8:	e2b0      	b.n	800754c <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006fea:	88fb      	ldrh	r3, [r7, #6]
 8006fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d021      	beq.n	8007038 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	881b      	ldrh	r3, [r3, #0]
 8007004:	b29b      	uxth	r3, r3
 8007006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800700a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800700e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	461a      	mov	r2, r3
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	441a      	add	r2, r3
 8007020:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007024:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007028:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800702c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007034:	b29b      	uxth	r3, r3
 8007036:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800703e:	2b01      	cmp	r3, #1
 8007040:	f040 8284 	bne.w	800754c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	695a      	ldr	r2, [r3, #20]
 8007048:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800704c:	441a      	add	r2, r3
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	69da      	ldr	r2, [r3, #28]
 8007056:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800705a:	441a      	add	r2, r3
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	6a1a      	ldr	r2, [r3, #32]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	429a      	cmp	r2, r3
 800706a:	d309      	bcc.n	8007080 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	6a1a      	ldr	r2, [r3, #32]
 8007076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007078:	1ad2      	subs	r2, r2, r3
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	621a      	str	r2, [r3, #32]
 800707e:	e015      	b.n	80070ac <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d107      	bne.n	8007098 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8007088:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800708c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007096:	e009      	b.n	80070ac <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	6a1b      	ldr	r3, [r3, #32]
 80070a4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	2200      	movs	r2, #0
 80070aa:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	785b      	ldrb	r3, [r3, #1]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d155      	bne.n	8007160 <HAL_PCD_EP_DB_Transmit+0x356>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	461a      	mov	r2, r3
 80070c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c8:	4413      	add	r3, r2
 80070ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	00da      	lsls	r2, r3, #3
 80070d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d4:	4413      	add	r3, r2
 80070d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070da:	637b      	str	r3, [r7, #52]	; 0x34
 80070dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070de:	2b3e      	cmp	r3, #62	; 0x3e
 80070e0:	d916      	bls.n	8007110 <HAL_PCD_EP_DB_Transmit+0x306>
 80070e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070e4:	095b      	lsrs	r3, r3, #5
 80070e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80070e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070ea:	f003 031f 	and.w	r3, r3, #31
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d102      	bne.n	80070f8 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80070f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070f4:	3b01      	subs	r3, #1
 80070f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80070f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	029b      	lsls	r3, r3, #10
 80070fe:	b29b      	uxth	r3, r3
 8007100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007108:	b29a      	uxth	r2, r3
 800710a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800710c:	801a      	strh	r2, [r3, #0]
 800710e:	e043      	b.n	8007198 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007112:	2b00      	cmp	r3, #0
 8007114:	d112      	bne.n	800713c <HAL_PCD_EP_DB_Transmit+0x332>
 8007116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007118:	881b      	ldrh	r3, [r3, #0]
 800711a:	b29b      	uxth	r3, r3
 800711c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007120:	b29a      	uxth	r2, r3
 8007122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007124:	801a      	strh	r2, [r3, #0]
 8007126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	b29b      	uxth	r3, r3
 800712c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007134:	b29a      	uxth	r2, r3
 8007136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007138:	801a      	strh	r2, [r3, #0]
 800713a:	e02d      	b.n	8007198 <HAL_PCD_EP_DB_Transmit+0x38e>
 800713c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800713e:	085b      	lsrs	r3, r3, #1
 8007140:	64bb      	str	r3, [r7, #72]	; 0x48
 8007142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	2b00      	cmp	r3, #0
 800714a:	d002      	beq.n	8007152 <HAL_PCD_EP_DB_Transmit+0x348>
 800714c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800714e:	3301      	adds	r3, #1
 8007150:	64bb      	str	r3, [r7, #72]	; 0x48
 8007152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007154:	b29b      	uxth	r3, r3
 8007156:	029b      	lsls	r3, r3, #10
 8007158:	b29a      	uxth	r2, r3
 800715a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800715c:	801a      	strh	r2, [r3, #0]
 800715e:	e01b      	b.n	8007198 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	785b      	ldrb	r3, [r3, #1]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d117      	bne.n	8007198 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	643b      	str	r3, [r7, #64]	; 0x40
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007176:	b29b      	uxth	r3, r3
 8007178:	461a      	mov	r2, r3
 800717a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800717c:	4413      	add	r3, r2
 800717e:	643b      	str	r3, [r7, #64]	; 0x40
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	00da      	lsls	r2, r3, #3
 8007186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007188:	4413      	add	r3, r2
 800718a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800718e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007192:	b29a      	uxth	r2, r3
 8007194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007196:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6818      	ldr	r0, [r3, #0]
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	6959      	ldr	r1, [r3, #20]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	891a      	ldrh	r2, [r3, #8]
 80071a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	f006 fbe7 	bl	800d97a <USB_WritePMA>
 80071ac:	e1ce      	b.n	800754c <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	461a      	mov	r2, r3
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	00db      	lsls	r3, r3, #3
 80071c0:	4413      	add	r3, r2
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	6812      	ldr	r2, [r2, #0]
 80071c6:	4413      	add	r3, r2
 80071c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	699a      	ldr	r2, [r3, #24]
 80071da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80071de:	429a      	cmp	r2, r3
 80071e0:	d307      	bcc.n	80071f2 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	699a      	ldr	r2, [r3, #24]
 80071e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80071ea:	1ad2      	subs	r2, r2, r3
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	619a      	str	r2, [r3, #24]
 80071f0:	e002      	b.n	80071f8 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2200      	movs	r2, #0
 80071f6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f040 80c4 	bne.w	800738a <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	785b      	ldrb	r3, [r3, #1]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d126      	bne.n	8007258 <HAL_PCD_EP_DB_Transmit+0x44e>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007218:	b29b      	uxth	r3, r3
 800721a:	461a      	mov	r2, r3
 800721c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800721e:	4413      	add	r3, r2
 8007220:	66bb      	str	r3, [r7, #104]	; 0x68
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	00da      	lsls	r2, r3, #3
 8007228:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800722a:	4413      	add	r3, r2
 800722c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007230:	667b      	str	r3, [r7, #100]	; 0x64
 8007232:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	b29b      	uxth	r3, r3
 8007238:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800723c:	b29a      	uxth	r2, r3
 800723e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007240:	801a      	strh	r2, [r3, #0]
 8007242:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	b29b      	uxth	r3, r3
 8007248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800724c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007250:	b29a      	uxth	r2, r3
 8007252:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007254:	801a      	strh	r2, [r3, #0]
 8007256:	e01a      	b.n	800728e <HAL_PCD_EP_DB_Transmit+0x484>
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	785b      	ldrb	r3, [r3, #1]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d116      	bne.n	800728e <HAL_PCD_EP_DB_Transmit+0x484>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	673b      	str	r3, [r7, #112]	; 0x70
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800726e:	b29b      	uxth	r3, r3
 8007270:	461a      	mov	r2, r3
 8007272:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007274:	4413      	add	r3, r2
 8007276:	673b      	str	r3, [r7, #112]	; 0x70
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	00da      	lsls	r2, r3, #3
 800727e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007280:	4413      	add	r3, r2
 8007282:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007286:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800728a:	2200      	movs	r2, #0
 800728c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	785b      	ldrb	r3, [r3, #1]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d12f      	bne.n	80072fc <HAL_PCD_EP_DB_Transmit+0x4f2>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	461a      	mov	r2, r3
 80072b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072b4:	4413      	add	r3, r2
 80072b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	00da      	lsls	r2, r3, #3
 80072c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072c4:	4413      	add	r3, r2
 80072c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80072ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072da:	b29a      	uxth	r2, r3
 80072dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072e0:	801a      	strh	r2, [r3, #0]
 80072e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072e6:	881b      	ldrh	r3, [r3, #0]
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072f8:	801a      	strh	r2, [r3, #0]
 80072fa:	e017      	b.n	800732c <HAL_PCD_EP_DB_Transmit+0x522>
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	785b      	ldrb	r3, [r3, #1]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d113      	bne.n	800732c <HAL_PCD_EP_DB_Transmit+0x522>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800730c:	b29b      	uxth	r3, r3
 800730e:	461a      	mov	r2, r3
 8007310:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007312:	4413      	add	r3, r2
 8007314:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	00da      	lsls	r2, r3, #3
 800731c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800731e:	4413      	add	r3, r2
 8007320:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007324:	67bb      	str	r3, [r7, #120]	; 0x78
 8007326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007328:	2200      	movs	r2, #0
 800732a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	4619      	mov	r1, r3
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f00a fb63 	bl	80119fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007338:	88fb      	ldrh	r3, [r7, #6]
 800733a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800733e:	2b00      	cmp	r3, #0
 8007340:	f040 8104 	bne.w	800754c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	461a      	mov	r2, r3
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	881b      	ldrh	r3, [r3, #0]
 8007354:	b29b      	uxth	r3, r3
 8007356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800735a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	461a      	mov	r2, r3
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	441a      	add	r2, r3
 8007370:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800737c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007384:	b29b      	uxth	r3, r3
 8007386:	8013      	strh	r3, [r2, #0]
 8007388:	e0e0      	b.n	800754c <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800738a:	88fb      	ldrh	r3, [r7, #6]
 800738c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d121      	bne.n	80073d8 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	461a      	mov	r2, r3
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ae:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	461a      	mov	r2, r3
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	441a      	add	r2, r3
 80073c0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80073c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80073de:	2b01      	cmp	r3, #1
 80073e0:	f040 80b4 	bne.w	800754c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	695a      	ldr	r2, [r3, #20]
 80073e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073ec:	441a      	add	r2, r3
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	69da      	ldr	r2, [r3, #28]
 80073f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073fa:	441a      	add	r2, r3
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	6a1a      	ldr	r2, [r3, #32]
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	429a      	cmp	r2, r3
 800740a:	d309      	bcc.n	8007420 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	6a1a      	ldr	r2, [r3, #32]
 8007416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007418:	1ad2      	subs	r2, r2, r3
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	621a      	str	r2, [r3, #32]
 800741e:	e015      	b.n	800744c <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d107      	bne.n	8007438 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8007428:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800742c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007436:	e009      	b.n	800744c <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2200      	movs	r2, #0
 8007442:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	663b      	str	r3, [r7, #96]	; 0x60
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	785b      	ldrb	r3, [r3, #1]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d155      	bne.n	8007506 <HAL_PCD_EP_DB_Transmit+0x6fc>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007468:	b29b      	uxth	r3, r3
 800746a:	461a      	mov	r2, r3
 800746c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800746e:	4413      	add	r3, r2
 8007470:	65bb      	str	r3, [r7, #88]	; 0x58
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	00da      	lsls	r2, r3, #3
 8007478:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800747a:	4413      	add	r3, r2
 800747c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007480:	657b      	str	r3, [r7, #84]	; 0x54
 8007482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007484:	2b3e      	cmp	r3, #62	; 0x3e
 8007486:	d916      	bls.n	80074b6 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8007488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800748a:	095b      	lsrs	r3, r3, #5
 800748c:	677b      	str	r3, [r7, #116]	; 0x74
 800748e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007490:	f003 031f 	and.w	r3, r3, #31
 8007494:	2b00      	cmp	r3, #0
 8007496:	d102      	bne.n	800749e <HAL_PCD_EP_DB_Transmit+0x694>
 8007498:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800749a:	3b01      	subs	r3, #1
 800749c:	677b      	str	r3, [r7, #116]	; 0x74
 800749e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	029b      	lsls	r3, r3, #10
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074b2:	801a      	strh	r2, [r3, #0]
 80074b4:	e040      	b.n	8007538 <HAL_PCD_EP_DB_Transmit+0x72e>
 80074b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d112      	bne.n	80074e2 <HAL_PCD_EP_DB_Transmit+0x6d8>
 80074bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074ca:	801a      	strh	r2, [r3, #0]
 80074cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074ce:	881b      	ldrh	r3, [r3, #0]
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074da:	b29a      	uxth	r2, r3
 80074dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074de:	801a      	strh	r2, [r3, #0]
 80074e0:	e02a      	b.n	8007538 <HAL_PCD_EP_DB_Transmit+0x72e>
 80074e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074e4:	085b      	lsrs	r3, r3, #1
 80074e6:	677b      	str	r3, [r7, #116]	; 0x74
 80074e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d002      	beq.n	80074f8 <HAL_PCD_EP_DB_Transmit+0x6ee>
 80074f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074f4:	3301      	adds	r3, #1
 80074f6:	677b      	str	r3, [r7, #116]	; 0x74
 80074f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	029b      	lsls	r3, r3, #10
 80074fe:	b29a      	uxth	r2, r3
 8007500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007502:	801a      	strh	r2, [r3, #0]
 8007504:	e018      	b.n	8007538 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	785b      	ldrb	r3, [r3, #1]
 800750a:	2b01      	cmp	r3, #1
 800750c:	d114      	bne.n	8007538 <HAL_PCD_EP_DB_Transmit+0x72e>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007516:	b29b      	uxth	r3, r3
 8007518:	461a      	mov	r2, r3
 800751a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800751c:	4413      	add	r3, r2
 800751e:	663b      	str	r3, [r7, #96]	; 0x60
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	00da      	lsls	r2, r3, #3
 8007526:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007528:	4413      	add	r3, r2
 800752a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800752e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007532:	b29a      	uxth	r2, r3
 8007534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007536:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6818      	ldr	r0, [r3, #0]
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	6959      	ldr	r1, [r3, #20]
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	895a      	ldrh	r2, [r3, #10]
 8007544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007546:	b29b      	uxth	r3, r3
 8007548:	f006 fa17 	bl	800d97a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	461a      	mov	r2, r3
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	881b      	ldrh	r3, [r3, #0]
 800755c:	b29b      	uxth	r3, r3
 800755e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007566:	823b      	strh	r3, [r7, #16]
 8007568:	8a3b      	ldrh	r3, [r7, #16]
 800756a:	f083 0310 	eor.w	r3, r3, #16
 800756e:	823b      	strh	r3, [r7, #16]
 8007570:	8a3b      	ldrh	r3, [r7, #16]
 8007572:	f083 0320 	eor.w	r3, r3, #32
 8007576:	823b      	strh	r3, [r7, #16]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	461a      	mov	r2, r3
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	441a      	add	r2, r3
 8007586:	8a3b      	ldrh	r3, [r7, #16]
 8007588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800758c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007590:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007598:	b29b      	uxth	r3, r3
 800759a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3788      	adds	r7, #136	; 0x88
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b087      	sub	sp, #28
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	60f8      	str	r0, [r7, #12]
 80075ae:	607b      	str	r3, [r7, #4]
 80075b0:	460b      	mov	r3, r1
 80075b2:	817b      	strh	r3, [r7, #10]
 80075b4:	4613      	mov	r3, r2
 80075b6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80075b8:	897b      	ldrh	r3, [r7, #10]
 80075ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075be:	b29b      	uxth	r3, r3
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00b      	beq.n	80075dc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075c4:	897b      	ldrh	r3, [r7, #10]
 80075c6:	f003 0307 	and.w	r3, r3, #7
 80075ca:	1c5a      	adds	r2, r3, #1
 80075cc:	4613      	mov	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	00db      	lsls	r3, r3, #3
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	4413      	add	r3, r2
 80075d8:	617b      	str	r3, [r7, #20]
 80075da:	e009      	b.n	80075f0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80075dc:	897a      	ldrh	r2, [r7, #10]
 80075de:	4613      	mov	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4413      	add	r3, r2
 80075e4:	00db      	lsls	r3, r3, #3
 80075e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	4413      	add	r3, r2
 80075ee:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80075f0:	893b      	ldrh	r3, [r7, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d107      	bne.n	8007606 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	2200      	movs	r2, #0
 80075fa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	b29a      	uxth	r2, r3
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	80da      	strh	r2, [r3, #6]
 8007604:	e00b      	b.n	800761e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2201      	movs	r2, #1
 800760a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	b29a      	uxth	r2, r3
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	0c1b      	lsrs	r3, r3, #16
 8007618:	b29a      	uxth	r2, r3
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	371c      	adds	r7, #28
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007650:	b29b      	uxth	r3, r3
 8007652:	f043 0301 	orr.w	r3, r3, #1
 8007656:	b29a      	uxth	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007664:	b29b      	uxth	r3, r3
 8007666:	f043 0302 	orr.w	r3, r3, #2
 800766a:	b29a      	uxth	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d141      	bne.n	8007712 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800768e:	4b4b      	ldr	r3, [pc, #300]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800769a:	d131      	bne.n	8007700 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800769c:	4b47      	ldr	r3, [pc, #284]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800769e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076a2:	4a46      	ldr	r2, [pc, #280]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80076ac:	4b43      	ldr	r3, [pc, #268]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80076b4:	4a41      	ldr	r2, [pc, #260]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80076ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80076bc:	4b40      	ldr	r3, [pc, #256]	; (80077c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2232      	movs	r2, #50	; 0x32
 80076c2:	fb02 f303 	mul.w	r3, r2, r3
 80076c6:	4a3f      	ldr	r2, [pc, #252]	; (80077c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80076c8:	fba2 2303 	umull	r2, r3, r2, r3
 80076cc:	0c9b      	lsrs	r3, r3, #18
 80076ce:	3301      	adds	r3, #1
 80076d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80076d2:	e002      	b.n	80076da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80076da:	4b38      	ldr	r3, [pc, #224]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076e6:	d102      	bne.n	80076ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1f2      	bne.n	80076d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80076ee:	4b33      	ldr	r3, [pc, #204]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076fa:	d158      	bne.n	80077ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e057      	b.n	80077b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007700:	4b2e      	ldr	r3, [pc, #184]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007706:	4a2d      	ldr	r2, [pc, #180]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800770c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007710:	e04d      	b.n	80077ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007718:	d141      	bne.n	800779e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800771a:	4b28      	ldr	r3, [pc, #160]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007726:	d131      	bne.n	800778c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007728:	4b24      	ldr	r3, [pc, #144]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800772a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800772e:	4a23      	ldr	r2, [pc, #140]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007734:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007738:	4b20      	ldr	r3, [pc, #128]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007740:	4a1e      	ldr	r2, [pc, #120]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007746:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007748:	4b1d      	ldr	r3, [pc, #116]	; (80077c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2232      	movs	r2, #50	; 0x32
 800774e:	fb02 f303 	mul.w	r3, r2, r3
 8007752:	4a1c      	ldr	r2, [pc, #112]	; (80077c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007754:	fba2 2303 	umull	r2, r3, r2, r3
 8007758:	0c9b      	lsrs	r3, r3, #18
 800775a:	3301      	adds	r3, #1
 800775c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800775e:	e002      	b.n	8007766 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	3b01      	subs	r3, #1
 8007764:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007766:	4b15      	ldr	r3, [pc, #84]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800776e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007772:	d102      	bne.n	800777a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1f2      	bne.n	8007760 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800777a:	4b10      	ldr	r3, [pc, #64]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007786:	d112      	bne.n	80077ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e011      	b.n	80077b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800778c:	4b0b      	ldr	r3, [pc, #44]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800778e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007792:	4a0a      	ldr	r2, [pc, #40]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007798:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800779c:	e007      	b.n	80077ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800779e:	4b07      	ldr	r3, [pc, #28]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80077a6:	4a05      	ldr	r2, [pc, #20]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80077ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	40007000 	.word	0x40007000
 80077c0:	20000000 	.word	0x20000000
 80077c4:	431bde83 	.word	0x431bde83

080077c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b088      	sub	sp, #32
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d101      	bne.n	80077da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e306      	b.n	8007de8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0301 	and.w	r3, r3, #1
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d075      	beq.n	80078d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077e6:	4b97      	ldr	r3, [pc, #604]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f003 030c 	and.w	r3, r3, #12
 80077ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077f0:	4b94      	ldr	r3, [pc, #592]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	f003 0303 	and.w	r3, r3, #3
 80077f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	2b0c      	cmp	r3, #12
 80077fe:	d102      	bne.n	8007806 <HAL_RCC_OscConfig+0x3e>
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	2b03      	cmp	r3, #3
 8007804:	d002      	beq.n	800780c <HAL_RCC_OscConfig+0x44>
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	2b08      	cmp	r3, #8
 800780a:	d10b      	bne.n	8007824 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800780c:	4b8d      	ldr	r3, [pc, #564]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d05b      	beq.n	80078d0 <HAL_RCC_OscConfig+0x108>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d157      	bne.n	80078d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e2e1      	b.n	8007de8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800782c:	d106      	bne.n	800783c <HAL_RCC_OscConfig+0x74>
 800782e:	4b85      	ldr	r3, [pc, #532]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a84      	ldr	r2, [pc, #528]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 8007834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007838:	6013      	str	r3, [r2, #0]
 800783a:	e01d      	b.n	8007878 <HAL_RCC_OscConfig+0xb0>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007844:	d10c      	bne.n	8007860 <HAL_RCC_OscConfig+0x98>
 8007846:	4b7f      	ldr	r3, [pc, #508]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a7e      	ldr	r2, [pc, #504]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 800784c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007850:	6013      	str	r3, [r2, #0]
 8007852:	4b7c      	ldr	r3, [pc, #496]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a7b      	ldr	r2, [pc, #492]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 8007858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800785c:	6013      	str	r3, [r2, #0]
 800785e:	e00b      	b.n	8007878 <HAL_RCC_OscConfig+0xb0>
 8007860:	4b78      	ldr	r3, [pc, #480]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a77      	ldr	r2, [pc, #476]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 8007866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800786a:	6013      	str	r3, [r2, #0]
 800786c:	4b75      	ldr	r3, [pc, #468]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a74      	ldr	r2, [pc, #464]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 8007872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d013      	beq.n	80078a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007880:	f7fb fe7a 	bl	8003578 <HAL_GetTick>
 8007884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007886:	e008      	b.n	800789a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007888:	f7fb fe76 	bl	8003578 <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	2b64      	cmp	r3, #100	; 0x64
 8007894:	d901      	bls.n	800789a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e2a6      	b.n	8007de8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800789a:	4b6a      	ldr	r3, [pc, #424]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d0f0      	beq.n	8007888 <HAL_RCC_OscConfig+0xc0>
 80078a6:	e014      	b.n	80078d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a8:	f7fb fe66 	bl	8003578 <HAL_GetTick>
 80078ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80078ae:	e008      	b.n	80078c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078b0:	f7fb fe62 	bl	8003578 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	2b64      	cmp	r3, #100	; 0x64
 80078bc:	d901      	bls.n	80078c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078be:	2303      	movs	r3, #3
 80078c0:	e292      	b.n	8007de8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80078c2:	4b60      	ldr	r3, [pc, #384]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1f0      	bne.n	80078b0 <HAL_RCC_OscConfig+0xe8>
 80078ce:	e000      	b.n	80078d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0302 	and.w	r3, r3, #2
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d075      	beq.n	80079ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078de:	4b59      	ldr	r3, [pc, #356]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f003 030c 	and.w	r3, r3, #12
 80078e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80078e8:	4b56      	ldr	r3, [pc, #344]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	f003 0303 	and.w	r3, r3, #3
 80078f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	2b0c      	cmp	r3, #12
 80078f6:	d102      	bne.n	80078fe <HAL_RCC_OscConfig+0x136>
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d002      	beq.n	8007904 <HAL_RCC_OscConfig+0x13c>
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	2b04      	cmp	r3, #4
 8007902:	d11f      	bne.n	8007944 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007904:	4b4f      	ldr	r3, [pc, #316]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800790c:	2b00      	cmp	r3, #0
 800790e:	d005      	beq.n	800791c <HAL_RCC_OscConfig+0x154>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d101      	bne.n	800791c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e265      	b.n	8007de8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800791c:	4b49      	ldr	r3, [pc, #292]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	061b      	lsls	r3, r3, #24
 800792a:	4946      	ldr	r1, [pc, #280]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 800792c:	4313      	orrs	r3, r2
 800792e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007930:	4b45      	ldr	r3, [pc, #276]	; (8007a48 <HAL_RCC_OscConfig+0x280>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4618      	mov	r0, r3
 8007936:	f7fa fa17 	bl	8001d68 <HAL_InitTick>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d043      	beq.n	80079c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e251      	b.n	8007de8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d023      	beq.n	8007994 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800794c:	4b3d      	ldr	r3, [pc, #244]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a3c      	ldr	r2, [pc, #240]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 8007952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007958:	f7fb fe0e 	bl	8003578 <HAL_GetTick>
 800795c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800795e:	e008      	b.n	8007972 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007960:	f7fb fe0a 	bl	8003578 <HAL_GetTick>
 8007964:	4602      	mov	r2, r0
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	2b02      	cmp	r3, #2
 800796c:	d901      	bls.n	8007972 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e23a      	b.n	8007de8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007972:	4b34      	ldr	r3, [pc, #208]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800797a:	2b00      	cmp	r3, #0
 800797c:	d0f0      	beq.n	8007960 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800797e:	4b31      	ldr	r3, [pc, #196]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	061b      	lsls	r3, r3, #24
 800798c:	492d      	ldr	r1, [pc, #180]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 800798e:	4313      	orrs	r3, r2
 8007990:	604b      	str	r3, [r1, #4]
 8007992:	e01a      	b.n	80079ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007994:	4b2b      	ldr	r3, [pc, #172]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a2a      	ldr	r2, [pc, #168]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 800799a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800799e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a0:	f7fb fdea 	bl	8003578 <HAL_GetTick>
 80079a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80079a6:	e008      	b.n	80079ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079a8:	f7fb fde6 	bl	8003578 <HAL_GetTick>
 80079ac:	4602      	mov	r2, r0
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d901      	bls.n	80079ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e216      	b.n	8007de8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80079ba:	4b22      	ldr	r3, [pc, #136]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1f0      	bne.n	80079a8 <HAL_RCC_OscConfig+0x1e0>
 80079c6:	e000      	b.n	80079ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 0308 	and.w	r3, r3, #8
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d041      	beq.n	8007a5a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d01c      	beq.n	8007a18 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079de:	4b19      	ldr	r3, [pc, #100]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 80079e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079e4:	4a17      	ldr	r2, [pc, #92]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 80079e6:	f043 0301 	orr.w	r3, r3, #1
 80079ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079ee:	f7fb fdc3 	bl	8003578 <HAL_GetTick>
 80079f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80079f4:	e008      	b.n	8007a08 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079f6:	f7fb fdbf 	bl	8003578 <HAL_GetTick>
 80079fa:	4602      	mov	r2, r0
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d901      	bls.n	8007a08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007a04:	2303      	movs	r3, #3
 8007a06:	e1ef      	b.n	8007de8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a08:	4b0e      	ldr	r3, [pc, #56]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 8007a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a0e:	f003 0302 	and.w	r3, r3, #2
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d0ef      	beq.n	80079f6 <HAL_RCC_OscConfig+0x22e>
 8007a16:	e020      	b.n	8007a5a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a18:	4b0a      	ldr	r3, [pc, #40]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 8007a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a1e:	4a09      	ldr	r2, [pc, #36]	; (8007a44 <HAL_RCC_OscConfig+0x27c>)
 8007a20:	f023 0301 	bic.w	r3, r3, #1
 8007a24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a28:	f7fb fda6 	bl	8003578 <HAL_GetTick>
 8007a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007a2e:	e00d      	b.n	8007a4c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a30:	f7fb fda2 	bl	8003578 <HAL_GetTick>
 8007a34:	4602      	mov	r2, r0
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d906      	bls.n	8007a4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e1d2      	b.n	8007de8 <HAL_RCC_OscConfig+0x620>
 8007a42:	bf00      	nop
 8007a44:	40021000 	.word	0x40021000
 8007a48:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007a4c:	4b8c      	ldr	r3, [pc, #560]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1ea      	bne.n	8007a30 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0304 	and.w	r3, r3, #4
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 80a6 	beq.w	8007bb4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007a6c:	4b84      	ldr	r3, [pc, #528]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <HAL_RCC_OscConfig+0x2b4>
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e000      	b.n	8007a7e <HAL_RCC_OscConfig+0x2b6>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00d      	beq.n	8007a9e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a82:	4b7f      	ldr	r3, [pc, #508]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a86:	4a7e      	ldr	r2, [pc, #504]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a8c:	6593      	str	r3, [r2, #88]	; 0x58
 8007a8e:	4b7c      	ldr	r3, [pc, #496]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a96:	60fb      	str	r3, [r7, #12]
 8007a98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a9e:	4b79      	ldr	r3, [pc, #484]	; (8007c84 <HAL_RCC_OscConfig+0x4bc>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d118      	bne.n	8007adc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007aaa:	4b76      	ldr	r3, [pc, #472]	; (8007c84 <HAL_RCC_OscConfig+0x4bc>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a75      	ldr	r2, [pc, #468]	; (8007c84 <HAL_RCC_OscConfig+0x4bc>)
 8007ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ab6:	f7fb fd5f 	bl	8003578 <HAL_GetTick>
 8007aba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007abc:	e008      	b.n	8007ad0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007abe:	f7fb fd5b 	bl	8003578 <HAL_GetTick>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d901      	bls.n	8007ad0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e18b      	b.n	8007de8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ad0:	4b6c      	ldr	r3, [pc, #432]	; (8007c84 <HAL_RCC_OscConfig+0x4bc>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d0f0      	beq.n	8007abe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d108      	bne.n	8007af6 <HAL_RCC_OscConfig+0x32e>
 8007ae4:	4b66      	ldr	r3, [pc, #408]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aea:	4a65      	ldr	r2, [pc, #404]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007aec:	f043 0301 	orr.w	r3, r3, #1
 8007af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007af4:	e024      	b.n	8007b40 <HAL_RCC_OscConfig+0x378>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	2b05      	cmp	r3, #5
 8007afc:	d110      	bne.n	8007b20 <HAL_RCC_OscConfig+0x358>
 8007afe:	4b60      	ldr	r3, [pc, #384]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b04:	4a5e      	ldr	r2, [pc, #376]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007b06:	f043 0304 	orr.w	r3, r3, #4
 8007b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007b0e:	4b5c      	ldr	r3, [pc, #368]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b14:	4a5a      	ldr	r2, [pc, #360]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007b16:	f043 0301 	orr.w	r3, r3, #1
 8007b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007b1e:	e00f      	b.n	8007b40 <HAL_RCC_OscConfig+0x378>
 8007b20:	4b57      	ldr	r3, [pc, #348]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b26:	4a56      	ldr	r2, [pc, #344]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007b28:	f023 0301 	bic.w	r3, r3, #1
 8007b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007b30:	4b53      	ldr	r3, [pc, #332]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b36:	4a52      	ldr	r2, [pc, #328]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007b38:	f023 0304 	bic.w	r3, r3, #4
 8007b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d016      	beq.n	8007b76 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b48:	f7fb fd16 	bl	8003578 <HAL_GetTick>
 8007b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b4e:	e00a      	b.n	8007b66 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b50:	f7fb fd12 	bl	8003578 <HAL_GetTick>
 8007b54:	4602      	mov	r2, r0
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d901      	bls.n	8007b66 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e140      	b.n	8007de8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b66:	4b46      	ldr	r3, [pc, #280]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b6c:	f003 0302 	and.w	r3, r3, #2
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d0ed      	beq.n	8007b50 <HAL_RCC_OscConfig+0x388>
 8007b74:	e015      	b.n	8007ba2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b76:	f7fb fcff 	bl	8003578 <HAL_GetTick>
 8007b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007b7c:	e00a      	b.n	8007b94 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b7e:	f7fb fcfb 	bl	8003578 <HAL_GetTick>
 8007b82:	4602      	mov	r2, r0
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d901      	bls.n	8007b94 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e129      	b.n	8007de8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007b94:	4b3a      	ldr	r3, [pc, #232]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1ed      	bne.n	8007b7e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007ba2:	7ffb      	ldrb	r3, [r7, #31]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d105      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ba8:	4b35      	ldr	r3, [pc, #212]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bac:	4a34      	ldr	r2, [pc, #208]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bb2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0320 	and.w	r3, r3, #32
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d03c      	beq.n	8007c3a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d01c      	beq.n	8007c02 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007bc8:	4b2d      	ldr	r3, [pc, #180]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007bca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007bce:	4a2c      	ldr	r2, [pc, #176]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007bd0:	f043 0301 	orr.w	r3, r3, #1
 8007bd4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bd8:	f7fb fcce 	bl	8003578 <HAL_GetTick>
 8007bdc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007bde:	e008      	b.n	8007bf2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007be0:	f7fb fcca 	bl	8003578 <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d901      	bls.n	8007bf2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e0fa      	b.n	8007de8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007bf2:	4b23      	ldr	r3, [pc, #140]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007bf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007bf8:	f003 0302 	and.w	r3, r3, #2
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d0ef      	beq.n	8007be0 <HAL_RCC_OscConfig+0x418>
 8007c00:	e01b      	b.n	8007c3a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007c02:	4b1f      	ldr	r3, [pc, #124]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007c04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c08:	4a1d      	ldr	r2, [pc, #116]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007c0a:	f023 0301 	bic.w	r3, r3, #1
 8007c0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c12:	f7fb fcb1 	bl	8003578 <HAL_GetTick>
 8007c16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007c18:	e008      	b.n	8007c2c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c1a:	f7fb fcad 	bl	8003578 <HAL_GetTick>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d901      	bls.n	8007c2c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e0dd      	b.n	8007de8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007c2c:	4b14      	ldr	r3, [pc, #80]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007c2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c32:	f003 0302 	and.w	r3, r3, #2
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1ef      	bne.n	8007c1a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 80d1 	beq.w	8007de6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007c44:	4b0e      	ldr	r3, [pc, #56]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f003 030c 	and.w	r3, r3, #12
 8007c4c:	2b0c      	cmp	r3, #12
 8007c4e:	f000 808b 	beq.w	8007d68 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d15e      	bne.n	8007d18 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c5a:	4b09      	ldr	r3, [pc, #36]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a08      	ldr	r2, [pc, #32]	; (8007c80 <HAL_RCC_OscConfig+0x4b8>)
 8007c60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c66:	f7fb fc87 	bl	8003578 <HAL_GetTick>
 8007c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c6c:	e00c      	b.n	8007c88 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c6e:	f7fb fc83 	bl	8003578 <HAL_GetTick>
 8007c72:	4602      	mov	r2, r0
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d905      	bls.n	8007c88 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e0b3      	b.n	8007de8 <HAL_RCC_OscConfig+0x620>
 8007c80:	40021000 	.word	0x40021000
 8007c84:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c88:	4b59      	ldr	r3, [pc, #356]	; (8007df0 <HAL_RCC_OscConfig+0x628>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1ec      	bne.n	8007c6e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c94:	4b56      	ldr	r3, [pc, #344]	; (8007df0 <HAL_RCC_OscConfig+0x628>)
 8007c96:	68da      	ldr	r2, [r3, #12]
 8007c98:	4b56      	ldr	r3, [pc, #344]	; (8007df4 <HAL_RCC_OscConfig+0x62c>)
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	6a11      	ldr	r1, [r2, #32]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007ca4:	3a01      	subs	r2, #1
 8007ca6:	0112      	lsls	r2, r2, #4
 8007ca8:	4311      	orrs	r1, r2
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007cae:	0212      	lsls	r2, r2, #8
 8007cb0:	4311      	orrs	r1, r2
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007cb6:	0852      	lsrs	r2, r2, #1
 8007cb8:	3a01      	subs	r2, #1
 8007cba:	0552      	lsls	r2, r2, #21
 8007cbc:	4311      	orrs	r1, r2
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007cc2:	0852      	lsrs	r2, r2, #1
 8007cc4:	3a01      	subs	r2, #1
 8007cc6:	0652      	lsls	r2, r2, #25
 8007cc8:	4311      	orrs	r1, r2
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007cce:	06d2      	lsls	r2, r2, #27
 8007cd0:	430a      	orrs	r2, r1
 8007cd2:	4947      	ldr	r1, [pc, #284]	; (8007df0 <HAL_RCC_OscConfig+0x628>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007cd8:	4b45      	ldr	r3, [pc, #276]	; (8007df0 <HAL_RCC_OscConfig+0x628>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a44      	ldr	r2, [pc, #272]	; (8007df0 <HAL_RCC_OscConfig+0x628>)
 8007cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ce2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007ce4:	4b42      	ldr	r3, [pc, #264]	; (8007df0 <HAL_RCC_OscConfig+0x628>)
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	4a41      	ldr	r2, [pc, #260]	; (8007df0 <HAL_RCC_OscConfig+0x628>)
 8007cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007cee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf0:	f7fb fc42 	bl	8003578 <HAL_GetTick>
 8007cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cf6:	e008      	b.n	8007d0a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cf8:	f7fb fc3e 	bl	8003578 <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d901      	bls.n	8007d0a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e06e      	b.n	8007de8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d0a:	4b39      	ldr	r3, [pc, #228]	; (8007df0 <HAL_RCC_OscConfig+0x628>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d0f0      	beq.n	8007cf8 <HAL_RCC_OscConfig+0x530>
 8007d16:	e066      	b.n	8007de6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d18:	4b35      	ldr	r3, [pc, #212]	; (8007df0 <HAL_RCC_OscConfig+0x628>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a34      	ldr	r2, [pc, #208]	; (8007df0 <HAL_RCC_OscConfig+0x628>)
 8007d1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d22:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007d24:	4b32      	ldr	r3, [pc, #200]	; (8007df0 <HAL_RCC_OscConfig+0x628>)
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	4a31      	ldr	r2, [pc, #196]	; (8007df0 <HAL_RCC_OscConfig+0x628>)
 8007d2a:	f023 0303 	bic.w	r3, r3, #3
 8007d2e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007d30:	4b2f      	ldr	r3, [pc, #188]	; (8007df0 <HAL_RCC_OscConfig+0x628>)
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	4a2e      	ldr	r2, [pc, #184]	; (8007df0 <HAL_RCC_OscConfig+0x628>)
 8007d36:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d40:	f7fb fc1a 	bl	8003578 <HAL_GetTick>
 8007d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d46:	e008      	b.n	8007d5a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d48:	f7fb fc16 	bl	8003578 <HAL_GetTick>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d901      	bls.n	8007d5a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e046      	b.n	8007de8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d5a:	4b25      	ldr	r3, [pc, #148]	; (8007df0 <HAL_RCC_OscConfig+0x628>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1f0      	bne.n	8007d48 <HAL_RCC_OscConfig+0x580>
 8007d66:	e03e      	b.n	8007de6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	69db      	ldr	r3, [r3, #28]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d101      	bne.n	8007d74 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e039      	b.n	8007de8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007d74:	4b1e      	ldr	r3, [pc, #120]	; (8007df0 <HAL_RCC_OscConfig+0x628>)
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f003 0203 	and.w	r2, r3, #3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d12c      	bne.n	8007de2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d92:	3b01      	subs	r3, #1
 8007d94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d123      	bne.n	8007de2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d11b      	bne.n	8007de2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d113      	bne.n	8007de2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc4:	085b      	lsrs	r3, r3, #1
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d109      	bne.n	8007de2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd8:	085b      	lsrs	r3, r3, #1
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d001      	beq.n	8007de6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e000      	b.n	8007de8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3720      	adds	r7, #32
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	40021000 	.word	0x40021000
 8007df4:	019f800c 	.word	0x019f800c

08007df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007e02:	2300      	movs	r3, #0
 8007e04:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d101      	bne.n	8007e10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e11e      	b.n	800804e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e10:	4b91      	ldr	r3, [pc, #580]	; (8008058 <HAL_RCC_ClockConfig+0x260>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 030f 	and.w	r3, r3, #15
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d910      	bls.n	8007e40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e1e:	4b8e      	ldr	r3, [pc, #568]	; (8008058 <HAL_RCC_ClockConfig+0x260>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f023 020f 	bic.w	r2, r3, #15
 8007e26:	498c      	ldr	r1, [pc, #560]	; (8008058 <HAL_RCC_ClockConfig+0x260>)
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e2e:	4b8a      	ldr	r3, [pc, #552]	; (8008058 <HAL_RCC_ClockConfig+0x260>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 030f 	and.w	r3, r3, #15
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d001      	beq.n	8007e40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e106      	b.n	800804e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d073      	beq.n	8007f34 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	2b03      	cmp	r3, #3
 8007e52:	d129      	bne.n	8007ea8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e54:	4b81      	ldr	r3, [pc, #516]	; (800805c <HAL_RCC_ClockConfig+0x264>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d101      	bne.n	8007e64 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e0f4      	b.n	800804e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007e64:	f000 f9ce 	bl	8008204 <RCC_GetSysClockFreqFromPLLSource>
 8007e68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	4a7c      	ldr	r2, [pc, #496]	; (8008060 <HAL_RCC_ClockConfig+0x268>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d93f      	bls.n	8007ef2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007e72:	4b7a      	ldr	r3, [pc, #488]	; (800805c <HAL_RCC_ClockConfig+0x264>)
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d009      	beq.n	8007e92 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d033      	beq.n	8007ef2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d12f      	bne.n	8007ef2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007e92:	4b72      	ldr	r3, [pc, #456]	; (800805c <HAL_RCC_ClockConfig+0x264>)
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e9a:	4a70      	ldr	r2, [pc, #448]	; (800805c <HAL_RCC_ClockConfig+0x264>)
 8007e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ea0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007ea2:	2380      	movs	r3, #128	; 0x80
 8007ea4:	617b      	str	r3, [r7, #20]
 8007ea6:	e024      	b.n	8007ef2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d107      	bne.n	8007ec0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007eb0:	4b6a      	ldr	r3, [pc, #424]	; (800805c <HAL_RCC_ClockConfig+0x264>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d109      	bne.n	8007ed0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e0c6      	b.n	800804e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ec0:	4b66      	ldr	r3, [pc, #408]	; (800805c <HAL_RCC_ClockConfig+0x264>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e0be      	b.n	800804e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007ed0:	f000 f8ce 	bl	8008070 <HAL_RCC_GetSysClockFreq>
 8007ed4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	4a61      	ldr	r2, [pc, #388]	; (8008060 <HAL_RCC_ClockConfig+0x268>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d909      	bls.n	8007ef2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007ede:	4b5f      	ldr	r3, [pc, #380]	; (800805c <HAL_RCC_ClockConfig+0x264>)
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ee6:	4a5d      	ldr	r2, [pc, #372]	; (800805c <HAL_RCC_ClockConfig+0x264>)
 8007ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007eee:	2380      	movs	r3, #128	; 0x80
 8007ef0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007ef2:	4b5a      	ldr	r3, [pc, #360]	; (800805c <HAL_RCC_ClockConfig+0x264>)
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f023 0203 	bic.w	r2, r3, #3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	4957      	ldr	r1, [pc, #348]	; (800805c <HAL_RCC_ClockConfig+0x264>)
 8007f00:	4313      	orrs	r3, r2
 8007f02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f04:	f7fb fb38 	bl	8003578 <HAL_GetTick>
 8007f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f0a:	e00a      	b.n	8007f22 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f0c:	f7fb fb34 	bl	8003578 <HAL_GetTick>
 8007f10:	4602      	mov	r2, r0
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d901      	bls.n	8007f22 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e095      	b.n	800804e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f22:	4b4e      	ldr	r3, [pc, #312]	; (800805c <HAL_RCC_ClockConfig+0x264>)
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f003 020c 	and.w	r2, r3, #12
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d1eb      	bne.n	8007f0c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 0302 	and.w	r3, r3, #2
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d023      	beq.n	8007f88 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0304 	and.w	r3, r3, #4
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d005      	beq.n	8007f58 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f4c:	4b43      	ldr	r3, [pc, #268]	; (800805c <HAL_RCC_ClockConfig+0x264>)
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	4a42      	ldr	r2, [pc, #264]	; (800805c <HAL_RCC_ClockConfig+0x264>)
 8007f52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007f56:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0308 	and.w	r3, r3, #8
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d007      	beq.n	8007f74 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007f64:	4b3d      	ldr	r3, [pc, #244]	; (800805c <HAL_RCC_ClockConfig+0x264>)
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007f6c:	4a3b      	ldr	r2, [pc, #236]	; (800805c <HAL_RCC_ClockConfig+0x264>)
 8007f6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007f72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f74:	4b39      	ldr	r3, [pc, #228]	; (800805c <HAL_RCC_ClockConfig+0x264>)
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	4936      	ldr	r1, [pc, #216]	; (800805c <HAL_RCC_ClockConfig+0x264>)
 8007f82:	4313      	orrs	r3, r2
 8007f84:	608b      	str	r3, [r1, #8]
 8007f86:	e008      	b.n	8007f9a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	2b80      	cmp	r3, #128	; 0x80
 8007f8c:	d105      	bne.n	8007f9a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007f8e:	4b33      	ldr	r3, [pc, #204]	; (800805c <HAL_RCC_ClockConfig+0x264>)
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	4a32      	ldr	r2, [pc, #200]	; (800805c <HAL_RCC_ClockConfig+0x264>)
 8007f94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f98:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f9a:	4b2f      	ldr	r3, [pc, #188]	; (8008058 <HAL_RCC_ClockConfig+0x260>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 030f 	and.w	r3, r3, #15
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d21d      	bcs.n	8007fe4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fa8:	4b2b      	ldr	r3, [pc, #172]	; (8008058 <HAL_RCC_ClockConfig+0x260>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f023 020f 	bic.w	r2, r3, #15
 8007fb0:	4929      	ldr	r1, [pc, #164]	; (8008058 <HAL_RCC_ClockConfig+0x260>)
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007fb8:	f7fb fade 	bl	8003578 <HAL_GetTick>
 8007fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fbe:	e00a      	b.n	8007fd6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fc0:	f7fb fada 	bl	8003578 <HAL_GetTick>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d901      	bls.n	8007fd6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e03b      	b.n	800804e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fd6:	4b20      	ldr	r3, [pc, #128]	; (8008058 <HAL_RCC_ClockConfig+0x260>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 030f 	and.w	r3, r3, #15
 8007fde:	683a      	ldr	r2, [r7, #0]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d1ed      	bne.n	8007fc0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 0304 	and.w	r3, r3, #4
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d008      	beq.n	8008002 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ff0:	4b1a      	ldr	r3, [pc, #104]	; (800805c <HAL_RCC_ClockConfig+0x264>)
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	4917      	ldr	r1, [pc, #92]	; (800805c <HAL_RCC_ClockConfig+0x264>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0308 	and.w	r3, r3, #8
 800800a:	2b00      	cmp	r3, #0
 800800c:	d009      	beq.n	8008022 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800800e:	4b13      	ldr	r3, [pc, #76]	; (800805c <HAL_RCC_ClockConfig+0x264>)
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	00db      	lsls	r3, r3, #3
 800801c:	490f      	ldr	r1, [pc, #60]	; (800805c <HAL_RCC_ClockConfig+0x264>)
 800801e:	4313      	orrs	r3, r2
 8008020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008022:	f000 f825 	bl	8008070 <HAL_RCC_GetSysClockFreq>
 8008026:	4602      	mov	r2, r0
 8008028:	4b0c      	ldr	r3, [pc, #48]	; (800805c <HAL_RCC_ClockConfig+0x264>)
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	091b      	lsrs	r3, r3, #4
 800802e:	f003 030f 	and.w	r3, r3, #15
 8008032:	490c      	ldr	r1, [pc, #48]	; (8008064 <HAL_RCC_ClockConfig+0x26c>)
 8008034:	5ccb      	ldrb	r3, [r1, r3]
 8008036:	f003 031f 	and.w	r3, r3, #31
 800803a:	fa22 f303 	lsr.w	r3, r2, r3
 800803e:	4a0a      	ldr	r2, [pc, #40]	; (8008068 <HAL_RCC_ClockConfig+0x270>)
 8008040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008042:	4b0a      	ldr	r3, [pc, #40]	; (800806c <HAL_RCC_ClockConfig+0x274>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4618      	mov	r0, r3
 8008048:	f7f9 fe8e 	bl	8001d68 <HAL_InitTick>
 800804c:	4603      	mov	r3, r0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3718      	adds	r7, #24
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	40022000 	.word	0x40022000
 800805c:	40021000 	.word	0x40021000
 8008060:	04c4b400 	.word	0x04c4b400
 8008064:	08015378 	.word	0x08015378
 8008068:	20000000 	.word	0x20000000
 800806c:	20000004 	.word	0x20000004

08008070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008070:	b480      	push	{r7}
 8008072:	b087      	sub	sp, #28
 8008074:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008076:	4b2c      	ldr	r3, [pc, #176]	; (8008128 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f003 030c 	and.w	r3, r3, #12
 800807e:	2b04      	cmp	r3, #4
 8008080:	d102      	bne.n	8008088 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008082:	4b2a      	ldr	r3, [pc, #168]	; (800812c <HAL_RCC_GetSysClockFreq+0xbc>)
 8008084:	613b      	str	r3, [r7, #16]
 8008086:	e047      	b.n	8008118 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008088:	4b27      	ldr	r3, [pc, #156]	; (8008128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	f003 030c 	and.w	r3, r3, #12
 8008090:	2b08      	cmp	r3, #8
 8008092:	d102      	bne.n	800809a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008094:	4b25      	ldr	r3, [pc, #148]	; (800812c <HAL_RCC_GetSysClockFreq+0xbc>)
 8008096:	613b      	str	r3, [r7, #16]
 8008098:	e03e      	b.n	8008118 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800809a:	4b23      	ldr	r3, [pc, #140]	; (8008128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f003 030c 	and.w	r3, r3, #12
 80080a2:	2b0c      	cmp	r3, #12
 80080a4:	d136      	bne.n	8008114 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80080a6:	4b20      	ldr	r3, [pc, #128]	; (8008128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	f003 0303 	and.w	r3, r3, #3
 80080ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80080b0:	4b1d      	ldr	r3, [pc, #116]	; (8008128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	091b      	lsrs	r3, r3, #4
 80080b6:	f003 030f 	and.w	r3, r3, #15
 80080ba:	3301      	adds	r3, #1
 80080bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2b03      	cmp	r3, #3
 80080c2:	d10c      	bne.n	80080de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80080c4:	4a19      	ldr	r2, [pc, #100]	; (800812c <HAL_RCC_GetSysClockFreq+0xbc>)
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080cc:	4a16      	ldr	r2, [pc, #88]	; (8008128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80080ce:	68d2      	ldr	r2, [r2, #12]
 80080d0:	0a12      	lsrs	r2, r2, #8
 80080d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80080d6:	fb02 f303 	mul.w	r3, r2, r3
 80080da:	617b      	str	r3, [r7, #20]
      break;
 80080dc:	e00c      	b.n	80080f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80080de:	4a13      	ldr	r2, [pc, #76]	; (800812c <HAL_RCC_GetSysClockFreq+0xbc>)
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e6:	4a10      	ldr	r2, [pc, #64]	; (8008128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80080e8:	68d2      	ldr	r2, [r2, #12]
 80080ea:	0a12      	lsrs	r2, r2, #8
 80080ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80080f0:	fb02 f303 	mul.w	r3, r2, r3
 80080f4:	617b      	str	r3, [r7, #20]
      break;
 80080f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80080f8:	4b0b      	ldr	r3, [pc, #44]	; (8008128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	0e5b      	lsrs	r3, r3, #25
 80080fe:	f003 0303 	and.w	r3, r3, #3
 8008102:	3301      	adds	r3, #1
 8008104:	005b      	lsls	r3, r3, #1
 8008106:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008110:	613b      	str	r3, [r7, #16]
 8008112:	e001      	b.n	8008118 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008114:	2300      	movs	r3, #0
 8008116:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008118:	693b      	ldr	r3, [r7, #16]
}
 800811a:	4618      	mov	r0, r3
 800811c:	371c      	adds	r7, #28
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	40021000 	.word	0x40021000
 800812c:	00f42400 	.word	0x00f42400

08008130 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008130:	b480      	push	{r7}
 8008132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008134:	4b03      	ldr	r3, [pc, #12]	; (8008144 <HAL_RCC_GetHCLKFreq+0x14>)
 8008136:	681b      	ldr	r3, [r3, #0]
}
 8008138:	4618      	mov	r0, r3
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	20000000 	.word	0x20000000

08008148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800814c:	f7ff fff0 	bl	8008130 <HAL_RCC_GetHCLKFreq>
 8008150:	4602      	mov	r2, r0
 8008152:	4b06      	ldr	r3, [pc, #24]	; (800816c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	0a1b      	lsrs	r3, r3, #8
 8008158:	f003 0307 	and.w	r3, r3, #7
 800815c:	4904      	ldr	r1, [pc, #16]	; (8008170 <HAL_RCC_GetPCLK1Freq+0x28>)
 800815e:	5ccb      	ldrb	r3, [r1, r3]
 8008160:	f003 031f 	and.w	r3, r3, #31
 8008164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008168:	4618      	mov	r0, r3
 800816a:	bd80      	pop	{r7, pc}
 800816c:	40021000 	.word	0x40021000
 8008170:	08015388 	.word	0x08015388

08008174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008178:	f7ff ffda 	bl	8008130 <HAL_RCC_GetHCLKFreq>
 800817c:	4602      	mov	r2, r0
 800817e:	4b06      	ldr	r3, [pc, #24]	; (8008198 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	0adb      	lsrs	r3, r3, #11
 8008184:	f003 0307 	and.w	r3, r3, #7
 8008188:	4904      	ldr	r1, [pc, #16]	; (800819c <HAL_RCC_GetPCLK2Freq+0x28>)
 800818a:	5ccb      	ldrb	r3, [r1, r3]
 800818c:	f003 031f 	and.w	r3, r3, #31
 8008190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008194:	4618      	mov	r0, r3
 8008196:	bd80      	pop	{r7, pc}
 8008198:	40021000 	.word	0x40021000
 800819c:	08015388 	.word	0x08015388

080081a0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	220f      	movs	r2, #15
 80081ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80081b0:	4b12      	ldr	r3, [pc, #72]	; (80081fc <HAL_RCC_GetClockConfig+0x5c>)
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	f003 0203 	and.w	r2, r3, #3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80081bc:	4b0f      	ldr	r3, [pc, #60]	; (80081fc <HAL_RCC_GetClockConfig+0x5c>)
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80081c8:	4b0c      	ldr	r3, [pc, #48]	; (80081fc <HAL_RCC_GetClockConfig+0x5c>)
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80081d4:	4b09      	ldr	r3, [pc, #36]	; (80081fc <HAL_RCC_GetClockConfig+0x5c>)
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	08db      	lsrs	r3, r3, #3
 80081da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80081e2:	4b07      	ldr	r3, [pc, #28]	; (8008200 <HAL_RCC_GetClockConfig+0x60>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 020f 	and.w	r2, r3, #15
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	601a      	str	r2, [r3, #0]
}
 80081ee:	bf00      	nop
 80081f0:	370c      	adds	r7, #12
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	40021000 	.word	0x40021000
 8008200:	40022000 	.word	0x40022000

08008204 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008204:	b480      	push	{r7}
 8008206:	b087      	sub	sp, #28
 8008208:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800820a:	4b1e      	ldr	r3, [pc, #120]	; (8008284 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	f003 0303 	and.w	r3, r3, #3
 8008212:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008214:	4b1b      	ldr	r3, [pc, #108]	; (8008284 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	091b      	lsrs	r3, r3, #4
 800821a:	f003 030f 	and.w	r3, r3, #15
 800821e:	3301      	adds	r3, #1
 8008220:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	2b03      	cmp	r3, #3
 8008226:	d10c      	bne.n	8008242 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008228:	4a17      	ldr	r2, [pc, #92]	; (8008288 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008230:	4a14      	ldr	r2, [pc, #80]	; (8008284 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008232:	68d2      	ldr	r2, [r2, #12]
 8008234:	0a12      	lsrs	r2, r2, #8
 8008236:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800823a:	fb02 f303 	mul.w	r3, r2, r3
 800823e:	617b      	str	r3, [r7, #20]
    break;
 8008240:	e00c      	b.n	800825c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008242:	4a11      	ldr	r2, [pc, #68]	; (8008288 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	fbb2 f3f3 	udiv	r3, r2, r3
 800824a:	4a0e      	ldr	r2, [pc, #56]	; (8008284 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800824c:	68d2      	ldr	r2, [r2, #12]
 800824e:	0a12      	lsrs	r2, r2, #8
 8008250:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008254:	fb02 f303 	mul.w	r3, r2, r3
 8008258:	617b      	str	r3, [r7, #20]
    break;
 800825a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800825c:	4b09      	ldr	r3, [pc, #36]	; (8008284 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	0e5b      	lsrs	r3, r3, #25
 8008262:	f003 0303 	and.w	r3, r3, #3
 8008266:	3301      	adds	r3, #1
 8008268:	005b      	lsls	r3, r3, #1
 800826a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	fbb2 f3f3 	udiv	r3, r2, r3
 8008274:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008276:	687b      	ldr	r3, [r7, #4]
}
 8008278:	4618      	mov	r0, r3
 800827a:	371c      	adds	r7, #28
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr
 8008284:	40021000 	.word	0x40021000
 8008288:	00f42400 	.word	0x00f42400

0800828c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b086      	sub	sp, #24
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008294:	2300      	movs	r3, #0
 8008296:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008298:	2300      	movs	r3, #0
 800829a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f000 8098 	beq.w	80083da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082aa:	2300      	movs	r3, #0
 80082ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082ae:	4b43      	ldr	r3, [pc, #268]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d10d      	bne.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082ba:	4b40      	ldr	r3, [pc, #256]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082be:	4a3f      	ldr	r2, [pc, #252]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082c4:	6593      	str	r3, [r2, #88]	; 0x58
 80082c6:	4b3d      	ldr	r3, [pc, #244]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ce:	60bb      	str	r3, [r7, #8]
 80082d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082d2:	2301      	movs	r3, #1
 80082d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80082d6:	4b3a      	ldr	r3, [pc, #232]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a39      	ldr	r2, [pc, #228]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80082dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80082e2:	f7fb f949 	bl	8003578 <HAL_GetTick>
 80082e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082e8:	e009      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082ea:	f7fb f945 	bl	8003578 <HAL_GetTick>
 80082ee:	4602      	mov	r2, r0
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d902      	bls.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80082f8:	2303      	movs	r3, #3
 80082fa:	74fb      	strb	r3, [r7, #19]
        break;
 80082fc:	e005      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082fe:	4b30      	ldr	r3, [pc, #192]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008306:	2b00      	cmp	r3, #0
 8008308:	d0ef      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800830a:	7cfb      	ldrb	r3, [r7, #19]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d159      	bne.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008310:	4b2a      	ldr	r3, [pc, #168]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800831a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d01e      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	429a      	cmp	r2, r3
 800832a:	d019      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800832c:	4b23      	ldr	r3, [pc, #140]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800832e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008336:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008338:	4b20      	ldr	r3, [pc, #128]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800833a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800833e:	4a1f      	ldr	r2, [pc, #124]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008348:	4b1c      	ldr	r3, [pc, #112]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800834a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800834e:	4a1b      	ldr	r2, [pc, #108]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008358:	4a18      	ldr	r2, [pc, #96]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	2b00      	cmp	r3, #0
 8008368:	d016      	beq.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800836a:	f7fb f905 	bl	8003578 <HAL_GetTick>
 800836e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008370:	e00b      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008372:	f7fb f901 	bl	8003578 <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008380:	4293      	cmp	r3, r2
 8008382:	d902      	bls.n	800838a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008384:	2303      	movs	r3, #3
 8008386:	74fb      	strb	r3, [r7, #19]
            break;
 8008388:	e006      	b.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800838a:	4b0c      	ldr	r3, [pc, #48]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800838c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008390:	f003 0302 	and.w	r3, r3, #2
 8008394:	2b00      	cmp	r3, #0
 8008396:	d0ec      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008398:	7cfb      	ldrb	r3, [r7, #19]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10b      	bne.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800839e:	4b07      	ldr	r3, [pc, #28]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ac:	4903      	ldr	r1, [pc, #12]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80083b4:	e008      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80083b6:	7cfb      	ldrb	r3, [r7, #19]
 80083b8:	74bb      	strb	r3, [r7, #18]
 80083ba:	e005      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80083bc:	40021000 	.word	0x40021000
 80083c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083c4:	7cfb      	ldrb	r3, [r7, #19]
 80083c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80083c8:	7c7b      	ldrb	r3, [r7, #17]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d105      	bne.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083ce:	4ba7      	ldr	r3, [pc, #668]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083d2:	4aa6      	ldr	r2, [pc, #664]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00a      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80083e6:	4ba1      	ldr	r3, [pc, #644]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ec:	f023 0203 	bic.w	r2, r3, #3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	499d      	ldr	r1, [pc, #628]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 0302 	and.w	r3, r3, #2
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00a      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008408:	4b98      	ldr	r3, [pc, #608]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800840a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800840e:	f023 020c 	bic.w	r2, r3, #12
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	4995      	ldr	r1, [pc, #596]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008418:	4313      	orrs	r3, r2
 800841a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 0304 	and.w	r3, r3, #4
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00a      	beq.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800842a:	4b90      	ldr	r3, [pc, #576]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800842c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008430:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	498c      	ldr	r1, [pc, #560]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800843a:	4313      	orrs	r3, r2
 800843c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0308 	and.w	r3, r3, #8
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00a      	beq.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800844c:	4b87      	ldr	r3, [pc, #540]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800844e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008452:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	4984      	ldr	r1, [pc, #528]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800845c:	4313      	orrs	r3, r2
 800845e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 0310 	and.w	r3, r3, #16
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00a      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800846e:	4b7f      	ldr	r3, [pc, #508]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008474:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	497b      	ldr	r1, [pc, #492]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800847e:	4313      	orrs	r3, r2
 8008480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0320 	and.w	r3, r3, #32
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00a      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008490:	4b76      	ldr	r3, [pc, #472]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008496:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	4973      	ldr	r1, [pc, #460]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084a0:	4313      	orrs	r3, r2
 80084a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00a      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80084b2:	4b6e      	ldr	r3, [pc, #440]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	69db      	ldr	r3, [r3, #28]
 80084c0:	496a      	ldr	r1, [pc, #424]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084c2:	4313      	orrs	r3, r2
 80084c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00a      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80084d4:	4b65      	ldr	r3, [pc, #404]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	4962      	ldr	r1, [pc, #392]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084e4:	4313      	orrs	r3, r2
 80084e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00a      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80084f6:	4b5d      	ldr	r3, [pc, #372]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008504:	4959      	ldr	r1, [pc, #356]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008506:	4313      	orrs	r3, r2
 8008508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00a      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008518:	4b54      	ldr	r3, [pc, #336]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800851a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800851e:	f023 0203 	bic.w	r2, r3, #3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008526:	4951      	ldr	r1, [pc, #324]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008528:	4313      	orrs	r3, r2
 800852a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00a      	beq.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800853a:	4b4c      	ldr	r3, [pc, #304]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800853c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008540:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008548:	4948      	ldr	r1, [pc, #288]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800854a:	4313      	orrs	r3, r2
 800854c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008558:	2b00      	cmp	r3, #0
 800855a:	d015      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800855c:	4b43      	ldr	r3, [pc, #268]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800855e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008562:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856a:	4940      	ldr	r1, [pc, #256]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800856c:	4313      	orrs	r3, r2
 800856e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800857a:	d105      	bne.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800857c:	4b3b      	ldr	r3, [pc, #236]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	4a3a      	ldr	r2, [pc, #232]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008586:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008590:	2b00      	cmp	r3, #0
 8008592:	d015      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008594:	4b35      	ldr	r3, [pc, #212]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800859a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a2:	4932      	ldr	r1, [pc, #200]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085a4:	4313      	orrs	r3, r2
 80085a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085b2:	d105      	bne.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085b4:	4b2d      	ldr	r3, [pc, #180]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	4a2c      	ldr	r2, [pc, #176]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085be:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d015      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80085cc:	4b27      	ldr	r3, [pc, #156]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085da:	4924      	ldr	r1, [pc, #144]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085dc:	4313      	orrs	r3, r2
 80085de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80085ea:	d105      	bne.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085ec:	4b1f      	ldr	r3, [pc, #124]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	4a1e      	ldr	r2, [pc, #120]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085f6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008600:	2b00      	cmp	r3, #0
 8008602:	d015      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008604:	4b19      	ldr	r3, [pc, #100]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800860a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008612:	4916      	ldr	r1, [pc, #88]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008614:	4313      	orrs	r3, r2
 8008616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008622:	d105      	bne.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008624:	4b11      	ldr	r3, [pc, #68]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	4a10      	ldr	r2, [pc, #64]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800862a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800862e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d019      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800863c:	4b0b      	ldr	r3, [pc, #44]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800863e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008642:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864a:	4908      	ldr	r1, [pc, #32]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800864c:	4313      	orrs	r3, r2
 800864e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008656:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800865a:	d109      	bne.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800865c:	4b03      	ldr	r3, [pc, #12]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	4a02      	ldr	r2, [pc, #8]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008666:	60d3      	str	r3, [r2, #12]
 8008668:	e002      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800866a:	bf00      	nop
 800866c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008678:	2b00      	cmp	r3, #0
 800867a:	d015      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800867c:	4b29      	ldr	r3, [pc, #164]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800867e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008682:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800868a:	4926      	ldr	r1, [pc, #152]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800868c:	4313      	orrs	r3, r2
 800868e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800869a:	d105      	bne.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800869c:	4b21      	ldr	r3, [pc, #132]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	4a20      	ldr	r2, [pc, #128]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80086a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086a6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d015      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80086b4:	4b1b      	ldr	r3, [pc, #108]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80086b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ba:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086c2:	4918      	ldr	r1, [pc, #96]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80086c4:	4313      	orrs	r3, r2
 80086c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086d2:	d105      	bne.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80086d4:	4b13      	ldr	r3, [pc, #76]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	4a12      	ldr	r2, [pc, #72]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80086da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086de:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d015      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80086ec:	4b0d      	ldr	r3, [pc, #52]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80086ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80086f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086fa:	490a      	ldr	r1, [pc, #40]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80086fc:	4313      	orrs	r3, r2
 80086fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008706:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800870a:	d105      	bne.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800870c:	4b05      	ldr	r3, [pc, #20]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	4a04      	ldr	r2, [pc, #16]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008716:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008718:	7cbb      	ldrb	r3, [r7, #18]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3718      	adds	r7, #24
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	40021000 	.word	0x40021000

08008728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e049      	b.n	80087ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b00      	cmp	r3, #0
 8008744:	d106      	bne.n	8008754 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7f9 ff52 	bl	80025f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2202      	movs	r2, #2
 8008758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	3304      	adds	r3, #4
 8008764:	4619      	mov	r1, r3
 8008766:	4610      	mov	r0, r2
 8008768:	f001 f824 	bl	80097b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
	...

080087d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087d8:	b480      	push	{r7}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d001      	beq.n	80087f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e054      	b.n	800889a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2202      	movs	r2, #2
 80087f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68da      	ldr	r2, [r3, #12]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f042 0201 	orr.w	r2, r2, #1
 8008806:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a26      	ldr	r2, [pc, #152]	; (80088a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d022      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x80>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800881a:	d01d      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x80>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a22      	ldr	r2, [pc, #136]	; (80088ac <HAL_TIM_Base_Start_IT+0xd4>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d018      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x80>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a21      	ldr	r2, [pc, #132]	; (80088b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d013      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x80>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a1f      	ldr	r2, [pc, #124]	; (80088b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d00e      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x80>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a1e      	ldr	r2, [pc, #120]	; (80088b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d009      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x80>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a1c      	ldr	r2, [pc, #112]	; (80088bc <HAL_TIM_Base_Start_IT+0xe4>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d004      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x80>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a1b      	ldr	r2, [pc, #108]	; (80088c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d115      	bne.n	8008884 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	689a      	ldr	r2, [r3, #8]
 800885e:	4b19      	ldr	r3, [pc, #100]	; (80088c4 <HAL_TIM_Base_Start_IT+0xec>)
 8008860:	4013      	ands	r3, r2
 8008862:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2b06      	cmp	r3, #6
 8008868:	d015      	beq.n	8008896 <HAL_TIM_Base_Start_IT+0xbe>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008870:	d011      	beq.n	8008896 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f042 0201 	orr.w	r2, r2, #1
 8008880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008882:	e008      	b.n	8008896 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f042 0201 	orr.w	r2, r2, #1
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	e000      	b.n	8008898 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008896:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3714      	adds	r7, #20
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	40012c00 	.word	0x40012c00
 80088ac:	40000400 	.word	0x40000400
 80088b0:	40000800 	.word	0x40000800
 80088b4:	40000c00 	.word	0x40000c00
 80088b8:	40013400 	.word	0x40013400
 80088bc:	40014000 	.word	0x40014000
 80088c0:	40015000 	.word	0x40015000
 80088c4:	00010007 	.word	0x00010007

080088c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d101      	bne.n	80088da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e049      	b.n	800896e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d106      	bne.n	80088f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f841 	bl	8008976 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2202      	movs	r2, #2
 80088f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	3304      	adds	r3, #4
 8008904:	4619      	mov	r1, r3
 8008906:	4610      	mov	r0, r2
 8008908:	f000 ff54 	bl	80097b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008976:	b480      	push	{r7}
 8008978:	b083      	sub	sp, #12
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800897e:	bf00      	nop
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
	...

0800898c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d109      	bne.n	80089b0 <HAL_TIM_PWM_Start+0x24>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	bf14      	ite	ne
 80089a8:	2301      	movne	r3, #1
 80089aa:	2300      	moveq	r3, #0
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	e03c      	b.n	8008a2a <HAL_TIM_PWM_Start+0x9e>
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	2b04      	cmp	r3, #4
 80089b4:	d109      	bne.n	80089ca <HAL_TIM_PWM_Start+0x3e>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	2b01      	cmp	r3, #1
 80089c0:	bf14      	ite	ne
 80089c2:	2301      	movne	r3, #1
 80089c4:	2300      	moveq	r3, #0
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	e02f      	b.n	8008a2a <HAL_TIM_PWM_Start+0x9e>
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	2b08      	cmp	r3, #8
 80089ce:	d109      	bne.n	80089e4 <HAL_TIM_PWM_Start+0x58>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b01      	cmp	r3, #1
 80089da:	bf14      	ite	ne
 80089dc:	2301      	movne	r3, #1
 80089de:	2300      	moveq	r3, #0
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	e022      	b.n	8008a2a <HAL_TIM_PWM_Start+0x9e>
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	2b0c      	cmp	r3, #12
 80089e8:	d109      	bne.n	80089fe <HAL_TIM_PWM_Start+0x72>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	bf14      	ite	ne
 80089f6:	2301      	movne	r3, #1
 80089f8:	2300      	moveq	r3, #0
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	e015      	b.n	8008a2a <HAL_TIM_PWM_Start+0x9e>
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	2b10      	cmp	r3, #16
 8008a02:	d109      	bne.n	8008a18 <HAL_TIM_PWM_Start+0x8c>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	bf14      	ite	ne
 8008a10:	2301      	movne	r3, #1
 8008a12:	2300      	moveq	r3, #0
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	e008      	b.n	8008a2a <HAL_TIM_PWM_Start+0x9e>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	bf14      	ite	ne
 8008a24:	2301      	movne	r3, #1
 8008a26:	2300      	moveq	r3, #0
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d001      	beq.n	8008a32 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e0a6      	b.n	8008b80 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d104      	bne.n	8008a42 <HAL_TIM_PWM_Start+0xb6>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a40:	e023      	b.n	8008a8a <HAL_TIM_PWM_Start+0xfe>
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	2b04      	cmp	r3, #4
 8008a46:	d104      	bne.n	8008a52 <HAL_TIM_PWM_Start+0xc6>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a50:	e01b      	b.n	8008a8a <HAL_TIM_PWM_Start+0xfe>
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	2b08      	cmp	r3, #8
 8008a56:	d104      	bne.n	8008a62 <HAL_TIM_PWM_Start+0xd6>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a60:	e013      	b.n	8008a8a <HAL_TIM_PWM_Start+0xfe>
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	2b0c      	cmp	r3, #12
 8008a66:	d104      	bne.n	8008a72 <HAL_TIM_PWM_Start+0xe6>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a70:	e00b      	b.n	8008a8a <HAL_TIM_PWM_Start+0xfe>
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	2b10      	cmp	r3, #16
 8008a76:	d104      	bne.n	8008a82 <HAL_TIM_PWM_Start+0xf6>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2202      	movs	r2, #2
 8008a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a80:	e003      	b.n	8008a8a <HAL_TIM_PWM_Start+0xfe>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2202      	movs	r2, #2
 8008a86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	6839      	ldr	r1, [r7, #0]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f001 fc26 	bl	800a2e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a3a      	ldr	r2, [pc, #232]	; (8008b88 <HAL_TIM_PWM_Start+0x1fc>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d018      	beq.n	8008ad4 <HAL_TIM_PWM_Start+0x148>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a39      	ldr	r2, [pc, #228]	; (8008b8c <HAL_TIM_PWM_Start+0x200>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d013      	beq.n	8008ad4 <HAL_TIM_PWM_Start+0x148>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a37      	ldr	r2, [pc, #220]	; (8008b90 <HAL_TIM_PWM_Start+0x204>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d00e      	beq.n	8008ad4 <HAL_TIM_PWM_Start+0x148>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a36      	ldr	r2, [pc, #216]	; (8008b94 <HAL_TIM_PWM_Start+0x208>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d009      	beq.n	8008ad4 <HAL_TIM_PWM_Start+0x148>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a34      	ldr	r2, [pc, #208]	; (8008b98 <HAL_TIM_PWM_Start+0x20c>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d004      	beq.n	8008ad4 <HAL_TIM_PWM_Start+0x148>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a33      	ldr	r2, [pc, #204]	; (8008b9c <HAL_TIM_PWM_Start+0x210>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d101      	bne.n	8008ad8 <HAL_TIM_PWM_Start+0x14c>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e000      	b.n	8008ada <HAL_TIM_PWM_Start+0x14e>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d007      	beq.n	8008aee <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008aec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a25      	ldr	r2, [pc, #148]	; (8008b88 <HAL_TIM_PWM_Start+0x1fc>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d022      	beq.n	8008b3e <HAL_TIM_PWM_Start+0x1b2>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b00:	d01d      	beq.n	8008b3e <HAL_TIM_PWM_Start+0x1b2>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a26      	ldr	r2, [pc, #152]	; (8008ba0 <HAL_TIM_PWM_Start+0x214>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d018      	beq.n	8008b3e <HAL_TIM_PWM_Start+0x1b2>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a24      	ldr	r2, [pc, #144]	; (8008ba4 <HAL_TIM_PWM_Start+0x218>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d013      	beq.n	8008b3e <HAL_TIM_PWM_Start+0x1b2>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a23      	ldr	r2, [pc, #140]	; (8008ba8 <HAL_TIM_PWM_Start+0x21c>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d00e      	beq.n	8008b3e <HAL_TIM_PWM_Start+0x1b2>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a19      	ldr	r2, [pc, #100]	; (8008b8c <HAL_TIM_PWM_Start+0x200>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d009      	beq.n	8008b3e <HAL_TIM_PWM_Start+0x1b2>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a18      	ldr	r2, [pc, #96]	; (8008b90 <HAL_TIM_PWM_Start+0x204>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d004      	beq.n	8008b3e <HAL_TIM_PWM_Start+0x1b2>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a18      	ldr	r2, [pc, #96]	; (8008b9c <HAL_TIM_PWM_Start+0x210>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d115      	bne.n	8008b6a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	689a      	ldr	r2, [r3, #8]
 8008b44:	4b19      	ldr	r3, [pc, #100]	; (8008bac <HAL_TIM_PWM_Start+0x220>)
 8008b46:	4013      	ands	r3, r2
 8008b48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2b06      	cmp	r3, #6
 8008b4e:	d015      	beq.n	8008b7c <HAL_TIM_PWM_Start+0x1f0>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b56:	d011      	beq.n	8008b7c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f042 0201 	orr.w	r2, r2, #1
 8008b66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b68:	e008      	b.n	8008b7c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f042 0201 	orr.w	r2, r2, #1
 8008b78:	601a      	str	r2, [r3, #0]
 8008b7a:	e000      	b.n	8008b7e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	40012c00 	.word	0x40012c00
 8008b8c:	40013400 	.word	0x40013400
 8008b90:	40014000 	.word	0x40014000
 8008b94:	40014400 	.word	0x40014400
 8008b98:	40014800 	.word	0x40014800
 8008b9c:	40015000 	.word	0x40015000
 8008ba0:	40000400 	.word	0x40000400
 8008ba4:	40000800 	.word	0x40000800
 8008ba8:	40000c00 	.word	0x40000c00
 8008bac:	00010007 	.word	0x00010007

08008bb0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d101      	bne.n	8008bc2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e049      	b.n	8008c56 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d106      	bne.n	8008bdc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 f841 	bl	8008c5e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2202      	movs	r2, #2
 8008be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	3304      	adds	r3, #4
 8008bec:	4619      	mov	r1, r3
 8008bee:	4610      	mov	r0, r2
 8008bf0:	f000 fde0 	bl	80097b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b083      	sub	sp, #12
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008c66:	bf00      	nop
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b086      	sub	sp, #24
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
 8008c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d101      	bne.n	8008c86 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e097      	b.n	8008db6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d106      	bne.n	8008ca0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7f9 fd7a 	bl	8002794 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	6812      	ldr	r2, [r2, #0]
 8008cb2:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8008cb6:	f023 0307 	bic.w	r3, r3, #7
 8008cba:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	3304      	adds	r3, #4
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	4610      	mov	r0, r2
 8008cc8:	f000 fd74 	bl	80097b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	699b      	ldr	r3, [r3, #24]
 8008cda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	6a1b      	ldr	r3, [r3, #32]
 8008ce2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cf4:	f023 0303 	bic.w	r3, r3, #3
 8008cf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	689a      	ldr	r2, [r3, #8]
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	021b      	lsls	r3, r3, #8
 8008d04:	4313      	orrs	r3, r2
 8008d06:	693a      	ldr	r2, [r7, #16]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008d12:	f023 030c 	bic.w	r3, r3, #12
 8008d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	68da      	ldr	r2, [r3, #12]
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	69db      	ldr	r3, [r3, #28]
 8008d2c:	021b      	lsls	r3, r3, #8
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	693a      	ldr	r2, [r7, #16]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	011a      	lsls	r2, r3, #4
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	6a1b      	ldr	r3, [r3, #32]
 8008d40:	031b      	lsls	r3, r3, #12
 8008d42:	4313      	orrs	r3, r2
 8008d44:	693a      	ldr	r2, [r7, #16]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008d50:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008d58:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	685a      	ldr	r2, [r3, #4]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	011b      	lsls	r3, r3, #4
 8008d64:	4313      	orrs	r3, r2
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	697a      	ldr	r2, [r7, #20]
 8008d72:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3718      	adds	r7, #24
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b084      	sub	sp, #16
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008dce:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008dd6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dde:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008de6:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d110      	bne.n	8008e10 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d102      	bne.n	8008dfa <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008df4:	7b7b      	ldrb	r3, [r7, #13]
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d001      	beq.n	8008dfe <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e069      	b.n	8008ed2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2202      	movs	r2, #2
 8008e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2202      	movs	r2, #2
 8008e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e0e:	e031      	b.n	8008e74 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	2b04      	cmp	r3, #4
 8008e14:	d110      	bne.n	8008e38 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e16:	7bbb      	ldrb	r3, [r7, #14]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d102      	bne.n	8008e22 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e1c:	7b3b      	ldrb	r3, [r7, #12]
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d001      	beq.n	8008e26 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	e055      	b.n	8008ed2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2202      	movs	r2, #2
 8008e2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2202      	movs	r2, #2
 8008e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e36:	e01d      	b.n	8008e74 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e38:	7bfb      	ldrb	r3, [r7, #15]
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d108      	bne.n	8008e50 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e3e:	7bbb      	ldrb	r3, [r7, #14]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d105      	bne.n	8008e50 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e44:	7b7b      	ldrb	r3, [r7, #13]
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d102      	bne.n	8008e50 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e4a:	7b3b      	ldrb	r3, [r7, #12]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d001      	beq.n	8008e54 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e03e      	b.n	8008ed2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2202      	movs	r2, #2
 8008e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2202      	movs	r2, #2
 8008e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2202      	movs	r2, #2
 8008e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2202      	movs	r2, #2
 8008e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d003      	beq.n	8008e82 <HAL_TIM_Encoder_Start+0xc4>
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	2b04      	cmp	r3, #4
 8008e7e:	d008      	beq.n	8008e92 <HAL_TIM_Encoder_Start+0xd4>
 8008e80:	e00f      	b.n	8008ea2 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2201      	movs	r2, #1
 8008e88:	2100      	movs	r1, #0
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f001 fa2a 	bl	800a2e4 <TIM_CCxChannelCmd>
      break;
 8008e90:	e016      	b.n	8008ec0 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2201      	movs	r2, #1
 8008e98:	2104      	movs	r1, #4
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f001 fa22 	bl	800a2e4 <TIM_CCxChannelCmd>
      break;
 8008ea0:	e00e      	b.n	8008ec0 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f001 fa1a 	bl	800a2e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	2104      	movs	r1, #4
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f001 fa13 	bl	800a2e4 <TIM_CCxChannelCmd>
      break;
 8008ebe:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f042 0201 	orr.w	r2, r2, #1
 8008ece:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b082      	sub	sp, #8
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	f003 0302 	and.w	r3, r3, #2
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	d122      	bne.n	8008f36 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	f003 0302 	and.w	r3, r3, #2
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d11b      	bne.n	8008f36 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f06f 0202 	mvn.w	r2, #2
 8008f06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	f003 0303 	and.w	r3, r3, #3
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d003      	beq.n	8008f24 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fc2b 	bl	8009778 <HAL_TIM_IC_CaptureCallback>
 8008f22:	e005      	b.n	8008f30 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fc1d 	bl	8009764 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 fc2e 	bl	800978c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	f003 0304 	and.w	r3, r3, #4
 8008f40:	2b04      	cmp	r3, #4
 8008f42:	d122      	bne.n	8008f8a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	f003 0304 	and.w	r3, r3, #4
 8008f4e:	2b04      	cmp	r3, #4
 8008f50:	d11b      	bne.n	8008f8a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f06f 0204 	mvn.w	r2, #4
 8008f5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2202      	movs	r2, #2
 8008f60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	699b      	ldr	r3, [r3, #24]
 8008f68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d003      	beq.n	8008f78 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 fc01 	bl	8009778 <HAL_TIM_IC_CaptureCallback>
 8008f76:	e005      	b.n	8008f84 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 fbf3 	bl	8009764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 fc04 	bl	800978c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	f003 0308 	and.w	r3, r3, #8
 8008f94:	2b08      	cmp	r3, #8
 8008f96:	d122      	bne.n	8008fde <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	f003 0308 	and.w	r3, r3, #8
 8008fa2:	2b08      	cmp	r3, #8
 8008fa4:	d11b      	bne.n	8008fde <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f06f 0208 	mvn.w	r2, #8
 8008fae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2204      	movs	r2, #4
 8008fb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	69db      	ldr	r3, [r3, #28]
 8008fbc:	f003 0303 	and.w	r3, r3, #3
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d003      	beq.n	8008fcc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 fbd7 	bl	8009778 <HAL_TIM_IC_CaptureCallback>
 8008fca:	e005      	b.n	8008fd8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fbc9 	bl	8009764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fbda 	bl	800978c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	f003 0310 	and.w	r3, r3, #16
 8008fe8:	2b10      	cmp	r3, #16
 8008fea:	d122      	bne.n	8009032 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	f003 0310 	and.w	r3, r3, #16
 8008ff6:	2b10      	cmp	r3, #16
 8008ff8:	d11b      	bne.n	8009032 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f06f 0210 	mvn.w	r2, #16
 8009002:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2208      	movs	r2, #8
 8009008:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	69db      	ldr	r3, [r3, #28]
 8009010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009014:	2b00      	cmp	r3, #0
 8009016:	d003      	beq.n	8009020 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fbad 	bl	8009778 <HAL_TIM_IC_CaptureCallback>
 800901e:	e005      	b.n	800902c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fb9f 	bl	8009764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 fbb0 	bl	800978c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	691b      	ldr	r3, [r3, #16]
 8009038:	f003 0301 	and.w	r3, r3, #1
 800903c:	2b01      	cmp	r3, #1
 800903e:	d10e      	bne.n	800905e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	2b01      	cmp	r3, #1
 800904c:	d107      	bne.n	800905e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f06f 0201 	mvn.w	r2, #1
 8009056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f7f8 fe45 	bl	8001ce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009068:	2b80      	cmp	r3, #128	; 0x80
 800906a:	d10e      	bne.n	800908a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009076:	2b80      	cmp	r3, #128	; 0x80
 8009078:	d107      	bne.n	800908a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f001 fb5d 	bl	800a744 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009098:	d10e      	bne.n	80090b8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090a4:	2b80      	cmp	r3, #128	; 0x80
 80090a6:	d107      	bne.n	80090b8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80090b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f001 fb50 	bl	800a758 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c2:	2b40      	cmp	r3, #64	; 0x40
 80090c4:	d10e      	bne.n	80090e4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090d0:	2b40      	cmp	r3, #64	; 0x40
 80090d2:	d107      	bne.n	80090e4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80090dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fb5e 	bl	80097a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	f003 0320 	and.w	r3, r3, #32
 80090ee:	2b20      	cmp	r3, #32
 80090f0:	d10e      	bne.n	8009110 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	f003 0320 	and.w	r3, r3, #32
 80090fc:	2b20      	cmp	r3, #32
 80090fe:	d107      	bne.n	8009110 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f06f 0220 	mvn.w	r2, #32
 8009108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f001 fb10 	bl	800a730 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800911a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800911e:	d10f      	bne.n	8009140 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800912a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800912e:	d107      	bne.n	8009140 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f001 fb16 	bl	800a76c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800914a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800914e:	d10f      	bne.n	8009170 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800915a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800915e:	d107      	bne.n	8009170 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f001 fb08 	bl	800a780 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800917a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800917e:	d10f      	bne.n	80091a0 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800918a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800918e:	d107      	bne.n	80091a0 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f001 fafa 	bl	800a794 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80091ae:	d10f      	bne.n	80091d0 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80091be:	d107      	bne.n	80091d0 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80091c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f001 faec 	bl	800a7a8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091d0:	bf00      	nop
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b086      	sub	sp, #24
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091e4:	2300      	movs	r3, #0
 80091e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d101      	bne.n	80091f6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80091f2:	2302      	movs	r3, #2
 80091f4:	e088      	b.n	8009308 <HAL_TIM_IC_ConfigChannel+0x130>
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2201      	movs	r2, #1
 80091fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d11b      	bne.n	800923c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6818      	ldr	r0, [r3, #0]
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	6819      	ldr	r1, [r3, #0]
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	685a      	ldr	r2, [r3, #4]
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	f000 fea0 	bl	8009f58 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	699a      	ldr	r2, [r3, #24]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f022 020c 	bic.w	r2, r2, #12
 8009226:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6999      	ldr	r1, [r3, #24]
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	689a      	ldr	r2, [r3, #8]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	430a      	orrs	r2, r1
 8009238:	619a      	str	r2, [r3, #24]
 800923a:	e060      	b.n	80092fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2b04      	cmp	r3, #4
 8009240:	d11c      	bne.n	800927c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6818      	ldr	r0, [r3, #0]
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	6819      	ldr	r1, [r3, #0]
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	685a      	ldr	r2, [r3, #4]
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	f000 ff24 	bl	800a09e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	699a      	ldr	r2, [r3, #24]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009264:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	6999      	ldr	r1, [r3, #24]
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	021a      	lsls	r2, r3, #8
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	430a      	orrs	r2, r1
 8009278:	619a      	str	r2, [r3, #24]
 800927a:	e040      	b.n	80092fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b08      	cmp	r3, #8
 8009280:	d11b      	bne.n	80092ba <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6818      	ldr	r0, [r3, #0]
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	6819      	ldr	r1, [r3, #0]
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	685a      	ldr	r2, [r3, #4]
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	f000 ff71 	bl	800a178 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	69da      	ldr	r2, [r3, #28]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f022 020c 	bic.w	r2, r2, #12
 80092a4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	69d9      	ldr	r1, [r3, #28]
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	689a      	ldr	r2, [r3, #8]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	430a      	orrs	r2, r1
 80092b6:	61da      	str	r2, [r3, #28]
 80092b8:	e021      	b.n	80092fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2b0c      	cmp	r3, #12
 80092be:	d11c      	bne.n	80092fa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6818      	ldr	r0, [r3, #0]
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	6819      	ldr	r1, [r3, #0]
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	685a      	ldr	r2, [r3, #4]
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	f000 ff8e 	bl	800a1f0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	69da      	ldr	r2, [r3, #28]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80092e2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	69d9      	ldr	r1, [r3, #28]
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	021a      	lsls	r2, r3, #8
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	430a      	orrs	r2, r1
 80092f6:	61da      	str	r2, [r3, #28]
 80092f8:	e001      	b.n	80092fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2200      	movs	r2, #0
 8009302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009306:	7dfb      	ldrb	r3, [r7, #23]
}
 8009308:	4618      	mov	r0, r3
 800930a:	3718      	adds	r7, #24
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800931c:	2300      	movs	r3, #0
 800931e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009326:	2b01      	cmp	r3, #1
 8009328:	d101      	bne.n	800932e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800932a:	2302      	movs	r3, #2
 800932c:	e0ff      	b.n	800952e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2201      	movs	r2, #1
 8009332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2b14      	cmp	r3, #20
 800933a:	f200 80f0 	bhi.w	800951e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800933e:	a201      	add	r2, pc, #4	; (adr r2, 8009344 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009344:	08009399 	.word	0x08009399
 8009348:	0800951f 	.word	0x0800951f
 800934c:	0800951f 	.word	0x0800951f
 8009350:	0800951f 	.word	0x0800951f
 8009354:	080093d9 	.word	0x080093d9
 8009358:	0800951f 	.word	0x0800951f
 800935c:	0800951f 	.word	0x0800951f
 8009360:	0800951f 	.word	0x0800951f
 8009364:	0800941b 	.word	0x0800941b
 8009368:	0800951f 	.word	0x0800951f
 800936c:	0800951f 	.word	0x0800951f
 8009370:	0800951f 	.word	0x0800951f
 8009374:	0800945b 	.word	0x0800945b
 8009378:	0800951f 	.word	0x0800951f
 800937c:	0800951f 	.word	0x0800951f
 8009380:	0800951f 	.word	0x0800951f
 8009384:	0800949d 	.word	0x0800949d
 8009388:	0800951f 	.word	0x0800951f
 800938c:	0800951f 	.word	0x0800951f
 8009390:	0800951f 	.word	0x0800951f
 8009394:	080094dd 	.word	0x080094dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68b9      	ldr	r1, [r7, #8]
 800939e:	4618      	mov	r0, r3
 80093a0:	f000 fab0 	bl	8009904 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	699a      	ldr	r2, [r3, #24]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f042 0208 	orr.w	r2, r2, #8
 80093b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	699a      	ldr	r2, [r3, #24]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f022 0204 	bic.w	r2, r2, #4
 80093c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6999      	ldr	r1, [r3, #24]
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	691a      	ldr	r2, [r3, #16]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	430a      	orrs	r2, r1
 80093d4:	619a      	str	r2, [r3, #24]
      break;
 80093d6:	e0a5      	b.n	8009524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68b9      	ldr	r1, [r7, #8]
 80093de:	4618      	mov	r0, r3
 80093e0:	f000 fb2a 	bl	8009a38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	699a      	ldr	r2, [r3, #24]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	699a      	ldr	r2, [r3, #24]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	6999      	ldr	r1, [r3, #24]
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	021a      	lsls	r2, r3, #8
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	430a      	orrs	r2, r1
 8009416:	619a      	str	r2, [r3, #24]
      break;
 8009418:	e084      	b.n	8009524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68b9      	ldr	r1, [r7, #8]
 8009420:	4618      	mov	r0, r3
 8009422:	f000 fb9d 	bl	8009b60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	69da      	ldr	r2, [r3, #28]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f042 0208 	orr.w	r2, r2, #8
 8009434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	69da      	ldr	r2, [r3, #28]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f022 0204 	bic.w	r2, r2, #4
 8009444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	69d9      	ldr	r1, [r3, #28]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	691a      	ldr	r2, [r3, #16]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	430a      	orrs	r2, r1
 8009456:	61da      	str	r2, [r3, #28]
      break;
 8009458:	e064      	b.n	8009524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68b9      	ldr	r1, [r7, #8]
 8009460:	4618      	mov	r0, r3
 8009462:	f000 fc0f 	bl	8009c84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	69da      	ldr	r2, [r3, #28]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	69da      	ldr	r2, [r3, #28]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	69d9      	ldr	r1, [r3, #28]
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	691b      	ldr	r3, [r3, #16]
 8009490:	021a      	lsls	r2, r3, #8
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	430a      	orrs	r2, r1
 8009498:	61da      	str	r2, [r3, #28]
      break;
 800949a:	e043      	b.n	8009524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68b9      	ldr	r1, [r7, #8]
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 fc82 	bl	8009dac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f042 0208 	orr.w	r2, r2, #8
 80094b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f022 0204 	bic.w	r2, r2, #4
 80094c6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	691a      	ldr	r2, [r3, #16]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	430a      	orrs	r2, r1
 80094d8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80094da:	e023      	b.n	8009524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	68b9      	ldr	r1, [r7, #8]
 80094e2:	4618      	mov	r0, r3
 80094e4:	f000 fccc 	bl	8009e80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009506:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	021a      	lsls	r2, r3, #8
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	430a      	orrs	r2, r1
 800951a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800951c:	e002      	b.n	8009524 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	75fb      	strb	r3, [r7, #23]
      break;
 8009522:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800952c:	7dfb      	ldrb	r3, [r7, #23]
}
 800952e:	4618      	mov	r0, r3
 8009530:	3718      	adds	r7, #24
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop

08009538 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800954c:	2b01      	cmp	r3, #1
 800954e:	d101      	bne.n	8009554 <HAL_TIM_ConfigClockSource+0x1c>
 8009550:	2302      	movs	r3, #2
 8009552:	e0f6      	b.n	8009742 <HAL_TIM_ConfigClockSource+0x20a>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2202      	movs	r2, #2
 8009560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009572:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800957e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68ba      	ldr	r2, [r7, #8]
 8009586:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a6f      	ldr	r2, [pc, #444]	; (800974c <HAL_TIM_ConfigClockSource+0x214>)
 800958e:	4293      	cmp	r3, r2
 8009590:	f000 80c1 	beq.w	8009716 <HAL_TIM_ConfigClockSource+0x1de>
 8009594:	4a6d      	ldr	r2, [pc, #436]	; (800974c <HAL_TIM_ConfigClockSource+0x214>)
 8009596:	4293      	cmp	r3, r2
 8009598:	f200 80c6 	bhi.w	8009728 <HAL_TIM_ConfigClockSource+0x1f0>
 800959c:	4a6c      	ldr	r2, [pc, #432]	; (8009750 <HAL_TIM_ConfigClockSource+0x218>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	f000 80b9 	beq.w	8009716 <HAL_TIM_ConfigClockSource+0x1de>
 80095a4:	4a6a      	ldr	r2, [pc, #424]	; (8009750 <HAL_TIM_ConfigClockSource+0x218>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	f200 80be 	bhi.w	8009728 <HAL_TIM_ConfigClockSource+0x1f0>
 80095ac:	4a69      	ldr	r2, [pc, #420]	; (8009754 <HAL_TIM_ConfigClockSource+0x21c>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	f000 80b1 	beq.w	8009716 <HAL_TIM_ConfigClockSource+0x1de>
 80095b4:	4a67      	ldr	r2, [pc, #412]	; (8009754 <HAL_TIM_ConfigClockSource+0x21c>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	f200 80b6 	bhi.w	8009728 <HAL_TIM_ConfigClockSource+0x1f0>
 80095bc:	4a66      	ldr	r2, [pc, #408]	; (8009758 <HAL_TIM_ConfigClockSource+0x220>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	f000 80a9 	beq.w	8009716 <HAL_TIM_ConfigClockSource+0x1de>
 80095c4:	4a64      	ldr	r2, [pc, #400]	; (8009758 <HAL_TIM_ConfigClockSource+0x220>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	f200 80ae 	bhi.w	8009728 <HAL_TIM_ConfigClockSource+0x1f0>
 80095cc:	4a63      	ldr	r2, [pc, #396]	; (800975c <HAL_TIM_ConfigClockSource+0x224>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	f000 80a1 	beq.w	8009716 <HAL_TIM_ConfigClockSource+0x1de>
 80095d4:	4a61      	ldr	r2, [pc, #388]	; (800975c <HAL_TIM_ConfigClockSource+0x224>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	f200 80a6 	bhi.w	8009728 <HAL_TIM_ConfigClockSource+0x1f0>
 80095dc:	4a60      	ldr	r2, [pc, #384]	; (8009760 <HAL_TIM_ConfigClockSource+0x228>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	f000 8099 	beq.w	8009716 <HAL_TIM_ConfigClockSource+0x1de>
 80095e4:	4a5e      	ldr	r2, [pc, #376]	; (8009760 <HAL_TIM_ConfigClockSource+0x228>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	f200 809e 	bhi.w	8009728 <HAL_TIM_ConfigClockSource+0x1f0>
 80095ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80095f0:	f000 8091 	beq.w	8009716 <HAL_TIM_ConfigClockSource+0x1de>
 80095f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80095f8:	f200 8096 	bhi.w	8009728 <HAL_TIM_ConfigClockSource+0x1f0>
 80095fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009600:	f000 8089 	beq.w	8009716 <HAL_TIM_ConfigClockSource+0x1de>
 8009604:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009608:	f200 808e 	bhi.w	8009728 <HAL_TIM_ConfigClockSource+0x1f0>
 800960c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009610:	d03e      	beq.n	8009690 <HAL_TIM_ConfigClockSource+0x158>
 8009612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009616:	f200 8087 	bhi.w	8009728 <HAL_TIM_ConfigClockSource+0x1f0>
 800961a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800961e:	f000 8086 	beq.w	800972e <HAL_TIM_ConfigClockSource+0x1f6>
 8009622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009626:	d87f      	bhi.n	8009728 <HAL_TIM_ConfigClockSource+0x1f0>
 8009628:	2b70      	cmp	r3, #112	; 0x70
 800962a:	d01a      	beq.n	8009662 <HAL_TIM_ConfigClockSource+0x12a>
 800962c:	2b70      	cmp	r3, #112	; 0x70
 800962e:	d87b      	bhi.n	8009728 <HAL_TIM_ConfigClockSource+0x1f0>
 8009630:	2b60      	cmp	r3, #96	; 0x60
 8009632:	d050      	beq.n	80096d6 <HAL_TIM_ConfigClockSource+0x19e>
 8009634:	2b60      	cmp	r3, #96	; 0x60
 8009636:	d877      	bhi.n	8009728 <HAL_TIM_ConfigClockSource+0x1f0>
 8009638:	2b50      	cmp	r3, #80	; 0x50
 800963a:	d03c      	beq.n	80096b6 <HAL_TIM_ConfigClockSource+0x17e>
 800963c:	2b50      	cmp	r3, #80	; 0x50
 800963e:	d873      	bhi.n	8009728 <HAL_TIM_ConfigClockSource+0x1f0>
 8009640:	2b40      	cmp	r3, #64	; 0x40
 8009642:	d058      	beq.n	80096f6 <HAL_TIM_ConfigClockSource+0x1be>
 8009644:	2b40      	cmp	r3, #64	; 0x40
 8009646:	d86f      	bhi.n	8009728 <HAL_TIM_ConfigClockSource+0x1f0>
 8009648:	2b30      	cmp	r3, #48	; 0x30
 800964a:	d064      	beq.n	8009716 <HAL_TIM_ConfigClockSource+0x1de>
 800964c:	2b30      	cmp	r3, #48	; 0x30
 800964e:	d86b      	bhi.n	8009728 <HAL_TIM_ConfigClockSource+0x1f0>
 8009650:	2b20      	cmp	r3, #32
 8009652:	d060      	beq.n	8009716 <HAL_TIM_ConfigClockSource+0x1de>
 8009654:	2b20      	cmp	r3, #32
 8009656:	d867      	bhi.n	8009728 <HAL_TIM_ConfigClockSource+0x1f0>
 8009658:	2b00      	cmp	r3, #0
 800965a:	d05c      	beq.n	8009716 <HAL_TIM_ConfigClockSource+0x1de>
 800965c:	2b10      	cmp	r3, #16
 800965e:	d05a      	beq.n	8009716 <HAL_TIM_ConfigClockSource+0x1de>
 8009660:	e062      	b.n	8009728 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6818      	ldr	r0, [r3, #0]
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	6899      	ldr	r1, [r3, #8]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	685a      	ldr	r2, [r3, #4]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	f000 fe17 	bl	800a2a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009684:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	68ba      	ldr	r2, [r7, #8]
 800968c:	609a      	str	r2, [r3, #8]
      break;
 800968e:	e04f      	b.n	8009730 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6818      	ldr	r0, [r3, #0]
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	6899      	ldr	r1, [r3, #8]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	f000 fe00 	bl	800a2a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	689a      	ldr	r2, [r3, #8]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096b2:	609a      	str	r2, [r3, #8]
      break;
 80096b4:	e03c      	b.n	8009730 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6818      	ldr	r0, [r3, #0]
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	6859      	ldr	r1, [r3, #4]
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	461a      	mov	r2, r3
 80096c4:	f000 fcbc 	bl	800a040 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2150      	movs	r1, #80	; 0x50
 80096ce:	4618      	mov	r0, r3
 80096d0:	f000 fdcb 	bl	800a26a <TIM_ITRx_SetConfig>
      break;
 80096d4:	e02c      	b.n	8009730 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6818      	ldr	r0, [r3, #0]
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	6859      	ldr	r1, [r3, #4]
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	461a      	mov	r2, r3
 80096e4:	f000 fd18 	bl	800a118 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2160      	movs	r1, #96	; 0x60
 80096ee:	4618      	mov	r0, r3
 80096f0:	f000 fdbb 	bl	800a26a <TIM_ITRx_SetConfig>
      break;
 80096f4:	e01c      	b.n	8009730 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6818      	ldr	r0, [r3, #0]
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	6859      	ldr	r1, [r3, #4]
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	461a      	mov	r2, r3
 8009704:	f000 fc9c 	bl	800a040 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2140      	movs	r1, #64	; 0x40
 800970e:	4618      	mov	r0, r3
 8009710:	f000 fdab 	bl	800a26a <TIM_ITRx_SetConfig>
      break;
 8009714:	e00c      	b.n	8009730 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4619      	mov	r1, r3
 8009720:	4610      	mov	r0, r2
 8009722:	f000 fda2 	bl	800a26a <TIM_ITRx_SetConfig>
      break;
 8009726:	e003      	b.n	8009730 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	73fb      	strb	r3, [r7, #15]
      break;
 800972c:	e000      	b.n	8009730 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800972e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009740:	7bfb      	ldrb	r3, [r7, #15]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	00100070 	.word	0x00100070
 8009750:	00100060 	.word	0x00100060
 8009754:	00100050 	.word	0x00100050
 8009758:	00100040 	.word	0x00100040
 800975c:	00100030 	.word	0x00100030
 8009760:	00100020 	.word	0x00100020

08009764 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800976c:	bf00      	nop
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009780:	bf00      	nop
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009794:	bf00      	nop
 8009796:	370c      	adds	r7, #12
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr

080097a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097a8:	bf00      	nop
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4a46      	ldr	r2, [pc, #280]	; (80098e0 <TIM_Base_SetConfig+0x12c>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d017      	beq.n	80097fc <TIM_Base_SetConfig+0x48>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097d2:	d013      	beq.n	80097fc <TIM_Base_SetConfig+0x48>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a43      	ldr	r2, [pc, #268]	; (80098e4 <TIM_Base_SetConfig+0x130>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d00f      	beq.n	80097fc <TIM_Base_SetConfig+0x48>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4a42      	ldr	r2, [pc, #264]	; (80098e8 <TIM_Base_SetConfig+0x134>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d00b      	beq.n	80097fc <TIM_Base_SetConfig+0x48>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4a41      	ldr	r2, [pc, #260]	; (80098ec <TIM_Base_SetConfig+0x138>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d007      	beq.n	80097fc <TIM_Base_SetConfig+0x48>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a40      	ldr	r2, [pc, #256]	; (80098f0 <TIM_Base_SetConfig+0x13c>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d003      	beq.n	80097fc <TIM_Base_SetConfig+0x48>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a3f      	ldr	r2, [pc, #252]	; (80098f4 <TIM_Base_SetConfig+0x140>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d108      	bne.n	800980e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	68fa      	ldr	r2, [r7, #12]
 800980a:	4313      	orrs	r3, r2
 800980c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	4a33      	ldr	r2, [pc, #204]	; (80098e0 <TIM_Base_SetConfig+0x12c>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d023      	beq.n	800985e <TIM_Base_SetConfig+0xaa>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800981c:	d01f      	beq.n	800985e <TIM_Base_SetConfig+0xaa>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	4a30      	ldr	r2, [pc, #192]	; (80098e4 <TIM_Base_SetConfig+0x130>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d01b      	beq.n	800985e <TIM_Base_SetConfig+0xaa>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	4a2f      	ldr	r2, [pc, #188]	; (80098e8 <TIM_Base_SetConfig+0x134>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d017      	beq.n	800985e <TIM_Base_SetConfig+0xaa>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4a2e      	ldr	r2, [pc, #184]	; (80098ec <TIM_Base_SetConfig+0x138>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d013      	beq.n	800985e <TIM_Base_SetConfig+0xaa>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a2d      	ldr	r2, [pc, #180]	; (80098f0 <TIM_Base_SetConfig+0x13c>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d00f      	beq.n	800985e <TIM_Base_SetConfig+0xaa>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a2d      	ldr	r2, [pc, #180]	; (80098f8 <TIM_Base_SetConfig+0x144>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d00b      	beq.n	800985e <TIM_Base_SetConfig+0xaa>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a2c      	ldr	r2, [pc, #176]	; (80098fc <TIM_Base_SetConfig+0x148>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d007      	beq.n	800985e <TIM_Base_SetConfig+0xaa>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a2b      	ldr	r2, [pc, #172]	; (8009900 <TIM_Base_SetConfig+0x14c>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d003      	beq.n	800985e <TIM_Base_SetConfig+0xaa>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a26      	ldr	r2, [pc, #152]	; (80098f4 <TIM_Base_SetConfig+0x140>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d108      	bne.n	8009870 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	4313      	orrs	r3, r2
 800986e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	695b      	ldr	r3, [r3, #20]
 800987a:	4313      	orrs	r3, r2
 800987c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	689a      	ldr	r2, [r3, #8]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	4a12      	ldr	r2, [pc, #72]	; (80098e0 <TIM_Base_SetConfig+0x12c>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d013      	beq.n	80098c4 <TIM_Base_SetConfig+0x110>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a14      	ldr	r2, [pc, #80]	; (80098f0 <TIM_Base_SetConfig+0x13c>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d00f      	beq.n	80098c4 <TIM_Base_SetConfig+0x110>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4a14      	ldr	r2, [pc, #80]	; (80098f8 <TIM_Base_SetConfig+0x144>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d00b      	beq.n	80098c4 <TIM_Base_SetConfig+0x110>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	4a13      	ldr	r2, [pc, #76]	; (80098fc <TIM_Base_SetConfig+0x148>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d007      	beq.n	80098c4 <TIM_Base_SetConfig+0x110>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a12      	ldr	r2, [pc, #72]	; (8009900 <TIM_Base_SetConfig+0x14c>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d003      	beq.n	80098c4 <TIM_Base_SetConfig+0x110>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a0d      	ldr	r2, [pc, #52]	; (80098f4 <TIM_Base_SetConfig+0x140>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d103      	bne.n	80098cc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	691a      	ldr	r2, [r3, #16]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	615a      	str	r2, [r3, #20]
}
 80098d2:	bf00      	nop
 80098d4:	3714      	adds	r7, #20
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	40012c00 	.word	0x40012c00
 80098e4:	40000400 	.word	0x40000400
 80098e8:	40000800 	.word	0x40000800
 80098ec:	40000c00 	.word	0x40000c00
 80098f0:	40013400 	.word	0x40013400
 80098f4:	40015000 	.word	0x40015000
 80098f8:	40014000 	.word	0x40014000
 80098fc:	40014400 	.word	0x40014400
 8009900:	40014800 	.word	0x40014800

08009904 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009904:	b480      	push	{r7}
 8009906:	b087      	sub	sp, #28
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	f023 0201 	bic.w	r2, r3, #1
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a1b      	ldr	r3, [r3, #32]
 800991e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f023 0303 	bic.w	r3, r3, #3
 800993e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	4313      	orrs	r3, r2
 8009948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	f023 0302 	bic.w	r3, r3, #2
 8009950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	697a      	ldr	r2, [r7, #20]
 8009958:	4313      	orrs	r3, r2
 800995a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4a30      	ldr	r2, [pc, #192]	; (8009a20 <TIM_OC1_SetConfig+0x11c>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d013      	beq.n	800998c <TIM_OC1_SetConfig+0x88>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a2f      	ldr	r2, [pc, #188]	; (8009a24 <TIM_OC1_SetConfig+0x120>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d00f      	beq.n	800998c <TIM_OC1_SetConfig+0x88>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a2e      	ldr	r2, [pc, #184]	; (8009a28 <TIM_OC1_SetConfig+0x124>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d00b      	beq.n	800998c <TIM_OC1_SetConfig+0x88>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a2d      	ldr	r2, [pc, #180]	; (8009a2c <TIM_OC1_SetConfig+0x128>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d007      	beq.n	800998c <TIM_OC1_SetConfig+0x88>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4a2c      	ldr	r2, [pc, #176]	; (8009a30 <TIM_OC1_SetConfig+0x12c>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d003      	beq.n	800998c <TIM_OC1_SetConfig+0x88>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4a2b      	ldr	r2, [pc, #172]	; (8009a34 <TIM_OC1_SetConfig+0x130>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d10c      	bne.n	80099a6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	f023 0308 	bic.w	r3, r3, #8
 8009992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	697a      	ldr	r2, [r7, #20]
 800999a:	4313      	orrs	r3, r2
 800999c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f023 0304 	bic.w	r3, r3, #4
 80099a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4a1d      	ldr	r2, [pc, #116]	; (8009a20 <TIM_OC1_SetConfig+0x11c>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d013      	beq.n	80099d6 <TIM_OC1_SetConfig+0xd2>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4a1c      	ldr	r2, [pc, #112]	; (8009a24 <TIM_OC1_SetConfig+0x120>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d00f      	beq.n	80099d6 <TIM_OC1_SetConfig+0xd2>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	4a1b      	ldr	r2, [pc, #108]	; (8009a28 <TIM_OC1_SetConfig+0x124>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d00b      	beq.n	80099d6 <TIM_OC1_SetConfig+0xd2>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	4a1a      	ldr	r2, [pc, #104]	; (8009a2c <TIM_OC1_SetConfig+0x128>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d007      	beq.n	80099d6 <TIM_OC1_SetConfig+0xd2>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	4a19      	ldr	r2, [pc, #100]	; (8009a30 <TIM_OC1_SetConfig+0x12c>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d003      	beq.n	80099d6 <TIM_OC1_SetConfig+0xd2>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4a18      	ldr	r2, [pc, #96]	; (8009a34 <TIM_OC1_SetConfig+0x130>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d111      	bne.n	80099fa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	695b      	ldr	r3, [r3, #20]
 80099ea:	693a      	ldr	r2, [r7, #16]
 80099ec:	4313      	orrs	r3, r2
 80099ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	693a      	ldr	r2, [r7, #16]
 80099f6:	4313      	orrs	r3, r2
 80099f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	693a      	ldr	r2, [r7, #16]
 80099fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	685a      	ldr	r2, [r3, #4]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	697a      	ldr	r2, [r7, #20]
 8009a12:	621a      	str	r2, [r3, #32]
}
 8009a14:	bf00      	nop
 8009a16:	371c      	adds	r7, #28
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr
 8009a20:	40012c00 	.word	0x40012c00
 8009a24:	40013400 	.word	0x40013400
 8009a28:	40014000 	.word	0x40014000
 8009a2c:	40014400 	.word	0x40014400
 8009a30:	40014800 	.word	0x40014800
 8009a34:	40015000 	.word	0x40015000

08009a38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b087      	sub	sp, #28
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a1b      	ldr	r3, [r3, #32]
 8009a46:	f023 0210 	bic.w	r2, r3, #16
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a1b      	ldr	r3, [r3, #32]
 8009a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	699b      	ldr	r3, [r3, #24]
 8009a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	021b      	lsls	r3, r3, #8
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	f023 0320 	bic.w	r3, r3, #32
 8009a86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	011b      	lsls	r3, r3, #4
 8009a8e:	697a      	ldr	r2, [r7, #20]
 8009a90:	4313      	orrs	r3, r2
 8009a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a2c      	ldr	r2, [pc, #176]	; (8009b48 <TIM_OC2_SetConfig+0x110>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d007      	beq.n	8009aac <TIM_OC2_SetConfig+0x74>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a2b      	ldr	r2, [pc, #172]	; (8009b4c <TIM_OC2_SetConfig+0x114>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d003      	beq.n	8009aac <TIM_OC2_SetConfig+0x74>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a2a      	ldr	r2, [pc, #168]	; (8009b50 <TIM_OC2_SetConfig+0x118>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d10d      	bne.n	8009ac8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	011b      	lsls	r3, r3, #4
 8009aba:	697a      	ldr	r2, [r7, #20]
 8009abc:	4313      	orrs	r3, r2
 8009abe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ac6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a1f      	ldr	r2, [pc, #124]	; (8009b48 <TIM_OC2_SetConfig+0x110>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d013      	beq.n	8009af8 <TIM_OC2_SetConfig+0xc0>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4a1e      	ldr	r2, [pc, #120]	; (8009b4c <TIM_OC2_SetConfig+0x114>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d00f      	beq.n	8009af8 <TIM_OC2_SetConfig+0xc0>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	4a1e      	ldr	r2, [pc, #120]	; (8009b54 <TIM_OC2_SetConfig+0x11c>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d00b      	beq.n	8009af8 <TIM_OC2_SetConfig+0xc0>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a1d      	ldr	r2, [pc, #116]	; (8009b58 <TIM_OC2_SetConfig+0x120>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d007      	beq.n	8009af8 <TIM_OC2_SetConfig+0xc0>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4a1c      	ldr	r2, [pc, #112]	; (8009b5c <TIM_OC2_SetConfig+0x124>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d003      	beq.n	8009af8 <TIM_OC2_SetConfig+0xc0>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	4a17      	ldr	r2, [pc, #92]	; (8009b50 <TIM_OC2_SetConfig+0x118>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d113      	bne.n	8009b20 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009afe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	695b      	ldr	r3, [r3, #20]
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	693a      	ldr	r2, [r7, #16]
 8009b10:	4313      	orrs	r3, r2
 8009b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	699b      	ldr	r3, [r3, #24]
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	693a      	ldr	r2, [r7, #16]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	693a      	ldr	r2, [r7, #16]
 8009b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	685a      	ldr	r2, [r3, #4]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	621a      	str	r2, [r3, #32]
}
 8009b3a:	bf00      	nop
 8009b3c:	371c      	adds	r7, #28
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	40012c00 	.word	0x40012c00
 8009b4c:	40013400 	.word	0x40013400
 8009b50:	40015000 	.word	0x40015000
 8009b54:	40014000 	.word	0x40014000
 8009b58:	40014400 	.word	0x40014400
 8009b5c:	40014800 	.word	0x40014800

08009b60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b087      	sub	sp, #28
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	69db      	ldr	r3, [r3, #28]
 8009b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 0303 	bic.w	r3, r3, #3
 8009b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	021b      	lsls	r3, r3, #8
 8009bb4:	697a      	ldr	r2, [r7, #20]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a2b      	ldr	r2, [pc, #172]	; (8009c6c <TIM_OC3_SetConfig+0x10c>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d007      	beq.n	8009bd2 <TIM_OC3_SetConfig+0x72>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a2a      	ldr	r2, [pc, #168]	; (8009c70 <TIM_OC3_SetConfig+0x110>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d003      	beq.n	8009bd2 <TIM_OC3_SetConfig+0x72>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a29      	ldr	r2, [pc, #164]	; (8009c74 <TIM_OC3_SetConfig+0x114>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d10d      	bne.n	8009bee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	021b      	lsls	r3, r3, #8
 8009be0:	697a      	ldr	r2, [r7, #20]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4a1e      	ldr	r2, [pc, #120]	; (8009c6c <TIM_OC3_SetConfig+0x10c>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d013      	beq.n	8009c1e <TIM_OC3_SetConfig+0xbe>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4a1d      	ldr	r2, [pc, #116]	; (8009c70 <TIM_OC3_SetConfig+0x110>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d00f      	beq.n	8009c1e <TIM_OC3_SetConfig+0xbe>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4a1d      	ldr	r2, [pc, #116]	; (8009c78 <TIM_OC3_SetConfig+0x118>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d00b      	beq.n	8009c1e <TIM_OC3_SetConfig+0xbe>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4a1c      	ldr	r2, [pc, #112]	; (8009c7c <TIM_OC3_SetConfig+0x11c>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d007      	beq.n	8009c1e <TIM_OC3_SetConfig+0xbe>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4a1b      	ldr	r2, [pc, #108]	; (8009c80 <TIM_OC3_SetConfig+0x120>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d003      	beq.n	8009c1e <TIM_OC3_SetConfig+0xbe>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	4a16      	ldr	r2, [pc, #88]	; (8009c74 <TIM_OC3_SetConfig+0x114>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d113      	bne.n	8009c46 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	695b      	ldr	r3, [r3, #20]
 8009c32:	011b      	lsls	r3, r3, #4
 8009c34:	693a      	ldr	r2, [r7, #16]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	699b      	ldr	r3, [r3, #24]
 8009c3e:	011b      	lsls	r3, r3, #4
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	693a      	ldr	r2, [r7, #16]
 8009c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	621a      	str	r2, [r3, #32]
}
 8009c60:	bf00      	nop
 8009c62:	371c      	adds	r7, #28
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr
 8009c6c:	40012c00 	.word	0x40012c00
 8009c70:	40013400 	.word	0x40013400
 8009c74:	40015000 	.word	0x40015000
 8009c78:	40014000 	.word	0x40014000
 8009c7c:	40014400 	.word	0x40014400
 8009c80:	40014800 	.word	0x40014800

08009c84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b087      	sub	sp, #28
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a1b      	ldr	r3, [r3, #32]
 8009c92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a1b      	ldr	r3, [r3, #32]
 8009c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	69db      	ldr	r3, [r3, #28]
 8009caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	021b      	lsls	r3, r3, #8
 8009cc6:	68fa      	ldr	r2, [r7, #12]
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	031b      	lsls	r3, r3, #12
 8009cda:	697a      	ldr	r2, [r7, #20]
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a2c      	ldr	r2, [pc, #176]	; (8009d94 <TIM_OC4_SetConfig+0x110>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d007      	beq.n	8009cf8 <TIM_OC4_SetConfig+0x74>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a2b      	ldr	r2, [pc, #172]	; (8009d98 <TIM_OC4_SetConfig+0x114>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d003      	beq.n	8009cf8 <TIM_OC4_SetConfig+0x74>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4a2a      	ldr	r2, [pc, #168]	; (8009d9c <TIM_OC4_SetConfig+0x118>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d10d      	bne.n	8009d14 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	031b      	lsls	r3, r3, #12
 8009d06:	697a      	ldr	r2, [r7, #20]
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a1f      	ldr	r2, [pc, #124]	; (8009d94 <TIM_OC4_SetConfig+0x110>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d013      	beq.n	8009d44 <TIM_OC4_SetConfig+0xc0>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a1e      	ldr	r2, [pc, #120]	; (8009d98 <TIM_OC4_SetConfig+0x114>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d00f      	beq.n	8009d44 <TIM_OC4_SetConfig+0xc0>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a1e      	ldr	r2, [pc, #120]	; (8009da0 <TIM_OC4_SetConfig+0x11c>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d00b      	beq.n	8009d44 <TIM_OC4_SetConfig+0xc0>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a1d      	ldr	r2, [pc, #116]	; (8009da4 <TIM_OC4_SetConfig+0x120>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d007      	beq.n	8009d44 <TIM_OC4_SetConfig+0xc0>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a1c      	ldr	r2, [pc, #112]	; (8009da8 <TIM_OC4_SetConfig+0x124>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d003      	beq.n	8009d44 <TIM_OC4_SetConfig+0xc0>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a17      	ldr	r2, [pc, #92]	; (8009d9c <TIM_OC4_SetConfig+0x118>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d113      	bne.n	8009d6c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d4a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d52:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	695b      	ldr	r3, [r3, #20]
 8009d58:	019b      	lsls	r3, r3, #6
 8009d5a:	693a      	ldr	r2, [r7, #16]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	699b      	ldr	r3, [r3, #24]
 8009d64:	019b      	lsls	r3, r3, #6
 8009d66:	693a      	ldr	r2, [r7, #16]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	693a      	ldr	r2, [r7, #16]
 8009d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	685a      	ldr	r2, [r3, #4]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	697a      	ldr	r2, [r7, #20]
 8009d84:	621a      	str	r2, [r3, #32]
}
 8009d86:	bf00      	nop
 8009d88:	371c      	adds	r7, #28
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	40012c00 	.word	0x40012c00
 8009d98:	40013400 	.word	0x40013400
 8009d9c:	40015000 	.word	0x40015000
 8009da0:	40014000 	.word	0x40014000
 8009da4:	40014400 	.word	0x40014400
 8009da8:	40014800 	.word	0x40014800

08009dac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b087      	sub	sp, #28
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a1b      	ldr	r3, [r3, #32]
 8009dc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	68fa      	ldr	r2, [r7, #12]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009df0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	041b      	lsls	r3, r3, #16
 8009df8:	693a      	ldr	r2, [r7, #16]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4a19      	ldr	r2, [pc, #100]	; (8009e68 <TIM_OC5_SetConfig+0xbc>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d013      	beq.n	8009e2e <TIM_OC5_SetConfig+0x82>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4a18      	ldr	r2, [pc, #96]	; (8009e6c <TIM_OC5_SetConfig+0xc0>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d00f      	beq.n	8009e2e <TIM_OC5_SetConfig+0x82>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	4a17      	ldr	r2, [pc, #92]	; (8009e70 <TIM_OC5_SetConfig+0xc4>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d00b      	beq.n	8009e2e <TIM_OC5_SetConfig+0x82>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	4a16      	ldr	r2, [pc, #88]	; (8009e74 <TIM_OC5_SetConfig+0xc8>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d007      	beq.n	8009e2e <TIM_OC5_SetConfig+0x82>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4a15      	ldr	r2, [pc, #84]	; (8009e78 <TIM_OC5_SetConfig+0xcc>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d003      	beq.n	8009e2e <TIM_OC5_SetConfig+0x82>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	4a14      	ldr	r2, [pc, #80]	; (8009e7c <TIM_OC5_SetConfig+0xd0>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d109      	bne.n	8009e42 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	021b      	lsls	r3, r3, #8
 8009e3c:	697a      	ldr	r2, [r7, #20]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	697a      	ldr	r2, [r7, #20]
 8009e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	685a      	ldr	r2, [r3, #4]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	693a      	ldr	r2, [r7, #16]
 8009e5a:	621a      	str	r2, [r3, #32]
}
 8009e5c:	bf00      	nop
 8009e5e:	371c      	adds	r7, #28
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr
 8009e68:	40012c00 	.word	0x40012c00
 8009e6c:	40013400 	.word	0x40013400
 8009e70:	40014000 	.word	0x40014000
 8009e74:	40014400 	.word	0x40014400
 8009e78:	40014800 	.word	0x40014800
 8009e7c:	40015000 	.word	0x40015000

08009e80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b087      	sub	sp, #28
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a1b      	ldr	r3, [r3, #32]
 8009e8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a1b      	ldr	r3, [r3, #32]
 8009e9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	021b      	lsls	r3, r3, #8
 8009eba:	68fa      	ldr	r2, [r7, #12]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	051b      	lsls	r3, r3, #20
 8009ece:	693a      	ldr	r2, [r7, #16]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a1a      	ldr	r2, [pc, #104]	; (8009f40 <TIM_OC6_SetConfig+0xc0>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d013      	beq.n	8009f04 <TIM_OC6_SetConfig+0x84>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a19      	ldr	r2, [pc, #100]	; (8009f44 <TIM_OC6_SetConfig+0xc4>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d00f      	beq.n	8009f04 <TIM_OC6_SetConfig+0x84>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a18      	ldr	r2, [pc, #96]	; (8009f48 <TIM_OC6_SetConfig+0xc8>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d00b      	beq.n	8009f04 <TIM_OC6_SetConfig+0x84>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a17      	ldr	r2, [pc, #92]	; (8009f4c <TIM_OC6_SetConfig+0xcc>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d007      	beq.n	8009f04 <TIM_OC6_SetConfig+0x84>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a16      	ldr	r2, [pc, #88]	; (8009f50 <TIM_OC6_SetConfig+0xd0>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d003      	beq.n	8009f04 <TIM_OC6_SetConfig+0x84>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	4a15      	ldr	r2, [pc, #84]	; (8009f54 <TIM_OC6_SetConfig+0xd4>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d109      	bne.n	8009f18 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	695b      	ldr	r3, [r3, #20]
 8009f10:	029b      	lsls	r3, r3, #10
 8009f12:	697a      	ldr	r2, [r7, #20]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	697a      	ldr	r2, [r7, #20]
 8009f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	685a      	ldr	r2, [r3, #4]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	693a      	ldr	r2, [r7, #16]
 8009f30:	621a      	str	r2, [r3, #32]
}
 8009f32:	bf00      	nop
 8009f34:	371c      	adds	r7, #28
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	40012c00 	.word	0x40012c00
 8009f44:	40013400 	.word	0x40013400
 8009f48:	40014000 	.word	0x40014000
 8009f4c:	40014400 	.word	0x40014400
 8009f50:	40014800 	.word	0x40014800
 8009f54:	40015000 	.word	0x40015000

08009f58 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b087      	sub	sp, #28
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	607a      	str	r2, [r7, #4]
 8009f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	6a1b      	ldr	r3, [r3, #32]
 8009f6a:	f023 0201 	bic.w	r2, r3, #1
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	699b      	ldr	r3, [r3, #24]
 8009f76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6a1b      	ldr	r3, [r3, #32]
 8009f7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	4a28      	ldr	r2, [pc, #160]	; (800a024 <TIM_TI1_SetConfig+0xcc>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d01b      	beq.n	8009fbe <TIM_TI1_SetConfig+0x66>
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f8c:	d017      	beq.n	8009fbe <TIM_TI1_SetConfig+0x66>
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	4a25      	ldr	r2, [pc, #148]	; (800a028 <TIM_TI1_SetConfig+0xd0>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d013      	beq.n	8009fbe <TIM_TI1_SetConfig+0x66>
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	4a24      	ldr	r2, [pc, #144]	; (800a02c <TIM_TI1_SetConfig+0xd4>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d00f      	beq.n	8009fbe <TIM_TI1_SetConfig+0x66>
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	4a23      	ldr	r2, [pc, #140]	; (800a030 <TIM_TI1_SetConfig+0xd8>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d00b      	beq.n	8009fbe <TIM_TI1_SetConfig+0x66>
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	4a22      	ldr	r2, [pc, #136]	; (800a034 <TIM_TI1_SetConfig+0xdc>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d007      	beq.n	8009fbe <TIM_TI1_SetConfig+0x66>
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	4a21      	ldr	r2, [pc, #132]	; (800a038 <TIM_TI1_SetConfig+0xe0>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d003      	beq.n	8009fbe <TIM_TI1_SetConfig+0x66>
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	4a20      	ldr	r2, [pc, #128]	; (800a03c <TIM_TI1_SetConfig+0xe4>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d101      	bne.n	8009fc2 <TIM_TI1_SetConfig+0x6a>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e000      	b.n	8009fc4 <TIM_TI1_SetConfig+0x6c>
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d008      	beq.n	8009fda <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	f023 0303 	bic.w	r3, r3, #3
 8009fce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009fd0:	697a      	ldr	r2, [r7, #20]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	617b      	str	r3, [r7, #20]
 8009fd8:	e003      	b.n	8009fe2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	f043 0301 	orr.w	r3, r3, #1
 8009fe0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009fe8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	011b      	lsls	r3, r3, #4
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	697a      	ldr	r2, [r7, #20]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	f023 030a 	bic.w	r3, r3, #10
 8009ffc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	f003 030a 	and.w	r3, r3, #10
 800a004:	693a      	ldr	r2, [r7, #16]
 800a006:	4313      	orrs	r3, r2
 800a008:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	697a      	ldr	r2, [r7, #20]
 800a00e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	693a      	ldr	r2, [r7, #16]
 800a014:	621a      	str	r2, [r3, #32]
}
 800a016:	bf00      	nop
 800a018:	371c      	adds	r7, #28
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	40012c00 	.word	0x40012c00
 800a028:	40000400 	.word	0x40000400
 800a02c:	40000800 	.word	0x40000800
 800a030:	40000c00 	.word	0x40000c00
 800a034:	40013400 	.word	0x40013400
 800a038:	40014000 	.word	0x40014000
 800a03c:	40015000 	.word	0x40015000

0800a040 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a040:	b480      	push	{r7}
 800a042:	b087      	sub	sp, #28
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6a1b      	ldr	r3, [r3, #32]
 800a050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	f023 0201 	bic.w	r2, r3, #1
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	699b      	ldr	r3, [r3, #24]
 800a062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a06a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	011b      	lsls	r3, r3, #4
 800a070:	693a      	ldr	r2, [r7, #16]
 800a072:	4313      	orrs	r3, r2
 800a074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	f023 030a 	bic.w	r3, r3, #10
 800a07c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a07e:	697a      	ldr	r2, [r7, #20]
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	4313      	orrs	r3, r2
 800a084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	697a      	ldr	r2, [r7, #20]
 800a090:	621a      	str	r2, [r3, #32]
}
 800a092:	bf00      	nop
 800a094:	371c      	adds	r7, #28
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a09e:	b480      	push	{r7}
 800a0a0:	b087      	sub	sp, #28
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	60f8      	str	r0, [r7, #12]
 800a0a6:	60b9      	str	r1, [r7, #8]
 800a0a8:	607a      	str	r2, [r7, #4]
 800a0aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6a1b      	ldr	r3, [r3, #32]
 800a0b0:	f023 0210 	bic.w	r2, r3, #16
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	699b      	ldr	r3, [r3, #24]
 800a0bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	6a1b      	ldr	r3, [r3, #32]
 800a0c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	021b      	lsls	r3, r3, #8
 800a0d0:	697a      	ldr	r2, [r7, #20]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a0dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	031b      	lsls	r3, r3, #12
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	697a      	ldr	r2, [r7, #20]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a0f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	011b      	lsls	r3, r3, #4
 800a0f6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a0fa:	693a      	ldr	r2, [r7, #16]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	697a      	ldr	r2, [r7, #20]
 800a104:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	693a      	ldr	r2, [r7, #16]
 800a10a:	621a      	str	r2, [r3, #32]
}
 800a10c:	bf00      	nop
 800a10e:	371c      	adds	r7, #28
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a118:	b480      	push	{r7}
 800a11a:	b087      	sub	sp, #28
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6a1b      	ldr	r3, [r3, #32]
 800a128:	f023 0210 	bic.w	r2, r3, #16
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	699b      	ldr	r3, [r3, #24]
 800a134:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6a1b      	ldr	r3, [r3, #32]
 800a13a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a142:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	031b      	lsls	r3, r3, #12
 800a148:	697a      	ldr	r2, [r7, #20]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a154:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	011b      	lsls	r3, r3, #4
 800a15a:	693a      	ldr	r2, [r7, #16]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	693a      	ldr	r2, [r7, #16]
 800a16a:	621a      	str	r2, [r3, #32]
}
 800a16c:	bf00      	nop
 800a16e:	371c      	adds	r7, #28
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a178:	b480      	push	{r7}
 800a17a:	b087      	sub	sp, #28
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	607a      	str	r2, [r7, #4]
 800a184:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	6a1b      	ldr	r3, [r3, #32]
 800a18a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	69db      	ldr	r3, [r3, #28]
 800a196:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6a1b      	ldr	r3, [r3, #32]
 800a19c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	f023 0303 	bic.w	r3, r3, #3
 800a1a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a1a6:	697a      	ldr	r2, [r7, #20]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	011b      	lsls	r3, r3, #4
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	697a      	ldr	r2, [r7, #20]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a1c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	021b      	lsls	r3, r3, #8
 800a1ce:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a1d2:	693a      	ldr	r2, [r7, #16]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	693a      	ldr	r2, [r7, #16]
 800a1e2:	621a      	str	r2, [r3, #32]
}
 800a1e4:	bf00      	nop
 800a1e6:	371c      	adds	r7, #28
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b087      	sub	sp, #28
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	607a      	str	r2, [r7, #4]
 800a1fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	6a1b      	ldr	r3, [r3, #32]
 800a202:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	69db      	ldr	r3, [r3, #28]
 800a20e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6a1b      	ldr	r3, [r3, #32]
 800a214:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a21c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	021b      	lsls	r3, r3, #8
 800a222:	697a      	ldr	r2, [r7, #20]
 800a224:	4313      	orrs	r3, r2
 800a226:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a22e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	031b      	lsls	r3, r3, #12
 800a234:	b29b      	uxth	r3, r3
 800a236:	697a      	ldr	r2, [r7, #20]
 800a238:	4313      	orrs	r3, r2
 800a23a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a242:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	031b      	lsls	r3, r3, #12
 800a248:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a24c:	693a      	ldr	r2, [r7, #16]
 800a24e:	4313      	orrs	r3, r2
 800a250:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	697a      	ldr	r2, [r7, #20]
 800a256:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	693a      	ldr	r2, [r7, #16]
 800a25c:	621a      	str	r2, [r3, #32]
}
 800a25e:	bf00      	nop
 800a260:	371c      	adds	r7, #28
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr

0800a26a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a26a:	b480      	push	{r7}
 800a26c:	b085      	sub	sp, #20
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
 800a272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a284:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a286:	683a      	ldr	r2, [r7, #0]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	f043 0307 	orr.w	r3, r3, #7
 800a290:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	609a      	str	r2, [r3, #8]
}
 800a298:	bf00      	nop
 800a29a:	3714      	adds	r7, #20
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b087      	sub	sp, #28
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	607a      	str	r2, [r7, #4]
 800a2b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a2be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	021a      	lsls	r2, r3, #8
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	431a      	orrs	r2, r3
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	697a      	ldr	r2, [r7, #20]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	697a      	ldr	r2, [r7, #20]
 800a2d6:	609a      	str	r2, [r3, #8]
}
 800a2d8:	bf00      	nop
 800a2da:	371c      	adds	r7, #28
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b087      	sub	sp, #28
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	f003 031f 	and.w	r3, r3, #31
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6a1a      	ldr	r2, [r3, #32]
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	43db      	mvns	r3, r3
 800a306:	401a      	ands	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6a1a      	ldr	r2, [r3, #32]
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	f003 031f 	and.w	r3, r3, #31
 800a316:	6879      	ldr	r1, [r7, #4]
 800a318:	fa01 f303 	lsl.w	r3, r1, r3
 800a31c:	431a      	orrs	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	621a      	str	r2, [r3, #32]
}
 800a322:	bf00      	nop
 800a324:	371c      	adds	r7, #28
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b08a      	sub	sp, #40	; 0x28
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d101      	bne.n	800a342 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800a33e:	2301      	movs	r3, #1
 800a340:	e0a0      	b.n	800a484 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d106      	bne.n	800a35c <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 f898 	bl	800a48c <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2202      	movs	r2, #2
 800a360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	3304      	adds	r3, #4
 800a36c:	4619      	mov	r1, r3
 800a36e:	4610      	mov	r0, r2
 800a370:	f7ff fa20 	bl	80097b4 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6818      	ldr	r0, [r3, #0]
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	6819      	ldr	r1, [r3, #0]
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	689b      	ldr	r3, [r3, #8]
 800a380:	2203      	movs	r2, #3
 800a382:	f7ff fde9 	bl	8009f58 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	699a      	ldr	r2, [r3, #24]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f022 020c 	bic.w	r2, r2, #12
 800a394:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	6999      	ldr	r1, [r3, #24]
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	685a      	ldr	r2, [r3, #4]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	430a      	orrs	r2, r1
 800a3a6:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	685a      	ldr	r2, [r3, #4]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a3b6:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	6812      	ldr	r2, [r2, #0]
 800a3c2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a3c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3ca:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	689a      	ldr	r2, [r3, #8]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3da:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	6812      	ldr	r2, [r2, #0]
 800a3e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3ea:	f023 0307 	bic.w	r3, r3, #7
 800a3ee:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	689a      	ldr	r2, [r3, #8]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f042 0204 	orr.w	r2, r2, #4
 800a3fe:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800a400:	2300      	movs	r3, #0
 800a402:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a404:	2300      	movs	r3, #0
 800a406:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800a408:	2370      	movs	r3, #112	; 0x70
 800a40a:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a40c:	2300      	movs	r3, #0
 800a40e:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a410:	2300      	movs	r3, #0
 800a412:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a414:	2300      	movs	r3, #0
 800a416:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f107 020c 	add.w	r2, r7, #12
 800a426:	4611      	mov	r1, r2
 800a428:	4618      	mov	r0, r3
 800a42a:	f7ff fb05 	bl	8009a38 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	6812      	ldr	r2, [r2, #0]
 800a438:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a43c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a440:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	685a      	ldr	r2, [r3, #4]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800a450:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2201      	movs	r2, #1
 800a456:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2201      	movs	r2, #1
 800a45e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2201      	movs	r2, #1
 800a466:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2201      	movs	r2, #1
 800a46e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2201      	movs	r2, #1
 800a476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2201      	movs	r2, #1
 800a47e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3728      	adds	r7, #40	; 0x28
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 800a494:	bf00      	nop
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d101      	bne.n	800a4b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a4b4:	2302      	movs	r3, #2
 800a4b6:	e074      	b.n	800a5a2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2202      	movs	r2, #2
 800a4c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a34      	ldr	r2, [pc, #208]	; (800a5b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d009      	beq.n	800a4f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a33      	ldr	r2, [pc, #204]	; (800a5b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d004      	beq.n	800a4f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a31      	ldr	r2, [pc, #196]	; (800a5b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d108      	bne.n	800a508 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a4fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	4313      	orrs	r3, r2
 800a506:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a50e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a512:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	68fa      	ldr	r2, [r7, #12]
 800a524:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a21      	ldr	r2, [pc, #132]	; (800a5b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d022      	beq.n	800a576 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a538:	d01d      	beq.n	800a576 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a1f      	ldr	r2, [pc, #124]	; (800a5bc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d018      	beq.n	800a576 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a1d      	ldr	r2, [pc, #116]	; (800a5c0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d013      	beq.n	800a576 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a1c      	ldr	r2, [pc, #112]	; (800a5c4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d00e      	beq.n	800a576 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a15      	ldr	r2, [pc, #84]	; (800a5b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d009      	beq.n	800a576 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a18      	ldr	r2, [pc, #96]	; (800a5c8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d004      	beq.n	800a576 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a11      	ldr	r2, [pc, #68]	; (800a5b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d10c      	bne.n	800a590 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a57c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	68ba      	ldr	r2, [r7, #8]
 800a584:	4313      	orrs	r3, r2
 800a586:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	68ba      	ldr	r2, [r7, #8]
 800a58e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5a0:	2300      	movs	r3, #0
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3714      	adds	r7, #20
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	40012c00 	.word	0x40012c00
 800a5b4:	40013400 	.word	0x40013400
 800a5b8:	40015000 	.word	0x40015000
 800a5bc:	40000400 	.word	0x40000400
 800a5c0:	40000800 	.word	0x40000800
 800a5c4:	40000c00 	.word	0x40000c00
 800a5c8:	40014000 	.word	0x40014000

0800a5cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b085      	sub	sp, #20
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d101      	bne.n	800a5e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a5e4:	2302      	movs	r3, #2
 800a5e6:	e096      	b.n	800a716 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	68db      	ldr	r3, [r3, #12]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	4313      	orrs	r3, r2
 800a60a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	4313      	orrs	r3, r2
 800a618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4313      	orrs	r3, r2
 800a626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	4313      	orrs	r3, r2
 800a634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	695b      	ldr	r3, [r3, #20]
 800a640:	4313      	orrs	r3, r2
 800a642:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a64e:	4313      	orrs	r3, r2
 800a650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	699b      	ldr	r3, [r3, #24]
 800a65c:	041b      	lsls	r3, r3, #16
 800a65e:	4313      	orrs	r3, r2
 800a660:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a2f      	ldr	r2, [pc, #188]	; (800a724 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d009      	beq.n	800a680 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a2d      	ldr	r2, [pc, #180]	; (800a728 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d004      	beq.n	800a680 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a2c      	ldr	r2, [pc, #176]	; (800a72c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d106      	bne.n	800a68e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	69db      	ldr	r3, [r3, #28]
 800a68a:	4313      	orrs	r3, r2
 800a68c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a24      	ldr	r2, [pc, #144]	; (800a724 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d009      	beq.n	800a6ac <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a22      	ldr	r2, [pc, #136]	; (800a728 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d004      	beq.n	800a6ac <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a21      	ldr	r2, [pc, #132]	; (800a72c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d12b      	bne.n	800a704 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6b6:	051b      	lsls	r3, r3, #20
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	6a1b      	ldr	r3, [r3, #32]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a11      	ldr	r2, [pc, #68]	; (800a724 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d009      	beq.n	800a6f6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a10      	ldr	r2, [pc, #64]	; (800a728 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d004      	beq.n	800a6f6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a0e      	ldr	r2, [pc, #56]	; (800a72c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d106      	bne.n	800a704 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a700:	4313      	orrs	r3, r2
 800a702:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3714      	adds	r7, #20
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	40012c00 	.word	0x40012c00
 800a728:	40013400 	.word	0x40013400
 800a72c:	40015000 	.word	0x40015000

0800a730 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a74c:	bf00      	nop
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a760:	bf00      	nop
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a79c:	bf00      	nop
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a7b0:	bf00      	nop
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr

0800a7bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d101      	bne.n	800a7ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	e042      	b.n	800a854 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d106      	bne.n	800a7e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f7f8 f90d 	bl	8002a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2224      	movs	r2, #36	; 0x24
 800a7ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f022 0201 	bic.w	r2, r2, #1
 800a7fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 f8c2 	bl	800a988 <UART_SetConfig>
 800a804:	4603      	mov	r3, r0
 800a806:	2b01      	cmp	r3, #1
 800a808:	d101      	bne.n	800a80e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e022      	b.n	800a854 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a812:	2b00      	cmp	r3, #0
 800a814:	d002      	beq.n	800a81c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 fbb2 	bl	800af80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	685a      	ldr	r2, [r3, #4]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a82a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	689a      	ldr	r2, [r3, #8]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a83a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f042 0201 	orr.w	r2, r2, #1
 800a84a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 fc39 	bl	800b0c4 <UART_CheckIdleState>
 800a852:	4603      	mov	r3, r0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3708      	adds	r7, #8
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b08a      	sub	sp, #40	; 0x28
 800a860:	af02      	add	r7, sp, #8
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	60b9      	str	r1, [r7, #8]
 800a866:	603b      	str	r3, [r7, #0]
 800a868:	4613      	mov	r3, r2
 800a86a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a872:	2b20      	cmp	r3, #32
 800a874:	f040 8083 	bne.w	800a97e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d002      	beq.n	800a884 <HAL_UART_Transmit+0x28>
 800a87e:	88fb      	ldrh	r3, [r7, #6]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d101      	bne.n	800a888 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a884:	2301      	movs	r3, #1
 800a886:	e07b      	b.n	800a980 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d101      	bne.n	800a896 <HAL_UART_Transmit+0x3a>
 800a892:	2302      	movs	r3, #2
 800a894:	e074      	b.n	800a980 <HAL_UART_Transmit+0x124>
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2201      	movs	r2, #1
 800a89a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2221      	movs	r2, #33	; 0x21
 800a8aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a8ae:	f7f8 fe63 	bl	8003578 <HAL_GetTick>
 800a8b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	88fa      	ldrh	r2, [r7, #6]
 800a8b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	88fa      	ldrh	r2, [r7, #6]
 800a8c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8cc:	d108      	bne.n	800a8e0 <HAL_UART_Transmit+0x84>
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d104      	bne.n	800a8e0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	61bb      	str	r3, [r7, #24]
 800a8de:	e003      	b.n	800a8e8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a8f0:	e02c      	b.n	800a94c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	9300      	str	r3, [sp, #0]
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	2180      	movs	r1, #128	; 0x80
 800a8fc:	68f8      	ldr	r0, [r7, #12]
 800a8fe:	f000 fc2c 	bl	800b15a <UART_WaitOnFlagUntilTimeout>
 800a902:	4603      	mov	r3, r0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d001      	beq.n	800a90c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a908:	2303      	movs	r3, #3
 800a90a:	e039      	b.n	800a980 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d10b      	bne.n	800a92a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	881b      	ldrh	r3, [r3, #0]
 800a916:	461a      	mov	r2, r3
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a920:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a922:	69bb      	ldr	r3, [r7, #24]
 800a924:	3302      	adds	r3, #2
 800a926:	61bb      	str	r3, [r7, #24]
 800a928:	e007      	b.n	800a93a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a92a:	69fb      	ldr	r3, [r7, #28]
 800a92c:	781a      	ldrb	r2, [r3, #0]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	3301      	adds	r3, #1
 800a938:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a940:	b29b      	uxth	r3, r3
 800a942:	3b01      	subs	r3, #1
 800a944:	b29a      	uxth	r2, r3
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a952:	b29b      	uxth	r3, r3
 800a954:	2b00      	cmp	r3, #0
 800a956:	d1cc      	bne.n	800a8f2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	2200      	movs	r2, #0
 800a960:	2140      	movs	r1, #64	; 0x40
 800a962:	68f8      	ldr	r0, [r7, #12]
 800a964:	f000 fbf9 	bl	800b15a <UART_WaitOnFlagUntilTimeout>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d001      	beq.n	800a972 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a96e:	2303      	movs	r3, #3
 800a970:	e006      	b.n	800a980 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2220      	movs	r2, #32
 800a976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a97a:	2300      	movs	r3, #0
 800a97c:	e000      	b.n	800a980 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a97e:	2302      	movs	r3, #2
  }
}
 800a980:	4618      	mov	r0, r3
 800a982:	3720      	adds	r7, #32
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a98c:	b08c      	sub	sp, #48	; 0x30
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	689a      	ldr	r2, [r3, #8]
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	691b      	ldr	r3, [r3, #16]
 800a9a0:	431a      	orrs	r2, r3
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	695b      	ldr	r3, [r3, #20]
 800a9a6:	431a      	orrs	r2, r3
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	69db      	ldr	r3, [r3, #28]
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	4baa      	ldr	r3, [pc, #680]	; (800ac60 <UART_SetConfig+0x2d8>)
 800a9b8:	4013      	ands	r3, r2
 800a9ba:	697a      	ldr	r2, [r7, #20]
 800a9bc:	6812      	ldr	r2, [r2, #0]
 800a9be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a9c0:	430b      	orrs	r3, r1
 800a9c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	68da      	ldr	r2, [r3, #12]
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	430a      	orrs	r2, r1
 800a9d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	699b      	ldr	r3, [r3, #24]
 800a9de:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a9f      	ldr	r2, [pc, #636]	; (800ac64 <UART_SetConfig+0x2dc>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d004      	beq.n	800a9f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	6a1b      	ldr	r3, [r3, #32]
 800a9ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a9fe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800aa02:	697a      	ldr	r2, [r7, #20]
 800aa04:	6812      	ldr	r2, [r2, #0]
 800aa06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa08:	430b      	orrs	r3, r1
 800aa0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa12:	f023 010f 	bic.w	r1, r3, #15
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	430a      	orrs	r2, r1
 800aa20:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4a90      	ldr	r2, [pc, #576]	; (800ac68 <UART_SetConfig+0x2e0>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d125      	bne.n	800aa78 <UART_SetConfig+0xf0>
 800aa2c:	4b8f      	ldr	r3, [pc, #572]	; (800ac6c <UART_SetConfig+0x2e4>)
 800aa2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa32:	f003 0303 	and.w	r3, r3, #3
 800aa36:	2b03      	cmp	r3, #3
 800aa38:	d81a      	bhi.n	800aa70 <UART_SetConfig+0xe8>
 800aa3a:	a201      	add	r2, pc, #4	; (adr r2, 800aa40 <UART_SetConfig+0xb8>)
 800aa3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa40:	0800aa51 	.word	0x0800aa51
 800aa44:	0800aa61 	.word	0x0800aa61
 800aa48:	0800aa59 	.word	0x0800aa59
 800aa4c:	0800aa69 	.word	0x0800aa69
 800aa50:	2301      	movs	r3, #1
 800aa52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa56:	e116      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800aa58:	2302      	movs	r3, #2
 800aa5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa5e:	e112      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800aa60:	2304      	movs	r3, #4
 800aa62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa66:	e10e      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800aa68:	2308      	movs	r3, #8
 800aa6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa6e:	e10a      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800aa70:	2310      	movs	r3, #16
 800aa72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa76:	e106      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a7c      	ldr	r2, [pc, #496]	; (800ac70 <UART_SetConfig+0x2e8>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d138      	bne.n	800aaf4 <UART_SetConfig+0x16c>
 800aa82:	4b7a      	ldr	r3, [pc, #488]	; (800ac6c <UART_SetConfig+0x2e4>)
 800aa84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa88:	f003 030c 	and.w	r3, r3, #12
 800aa8c:	2b0c      	cmp	r3, #12
 800aa8e:	d82d      	bhi.n	800aaec <UART_SetConfig+0x164>
 800aa90:	a201      	add	r2, pc, #4	; (adr r2, 800aa98 <UART_SetConfig+0x110>)
 800aa92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa96:	bf00      	nop
 800aa98:	0800aacd 	.word	0x0800aacd
 800aa9c:	0800aaed 	.word	0x0800aaed
 800aaa0:	0800aaed 	.word	0x0800aaed
 800aaa4:	0800aaed 	.word	0x0800aaed
 800aaa8:	0800aadd 	.word	0x0800aadd
 800aaac:	0800aaed 	.word	0x0800aaed
 800aab0:	0800aaed 	.word	0x0800aaed
 800aab4:	0800aaed 	.word	0x0800aaed
 800aab8:	0800aad5 	.word	0x0800aad5
 800aabc:	0800aaed 	.word	0x0800aaed
 800aac0:	0800aaed 	.word	0x0800aaed
 800aac4:	0800aaed 	.word	0x0800aaed
 800aac8:	0800aae5 	.word	0x0800aae5
 800aacc:	2300      	movs	r3, #0
 800aace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aad2:	e0d8      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800aad4:	2302      	movs	r3, #2
 800aad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aada:	e0d4      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800aadc:	2304      	movs	r3, #4
 800aade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aae2:	e0d0      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800aae4:	2308      	movs	r3, #8
 800aae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aaea:	e0cc      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800aaec:	2310      	movs	r3, #16
 800aaee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aaf2:	e0c8      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a5e      	ldr	r2, [pc, #376]	; (800ac74 <UART_SetConfig+0x2ec>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d125      	bne.n	800ab4a <UART_SetConfig+0x1c2>
 800aafe:	4b5b      	ldr	r3, [pc, #364]	; (800ac6c <UART_SetConfig+0x2e4>)
 800ab00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ab08:	2b30      	cmp	r3, #48	; 0x30
 800ab0a:	d016      	beq.n	800ab3a <UART_SetConfig+0x1b2>
 800ab0c:	2b30      	cmp	r3, #48	; 0x30
 800ab0e:	d818      	bhi.n	800ab42 <UART_SetConfig+0x1ba>
 800ab10:	2b20      	cmp	r3, #32
 800ab12:	d00a      	beq.n	800ab2a <UART_SetConfig+0x1a2>
 800ab14:	2b20      	cmp	r3, #32
 800ab16:	d814      	bhi.n	800ab42 <UART_SetConfig+0x1ba>
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d002      	beq.n	800ab22 <UART_SetConfig+0x19a>
 800ab1c:	2b10      	cmp	r3, #16
 800ab1e:	d008      	beq.n	800ab32 <UART_SetConfig+0x1aa>
 800ab20:	e00f      	b.n	800ab42 <UART_SetConfig+0x1ba>
 800ab22:	2300      	movs	r3, #0
 800ab24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab28:	e0ad      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800ab2a:	2302      	movs	r3, #2
 800ab2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab30:	e0a9      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800ab32:	2304      	movs	r3, #4
 800ab34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab38:	e0a5      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800ab3a:	2308      	movs	r3, #8
 800ab3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab40:	e0a1      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800ab42:	2310      	movs	r3, #16
 800ab44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab48:	e09d      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a4a      	ldr	r2, [pc, #296]	; (800ac78 <UART_SetConfig+0x2f0>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d125      	bne.n	800aba0 <UART_SetConfig+0x218>
 800ab54:	4b45      	ldr	r3, [pc, #276]	; (800ac6c <UART_SetConfig+0x2e4>)
 800ab56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ab5e:	2bc0      	cmp	r3, #192	; 0xc0
 800ab60:	d016      	beq.n	800ab90 <UART_SetConfig+0x208>
 800ab62:	2bc0      	cmp	r3, #192	; 0xc0
 800ab64:	d818      	bhi.n	800ab98 <UART_SetConfig+0x210>
 800ab66:	2b80      	cmp	r3, #128	; 0x80
 800ab68:	d00a      	beq.n	800ab80 <UART_SetConfig+0x1f8>
 800ab6a:	2b80      	cmp	r3, #128	; 0x80
 800ab6c:	d814      	bhi.n	800ab98 <UART_SetConfig+0x210>
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d002      	beq.n	800ab78 <UART_SetConfig+0x1f0>
 800ab72:	2b40      	cmp	r3, #64	; 0x40
 800ab74:	d008      	beq.n	800ab88 <UART_SetConfig+0x200>
 800ab76:	e00f      	b.n	800ab98 <UART_SetConfig+0x210>
 800ab78:	2300      	movs	r3, #0
 800ab7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab7e:	e082      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800ab80:	2302      	movs	r3, #2
 800ab82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab86:	e07e      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800ab88:	2304      	movs	r3, #4
 800ab8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab8e:	e07a      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800ab90:	2308      	movs	r3, #8
 800ab92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab96:	e076      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800ab98:	2310      	movs	r3, #16
 800ab9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab9e:	e072      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a35      	ldr	r2, [pc, #212]	; (800ac7c <UART_SetConfig+0x2f4>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d12a      	bne.n	800ac00 <UART_SetConfig+0x278>
 800abaa:	4b30      	ldr	r3, [pc, #192]	; (800ac6c <UART_SetConfig+0x2e4>)
 800abac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abb8:	d01a      	beq.n	800abf0 <UART_SetConfig+0x268>
 800abba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abbe:	d81b      	bhi.n	800abf8 <UART_SetConfig+0x270>
 800abc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abc4:	d00c      	beq.n	800abe0 <UART_SetConfig+0x258>
 800abc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abca:	d815      	bhi.n	800abf8 <UART_SetConfig+0x270>
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d003      	beq.n	800abd8 <UART_SetConfig+0x250>
 800abd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abd4:	d008      	beq.n	800abe8 <UART_SetConfig+0x260>
 800abd6:	e00f      	b.n	800abf8 <UART_SetConfig+0x270>
 800abd8:	2300      	movs	r3, #0
 800abda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abde:	e052      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800abe0:	2302      	movs	r3, #2
 800abe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abe6:	e04e      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800abe8:	2304      	movs	r3, #4
 800abea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abee:	e04a      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800abf0:	2308      	movs	r3, #8
 800abf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abf6:	e046      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800abf8:	2310      	movs	r3, #16
 800abfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abfe:	e042      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a17      	ldr	r2, [pc, #92]	; (800ac64 <UART_SetConfig+0x2dc>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d13a      	bne.n	800ac80 <UART_SetConfig+0x2f8>
 800ac0a:	4b18      	ldr	r3, [pc, #96]	; (800ac6c <UART_SetConfig+0x2e4>)
 800ac0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ac14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ac18:	d01a      	beq.n	800ac50 <UART_SetConfig+0x2c8>
 800ac1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ac1e:	d81b      	bhi.n	800ac58 <UART_SetConfig+0x2d0>
 800ac20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac24:	d00c      	beq.n	800ac40 <UART_SetConfig+0x2b8>
 800ac26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac2a:	d815      	bhi.n	800ac58 <UART_SetConfig+0x2d0>
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d003      	beq.n	800ac38 <UART_SetConfig+0x2b0>
 800ac30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac34:	d008      	beq.n	800ac48 <UART_SetConfig+0x2c0>
 800ac36:	e00f      	b.n	800ac58 <UART_SetConfig+0x2d0>
 800ac38:	2300      	movs	r3, #0
 800ac3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac3e:	e022      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800ac40:	2302      	movs	r3, #2
 800ac42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac46:	e01e      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800ac48:	2304      	movs	r3, #4
 800ac4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac4e:	e01a      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800ac50:	2308      	movs	r3, #8
 800ac52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac56:	e016      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800ac58:	2310      	movs	r3, #16
 800ac5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac5e:	e012      	b.n	800ac86 <UART_SetConfig+0x2fe>
 800ac60:	cfff69f3 	.word	0xcfff69f3
 800ac64:	40008000 	.word	0x40008000
 800ac68:	40013800 	.word	0x40013800
 800ac6c:	40021000 	.word	0x40021000
 800ac70:	40004400 	.word	0x40004400
 800ac74:	40004800 	.word	0x40004800
 800ac78:	40004c00 	.word	0x40004c00
 800ac7c:	40005000 	.word	0x40005000
 800ac80:	2310      	movs	r3, #16
 800ac82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4aae      	ldr	r2, [pc, #696]	; (800af44 <UART_SetConfig+0x5bc>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	f040 8097 	bne.w	800adc0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ac92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac96:	2b08      	cmp	r3, #8
 800ac98:	d823      	bhi.n	800ace2 <UART_SetConfig+0x35a>
 800ac9a:	a201      	add	r2, pc, #4	; (adr r2, 800aca0 <UART_SetConfig+0x318>)
 800ac9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca0:	0800acc5 	.word	0x0800acc5
 800aca4:	0800ace3 	.word	0x0800ace3
 800aca8:	0800accd 	.word	0x0800accd
 800acac:	0800ace3 	.word	0x0800ace3
 800acb0:	0800acd3 	.word	0x0800acd3
 800acb4:	0800ace3 	.word	0x0800ace3
 800acb8:	0800ace3 	.word	0x0800ace3
 800acbc:	0800ace3 	.word	0x0800ace3
 800acc0:	0800acdb 	.word	0x0800acdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acc4:	f7fd fa40 	bl	8008148 <HAL_RCC_GetPCLK1Freq>
 800acc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800acca:	e010      	b.n	800acee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800accc:	4b9e      	ldr	r3, [pc, #632]	; (800af48 <UART_SetConfig+0x5c0>)
 800acce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800acd0:	e00d      	b.n	800acee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acd2:	f7fd f9cd 	bl	8008070 <HAL_RCC_GetSysClockFreq>
 800acd6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800acd8:	e009      	b.n	800acee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ace0:	e005      	b.n	800acee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ace2:	2300      	movs	r3, #0
 800ace4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ace6:	2301      	movs	r3, #1
 800ace8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800acec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800acee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	f000 8130 	beq.w	800af56 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfa:	4a94      	ldr	r2, [pc, #592]	; (800af4c <UART_SetConfig+0x5c4>)
 800acfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad00:	461a      	mov	r2, r3
 800ad02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad04:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad08:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	685a      	ldr	r2, [r3, #4]
 800ad0e:	4613      	mov	r3, r2
 800ad10:	005b      	lsls	r3, r3, #1
 800ad12:	4413      	add	r3, r2
 800ad14:	69ba      	ldr	r2, [r7, #24]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d305      	bcc.n	800ad26 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad20:	69ba      	ldr	r2, [r7, #24]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d903      	bls.n	800ad2e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ad26:	2301      	movs	r3, #1
 800ad28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ad2c:	e113      	b.n	800af56 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad30:	2200      	movs	r2, #0
 800ad32:	60bb      	str	r3, [r7, #8]
 800ad34:	60fa      	str	r2, [r7, #12]
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad3a:	4a84      	ldr	r2, [pc, #528]	; (800af4c <UART_SetConfig+0x5c4>)
 800ad3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	2200      	movs	r2, #0
 800ad44:	603b      	str	r3, [r7, #0]
 800ad46:	607a      	str	r2, [r7, #4]
 800ad48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ad50:	f7f5 ff52 	bl	8000bf8 <__aeabi_uldivmod>
 800ad54:	4602      	mov	r2, r0
 800ad56:	460b      	mov	r3, r1
 800ad58:	4610      	mov	r0, r2
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	f04f 0200 	mov.w	r2, #0
 800ad60:	f04f 0300 	mov.w	r3, #0
 800ad64:	020b      	lsls	r3, r1, #8
 800ad66:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad6a:	0202      	lsls	r2, r0, #8
 800ad6c:	6979      	ldr	r1, [r7, #20]
 800ad6e:	6849      	ldr	r1, [r1, #4]
 800ad70:	0849      	lsrs	r1, r1, #1
 800ad72:	2000      	movs	r0, #0
 800ad74:	460c      	mov	r4, r1
 800ad76:	4605      	mov	r5, r0
 800ad78:	eb12 0804 	adds.w	r8, r2, r4
 800ad7c:	eb43 0905 	adc.w	r9, r3, r5
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	469a      	mov	sl, r3
 800ad88:	4693      	mov	fp, r2
 800ad8a:	4652      	mov	r2, sl
 800ad8c:	465b      	mov	r3, fp
 800ad8e:	4640      	mov	r0, r8
 800ad90:	4649      	mov	r1, r9
 800ad92:	f7f5 ff31 	bl	8000bf8 <__aeabi_uldivmod>
 800ad96:	4602      	mov	r2, r0
 800ad98:	460b      	mov	r3, r1
 800ad9a:	4613      	mov	r3, r2
 800ad9c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad9e:	6a3b      	ldr	r3, [r7, #32]
 800ada0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ada4:	d308      	bcc.n	800adb8 <UART_SetConfig+0x430>
 800ada6:	6a3b      	ldr	r3, [r7, #32]
 800ada8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adac:	d204      	bcs.n	800adb8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	6a3a      	ldr	r2, [r7, #32]
 800adb4:	60da      	str	r2, [r3, #12]
 800adb6:	e0ce      	b.n	800af56 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800adb8:	2301      	movs	r3, #1
 800adba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800adbe:	e0ca      	b.n	800af56 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	69db      	ldr	r3, [r3, #28]
 800adc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adc8:	d166      	bne.n	800ae98 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800adca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800adce:	2b08      	cmp	r3, #8
 800add0:	d827      	bhi.n	800ae22 <UART_SetConfig+0x49a>
 800add2:	a201      	add	r2, pc, #4	; (adr r2, 800add8 <UART_SetConfig+0x450>)
 800add4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add8:	0800adfd 	.word	0x0800adfd
 800addc:	0800ae05 	.word	0x0800ae05
 800ade0:	0800ae0d 	.word	0x0800ae0d
 800ade4:	0800ae23 	.word	0x0800ae23
 800ade8:	0800ae13 	.word	0x0800ae13
 800adec:	0800ae23 	.word	0x0800ae23
 800adf0:	0800ae23 	.word	0x0800ae23
 800adf4:	0800ae23 	.word	0x0800ae23
 800adf8:	0800ae1b 	.word	0x0800ae1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adfc:	f7fd f9a4 	bl	8008148 <HAL_RCC_GetPCLK1Freq>
 800ae00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae02:	e014      	b.n	800ae2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae04:	f7fd f9b6 	bl	8008174 <HAL_RCC_GetPCLK2Freq>
 800ae08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae0a:	e010      	b.n	800ae2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae0c:	4b4e      	ldr	r3, [pc, #312]	; (800af48 <UART_SetConfig+0x5c0>)
 800ae0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ae10:	e00d      	b.n	800ae2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae12:	f7fd f92d 	bl	8008070 <HAL_RCC_GetSysClockFreq>
 800ae16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae18:	e009      	b.n	800ae2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ae20:	e005      	b.n	800ae2e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ae22:	2300      	movs	r3, #0
 800ae24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ae26:	2301      	movs	r3, #1
 800ae28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ae2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f000 8090 	beq.w	800af56 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3a:	4a44      	ldr	r2, [pc, #272]	; (800af4c <UART_SetConfig+0x5c4>)
 800ae3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae40:	461a      	mov	r2, r3
 800ae42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae44:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae48:	005a      	lsls	r2, r3, #1
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	085b      	lsrs	r3, r3, #1
 800ae50:	441a      	add	r2, r3
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae5c:	6a3b      	ldr	r3, [r7, #32]
 800ae5e:	2b0f      	cmp	r3, #15
 800ae60:	d916      	bls.n	800ae90 <UART_SetConfig+0x508>
 800ae62:	6a3b      	ldr	r3, [r7, #32]
 800ae64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae68:	d212      	bcs.n	800ae90 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae6a:	6a3b      	ldr	r3, [r7, #32]
 800ae6c:	b29b      	uxth	r3, r3
 800ae6e:	f023 030f 	bic.w	r3, r3, #15
 800ae72:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae74:	6a3b      	ldr	r3, [r7, #32]
 800ae76:	085b      	lsrs	r3, r3, #1
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	f003 0307 	and.w	r3, r3, #7
 800ae7e:	b29a      	uxth	r2, r3
 800ae80:	8bfb      	ldrh	r3, [r7, #30]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	8bfa      	ldrh	r2, [r7, #30]
 800ae8c:	60da      	str	r2, [r3, #12]
 800ae8e:	e062      	b.n	800af56 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ae90:	2301      	movs	r3, #1
 800ae92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ae96:	e05e      	b.n	800af56 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ae9c:	2b08      	cmp	r3, #8
 800ae9e:	d828      	bhi.n	800aef2 <UART_SetConfig+0x56a>
 800aea0:	a201      	add	r2, pc, #4	; (adr r2, 800aea8 <UART_SetConfig+0x520>)
 800aea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea6:	bf00      	nop
 800aea8:	0800aecd 	.word	0x0800aecd
 800aeac:	0800aed5 	.word	0x0800aed5
 800aeb0:	0800aedd 	.word	0x0800aedd
 800aeb4:	0800aef3 	.word	0x0800aef3
 800aeb8:	0800aee3 	.word	0x0800aee3
 800aebc:	0800aef3 	.word	0x0800aef3
 800aec0:	0800aef3 	.word	0x0800aef3
 800aec4:	0800aef3 	.word	0x0800aef3
 800aec8:	0800aeeb 	.word	0x0800aeeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aecc:	f7fd f93c 	bl	8008148 <HAL_RCC_GetPCLK1Freq>
 800aed0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aed2:	e014      	b.n	800aefe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aed4:	f7fd f94e 	bl	8008174 <HAL_RCC_GetPCLK2Freq>
 800aed8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aeda:	e010      	b.n	800aefe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aedc:	4b1a      	ldr	r3, [pc, #104]	; (800af48 <UART_SetConfig+0x5c0>)
 800aede:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aee0:	e00d      	b.n	800aefe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aee2:	f7fd f8c5 	bl	8008070 <HAL_RCC_GetSysClockFreq>
 800aee6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aee8:	e009      	b.n	800aefe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aeea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aeee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aef0:	e005      	b.n	800aefe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800aef2:	2300      	movs	r3, #0
 800aef4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800aef6:	2301      	movs	r3, #1
 800aef8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800aefc:	bf00      	nop
    }

    if (pclk != 0U)
 800aefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af00:	2b00      	cmp	r3, #0
 800af02:	d028      	beq.n	800af56 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af08:	4a10      	ldr	r2, [pc, #64]	; (800af4c <UART_SetConfig+0x5c4>)
 800af0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af0e:	461a      	mov	r2, r3
 800af10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af12:	fbb3 f2f2 	udiv	r2, r3, r2
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	085b      	lsrs	r3, r3, #1
 800af1c:	441a      	add	r2, r3
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	fbb2 f3f3 	udiv	r3, r2, r3
 800af26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af28:	6a3b      	ldr	r3, [r7, #32]
 800af2a:	2b0f      	cmp	r3, #15
 800af2c:	d910      	bls.n	800af50 <UART_SetConfig+0x5c8>
 800af2e:	6a3b      	ldr	r3, [r7, #32]
 800af30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af34:	d20c      	bcs.n	800af50 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800af36:	6a3b      	ldr	r3, [r7, #32]
 800af38:	b29a      	uxth	r2, r3
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	60da      	str	r2, [r3, #12]
 800af40:	e009      	b.n	800af56 <UART_SetConfig+0x5ce>
 800af42:	bf00      	nop
 800af44:	40008000 	.word	0x40008000
 800af48:	00f42400 	.word	0x00f42400
 800af4c:	08015394 	.word	0x08015394
      }
      else
      {
        ret = HAL_ERROR;
 800af50:	2301      	movs	r3, #1
 800af52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	2201      	movs	r2, #1
 800af5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	2201      	movs	r2, #1
 800af62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	2200      	movs	r2, #0
 800af6a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	2200      	movs	r2, #0
 800af70:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800af72:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800af76:	4618      	mov	r0, r3
 800af78:	3730      	adds	r7, #48	; 0x30
 800af7a:	46bd      	mov	sp, r7
 800af7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800af80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af8c:	f003 0301 	and.w	r3, r3, #1
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00a      	beq.n	800afaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	430a      	orrs	r2, r1
 800afa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afae:	f003 0302 	and.w	r3, r3, #2
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d00a      	beq.n	800afcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	430a      	orrs	r2, r1
 800afca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd0:	f003 0304 	and.w	r3, r3, #4
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d00a      	beq.n	800afee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	430a      	orrs	r2, r1
 800afec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aff2:	f003 0308 	and.w	r3, r3, #8
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00a      	beq.n	800b010 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	430a      	orrs	r2, r1
 800b00e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b014:	f003 0310 	and.w	r3, r3, #16
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00a      	beq.n	800b032 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	430a      	orrs	r2, r1
 800b030:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b036:	f003 0320 	and.w	r3, r3, #32
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00a      	beq.n	800b054 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	430a      	orrs	r2, r1
 800b052:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d01a      	beq.n	800b096 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	430a      	orrs	r2, r1
 800b074:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b07a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b07e:	d10a      	bne.n	800b096 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	430a      	orrs	r2, r1
 800b094:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b09a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00a      	beq.n	800b0b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	430a      	orrs	r2, r1
 800b0b6:	605a      	str	r2, [r3, #4]
  }
}
 800b0b8:	bf00      	nop
 800b0ba:	370c      	adds	r7, #12
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr

0800b0c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b086      	sub	sp, #24
 800b0c8:	af02      	add	r7, sp, #8
 800b0ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b0d4:	f7f8 fa50 	bl	8003578 <HAL_GetTick>
 800b0d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f003 0308 	and.w	r3, r3, #8
 800b0e4:	2b08      	cmp	r3, #8
 800b0e6:	d10e      	bne.n	800b106 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b0ec:	9300      	str	r3, [sp, #0]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 f82f 	bl	800b15a <UART_WaitOnFlagUntilTimeout>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d001      	beq.n	800b106 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b102:	2303      	movs	r3, #3
 800b104:	e025      	b.n	800b152 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f003 0304 	and.w	r3, r3, #4
 800b110:	2b04      	cmp	r3, #4
 800b112:	d10e      	bne.n	800b132 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b114:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b118:	9300      	str	r3, [sp, #0]
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2200      	movs	r2, #0
 800b11e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 f819 	bl	800b15a <UART_WaitOnFlagUntilTimeout>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d001      	beq.n	800b132 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b12e:	2303      	movs	r3, #3
 800b130:	e00f      	b.n	800b152 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2220      	movs	r2, #32
 800b136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2220      	movs	r2, #32
 800b13e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b150:	2300      	movs	r3, #0
}
 800b152:	4618      	mov	r0, r3
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b09c      	sub	sp, #112	; 0x70
 800b15e:	af00      	add	r7, sp, #0
 800b160:	60f8      	str	r0, [r7, #12]
 800b162:	60b9      	str	r1, [r7, #8]
 800b164:	603b      	str	r3, [r7, #0]
 800b166:	4613      	mov	r3, r2
 800b168:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b16a:	e0a9      	b.n	800b2c0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b16c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b16e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b172:	f000 80a5 	beq.w	800b2c0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b176:	f7f8 f9ff 	bl	8003578 <HAL_GetTick>
 800b17a:	4602      	mov	r2, r0
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	1ad3      	subs	r3, r2, r3
 800b180:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b182:	429a      	cmp	r2, r3
 800b184:	d302      	bcc.n	800b18c <UART_WaitOnFlagUntilTimeout+0x32>
 800b186:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d140      	bne.n	800b20e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b194:	e853 3f00 	ldrex	r3, [r3]
 800b198:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b19a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b19c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b1a0:	667b      	str	r3, [r7, #100]	; 0x64
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b1ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b1b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b1b2:	e841 2300 	strex	r3, r2, [r1]
 800b1b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b1b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d1e6      	bne.n	800b18c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	3308      	adds	r3, #8
 800b1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1c8:	e853 3f00 	ldrex	r3, [r3]
 800b1cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d0:	f023 0301 	bic.w	r3, r3, #1
 800b1d4:	663b      	str	r3, [r7, #96]	; 0x60
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	3308      	adds	r3, #8
 800b1dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b1de:	64ba      	str	r2, [r7, #72]	; 0x48
 800b1e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b1e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1e6:	e841 2300 	strex	r3, r2, [r1]
 800b1ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b1ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d1e5      	bne.n	800b1be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2220      	movs	r2, #32
 800b1f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2220      	movs	r2, #32
 800b1fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2200      	movs	r2, #0
 800b206:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b20a:	2303      	movs	r3, #3
 800b20c:	e069      	b.n	800b2e2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f003 0304 	and.w	r3, r3, #4
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d051      	beq.n	800b2c0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	69db      	ldr	r3, [r3, #28]
 800b222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b22a:	d149      	bne.n	800b2c0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b234:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23e:	e853 3f00 	ldrex	r3, [r3]
 800b242:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b246:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b24a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	461a      	mov	r2, r3
 800b252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b254:	637b      	str	r3, [r7, #52]	; 0x34
 800b256:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b258:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b25a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b25c:	e841 2300 	strex	r3, r2, [r1]
 800b260:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b264:	2b00      	cmp	r3, #0
 800b266:	d1e6      	bne.n	800b236 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	3308      	adds	r3, #8
 800b26e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	e853 3f00 	ldrex	r3, [r3]
 800b276:	613b      	str	r3, [r7, #16]
   return(result);
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	f023 0301 	bic.w	r3, r3, #1
 800b27e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	3308      	adds	r3, #8
 800b286:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b288:	623a      	str	r2, [r7, #32]
 800b28a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b28c:	69f9      	ldr	r1, [r7, #28]
 800b28e:	6a3a      	ldr	r2, [r7, #32]
 800b290:	e841 2300 	strex	r3, r2, [r1]
 800b294:	61bb      	str	r3, [r7, #24]
   return(result);
 800b296:	69bb      	ldr	r3, [r7, #24]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d1e5      	bne.n	800b268 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2220      	movs	r2, #32
 800b2a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2220      	movs	r2, #32
 800b2a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2220      	movs	r2, #32
 800b2b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b2bc:	2303      	movs	r3, #3
 800b2be:	e010      	b.n	800b2e2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	69da      	ldr	r2, [r3, #28]
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	4013      	ands	r3, r2
 800b2ca:	68ba      	ldr	r2, [r7, #8]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	bf0c      	ite	eq
 800b2d0:	2301      	moveq	r3, #1
 800b2d2:	2300      	movne	r3, #0
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	79fb      	ldrb	r3, [r7, #7]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	f43f af46 	beq.w	800b16c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b2e0:	2300      	movs	r3, #0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3770      	adds	r7, #112	; 0x70
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b2ea:	b480      	push	{r7}
 800b2ec:	b085      	sub	sp, #20
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d101      	bne.n	800b300 <HAL_UARTEx_DisableFifoMode+0x16>
 800b2fc:	2302      	movs	r3, #2
 800b2fe:	e027      	b.n	800b350 <HAL_UARTEx_DisableFifoMode+0x66>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2201      	movs	r2, #1
 800b304:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2224      	movs	r2, #36	; 0x24
 800b30c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	681a      	ldr	r2, [r3, #0]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f022 0201 	bic.w	r2, r2, #1
 800b326:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b32e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	68fa      	ldr	r2, [r7, #12]
 800b33c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2220      	movs	r2, #32
 800b342:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b34e:	2300      	movs	r3, #0
}
 800b350:	4618      	mov	r0, r3
 800b352:	3714      	adds	r7, #20
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d101      	bne.n	800b374 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b370:	2302      	movs	r3, #2
 800b372:	e02d      	b.n	800b3d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2224      	movs	r2, #36	; 0x24
 800b380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f022 0201 	bic.w	r2, r2, #1
 800b39a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	683a      	ldr	r2, [r7, #0]
 800b3ac:	430a      	orrs	r2, r1
 800b3ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 f84f 	bl	800b454 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	68fa      	ldr	r2, [r7, #12]
 800b3bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2220      	movs	r2, #32
 800b3c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b3ce:	2300      	movs	r3, #0
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3710      	adds	r7, #16
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d101      	bne.n	800b3f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b3ec:	2302      	movs	r3, #2
 800b3ee:	e02d      	b.n	800b44c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2224      	movs	r2, #36	; 0x24
 800b3fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f022 0201 	bic.w	r2, r2, #1
 800b416:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	689b      	ldr	r3, [r3, #8]
 800b41e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	683a      	ldr	r2, [r7, #0]
 800b428:	430a      	orrs	r2, r1
 800b42a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 f811 	bl	800b454 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2220      	movs	r2, #32
 800b43e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2200      	movs	r2, #0
 800b446:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b44a:	2300      	movs	r3, #0
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3710      	adds	r7, #16
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b454:	b480      	push	{r7}
 800b456:	b085      	sub	sp, #20
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b460:	2b00      	cmp	r3, #0
 800b462:	d108      	bne.n	800b476 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2201      	movs	r2, #1
 800b468:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2201      	movs	r2, #1
 800b470:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b474:	e031      	b.n	800b4da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b476:	2308      	movs	r3, #8
 800b478:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b47a:	2308      	movs	r3, #8
 800b47c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	689b      	ldr	r3, [r3, #8]
 800b484:	0e5b      	lsrs	r3, r3, #25
 800b486:	b2db      	uxtb	r3, r3
 800b488:	f003 0307 	and.w	r3, r3, #7
 800b48c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	0f5b      	lsrs	r3, r3, #29
 800b496:	b2db      	uxtb	r3, r3
 800b498:	f003 0307 	and.w	r3, r3, #7
 800b49c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b49e:	7bbb      	ldrb	r3, [r7, #14]
 800b4a0:	7b3a      	ldrb	r2, [r7, #12]
 800b4a2:	4911      	ldr	r1, [pc, #68]	; (800b4e8 <UARTEx_SetNbDataToProcess+0x94>)
 800b4a4:	5c8a      	ldrb	r2, [r1, r2]
 800b4a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b4aa:	7b3a      	ldrb	r2, [r7, #12]
 800b4ac:	490f      	ldr	r1, [pc, #60]	; (800b4ec <UARTEx_SetNbDataToProcess+0x98>)
 800b4ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b4bc:	7bfb      	ldrb	r3, [r7, #15]
 800b4be:	7b7a      	ldrb	r2, [r7, #13]
 800b4c0:	4909      	ldr	r1, [pc, #36]	; (800b4e8 <UARTEx_SetNbDataToProcess+0x94>)
 800b4c2:	5c8a      	ldrb	r2, [r1, r2]
 800b4c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b4c8:	7b7a      	ldrb	r2, [r7, #13]
 800b4ca:	4908      	ldr	r1, [pc, #32]	; (800b4ec <UARTEx_SetNbDataToProcess+0x98>)
 800b4cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b4ce:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4d2:	b29a      	uxth	r2, r3
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b4da:	bf00      	nop
 800b4dc:	3714      	adds	r7, #20
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
 800b4e8:	080153ac 	.word	0x080153ac
 800b4ec:	080153b4 	.word	0x080153b4

0800b4f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b085      	sub	sp, #20
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b500:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800b504:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	b29a      	uxth	r2, r3
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b510:	2300      	movs	r3, #0
}
 800b512:	4618      	mov	r0, r3
 800b514:	3714      	adds	r7, #20
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr

0800b51e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b51e:	b480      	push	{r7}
 800b520:	b085      	sub	sp, #20
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b526:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800b52a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b532:	b29a      	uxth	r2, r3
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	b29b      	uxth	r3, r3
 800b538:	43db      	mvns	r3, r3
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	4013      	ands	r3, r2
 800b53e:	b29a      	uxth	r2, r3
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b546:	2300      	movs	r3, #0
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3714      	adds	r7, #20
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr

0800b554 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b554:	b084      	sub	sp, #16
 800b556:	b480      	push	{r7}
 800b558:	b083      	sub	sp, #12
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
 800b55e:	f107 0014 	add.w	r0, r7, #20
 800b562:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2201      	movs	r2, #1
 800b56a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2200      	movs	r2, #0
 800b57a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800b586:	2300      	movs	r3, #0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	b004      	add	sp, #16
 800b594:	4770      	bx	lr
	...

0800b598 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b598:	b480      	push	{r7}
 800b59a:	b09d      	sub	sp, #116	; 0x74
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	4413      	add	r3, r2
 800b5b2:	881b      	ldrh	r3, [r3, #0]
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800b5ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5be:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	78db      	ldrb	r3, [r3, #3]
 800b5c6:	2b03      	cmp	r3, #3
 800b5c8:	d81f      	bhi.n	800b60a <USB_ActivateEndpoint+0x72>
 800b5ca:	a201      	add	r2, pc, #4	; (adr r2, 800b5d0 <USB_ActivateEndpoint+0x38>)
 800b5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d0:	0800b5e1 	.word	0x0800b5e1
 800b5d4:	0800b5fd 	.word	0x0800b5fd
 800b5d8:	0800b613 	.word	0x0800b613
 800b5dc:	0800b5ef 	.word	0x0800b5ef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b5e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b5e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b5e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b5ec:	e012      	b.n	800b614 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b5ee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b5f2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800b5f6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b5fa:	e00b      	b.n	800b614 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b5fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b600:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b604:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b608:	e004      	b.n	800b614 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800b60a:	2301      	movs	r3, #1
 800b60c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800b610:	e000      	b.n	800b614 <USB_ActivateEndpoint+0x7c>
      break;
 800b612:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	441a      	add	r2, r3
 800b61e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b62a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b62e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b632:	b29b      	uxth	r3, r3
 800b634:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	009b      	lsls	r3, r3, #2
 800b63e:	4413      	add	r3, r2
 800b640:	881b      	ldrh	r3, [r3, #0]
 800b642:	b29b      	uxth	r3, r3
 800b644:	b21b      	sxth	r3, r3
 800b646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b64a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b64e:	b21a      	sxth	r2, r3
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	b21b      	sxth	r3, r3
 800b656:	4313      	orrs	r3, r2
 800b658:	b21b      	sxth	r3, r3
 800b65a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	441a      	add	r2, r3
 800b668:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800b66c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b674:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	7b1b      	ldrb	r3, [r3, #12]
 800b684:	2b00      	cmp	r3, #0
 800b686:	f040 8149 	bne.w	800b91c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	785b      	ldrb	r3, [r3, #1]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	f000 8084 	beq.w	800b79c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	61bb      	str	r3, [r7, #24]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	69bb      	ldr	r3, [r7, #24]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	61bb      	str	r3, [r7, #24]
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	00da      	lsls	r2, r3, #3
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b6b6:	617b      	str	r3, [r7, #20]
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	88db      	ldrh	r3, [r3, #6]
 800b6bc:	085b      	lsrs	r3, r3, #1
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	005b      	lsls	r3, r3, #1
 800b6c2:	b29a      	uxth	r2, r3
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	4413      	add	r3, r2
 800b6d2:	881b      	ldrh	r3, [r3, #0]
 800b6d4:	827b      	strh	r3, [r7, #18]
 800b6d6:	8a7b      	ldrh	r3, [r7, #18]
 800b6d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d01b      	beq.n	800b718 <USB_ActivateEndpoint+0x180>
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	4413      	add	r3, r2
 800b6ea:	881b      	ldrh	r3, [r3, #0]
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6f6:	823b      	strh	r3, [r7, #16]
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	441a      	add	r2, r3
 800b702:	8a3b      	ldrh	r3, [r7, #16]
 800b704:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b708:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b70c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b710:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b714:	b29b      	uxth	r3, r3
 800b716:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	78db      	ldrb	r3, [r3, #3]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d020      	beq.n	800b762 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	009b      	lsls	r3, r3, #2
 800b728:	4413      	add	r3, r2
 800b72a:	881b      	ldrh	r3, [r3, #0]
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b736:	81bb      	strh	r3, [r7, #12]
 800b738:	89bb      	ldrh	r3, [r7, #12]
 800b73a:	f083 0320 	eor.w	r3, r3, #32
 800b73e:	81bb      	strh	r3, [r7, #12]
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	441a      	add	r2, r3
 800b74a:	89bb      	ldrh	r3, [r7, #12]
 800b74c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	8013      	strh	r3, [r2, #0]
 800b760:	e2a6      	b.n	800bcb0 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	4413      	add	r3, r2
 800b76c:	881b      	ldrh	r3, [r3, #0]
 800b76e:	b29b      	uxth	r3, r3
 800b770:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b778:	81fb      	strh	r3, [r7, #14]
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	009b      	lsls	r3, r3, #2
 800b782:	441a      	add	r2, r3
 800b784:	89fb      	ldrh	r3, [r7, #14]
 800b786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b78a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b78e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b796:	b29b      	uxth	r3, r3
 800b798:	8013      	strh	r3, [r2, #0]
 800b79a:	e289      	b.n	800bcb0 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	633b      	str	r3, [r7, #48]	; 0x30
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ac:	4413      	add	r3, r2
 800b7ae:	633b      	str	r3, [r7, #48]	; 0x30
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	00da      	lsls	r2, r3, #3
 800b7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b8:	4413      	add	r3, r2
 800b7ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b7be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	88db      	ldrh	r3, [r3, #6]
 800b7c4:	085b      	lsrs	r3, r3, #1
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	005b      	lsls	r3, r3, #1
 800b7ca:	b29a      	uxth	r2, r3
 800b7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ce:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	461a      	mov	r2, r3
 800b7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e0:	4413      	add	r3, r2
 800b7e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	00da      	lsls	r2, r3, #3
 800b7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ec:	4413      	add	r3, r2
 800b7ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b7f2:	627b      	str	r3, [r7, #36]	; 0x24
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	691b      	ldr	r3, [r3, #16]
 800b7f8:	2b3e      	cmp	r3, #62	; 0x3e
 800b7fa:	d918      	bls.n	800b82e <USB_ActivateEndpoint+0x296>
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	691b      	ldr	r3, [r3, #16]
 800b800:	095b      	lsrs	r3, r3, #5
 800b802:	66bb      	str	r3, [r7, #104]	; 0x68
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	691b      	ldr	r3, [r3, #16]
 800b808:	f003 031f 	and.w	r3, r3, #31
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d102      	bne.n	800b816 <USB_ActivateEndpoint+0x27e>
 800b810:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b812:	3b01      	subs	r3, #1
 800b814:	66bb      	str	r3, [r7, #104]	; 0x68
 800b816:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b818:	b29b      	uxth	r3, r3
 800b81a:	029b      	lsls	r3, r3, #10
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b826:	b29a      	uxth	r2, r3
 800b828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82a:	801a      	strh	r2, [r3, #0]
 800b82c:	e029      	b.n	800b882 <USB_ActivateEndpoint+0x2ea>
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	691b      	ldr	r3, [r3, #16]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d112      	bne.n	800b85c <USB_ActivateEndpoint+0x2c4>
 800b836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b838:	881b      	ldrh	r3, [r3, #0]
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b840:	b29a      	uxth	r2, r3
 800b842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b844:	801a      	strh	r2, [r3, #0]
 800b846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b848:	881b      	ldrh	r3, [r3, #0]
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b854:	b29a      	uxth	r2, r3
 800b856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b858:	801a      	strh	r2, [r3, #0]
 800b85a:	e012      	b.n	800b882 <USB_ActivateEndpoint+0x2ea>
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	691b      	ldr	r3, [r3, #16]
 800b860:	085b      	lsrs	r3, r3, #1
 800b862:	66bb      	str	r3, [r7, #104]	; 0x68
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	691b      	ldr	r3, [r3, #16]
 800b868:	f003 0301 	and.w	r3, r3, #1
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d002      	beq.n	800b876 <USB_ActivateEndpoint+0x2de>
 800b870:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b872:	3301      	adds	r3, #1
 800b874:	66bb      	str	r3, [r7, #104]	; 0x68
 800b876:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b878:	b29b      	uxth	r3, r3
 800b87a:	029b      	lsls	r3, r3, #10
 800b87c:	b29a      	uxth	r2, r3
 800b87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b880:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	009b      	lsls	r3, r3, #2
 800b88a:	4413      	add	r3, r2
 800b88c:	881b      	ldrh	r3, [r3, #0]
 800b88e:	847b      	strh	r3, [r7, #34]	; 0x22
 800b890:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b896:	2b00      	cmp	r3, #0
 800b898:	d01b      	beq.n	800b8d2 <USB_ActivateEndpoint+0x33a>
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	4413      	add	r3, r2
 800b8a4:	881b      	ldrh	r3, [r3, #0]
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8b0:	843b      	strh	r3, [r7, #32]
 800b8b2:	687a      	ldr	r2, [r7, #4]
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	441a      	add	r2, r3
 800b8bc:	8c3b      	ldrh	r3, [r7, #32]
 800b8be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b8ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8ce:	b29b      	uxth	r3, r3
 800b8d0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	009b      	lsls	r3, r3, #2
 800b8da:	4413      	add	r3, r2
 800b8dc:	881b      	ldrh	r3, [r3, #0]
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b8e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8e8:	83fb      	strh	r3, [r7, #30]
 800b8ea:	8bfb      	ldrh	r3, [r7, #30]
 800b8ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b8f0:	83fb      	strh	r3, [r7, #30]
 800b8f2:	8bfb      	ldrh	r3, [r7, #30]
 800b8f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b8f8:	83fb      	strh	r3, [r7, #30]
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	441a      	add	r2, r3
 800b904:	8bfb      	ldrh	r3, [r7, #30]
 800b906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b90a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b90e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b916:	b29b      	uxth	r3, r3
 800b918:	8013      	strh	r3, [r2, #0]
 800b91a:	e1c9      	b.n	800bcb0 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	78db      	ldrb	r3, [r3, #3]
 800b920:	2b02      	cmp	r3, #2
 800b922:	d11e      	bne.n	800b962 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	4413      	add	r3, r2
 800b92e:	881b      	ldrh	r3, [r3, #0]
 800b930:	b29b      	uxth	r3, r3
 800b932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b93a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	009b      	lsls	r3, r3, #2
 800b946:	441a      	add	r2, r3
 800b948:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b94c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b954:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	8013      	strh	r3, [r2, #0]
 800b960:	e01d      	b.n	800b99e <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	4413      	add	r3, r2
 800b96c:	881b      	ldrh	r3, [r3, #0]
 800b96e:	b29b      	uxth	r3, r3
 800b970:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b978:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	009b      	lsls	r3, r3, #2
 800b984:	441a      	add	r2, r3
 800b986:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800b98a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b98e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9a8:	b29b      	uxth	r3, r3
 800b9aa:	461a      	mov	r2, r3
 800b9ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9ae:	4413      	add	r3, r2
 800b9b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	00da      	lsls	r2, r3, #3
 800b9b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9ba:	4413      	add	r3, r2
 800b9bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9c0:	65bb      	str	r3, [r7, #88]	; 0x58
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	891b      	ldrh	r3, [r3, #8]
 800b9c6:	085b      	lsrs	r3, r3, #1
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	005b      	lsls	r3, r3, #1
 800b9cc:	b29a      	uxth	r2, r3
 800b9ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b9d0:	801a      	strh	r2, [r3, #0]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	657b      	str	r3, [r7, #84]	; 0x54
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9dc:	b29b      	uxth	r3, r3
 800b9de:	461a      	mov	r2, r3
 800b9e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9e2:	4413      	add	r3, r2
 800b9e4:	657b      	str	r3, [r7, #84]	; 0x54
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	00da      	lsls	r2, r3, #3
 800b9ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9ee:	4413      	add	r3, r2
 800b9f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b9f4:	653b      	str	r3, [r7, #80]	; 0x50
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	895b      	ldrh	r3, [r3, #10]
 800b9fa:	085b      	lsrs	r3, r3, #1
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	005b      	lsls	r3, r3, #1
 800ba00:	b29a      	uxth	r2, r3
 800ba02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba04:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	785b      	ldrb	r3, [r3, #1]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	f040 8093 	bne.w	800bb36 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	009b      	lsls	r3, r3, #2
 800ba18:	4413      	add	r3, r2
 800ba1a:	881b      	ldrh	r3, [r3, #0]
 800ba1c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ba20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ba24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d01b      	beq.n	800ba64 <USB_ActivateEndpoint+0x4cc>
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	4413      	add	r3, r2
 800ba36:	881b      	ldrh	r3, [r3, #0]
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba42:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	441a      	add	r2, r3
 800ba4e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ba50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ba5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ba64:	687a      	ldr	r2, [r7, #4]
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	4413      	add	r3, r2
 800ba6e:	881b      	ldrh	r3, [r3, #0]
 800ba70:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ba72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ba74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d01b      	beq.n	800bab4 <USB_ActivateEndpoint+0x51c>
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	4413      	add	r3, r2
 800ba86:	881b      	ldrh	r3, [r3, #0]
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba92:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	441a      	add	r2, r3
 800ba9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800baa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800baa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800baa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800baac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	4413      	add	r3, r2
 800babe:	881b      	ldrh	r3, [r3, #0]
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baca:	873b      	strh	r3, [r7, #56]	; 0x38
 800bacc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800bace:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bad2:	873b      	strh	r3, [r7, #56]	; 0x38
 800bad4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800bad6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bada:	873b      	strh	r3, [r7, #56]	; 0x38
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	009b      	lsls	r3, r3, #2
 800bae4:	441a      	add	r2, r3
 800bae6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800bae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800baec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800baf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800baf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	4413      	add	r3, r2
 800bb06:	881b      	ldrh	r3, [r3, #0]
 800bb08:	b29b      	uxth	r3, r3
 800bb0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb12:	86fb      	strh	r3, [r7, #54]	; 0x36
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	009b      	lsls	r3, r3, #2
 800bb1c:	441a      	add	r2, r3
 800bb1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bb20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	8013      	strh	r3, [r2, #0]
 800bb34:	e0bc      	b.n	800bcb0 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	781b      	ldrb	r3, [r3, #0]
 800bb3c:	009b      	lsls	r3, r3, #2
 800bb3e:	4413      	add	r3, r2
 800bb40:	881b      	ldrh	r3, [r3, #0]
 800bb42:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800bb46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bb4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d01d      	beq.n	800bb8e <USB_ActivateEndpoint+0x5f6>
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	4413      	add	r3, r2
 800bb5c:	881b      	ldrh	r3, [r3, #0]
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb68:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	009b      	lsls	r3, r3, #2
 800bb74:	441a      	add	r2, r3
 800bb76:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800bb7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bb86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	4413      	add	r3, r2
 800bb98:	881b      	ldrh	r3, [r3, #0]
 800bb9a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800bb9e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d01d      	beq.n	800bbe6 <USB_ActivateEndpoint+0x64e>
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	009b      	lsls	r3, r3, #2
 800bbb2:	4413      	add	r3, r2
 800bbb4:	881b      	ldrh	r3, [r3, #0]
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbc0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	441a      	add	r2, r3
 800bbce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bbd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	78db      	ldrb	r3, [r3, #3]
 800bbea:	2b01      	cmp	r3, #1
 800bbec:	d024      	beq.n	800bc38 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	009b      	lsls	r3, r3, #2
 800bbf6:	4413      	add	r3, r2
 800bbf8:	881b      	ldrh	r3, [r3, #0]
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc04:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800bc08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800bc0c:	f083 0320 	eor.w	r3, r3, #32
 800bc10:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	441a      	add	r2, r3
 800bc1e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800bc22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	8013      	strh	r3, [r2, #0]
 800bc36:	e01d      	b.n	800bc74 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	4413      	add	r3, r2
 800bc42:	881b      	ldrh	r3, [r3, #0]
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc4e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	009b      	lsls	r3, r3, #2
 800bc5a:	441a      	add	r2, r3
 800bc5c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800bc60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	4413      	add	r3, r2
 800bc7e:	881b      	ldrh	r3, [r3, #0]
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc8a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	441a      	add	r2, r3
 800bc98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bc9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800bcb0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3774      	adds	r7, #116	; 0x74
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b08d      	sub	sp, #52	; 0x34
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	7b1b      	ldrb	r3, [r3, #12]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	f040 808e 	bne.w	800bdf0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	785b      	ldrb	r3, [r3, #1]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d044      	beq.n	800bd66 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	4413      	add	r3, r2
 800bce6:	881b      	ldrh	r3, [r3, #0]
 800bce8:	81bb      	strh	r3, [r7, #12]
 800bcea:	89bb      	ldrh	r3, [r7, #12]
 800bcec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d01b      	beq.n	800bd2c <USB_DeactivateEndpoint+0x6c>
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	4413      	add	r3, r2
 800bcfe:	881b      	ldrh	r3, [r3, #0]
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd0a:	817b      	strh	r3, [r7, #10]
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	441a      	add	r2, r3
 800bd16:	897b      	ldrh	r3, [r7, #10]
 800bd18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	009b      	lsls	r3, r3, #2
 800bd34:	4413      	add	r3, r2
 800bd36:	881b      	ldrh	r3, [r3, #0]
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd42:	813b      	strh	r3, [r7, #8]
 800bd44:	687a      	ldr	r2, [r7, #4]
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	441a      	add	r2, r3
 800bd4e:	893b      	ldrh	r3, [r7, #8]
 800bd50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	8013      	strh	r3, [r2, #0]
 800bd64:	e192      	b.n	800c08c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	4413      	add	r3, r2
 800bd70:	881b      	ldrh	r3, [r3, #0]
 800bd72:	827b      	strh	r3, [r7, #18]
 800bd74:	8a7b      	ldrh	r3, [r7, #18]
 800bd76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d01b      	beq.n	800bdb6 <USB_DeactivateEndpoint+0xf6>
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	009b      	lsls	r3, r3, #2
 800bd86:	4413      	add	r3, r2
 800bd88:	881b      	ldrh	r3, [r3, #0]
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd94:	823b      	strh	r3, [r7, #16]
 800bd96:	687a      	ldr	r2, [r7, #4]
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	009b      	lsls	r3, r3, #2
 800bd9e:	441a      	add	r2, r3
 800bda0:	8a3b      	ldrh	r3, [r7, #16]
 800bda2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bda6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bdae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	009b      	lsls	r3, r3, #2
 800bdbe:	4413      	add	r3, r2
 800bdc0:	881b      	ldrh	r3, [r3, #0]
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bdc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdcc:	81fb      	strh	r3, [r7, #14]
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	781b      	ldrb	r3, [r3, #0]
 800bdd4:	009b      	lsls	r3, r3, #2
 800bdd6:	441a      	add	r2, r3
 800bdd8:	89fb      	ldrh	r3, [r7, #14]
 800bdda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bde2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bde6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	8013      	strh	r3, [r2, #0]
 800bdee:	e14d      	b.n	800c08c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	785b      	ldrb	r3, [r3, #1]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	f040 80a5 	bne.w	800bf44 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bdfa:	687a      	ldr	r2, [r7, #4]
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	4413      	add	r3, r2
 800be04:	881b      	ldrh	r3, [r3, #0]
 800be06:	843b      	strh	r3, [r7, #32]
 800be08:	8c3b      	ldrh	r3, [r7, #32]
 800be0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d01b      	beq.n	800be4a <USB_DeactivateEndpoint+0x18a>
 800be12:	687a      	ldr	r2, [r7, #4]
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	009b      	lsls	r3, r3, #2
 800be1a:	4413      	add	r3, r2
 800be1c:	881b      	ldrh	r3, [r3, #0]
 800be1e:	b29b      	uxth	r3, r3
 800be20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be28:	83fb      	strh	r3, [r7, #30]
 800be2a:	687a      	ldr	r2, [r7, #4]
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	009b      	lsls	r3, r3, #2
 800be32:	441a      	add	r2, r3
 800be34:	8bfb      	ldrh	r3, [r7, #30]
 800be36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800be42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be46:	b29b      	uxth	r3, r3
 800be48:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	009b      	lsls	r3, r3, #2
 800be52:	4413      	add	r3, r2
 800be54:	881b      	ldrh	r3, [r3, #0]
 800be56:	83bb      	strh	r3, [r7, #28]
 800be58:	8bbb      	ldrh	r3, [r7, #28]
 800be5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d01b      	beq.n	800be9a <USB_DeactivateEndpoint+0x1da>
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	4413      	add	r3, r2
 800be6c:	881b      	ldrh	r3, [r3, #0]
 800be6e:	b29b      	uxth	r3, r3
 800be70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be78:	837b      	strh	r3, [r7, #26]
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	441a      	add	r2, r3
 800be84:	8b7b      	ldrh	r3, [r7, #26]
 800be86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800be96:	b29b      	uxth	r3, r3
 800be98:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800be9a:	687a      	ldr	r2, [r7, #4]
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	009b      	lsls	r3, r3, #2
 800bea2:	4413      	add	r3, r2
 800bea4:	881b      	ldrh	r3, [r3, #0]
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800beac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800beb0:	833b      	strh	r3, [r7, #24]
 800beb2:	687a      	ldr	r2, [r7, #4]
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	009b      	lsls	r3, r3, #2
 800beba:	441a      	add	r2, r3
 800bebc:	8b3b      	ldrh	r3, [r7, #24]
 800bebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800beca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bece:	b29b      	uxth	r3, r3
 800bed0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	4413      	add	r3, r2
 800bedc:	881b      	ldrh	r3, [r3, #0]
 800bede:	b29b      	uxth	r3, r3
 800bee0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bee8:	82fb      	strh	r3, [r7, #22]
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	009b      	lsls	r3, r3, #2
 800bef2:	441a      	add	r2, r3
 800bef4:	8afb      	ldrh	r3, [r7, #22]
 800bef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800befa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800befe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	4413      	add	r3, r2
 800bf14:	881b      	ldrh	r3, [r3, #0]
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf20:	82bb      	strh	r3, [r7, #20]
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	009b      	lsls	r3, r3, #2
 800bf2a:	441a      	add	r2, r3
 800bf2c:	8abb      	ldrh	r3, [r7, #20]
 800bf2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	8013      	strh	r3, [r2, #0]
 800bf42:	e0a3      	b.n	800c08c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	009b      	lsls	r3, r3, #2
 800bf4c:	4413      	add	r3, r2
 800bf4e:	881b      	ldrh	r3, [r3, #0]
 800bf50:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bf52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bf54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d01b      	beq.n	800bf94 <USB_DeactivateEndpoint+0x2d4>
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	4413      	add	r3, r2
 800bf66:	881b      	ldrh	r3, [r3, #0]
 800bf68:	b29b      	uxth	r3, r3
 800bf6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf72:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	441a      	add	r2, r3
 800bf7e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bf80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bf8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	4413      	add	r3, r2
 800bf9e:	881b      	ldrh	r3, [r3, #0]
 800bfa0:	857b      	strh	r3, [r7, #42]	; 0x2a
 800bfa2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bfa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d01b      	beq.n	800bfe4 <USB_DeactivateEndpoint+0x324>
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	009b      	lsls	r3, r3, #2
 800bfb4:	4413      	add	r3, r2
 800bfb6:	881b      	ldrh	r3, [r3, #0]
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bfbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfc2:	853b      	strh	r3, [r7, #40]	; 0x28
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	009b      	lsls	r3, r3, #2
 800bfcc:	441a      	add	r2, r3
 800bfce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bfd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bfd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bfd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bfdc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bfe0:	b29b      	uxth	r3, r3
 800bfe2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	4413      	add	r3, r2
 800bfee:	881b      	ldrh	r3, [r3, #0]
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bffa:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	441a      	add	r2, r3
 800c006:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c00c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c010:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c018:	b29b      	uxth	r3, r3
 800c01a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	4413      	add	r3, r2
 800c026:	881b      	ldrh	r3, [r3, #0]
 800c028:	b29b      	uxth	r3, r3
 800c02a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c02e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c032:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	441a      	add	r2, r3
 800c03e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c040:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c044:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c048:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c04c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c050:	b29b      	uxth	r3, r3
 800c052:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	4413      	add	r3, r2
 800c05e:	881b      	ldrh	r3, [r3, #0]
 800c060:	b29b      	uxth	r3, r3
 800c062:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c06a:	847b      	strh	r3, [r7, #34]	; 0x22
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	441a      	add	r2, r3
 800c076:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c07c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c088:	b29b      	uxth	r3, r3
 800c08a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3734      	adds	r7, #52	; 0x34
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr

0800c09a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c09a:	b580      	push	{r7, lr}
 800c09c:	b0c2      	sub	sp, #264	; 0x108
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0a8:	6018      	str	r0, [r3, #0]
 800c0aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0b2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c0b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	785b      	ldrb	r3, [r3, #1]
 800c0c0:	2b01      	cmp	r3, #1
 800c0c2:	f040 867b 	bne.w	800cdbc <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c0c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	699a      	ldr	r2, [r3, #24]
 800c0d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	691b      	ldr	r3, [r3, #16]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d908      	bls.n	800c0f4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800c0e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	691b      	ldr	r3, [r3, #16]
 800c0ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c0f2:	e007      	b.n	800c104 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800c0f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	699b      	ldr	r3, [r3, #24]
 800c100:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	7b1b      	ldrb	r3, [r3, #12]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d13a      	bne.n	800c18a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	6959      	ldr	r1, [r3, #20]
 800c120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	88da      	ldrh	r2, [r3, #6]
 800c12c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c130:	b29b      	uxth	r3, r3
 800c132:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c136:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c13a:	6800      	ldr	r0, [r0, #0]
 800c13c:	f001 fc1d 	bl	800d97a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c144:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	613b      	str	r3, [r7, #16]
 800c14c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c150:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c15a:	b29b      	uxth	r3, r3
 800c15c:	461a      	mov	r2, r3
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	4413      	add	r3, r2
 800c162:	613b      	str	r3, [r7, #16]
 800c164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	00da      	lsls	r2, r3, #3
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	4413      	add	r3, r2
 800c176:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c17a:	60fb      	str	r3, [r7, #12]
 800c17c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c180:	b29a      	uxth	r2, r3
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	801a      	strh	r2, [r3, #0]
 800c186:	f000 bde3 	b.w	800cd50 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c18a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c18e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	78db      	ldrb	r3, [r3, #3]
 800c196:	2b02      	cmp	r3, #2
 800c198:	f040 843a 	bne.w	800ca10 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c19c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	6a1a      	ldr	r2, [r3, #32]
 800c1a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	691b      	ldr	r3, [r3, #16]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	f240 83b7 	bls.w	800c928 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c1ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	009b      	lsls	r3, r3, #2
 800c1d2:	4413      	add	r3, r2
 800c1d4:	881b      	ldrh	r3, [r3, #0]
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c1dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800c1e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	441a      	add	r2, r3
 800c1fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c20a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800c20e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c212:	b29b      	uxth	r3, r3
 800c214:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c21a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	6a1a      	ldr	r2, [r3, #32]
 800c222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c226:	1ad2      	subs	r2, r2, r3
 800c228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c22c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c238:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	4413      	add	r3, r2
 800c24e:	881b      	ldrh	r3, [r3, #0]
 800c250:	b29b      	uxth	r3, r3
 800c252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c256:	2b00      	cmp	r3, #0
 800c258:	f000 81b3 	beq.w	800c5c2 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c25c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c260:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	633b      	str	r3, [r7, #48]	; 0x30
 800c268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c26c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	785b      	ldrb	r3, [r3, #1]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d16d      	bne.n	800c354 <USB_EPStartXfer+0x2ba>
 800c278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c27c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	62bb      	str	r3, [r7, #40]	; 0x28
 800c284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c288:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c292:	b29b      	uxth	r3, r3
 800c294:	461a      	mov	r2, r3
 800c296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c298:	4413      	add	r3, r2
 800c29a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c29c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	00da      	lsls	r2, r3, #3
 800c2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ac:	4413      	add	r3, r2
 800c2ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c2b2:	627b      	str	r3, [r7, #36]	; 0x24
 800c2b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2b8:	2b3e      	cmp	r3, #62	; 0x3e
 800c2ba:	d91c      	bls.n	800c2f6 <USB_EPStartXfer+0x25c>
 800c2bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2c0:	095b      	lsrs	r3, r3, #5
 800c2c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c2c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2ca:	f003 031f 	and.w	r3, r3, #31
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d104      	bne.n	800c2dc <USB_EPStartXfer+0x242>
 800c2d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c2d6:	3b01      	subs	r3, #1
 800c2d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c2dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c2e0:	b29b      	uxth	r3, r3
 800c2e2:	029b      	lsls	r3, r3, #10
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2ee:	b29a      	uxth	r2, r3
 800c2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f2:	801a      	strh	r2, [r3, #0]
 800c2f4:	e053      	b.n	800c39e <USB_EPStartXfer+0x304>
 800c2f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d112      	bne.n	800c324 <USB_EPStartXfer+0x28a>
 800c2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c300:	881b      	ldrh	r3, [r3, #0]
 800c302:	b29b      	uxth	r3, r3
 800c304:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c308:	b29a      	uxth	r2, r3
 800c30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30c:	801a      	strh	r2, [r3, #0]
 800c30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c310:	881b      	ldrh	r3, [r3, #0]
 800c312:	b29b      	uxth	r3, r3
 800c314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c31c:	b29a      	uxth	r2, r3
 800c31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c320:	801a      	strh	r2, [r3, #0]
 800c322:	e03c      	b.n	800c39e <USB_EPStartXfer+0x304>
 800c324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c328:	085b      	lsrs	r3, r3, #1
 800c32a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c332:	f003 0301 	and.w	r3, r3, #1
 800c336:	2b00      	cmp	r3, #0
 800c338:	d004      	beq.n	800c344 <USB_EPStartXfer+0x2aa>
 800c33a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c33e:	3301      	adds	r3, #1
 800c340:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c344:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c348:	b29b      	uxth	r3, r3
 800c34a:	029b      	lsls	r3, r3, #10
 800c34c:	b29a      	uxth	r2, r3
 800c34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c350:	801a      	strh	r2, [r3, #0]
 800c352:	e024      	b.n	800c39e <USB_EPStartXfer+0x304>
 800c354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	785b      	ldrb	r3, [r3, #1]
 800c360:	2b01      	cmp	r3, #1
 800c362:	d11c      	bne.n	800c39e <USB_EPStartXfer+0x304>
 800c364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c368:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c372:	b29b      	uxth	r3, r3
 800c374:	461a      	mov	r2, r3
 800c376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c378:	4413      	add	r3, r2
 800c37a:	633b      	str	r3, [r7, #48]	; 0x30
 800c37c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	00da      	lsls	r2, r3, #3
 800c38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38c:	4413      	add	r3, r2
 800c38e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c392:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c398:	b29a      	uxth	r2, r3
 800c39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c39e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	895b      	ldrh	r3, [r3, #10]
 800c3aa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c3ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	6959      	ldr	r1, [r3, #20]
 800c3ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c3c4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c3c8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c3cc:	6800      	ldr	r0, [r0, #0]
 800c3ce:	f001 fad4 	bl	800d97a <USB_WritePMA>
            ep->xfer_buff += len;
 800c3d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	695a      	ldr	r2, [r3, #20]
 800c3de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3e2:	441a      	add	r2, r3
 800c3e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c3f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	6a1a      	ldr	r2, [r3, #32]
 800c3fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	691b      	ldr	r3, [r3, #16]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d90f      	bls.n	800c42c <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800c40c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	6a1a      	ldr	r2, [r3, #32]
 800c418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c41c:	1ad2      	subs	r2, r2, r3
 800c41e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	621a      	str	r2, [r3, #32]
 800c42a:	e00e      	b.n	800c44a <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800c42c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	6a1b      	ldr	r3, [r3, #32]
 800c438:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800c43c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2200      	movs	r2, #0
 800c448:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c44a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c44e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	785b      	ldrb	r3, [r3, #1]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d16d      	bne.n	800c536 <USB_EPStartXfer+0x49c>
 800c45a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c45e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	61bb      	str	r3, [r7, #24]
 800c466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c46a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c474:	b29b      	uxth	r3, r3
 800c476:	461a      	mov	r2, r3
 800c478:	69bb      	ldr	r3, [r7, #24]
 800c47a:	4413      	add	r3, r2
 800c47c:	61bb      	str	r3, [r7, #24]
 800c47e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	00da      	lsls	r2, r3, #3
 800c48c:	69bb      	ldr	r3, [r7, #24]
 800c48e:	4413      	add	r3, r2
 800c490:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c494:	617b      	str	r3, [r7, #20]
 800c496:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c49a:	2b3e      	cmp	r3, #62	; 0x3e
 800c49c:	d91c      	bls.n	800c4d8 <USB_EPStartXfer+0x43e>
 800c49e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4a2:	095b      	lsrs	r3, r3, #5
 800c4a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c4a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4ac:	f003 031f 	and.w	r3, r3, #31
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d104      	bne.n	800c4be <USB_EPStartXfer+0x424>
 800c4b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c4b8:	3b01      	subs	r3, #1
 800c4ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c4be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	029b      	lsls	r3, r3, #10
 800c4c6:	b29b      	uxth	r3, r3
 800c4c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4d0:	b29a      	uxth	r2, r3
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	801a      	strh	r2, [r3, #0]
 800c4d6:	e059      	b.n	800c58c <USB_EPStartXfer+0x4f2>
 800c4d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d112      	bne.n	800c506 <USB_EPStartXfer+0x46c>
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	881b      	ldrh	r3, [r3, #0]
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c4ea:	b29a      	uxth	r2, r3
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	801a      	strh	r2, [r3, #0]
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	881b      	ldrh	r3, [r3, #0]
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4fe:	b29a      	uxth	r2, r3
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	801a      	strh	r2, [r3, #0]
 800c504:	e042      	b.n	800c58c <USB_EPStartXfer+0x4f2>
 800c506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c50a:	085b      	lsrs	r3, r3, #1
 800c50c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c514:	f003 0301 	and.w	r3, r3, #1
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d004      	beq.n	800c526 <USB_EPStartXfer+0x48c>
 800c51c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c520:	3301      	adds	r3, #1
 800c522:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	029b      	lsls	r3, r3, #10
 800c52e:	b29a      	uxth	r2, r3
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	801a      	strh	r2, [r3, #0]
 800c534:	e02a      	b.n	800c58c <USB_EPStartXfer+0x4f2>
 800c536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c53a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	785b      	ldrb	r3, [r3, #1]
 800c542:	2b01      	cmp	r3, #1
 800c544:	d122      	bne.n	800c58c <USB_EPStartXfer+0x4f2>
 800c546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c54a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	623b      	str	r3, [r7, #32]
 800c552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c556:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c560:	b29b      	uxth	r3, r3
 800c562:	461a      	mov	r2, r3
 800c564:	6a3b      	ldr	r3, [r7, #32]
 800c566:	4413      	add	r3, r2
 800c568:	623b      	str	r3, [r7, #32]
 800c56a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c56e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	00da      	lsls	r2, r3, #3
 800c578:	6a3b      	ldr	r3, [r7, #32]
 800c57a:	4413      	add	r3, r2
 800c57c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c580:	61fb      	str	r3, [r7, #28]
 800c582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c586:	b29a      	uxth	r2, r3
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c58c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	891b      	ldrh	r3, [r3, #8]
 800c598:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c59c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	6959      	ldr	r1, [r3, #20]
 800c5a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c5b2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c5b6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c5ba:	6800      	ldr	r0, [r0, #0]
 800c5bc:	f001 f9dd 	bl	800d97a <USB_WritePMA>
 800c5c0:	e3c6      	b.n	800cd50 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c5c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	785b      	ldrb	r3, [r3, #1]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d16d      	bne.n	800c6ae <USB_EPStartXfer+0x614>
 800c5d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800c5de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5f2:	4413      	add	r3, r2
 800c5f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c5f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	00da      	lsls	r2, r3, #3
 800c604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c606:	4413      	add	r3, r2
 800c608:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c60c:	647b      	str	r3, [r7, #68]	; 0x44
 800c60e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c612:	2b3e      	cmp	r3, #62	; 0x3e
 800c614:	d91c      	bls.n	800c650 <USB_EPStartXfer+0x5b6>
 800c616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c61a:	095b      	lsrs	r3, r3, #5
 800c61c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c624:	f003 031f 	and.w	r3, r3, #31
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d104      	bne.n	800c636 <USB_EPStartXfer+0x59c>
 800c62c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c630:	3b01      	subs	r3, #1
 800c632:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c636:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	029b      	lsls	r3, r3, #10
 800c63e:	b29b      	uxth	r3, r3
 800c640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c648:	b29a      	uxth	r2, r3
 800c64a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c64c:	801a      	strh	r2, [r3, #0]
 800c64e:	e059      	b.n	800c704 <USB_EPStartXfer+0x66a>
 800c650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c654:	2b00      	cmp	r3, #0
 800c656:	d112      	bne.n	800c67e <USB_EPStartXfer+0x5e4>
 800c658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c65a:	881b      	ldrh	r3, [r3, #0]
 800c65c:	b29b      	uxth	r3, r3
 800c65e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c662:	b29a      	uxth	r2, r3
 800c664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c666:	801a      	strh	r2, [r3, #0]
 800c668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c66a:	881b      	ldrh	r3, [r3, #0]
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c676:	b29a      	uxth	r2, r3
 800c678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c67a:	801a      	strh	r2, [r3, #0]
 800c67c:	e042      	b.n	800c704 <USB_EPStartXfer+0x66a>
 800c67e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c682:	085b      	lsrs	r3, r3, #1
 800c684:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c68c:	f003 0301 	and.w	r3, r3, #1
 800c690:	2b00      	cmp	r3, #0
 800c692:	d004      	beq.n	800c69e <USB_EPStartXfer+0x604>
 800c694:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c698:	3301      	adds	r3, #1
 800c69a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c69e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	029b      	lsls	r3, r3, #10
 800c6a6:	b29a      	uxth	r2, r3
 800c6a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6aa:	801a      	strh	r2, [r3, #0]
 800c6ac:	e02a      	b.n	800c704 <USB_EPStartXfer+0x66a>
 800c6ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	785b      	ldrb	r3, [r3, #1]
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d122      	bne.n	800c704 <USB_EPStartXfer+0x66a>
 800c6be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	653b      	str	r3, [r7, #80]	; 0x50
 800c6ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	461a      	mov	r2, r3
 800c6dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6de:	4413      	add	r3, r2
 800c6e0:	653b      	str	r3, [r7, #80]	; 0x50
 800c6e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	00da      	lsls	r2, r3, #3
 800c6f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6f2:	4413      	add	r3, r2
 800c6f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c6f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6fe:	b29a      	uxth	r2, r3
 800c700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c702:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	891b      	ldrh	r3, [r3, #8]
 800c710:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	6959      	ldr	r1, [r3, #20]
 800c720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c724:	b29b      	uxth	r3, r3
 800c726:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c72a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c72e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c732:	6800      	ldr	r0, [r0, #0]
 800c734:	f001 f921 	bl	800d97a <USB_WritePMA>
            ep->xfer_buff += len;
 800c738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c73c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	695a      	ldr	r2, [r3, #20]
 800c744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c748:	441a      	add	r2, r3
 800c74a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c74e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c75a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	6a1a      	ldr	r2, [r3, #32]
 800c762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	691b      	ldr	r3, [r3, #16]
 800c76e:	429a      	cmp	r2, r3
 800c770:	d90f      	bls.n	800c792 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800c772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	6a1a      	ldr	r2, [r3, #32]
 800c77e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c782:	1ad2      	subs	r2, r2, r3
 800c784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	621a      	str	r2, [r3, #32]
 800c790:	e00e      	b.n	800c7b0 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800c792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	6a1b      	ldr	r3, [r3, #32]
 800c79e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800c7a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c7b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	643b      	str	r3, [r7, #64]	; 0x40
 800c7bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	785b      	ldrb	r3, [r3, #1]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d16d      	bne.n	800c8a8 <USB_EPStartXfer+0x80e>
 800c7cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ec:	4413      	add	r3, r2
 800c7ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	00da      	lsls	r2, r3, #3
 800c7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c800:	4413      	add	r3, r2
 800c802:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c806:	637b      	str	r3, [r7, #52]	; 0x34
 800c808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c80c:	2b3e      	cmp	r3, #62	; 0x3e
 800c80e:	d91c      	bls.n	800c84a <USB_EPStartXfer+0x7b0>
 800c810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c814:	095b      	lsrs	r3, r3, #5
 800c816:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c81a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c81e:	f003 031f 	and.w	r3, r3, #31
 800c822:	2b00      	cmp	r3, #0
 800c824:	d104      	bne.n	800c830 <USB_EPStartXfer+0x796>
 800c826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c82a:	3b01      	subs	r3, #1
 800c82c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c834:	b29b      	uxth	r3, r3
 800c836:	029b      	lsls	r3, r3, #10
 800c838:	b29b      	uxth	r3, r3
 800c83a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c83e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c842:	b29a      	uxth	r2, r3
 800c844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c846:	801a      	strh	r2, [r3, #0]
 800c848:	e053      	b.n	800c8f2 <USB_EPStartXfer+0x858>
 800c84a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d112      	bne.n	800c878 <USB_EPStartXfer+0x7de>
 800c852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c854:	881b      	ldrh	r3, [r3, #0]
 800c856:	b29b      	uxth	r3, r3
 800c858:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c85c:	b29a      	uxth	r2, r3
 800c85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c860:	801a      	strh	r2, [r3, #0]
 800c862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c864:	881b      	ldrh	r3, [r3, #0]
 800c866:	b29b      	uxth	r3, r3
 800c868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c86c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c870:	b29a      	uxth	r2, r3
 800c872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c874:	801a      	strh	r2, [r3, #0]
 800c876:	e03c      	b.n	800c8f2 <USB_EPStartXfer+0x858>
 800c878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c87c:	085b      	lsrs	r3, r3, #1
 800c87e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c886:	f003 0301 	and.w	r3, r3, #1
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d004      	beq.n	800c898 <USB_EPStartXfer+0x7fe>
 800c88e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c892:	3301      	adds	r3, #1
 800c894:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	029b      	lsls	r3, r3, #10
 800c8a0:	b29a      	uxth	r2, r3
 800c8a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a4:	801a      	strh	r2, [r3, #0]
 800c8a6:	e024      	b.n	800c8f2 <USB_EPStartXfer+0x858>
 800c8a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	785b      	ldrb	r3, [r3, #1]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d11c      	bne.n	800c8f2 <USB_EPStartXfer+0x858>
 800c8b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8cc:	4413      	add	r3, r2
 800c8ce:	643b      	str	r3, [r7, #64]	; 0x40
 800c8d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	00da      	lsls	r2, r3, #3
 800c8de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8e0:	4413      	add	r3, r2
 800c8e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8ec:	b29a      	uxth	r2, r3
 800c8ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c8f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	895b      	ldrh	r3, [r3, #10]
 800c8fe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	6959      	ldr	r1, [r3, #20]
 800c90e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c912:	b29b      	uxth	r3, r3
 800c914:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c918:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c91c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c920:	6800      	ldr	r0, [r0, #0]
 800c922:	f001 f82a 	bl	800d97a <USB_WritePMA>
 800c926:	e213      	b.n	800cd50 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c92c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	6a1b      	ldr	r3, [r3, #32]
 800c934:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c93c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	009b      	lsls	r3, r3, #2
 800c950:	4413      	add	r3, r2
 800c952:	881b      	ldrh	r3, [r3, #0]
 800c954:	b29b      	uxth	r3, r3
 800c956:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800c95a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c95e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800c962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c966:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c96a:	681a      	ldr	r2, [r3, #0]
 800c96c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	009b      	lsls	r3, r3, #2
 800c97a:	441a      	add	r2, r3
 800c97c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c98c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c990:	b29b      	uxth	r3, r3
 800c992:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c998:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c9a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9b4:	4413      	add	r3, r2
 800c9b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c9b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	00da      	lsls	r2, r3, #3
 800c9c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9c8:	4413      	add	r3, r2
 800c9ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c9ce:	65bb      	str	r3, [r7, #88]	; 0x58
 800c9d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9d4:	b29a      	uxth	r2, r3
 800c9d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9d8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c9da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	891b      	ldrh	r3, [r3, #8]
 800c9e6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c9ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	6959      	ldr	r1, [r3, #20]
 800c9f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9fa:	b29b      	uxth	r3, r3
 800c9fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ca00:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ca04:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ca08:	6800      	ldr	r0, [r0, #0]
 800ca0a:	f000 ffb6 	bl	800d97a <USB_WritePMA>
 800ca0e:	e19f      	b.n	800cd50 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ca10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	6a1a      	ldr	r2, [r3, #32]
 800ca1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca20:	1ad2      	subs	r2, r2, r3
 800ca22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ca2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	781b      	ldrb	r3, [r3, #0]
 800ca44:	009b      	lsls	r3, r3, #2
 800ca46:	4413      	add	r3, r2
 800ca48:	881b      	ldrh	r3, [r3, #0]
 800ca4a:	b29b      	uxth	r3, r3
 800ca4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	f000 80bc 	beq.w	800cbce <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ca56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	673b      	str	r3, [r7, #112]	; 0x70
 800ca62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	785b      	ldrb	r3, [r3, #1]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d16d      	bne.n	800cb4e <USB_EPStartXfer+0xab4>
 800ca72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ca7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca8c:	b29b      	uxth	r3, r3
 800ca8e:	461a      	mov	r2, r3
 800ca90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ca92:	4413      	add	r3, r2
 800ca94:	66bb      	str	r3, [r7, #104]	; 0x68
 800ca96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	00da      	lsls	r2, r3, #3
 800caa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800caa6:	4413      	add	r3, r2
 800caa8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800caac:	667b      	str	r3, [r7, #100]	; 0x64
 800caae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cab2:	2b3e      	cmp	r3, #62	; 0x3e
 800cab4:	d91c      	bls.n	800caf0 <USB_EPStartXfer+0xa56>
 800cab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800caba:	095b      	lsrs	r3, r3, #5
 800cabc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cac4:	f003 031f 	and.w	r3, r3, #31
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d104      	bne.n	800cad6 <USB_EPStartXfer+0xa3c>
 800cacc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cad0:	3b01      	subs	r3, #1
 800cad2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cad6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cada:	b29b      	uxth	r3, r3
 800cadc:	029b      	lsls	r3, r3, #10
 800cade:	b29b      	uxth	r3, r3
 800cae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cae8:	b29a      	uxth	r2, r3
 800caea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800caec:	801a      	strh	r2, [r3, #0]
 800caee:	e053      	b.n	800cb98 <USB_EPStartXfer+0xafe>
 800caf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d112      	bne.n	800cb1e <USB_EPStartXfer+0xa84>
 800caf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cafa:	881b      	ldrh	r3, [r3, #0]
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cb02:	b29a      	uxth	r2, r3
 800cb04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb06:	801a      	strh	r2, [r3, #0]
 800cb08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb0a:	881b      	ldrh	r3, [r3, #0]
 800cb0c:	b29b      	uxth	r3, r3
 800cb0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb16:	b29a      	uxth	r2, r3
 800cb18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb1a:	801a      	strh	r2, [r3, #0]
 800cb1c:	e03c      	b.n	800cb98 <USB_EPStartXfer+0xafe>
 800cb1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb22:	085b      	lsrs	r3, r3, #1
 800cb24:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cb28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb2c:	f003 0301 	and.w	r3, r3, #1
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d004      	beq.n	800cb3e <USB_EPStartXfer+0xaa4>
 800cb34:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cb38:	3301      	adds	r3, #1
 800cb3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cb3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	029b      	lsls	r3, r3, #10
 800cb46:	b29a      	uxth	r2, r3
 800cb48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb4a:	801a      	strh	r2, [r3, #0]
 800cb4c:	e024      	b.n	800cb98 <USB_EPStartXfer+0xafe>
 800cb4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	785b      	ldrb	r3, [r3, #1]
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	d11c      	bne.n	800cb98 <USB_EPStartXfer+0xafe>
 800cb5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	461a      	mov	r2, r3
 800cb70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cb72:	4413      	add	r3, r2
 800cb74:	673b      	str	r3, [r7, #112]	; 0x70
 800cb76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	00da      	lsls	r2, r3, #3
 800cb84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cb86:	4413      	add	r3, r2
 800cb88:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cb8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cb8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb92:	b29a      	uxth	r2, r3
 800cb94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb96:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800cb98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	895b      	ldrh	r3, [r3, #10]
 800cba4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	6959      	ldr	r1, [r3, #20]
 800cbb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cbbe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cbc2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800cbc6:	6800      	ldr	r0, [r0, #0]
 800cbc8:	f000 fed7 	bl	800d97a <USB_WritePMA>
 800cbcc:	e0c0      	b.n	800cd50 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cbce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	785b      	ldrb	r3, [r3, #1]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d16d      	bne.n	800ccba <USB_EPStartXfer+0xc20>
 800cbde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbe2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cbea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cbf8:	b29b      	uxth	r3, r3
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cbfe:	4413      	add	r3, r2
 800cc00:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cc02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	00da      	lsls	r2, r3, #3
 800cc10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cc12:	4413      	add	r3, r2
 800cc14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cc18:	67bb      	str	r3, [r7, #120]	; 0x78
 800cc1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc1e:	2b3e      	cmp	r3, #62	; 0x3e
 800cc20:	d91c      	bls.n	800cc5c <USB_EPStartXfer+0xbc2>
 800cc22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc26:	095b      	lsrs	r3, r3, #5
 800cc28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cc2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc30:	f003 031f 	and.w	r3, r3, #31
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d104      	bne.n	800cc42 <USB_EPStartXfer+0xba8>
 800cc38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800cc3c:	3b01      	subs	r3, #1
 800cc3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cc42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	029b      	lsls	r3, r3, #10
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc54:	b29a      	uxth	r2, r3
 800cc56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc58:	801a      	strh	r2, [r3, #0]
 800cc5a:	e05f      	b.n	800cd1c <USB_EPStartXfer+0xc82>
 800cc5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d112      	bne.n	800cc8a <USB_EPStartXfer+0xbf0>
 800cc64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc66:	881b      	ldrh	r3, [r3, #0]
 800cc68:	b29b      	uxth	r3, r3
 800cc6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cc6e:	b29a      	uxth	r2, r3
 800cc70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc72:	801a      	strh	r2, [r3, #0]
 800cc74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc76:	881b      	ldrh	r3, [r3, #0]
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc82:	b29a      	uxth	r2, r3
 800cc84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc86:	801a      	strh	r2, [r3, #0]
 800cc88:	e048      	b.n	800cd1c <USB_EPStartXfer+0xc82>
 800cc8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc8e:	085b      	lsrs	r3, r3, #1
 800cc90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cc94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc98:	f003 0301 	and.w	r3, r3, #1
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d004      	beq.n	800ccaa <USB_EPStartXfer+0xc10>
 800cca0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800cca4:	3301      	adds	r3, #1
 800cca6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ccaa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	029b      	lsls	r3, r3, #10
 800ccb2:	b29a      	uxth	r2, r3
 800ccb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ccb6:	801a      	strh	r2, [r3, #0]
 800ccb8:	e030      	b.n	800cd1c <USB_EPStartXfer+0xc82>
 800ccba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	785b      	ldrb	r3, [r3, #1]
 800ccc6:	2b01      	cmp	r3, #1
 800ccc8:	d128      	bne.n	800cd1c <USB_EPStartXfer+0xc82>
 800ccca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ccd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	461a      	mov	r2, r3
 800ccea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ccee:	4413      	add	r3, r2
 800ccf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ccf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	00da      	lsls	r2, r3, #3
 800cd02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cd06:	4413      	add	r3, r2
 800cd08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cd0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cd10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd14:	b29a      	uxth	r2, r3
 800cd16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cd1a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cd1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	891b      	ldrh	r3, [r3, #8]
 800cd28:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cd2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	6959      	ldr	r1, [r3, #20]
 800cd38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cd42:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cd46:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800cd4a:	6800      	ldr	r0, [r0, #0]
 800cd4c:	f000 fe15 	bl	800d97a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800cd50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd58:	681a      	ldr	r2, [r3, #0]
 800cd5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	009b      	lsls	r3, r3, #2
 800cd68:	4413      	add	r3, r2
 800cd6a:	881b      	ldrh	r3, [r3, #0]
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd76:	817b      	strh	r3, [r7, #10]
 800cd78:	897b      	ldrh	r3, [r7, #10]
 800cd7a:	f083 0310 	eor.w	r3, r3, #16
 800cd7e:	817b      	strh	r3, [r7, #10]
 800cd80:	897b      	ldrh	r3, [r7, #10]
 800cd82:	f083 0320 	eor.w	r3, r3, #32
 800cd86:	817b      	strh	r3, [r7, #10]
 800cd88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	009b      	lsls	r3, r3, #2
 800cda0:	441a      	add	r2, r3
 800cda2:	897b      	ldrh	r3, [r7, #10]
 800cda4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cda8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cdac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	8013      	strh	r3, [r2, #0]
 800cdb8:	f000 bc9f 	b.w	800d6fa <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800cdbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	7b1b      	ldrb	r3, [r3, #12]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	f040 80ae 	bne.w	800cf2a <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800cdce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	699a      	ldr	r2, [r3, #24]
 800cdda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	691b      	ldr	r3, [r3, #16]
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d917      	bls.n	800ce1a <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800cdea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	691b      	ldr	r3, [r3, #16]
 800cdf6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800cdfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	699a      	ldr	r2, [r3, #24]
 800ce06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce0a:	1ad2      	subs	r2, r2, r3
 800ce0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	619a      	str	r2, [r3, #24]
 800ce18:	e00e      	b.n	800ce38 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800ce1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	699b      	ldr	r3, [r3, #24]
 800ce26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800ce2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	2200      	movs	r2, #0
 800ce36:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ce38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ce46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce54:	b29b      	uxth	r3, r3
 800ce56:	461a      	mov	r2, r3
 800ce58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ce5c:	4413      	add	r3, r2
 800ce5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ce62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	00da      	lsls	r2, r3, #3
 800ce70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ce74:	4413      	add	r3, r2
 800ce76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ce7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ce7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce82:	2b3e      	cmp	r3, #62	; 0x3e
 800ce84:	d91d      	bls.n	800cec2 <USB_EPStartXfer+0xe28>
 800ce86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce8a:	095b      	lsrs	r3, r3, #5
 800ce8c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ce90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce94:	f003 031f 	and.w	r3, r3, #31
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d104      	bne.n	800cea6 <USB_EPStartXfer+0xe0c>
 800ce9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cea0:	3b01      	subs	r3, #1
 800cea2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cea6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	029b      	lsls	r3, r3, #10
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ceb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ceb8:	b29a      	uxth	r2, r3
 800ceba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cebe:	801a      	strh	r2, [r3, #0]
 800cec0:	e3e1      	b.n	800d686 <USB_EPStartXfer+0x15ec>
 800cec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d116      	bne.n	800cef8 <USB_EPStartXfer+0xe5e>
 800ceca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cece:	881b      	ldrh	r3, [r3, #0]
 800ced0:	b29b      	uxth	r3, r3
 800ced2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ced6:	b29a      	uxth	r2, r3
 800ced8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cedc:	801a      	strh	r2, [r3, #0]
 800cede:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cee2:	881b      	ldrh	r3, [r3, #0]
 800cee4:	b29b      	uxth	r3, r3
 800cee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ceea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ceee:	b29a      	uxth	r2, r3
 800cef0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cef4:	801a      	strh	r2, [r3, #0]
 800cef6:	e3c6      	b.n	800d686 <USB_EPStartXfer+0x15ec>
 800cef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cefc:	085b      	lsrs	r3, r3, #1
 800cefe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cf02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf06:	f003 0301 	and.w	r3, r3, #1
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d004      	beq.n	800cf18 <USB_EPStartXfer+0xe7e>
 800cf0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cf12:	3301      	adds	r3, #1
 800cf14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cf18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	029b      	lsls	r3, r3, #10
 800cf20:	b29a      	uxth	r2, r3
 800cf22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cf26:	801a      	strh	r2, [r3, #0]
 800cf28:	e3ad      	b.n	800d686 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800cf2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	78db      	ldrb	r3, [r3, #3]
 800cf36:	2b02      	cmp	r3, #2
 800cf38:	f040 8200 	bne.w	800d33c <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800cf3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	785b      	ldrb	r3, [r3, #1]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f040 8091 	bne.w	800d070 <USB_EPStartXfer+0xfd6>
 800cf4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cf5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	461a      	mov	r2, r3
 800cf6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cf72:	4413      	add	r3, r2
 800cf74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cf78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	00da      	lsls	r2, r3, #3
 800cf86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cf8a:	4413      	add	r3, r2
 800cf8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cf90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cf94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	691b      	ldr	r3, [r3, #16]
 800cfa0:	2b3e      	cmp	r3, #62	; 0x3e
 800cfa2:	d925      	bls.n	800cff0 <USB_EPStartXfer+0xf56>
 800cfa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	691b      	ldr	r3, [r3, #16]
 800cfb0:	095b      	lsrs	r3, r3, #5
 800cfb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cfb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	691b      	ldr	r3, [r3, #16]
 800cfc2:	f003 031f 	and.w	r3, r3, #31
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d104      	bne.n	800cfd4 <USB_EPStartXfer+0xf3a>
 800cfca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfce:	3b01      	subs	r3, #1
 800cfd0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cfd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	029b      	lsls	r3, r3, #10
 800cfdc:	b29b      	uxth	r3, r3
 800cfde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfe6:	b29a      	uxth	r2, r3
 800cfe8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cfec:	801a      	strh	r2, [r3, #0]
 800cfee:	e074      	b.n	800d0da <USB_EPStartXfer+0x1040>
 800cff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	691b      	ldr	r3, [r3, #16]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d116      	bne.n	800d02e <USB_EPStartXfer+0xf94>
 800d000:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d004:	881b      	ldrh	r3, [r3, #0]
 800d006:	b29b      	uxth	r3, r3
 800d008:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d00c:	b29a      	uxth	r2, r3
 800d00e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d012:	801a      	strh	r2, [r3, #0]
 800d014:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d018:	881b      	ldrh	r3, [r3, #0]
 800d01a:	b29b      	uxth	r3, r3
 800d01c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d024:	b29a      	uxth	r2, r3
 800d026:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d02a:	801a      	strh	r2, [r3, #0]
 800d02c:	e055      	b.n	800d0da <USB_EPStartXfer+0x1040>
 800d02e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	691b      	ldr	r3, [r3, #16]
 800d03a:	085b      	lsrs	r3, r3, #1
 800d03c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	691b      	ldr	r3, [r3, #16]
 800d04c:	f003 0301 	and.w	r3, r3, #1
 800d050:	2b00      	cmp	r3, #0
 800d052:	d004      	beq.n	800d05e <USB_EPStartXfer+0xfc4>
 800d054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d058:	3301      	adds	r3, #1
 800d05a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d05e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d062:	b29b      	uxth	r3, r3
 800d064:	029b      	lsls	r3, r3, #10
 800d066:	b29a      	uxth	r2, r3
 800d068:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d06c:	801a      	strh	r2, [r3, #0]
 800d06e:	e034      	b.n	800d0da <USB_EPStartXfer+0x1040>
 800d070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	785b      	ldrb	r3, [r3, #1]
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d12c      	bne.n	800d0da <USB_EPStartXfer+0x1040>
 800d080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d084:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d08e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d092:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d09c:	b29b      	uxth	r3, r3
 800d09e:	461a      	mov	r2, r3
 800d0a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d0a4:	4413      	add	r3, r2
 800d0a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d0aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	781b      	ldrb	r3, [r3, #0]
 800d0b6:	00da      	lsls	r2, r3, #3
 800d0b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d0bc:	4413      	add	r3, r2
 800d0be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d0c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d0c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	691b      	ldr	r3, [r3, #16]
 800d0d2:	b29a      	uxth	r2, r3
 800d0d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d0d8:	801a      	strh	r2, [r3, #0]
 800d0da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d0e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	785b      	ldrb	r3, [r3, #1]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	f040 8091 	bne.w	800d21c <USB_EPStartXfer+0x1182>
 800d0fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d10c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d116:	b29b      	uxth	r3, r3
 800d118:	461a      	mov	r2, r3
 800d11a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d11e:	4413      	add	r3, r2
 800d120:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	00da      	lsls	r2, r3, #3
 800d132:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d136:	4413      	add	r3, r2
 800d138:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d13c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	691b      	ldr	r3, [r3, #16]
 800d14c:	2b3e      	cmp	r3, #62	; 0x3e
 800d14e:	d925      	bls.n	800d19c <USB_EPStartXfer+0x1102>
 800d150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	691b      	ldr	r3, [r3, #16]
 800d15c:	095b      	lsrs	r3, r3, #5
 800d15e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	691b      	ldr	r3, [r3, #16]
 800d16e:	f003 031f 	and.w	r3, r3, #31
 800d172:	2b00      	cmp	r3, #0
 800d174:	d104      	bne.n	800d180 <USB_EPStartXfer+0x10e6>
 800d176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d17a:	3b01      	subs	r3, #1
 800d17c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d184:	b29b      	uxth	r3, r3
 800d186:	029b      	lsls	r3, r3, #10
 800d188:	b29b      	uxth	r3, r3
 800d18a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d18e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d192:	b29a      	uxth	r2, r3
 800d194:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d198:	801a      	strh	r2, [r3, #0]
 800d19a:	e06d      	b.n	800d278 <USB_EPStartXfer+0x11de>
 800d19c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	691b      	ldr	r3, [r3, #16]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d116      	bne.n	800d1da <USB_EPStartXfer+0x1140>
 800d1ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d1b0:	881b      	ldrh	r3, [r3, #0]
 800d1b2:	b29b      	uxth	r3, r3
 800d1b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d1b8:	b29a      	uxth	r2, r3
 800d1ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d1be:	801a      	strh	r2, [r3, #0]
 800d1c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d1c4:	881b      	ldrh	r3, [r3, #0]
 800d1c6:	b29b      	uxth	r3, r3
 800d1c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1d0:	b29a      	uxth	r2, r3
 800d1d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d1d6:	801a      	strh	r2, [r3, #0]
 800d1d8:	e04e      	b.n	800d278 <USB_EPStartXfer+0x11de>
 800d1da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	691b      	ldr	r3, [r3, #16]
 800d1e6:	085b      	lsrs	r3, r3, #1
 800d1e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d1ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	691b      	ldr	r3, [r3, #16]
 800d1f8:	f003 0301 	and.w	r3, r3, #1
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d004      	beq.n	800d20a <USB_EPStartXfer+0x1170>
 800d200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d204:	3301      	adds	r3, #1
 800d206:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d20a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d20e:	b29b      	uxth	r3, r3
 800d210:	029b      	lsls	r3, r3, #10
 800d212:	b29a      	uxth	r2, r3
 800d214:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d218:	801a      	strh	r2, [r3, #0]
 800d21a:	e02d      	b.n	800d278 <USB_EPStartXfer+0x11de>
 800d21c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	785b      	ldrb	r3, [r3, #1]
 800d228:	2b01      	cmp	r3, #1
 800d22a:	d125      	bne.n	800d278 <USB_EPStartXfer+0x11de>
 800d22c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d230:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	461a      	mov	r2, r3
 800d23e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d242:	4413      	add	r3, r2
 800d244:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d24c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	00da      	lsls	r2, r3, #3
 800d256:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d25a:	4413      	add	r3, r2
 800d25c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d260:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	691b      	ldr	r3, [r3, #16]
 800d270:	b29a      	uxth	r2, r3
 800d272:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d276:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d27c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	69db      	ldr	r3, [r3, #28]
 800d284:	2b00      	cmp	r3, #0
 800d286:	f000 81fe 	beq.w	800d686 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d28a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d28e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d292:	681a      	ldr	r2, [r3, #0]
 800d294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	009b      	lsls	r3, r3, #2
 800d2a2:	4413      	add	r3, r2
 800d2a4:	881b      	ldrh	r3, [r3, #0]
 800d2a6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d2aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d2ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d005      	beq.n	800d2c2 <USB_EPStartXfer+0x1228>
 800d2b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d2ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d10d      	bne.n	800d2de <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d2c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d2c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	f040 81db 	bne.w	800d686 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d2d0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d2d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	f040 81d4 	bne.w	800d686 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d2de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d2e6:	681a      	ldr	r2, [r3, #0]
 800d2e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	009b      	lsls	r3, r3, #2
 800d2f6:	4413      	add	r3, r2
 800d2f8:	881b      	ldrh	r3, [r3, #0]
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d304:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800d308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d30c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d310:	681a      	ldr	r2, [r3, #0]
 800d312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	441a      	add	r2, r3
 800d322:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800d326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d32a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d32e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d332:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d336:	b29b      	uxth	r3, r3
 800d338:	8013      	strh	r3, [r2, #0]
 800d33a:	e1a4      	b.n	800d686 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d33c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	78db      	ldrb	r3, [r3, #3]
 800d348:	2b01      	cmp	r3, #1
 800d34a:	f040 819a 	bne.w	800d682 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d34e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	699a      	ldr	r2, [r3, #24]
 800d35a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d35e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	691b      	ldr	r3, [r3, #16]
 800d366:	429a      	cmp	r2, r3
 800d368:	d917      	bls.n	800d39a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800d36a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d36e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	691b      	ldr	r3, [r3, #16]
 800d376:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800d37a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d37e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	699a      	ldr	r2, [r3, #24]
 800d386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d38a:	1ad2      	subs	r2, r2, r3
 800d38c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	619a      	str	r2, [r3, #24]
 800d398:	e00e      	b.n	800d3b8 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800d39a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d39e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	699b      	ldr	r3, [r3, #24]
 800d3a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800d3aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d3b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	785b      	ldrb	r3, [r3, #1]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d178      	bne.n	800d4ba <USB_EPStartXfer+0x1420>
 800d3c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d3d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	461a      	mov	r2, r3
 800d3e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d3ec:	4413      	add	r3, r2
 800d3ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d3f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	781b      	ldrb	r3, [r3, #0]
 800d3fe:	00da      	lsls	r2, r3, #3
 800d400:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d404:	4413      	add	r3, r2
 800d406:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d40a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d40e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d412:	2b3e      	cmp	r3, #62	; 0x3e
 800d414:	d91d      	bls.n	800d452 <USB_EPStartXfer+0x13b8>
 800d416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d41a:	095b      	lsrs	r3, r3, #5
 800d41c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d424:	f003 031f 	and.w	r3, r3, #31
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d104      	bne.n	800d436 <USB_EPStartXfer+0x139c>
 800d42c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d430:	3b01      	subs	r3, #1
 800d432:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d43a:	b29b      	uxth	r3, r3
 800d43c:	029b      	lsls	r3, r3, #10
 800d43e:	b29b      	uxth	r3, r3
 800d440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d448:	b29a      	uxth	r2, r3
 800d44a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d44e:	801a      	strh	r2, [r3, #0]
 800d450:	e064      	b.n	800d51c <USB_EPStartXfer+0x1482>
 800d452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d456:	2b00      	cmp	r3, #0
 800d458:	d116      	bne.n	800d488 <USB_EPStartXfer+0x13ee>
 800d45a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d45e:	881b      	ldrh	r3, [r3, #0]
 800d460:	b29b      	uxth	r3, r3
 800d462:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d466:	b29a      	uxth	r2, r3
 800d468:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d46c:	801a      	strh	r2, [r3, #0]
 800d46e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d472:	881b      	ldrh	r3, [r3, #0]
 800d474:	b29b      	uxth	r3, r3
 800d476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d47a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d47e:	b29a      	uxth	r2, r3
 800d480:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d484:	801a      	strh	r2, [r3, #0]
 800d486:	e049      	b.n	800d51c <USB_EPStartXfer+0x1482>
 800d488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d48c:	085b      	lsrs	r3, r3, #1
 800d48e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d496:	f003 0301 	and.w	r3, r3, #1
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d004      	beq.n	800d4a8 <USB_EPStartXfer+0x140e>
 800d49e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d4a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4ac:	b29b      	uxth	r3, r3
 800d4ae:	029b      	lsls	r3, r3, #10
 800d4b0:	b29a      	uxth	r2, r3
 800d4b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d4b6:	801a      	strh	r2, [r3, #0]
 800d4b8:	e030      	b.n	800d51c <USB_EPStartXfer+0x1482>
 800d4ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	785b      	ldrb	r3, [r3, #1]
 800d4c6:	2b01      	cmp	r3, #1
 800d4c8:	d128      	bne.n	800d51c <USB_EPStartXfer+0x1482>
 800d4ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d4d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	461a      	mov	r2, r3
 800d4ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d4ee:	4413      	add	r3, r2
 800d4f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d4f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	00da      	lsls	r2, r3, #3
 800d502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d506:	4413      	add	r3, r2
 800d508:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d50c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d514:	b29a      	uxth	r2, r3
 800d516:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d51a:	801a      	strh	r2, [r3, #0]
 800d51c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d520:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d52a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d52e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	785b      	ldrb	r3, [r3, #1]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d178      	bne.n	800d62c <USB_EPStartXfer+0x1592>
 800d53a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d53e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d54c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d556:	b29b      	uxth	r3, r3
 800d558:	461a      	mov	r2, r3
 800d55a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d55e:	4413      	add	r3, r2
 800d560:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	00da      	lsls	r2, r3, #3
 800d572:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d576:	4413      	add	r3, r2
 800d578:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d57c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d584:	2b3e      	cmp	r3, #62	; 0x3e
 800d586:	d91d      	bls.n	800d5c4 <USB_EPStartXfer+0x152a>
 800d588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d58c:	095b      	lsrs	r3, r3, #5
 800d58e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d596:	f003 031f 	and.w	r3, r3, #31
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d104      	bne.n	800d5a8 <USB_EPStartXfer+0x150e>
 800d59e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d5a2:	3b01      	subs	r3, #1
 800d5a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d5a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	029b      	lsls	r3, r3, #10
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5ba:	b29a      	uxth	r2, r3
 800d5bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d5c0:	801a      	strh	r2, [r3, #0]
 800d5c2:	e060      	b.n	800d686 <USB_EPStartXfer+0x15ec>
 800d5c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d116      	bne.n	800d5fa <USB_EPStartXfer+0x1560>
 800d5cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d5d0:	881b      	ldrh	r3, [r3, #0]
 800d5d2:	b29b      	uxth	r3, r3
 800d5d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d5d8:	b29a      	uxth	r2, r3
 800d5da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d5de:	801a      	strh	r2, [r3, #0]
 800d5e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d5e4:	881b      	ldrh	r3, [r3, #0]
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5f0:	b29a      	uxth	r2, r3
 800d5f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d5f6:	801a      	strh	r2, [r3, #0]
 800d5f8:	e045      	b.n	800d686 <USB_EPStartXfer+0x15ec>
 800d5fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5fe:	085b      	lsrs	r3, r3, #1
 800d600:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d608:	f003 0301 	and.w	r3, r3, #1
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d004      	beq.n	800d61a <USB_EPStartXfer+0x1580>
 800d610:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d614:	3301      	adds	r3, #1
 800d616:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d61a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d61e:	b29b      	uxth	r3, r3
 800d620:	029b      	lsls	r3, r3, #10
 800d622:	b29a      	uxth	r2, r3
 800d624:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d628:	801a      	strh	r2, [r3, #0]
 800d62a:	e02c      	b.n	800d686 <USB_EPStartXfer+0x15ec>
 800d62c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	785b      	ldrb	r3, [r3, #1]
 800d638:	2b01      	cmp	r3, #1
 800d63a:	d124      	bne.n	800d686 <USB_EPStartXfer+0x15ec>
 800d63c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d640:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d64a:	b29b      	uxth	r3, r3
 800d64c:	461a      	mov	r2, r3
 800d64e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d652:	4413      	add	r3, r2
 800d654:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d65c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	781b      	ldrb	r3, [r3, #0]
 800d664:	00da      	lsls	r2, r3, #3
 800d666:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d66a:	4413      	add	r3, r2
 800d66c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d670:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d678:	b29a      	uxth	r2, r3
 800d67a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d67e:	801a      	strh	r2, [r3, #0]
 800d680:	e001      	b.n	800d686 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800d682:	2301      	movs	r3, #1
 800d684:	e03a      	b.n	800d6fc <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d68a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d68e:	681a      	ldr	r2, [r3, #0]
 800d690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	009b      	lsls	r3, r3, #2
 800d69e:	4413      	add	r3, r2
 800d6a0:	881b      	ldrh	r3, [r3, #0]
 800d6a2:	b29b      	uxth	r3, r3
 800d6a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d6a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6ac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d6b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d6b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d6b8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d6bc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d6c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d6c4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d6c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	009b      	lsls	r3, r3, #2
 800d6e0:	441a      	add	r2, r3
 800d6e2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d6e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d6ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d6ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d6f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d6fa:	2300      	movs	r3, #0
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}

0800d706 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d706:	b480      	push	{r7}
 800d708:	b085      	sub	sp, #20
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
 800d70e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	785b      	ldrb	r3, [r3, #1]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d020      	beq.n	800d75a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d718:	687a      	ldr	r2, [r7, #4]
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	009b      	lsls	r3, r3, #2
 800d720:	4413      	add	r3, r2
 800d722:	881b      	ldrh	r3, [r3, #0]
 800d724:	b29b      	uxth	r3, r3
 800d726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d72a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d72e:	81bb      	strh	r3, [r7, #12]
 800d730:	89bb      	ldrh	r3, [r7, #12]
 800d732:	f083 0310 	eor.w	r3, r3, #16
 800d736:	81bb      	strh	r3, [r7, #12]
 800d738:	687a      	ldr	r2, [r7, #4]
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	009b      	lsls	r3, r3, #2
 800d740:	441a      	add	r2, r3
 800d742:	89bb      	ldrh	r3, [r7, #12]
 800d744:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d748:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d74c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d754:	b29b      	uxth	r3, r3
 800d756:	8013      	strh	r3, [r2, #0]
 800d758:	e01f      	b.n	800d79a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d75a:	687a      	ldr	r2, [r7, #4]
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	009b      	lsls	r3, r3, #2
 800d762:	4413      	add	r3, r2
 800d764:	881b      	ldrh	r3, [r3, #0]
 800d766:	b29b      	uxth	r3, r3
 800d768:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d76c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d770:	81fb      	strh	r3, [r7, #14]
 800d772:	89fb      	ldrh	r3, [r7, #14]
 800d774:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d778:	81fb      	strh	r3, [r7, #14]
 800d77a:	687a      	ldr	r2, [r7, #4]
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	009b      	lsls	r3, r3, #2
 800d782:	441a      	add	r2, r3
 800d784:	89fb      	ldrh	r3, [r7, #14]
 800d786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d78a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d78e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d796:	b29b      	uxth	r3, r3
 800d798:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d79a:	2300      	movs	r3, #0
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3714      	adds	r7, #20
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr

0800d7a8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b087      	sub	sp, #28
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	7b1b      	ldrb	r3, [r3, #12]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	f040 809d 	bne.w	800d8f6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	785b      	ldrb	r3, [r3, #1]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d04c      	beq.n	800d85e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	009b      	lsls	r3, r3, #2
 800d7cc:	4413      	add	r3, r2
 800d7ce:	881b      	ldrh	r3, [r3, #0]
 800d7d0:	823b      	strh	r3, [r7, #16]
 800d7d2:	8a3b      	ldrh	r3, [r7, #16]
 800d7d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d01b      	beq.n	800d814 <USB_EPClearStall+0x6c>
 800d7dc:	687a      	ldr	r2, [r7, #4]
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	4413      	add	r3, r2
 800d7e6:	881b      	ldrh	r3, [r3, #0]
 800d7e8:	b29b      	uxth	r3, r3
 800d7ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d7ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7f2:	81fb      	strh	r3, [r7, #14]
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	781b      	ldrb	r3, [r3, #0]
 800d7fa:	009b      	lsls	r3, r3, #2
 800d7fc:	441a      	add	r2, r3
 800d7fe:	89fb      	ldrh	r3, [r7, #14]
 800d800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d80c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d810:	b29b      	uxth	r3, r3
 800d812:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	78db      	ldrb	r3, [r3, #3]
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d06c      	beq.n	800d8f6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d81c:	687a      	ldr	r2, [r7, #4]
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	009b      	lsls	r3, r3, #2
 800d824:	4413      	add	r3, r2
 800d826:	881b      	ldrh	r3, [r3, #0]
 800d828:	b29b      	uxth	r3, r3
 800d82a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d82e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d832:	81bb      	strh	r3, [r7, #12]
 800d834:	89bb      	ldrh	r3, [r7, #12]
 800d836:	f083 0320 	eor.w	r3, r3, #32
 800d83a:	81bb      	strh	r3, [r7, #12]
 800d83c:	687a      	ldr	r2, [r7, #4]
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	009b      	lsls	r3, r3, #2
 800d844:	441a      	add	r2, r3
 800d846:	89bb      	ldrh	r3, [r7, #12]
 800d848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d84c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d858:	b29b      	uxth	r3, r3
 800d85a:	8013      	strh	r3, [r2, #0]
 800d85c:	e04b      	b.n	800d8f6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d85e:	687a      	ldr	r2, [r7, #4]
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	009b      	lsls	r3, r3, #2
 800d866:	4413      	add	r3, r2
 800d868:	881b      	ldrh	r3, [r3, #0]
 800d86a:	82fb      	strh	r3, [r7, #22]
 800d86c:	8afb      	ldrh	r3, [r7, #22]
 800d86e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d872:	2b00      	cmp	r3, #0
 800d874:	d01b      	beq.n	800d8ae <USB_EPClearStall+0x106>
 800d876:	687a      	ldr	r2, [r7, #4]
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	781b      	ldrb	r3, [r3, #0]
 800d87c:	009b      	lsls	r3, r3, #2
 800d87e:	4413      	add	r3, r2
 800d880:	881b      	ldrh	r3, [r3, #0]
 800d882:	b29b      	uxth	r3, r3
 800d884:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d88c:	82bb      	strh	r3, [r7, #20]
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	009b      	lsls	r3, r3, #2
 800d896:	441a      	add	r2, r3
 800d898:	8abb      	ldrh	r3, [r7, #20]
 800d89a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d89e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d8a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d8a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8aa:	b29b      	uxth	r3, r3
 800d8ac:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d8ae:	687a      	ldr	r2, [r7, #4]
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	781b      	ldrb	r3, [r3, #0]
 800d8b4:	009b      	lsls	r3, r3, #2
 800d8b6:	4413      	add	r3, r2
 800d8b8:	881b      	ldrh	r3, [r3, #0]
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d8c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8c4:	827b      	strh	r3, [r7, #18]
 800d8c6:	8a7b      	ldrh	r3, [r7, #18]
 800d8c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d8cc:	827b      	strh	r3, [r7, #18]
 800d8ce:	8a7b      	ldrh	r3, [r7, #18]
 800d8d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d8d4:	827b      	strh	r3, [r7, #18]
 800d8d6:	687a      	ldr	r2, [r7, #4]
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	781b      	ldrb	r3, [r3, #0]
 800d8dc:	009b      	lsls	r3, r3, #2
 800d8de:	441a      	add	r2, r3
 800d8e0:	8a7b      	ldrh	r3, [r7, #18]
 800d8e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d8e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d8ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d8ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d8f6:	2300      	movs	r3, #0
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	371c      	adds	r7, #28
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr

0800d904 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d904:	b480      	push	{r7}
 800d906:	b083      	sub	sp, #12
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	460b      	mov	r3, r1
 800d90e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d910:	78fb      	ldrb	r3, [r7, #3]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d103      	bne.n	800d91e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2280      	movs	r2, #128	; 0x80
 800d91a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800d91e:	2300      	movs	r3, #0
}
 800d920:	4618      	mov	r0, r3
 800d922:	370c      	adds	r7, #12
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr

0800d92c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b083      	sub	sp, #12
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d944:	b29a      	uxth	r2, r3
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800d94c:	2300      	movs	r3, #0
}
 800d94e:	4618      	mov	r0, r3
 800d950:	370c      	adds	r7, #12
 800d952:	46bd      	mov	sp, r7
 800d954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d958:	4770      	bx	lr

0800d95a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800d95a:	b480      	push	{r7}
 800d95c:	b085      	sub	sp, #20
 800d95e:	af00      	add	r7, sp, #0
 800d960:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d968:	b29b      	uxth	r3, r3
 800d96a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d96c:	68fb      	ldr	r3, [r7, #12]
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3714      	adds	r7, #20
 800d972:	46bd      	mov	sp, r7
 800d974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d978:	4770      	bx	lr

0800d97a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d97a:	b480      	push	{r7}
 800d97c:	b08d      	sub	sp, #52	; 0x34
 800d97e:	af00      	add	r7, sp, #0
 800d980:	60f8      	str	r0, [r7, #12]
 800d982:	60b9      	str	r1, [r7, #8]
 800d984:	4611      	mov	r1, r2
 800d986:	461a      	mov	r2, r3
 800d988:	460b      	mov	r3, r1
 800d98a:	80fb      	strh	r3, [r7, #6]
 800d98c:	4613      	mov	r3, r2
 800d98e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d990:	88bb      	ldrh	r3, [r7, #4]
 800d992:	3301      	adds	r3, #1
 800d994:	085b      	lsrs	r3, r3, #1
 800d996:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d9a0:	88fa      	ldrh	r2, [r7, #6]
 800d9a2:	69fb      	ldr	r3, [r7, #28]
 800d9a4:	4413      	add	r3, r2
 800d9a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d9aa:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800d9ac:	6a3b      	ldr	r3, [r7, #32]
 800d9ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9b0:	e01b      	b.n	800d9ea <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800d9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800d9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800d9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	b29b      	uxth	r3, r3
 800d9c4:	021b      	lsls	r3, r3, #8
 800d9c6:	b29b      	uxth	r3, r3
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	69bb      	ldr	r3, [r7, #24]
 800d9cc:	4313      	orrs	r3, r2
 800d9ce:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	b29a      	uxth	r2, r3
 800d9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9da:	3302      	adds	r3, #2
 800d9dc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800d9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800d9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e6:	3b01      	subs	r3, #1
 800d9e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d1e0      	bne.n	800d9b2 <USB_WritePMA+0x38>
  }
}
 800d9f0:	bf00      	nop
 800d9f2:	bf00      	nop
 800d9f4:	3734      	adds	r7, #52	; 0x34
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fc:	4770      	bx	lr

0800d9fe <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d9fe:	b480      	push	{r7}
 800da00:	b08b      	sub	sp, #44	; 0x2c
 800da02:	af00      	add	r7, sp, #0
 800da04:	60f8      	str	r0, [r7, #12]
 800da06:	60b9      	str	r1, [r7, #8]
 800da08:	4611      	mov	r1, r2
 800da0a:	461a      	mov	r2, r3
 800da0c:	460b      	mov	r3, r1
 800da0e:	80fb      	strh	r3, [r7, #6]
 800da10:	4613      	mov	r3, r2
 800da12:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800da14:	88bb      	ldrh	r3, [r7, #4]
 800da16:	085b      	lsrs	r3, r3, #1
 800da18:	b29b      	uxth	r3, r3
 800da1a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800da24:	88fa      	ldrh	r2, [r7, #6]
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	4413      	add	r3, r2
 800da2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da2e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800da30:	69bb      	ldr	r3, [r7, #24]
 800da32:	627b      	str	r3, [r7, #36]	; 0x24
 800da34:	e018      	b.n	800da68 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800da36:	6a3b      	ldr	r3, [r7, #32]
 800da38:	881b      	ldrh	r3, [r3, #0]
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800da3e:	6a3b      	ldr	r3, [r7, #32]
 800da40:	3302      	adds	r3, #2
 800da42:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	b2da      	uxtb	r2, r3
 800da48:	69fb      	ldr	r3, [r7, #28]
 800da4a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800da4c:	69fb      	ldr	r3, [r7, #28]
 800da4e:	3301      	adds	r3, #1
 800da50:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	0a1b      	lsrs	r3, r3, #8
 800da56:	b2da      	uxtb	r2, r3
 800da58:	69fb      	ldr	r3, [r7, #28]
 800da5a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800da5c:	69fb      	ldr	r3, [r7, #28]
 800da5e:	3301      	adds	r3, #1
 800da60:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800da62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da64:	3b01      	subs	r3, #1
 800da66:	627b      	str	r3, [r7, #36]	; 0x24
 800da68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d1e3      	bne.n	800da36 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800da6e:	88bb      	ldrh	r3, [r7, #4]
 800da70:	f003 0301 	and.w	r3, r3, #1
 800da74:	b29b      	uxth	r3, r3
 800da76:	2b00      	cmp	r3, #0
 800da78:	d007      	beq.n	800da8a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800da7a:	6a3b      	ldr	r3, [r7, #32]
 800da7c:	881b      	ldrh	r3, [r3, #0]
 800da7e:	b29b      	uxth	r3, r3
 800da80:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	b2da      	uxtb	r2, r3
 800da86:	69fb      	ldr	r3, [r7, #28]
 800da88:	701a      	strb	r2, [r3, #0]
  }
}
 800da8a:	bf00      	nop
 800da8c:	372c      	adds	r7, #44	; 0x2c
 800da8e:	46bd      	mov	sp, r7
 800da90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da94:	4770      	bx	lr

0800da96 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da96:	b580      	push	{r7, lr}
 800da98:	b084      	sub	sp, #16
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	6078      	str	r0, [r7, #4]
 800da9e:	460b      	mov	r3, r1
 800daa0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800daa2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800daa6:	f004 f9fd 	bl	8011ea4 <USBD_static_malloc>
 800daaa:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d105      	bne.n	800dabe <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	2200      	movs	r2, #0
 800dab6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800daba:	2302      	movs	r3, #2
 800dabc:	e066      	b.n	800db8c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	68fa      	ldr	r2, [r7, #12]
 800dac2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	7c1b      	ldrb	r3, [r3, #16]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d119      	bne.n	800db02 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dace:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dad2:	2202      	movs	r2, #2
 800dad4:	2181      	movs	r1, #129	; 0x81
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f004 f889 	bl	8011bee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2201      	movs	r2, #1
 800dae0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dae6:	2202      	movs	r2, #2
 800dae8:	2101      	movs	r1, #1
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f004 f87f 	bl	8011bee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2201      	movs	r2, #1
 800daf4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2210      	movs	r2, #16
 800dafc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800db00:	e016      	b.n	800db30 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800db02:	2340      	movs	r3, #64	; 0x40
 800db04:	2202      	movs	r2, #2
 800db06:	2181      	movs	r1, #129	; 0x81
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f004 f870 	bl	8011bee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2201      	movs	r2, #1
 800db12:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800db14:	2340      	movs	r3, #64	; 0x40
 800db16:	2202      	movs	r2, #2
 800db18:	2101      	movs	r1, #1
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f004 f867 	bl	8011bee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2201      	movs	r2, #1
 800db24:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2210      	movs	r2, #16
 800db2c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800db30:	2308      	movs	r3, #8
 800db32:	2203      	movs	r2, #3
 800db34:	2182      	movs	r1, #130	; 0x82
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f004 f859 	bl	8011bee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2201      	movs	r2, #1
 800db40:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	2200      	movs	r2, #0
 800db52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2200      	movs	r2, #0
 800db5a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	7c1b      	ldrb	r3, [r3, #16]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d109      	bne.n	800db7a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800db6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db70:	2101      	movs	r1, #1
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f004 f92b 	bl	8011dce <USBD_LL_PrepareReceive>
 800db78:	e007      	b.n	800db8a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800db80:	2340      	movs	r3, #64	; 0x40
 800db82:	2101      	movs	r1, #1
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f004 f922 	bl	8011dce <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800db8a:	2300      	movs	r3, #0
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3710      	adds	r7, #16
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	460b      	mov	r3, r1
 800db9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800dba0:	2181      	movs	r1, #129	; 0x81
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f004 f849 	bl	8011c3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800dbae:	2101      	movs	r1, #1
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f004 f842 	bl	8011c3a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800dbbe:	2182      	movs	r1, #130	; 0x82
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f004 f83a 	bl	8011c3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d00e      	beq.n	800dbfe <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dbe6:	685b      	ldr	r3, [r3, #4]
 800dbe8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f004 f965 	bl	8011ec0 <USBD_static_free>
    pdev->pClassData = NULL;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800dbfe:	2300      	movs	r3, #0
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3708      	adds	r7, #8
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b086      	sub	sp, #24
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc18:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc22:	2300      	movs	r3, #0
 800dc24:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d101      	bne.n	800dc30 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800dc2c:	2303      	movs	r3, #3
 800dc2e:	e0af      	b.n	800dd90 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d03f      	beq.n	800dcbc <USBD_CDC_Setup+0xb4>
 800dc3c:	2b20      	cmp	r3, #32
 800dc3e:	f040 809f 	bne.w	800dd80 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	88db      	ldrh	r3, [r3, #6]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d02e      	beq.n	800dca8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	781b      	ldrb	r3, [r3, #0]
 800dc4e:	b25b      	sxtb	r3, r3
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	da16      	bge.n	800dc82 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc5a:	689b      	ldr	r3, [r3, #8]
 800dc5c:	683a      	ldr	r2, [r7, #0]
 800dc5e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800dc60:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dc62:	683a      	ldr	r2, [r7, #0]
 800dc64:	88d2      	ldrh	r2, [r2, #6]
 800dc66:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	88db      	ldrh	r3, [r3, #6]
 800dc6c:	2b07      	cmp	r3, #7
 800dc6e:	bf28      	it	cs
 800dc70:	2307      	movcs	r3, #7
 800dc72:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	89fa      	ldrh	r2, [r7, #14]
 800dc78:	4619      	mov	r1, r3
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f001 fa9f 	bl	800f1be <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800dc80:	e085      	b.n	800dd8e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	785a      	ldrb	r2, [r3, #1]
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	88db      	ldrh	r3, [r3, #6]
 800dc90:	b2da      	uxtb	r2, r3
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800dc98:	6939      	ldr	r1, [r7, #16]
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	88db      	ldrh	r3, [r3, #6]
 800dc9e:	461a      	mov	r2, r3
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f001 fab8 	bl	800f216 <USBD_CtlPrepareRx>
      break;
 800dca6:	e072      	b.n	800dd8e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dcae:	689b      	ldr	r3, [r3, #8]
 800dcb0:	683a      	ldr	r2, [r7, #0]
 800dcb2:	7850      	ldrb	r0, [r2, #1]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	6839      	ldr	r1, [r7, #0]
 800dcb8:	4798      	blx	r3
      break;
 800dcba:	e068      	b.n	800dd8e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	785b      	ldrb	r3, [r3, #1]
 800dcc0:	2b0b      	cmp	r3, #11
 800dcc2:	d852      	bhi.n	800dd6a <USBD_CDC_Setup+0x162>
 800dcc4:	a201      	add	r2, pc, #4	; (adr r2, 800dccc <USBD_CDC_Setup+0xc4>)
 800dcc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcca:	bf00      	nop
 800dccc:	0800dcfd 	.word	0x0800dcfd
 800dcd0:	0800dd79 	.word	0x0800dd79
 800dcd4:	0800dd6b 	.word	0x0800dd6b
 800dcd8:	0800dd6b 	.word	0x0800dd6b
 800dcdc:	0800dd6b 	.word	0x0800dd6b
 800dce0:	0800dd6b 	.word	0x0800dd6b
 800dce4:	0800dd6b 	.word	0x0800dd6b
 800dce8:	0800dd6b 	.word	0x0800dd6b
 800dcec:	0800dd6b 	.word	0x0800dd6b
 800dcf0:	0800dd6b 	.word	0x0800dd6b
 800dcf4:	0800dd27 	.word	0x0800dd27
 800dcf8:	0800dd51 	.word	0x0800dd51
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd02:	b2db      	uxtb	r3, r3
 800dd04:	2b03      	cmp	r3, #3
 800dd06:	d107      	bne.n	800dd18 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800dd08:	f107 030a 	add.w	r3, r7, #10
 800dd0c:	2202      	movs	r2, #2
 800dd0e:	4619      	mov	r1, r3
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f001 fa54 	bl	800f1be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dd16:	e032      	b.n	800dd7e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800dd18:	6839      	ldr	r1, [r7, #0]
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	f001 f9de 	bl	800f0dc <USBD_CtlError>
            ret = USBD_FAIL;
 800dd20:	2303      	movs	r3, #3
 800dd22:	75fb      	strb	r3, [r7, #23]
          break;
 800dd24:	e02b      	b.n	800dd7e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd2c:	b2db      	uxtb	r3, r3
 800dd2e:	2b03      	cmp	r3, #3
 800dd30:	d107      	bne.n	800dd42 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800dd32:	f107 030d 	add.w	r3, r7, #13
 800dd36:	2201      	movs	r2, #1
 800dd38:	4619      	mov	r1, r3
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f001 fa3f 	bl	800f1be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dd40:	e01d      	b.n	800dd7e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800dd42:	6839      	ldr	r1, [r7, #0]
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f001 f9c9 	bl	800f0dc <USBD_CtlError>
            ret = USBD_FAIL;
 800dd4a:	2303      	movs	r3, #3
 800dd4c:	75fb      	strb	r3, [r7, #23]
          break;
 800dd4e:	e016      	b.n	800dd7e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	2b03      	cmp	r3, #3
 800dd5a:	d00f      	beq.n	800dd7c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800dd5c:	6839      	ldr	r1, [r7, #0]
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f001 f9bc 	bl	800f0dc <USBD_CtlError>
            ret = USBD_FAIL;
 800dd64:	2303      	movs	r3, #3
 800dd66:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800dd68:	e008      	b.n	800dd7c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800dd6a:	6839      	ldr	r1, [r7, #0]
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f001 f9b5 	bl	800f0dc <USBD_CtlError>
          ret = USBD_FAIL;
 800dd72:	2303      	movs	r3, #3
 800dd74:	75fb      	strb	r3, [r7, #23]
          break;
 800dd76:	e002      	b.n	800dd7e <USBD_CDC_Setup+0x176>
          break;
 800dd78:	bf00      	nop
 800dd7a:	e008      	b.n	800dd8e <USBD_CDC_Setup+0x186>
          break;
 800dd7c:	bf00      	nop
      }
      break;
 800dd7e:	e006      	b.n	800dd8e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800dd80:	6839      	ldr	r1, [r7, #0]
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f001 f9aa 	bl	800f0dc <USBD_CtlError>
      ret = USBD_FAIL;
 800dd88:	2303      	movs	r3, #3
 800dd8a:	75fb      	strb	r3, [r7, #23]
      break;
 800dd8c:	bf00      	nop
  }

  return (uint8_t)ret;
 800dd8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3718      	adds	r7, #24
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b084      	sub	sp, #16
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	460b      	mov	r3, r1
 800dda2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ddaa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d101      	bne.n	800ddba <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ddb6:	2303      	movs	r3, #3
 800ddb8:	e04f      	b.n	800de5a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ddc0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ddc2:	78fa      	ldrb	r2, [r7, #3]
 800ddc4:	6879      	ldr	r1, [r7, #4]
 800ddc6:	4613      	mov	r3, r2
 800ddc8:	009b      	lsls	r3, r3, #2
 800ddca:	4413      	add	r3, r2
 800ddcc:	009b      	lsls	r3, r3, #2
 800ddce:	440b      	add	r3, r1
 800ddd0:	3318      	adds	r3, #24
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d029      	beq.n	800de2c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ddd8:	78fa      	ldrb	r2, [r7, #3]
 800ddda:	6879      	ldr	r1, [r7, #4]
 800dddc:	4613      	mov	r3, r2
 800ddde:	009b      	lsls	r3, r3, #2
 800dde0:	4413      	add	r3, r2
 800dde2:	009b      	lsls	r3, r3, #2
 800dde4:	440b      	add	r3, r1
 800dde6:	3318      	adds	r3, #24
 800dde8:	681a      	ldr	r2, [r3, #0]
 800ddea:	78f9      	ldrb	r1, [r7, #3]
 800ddec:	68f8      	ldr	r0, [r7, #12]
 800ddee:	460b      	mov	r3, r1
 800ddf0:	009b      	lsls	r3, r3, #2
 800ddf2:	440b      	add	r3, r1
 800ddf4:	00db      	lsls	r3, r3, #3
 800ddf6:	4403      	add	r3, r0
 800ddf8:	3338      	adds	r3, #56	; 0x38
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	fbb2 f1f3 	udiv	r1, r2, r3
 800de00:	fb01 f303 	mul.w	r3, r1, r3
 800de04:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800de06:	2b00      	cmp	r3, #0
 800de08:	d110      	bne.n	800de2c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800de0a:	78fa      	ldrb	r2, [r7, #3]
 800de0c:	6879      	ldr	r1, [r7, #4]
 800de0e:	4613      	mov	r3, r2
 800de10:	009b      	lsls	r3, r3, #2
 800de12:	4413      	add	r3, r2
 800de14:	009b      	lsls	r3, r3, #2
 800de16:	440b      	add	r3, r1
 800de18:	3318      	adds	r3, #24
 800de1a:	2200      	movs	r2, #0
 800de1c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800de1e:	78f9      	ldrb	r1, [r7, #3]
 800de20:	2300      	movs	r3, #0
 800de22:	2200      	movs	r2, #0
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f003 ffb1 	bl	8011d8c <USBD_LL_Transmit>
 800de2a:	e015      	b.n	800de58 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	2200      	movs	r2, #0
 800de30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800de3a:	691b      	ldr	r3, [r3, #16]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d00b      	beq.n	800de58 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800de46:	691b      	ldr	r3, [r3, #16]
 800de48:	68ba      	ldr	r2, [r7, #8]
 800de4a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800de4e:	68ba      	ldr	r2, [r7, #8]
 800de50:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800de54:	78fa      	ldrb	r2, [r7, #3]
 800de56:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800de58:	2300      	movs	r3, #0
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3710      	adds	r7, #16
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}

0800de62 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800de62:	b580      	push	{r7, lr}
 800de64:	b084      	sub	sp, #16
 800de66:	af00      	add	r7, sp, #0
 800de68:	6078      	str	r0, [r7, #4]
 800de6a:	460b      	mov	r3, r1
 800de6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de74:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d101      	bne.n	800de84 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800de80:	2303      	movs	r3, #3
 800de82:	e015      	b.n	800deb0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800de84:	78fb      	ldrb	r3, [r7, #3]
 800de86:	4619      	mov	r1, r3
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f003 ffc1 	bl	8011e10 <USBD_LL_GetRxDataSize>
 800de8e:	4602      	mov	r2, r0
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800de9c:	68db      	ldr	r3, [r3, #12]
 800de9e:	68fa      	ldr	r2, [r7, #12]
 800dea0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800dea4:	68fa      	ldr	r2, [r7, #12]
 800dea6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800deaa:	4611      	mov	r1, r2
 800deac:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800deae:	2300      	movs	r3, #0
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3710      	adds	r7, #16
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dec6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d101      	bne.n	800ded2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800dece:	2303      	movs	r3, #3
 800ded0:	e01b      	b.n	800df0a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d015      	beq.n	800df08 <USBD_CDC_EP0_RxReady+0x50>
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800dee2:	2bff      	cmp	r3, #255	; 0xff
 800dee4:	d010      	beq.n	800df08 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800deec:	689b      	ldr	r3, [r3, #8]
 800deee:	68fa      	ldr	r2, [r7, #12]
 800def0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800def4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800def6:	68fa      	ldr	r2, [r7, #12]
 800def8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800defc:	b292      	uxth	r2, r2
 800defe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	22ff      	movs	r2, #255	; 0xff
 800df04:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800df08:	2300      	movs	r3, #0
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3710      	adds	r7, #16
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
	...

0800df14 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800df14:	b480      	push	{r7}
 800df16:	b083      	sub	sp, #12
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2243      	movs	r2, #67	; 0x43
 800df20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800df22:	4b03      	ldr	r3, [pc, #12]	; (800df30 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800df24:	4618      	mov	r0, r3
 800df26:	370c      	adds	r7, #12
 800df28:	46bd      	mov	sp, r7
 800df2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2e:	4770      	bx	lr
 800df30:	20000094 	.word	0x20000094

0800df34 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800df34:	b480      	push	{r7}
 800df36:	b083      	sub	sp, #12
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2243      	movs	r2, #67	; 0x43
 800df40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800df42:	4b03      	ldr	r3, [pc, #12]	; (800df50 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800df44:	4618      	mov	r0, r3
 800df46:	370c      	adds	r7, #12
 800df48:	46bd      	mov	sp, r7
 800df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4e:	4770      	bx	lr
 800df50:	20000050 	.word	0x20000050

0800df54 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800df54:	b480      	push	{r7}
 800df56:	b083      	sub	sp, #12
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2243      	movs	r2, #67	; 0x43
 800df60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800df62:	4b03      	ldr	r3, [pc, #12]	; (800df70 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800df64:	4618      	mov	r0, r3
 800df66:	370c      	adds	r7, #12
 800df68:	46bd      	mov	sp, r7
 800df6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6e:	4770      	bx	lr
 800df70:	200000d8 	.word	0x200000d8

0800df74 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800df74:	b480      	push	{r7}
 800df76:	b083      	sub	sp, #12
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	220a      	movs	r2, #10
 800df80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800df82:	4b03      	ldr	r3, [pc, #12]	; (800df90 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800df84:	4618      	mov	r0, r3
 800df86:	370c      	adds	r7, #12
 800df88:	46bd      	mov	sp, r7
 800df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8e:	4770      	bx	lr
 800df90:	2000000c 	.word	0x2000000c

0800df94 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800df94:	b480      	push	{r7}
 800df96:	b083      	sub	sp, #12
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d101      	bne.n	800dfa8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dfa4:	2303      	movs	r3, #3
 800dfa6:	e004      	b.n	800dfb2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	683a      	ldr	r2, [r7, #0]
 800dfac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800dfb0:	2300      	movs	r3, #0
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	370c      	adds	r7, #12
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbc:	4770      	bx	lr

0800dfbe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800dfbe:	b480      	push	{r7}
 800dfc0:	b087      	sub	sp, #28
 800dfc2:	af00      	add	r7, sp, #0
 800dfc4:	60f8      	str	r0, [r7, #12]
 800dfc6:	60b9      	str	r1, [r7, #8]
 800dfc8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dfd0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d101      	bne.n	800dfdc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800dfd8:	2303      	movs	r3, #3
 800dfda:	e008      	b.n	800dfee <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	68ba      	ldr	r2, [r7, #8]
 800dfe0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	687a      	ldr	r2, [r7, #4]
 800dfe8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800dfec:	2300      	movs	r3, #0
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	371c      	adds	r7, #28
 800dff2:	46bd      	mov	sp, r7
 800dff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff8:	4770      	bx	lr

0800dffa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800dffa:	b480      	push	{r7}
 800dffc:	b085      	sub	sp, #20
 800dffe:	af00      	add	r7, sp, #0
 800e000:	6078      	str	r0, [r7, #4]
 800e002:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e00a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d101      	bne.n	800e016 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800e012:	2303      	movs	r3, #3
 800e014:	e004      	b.n	800e020 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	683a      	ldr	r2, [r7, #0]
 800e01a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e01e:	2300      	movs	r3, #0
}
 800e020:	4618      	mov	r0, r3
 800e022:	3714      	adds	r7, #20
 800e024:	46bd      	mov	sp, r7
 800e026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02a:	4770      	bx	lr

0800e02c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b084      	sub	sp, #16
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e03a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e042:	2b00      	cmp	r3, #0
 800e044:	d101      	bne.n	800e04a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e046:	2303      	movs	r3, #3
 800e048:	e016      	b.n	800e078 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	7c1b      	ldrb	r3, [r3, #16]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d109      	bne.n	800e066 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e05c:	2101      	movs	r1, #1
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	f003 feb5 	bl	8011dce <USBD_LL_PrepareReceive>
 800e064:	e007      	b.n	800e076 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e06c:	2340      	movs	r3, #64	; 0x40
 800e06e:	2101      	movs	r1, #1
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f003 feac 	bl	8011dce <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e076:	2300      	movs	r3, #0
}
 800e078:	4618      	mov	r0, r3
 800e07a:	3710      	adds	r7, #16
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}

0800e080 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b086      	sub	sp, #24
 800e084:	af00      	add	r7, sp, #0
 800e086:	60f8      	str	r0, [r7, #12]
 800e088:	60b9      	str	r1, [r7, #8]
 800e08a:	4613      	mov	r3, r2
 800e08c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d101      	bne.n	800e098 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e094:	2303      	movs	r3, #3
 800e096:	e01f      	b.n	800e0d8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	2200      	movs	r2, #0
 800e09c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d003      	beq.n	800e0be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	68ba      	ldr	r2, [r7, #8]
 800e0ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	79fa      	ldrb	r2, [r7, #7]
 800e0ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e0cc:	68f8      	ldr	r0, [r7, #12]
 800e0ce:	f003 fd13 	bl	8011af8 <USBD_LL_Init>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e0d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3718      	adds	r7, #24
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b084      	sub	sp, #16
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d101      	bne.n	800e0f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e0f4:	2303      	movs	r3, #3
 800e0f6:	e016      	b.n	800e126 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	683a      	ldr	r2, [r7, #0]
 800e0fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d00b      	beq.n	800e124 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e114:	f107 020e 	add.w	r2, r7, #14
 800e118:	4610      	mov	r0, r2
 800e11a:	4798      	blx	r3
 800e11c:	4602      	mov	r2, r0
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e124:	2300      	movs	r3, #0
}
 800e126:	4618      	mov	r0, r3
 800e128:	3710      	adds	r7, #16
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e12e:	b580      	push	{r7, lr}
 800e130:	b082      	sub	sp, #8
 800e132:	af00      	add	r7, sp, #0
 800e134:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f003 fd3e 	bl	8011bb8 <USBD_LL_Start>
 800e13c:	4603      	mov	r3, r0
}
 800e13e:	4618      	mov	r0, r3
 800e140:	3708      	adds	r7, #8
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}

0800e146 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e146:	b480      	push	{r7}
 800e148:	b083      	sub	sp, #12
 800e14a:	af00      	add	r7, sp, #0
 800e14c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e14e:	2300      	movs	r3, #0
}
 800e150:	4618      	mov	r0, r3
 800e152:	370c      	adds	r7, #12
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr

0800e15c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	460b      	mov	r3, r1
 800e166:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e168:	2303      	movs	r3, #3
 800e16a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e172:	2b00      	cmp	r3, #0
 800e174:	d009      	beq.n	800e18a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	78fa      	ldrb	r2, [r7, #3]
 800e180:	4611      	mov	r1, r2
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	4798      	blx	r3
 800e186:	4603      	mov	r3, r0
 800e188:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e18a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3710      	adds	r7, #16
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}

0800e194 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b082      	sub	sp, #8
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	460b      	mov	r3, r1
 800e19e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d007      	beq.n	800e1ba <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1b0:	685b      	ldr	r3, [r3, #4]
 800e1b2:	78fa      	ldrb	r2, [r7, #3]
 800e1b4:	4611      	mov	r1, r2
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	4798      	blx	r3
  }

  return USBD_OK;
 800e1ba:	2300      	movs	r3, #0
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3708      	adds	r7, #8
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}

0800e1c4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b084      	sub	sp, #16
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
 800e1cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e1d4:	6839      	ldr	r1, [r7, #0]
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f000 ff46 	bl	800f068 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2201      	movs	r2, #1
 800e1e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e1ea:	461a      	mov	r2, r3
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e1f8:	f003 031f 	and.w	r3, r3, #31
 800e1fc:	2b02      	cmp	r3, #2
 800e1fe:	d01a      	beq.n	800e236 <USBD_LL_SetupStage+0x72>
 800e200:	2b02      	cmp	r3, #2
 800e202:	d822      	bhi.n	800e24a <USBD_LL_SetupStage+0x86>
 800e204:	2b00      	cmp	r3, #0
 800e206:	d002      	beq.n	800e20e <USBD_LL_SetupStage+0x4a>
 800e208:	2b01      	cmp	r3, #1
 800e20a:	d00a      	beq.n	800e222 <USBD_LL_SetupStage+0x5e>
 800e20c:	e01d      	b.n	800e24a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e214:	4619      	mov	r1, r3
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f000 f9ee 	bl	800e5f8 <USBD_StdDevReq>
 800e21c:	4603      	mov	r3, r0
 800e21e:	73fb      	strb	r3, [r7, #15]
      break;
 800e220:	e020      	b.n	800e264 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e228:	4619      	mov	r1, r3
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f000 fa52 	bl	800e6d4 <USBD_StdItfReq>
 800e230:	4603      	mov	r3, r0
 800e232:	73fb      	strb	r3, [r7, #15]
      break;
 800e234:	e016      	b.n	800e264 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e23c:	4619      	mov	r1, r3
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f000 fa91 	bl	800e766 <USBD_StdEPReq>
 800e244:	4603      	mov	r3, r0
 800e246:	73fb      	strb	r3, [r7, #15]
      break;
 800e248:	e00c      	b.n	800e264 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e250:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e254:	b2db      	uxtb	r3, r3
 800e256:	4619      	mov	r1, r3
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f003 fd0d 	bl	8011c78 <USBD_LL_StallEP>
 800e25e:	4603      	mov	r3, r0
 800e260:	73fb      	strb	r3, [r7, #15]
      break;
 800e262:	bf00      	nop
  }

  return ret;
 800e264:	7bfb      	ldrb	r3, [r7, #15]
}
 800e266:	4618      	mov	r0, r3
 800e268:	3710      	adds	r7, #16
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}

0800e26e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e26e:	b580      	push	{r7, lr}
 800e270:	b086      	sub	sp, #24
 800e272:	af00      	add	r7, sp, #0
 800e274:	60f8      	str	r0, [r7, #12]
 800e276:	460b      	mov	r3, r1
 800e278:	607a      	str	r2, [r7, #4]
 800e27a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e27c:	7afb      	ldrb	r3, [r7, #11]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d138      	bne.n	800e2f4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e288:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e290:	2b03      	cmp	r3, #3
 800e292:	d14a      	bne.n	800e32a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e294:	693b      	ldr	r3, [r7, #16]
 800e296:	689a      	ldr	r2, [r3, #8]
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	68db      	ldr	r3, [r3, #12]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d913      	bls.n	800e2c8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	689a      	ldr	r2, [r3, #8]
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	68db      	ldr	r3, [r3, #12]
 800e2a8:	1ad2      	subs	r2, r2, r3
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	68da      	ldr	r2, [r3, #12]
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	689b      	ldr	r3, [r3, #8]
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	bf28      	it	cs
 800e2ba:	4613      	movcs	r3, r2
 800e2bc:	461a      	mov	r2, r3
 800e2be:	6879      	ldr	r1, [r7, #4]
 800e2c0:	68f8      	ldr	r0, [r7, #12]
 800e2c2:	f000 ffc5 	bl	800f250 <USBD_CtlContinueRx>
 800e2c6:	e030      	b.n	800e32a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2ce:	b2db      	uxtb	r3, r3
 800e2d0:	2b03      	cmp	r3, #3
 800e2d2:	d10b      	bne.n	800e2ec <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2da:	691b      	ldr	r3, [r3, #16]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d005      	beq.n	800e2ec <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2e6:	691b      	ldr	r3, [r3, #16]
 800e2e8:	68f8      	ldr	r0, [r7, #12]
 800e2ea:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e2ec:	68f8      	ldr	r0, [r7, #12]
 800e2ee:	f000 ffc0 	bl	800f272 <USBD_CtlSendStatus>
 800e2f2:	e01a      	b.n	800e32a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2fa:	b2db      	uxtb	r3, r3
 800e2fc:	2b03      	cmp	r3, #3
 800e2fe:	d114      	bne.n	800e32a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e306:	699b      	ldr	r3, [r3, #24]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d00e      	beq.n	800e32a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e312:	699b      	ldr	r3, [r3, #24]
 800e314:	7afa      	ldrb	r2, [r7, #11]
 800e316:	4611      	mov	r1, r2
 800e318:	68f8      	ldr	r0, [r7, #12]
 800e31a:	4798      	blx	r3
 800e31c:	4603      	mov	r3, r0
 800e31e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e320:	7dfb      	ldrb	r3, [r7, #23]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d001      	beq.n	800e32a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800e326:	7dfb      	ldrb	r3, [r7, #23]
 800e328:	e000      	b.n	800e32c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800e32a:	2300      	movs	r3, #0
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	3718      	adds	r7, #24
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}

0800e334 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b086      	sub	sp, #24
 800e338:	af00      	add	r7, sp, #0
 800e33a:	60f8      	str	r0, [r7, #12]
 800e33c:	460b      	mov	r3, r1
 800e33e:	607a      	str	r2, [r7, #4]
 800e340:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e342:	7afb      	ldrb	r3, [r7, #11]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d16b      	bne.n	800e420 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	3314      	adds	r3, #20
 800e34c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e354:	2b02      	cmp	r3, #2
 800e356:	d156      	bne.n	800e406 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e358:	693b      	ldr	r3, [r7, #16]
 800e35a:	689a      	ldr	r2, [r3, #8]
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	68db      	ldr	r3, [r3, #12]
 800e360:	429a      	cmp	r2, r3
 800e362:	d914      	bls.n	800e38e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	689a      	ldr	r2, [r3, #8]
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	68db      	ldr	r3, [r3, #12]
 800e36c:	1ad2      	subs	r2, r2, r3
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	689b      	ldr	r3, [r3, #8]
 800e376:	461a      	mov	r2, r3
 800e378:	6879      	ldr	r1, [r7, #4]
 800e37a:	68f8      	ldr	r0, [r7, #12]
 800e37c:	f000 ff3a 	bl	800f1f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e380:	2300      	movs	r3, #0
 800e382:	2200      	movs	r2, #0
 800e384:	2100      	movs	r1, #0
 800e386:	68f8      	ldr	r0, [r7, #12]
 800e388:	f003 fd21 	bl	8011dce <USBD_LL_PrepareReceive>
 800e38c:	e03b      	b.n	800e406 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e38e:	693b      	ldr	r3, [r7, #16]
 800e390:	68da      	ldr	r2, [r3, #12]
 800e392:	693b      	ldr	r3, [r7, #16]
 800e394:	689b      	ldr	r3, [r3, #8]
 800e396:	429a      	cmp	r2, r3
 800e398:	d11c      	bne.n	800e3d4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e39a:	693b      	ldr	r3, [r7, #16]
 800e39c:	685a      	ldr	r2, [r3, #4]
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d316      	bcc.n	800e3d4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e3a6:	693b      	ldr	r3, [r7, #16]
 800e3a8:	685a      	ldr	r2, [r3, #4]
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e3b0:	429a      	cmp	r2, r3
 800e3b2:	d20f      	bcs.n	800e3d4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	2100      	movs	r1, #0
 800e3b8:	68f8      	ldr	r0, [r7, #12]
 800e3ba:	f000 ff1b 	bl	800f1f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	2100      	movs	r1, #0
 800e3cc:	68f8      	ldr	r0, [r7, #12]
 800e3ce:	f003 fcfe 	bl	8011dce <USBD_LL_PrepareReceive>
 800e3d2:	e018      	b.n	800e406 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3da:	b2db      	uxtb	r3, r3
 800e3dc:	2b03      	cmp	r3, #3
 800e3de:	d10b      	bne.n	800e3f8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3e6:	68db      	ldr	r3, [r3, #12]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d005      	beq.n	800e3f8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3f2:	68db      	ldr	r3, [r3, #12]
 800e3f4:	68f8      	ldr	r0, [r7, #12]
 800e3f6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e3f8:	2180      	movs	r1, #128	; 0x80
 800e3fa:	68f8      	ldr	r0, [r7, #12]
 800e3fc:	f003 fc3c 	bl	8011c78 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e400:	68f8      	ldr	r0, [r7, #12]
 800e402:	f000 ff49 	bl	800f298 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e40c:	2b01      	cmp	r3, #1
 800e40e:	d122      	bne.n	800e456 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e410:	68f8      	ldr	r0, [r7, #12]
 800e412:	f7ff fe98 	bl	800e146 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	2200      	movs	r2, #0
 800e41a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e41e:	e01a      	b.n	800e456 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e426:	b2db      	uxtb	r3, r3
 800e428:	2b03      	cmp	r3, #3
 800e42a:	d114      	bne.n	800e456 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e432:	695b      	ldr	r3, [r3, #20]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d00e      	beq.n	800e456 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e43e:	695b      	ldr	r3, [r3, #20]
 800e440:	7afa      	ldrb	r2, [r7, #11]
 800e442:	4611      	mov	r1, r2
 800e444:	68f8      	ldr	r0, [r7, #12]
 800e446:	4798      	blx	r3
 800e448:	4603      	mov	r3, r0
 800e44a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e44c:	7dfb      	ldrb	r3, [r7, #23]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d001      	beq.n	800e456 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e452:	7dfb      	ldrb	r3, [r7, #23]
 800e454:	e000      	b.n	800e458 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e456:	2300      	movs	r3, #0
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3718      	adds	r7, #24
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b082      	sub	sp, #8
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2201      	movs	r2, #1
 800e46c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2200      	movs	r2, #0
 800e474:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2200      	movs	r2, #0
 800e47c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2200      	movs	r2, #0
 800e482:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d101      	bne.n	800e494 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e490:	2303      	movs	r3, #3
 800e492:	e02f      	b.n	800e4f4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d00f      	beq.n	800e4be <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4a4:	685b      	ldr	r3, [r3, #4]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d009      	beq.n	800e4be <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4b0:	685b      	ldr	r3, [r3, #4]
 800e4b2:	687a      	ldr	r2, [r7, #4]
 800e4b4:	6852      	ldr	r2, [r2, #4]
 800e4b6:	b2d2      	uxtb	r2, r2
 800e4b8:	4611      	mov	r1, r2
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e4be:	2340      	movs	r3, #64	; 0x40
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	2100      	movs	r1, #0
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f003 fb92 	bl	8011bee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2240      	movs	r2, #64	; 0x40
 800e4d6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e4da:	2340      	movs	r3, #64	; 0x40
 800e4dc:	2200      	movs	r2, #0
 800e4de:	2180      	movs	r1, #128	; 0x80
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f003 fb84 	bl	8011bee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2201      	movs	r2, #1
 800e4ea:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2240      	movs	r2, #64	; 0x40
 800e4f0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e4f2:	2300      	movs	r3, #0
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3708      	adds	r7, #8
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b083      	sub	sp, #12
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	460b      	mov	r3, r1
 800e506:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	78fa      	ldrb	r2, [r7, #3]
 800e50c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e50e:	2300      	movs	r3, #0
}
 800e510:	4618      	mov	r0, r3
 800e512:	370c      	adds	r7, #12
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr

0800e51c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e51c:	b480      	push	{r7}
 800e51e:	b083      	sub	sp, #12
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e52a:	b2da      	uxtb	r2, r3
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2204      	movs	r2, #4
 800e536:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e53a:	2300      	movs	r3, #0
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	370c      	adds	r7, #12
 800e540:	46bd      	mov	sp, r7
 800e542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e546:	4770      	bx	lr

0800e548 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e548:	b480      	push	{r7}
 800e54a:	b083      	sub	sp, #12
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e556:	b2db      	uxtb	r3, r3
 800e558:	2b04      	cmp	r3, #4
 800e55a:	d106      	bne.n	800e56a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e562:	b2da      	uxtb	r2, r3
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e56a:	2300      	movs	r3, #0
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	370c      	adds	r7, #12
 800e570:	46bd      	mov	sp, r7
 800e572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e576:	4770      	bx	lr

0800e578 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b082      	sub	sp, #8
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e586:	2b00      	cmp	r3, #0
 800e588:	d101      	bne.n	800e58e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e58a:	2303      	movs	r3, #3
 800e58c:	e012      	b.n	800e5b4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e594:	b2db      	uxtb	r3, r3
 800e596:	2b03      	cmp	r3, #3
 800e598:	d10b      	bne.n	800e5b2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5a0:	69db      	ldr	r3, [r3, #28]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d005      	beq.n	800e5b2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5ac:	69db      	ldr	r3, [r3, #28]
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e5b2:	2300      	movs	r3, #0
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3708      	adds	r7, #8
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}

0800e5bc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e5bc:	b480      	push	{r7}
 800e5be:	b087      	sub	sp, #28
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	3301      	adds	r3, #1
 800e5d2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e5da:	8a3b      	ldrh	r3, [r7, #16]
 800e5dc:	021b      	lsls	r3, r3, #8
 800e5de:	b21a      	sxth	r2, r3
 800e5e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e5e4:	4313      	orrs	r3, r2
 800e5e6:	b21b      	sxth	r3, r3
 800e5e8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e5ea:	89fb      	ldrh	r3, [r7, #14]
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	371c      	adds	r7, #28
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f6:	4770      	bx	lr

0800e5f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b084      	sub	sp, #16
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
 800e600:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e602:	2300      	movs	r3, #0
 800e604:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	781b      	ldrb	r3, [r3, #0]
 800e60a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e60e:	2b40      	cmp	r3, #64	; 0x40
 800e610:	d005      	beq.n	800e61e <USBD_StdDevReq+0x26>
 800e612:	2b40      	cmp	r3, #64	; 0x40
 800e614:	d853      	bhi.n	800e6be <USBD_StdDevReq+0xc6>
 800e616:	2b00      	cmp	r3, #0
 800e618:	d00b      	beq.n	800e632 <USBD_StdDevReq+0x3a>
 800e61a:	2b20      	cmp	r3, #32
 800e61c:	d14f      	bne.n	800e6be <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e624:	689b      	ldr	r3, [r3, #8]
 800e626:	6839      	ldr	r1, [r7, #0]
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	4798      	blx	r3
 800e62c:	4603      	mov	r3, r0
 800e62e:	73fb      	strb	r3, [r7, #15]
      break;
 800e630:	e04a      	b.n	800e6c8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	785b      	ldrb	r3, [r3, #1]
 800e636:	2b09      	cmp	r3, #9
 800e638:	d83b      	bhi.n	800e6b2 <USBD_StdDevReq+0xba>
 800e63a:	a201      	add	r2, pc, #4	; (adr r2, 800e640 <USBD_StdDevReq+0x48>)
 800e63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e640:	0800e695 	.word	0x0800e695
 800e644:	0800e6a9 	.word	0x0800e6a9
 800e648:	0800e6b3 	.word	0x0800e6b3
 800e64c:	0800e69f 	.word	0x0800e69f
 800e650:	0800e6b3 	.word	0x0800e6b3
 800e654:	0800e673 	.word	0x0800e673
 800e658:	0800e669 	.word	0x0800e669
 800e65c:	0800e6b3 	.word	0x0800e6b3
 800e660:	0800e68b 	.word	0x0800e68b
 800e664:	0800e67d 	.word	0x0800e67d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e668:	6839      	ldr	r1, [r7, #0]
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f000 f9de 	bl	800ea2c <USBD_GetDescriptor>
          break;
 800e670:	e024      	b.n	800e6bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e672:	6839      	ldr	r1, [r7, #0]
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f000 fb6d 	bl	800ed54 <USBD_SetAddress>
          break;
 800e67a:	e01f      	b.n	800e6bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e67c:	6839      	ldr	r1, [r7, #0]
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 fbac 	bl	800eddc <USBD_SetConfig>
 800e684:	4603      	mov	r3, r0
 800e686:	73fb      	strb	r3, [r7, #15]
          break;
 800e688:	e018      	b.n	800e6bc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e68a:	6839      	ldr	r1, [r7, #0]
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f000 fc4b 	bl	800ef28 <USBD_GetConfig>
          break;
 800e692:	e013      	b.n	800e6bc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e694:	6839      	ldr	r1, [r7, #0]
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f000 fc7c 	bl	800ef94 <USBD_GetStatus>
          break;
 800e69c:	e00e      	b.n	800e6bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e69e:	6839      	ldr	r1, [r7, #0]
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f000 fcab 	bl	800effc <USBD_SetFeature>
          break;
 800e6a6:	e009      	b.n	800e6bc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e6a8:	6839      	ldr	r1, [r7, #0]
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f000 fcba 	bl	800f024 <USBD_ClrFeature>
          break;
 800e6b0:	e004      	b.n	800e6bc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e6b2:	6839      	ldr	r1, [r7, #0]
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f000 fd11 	bl	800f0dc <USBD_CtlError>
          break;
 800e6ba:	bf00      	nop
      }
      break;
 800e6bc:	e004      	b.n	800e6c8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e6be:	6839      	ldr	r1, [r7, #0]
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f000 fd0b 	bl	800f0dc <USBD_CtlError>
      break;
 800e6c6:	bf00      	nop
  }

  return ret;
 800e6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	3710      	adds	r7, #16
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
 800e6d2:	bf00      	nop

0800e6d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	781b      	ldrb	r3, [r3, #0]
 800e6e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e6ea:	2b40      	cmp	r3, #64	; 0x40
 800e6ec:	d005      	beq.n	800e6fa <USBD_StdItfReq+0x26>
 800e6ee:	2b40      	cmp	r3, #64	; 0x40
 800e6f0:	d82f      	bhi.n	800e752 <USBD_StdItfReq+0x7e>
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d001      	beq.n	800e6fa <USBD_StdItfReq+0x26>
 800e6f6:	2b20      	cmp	r3, #32
 800e6f8:	d12b      	bne.n	800e752 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e700:	b2db      	uxtb	r3, r3
 800e702:	3b01      	subs	r3, #1
 800e704:	2b02      	cmp	r3, #2
 800e706:	d81d      	bhi.n	800e744 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	889b      	ldrh	r3, [r3, #4]
 800e70c:	b2db      	uxtb	r3, r3
 800e70e:	2b01      	cmp	r3, #1
 800e710:	d813      	bhi.n	800e73a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e718:	689b      	ldr	r3, [r3, #8]
 800e71a:	6839      	ldr	r1, [r7, #0]
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	4798      	blx	r3
 800e720:	4603      	mov	r3, r0
 800e722:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	88db      	ldrh	r3, [r3, #6]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d110      	bne.n	800e74e <USBD_StdItfReq+0x7a>
 800e72c:	7bfb      	ldrb	r3, [r7, #15]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d10d      	bne.n	800e74e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f000 fd9d 	bl	800f272 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e738:	e009      	b.n	800e74e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e73a:	6839      	ldr	r1, [r7, #0]
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f000 fccd 	bl	800f0dc <USBD_CtlError>
          break;
 800e742:	e004      	b.n	800e74e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e744:	6839      	ldr	r1, [r7, #0]
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f000 fcc8 	bl	800f0dc <USBD_CtlError>
          break;
 800e74c:	e000      	b.n	800e750 <USBD_StdItfReq+0x7c>
          break;
 800e74e:	bf00      	nop
      }
      break;
 800e750:	e004      	b.n	800e75c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e752:	6839      	ldr	r1, [r7, #0]
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f000 fcc1 	bl	800f0dc <USBD_CtlError>
      break;
 800e75a:	bf00      	nop
  }

  return ret;
 800e75c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e75e:	4618      	mov	r0, r3
 800e760:	3710      	adds	r7, #16
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}

0800e766 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e766:	b580      	push	{r7, lr}
 800e768:	b084      	sub	sp, #16
 800e76a:	af00      	add	r7, sp, #0
 800e76c:	6078      	str	r0, [r7, #4]
 800e76e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e770:	2300      	movs	r3, #0
 800e772:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	889b      	ldrh	r3, [r3, #4]
 800e778:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e782:	2b40      	cmp	r3, #64	; 0x40
 800e784:	d007      	beq.n	800e796 <USBD_StdEPReq+0x30>
 800e786:	2b40      	cmp	r3, #64	; 0x40
 800e788:	f200 8145 	bhi.w	800ea16 <USBD_StdEPReq+0x2b0>
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d00c      	beq.n	800e7aa <USBD_StdEPReq+0x44>
 800e790:	2b20      	cmp	r3, #32
 800e792:	f040 8140 	bne.w	800ea16 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e79c:	689b      	ldr	r3, [r3, #8]
 800e79e:	6839      	ldr	r1, [r7, #0]
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	4798      	blx	r3
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	73fb      	strb	r3, [r7, #15]
      break;
 800e7a8:	e13a      	b.n	800ea20 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	785b      	ldrb	r3, [r3, #1]
 800e7ae:	2b03      	cmp	r3, #3
 800e7b0:	d007      	beq.n	800e7c2 <USBD_StdEPReq+0x5c>
 800e7b2:	2b03      	cmp	r3, #3
 800e7b4:	f300 8129 	bgt.w	800ea0a <USBD_StdEPReq+0x2a4>
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d07f      	beq.n	800e8bc <USBD_StdEPReq+0x156>
 800e7bc:	2b01      	cmp	r3, #1
 800e7be:	d03c      	beq.n	800e83a <USBD_StdEPReq+0xd4>
 800e7c0:	e123      	b.n	800ea0a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7c8:	b2db      	uxtb	r3, r3
 800e7ca:	2b02      	cmp	r3, #2
 800e7cc:	d002      	beq.n	800e7d4 <USBD_StdEPReq+0x6e>
 800e7ce:	2b03      	cmp	r3, #3
 800e7d0:	d016      	beq.n	800e800 <USBD_StdEPReq+0x9a>
 800e7d2:	e02c      	b.n	800e82e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e7d4:	7bbb      	ldrb	r3, [r7, #14]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d00d      	beq.n	800e7f6 <USBD_StdEPReq+0x90>
 800e7da:	7bbb      	ldrb	r3, [r7, #14]
 800e7dc:	2b80      	cmp	r3, #128	; 0x80
 800e7de:	d00a      	beq.n	800e7f6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e7e0:	7bbb      	ldrb	r3, [r7, #14]
 800e7e2:	4619      	mov	r1, r3
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f003 fa47 	bl	8011c78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e7ea:	2180      	movs	r1, #128	; 0x80
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f003 fa43 	bl	8011c78 <USBD_LL_StallEP>
 800e7f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e7f4:	e020      	b.n	800e838 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e7f6:	6839      	ldr	r1, [r7, #0]
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f000 fc6f 	bl	800f0dc <USBD_CtlError>
              break;
 800e7fe:	e01b      	b.n	800e838 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	885b      	ldrh	r3, [r3, #2]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d10e      	bne.n	800e826 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e808:	7bbb      	ldrb	r3, [r7, #14]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d00b      	beq.n	800e826 <USBD_StdEPReq+0xc0>
 800e80e:	7bbb      	ldrb	r3, [r7, #14]
 800e810:	2b80      	cmp	r3, #128	; 0x80
 800e812:	d008      	beq.n	800e826 <USBD_StdEPReq+0xc0>
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	88db      	ldrh	r3, [r3, #6]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d104      	bne.n	800e826 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e81c:	7bbb      	ldrb	r3, [r7, #14]
 800e81e:	4619      	mov	r1, r3
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f003 fa29 	bl	8011c78 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	f000 fd23 	bl	800f272 <USBD_CtlSendStatus>

              break;
 800e82c:	e004      	b.n	800e838 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e82e:	6839      	ldr	r1, [r7, #0]
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f000 fc53 	bl	800f0dc <USBD_CtlError>
              break;
 800e836:	bf00      	nop
          }
          break;
 800e838:	e0ec      	b.n	800ea14 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e840:	b2db      	uxtb	r3, r3
 800e842:	2b02      	cmp	r3, #2
 800e844:	d002      	beq.n	800e84c <USBD_StdEPReq+0xe6>
 800e846:	2b03      	cmp	r3, #3
 800e848:	d016      	beq.n	800e878 <USBD_StdEPReq+0x112>
 800e84a:	e030      	b.n	800e8ae <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e84c:	7bbb      	ldrb	r3, [r7, #14]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d00d      	beq.n	800e86e <USBD_StdEPReq+0x108>
 800e852:	7bbb      	ldrb	r3, [r7, #14]
 800e854:	2b80      	cmp	r3, #128	; 0x80
 800e856:	d00a      	beq.n	800e86e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e858:	7bbb      	ldrb	r3, [r7, #14]
 800e85a:	4619      	mov	r1, r3
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f003 fa0b 	bl	8011c78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e862:	2180      	movs	r1, #128	; 0x80
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f003 fa07 	bl	8011c78 <USBD_LL_StallEP>
 800e86a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e86c:	e025      	b.n	800e8ba <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e86e:	6839      	ldr	r1, [r7, #0]
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f000 fc33 	bl	800f0dc <USBD_CtlError>
              break;
 800e876:	e020      	b.n	800e8ba <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	885b      	ldrh	r3, [r3, #2]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d11b      	bne.n	800e8b8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e880:	7bbb      	ldrb	r3, [r7, #14]
 800e882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e886:	2b00      	cmp	r3, #0
 800e888:	d004      	beq.n	800e894 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e88a:	7bbb      	ldrb	r3, [r7, #14]
 800e88c:	4619      	mov	r1, r3
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f003 fa11 	bl	8011cb6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f000 fcec 	bl	800f272 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8a0:	689b      	ldr	r3, [r3, #8]
 800e8a2:	6839      	ldr	r1, [r7, #0]
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	4798      	blx	r3
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e8ac:	e004      	b.n	800e8b8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e8ae:	6839      	ldr	r1, [r7, #0]
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f000 fc13 	bl	800f0dc <USBD_CtlError>
              break;
 800e8b6:	e000      	b.n	800e8ba <USBD_StdEPReq+0x154>
              break;
 800e8b8:	bf00      	nop
          }
          break;
 800e8ba:	e0ab      	b.n	800ea14 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	2b02      	cmp	r3, #2
 800e8c6:	d002      	beq.n	800e8ce <USBD_StdEPReq+0x168>
 800e8c8:	2b03      	cmp	r3, #3
 800e8ca:	d032      	beq.n	800e932 <USBD_StdEPReq+0x1cc>
 800e8cc:	e097      	b.n	800e9fe <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e8ce:	7bbb      	ldrb	r3, [r7, #14]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d007      	beq.n	800e8e4 <USBD_StdEPReq+0x17e>
 800e8d4:	7bbb      	ldrb	r3, [r7, #14]
 800e8d6:	2b80      	cmp	r3, #128	; 0x80
 800e8d8:	d004      	beq.n	800e8e4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e8da:	6839      	ldr	r1, [r7, #0]
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f000 fbfd 	bl	800f0dc <USBD_CtlError>
                break;
 800e8e2:	e091      	b.n	800ea08 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e8e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	da0b      	bge.n	800e904 <USBD_StdEPReq+0x19e>
 800e8ec:	7bbb      	ldrb	r3, [r7, #14]
 800e8ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e8f2:	4613      	mov	r3, r2
 800e8f4:	009b      	lsls	r3, r3, #2
 800e8f6:	4413      	add	r3, r2
 800e8f8:	009b      	lsls	r3, r3, #2
 800e8fa:	3310      	adds	r3, #16
 800e8fc:	687a      	ldr	r2, [r7, #4]
 800e8fe:	4413      	add	r3, r2
 800e900:	3304      	adds	r3, #4
 800e902:	e00b      	b.n	800e91c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e904:	7bbb      	ldrb	r3, [r7, #14]
 800e906:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e90a:	4613      	mov	r3, r2
 800e90c:	009b      	lsls	r3, r3, #2
 800e90e:	4413      	add	r3, r2
 800e910:	009b      	lsls	r3, r3, #2
 800e912:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e916:	687a      	ldr	r2, [r7, #4]
 800e918:	4413      	add	r3, r2
 800e91a:	3304      	adds	r3, #4
 800e91c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	2200      	movs	r2, #0
 800e922:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	2202      	movs	r2, #2
 800e928:	4619      	mov	r1, r3
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f000 fc47 	bl	800f1be <USBD_CtlSendData>
              break;
 800e930:	e06a      	b.n	800ea08 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e932:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e936:	2b00      	cmp	r3, #0
 800e938:	da11      	bge.n	800e95e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e93a:	7bbb      	ldrb	r3, [r7, #14]
 800e93c:	f003 020f 	and.w	r2, r3, #15
 800e940:	6879      	ldr	r1, [r7, #4]
 800e942:	4613      	mov	r3, r2
 800e944:	009b      	lsls	r3, r3, #2
 800e946:	4413      	add	r3, r2
 800e948:	009b      	lsls	r3, r3, #2
 800e94a:	440b      	add	r3, r1
 800e94c:	3324      	adds	r3, #36	; 0x24
 800e94e:	881b      	ldrh	r3, [r3, #0]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d117      	bne.n	800e984 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e954:	6839      	ldr	r1, [r7, #0]
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f000 fbc0 	bl	800f0dc <USBD_CtlError>
                  break;
 800e95c:	e054      	b.n	800ea08 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e95e:	7bbb      	ldrb	r3, [r7, #14]
 800e960:	f003 020f 	and.w	r2, r3, #15
 800e964:	6879      	ldr	r1, [r7, #4]
 800e966:	4613      	mov	r3, r2
 800e968:	009b      	lsls	r3, r3, #2
 800e96a:	4413      	add	r3, r2
 800e96c:	009b      	lsls	r3, r3, #2
 800e96e:	440b      	add	r3, r1
 800e970:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e974:	881b      	ldrh	r3, [r3, #0]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d104      	bne.n	800e984 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e97a:	6839      	ldr	r1, [r7, #0]
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f000 fbad 	bl	800f0dc <USBD_CtlError>
                  break;
 800e982:	e041      	b.n	800ea08 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e984:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	da0b      	bge.n	800e9a4 <USBD_StdEPReq+0x23e>
 800e98c:	7bbb      	ldrb	r3, [r7, #14]
 800e98e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e992:	4613      	mov	r3, r2
 800e994:	009b      	lsls	r3, r3, #2
 800e996:	4413      	add	r3, r2
 800e998:	009b      	lsls	r3, r3, #2
 800e99a:	3310      	adds	r3, #16
 800e99c:	687a      	ldr	r2, [r7, #4]
 800e99e:	4413      	add	r3, r2
 800e9a0:	3304      	adds	r3, #4
 800e9a2:	e00b      	b.n	800e9bc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e9a4:	7bbb      	ldrb	r3, [r7, #14]
 800e9a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e9aa:	4613      	mov	r3, r2
 800e9ac:	009b      	lsls	r3, r3, #2
 800e9ae:	4413      	add	r3, r2
 800e9b0:	009b      	lsls	r3, r3, #2
 800e9b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e9b6:	687a      	ldr	r2, [r7, #4]
 800e9b8:	4413      	add	r3, r2
 800e9ba:	3304      	adds	r3, #4
 800e9bc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e9be:	7bbb      	ldrb	r3, [r7, #14]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d002      	beq.n	800e9ca <USBD_StdEPReq+0x264>
 800e9c4:	7bbb      	ldrb	r3, [r7, #14]
 800e9c6:	2b80      	cmp	r3, #128	; 0x80
 800e9c8:	d103      	bne.n	800e9d2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	601a      	str	r2, [r3, #0]
 800e9d0:	e00e      	b.n	800e9f0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e9d2:	7bbb      	ldrb	r3, [r7, #14]
 800e9d4:	4619      	mov	r1, r3
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f003 f98c 	bl	8011cf4 <USBD_LL_IsStallEP>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d003      	beq.n	800e9ea <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	601a      	str	r2, [r3, #0]
 800e9e8:	e002      	b.n	800e9f0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	2202      	movs	r2, #2
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f000 fbe1 	bl	800f1be <USBD_CtlSendData>
              break;
 800e9fc:	e004      	b.n	800ea08 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e9fe:	6839      	ldr	r1, [r7, #0]
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f000 fb6b 	bl	800f0dc <USBD_CtlError>
              break;
 800ea06:	bf00      	nop
          }
          break;
 800ea08:	e004      	b.n	800ea14 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ea0a:	6839      	ldr	r1, [r7, #0]
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f000 fb65 	bl	800f0dc <USBD_CtlError>
          break;
 800ea12:	bf00      	nop
      }
      break;
 800ea14:	e004      	b.n	800ea20 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ea16:	6839      	ldr	r1, [r7, #0]
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f000 fb5f 	bl	800f0dc <USBD_CtlError>
      break;
 800ea1e:	bf00      	nop
  }

  return ret;
 800ea20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3710      	adds	r7, #16
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
	...

0800ea2c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b084      	sub	sp, #16
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
 800ea34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ea36:	2300      	movs	r3, #0
 800ea38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	885b      	ldrh	r3, [r3, #2]
 800ea46:	0a1b      	lsrs	r3, r3, #8
 800ea48:	b29b      	uxth	r3, r3
 800ea4a:	3b01      	subs	r3, #1
 800ea4c:	2b0e      	cmp	r3, #14
 800ea4e:	f200 8152 	bhi.w	800ecf6 <USBD_GetDescriptor+0x2ca>
 800ea52:	a201      	add	r2, pc, #4	; (adr r2, 800ea58 <USBD_GetDescriptor+0x2c>)
 800ea54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea58:	0800eac9 	.word	0x0800eac9
 800ea5c:	0800eae1 	.word	0x0800eae1
 800ea60:	0800eb21 	.word	0x0800eb21
 800ea64:	0800ecf7 	.word	0x0800ecf7
 800ea68:	0800ecf7 	.word	0x0800ecf7
 800ea6c:	0800ec97 	.word	0x0800ec97
 800ea70:	0800ecc3 	.word	0x0800ecc3
 800ea74:	0800ecf7 	.word	0x0800ecf7
 800ea78:	0800ecf7 	.word	0x0800ecf7
 800ea7c:	0800ecf7 	.word	0x0800ecf7
 800ea80:	0800ecf7 	.word	0x0800ecf7
 800ea84:	0800ecf7 	.word	0x0800ecf7
 800ea88:	0800ecf7 	.word	0x0800ecf7
 800ea8c:	0800ecf7 	.word	0x0800ecf7
 800ea90:	0800ea95 	.word	0x0800ea95
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea9a:	69db      	ldr	r3, [r3, #28]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d00b      	beq.n	800eab8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eaa6:	69db      	ldr	r3, [r3, #28]
 800eaa8:	687a      	ldr	r2, [r7, #4]
 800eaaa:	7c12      	ldrb	r2, [r2, #16]
 800eaac:	f107 0108 	add.w	r1, r7, #8
 800eab0:	4610      	mov	r0, r2
 800eab2:	4798      	blx	r3
 800eab4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eab6:	e126      	b.n	800ed06 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800eab8:	6839      	ldr	r1, [r7, #0]
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f000 fb0e 	bl	800f0dc <USBD_CtlError>
        err++;
 800eac0:	7afb      	ldrb	r3, [r7, #11]
 800eac2:	3301      	adds	r3, #1
 800eac4:	72fb      	strb	r3, [r7, #11]
      break;
 800eac6:	e11e      	b.n	800ed06 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	687a      	ldr	r2, [r7, #4]
 800ead2:	7c12      	ldrb	r2, [r2, #16]
 800ead4:	f107 0108 	add.w	r1, r7, #8
 800ead8:	4610      	mov	r0, r2
 800eada:	4798      	blx	r3
 800eadc:	60f8      	str	r0, [r7, #12]
      break;
 800eade:	e112      	b.n	800ed06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	7c1b      	ldrb	r3, [r3, #16]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d10d      	bne.n	800eb04 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eaee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaf0:	f107 0208 	add.w	r2, r7, #8
 800eaf4:	4610      	mov	r0, r2
 800eaf6:	4798      	blx	r3
 800eaf8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	3301      	adds	r3, #1
 800eafe:	2202      	movs	r2, #2
 800eb00:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800eb02:	e100      	b.n	800ed06 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb0c:	f107 0208 	add.w	r2, r7, #8
 800eb10:	4610      	mov	r0, r2
 800eb12:	4798      	blx	r3
 800eb14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	3301      	adds	r3, #1
 800eb1a:	2202      	movs	r2, #2
 800eb1c:	701a      	strb	r2, [r3, #0]
      break;
 800eb1e:	e0f2      	b.n	800ed06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	885b      	ldrh	r3, [r3, #2]
 800eb24:	b2db      	uxtb	r3, r3
 800eb26:	2b05      	cmp	r3, #5
 800eb28:	f200 80ac 	bhi.w	800ec84 <USBD_GetDescriptor+0x258>
 800eb2c:	a201      	add	r2, pc, #4	; (adr r2, 800eb34 <USBD_GetDescriptor+0x108>)
 800eb2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb32:	bf00      	nop
 800eb34:	0800eb4d 	.word	0x0800eb4d
 800eb38:	0800eb81 	.word	0x0800eb81
 800eb3c:	0800ebb5 	.word	0x0800ebb5
 800eb40:	0800ebe9 	.word	0x0800ebe9
 800eb44:	0800ec1d 	.word	0x0800ec1d
 800eb48:	0800ec51 	.word	0x0800ec51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb52:	685b      	ldr	r3, [r3, #4]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d00b      	beq.n	800eb70 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb5e:	685b      	ldr	r3, [r3, #4]
 800eb60:	687a      	ldr	r2, [r7, #4]
 800eb62:	7c12      	ldrb	r2, [r2, #16]
 800eb64:	f107 0108 	add.w	r1, r7, #8
 800eb68:	4610      	mov	r0, r2
 800eb6a:	4798      	blx	r3
 800eb6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb6e:	e091      	b.n	800ec94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb70:	6839      	ldr	r1, [r7, #0]
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f000 fab2 	bl	800f0dc <USBD_CtlError>
            err++;
 800eb78:	7afb      	ldrb	r3, [r7, #11]
 800eb7a:	3301      	adds	r3, #1
 800eb7c:	72fb      	strb	r3, [r7, #11]
          break;
 800eb7e:	e089      	b.n	800ec94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb86:	689b      	ldr	r3, [r3, #8]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d00b      	beq.n	800eba4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb92:	689b      	ldr	r3, [r3, #8]
 800eb94:	687a      	ldr	r2, [r7, #4]
 800eb96:	7c12      	ldrb	r2, [r2, #16]
 800eb98:	f107 0108 	add.w	r1, r7, #8
 800eb9c:	4610      	mov	r0, r2
 800eb9e:	4798      	blx	r3
 800eba0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eba2:	e077      	b.n	800ec94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eba4:	6839      	ldr	r1, [r7, #0]
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f000 fa98 	bl	800f0dc <USBD_CtlError>
            err++;
 800ebac:	7afb      	ldrb	r3, [r7, #11]
 800ebae:	3301      	adds	r3, #1
 800ebb0:	72fb      	strb	r3, [r7, #11]
          break;
 800ebb2:	e06f      	b.n	800ec94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ebba:	68db      	ldr	r3, [r3, #12]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d00b      	beq.n	800ebd8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ebc6:	68db      	ldr	r3, [r3, #12]
 800ebc8:	687a      	ldr	r2, [r7, #4]
 800ebca:	7c12      	ldrb	r2, [r2, #16]
 800ebcc:	f107 0108 	add.w	r1, r7, #8
 800ebd0:	4610      	mov	r0, r2
 800ebd2:	4798      	blx	r3
 800ebd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ebd6:	e05d      	b.n	800ec94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ebd8:	6839      	ldr	r1, [r7, #0]
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f000 fa7e 	bl	800f0dc <USBD_CtlError>
            err++;
 800ebe0:	7afb      	ldrb	r3, [r7, #11]
 800ebe2:	3301      	adds	r3, #1
 800ebe4:	72fb      	strb	r3, [r7, #11]
          break;
 800ebe6:	e055      	b.n	800ec94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ebee:	691b      	ldr	r3, [r3, #16]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d00b      	beq.n	800ec0c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ebfa:	691b      	ldr	r3, [r3, #16]
 800ebfc:	687a      	ldr	r2, [r7, #4]
 800ebfe:	7c12      	ldrb	r2, [r2, #16]
 800ec00:	f107 0108 	add.w	r1, r7, #8
 800ec04:	4610      	mov	r0, r2
 800ec06:	4798      	blx	r3
 800ec08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ec0a:	e043      	b.n	800ec94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ec0c:	6839      	ldr	r1, [r7, #0]
 800ec0e:	6878      	ldr	r0, [r7, #4]
 800ec10:	f000 fa64 	bl	800f0dc <USBD_CtlError>
            err++;
 800ec14:	7afb      	ldrb	r3, [r7, #11]
 800ec16:	3301      	adds	r3, #1
 800ec18:	72fb      	strb	r3, [r7, #11]
          break;
 800ec1a:	e03b      	b.n	800ec94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ec22:	695b      	ldr	r3, [r3, #20]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d00b      	beq.n	800ec40 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ec2e:	695b      	ldr	r3, [r3, #20]
 800ec30:	687a      	ldr	r2, [r7, #4]
 800ec32:	7c12      	ldrb	r2, [r2, #16]
 800ec34:	f107 0108 	add.w	r1, r7, #8
 800ec38:	4610      	mov	r0, r2
 800ec3a:	4798      	blx	r3
 800ec3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ec3e:	e029      	b.n	800ec94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ec40:	6839      	ldr	r1, [r7, #0]
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f000 fa4a 	bl	800f0dc <USBD_CtlError>
            err++;
 800ec48:	7afb      	ldrb	r3, [r7, #11]
 800ec4a:	3301      	adds	r3, #1
 800ec4c:	72fb      	strb	r3, [r7, #11]
          break;
 800ec4e:	e021      	b.n	800ec94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ec56:	699b      	ldr	r3, [r3, #24]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d00b      	beq.n	800ec74 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ec62:	699b      	ldr	r3, [r3, #24]
 800ec64:	687a      	ldr	r2, [r7, #4]
 800ec66:	7c12      	ldrb	r2, [r2, #16]
 800ec68:	f107 0108 	add.w	r1, r7, #8
 800ec6c:	4610      	mov	r0, r2
 800ec6e:	4798      	blx	r3
 800ec70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ec72:	e00f      	b.n	800ec94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ec74:	6839      	ldr	r1, [r7, #0]
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f000 fa30 	bl	800f0dc <USBD_CtlError>
            err++;
 800ec7c:	7afb      	ldrb	r3, [r7, #11]
 800ec7e:	3301      	adds	r3, #1
 800ec80:	72fb      	strb	r3, [r7, #11]
          break;
 800ec82:	e007      	b.n	800ec94 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ec84:	6839      	ldr	r1, [r7, #0]
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f000 fa28 	bl	800f0dc <USBD_CtlError>
          err++;
 800ec8c:	7afb      	ldrb	r3, [r7, #11]
 800ec8e:	3301      	adds	r3, #1
 800ec90:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ec92:	bf00      	nop
      }
      break;
 800ec94:	e037      	b.n	800ed06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	7c1b      	ldrb	r3, [r3, #16]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d109      	bne.n	800ecb2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eca6:	f107 0208 	add.w	r2, r7, #8
 800ecaa:	4610      	mov	r0, r2
 800ecac:	4798      	blx	r3
 800ecae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ecb0:	e029      	b.n	800ed06 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ecb2:	6839      	ldr	r1, [r7, #0]
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f000 fa11 	bl	800f0dc <USBD_CtlError>
        err++;
 800ecba:	7afb      	ldrb	r3, [r7, #11]
 800ecbc:	3301      	adds	r3, #1
 800ecbe:	72fb      	strb	r3, [r7, #11]
      break;
 800ecc0:	e021      	b.n	800ed06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	7c1b      	ldrb	r3, [r3, #16]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d10d      	bne.n	800ece6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecd2:	f107 0208 	add.w	r2, r7, #8
 800ecd6:	4610      	mov	r0, r2
 800ecd8:	4798      	blx	r3
 800ecda:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	3301      	adds	r3, #1
 800ece0:	2207      	movs	r2, #7
 800ece2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ece4:	e00f      	b.n	800ed06 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ece6:	6839      	ldr	r1, [r7, #0]
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f000 f9f7 	bl	800f0dc <USBD_CtlError>
        err++;
 800ecee:	7afb      	ldrb	r3, [r7, #11]
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	72fb      	strb	r3, [r7, #11]
      break;
 800ecf4:	e007      	b.n	800ed06 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ecf6:	6839      	ldr	r1, [r7, #0]
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f000 f9ef 	bl	800f0dc <USBD_CtlError>
      err++;
 800ecfe:	7afb      	ldrb	r3, [r7, #11]
 800ed00:	3301      	adds	r3, #1
 800ed02:	72fb      	strb	r3, [r7, #11]
      break;
 800ed04:	bf00      	nop
  }

  if (err != 0U)
 800ed06:	7afb      	ldrb	r3, [r7, #11]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d11e      	bne.n	800ed4a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	88db      	ldrh	r3, [r3, #6]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d016      	beq.n	800ed42 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ed14:	893b      	ldrh	r3, [r7, #8]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d00e      	beq.n	800ed38 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	88da      	ldrh	r2, [r3, #6]
 800ed1e:	893b      	ldrh	r3, [r7, #8]
 800ed20:	4293      	cmp	r3, r2
 800ed22:	bf28      	it	cs
 800ed24:	4613      	movcs	r3, r2
 800ed26:	b29b      	uxth	r3, r3
 800ed28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ed2a:	893b      	ldrh	r3, [r7, #8]
 800ed2c:	461a      	mov	r2, r3
 800ed2e:	68f9      	ldr	r1, [r7, #12]
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f000 fa44 	bl	800f1be <USBD_CtlSendData>
 800ed36:	e009      	b.n	800ed4c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ed38:	6839      	ldr	r1, [r7, #0]
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f000 f9ce 	bl	800f0dc <USBD_CtlError>
 800ed40:	e004      	b.n	800ed4c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f000 fa95 	bl	800f272 <USBD_CtlSendStatus>
 800ed48:	e000      	b.n	800ed4c <USBD_GetDescriptor+0x320>
    return;
 800ed4a:	bf00      	nop
  }
}
 800ed4c:	3710      	adds	r7, #16
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop

0800ed54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b084      	sub	sp, #16
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
 800ed5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	889b      	ldrh	r3, [r3, #4]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d131      	bne.n	800edca <USBD_SetAddress+0x76>
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	88db      	ldrh	r3, [r3, #6]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d12d      	bne.n	800edca <USBD_SetAddress+0x76>
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	885b      	ldrh	r3, [r3, #2]
 800ed72:	2b7f      	cmp	r3, #127	; 0x7f
 800ed74:	d829      	bhi.n	800edca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	885b      	ldrh	r3, [r3, #2]
 800ed7a:	b2db      	uxtb	r3, r3
 800ed7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed88:	b2db      	uxtb	r3, r3
 800ed8a:	2b03      	cmp	r3, #3
 800ed8c:	d104      	bne.n	800ed98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ed8e:	6839      	ldr	r1, [r7, #0]
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f000 f9a3 	bl	800f0dc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed96:	e01d      	b.n	800edd4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	7bfa      	ldrb	r2, [r7, #15]
 800ed9c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800eda0:	7bfb      	ldrb	r3, [r7, #15]
 800eda2:	4619      	mov	r1, r3
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f002 ffd2 	bl	8011d4e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f000 fa61 	bl	800f272 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800edb0:	7bfb      	ldrb	r3, [r7, #15]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d004      	beq.n	800edc0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2202      	movs	r2, #2
 800edba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edbe:	e009      	b.n	800edd4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2201      	movs	r2, #1
 800edc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edc8:	e004      	b.n	800edd4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800edca:	6839      	ldr	r1, [r7, #0]
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f000 f985 	bl	800f0dc <USBD_CtlError>
  }
}
 800edd2:	bf00      	nop
 800edd4:	bf00      	nop
 800edd6:	3710      	adds	r7, #16
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}

0800eddc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b084      	sub	sp, #16
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ede6:	2300      	movs	r3, #0
 800ede8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	885b      	ldrh	r3, [r3, #2]
 800edee:	b2da      	uxtb	r2, r3
 800edf0:	4b4c      	ldr	r3, [pc, #304]	; (800ef24 <USBD_SetConfig+0x148>)
 800edf2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800edf4:	4b4b      	ldr	r3, [pc, #300]	; (800ef24 <USBD_SetConfig+0x148>)
 800edf6:	781b      	ldrb	r3, [r3, #0]
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	d905      	bls.n	800ee08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800edfc:	6839      	ldr	r1, [r7, #0]
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f000 f96c 	bl	800f0dc <USBD_CtlError>
    return USBD_FAIL;
 800ee04:	2303      	movs	r3, #3
 800ee06:	e088      	b.n	800ef1a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee0e:	b2db      	uxtb	r3, r3
 800ee10:	2b02      	cmp	r3, #2
 800ee12:	d002      	beq.n	800ee1a <USBD_SetConfig+0x3e>
 800ee14:	2b03      	cmp	r3, #3
 800ee16:	d025      	beq.n	800ee64 <USBD_SetConfig+0x88>
 800ee18:	e071      	b.n	800eefe <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ee1a:	4b42      	ldr	r3, [pc, #264]	; (800ef24 <USBD_SetConfig+0x148>)
 800ee1c:	781b      	ldrb	r3, [r3, #0]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d01c      	beq.n	800ee5c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ee22:	4b40      	ldr	r3, [pc, #256]	; (800ef24 <USBD_SetConfig+0x148>)
 800ee24:	781b      	ldrb	r3, [r3, #0]
 800ee26:	461a      	mov	r2, r3
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ee2c:	4b3d      	ldr	r3, [pc, #244]	; (800ef24 <USBD_SetConfig+0x148>)
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	4619      	mov	r1, r3
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f7ff f992 	bl	800e15c <USBD_SetClassConfig>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ee3c:	7bfb      	ldrb	r3, [r7, #15]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d004      	beq.n	800ee4c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ee42:	6839      	ldr	r1, [r7, #0]
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f000 f949 	bl	800f0dc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ee4a:	e065      	b.n	800ef18 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f000 fa10 	bl	800f272 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2203      	movs	r2, #3
 800ee56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ee5a:	e05d      	b.n	800ef18 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	f000 fa08 	bl	800f272 <USBD_CtlSendStatus>
      break;
 800ee62:	e059      	b.n	800ef18 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ee64:	4b2f      	ldr	r3, [pc, #188]	; (800ef24 <USBD_SetConfig+0x148>)
 800ee66:	781b      	ldrb	r3, [r3, #0]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d112      	bne.n	800ee92 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2202      	movs	r2, #2
 800ee70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ee74:	4b2b      	ldr	r3, [pc, #172]	; (800ef24 <USBD_SetConfig+0x148>)
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	461a      	mov	r2, r3
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ee7e:	4b29      	ldr	r3, [pc, #164]	; (800ef24 <USBD_SetConfig+0x148>)
 800ee80:	781b      	ldrb	r3, [r3, #0]
 800ee82:	4619      	mov	r1, r3
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f7ff f985 	bl	800e194 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f000 f9f1 	bl	800f272 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ee90:	e042      	b.n	800ef18 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ee92:	4b24      	ldr	r3, [pc, #144]	; (800ef24 <USBD_SetConfig+0x148>)
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	461a      	mov	r2, r3
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	685b      	ldr	r3, [r3, #4]
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d02a      	beq.n	800eef6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	685b      	ldr	r3, [r3, #4]
 800eea4:	b2db      	uxtb	r3, r3
 800eea6:	4619      	mov	r1, r3
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f7ff f973 	bl	800e194 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800eeae:	4b1d      	ldr	r3, [pc, #116]	; (800ef24 <USBD_SetConfig+0x148>)
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eeb8:	4b1a      	ldr	r3, [pc, #104]	; (800ef24 <USBD_SetConfig+0x148>)
 800eeba:	781b      	ldrb	r3, [r3, #0]
 800eebc:	4619      	mov	r1, r3
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f7ff f94c 	bl	800e15c <USBD_SetClassConfig>
 800eec4:	4603      	mov	r3, r0
 800eec6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800eec8:	7bfb      	ldrb	r3, [r7, #15]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d00f      	beq.n	800eeee <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800eece:	6839      	ldr	r1, [r7, #0]
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f000 f903 	bl	800f0dc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	685b      	ldr	r3, [r3, #4]
 800eeda:	b2db      	uxtb	r3, r3
 800eedc:	4619      	mov	r1, r3
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f7ff f958 	bl	800e194 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2202      	movs	r2, #2
 800eee8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800eeec:	e014      	b.n	800ef18 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f000 f9bf 	bl	800f272 <USBD_CtlSendStatus>
      break;
 800eef4:	e010      	b.n	800ef18 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f000 f9bb 	bl	800f272 <USBD_CtlSendStatus>
      break;
 800eefc:	e00c      	b.n	800ef18 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800eefe:	6839      	ldr	r1, [r7, #0]
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f000 f8eb 	bl	800f0dc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ef06:	4b07      	ldr	r3, [pc, #28]	; (800ef24 <USBD_SetConfig+0x148>)
 800ef08:	781b      	ldrb	r3, [r3, #0]
 800ef0a:	4619      	mov	r1, r3
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f7ff f941 	bl	800e194 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ef12:	2303      	movs	r3, #3
 800ef14:	73fb      	strb	r3, [r7, #15]
      break;
 800ef16:	bf00      	nop
  }

  return ret;
 800ef18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	3710      	adds	r7, #16
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}
 800ef22:	bf00      	nop
 800ef24:	20000960 	.word	0x20000960

0800ef28 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
 800ef30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	88db      	ldrh	r3, [r3, #6]
 800ef36:	2b01      	cmp	r3, #1
 800ef38:	d004      	beq.n	800ef44 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ef3a:	6839      	ldr	r1, [r7, #0]
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f000 f8cd 	bl	800f0dc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ef42:	e023      	b.n	800ef8c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef4a:	b2db      	uxtb	r3, r3
 800ef4c:	2b02      	cmp	r3, #2
 800ef4e:	dc02      	bgt.n	800ef56 <USBD_GetConfig+0x2e>
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	dc03      	bgt.n	800ef5c <USBD_GetConfig+0x34>
 800ef54:	e015      	b.n	800ef82 <USBD_GetConfig+0x5a>
 800ef56:	2b03      	cmp	r3, #3
 800ef58:	d00b      	beq.n	800ef72 <USBD_GetConfig+0x4a>
 800ef5a:	e012      	b.n	800ef82 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	3308      	adds	r3, #8
 800ef66:	2201      	movs	r2, #1
 800ef68:	4619      	mov	r1, r3
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f000 f927 	bl	800f1be <USBD_CtlSendData>
        break;
 800ef70:	e00c      	b.n	800ef8c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	3304      	adds	r3, #4
 800ef76:	2201      	movs	r2, #1
 800ef78:	4619      	mov	r1, r3
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f000 f91f 	bl	800f1be <USBD_CtlSendData>
        break;
 800ef80:	e004      	b.n	800ef8c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ef82:	6839      	ldr	r1, [r7, #0]
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f000 f8a9 	bl	800f0dc <USBD_CtlError>
        break;
 800ef8a:	bf00      	nop
}
 800ef8c:	bf00      	nop
 800ef8e:	3708      	adds	r7, #8
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b082      	sub	sp, #8
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
 800ef9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efa4:	b2db      	uxtb	r3, r3
 800efa6:	3b01      	subs	r3, #1
 800efa8:	2b02      	cmp	r3, #2
 800efaa:	d81e      	bhi.n	800efea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	88db      	ldrh	r3, [r3, #6]
 800efb0:	2b02      	cmp	r3, #2
 800efb2:	d004      	beq.n	800efbe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800efb4:	6839      	ldr	r1, [r7, #0]
 800efb6:	6878      	ldr	r0, [r7, #4]
 800efb8:	f000 f890 	bl	800f0dc <USBD_CtlError>
        break;
 800efbc:	e01a      	b.n	800eff4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2201      	movs	r2, #1
 800efc2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d005      	beq.n	800efda <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	68db      	ldr	r3, [r3, #12]
 800efd2:	f043 0202 	orr.w	r2, r3, #2
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	330c      	adds	r3, #12
 800efde:	2202      	movs	r2, #2
 800efe0:	4619      	mov	r1, r3
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f000 f8eb 	bl	800f1be <USBD_CtlSendData>
      break;
 800efe8:	e004      	b.n	800eff4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800efea:	6839      	ldr	r1, [r7, #0]
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f000 f875 	bl	800f0dc <USBD_CtlError>
      break;
 800eff2:	bf00      	nop
  }
}
 800eff4:	bf00      	nop
 800eff6:	3708      	adds	r7, #8
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}

0800effc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
 800f004:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	885b      	ldrh	r3, [r3, #2]
 800f00a:	2b01      	cmp	r3, #1
 800f00c:	d106      	bne.n	800f01c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2201      	movs	r2, #1
 800f012:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f016:	6878      	ldr	r0, [r7, #4]
 800f018:	f000 f92b 	bl	800f272 <USBD_CtlSendStatus>
  }
}
 800f01c:	bf00      	nop
 800f01e:	3708      	adds	r7, #8
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}

0800f024 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b082      	sub	sp, #8
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f034:	b2db      	uxtb	r3, r3
 800f036:	3b01      	subs	r3, #1
 800f038:	2b02      	cmp	r3, #2
 800f03a:	d80b      	bhi.n	800f054 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	885b      	ldrh	r3, [r3, #2]
 800f040:	2b01      	cmp	r3, #1
 800f042:	d10c      	bne.n	800f05e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2200      	movs	r2, #0
 800f048:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f000 f910 	bl	800f272 <USBD_CtlSendStatus>
      }
      break;
 800f052:	e004      	b.n	800f05e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f054:	6839      	ldr	r1, [r7, #0]
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f000 f840 	bl	800f0dc <USBD_CtlError>
      break;
 800f05c:	e000      	b.n	800f060 <USBD_ClrFeature+0x3c>
      break;
 800f05e:	bf00      	nop
  }
}
 800f060:	bf00      	nop
 800f062:	3708      	adds	r7, #8
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b084      	sub	sp, #16
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
 800f070:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	781a      	ldrb	r2, [r3, #0]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	3301      	adds	r3, #1
 800f082:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	781a      	ldrb	r2, [r3, #0]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	3301      	adds	r3, #1
 800f090:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f092:	68f8      	ldr	r0, [r7, #12]
 800f094:	f7ff fa92 	bl	800e5bc <SWAPBYTE>
 800f098:	4603      	mov	r3, r0
 800f09a:	461a      	mov	r2, r3
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	3301      	adds	r3, #1
 800f0a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	3301      	adds	r3, #1
 800f0aa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f0ac:	68f8      	ldr	r0, [r7, #12]
 800f0ae:	f7ff fa85 	bl	800e5bc <SWAPBYTE>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	461a      	mov	r2, r3
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	3301      	adds	r3, #1
 800f0be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f0c6:	68f8      	ldr	r0, [r7, #12]
 800f0c8:	f7ff fa78 	bl	800e5bc <SWAPBYTE>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	461a      	mov	r2, r3
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	80da      	strh	r2, [r3, #6]
}
 800f0d4:	bf00      	nop
 800f0d6:	3710      	adds	r7, #16
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}

0800f0dc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b082      	sub	sp, #8
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f0e6:	2180      	movs	r1, #128	; 0x80
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f002 fdc5 	bl	8011c78 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f0ee:	2100      	movs	r1, #0
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f002 fdc1 	bl	8011c78 <USBD_LL_StallEP>
}
 800f0f6:	bf00      	nop
 800f0f8:	3708      	adds	r7, #8
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}

0800f0fe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f0fe:	b580      	push	{r7, lr}
 800f100:	b086      	sub	sp, #24
 800f102:	af00      	add	r7, sp, #0
 800f104:	60f8      	str	r0, [r7, #12]
 800f106:	60b9      	str	r1, [r7, #8]
 800f108:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f10a:	2300      	movs	r3, #0
 800f10c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d036      	beq.n	800f182 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f118:	6938      	ldr	r0, [r7, #16]
 800f11a:	f000 f836 	bl	800f18a <USBD_GetLen>
 800f11e:	4603      	mov	r3, r0
 800f120:	3301      	adds	r3, #1
 800f122:	b29b      	uxth	r3, r3
 800f124:	005b      	lsls	r3, r3, #1
 800f126:	b29a      	uxth	r2, r3
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f12c:	7dfb      	ldrb	r3, [r7, #23]
 800f12e:	68ba      	ldr	r2, [r7, #8]
 800f130:	4413      	add	r3, r2
 800f132:	687a      	ldr	r2, [r7, #4]
 800f134:	7812      	ldrb	r2, [r2, #0]
 800f136:	701a      	strb	r2, [r3, #0]
  idx++;
 800f138:	7dfb      	ldrb	r3, [r7, #23]
 800f13a:	3301      	adds	r3, #1
 800f13c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f13e:	7dfb      	ldrb	r3, [r7, #23]
 800f140:	68ba      	ldr	r2, [r7, #8]
 800f142:	4413      	add	r3, r2
 800f144:	2203      	movs	r2, #3
 800f146:	701a      	strb	r2, [r3, #0]
  idx++;
 800f148:	7dfb      	ldrb	r3, [r7, #23]
 800f14a:	3301      	adds	r3, #1
 800f14c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f14e:	e013      	b.n	800f178 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f150:	7dfb      	ldrb	r3, [r7, #23]
 800f152:	68ba      	ldr	r2, [r7, #8]
 800f154:	4413      	add	r3, r2
 800f156:	693a      	ldr	r2, [r7, #16]
 800f158:	7812      	ldrb	r2, [r2, #0]
 800f15a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f15c:	693b      	ldr	r3, [r7, #16]
 800f15e:	3301      	adds	r3, #1
 800f160:	613b      	str	r3, [r7, #16]
    idx++;
 800f162:	7dfb      	ldrb	r3, [r7, #23]
 800f164:	3301      	adds	r3, #1
 800f166:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f168:	7dfb      	ldrb	r3, [r7, #23]
 800f16a:	68ba      	ldr	r2, [r7, #8]
 800f16c:	4413      	add	r3, r2
 800f16e:	2200      	movs	r2, #0
 800f170:	701a      	strb	r2, [r3, #0]
    idx++;
 800f172:	7dfb      	ldrb	r3, [r7, #23]
 800f174:	3301      	adds	r3, #1
 800f176:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f178:	693b      	ldr	r3, [r7, #16]
 800f17a:	781b      	ldrb	r3, [r3, #0]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d1e7      	bne.n	800f150 <USBD_GetString+0x52>
 800f180:	e000      	b.n	800f184 <USBD_GetString+0x86>
    return;
 800f182:	bf00      	nop
  }
}
 800f184:	3718      	adds	r7, #24
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}

0800f18a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f18a:	b480      	push	{r7}
 800f18c:	b085      	sub	sp, #20
 800f18e:	af00      	add	r7, sp, #0
 800f190:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f192:	2300      	movs	r3, #0
 800f194:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f19a:	e005      	b.n	800f1a8 <USBD_GetLen+0x1e>
  {
    len++;
 800f19c:	7bfb      	ldrb	r3, [r7, #15]
 800f19e:	3301      	adds	r3, #1
 800f1a0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f1a2:	68bb      	ldr	r3, [r7, #8]
 800f1a4:	3301      	adds	r3, #1
 800f1a6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d1f5      	bne.n	800f19c <USBD_GetLen+0x12>
  }

  return len;
 800f1b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3714      	adds	r7, #20
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1bc:	4770      	bx	lr

0800f1be <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f1be:	b580      	push	{r7, lr}
 800f1c0:	b084      	sub	sp, #16
 800f1c2:	af00      	add	r7, sp, #0
 800f1c4:	60f8      	str	r0, [r7, #12]
 800f1c6:	60b9      	str	r1, [r7, #8]
 800f1c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	2202      	movs	r2, #2
 800f1ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	687a      	ldr	r2, [r7, #4]
 800f1d6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	687a      	ldr	r2, [r7, #4]
 800f1dc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	68ba      	ldr	r2, [r7, #8]
 800f1e2:	2100      	movs	r1, #0
 800f1e4:	68f8      	ldr	r0, [r7, #12]
 800f1e6:	f002 fdd1 	bl	8011d8c <USBD_LL_Transmit>

  return USBD_OK;
 800f1ea:	2300      	movs	r3, #0
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	3710      	adds	r7, #16
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}

0800f1f4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b084      	sub	sp, #16
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	60f8      	str	r0, [r7, #12]
 800f1fc:	60b9      	str	r1, [r7, #8]
 800f1fe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	68ba      	ldr	r2, [r7, #8]
 800f204:	2100      	movs	r1, #0
 800f206:	68f8      	ldr	r0, [r7, #12]
 800f208:	f002 fdc0 	bl	8011d8c <USBD_LL_Transmit>

  return USBD_OK;
 800f20c:	2300      	movs	r3, #0
}
 800f20e:	4618      	mov	r0, r3
 800f210:	3710      	adds	r7, #16
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}

0800f216 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f216:	b580      	push	{r7, lr}
 800f218:	b084      	sub	sp, #16
 800f21a:	af00      	add	r7, sp, #0
 800f21c:	60f8      	str	r0, [r7, #12]
 800f21e:	60b9      	str	r1, [r7, #8]
 800f220:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	2203      	movs	r2, #3
 800f226:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	687a      	ldr	r2, [r7, #4]
 800f22e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	687a      	ldr	r2, [r7, #4]
 800f236:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	68ba      	ldr	r2, [r7, #8]
 800f23e:	2100      	movs	r1, #0
 800f240:	68f8      	ldr	r0, [r7, #12]
 800f242:	f002 fdc4 	bl	8011dce <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f246:	2300      	movs	r3, #0
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3710      	adds	r7, #16
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b084      	sub	sp, #16
 800f254:	af00      	add	r7, sp, #0
 800f256:	60f8      	str	r0, [r7, #12]
 800f258:	60b9      	str	r1, [r7, #8]
 800f25a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	68ba      	ldr	r2, [r7, #8]
 800f260:	2100      	movs	r1, #0
 800f262:	68f8      	ldr	r0, [r7, #12]
 800f264:	f002 fdb3 	bl	8011dce <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f268:	2300      	movs	r3, #0
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	3710      	adds	r7, #16
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}

0800f272 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f272:	b580      	push	{r7, lr}
 800f274:	b082      	sub	sp, #8
 800f276:	af00      	add	r7, sp, #0
 800f278:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2204      	movs	r2, #4
 800f27e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f282:	2300      	movs	r3, #0
 800f284:	2200      	movs	r2, #0
 800f286:	2100      	movs	r1, #0
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f002 fd7f 	bl	8011d8c <USBD_LL_Transmit>

  return USBD_OK;
 800f28e:	2300      	movs	r3, #0
}
 800f290:	4618      	mov	r0, r3
 800f292:	3708      	adds	r7, #8
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}

0800f298 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b082      	sub	sp, #8
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2205      	movs	r2, #5
 800f2a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	2100      	movs	r1, #0
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f002 fd8d 	bl	8011dce <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f2b4:	2300      	movs	r3, #0
}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3708      	adds	r7, #8
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}

0800f2be <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f2be:	b480      	push	{r7}
 800f2c0:	b085      	sub	sp, #20
 800f2c2:	af00      	add	r7, sp, #0
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f2cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f2d0:	2b84      	cmp	r3, #132	; 0x84
 800f2d2:	d005      	beq.n	800f2e0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f2d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	4413      	add	r3, r2
 800f2dc:	3303      	adds	r3, #3
 800f2de:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3714      	adds	r7, #20
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ec:	4770      	bx	lr

0800f2ee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f2ee:	b580      	push	{r7, lr}
 800f2f0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f2f2:	f000 ff5b 	bl	80101ac <vTaskStartScheduler>
  
  return osOK;
 800f2f6:	2300      	movs	r3, #0
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	bd80      	pop	{r7, pc}

0800f2fc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2fe:	b087      	sub	sp, #28
 800f300:	af02      	add	r7, sp, #8
 800f302:	6078      	str	r0, [r7, #4]
 800f304:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	685c      	ldr	r4, [r3, #4]
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f312:	b29e      	uxth	r6, r3
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f31a:	4618      	mov	r0, r3
 800f31c:	f7ff ffcf 	bl	800f2be <makeFreeRtosPriority>
 800f320:	4602      	mov	r2, r0
 800f322:	f107 030c 	add.w	r3, r7, #12
 800f326:	9301      	str	r3, [sp, #4]
 800f328:	9200      	str	r2, [sp, #0]
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	4632      	mov	r2, r6
 800f32e:	4629      	mov	r1, r5
 800f330:	4620      	mov	r0, r4
 800f332:	f000 fdd5 	bl	800fee0 <xTaskCreate>
 800f336:	4603      	mov	r3, r0
 800f338:	2b01      	cmp	r3, #1
 800f33a:	d001      	beq.n	800f340 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800f33c:	2300      	movs	r3, #0
 800f33e:	e000      	b.n	800f342 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800f340:	68fb      	ldr	r3, [r7, #12]
}
 800f342:	4618      	mov	r0, r3
 800f344:	3714      	adds	r7, #20
 800f346:	46bd      	mov	sp, r7
 800f348:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f34a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f34a:	b580      	push	{r7, lr}
 800f34c:	b084      	sub	sp, #16
 800f34e:	af00      	add	r7, sp, #0
 800f350:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d001      	beq.n	800f360 <osDelay+0x16>
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	e000      	b.n	800f362 <osDelay+0x18>
 800f360:	2301      	movs	r3, #1
 800f362:	4618      	mov	r0, r3
 800f364:	f000 feee 	bl	8010144 <vTaskDelay>
  
  return osOK;
 800f368:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	3710      	adds	r7, #16
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}

0800f372 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f372:	b480      	push	{r7}
 800f374:	b083      	sub	sp, #12
 800f376:	af00      	add	r7, sp, #0
 800f378:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f103 0208 	add.w	r2, r3, #8
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f38a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f103 0208 	add.w	r2, r3, #8
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f103 0208 	add.w	r2, r3, #8
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f3a6:	bf00      	nop
 800f3a8:	370c      	adds	r7, #12
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b0:	4770      	bx	lr

0800f3b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f3b2:	b480      	push	{r7}
 800f3b4:	b083      	sub	sp, #12
 800f3b6:	af00      	add	r7, sp, #0
 800f3b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2200      	movs	r2, #0
 800f3be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f3c0:	bf00      	nop
 800f3c2:	370c      	adds	r7, #12
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ca:	4770      	bx	lr

0800f3cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	b085      	sub	sp, #20
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	685b      	ldr	r3, [r3, #4]
 800f3da:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	68fa      	ldr	r2, [r7, #12]
 800f3e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	689a      	ldr	r2, [r3, #8]
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	689b      	ldr	r3, [r3, #8]
 800f3ee:	683a      	ldr	r2, [r7, #0]
 800f3f0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	683a      	ldr	r2, [r7, #0]
 800f3f6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	687a      	ldr	r2, [r7, #4]
 800f3fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	1c5a      	adds	r2, r3, #1
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	601a      	str	r2, [r3, #0]
}
 800f408:	bf00      	nop
 800f40a:	3714      	adds	r7, #20
 800f40c:	46bd      	mov	sp, r7
 800f40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f412:	4770      	bx	lr

0800f414 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f414:	b480      	push	{r7}
 800f416:	b085      	sub	sp, #20
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
 800f41c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f42a:	d103      	bne.n	800f434 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	691b      	ldr	r3, [r3, #16]
 800f430:	60fb      	str	r3, [r7, #12]
 800f432:	e00c      	b.n	800f44e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	3308      	adds	r3, #8
 800f438:	60fb      	str	r3, [r7, #12]
 800f43a:	e002      	b.n	800f442 <vListInsert+0x2e>
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	60fb      	str	r3, [r7, #12]
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	685b      	ldr	r3, [r3, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	68ba      	ldr	r2, [r7, #8]
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d2f6      	bcs.n	800f43c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	685a      	ldr	r2, [r3, #4]
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	685b      	ldr	r3, [r3, #4]
 800f45a:	683a      	ldr	r2, [r7, #0]
 800f45c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	68fa      	ldr	r2, [r7, #12]
 800f462:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	683a      	ldr	r2, [r7, #0]
 800f468:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	687a      	ldr	r2, [r7, #4]
 800f46e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	1c5a      	adds	r2, r3, #1
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	601a      	str	r2, [r3, #0]
}
 800f47a:	bf00      	nop
 800f47c:	3714      	adds	r7, #20
 800f47e:	46bd      	mov	sp, r7
 800f480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f484:	4770      	bx	lr

0800f486 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f486:	b480      	push	{r7}
 800f488:	b085      	sub	sp, #20
 800f48a:	af00      	add	r7, sp, #0
 800f48c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	691b      	ldr	r3, [r3, #16]
 800f492:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	685b      	ldr	r3, [r3, #4]
 800f498:	687a      	ldr	r2, [r7, #4]
 800f49a:	6892      	ldr	r2, [r2, #8]
 800f49c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	689b      	ldr	r3, [r3, #8]
 800f4a2:	687a      	ldr	r2, [r7, #4]
 800f4a4:	6852      	ldr	r2, [r2, #4]
 800f4a6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	685b      	ldr	r3, [r3, #4]
 800f4ac:	687a      	ldr	r2, [r7, #4]
 800f4ae:	429a      	cmp	r2, r3
 800f4b0:	d103      	bne.n	800f4ba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	689a      	ldr	r2, [r3, #8]
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2200      	movs	r2, #0
 800f4be:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	1e5a      	subs	r2, r3, #1
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	681b      	ldr	r3, [r3, #0]
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	3714      	adds	r7, #20
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d8:	4770      	bx	lr
	...

0800f4dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b084      	sub	sp, #16
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
 800f4e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d10a      	bne.n	800f506 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4f4:	f383 8811 	msr	BASEPRI, r3
 800f4f8:	f3bf 8f6f 	isb	sy
 800f4fc:	f3bf 8f4f 	dsb	sy
 800f500:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f502:	bf00      	nop
 800f504:	e7fe      	b.n	800f504 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f506:	f001 fd65 	bl	8010fd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	681a      	ldr	r2, [r3, #0]
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f512:	68f9      	ldr	r1, [r7, #12]
 800f514:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f516:	fb01 f303 	mul.w	r3, r1, r3
 800f51a:	441a      	add	r2, r3
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	2200      	movs	r2, #0
 800f524:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	681a      	ldr	r2, [r3, #0]
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	681a      	ldr	r2, [r3, #0]
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f536:	3b01      	subs	r3, #1
 800f538:	68f9      	ldr	r1, [r7, #12]
 800f53a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f53c:	fb01 f303 	mul.w	r3, r1, r3
 800f540:	441a      	add	r2, r3
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	22ff      	movs	r2, #255	; 0xff
 800f54a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	22ff      	movs	r2, #255	; 0xff
 800f552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d114      	bne.n	800f586 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	691b      	ldr	r3, [r3, #16]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d01a      	beq.n	800f59a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	3310      	adds	r3, #16
 800f568:	4618      	mov	r0, r3
 800f56a:	f001 f849 	bl	8010600 <xTaskRemoveFromEventList>
 800f56e:	4603      	mov	r3, r0
 800f570:	2b00      	cmp	r3, #0
 800f572:	d012      	beq.n	800f59a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f574:	4b0c      	ldr	r3, [pc, #48]	; (800f5a8 <xQueueGenericReset+0xcc>)
 800f576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f57a:	601a      	str	r2, [r3, #0]
 800f57c:	f3bf 8f4f 	dsb	sy
 800f580:	f3bf 8f6f 	isb	sy
 800f584:	e009      	b.n	800f59a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	3310      	adds	r3, #16
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7ff fef1 	bl	800f372 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	3324      	adds	r3, #36	; 0x24
 800f594:	4618      	mov	r0, r3
 800f596:	f7ff feec 	bl	800f372 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f59a:	f001 fd4b 	bl	8011034 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f59e:	2301      	movs	r3, #1
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3710      	adds	r7, #16
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}
 800f5a8:	e000ed04 	.word	0xe000ed04

0800f5ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b08a      	sub	sp, #40	; 0x28
 800f5b0:	af02      	add	r7, sp, #8
 800f5b2:	60f8      	str	r0, [r7, #12]
 800f5b4:	60b9      	str	r1, [r7, #8]
 800f5b6:	4613      	mov	r3, r2
 800f5b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d10a      	bne.n	800f5d6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800f5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5c4:	f383 8811 	msr	BASEPRI, r3
 800f5c8:	f3bf 8f6f 	isb	sy
 800f5cc:	f3bf 8f4f 	dsb	sy
 800f5d0:	613b      	str	r3, [r7, #16]
}
 800f5d2:	bf00      	nop
 800f5d4:	e7fe      	b.n	800f5d4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	68ba      	ldr	r2, [r7, #8]
 800f5da:	fb02 f303 	mul.w	r3, r2, r3
 800f5de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f5e0:	69fb      	ldr	r3, [r7, #28]
 800f5e2:	3348      	adds	r3, #72	; 0x48
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f001 fdd7 	bl	8011198 <pvPortMalloc>
 800f5ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f5ec:	69bb      	ldr	r3, [r7, #24]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d00d      	beq.n	800f60e <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f5f2:	69bb      	ldr	r3, [r7, #24]
 800f5f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	3348      	adds	r3, #72	; 0x48
 800f5fa:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f5fc:	79fa      	ldrb	r2, [r7, #7]
 800f5fe:	69bb      	ldr	r3, [r7, #24]
 800f600:	9300      	str	r3, [sp, #0]
 800f602:	4613      	mov	r3, r2
 800f604:	697a      	ldr	r2, [r7, #20]
 800f606:	68b9      	ldr	r1, [r7, #8]
 800f608:	68f8      	ldr	r0, [r7, #12]
 800f60a:	f000 f805 	bl	800f618 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f60e:	69bb      	ldr	r3, [r7, #24]
	}
 800f610:	4618      	mov	r0, r3
 800f612:	3720      	adds	r7, #32
 800f614:	46bd      	mov	sp, r7
 800f616:	bd80      	pop	{r7, pc}

0800f618 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b084      	sub	sp, #16
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	60f8      	str	r0, [r7, #12]
 800f620:	60b9      	str	r1, [r7, #8]
 800f622:	607a      	str	r2, [r7, #4]
 800f624:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d103      	bne.n	800f634 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f62c:	69bb      	ldr	r3, [r7, #24]
 800f62e:	69ba      	ldr	r2, [r7, #24]
 800f630:	601a      	str	r2, [r3, #0]
 800f632:	e002      	b.n	800f63a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f634:	69bb      	ldr	r3, [r7, #24]
 800f636:	687a      	ldr	r2, [r7, #4]
 800f638:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f63a:	69bb      	ldr	r3, [r7, #24]
 800f63c:	68fa      	ldr	r2, [r7, #12]
 800f63e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f640:	69bb      	ldr	r3, [r7, #24]
 800f642:	68ba      	ldr	r2, [r7, #8]
 800f644:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f646:	2101      	movs	r1, #1
 800f648:	69b8      	ldr	r0, [r7, #24]
 800f64a:	f7ff ff47 	bl	800f4dc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f64e:	bf00      	nop
 800f650:	3710      	adds	r7, #16
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}

0800f656 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f656:	b580      	push	{r7, lr}
 800f658:	b082      	sub	sp, #8
 800f65a:	af00      	add	r7, sp, #0
 800f65c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d00e      	beq.n	800f682 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2200      	movs	r2, #0
 800f668:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2200      	movs	r2, #0
 800f66e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2200      	movs	r2, #0
 800f674:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f676:	2300      	movs	r3, #0
 800f678:	2200      	movs	r2, #0
 800f67a:	2100      	movs	r1, #0
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f000 f81d 	bl	800f6bc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f682:	bf00      	nop
 800f684:	3708      	adds	r7, #8
 800f686:	46bd      	mov	sp, r7
 800f688:	bd80      	pop	{r7, pc}

0800f68a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f68a:	b580      	push	{r7, lr}
 800f68c:	b086      	sub	sp, #24
 800f68e:	af00      	add	r7, sp, #0
 800f690:	4603      	mov	r3, r0
 800f692:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f694:	2301      	movs	r3, #1
 800f696:	617b      	str	r3, [r7, #20]
 800f698:	2300      	movs	r3, #0
 800f69a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f69c:	79fb      	ldrb	r3, [r7, #7]
 800f69e:	461a      	mov	r2, r3
 800f6a0:	6939      	ldr	r1, [r7, #16]
 800f6a2:	6978      	ldr	r0, [r7, #20]
 800f6a4:	f7ff ff82 	bl	800f5ac <xQueueGenericCreate>
 800f6a8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f6aa:	68f8      	ldr	r0, [r7, #12]
 800f6ac:	f7ff ffd3 	bl	800f656 <prvInitialiseMutex>

		return xNewQueue;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
	}
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	3718      	adds	r7, #24
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}
	...

0800f6bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b08e      	sub	sp, #56	; 0x38
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	60f8      	str	r0, [r7, #12]
 800f6c4:	60b9      	str	r1, [r7, #8]
 800f6c6:	607a      	str	r2, [r7, #4]
 800f6c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d10a      	bne.n	800f6ee <xQueueGenericSend+0x32>
	__asm volatile
 800f6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6dc:	f383 8811 	msr	BASEPRI, r3
 800f6e0:	f3bf 8f6f 	isb	sy
 800f6e4:	f3bf 8f4f 	dsb	sy
 800f6e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f6ea:	bf00      	nop
 800f6ec:	e7fe      	b.n	800f6ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d103      	bne.n	800f6fc <xQueueGenericSend+0x40>
 800f6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d101      	bne.n	800f700 <xQueueGenericSend+0x44>
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	e000      	b.n	800f702 <xQueueGenericSend+0x46>
 800f700:	2300      	movs	r3, #0
 800f702:	2b00      	cmp	r3, #0
 800f704:	d10a      	bne.n	800f71c <xQueueGenericSend+0x60>
	__asm volatile
 800f706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f70a:	f383 8811 	msr	BASEPRI, r3
 800f70e:	f3bf 8f6f 	isb	sy
 800f712:	f3bf 8f4f 	dsb	sy
 800f716:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f718:	bf00      	nop
 800f71a:	e7fe      	b.n	800f71a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	2b02      	cmp	r3, #2
 800f720:	d103      	bne.n	800f72a <xQueueGenericSend+0x6e>
 800f722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f726:	2b01      	cmp	r3, #1
 800f728:	d101      	bne.n	800f72e <xQueueGenericSend+0x72>
 800f72a:	2301      	movs	r3, #1
 800f72c:	e000      	b.n	800f730 <xQueueGenericSend+0x74>
 800f72e:	2300      	movs	r3, #0
 800f730:	2b00      	cmp	r3, #0
 800f732:	d10a      	bne.n	800f74a <xQueueGenericSend+0x8e>
	__asm volatile
 800f734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f738:	f383 8811 	msr	BASEPRI, r3
 800f73c:	f3bf 8f6f 	isb	sy
 800f740:	f3bf 8f4f 	dsb	sy
 800f744:	623b      	str	r3, [r7, #32]
}
 800f746:	bf00      	nop
 800f748:	e7fe      	b.n	800f748 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f74a:	f001 f8f5 	bl	8010938 <xTaskGetSchedulerState>
 800f74e:	4603      	mov	r3, r0
 800f750:	2b00      	cmp	r3, #0
 800f752:	d102      	bne.n	800f75a <xQueueGenericSend+0x9e>
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d101      	bne.n	800f75e <xQueueGenericSend+0xa2>
 800f75a:	2301      	movs	r3, #1
 800f75c:	e000      	b.n	800f760 <xQueueGenericSend+0xa4>
 800f75e:	2300      	movs	r3, #0
 800f760:	2b00      	cmp	r3, #0
 800f762:	d10a      	bne.n	800f77a <xQueueGenericSend+0xbe>
	__asm volatile
 800f764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f768:	f383 8811 	msr	BASEPRI, r3
 800f76c:	f3bf 8f6f 	isb	sy
 800f770:	f3bf 8f4f 	dsb	sy
 800f774:	61fb      	str	r3, [r7, #28]
}
 800f776:	bf00      	nop
 800f778:	e7fe      	b.n	800f778 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f77a:	f001 fc2b 	bl	8010fd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f786:	429a      	cmp	r2, r3
 800f788:	d302      	bcc.n	800f790 <xQueueGenericSend+0xd4>
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	2b02      	cmp	r3, #2
 800f78e:	d129      	bne.n	800f7e4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f790:	683a      	ldr	r2, [r7, #0]
 800f792:	68b9      	ldr	r1, [r7, #8]
 800f794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f796:	f000 fa93 	bl	800fcc0 <prvCopyDataToQueue>
 800f79a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d010      	beq.n	800f7c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a6:	3324      	adds	r3, #36	; 0x24
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f000 ff29 	bl	8010600 <xTaskRemoveFromEventList>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d013      	beq.n	800f7dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f7b4:	4b3f      	ldr	r3, [pc, #252]	; (800f8b4 <xQueueGenericSend+0x1f8>)
 800f7b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7ba:	601a      	str	r2, [r3, #0]
 800f7bc:	f3bf 8f4f 	dsb	sy
 800f7c0:	f3bf 8f6f 	isb	sy
 800f7c4:	e00a      	b.n	800f7dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d007      	beq.n	800f7dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f7cc:	4b39      	ldr	r3, [pc, #228]	; (800f8b4 <xQueueGenericSend+0x1f8>)
 800f7ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7d2:	601a      	str	r2, [r3, #0]
 800f7d4:	f3bf 8f4f 	dsb	sy
 800f7d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f7dc:	f001 fc2a 	bl	8011034 <vPortExitCritical>
				return pdPASS;
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	e063      	b.n	800f8ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d103      	bne.n	800f7f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f7ea:	f001 fc23 	bl	8011034 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	e05c      	b.n	800f8ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f7f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d106      	bne.n	800f806 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f7f8:	f107 0314 	add.w	r3, r7, #20
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f000 ff61 	bl	80106c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f802:	2301      	movs	r3, #1
 800f804:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f806:	f001 fc15 	bl	8011034 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f80a:	f000 fd17 	bl	801023c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f80e:	f001 fbe1 	bl	8010fd4 <vPortEnterCritical>
 800f812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f814:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f818:	b25b      	sxtb	r3, r3
 800f81a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f81e:	d103      	bne.n	800f828 <xQueueGenericSend+0x16c>
 800f820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f822:	2200      	movs	r2, #0
 800f824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f82a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f82e:	b25b      	sxtb	r3, r3
 800f830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f834:	d103      	bne.n	800f83e <xQueueGenericSend+0x182>
 800f836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f838:	2200      	movs	r2, #0
 800f83a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f83e:	f001 fbf9 	bl	8011034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f842:	1d3a      	adds	r2, r7, #4
 800f844:	f107 0314 	add.w	r3, r7, #20
 800f848:	4611      	mov	r1, r2
 800f84a:	4618      	mov	r0, r3
 800f84c:	f000 ff50 	bl	80106f0 <xTaskCheckForTimeOut>
 800f850:	4603      	mov	r3, r0
 800f852:	2b00      	cmp	r3, #0
 800f854:	d124      	bne.n	800f8a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f856:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f858:	f000 fb2a 	bl	800feb0 <prvIsQueueFull>
 800f85c:	4603      	mov	r3, r0
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d018      	beq.n	800f894 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f864:	3310      	adds	r3, #16
 800f866:	687a      	ldr	r2, [r7, #4]
 800f868:	4611      	mov	r1, r2
 800f86a:	4618      	mov	r0, r3
 800f86c:	f000 fea4 	bl	80105b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f872:	f000 fab5 	bl	800fde0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f876:	f000 fcef 	bl	8010258 <xTaskResumeAll>
 800f87a:	4603      	mov	r3, r0
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	f47f af7c 	bne.w	800f77a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f882:	4b0c      	ldr	r3, [pc, #48]	; (800f8b4 <xQueueGenericSend+0x1f8>)
 800f884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f888:	601a      	str	r2, [r3, #0]
 800f88a:	f3bf 8f4f 	dsb	sy
 800f88e:	f3bf 8f6f 	isb	sy
 800f892:	e772      	b.n	800f77a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f894:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f896:	f000 faa3 	bl	800fde0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f89a:	f000 fcdd 	bl	8010258 <xTaskResumeAll>
 800f89e:	e76c      	b.n	800f77a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f8a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f8a2:	f000 fa9d 	bl	800fde0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f8a6:	f000 fcd7 	bl	8010258 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f8aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	3738      	adds	r7, #56	; 0x38
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}
 800f8b4:	e000ed04 	.word	0xe000ed04

0800f8b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b08c      	sub	sp, #48	; 0x30
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	60f8      	str	r0, [r7, #12]
 800f8c0:	60b9      	str	r1, [r7, #8]
 800f8c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d10a      	bne.n	800f8e8 <xQueueReceive+0x30>
	__asm volatile
 800f8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d6:	f383 8811 	msr	BASEPRI, r3
 800f8da:	f3bf 8f6f 	isb	sy
 800f8de:	f3bf 8f4f 	dsb	sy
 800f8e2:	623b      	str	r3, [r7, #32]
}
 800f8e4:	bf00      	nop
 800f8e6:	e7fe      	b.n	800f8e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d103      	bne.n	800f8f6 <xQueueReceive+0x3e>
 800f8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d101      	bne.n	800f8fa <xQueueReceive+0x42>
 800f8f6:	2301      	movs	r3, #1
 800f8f8:	e000      	b.n	800f8fc <xQueueReceive+0x44>
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d10a      	bne.n	800f916 <xQueueReceive+0x5e>
	__asm volatile
 800f900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f904:	f383 8811 	msr	BASEPRI, r3
 800f908:	f3bf 8f6f 	isb	sy
 800f90c:	f3bf 8f4f 	dsb	sy
 800f910:	61fb      	str	r3, [r7, #28]
}
 800f912:	bf00      	nop
 800f914:	e7fe      	b.n	800f914 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f916:	f001 f80f 	bl	8010938 <xTaskGetSchedulerState>
 800f91a:	4603      	mov	r3, r0
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d102      	bne.n	800f926 <xQueueReceive+0x6e>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d101      	bne.n	800f92a <xQueueReceive+0x72>
 800f926:	2301      	movs	r3, #1
 800f928:	e000      	b.n	800f92c <xQueueReceive+0x74>
 800f92a:	2300      	movs	r3, #0
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d10a      	bne.n	800f946 <xQueueReceive+0x8e>
	__asm volatile
 800f930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f934:	f383 8811 	msr	BASEPRI, r3
 800f938:	f3bf 8f6f 	isb	sy
 800f93c:	f3bf 8f4f 	dsb	sy
 800f940:	61bb      	str	r3, [r7, #24]
}
 800f942:	bf00      	nop
 800f944:	e7fe      	b.n	800f944 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f946:	f001 fb45 	bl	8010fd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f94c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f94e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f952:	2b00      	cmp	r3, #0
 800f954:	d01f      	beq.n	800f996 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f956:	68b9      	ldr	r1, [r7, #8]
 800f958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f95a:	f000 fa1b 	bl	800fd94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f960:	1e5a      	subs	r2, r3, #1
 800f962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f964:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f968:	691b      	ldr	r3, [r3, #16]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d00f      	beq.n	800f98e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f970:	3310      	adds	r3, #16
 800f972:	4618      	mov	r0, r3
 800f974:	f000 fe44 	bl	8010600 <xTaskRemoveFromEventList>
 800f978:	4603      	mov	r3, r0
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d007      	beq.n	800f98e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f97e:	4b3d      	ldr	r3, [pc, #244]	; (800fa74 <xQueueReceive+0x1bc>)
 800f980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f984:	601a      	str	r2, [r3, #0]
 800f986:	f3bf 8f4f 	dsb	sy
 800f98a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f98e:	f001 fb51 	bl	8011034 <vPortExitCritical>
				return pdPASS;
 800f992:	2301      	movs	r3, #1
 800f994:	e069      	b.n	800fa6a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d103      	bne.n	800f9a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f99c:	f001 fb4a 	bl	8011034 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	e062      	b.n	800fa6a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d106      	bne.n	800f9b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f9aa:	f107 0310 	add.w	r3, r7, #16
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f000 fe88 	bl	80106c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f9b4:	2301      	movs	r3, #1
 800f9b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f9b8:	f001 fb3c 	bl	8011034 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f9bc:	f000 fc3e 	bl	801023c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f9c0:	f001 fb08 	bl	8010fd4 <vPortEnterCritical>
 800f9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f9ca:	b25b      	sxtb	r3, r3
 800f9cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f9d0:	d103      	bne.n	800f9da <xQueueReceive+0x122>
 800f9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f9e0:	b25b      	sxtb	r3, r3
 800f9e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f9e6:	d103      	bne.n	800f9f0 <xQueueReceive+0x138>
 800f9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f9f0:	f001 fb20 	bl	8011034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f9f4:	1d3a      	adds	r2, r7, #4
 800f9f6:	f107 0310 	add.w	r3, r7, #16
 800f9fa:	4611      	mov	r1, r2
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f000 fe77 	bl	80106f0 <xTaskCheckForTimeOut>
 800fa02:	4603      	mov	r3, r0
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d123      	bne.n	800fa50 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fa08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa0a:	f000 fa3b 	bl	800fe84 <prvIsQueueEmpty>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d017      	beq.n	800fa44 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fa14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa16:	3324      	adds	r3, #36	; 0x24
 800fa18:	687a      	ldr	r2, [r7, #4]
 800fa1a:	4611      	mov	r1, r2
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f000 fdcb 	bl	80105b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fa22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa24:	f000 f9dc 	bl	800fde0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fa28:	f000 fc16 	bl	8010258 <xTaskResumeAll>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d189      	bne.n	800f946 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800fa32:	4b10      	ldr	r3, [pc, #64]	; (800fa74 <xQueueReceive+0x1bc>)
 800fa34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa38:	601a      	str	r2, [r3, #0]
 800fa3a:	f3bf 8f4f 	dsb	sy
 800fa3e:	f3bf 8f6f 	isb	sy
 800fa42:	e780      	b.n	800f946 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fa44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa46:	f000 f9cb 	bl	800fde0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fa4a:	f000 fc05 	bl	8010258 <xTaskResumeAll>
 800fa4e:	e77a      	b.n	800f946 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fa50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa52:	f000 f9c5 	bl	800fde0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fa56:	f000 fbff 	bl	8010258 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fa5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa5c:	f000 fa12 	bl	800fe84 <prvIsQueueEmpty>
 800fa60:	4603      	mov	r3, r0
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	f43f af6f 	beq.w	800f946 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fa68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3730      	adds	r7, #48	; 0x30
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}
 800fa72:	bf00      	nop
 800fa74:	e000ed04 	.word	0xe000ed04

0800fa78 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b08e      	sub	sp, #56	; 0x38
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fa82:	2300      	movs	r3, #0
 800fa84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fa8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d10a      	bne.n	800faaa <xQueueSemaphoreTake+0x32>
	__asm volatile
 800fa94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa98:	f383 8811 	msr	BASEPRI, r3
 800fa9c:	f3bf 8f6f 	isb	sy
 800faa0:	f3bf 8f4f 	dsb	sy
 800faa4:	623b      	str	r3, [r7, #32]
}
 800faa6:	bf00      	nop
 800faa8:	e7fe      	b.n	800faa8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800faaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d00a      	beq.n	800fac8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800fab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fab6:	f383 8811 	msr	BASEPRI, r3
 800faba:	f3bf 8f6f 	isb	sy
 800fabe:	f3bf 8f4f 	dsb	sy
 800fac2:	61fb      	str	r3, [r7, #28]
}
 800fac4:	bf00      	nop
 800fac6:	e7fe      	b.n	800fac6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fac8:	f000 ff36 	bl	8010938 <xTaskGetSchedulerState>
 800facc:	4603      	mov	r3, r0
 800face:	2b00      	cmp	r3, #0
 800fad0:	d102      	bne.n	800fad8 <xQueueSemaphoreTake+0x60>
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d101      	bne.n	800fadc <xQueueSemaphoreTake+0x64>
 800fad8:	2301      	movs	r3, #1
 800fada:	e000      	b.n	800fade <xQueueSemaphoreTake+0x66>
 800fadc:	2300      	movs	r3, #0
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d10a      	bne.n	800faf8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800fae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fae6:	f383 8811 	msr	BASEPRI, r3
 800faea:	f3bf 8f6f 	isb	sy
 800faee:	f3bf 8f4f 	dsb	sy
 800faf2:	61bb      	str	r3, [r7, #24]
}
 800faf4:	bf00      	nop
 800faf6:	e7fe      	b.n	800faf6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800faf8:	f001 fa6c 	bl	8010fd4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb00:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d024      	beq.n	800fb52 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb0a:	1e5a      	subs	r2, r3, #1
 800fb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb0e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d104      	bne.n	800fb22 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fb18:	f001 f8b6 	bl	8010c88 <pvTaskIncrementMutexHeldCount>
 800fb1c:	4602      	mov	r2, r0
 800fb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb20:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb24:	691b      	ldr	r3, [r3, #16]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d00f      	beq.n	800fb4a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2c:	3310      	adds	r3, #16
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f000 fd66 	bl	8010600 <xTaskRemoveFromEventList>
 800fb34:	4603      	mov	r3, r0
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d007      	beq.n	800fb4a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fb3a:	4b54      	ldr	r3, [pc, #336]	; (800fc8c <xQueueSemaphoreTake+0x214>)
 800fb3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb40:	601a      	str	r2, [r3, #0]
 800fb42:	f3bf 8f4f 	dsb	sy
 800fb46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fb4a:	f001 fa73 	bl	8011034 <vPortExitCritical>
				return pdPASS;
 800fb4e:	2301      	movs	r3, #1
 800fb50:	e097      	b.n	800fc82 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d111      	bne.n	800fb7c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fb58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d00a      	beq.n	800fb74 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800fb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb62:	f383 8811 	msr	BASEPRI, r3
 800fb66:	f3bf 8f6f 	isb	sy
 800fb6a:	f3bf 8f4f 	dsb	sy
 800fb6e:	617b      	str	r3, [r7, #20]
}
 800fb70:	bf00      	nop
 800fb72:	e7fe      	b.n	800fb72 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fb74:	f001 fa5e 	bl	8011034 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fb78:	2300      	movs	r3, #0
 800fb7a:	e082      	b.n	800fc82 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fb7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d106      	bne.n	800fb90 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fb82:	f107 030c 	add.w	r3, r7, #12
 800fb86:	4618      	mov	r0, r3
 800fb88:	f000 fd9c 	bl	80106c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fb90:	f001 fa50 	bl	8011034 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fb94:	f000 fb52 	bl	801023c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fb98:	f001 fa1c 	bl	8010fd4 <vPortEnterCritical>
 800fb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fba2:	b25b      	sxtb	r3, r3
 800fba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fba8:	d103      	bne.n	800fbb2 <xQueueSemaphoreTake+0x13a>
 800fbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbac:	2200      	movs	r2, #0
 800fbae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fbb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fbb8:	b25b      	sxtb	r3, r3
 800fbba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fbbe:	d103      	bne.n	800fbc8 <xQueueSemaphoreTake+0x150>
 800fbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fbc8:	f001 fa34 	bl	8011034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fbcc:	463a      	mov	r2, r7
 800fbce:	f107 030c 	add.w	r3, r7, #12
 800fbd2:	4611      	mov	r1, r2
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f000 fd8b 	bl	80106f0 <xTaskCheckForTimeOut>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d132      	bne.n	800fc46 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fbe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fbe2:	f000 f94f 	bl	800fe84 <prvIsQueueEmpty>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d026      	beq.n	800fc3a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d109      	bne.n	800fc08 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800fbf4:	f001 f9ee 	bl	8010fd4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbfa:	689b      	ldr	r3, [r3, #8]
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f000 feb9 	bl	8010974 <xTaskPriorityInherit>
 800fc02:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800fc04:	f001 fa16 	bl	8011034 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc0a:	3324      	adds	r3, #36	; 0x24
 800fc0c:	683a      	ldr	r2, [r7, #0]
 800fc0e:	4611      	mov	r1, r2
 800fc10:	4618      	mov	r0, r3
 800fc12:	f000 fcd1 	bl	80105b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fc16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc18:	f000 f8e2 	bl	800fde0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fc1c:	f000 fb1c 	bl	8010258 <xTaskResumeAll>
 800fc20:	4603      	mov	r3, r0
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	f47f af68 	bne.w	800faf8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800fc28:	4b18      	ldr	r3, [pc, #96]	; (800fc8c <xQueueSemaphoreTake+0x214>)
 800fc2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc2e:	601a      	str	r2, [r3, #0]
 800fc30:	f3bf 8f4f 	dsb	sy
 800fc34:	f3bf 8f6f 	isb	sy
 800fc38:	e75e      	b.n	800faf8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fc3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc3c:	f000 f8d0 	bl	800fde0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fc40:	f000 fb0a 	bl	8010258 <xTaskResumeAll>
 800fc44:	e758      	b.n	800faf8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fc46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc48:	f000 f8ca 	bl	800fde0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fc4c:	f000 fb04 	bl	8010258 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fc50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc52:	f000 f917 	bl	800fe84 <prvIsQueueEmpty>
 800fc56:	4603      	mov	r3, r0
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	f43f af4d 	beq.w	800faf8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d00d      	beq.n	800fc80 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800fc64:	f001 f9b6 	bl	8010fd4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fc68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc6a:	f000 f811 	bl	800fc90 <prvGetDisinheritPriorityAfterTimeout>
 800fc6e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc72:	689b      	ldr	r3, [r3, #8]
 800fc74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc76:	4618      	mov	r0, r3
 800fc78:	f000 ff78 	bl	8010b6c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fc7c:	f001 f9da 	bl	8011034 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fc80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	3738      	adds	r7, #56	; 0x38
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}
 800fc8a:	bf00      	nop
 800fc8c:	e000ed04 	.word	0xe000ed04

0800fc90 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fc90:	b480      	push	{r7}
 800fc92:	b085      	sub	sp, #20
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d006      	beq.n	800fcae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	f1c3 0307 	rsb	r3, r3, #7
 800fcaa:	60fb      	str	r3, [r7, #12]
 800fcac:	e001      	b.n	800fcb2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
	}
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	3714      	adds	r7, #20
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbe:	4770      	bx	lr

0800fcc0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b086      	sub	sp, #24
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	60f8      	str	r0, [r7, #12]
 800fcc8:	60b9      	str	r1, [r7, #8]
 800fcca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fccc:	2300      	movs	r3, #0
 800fcce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcd4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d10d      	bne.n	800fcfa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d14d      	bne.n	800fd82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	689b      	ldr	r3, [r3, #8]
 800fcea:	4618      	mov	r0, r3
 800fcec:	f000 feb8 	bl	8010a60 <xTaskPriorityDisinherit>
 800fcf0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	609a      	str	r2, [r3, #8]
 800fcf8:	e043      	b.n	800fd82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d119      	bne.n	800fd34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	6858      	ldr	r0, [r3, #4]
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd08:	461a      	mov	r2, r3
 800fd0a:	68b9      	ldr	r1, [r7, #8]
 800fd0c:	f002 f93e 	bl	8011f8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	685a      	ldr	r2, [r3, #4]
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd18:	441a      	add	r2, r3
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	685a      	ldr	r2, [r3, #4]
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	689b      	ldr	r3, [r3, #8]
 800fd26:	429a      	cmp	r2, r3
 800fd28:	d32b      	bcc.n	800fd82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	681a      	ldr	r2, [r3, #0]
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	605a      	str	r2, [r3, #4]
 800fd32:	e026      	b.n	800fd82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	68d8      	ldr	r0, [r3, #12]
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd3c:	461a      	mov	r2, r3
 800fd3e:	68b9      	ldr	r1, [r7, #8]
 800fd40:	f002 f924 	bl	8011f8c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	68da      	ldr	r2, [r3, #12]
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd4c:	425b      	negs	r3, r3
 800fd4e:	441a      	add	r2, r3
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	68da      	ldr	r2, [r3, #12]
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	429a      	cmp	r2, r3
 800fd5e:	d207      	bcs.n	800fd70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	689a      	ldr	r2, [r3, #8]
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd68:	425b      	negs	r3, r3
 800fd6a:	441a      	add	r2, r3
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2b02      	cmp	r3, #2
 800fd74:	d105      	bne.n	800fd82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fd76:	693b      	ldr	r3, [r7, #16]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d002      	beq.n	800fd82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fd7c:	693b      	ldr	r3, [r7, #16]
 800fd7e:	3b01      	subs	r3, #1
 800fd80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fd82:	693b      	ldr	r3, [r7, #16]
 800fd84:	1c5a      	adds	r2, r3, #1
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fd8a:	697b      	ldr	r3, [r7, #20]
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3718      	adds	r7, #24
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}

0800fd94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b082      	sub	sp, #8
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d018      	beq.n	800fdd8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	68da      	ldr	r2, [r3, #12]
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdae:	441a      	add	r2, r3
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	68da      	ldr	r2, [r3, #12]
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	689b      	ldr	r3, [r3, #8]
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	d303      	bcc.n	800fdc8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681a      	ldr	r2, [r3, #0]
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	68d9      	ldr	r1, [r3, #12]
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	6838      	ldr	r0, [r7, #0]
 800fdd4:	f002 f8da 	bl	8011f8c <memcpy>
	}
}
 800fdd8:	bf00      	nop
 800fdda:	3708      	adds	r7, #8
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}

0800fde0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b084      	sub	sp, #16
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fde8:	f001 f8f4 	bl	8010fd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fdf2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fdf4:	e011      	b.n	800fe1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d012      	beq.n	800fe24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	3324      	adds	r3, #36	; 0x24
 800fe02:	4618      	mov	r0, r3
 800fe04:	f000 fbfc 	bl	8010600 <xTaskRemoveFromEventList>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d001      	beq.n	800fe12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fe0e:	f000 fcd1 	bl	80107b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fe12:	7bfb      	ldrb	r3, [r7, #15]
 800fe14:	3b01      	subs	r3, #1
 800fe16:	b2db      	uxtb	r3, r3
 800fe18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fe1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	dce9      	bgt.n	800fdf6 <prvUnlockQueue+0x16>
 800fe22:	e000      	b.n	800fe26 <prvUnlockQueue+0x46>
					break;
 800fe24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	22ff      	movs	r2, #255	; 0xff
 800fe2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fe2e:	f001 f901 	bl	8011034 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fe32:	f001 f8cf 	bl	8010fd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fe3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fe3e:	e011      	b.n	800fe64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	691b      	ldr	r3, [r3, #16]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d012      	beq.n	800fe6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	3310      	adds	r3, #16
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f000 fbd7 	bl	8010600 <xTaskRemoveFromEventList>
 800fe52:	4603      	mov	r3, r0
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d001      	beq.n	800fe5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fe58:	f000 fcac 	bl	80107b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fe5c:	7bbb      	ldrb	r3, [r7, #14]
 800fe5e:	3b01      	subs	r3, #1
 800fe60:	b2db      	uxtb	r3, r3
 800fe62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fe64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	dce9      	bgt.n	800fe40 <prvUnlockQueue+0x60>
 800fe6c:	e000      	b.n	800fe70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fe6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	22ff      	movs	r2, #255	; 0xff
 800fe74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fe78:	f001 f8dc 	bl	8011034 <vPortExitCritical>
}
 800fe7c:	bf00      	nop
 800fe7e:	3710      	adds	r7, #16
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b084      	sub	sp, #16
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fe8c:	f001 f8a2 	bl	8010fd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d102      	bne.n	800fe9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fe98:	2301      	movs	r3, #1
 800fe9a:	60fb      	str	r3, [r7, #12]
 800fe9c:	e001      	b.n	800fea2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fe9e:	2300      	movs	r3, #0
 800fea0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fea2:	f001 f8c7 	bl	8011034 <vPortExitCritical>

	return xReturn;
 800fea6:	68fb      	ldr	r3, [r7, #12]
}
 800fea8:	4618      	mov	r0, r3
 800feaa:	3710      	adds	r7, #16
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}

0800feb0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b084      	sub	sp, #16
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800feb8:	f001 f88c 	bl	8010fd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fec4:	429a      	cmp	r2, r3
 800fec6:	d102      	bne.n	800fece <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fec8:	2301      	movs	r3, #1
 800feca:	60fb      	str	r3, [r7, #12]
 800fecc:	e001      	b.n	800fed2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fece:	2300      	movs	r3, #0
 800fed0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fed2:	f001 f8af 	bl	8011034 <vPortExitCritical>

	return xReturn;
 800fed6:	68fb      	ldr	r3, [r7, #12]
}
 800fed8:	4618      	mov	r0, r3
 800feda:	3710      	adds	r7, #16
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}

0800fee0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b08c      	sub	sp, #48	; 0x30
 800fee4:	af04      	add	r7, sp, #16
 800fee6:	60f8      	str	r0, [r7, #12]
 800fee8:	60b9      	str	r1, [r7, #8]
 800feea:	603b      	str	r3, [r7, #0]
 800feec:	4613      	mov	r3, r2
 800feee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fef0:	88fb      	ldrh	r3, [r7, #6]
 800fef2:	009b      	lsls	r3, r3, #2
 800fef4:	4618      	mov	r0, r3
 800fef6:	f001 f94f 	bl	8011198 <pvPortMalloc>
 800fefa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fefc:	697b      	ldr	r3, [r7, #20]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d00e      	beq.n	800ff20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ff02:	2054      	movs	r0, #84	; 0x54
 800ff04:	f001 f948 	bl	8011198 <pvPortMalloc>
 800ff08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ff0a:	69fb      	ldr	r3, [r7, #28]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d003      	beq.n	800ff18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ff10:	69fb      	ldr	r3, [r7, #28]
 800ff12:	697a      	ldr	r2, [r7, #20]
 800ff14:	631a      	str	r2, [r3, #48]	; 0x30
 800ff16:	e005      	b.n	800ff24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ff18:	6978      	ldr	r0, [r7, #20]
 800ff1a:	f001 fa09 	bl	8011330 <vPortFree>
 800ff1e:	e001      	b.n	800ff24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ff20:	2300      	movs	r3, #0
 800ff22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ff24:	69fb      	ldr	r3, [r7, #28]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d013      	beq.n	800ff52 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ff2a:	88fa      	ldrh	r2, [r7, #6]
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	9303      	str	r3, [sp, #12]
 800ff30:	69fb      	ldr	r3, [r7, #28]
 800ff32:	9302      	str	r3, [sp, #8]
 800ff34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff36:	9301      	str	r3, [sp, #4]
 800ff38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff3a:	9300      	str	r3, [sp, #0]
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	68b9      	ldr	r1, [r7, #8]
 800ff40:	68f8      	ldr	r0, [r7, #12]
 800ff42:	f000 f80e 	bl	800ff62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ff46:	69f8      	ldr	r0, [r7, #28]
 800ff48:	f000 f892 	bl	8010070 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ff4c:	2301      	movs	r3, #1
 800ff4e:	61bb      	str	r3, [r7, #24]
 800ff50:	e002      	b.n	800ff58 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ff52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ff58:	69bb      	ldr	r3, [r7, #24]
	}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	3720      	adds	r7, #32
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}

0800ff62 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ff62:	b580      	push	{r7, lr}
 800ff64:	b088      	sub	sp, #32
 800ff66:	af00      	add	r7, sp, #0
 800ff68:	60f8      	str	r0, [r7, #12]
 800ff6a:	60b9      	str	r1, [r7, #8]
 800ff6c:	607a      	str	r2, [r7, #4]
 800ff6e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ff70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ff7a:	3b01      	subs	r3, #1
 800ff7c:	009b      	lsls	r3, r3, #2
 800ff7e:	4413      	add	r3, r2
 800ff80:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ff82:	69bb      	ldr	r3, [r7, #24]
 800ff84:	f023 0307 	bic.w	r3, r3, #7
 800ff88:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ff8a:	69bb      	ldr	r3, [r7, #24]
 800ff8c:	f003 0307 	and.w	r3, r3, #7
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d00a      	beq.n	800ffaa <prvInitialiseNewTask+0x48>
	__asm volatile
 800ff94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff98:	f383 8811 	msr	BASEPRI, r3
 800ff9c:	f3bf 8f6f 	isb	sy
 800ffa0:	f3bf 8f4f 	dsb	sy
 800ffa4:	617b      	str	r3, [r7, #20]
}
 800ffa6:	bf00      	nop
 800ffa8:	e7fe      	b.n	800ffa8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d01f      	beq.n	800fff0 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	61fb      	str	r3, [r7, #28]
 800ffb4:	e012      	b.n	800ffdc <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ffb6:	68ba      	ldr	r2, [r7, #8]
 800ffb8:	69fb      	ldr	r3, [r7, #28]
 800ffba:	4413      	add	r3, r2
 800ffbc:	7819      	ldrb	r1, [r3, #0]
 800ffbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffc0:	69fb      	ldr	r3, [r7, #28]
 800ffc2:	4413      	add	r3, r2
 800ffc4:	3334      	adds	r3, #52	; 0x34
 800ffc6:	460a      	mov	r2, r1
 800ffc8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ffca:	68ba      	ldr	r2, [r7, #8]
 800ffcc:	69fb      	ldr	r3, [r7, #28]
 800ffce:	4413      	add	r3, r2
 800ffd0:	781b      	ldrb	r3, [r3, #0]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d006      	beq.n	800ffe4 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ffd6:	69fb      	ldr	r3, [r7, #28]
 800ffd8:	3301      	adds	r3, #1
 800ffda:	61fb      	str	r3, [r7, #28]
 800ffdc:	69fb      	ldr	r3, [r7, #28]
 800ffde:	2b0f      	cmp	r3, #15
 800ffe0:	d9e9      	bls.n	800ffb6 <prvInitialiseNewTask+0x54>
 800ffe2:	e000      	b.n	800ffe6 <prvInitialiseNewTask+0x84>
			{
				break;
 800ffe4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ffe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffe8:	2200      	movs	r2, #0
 800ffea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ffee:	e003      	b.n	800fff8 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fff2:	2200      	movs	r2, #0
 800fff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fffa:	2b06      	cmp	r3, #6
 800fffc:	d901      	bls.n	8010002 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fffe:	2306      	movs	r3, #6
 8010000:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010004:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010006:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801000a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801000c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801000e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010010:	2200      	movs	r2, #0
 8010012:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010016:	3304      	adds	r3, #4
 8010018:	4618      	mov	r0, r3
 801001a:	f7ff f9ca 	bl	800f3b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801001e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010020:	3318      	adds	r3, #24
 8010022:	4618      	mov	r0, r3
 8010024:	f7ff f9c5 	bl	800f3b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801002a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801002c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801002e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010030:	f1c3 0207 	rsb	r2, r3, #7
 8010034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010036:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801003a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801003c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801003e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010040:	2200      	movs	r2, #0
 8010042:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010046:	2200      	movs	r2, #0
 8010048:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801004c:	683a      	ldr	r2, [r7, #0]
 801004e:	68f9      	ldr	r1, [r7, #12]
 8010050:	69b8      	ldr	r0, [r7, #24]
 8010052:	f000 fe93 	bl	8010d7c <pxPortInitialiseStack>
 8010056:	4602      	mov	r2, r0
 8010058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801005a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801005c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801005e:	2b00      	cmp	r3, #0
 8010060:	d002      	beq.n	8010068 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010066:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010068:	bf00      	nop
 801006a:	3720      	adds	r7, #32
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}

08010070 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010078:	f000 ffac 	bl	8010fd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801007c:	4b2a      	ldr	r3, [pc, #168]	; (8010128 <prvAddNewTaskToReadyList+0xb8>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	3301      	adds	r3, #1
 8010082:	4a29      	ldr	r2, [pc, #164]	; (8010128 <prvAddNewTaskToReadyList+0xb8>)
 8010084:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010086:	4b29      	ldr	r3, [pc, #164]	; (801012c <prvAddNewTaskToReadyList+0xbc>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d109      	bne.n	80100a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801008e:	4a27      	ldr	r2, [pc, #156]	; (801012c <prvAddNewTaskToReadyList+0xbc>)
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010094:	4b24      	ldr	r3, [pc, #144]	; (8010128 <prvAddNewTaskToReadyList+0xb8>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	2b01      	cmp	r3, #1
 801009a:	d110      	bne.n	80100be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801009c:	f000 fbae 	bl	80107fc <prvInitialiseTaskLists>
 80100a0:	e00d      	b.n	80100be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80100a2:	4b23      	ldr	r3, [pc, #140]	; (8010130 <prvAddNewTaskToReadyList+0xc0>)
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d109      	bne.n	80100be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80100aa:	4b20      	ldr	r3, [pc, #128]	; (801012c <prvAddNewTaskToReadyList+0xbc>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d802      	bhi.n	80100be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80100b8:	4a1c      	ldr	r2, [pc, #112]	; (801012c <prvAddNewTaskToReadyList+0xbc>)
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80100be:	4b1d      	ldr	r3, [pc, #116]	; (8010134 <prvAddNewTaskToReadyList+0xc4>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	3301      	adds	r3, #1
 80100c4:	4a1b      	ldr	r2, [pc, #108]	; (8010134 <prvAddNewTaskToReadyList+0xc4>)
 80100c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100cc:	2201      	movs	r2, #1
 80100ce:	409a      	lsls	r2, r3
 80100d0:	4b19      	ldr	r3, [pc, #100]	; (8010138 <prvAddNewTaskToReadyList+0xc8>)
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	4313      	orrs	r3, r2
 80100d6:	4a18      	ldr	r2, [pc, #96]	; (8010138 <prvAddNewTaskToReadyList+0xc8>)
 80100d8:	6013      	str	r3, [r2, #0]
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100de:	4613      	mov	r3, r2
 80100e0:	009b      	lsls	r3, r3, #2
 80100e2:	4413      	add	r3, r2
 80100e4:	009b      	lsls	r3, r3, #2
 80100e6:	4a15      	ldr	r2, [pc, #84]	; (801013c <prvAddNewTaskToReadyList+0xcc>)
 80100e8:	441a      	add	r2, r3
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	3304      	adds	r3, #4
 80100ee:	4619      	mov	r1, r3
 80100f0:	4610      	mov	r0, r2
 80100f2:	f7ff f96b 	bl	800f3cc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80100f6:	f000 ff9d 	bl	8011034 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80100fa:	4b0d      	ldr	r3, [pc, #52]	; (8010130 <prvAddNewTaskToReadyList+0xc0>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d00e      	beq.n	8010120 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010102:	4b0a      	ldr	r3, [pc, #40]	; (801012c <prvAddNewTaskToReadyList+0xbc>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801010c:	429a      	cmp	r2, r3
 801010e:	d207      	bcs.n	8010120 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010110:	4b0b      	ldr	r3, [pc, #44]	; (8010140 <prvAddNewTaskToReadyList+0xd0>)
 8010112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010116:	601a      	str	r2, [r3, #0]
 8010118:	f3bf 8f4f 	dsb	sy
 801011c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010120:	bf00      	nop
 8010122:	3708      	adds	r7, #8
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}
 8010128:	20000a64 	.word	0x20000a64
 801012c:	20000964 	.word	0x20000964
 8010130:	20000a70 	.word	0x20000a70
 8010134:	20000a80 	.word	0x20000a80
 8010138:	20000a6c 	.word	0x20000a6c
 801013c:	20000968 	.word	0x20000968
 8010140:	e000ed04 	.word	0xe000ed04

08010144 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010144:	b580      	push	{r7, lr}
 8010146:	b084      	sub	sp, #16
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801014c:	2300      	movs	r3, #0
 801014e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d017      	beq.n	8010186 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010156:	4b13      	ldr	r3, [pc, #76]	; (80101a4 <vTaskDelay+0x60>)
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d00a      	beq.n	8010174 <vTaskDelay+0x30>
	__asm volatile
 801015e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010162:	f383 8811 	msr	BASEPRI, r3
 8010166:	f3bf 8f6f 	isb	sy
 801016a:	f3bf 8f4f 	dsb	sy
 801016e:	60bb      	str	r3, [r7, #8]
}
 8010170:	bf00      	nop
 8010172:	e7fe      	b.n	8010172 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010174:	f000 f862 	bl	801023c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010178:	2100      	movs	r1, #0
 801017a:	6878      	ldr	r0, [r7, #4]
 801017c:	f000 fd98 	bl	8010cb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010180:	f000 f86a 	bl	8010258 <xTaskResumeAll>
 8010184:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d107      	bne.n	801019c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801018c:	4b06      	ldr	r3, [pc, #24]	; (80101a8 <vTaskDelay+0x64>)
 801018e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010192:	601a      	str	r2, [r3, #0]
 8010194:	f3bf 8f4f 	dsb	sy
 8010198:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801019c:	bf00      	nop
 801019e:	3710      	adds	r7, #16
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}
 80101a4:	20000a8c 	.word	0x20000a8c
 80101a8:	e000ed04 	.word	0xe000ed04

080101ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b086      	sub	sp, #24
 80101b0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80101b2:	4b1c      	ldr	r3, [pc, #112]	; (8010224 <vTaskStartScheduler+0x78>)
 80101b4:	9301      	str	r3, [sp, #4]
 80101b6:	2300      	movs	r3, #0
 80101b8:	9300      	str	r3, [sp, #0]
 80101ba:	2300      	movs	r3, #0
 80101bc:	2280      	movs	r2, #128	; 0x80
 80101be:	491a      	ldr	r1, [pc, #104]	; (8010228 <vTaskStartScheduler+0x7c>)
 80101c0:	481a      	ldr	r0, [pc, #104]	; (801022c <vTaskStartScheduler+0x80>)
 80101c2:	f7ff fe8d 	bl	800fee0 <xTaskCreate>
 80101c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	2b01      	cmp	r3, #1
 80101cc:	d116      	bne.n	80101fc <vTaskStartScheduler+0x50>
	__asm volatile
 80101ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101d2:	f383 8811 	msr	BASEPRI, r3
 80101d6:	f3bf 8f6f 	isb	sy
 80101da:	f3bf 8f4f 	dsb	sy
 80101de:	60bb      	str	r3, [r7, #8]
}
 80101e0:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80101e2:	4b13      	ldr	r3, [pc, #76]	; (8010230 <vTaskStartScheduler+0x84>)
 80101e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80101e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80101ea:	4b12      	ldr	r3, [pc, #72]	; (8010234 <vTaskStartScheduler+0x88>)
 80101ec:	2201      	movs	r2, #1
 80101ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80101f0:	4b11      	ldr	r3, [pc, #68]	; (8010238 <vTaskStartScheduler+0x8c>)
 80101f2:	2200      	movs	r2, #0
 80101f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80101f6:	f000 fe4b 	bl	8010e90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80101fa:	e00e      	b.n	801021a <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010202:	d10a      	bne.n	801021a <vTaskStartScheduler+0x6e>
	__asm volatile
 8010204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010208:	f383 8811 	msr	BASEPRI, r3
 801020c:	f3bf 8f6f 	isb	sy
 8010210:	f3bf 8f4f 	dsb	sy
 8010214:	607b      	str	r3, [r7, #4]
}
 8010216:	bf00      	nop
 8010218:	e7fe      	b.n	8010218 <vTaskStartScheduler+0x6c>
}
 801021a:	bf00      	nop
 801021c:	3710      	adds	r7, #16
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}
 8010222:	bf00      	nop
 8010224:	20000a88 	.word	0x20000a88
 8010228:	08015328 	.word	0x08015328
 801022c:	080107cd 	.word	0x080107cd
 8010230:	20000a84 	.word	0x20000a84
 8010234:	20000a70 	.word	0x20000a70
 8010238:	20000a68 	.word	0x20000a68

0801023c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801023c:	b480      	push	{r7}
 801023e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010240:	4b04      	ldr	r3, [pc, #16]	; (8010254 <vTaskSuspendAll+0x18>)
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	3301      	adds	r3, #1
 8010246:	4a03      	ldr	r2, [pc, #12]	; (8010254 <vTaskSuspendAll+0x18>)
 8010248:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801024a:	bf00      	nop
 801024c:	46bd      	mov	sp, r7
 801024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010252:	4770      	bx	lr
 8010254:	20000a8c 	.word	0x20000a8c

08010258 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b084      	sub	sp, #16
 801025c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801025e:	2300      	movs	r3, #0
 8010260:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010262:	2300      	movs	r3, #0
 8010264:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010266:	4b41      	ldr	r3, [pc, #260]	; (801036c <xTaskResumeAll+0x114>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d10a      	bne.n	8010284 <xTaskResumeAll+0x2c>
	__asm volatile
 801026e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010272:	f383 8811 	msr	BASEPRI, r3
 8010276:	f3bf 8f6f 	isb	sy
 801027a:	f3bf 8f4f 	dsb	sy
 801027e:	603b      	str	r3, [r7, #0]
}
 8010280:	bf00      	nop
 8010282:	e7fe      	b.n	8010282 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010284:	f000 fea6 	bl	8010fd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010288:	4b38      	ldr	r3, [pc, #224]	; (801036c <xTaskResumeAll+0x114>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	3b01      	subs	r3, #1
 801028e:	4a37      	ldr	r2, [pc, #220]	; (801036c <xTaskResumeAll+0x114>)
 8010290:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010292:	4b36      	ldr	r3, [pc, #216]	; (801036c <xTaskResumeAll+0x114>)
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d161      	bne.n	801035e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801029a:	4b35      	ldr	r3, [pc, #212]	; (8010370 <xTaskResumeAll+0x118>)
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d05d      	beq.n	801035e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80102a2:	e02e      	b.n	8010302 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102a4:	4b33      	ldr	r3, [pc, #204]	; (8010374 <xTaskResumeAll+0x11c>)
 80102a6:	68db      	ldr	r3, [r3, #12]
 80102a8:	68db      	ldr	r3, [r3, #12]
 80102aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	3318      	adds	r3, #24
 80102b0:	4618      	mov	r0, r3
 80102b2:	f7ff f8e8 	bl	800f486 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	3304      	adds	r3, #4
 80102ba:	4618      	mov	r0, r3
 80102bc:	f7ff f8e3 	bl	800f486 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102c4:	2201      	movs	r2, #1
 80102c6:	409a      	lsls	r2, r3
 80102c8:	4b2b      	ldr	r3, [pc, #172]	; (8010378 <xTaskResumeAll+0x120>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	4313      	orrs	r3, r2
 80102ce:	4a2a      	ldr	r2, [pc, #168]	; (8010378 <xTaskResumeAll+0x120>)
 80102d0:	6013      	str	r3, [r2, #0]
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102d6:	4613      	mov	r3, r2
 80102d8:	009b      	lsls	r3, r3, #2
 80102da:	4413      	add	r3, r2
 80102dc:	009b      	lsls	r3, r3, #2
 80102de:	4a27      	ldr	r2, [pc, #156]	; (801037c <xTaskResumeAll+0x124>)
 80102e0:	441a      	add	r2, r3
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	3304      	adds	r3, #4
 80102e6:	4619      	mov	r1, r3
 80102e8:	4610      	mov	r0, r2
 80102ea:	f7ff f86f 	bl	800f3cc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102f2:	4b23      	ldr	r3, [pc, #140]	; (8010380 <xTaskResumeAll+0x128>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102f8:	429a      	cmp	r2, r3
 80102fa:	d302      	bcc.n	8010302 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80102fc:	4b21      	ldr	r3, [pc, #132]	; (8010384 <xTaskResumeAll+0x12c>)
 80102fe:	2201      	movs	r2, #1
 8010300:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010302:	4b1c      	ldr	r3, [pc, #112]	; (8010374 <xTaskResumeAll+0x11c>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d1cc      	bne.n	80102a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d001      	beq.n	8010314 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010310:	f000 faf2 	bl	80108f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010314:	4b1c      	ldr	r3, [pc, #112]	; (8010388 <xTaskResumeAll+0x130>)
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d010      	beq.n	8010342 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010320:	f000 f836 	bl	8010390 <xTaskIncrementTick>
 8010324:	4603      	mov	r3, r0
 8010326:	2b00      	cmp	r3, #0
 8010328:	d002      	beq.n	8010330 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801032a:	4b16      	ldr	r3, [pc, #88]	; (8010384 <xTaskResumeAll+0x12c>)
 801032c:	2201      	movs	r2, #1
 801032e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	3b01      	subs	r3, #1
 8010334:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d1f1      	bne.n	8010320 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 801033c:	4b12      	ldr	r3, [pc, #72]	; (8010388 <xTaskResumeAll+0x130>)
 801033e:	2200      	movs	r2, #0
 8010340:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010342:	4b10      	ldr	r3, [pc, #64]	; (8010384 <xTaskResumeAll+0x12c>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d009      	beq.n	801035e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801034a:	2301      	movs	r3, #1
 801034c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801034e:	4b0f      	ldr	r3, [pc, #60]	; (801038c <xTaskResumeAll+0x134>)
 8010350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010354:	601a      	str	r2, [r3, #0]
 8010356:	f3bf 8f4f 	dsb	sy
 801035a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801035e:	f000 fe69 	bl	8011034 <vPortExitCritical>

	return xAlreadyYielded;
 8010362:	68bb      	ldr	r3, [r7, #8]
}
 8010364:	4618      	mov	r0, r3
 8010366:	3710      	adds	r7, #16
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}
 801036c:	20000a8c 	.word	0x20000a8c
 8010370:	20000a64 	.word	0x20000a64
 8010374:	20000a24 	.word	0x20000a24
 8010378:	20000a6c 	.word	0x20000a6c
 801037c:	20000968 	.word	0x20000968
 8010380:	20000964 	.word	0x20000964
 8010384:	20000a78 	.word	0x20000a78
 8010388:	20000a74 	.word	0x20000a74
 801038c:	e000ed04 	.word	0xe000ed04

08010390 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b086      	sub	sp, #24
 8010394:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010396:	2300      	movs	r3, #0
 8010398:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801039a:	4b4e      	ldr	r3, [pc, #312]	; (80104d4 <xTaskIncrementTick+0x144>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	f040 808e 	bne.w	80104c0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80103a4:	4b4c      	ldr	r3, [pc, #304]	; (80104d8 <xTaskIncrementTick+0x148>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	3301      	adds	r3, #1
 80103aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80103ac:	4a4a      	ldr	r2, [pc, #296]	; (80104d8 <xTaskIncrementTick+0x148>)
 80103ae:	693b      	ldr	r3, [r7, #16]
 80103b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80103b2:	693b      	ldr	r3, [r7, #16]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d120      	bne.n	80103fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80103b8:	4b48      	ldr	r3, [pc, #288]	; (80104dc <xTaskIncrementTick+0x14c>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d00a      	beq.n	80103d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80103c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103c6:	f383 8811 	msr	BASEPRI, r3
 80103ca:	f3bf 8f6f 	isb	sy
 80103ce:	f3bf 8f4f 	dsb	sy
 80103d2:	603b      	str	r3, [r7, #0]
}
 80103d4:	bf00      	nop
 80103d6:	e7fe      	b.n	80103d6 <xTaskIncrementTick+0x46>
 80103d8:	4b40      	ldr	r3, [pc, #256]	; (80104dc <xTaskIncrementTick+0x14c>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	60fb      	str	r3, [r7, #12]
 80103de:	4b40      	ldr	r3, [pc, #256]	; (80104e0 <xTaskIncrementTick+0x150>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	4a3e      	ldr	r2, [pc, #248]	; (80104dc <xTaskIncrementTick+0x14c>)
 80103e4:	6013      	str	r3, [r2, #0]
 80103e6:	4a3e      	ldr	r2, [pc, #248]	; (80104e0 <xTaskIncrementTick+0x150>)
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	6013      	str	r3, [r2, #0]
 80103ec:	4b3d      	ldr	r3, [pc, #244]	; (80104e4 <xTaskIncrementTick+0x154>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	3301      	adds	r3, #1
 80103f2:	4a3c      	ldr	r2, [pc, #240]	; (80104e4 <xTaskIncrementTick+0x154>)
 80103f4:	6013      	str	r3, [r2, #0]
 80103f6:	f000 fa7f 	bl	80108f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80103fa:	4b3b      	ldr	r3, [pc, #236]	; (80104e8 <xTaskIncrementTick+0x158>)
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	693a      	ldr	r2, [r7, #16]
 8010400:	429a      	cmp	r2, r3
 8010402:	d348      	bcc.n	8010496 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010404:	4b35      	ldr	r3, [pc, #212]	; (80104dc <xTaskIncrementTick+0x14c>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d104      	bne.n	8010418 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801040e:	4b36      	ldr	r3, [pc, #216]	; (80104e8 <xTaskIncrementTick+0x158>)
 8010410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010414:	601a      	str	r2, [r3, #0]
					break;
 8010416:	e03e      	b.n	8010496 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010418:	4b30      	ldr	r3, [pc, #192]	; (80104dc <xTaskIncrementTick+0x14c>)
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	68db      	ldr	r3, [r3, #12]
 801041e:	68db      	ldr	r3, [r3, #12]
 8010420:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	685b      	ldr	r3, [r3, #4]
 8010426:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010428:	693a      	ldr	r2, [r7, #16]
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	429a      	cmp	r2, r3
 801042e:	d203      	bcs.n	8010438 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010430:	4a2d      	ldr	r2, [pc, #180]	; (80104e8 <xTaskIncrementTick+0x158>)
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010436:	e02e      	b.n	8010496 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010438:	68bb      	ldr	r3, [r7, #8]
 801043a:	3304      	adds	r3, #4
 801043c:	4618      	mov	r0, r3
 801043e:	f7ff f822 	bl	800f486 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010446:	2b00      	cmp	r3, #0
 8010448:	d004      	beq.n	8010454 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	3318      	adds	r3, #24
 801044e:	4618      	mov	r0, r3
 8010450:	f7ff f819 	bl	800f486 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010458:	2201      	movs	r2, #1
 801045a:	409a      	lsls	r2, r3
 801045c:	4b23      	ldr	r3, [pc, #140]	; (80104ec <xTaskIncrementTick+0x15c>)
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	4313      	orrs	r3, r2
 8010462:	4a22      	ldr	r2, [pc, #136]	; (80104ec <xTaskIncrementTick+0x15c>)
 8010464:	6013      	str	r3, [r2, #0]
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801046a:	4613      	mov	r3, r2
 801046c:	009b      	lsls	r3, r3, #2
 801046e:	4413      	add	r3, r2
 8010470:	009b      	lsls	r3, r3, #2
 8010472:	4a1f      	ldr	r2, [pc, #124]	; (80104f0 <xTaskIncrementTick+0x160>)
 8010474:	441a      	add	r2, r3
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	3304      	adds	r3, #4
 801047a:	4619      	mov	r1, r3
 801047c:	4610      	mov	r0, r2
 801047e:	f7fe ffa5 	bl	800f3cc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010486:	4b1b      	ldr	r3, [pc, #108]	; (80104f4 <xTaskIncrementTick+0x164>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801048c:	429a      	cmp	r2, r3
 801048e:	d3b9      	bcc.n	8010404 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010490:	2301      	movs	r3, #1
 8010492:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010494:	e7b6      	b.n	8010404 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010496:	4b17      	ldr	r3, [pc, #92]	; (80104f4 <xTaskIncrementTick+0x164>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801049c:	4914      	ldr	r1, [pc, #80]	; (80104f0 <xTaskIncrementTick+0x160>)
 801049e:	4613      	mov	r3, r2
 80104a0:	009b      	lsls	r3, r3, #2
 80104a2:	4413      	add	r3, r2
 80104a4:	009b      	lsls	r3, r3, #2
 80104a6:	440b      	add	r3, r1
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	2b01      	cmp	r3, #1
 80104ac:	d901      	bls.n	80104b2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80104ae:	2301      	movs	r3, #1
 80104b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80104b2:	4b11      	ldr	r3, [pc, #68]	; (80104f8 <xTaskIncrementTick+0x168>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d007      	beq.n	80104ca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80104ba:	2301      	movs	r3, #1
 80104bc:	617b      	str	r3, [r7, #20]
 80104be:	e004      	b.n	80104ca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80104c0:	4b0e      	ldr	r3, [pc, #56]	; (80104fc <xTaskIncrementTick+0x16c>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	3301      	adds	r3, #1
 80104c6:	4a0d      	ldr	r2, [pc, #52]	; (80104fc <xTaskIncrementTick+0x16c>)
 80104c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80104ca:	697b      	ldr	r3, [r7, #20]
}
 80104cc:	4618      	mov	r0, r3
 80104ce:	3718      	adds	r7, #24
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}
 80104d4:	20000a8c 	.word	0x20000a8c
 80104d8:	20000a68 	.word	0x20000a68
 80104dc:	20000a1c 	.word	0x20000a1c
 80104e0:	20000a20 	.word	0x20000a20
 80104e4:	20000a7c 	.word	0x20000a7c
 80104e8:	20000a84 	.word	0x20000a84
 80104ec:	20000a6c 	.word	0x20000a6c
 80104f0:	20000968 	.word	0x20000968
 80104f4:	20000964 	.word	0x20000964
 80104f8:	20000a78 	.word	0x20000a78
 80104fc:	20000a74 	.word	0x20000a74

08010500 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010500:	b480      	push	{r7}
 8010502:	b087      	sub	sp, #28
 8010504:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010506:	4b27      	ldr	r3, [pc, #156]	; (80105a4 <vTaskSwitchContext+0xa4>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d003      	beq.n	8010516 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801050e:	4b26      	ldr	r3, [pc, #152]	; (80105a8 <vTaskSwitchContext+0xa8>)
 8010510:	2201      	movs	r2, #1
 8010512:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010514:	e03f      	b.n	8010596 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8010516:	4b24      	ldr	r3, [pc, #144]	; (80105a8 <vTaskSwitchContext+0xa8>)
 8010518:	2200      	movs	r2, #0
 801051a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801051c:	4b23      	ldr	r3, [pc, #140]	; (80105ac <vTaskSwitchContext+0xac>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	fab3 f383 	clz	r3, r3
 8010528:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801052a:	7afb      	ldrb	r3, [r7, #11]
 801052c:	f1c3 031f 	rsb	r3, r3, #31
 8010530:	617b      	str	r3, [r7, #20]
 8010532:	491f      	ldr	r1, [pc, #124]	; (80105b0 <vTaskSwitchContext+0xb0>)
 8010534:	697a      	ldr	r2, [r7, #20]
 8010536:	4613      	mov	r3, r2
 8010538:	009b      	lsls	r3, r3, #2
 801053a:	4413      	add	r3, r2
 801053c:	009b      	lsls	r3, r3, #2
 801053e:	440b      	add	r3, r1
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d10a      	bne.n	801055c <vTaskSwitchContext+0x5c>
	__asm volatile
 8010546:	f04f 0350 	mov.w	r3, #80	; 0x50
 801054a:	f383 8811 	msr	BASEPRI, r3
 801054e:	f3bf 8f6f 	isb	sy
 8010552:	f3bf 8f4f 	dsb	sy
 8010556:	607b      	str	r3, [r7, #4]
}
 8010558:	bf00      	nop
 801055a:	e7fe      	b.n	801055a <vTaskSwitchContext+0x5a>
 801055c:	697a      	ldr	r2, [r7, #20]
 801055e:	4613      	mov	r3, r2
 8010560:	009b      	lsls	r3, r3, #2
 8010562:	4413      	add	r3, r2
 8010564:	009b      	lsls	r3, r3, #2
 8010566:	4a12      	ldr	r2, [pc, #72]	; (80105b0 <vTaskSwitchContext+0xb0>)
 8010568:	4413      	add	r3, r2
 801056a:	613b      	str	r3, [r7, #16]
 801056c:	693b      	ldr	r3, [r7, #16]
 801056e:	685b      	ldr	r3, [r3, #4]
 8010570:	685a      	ldr	r2, [r3, #4]
 8010572:	693b      	ldr	r3, [r7, #16]
 8010574:	605a      	str	r2, [r3, #4]
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	685a      	ldr	r2, [r3, #4]
 801057a:	693b      	ldr	r3, [r7, #16]
 801057c:	3308      	adds	r3, #8
 801057e:	429a      	cmp	r2, r3
 8010580:	d104      	bne.n	801058c <vTaskSwitchContext+0x8c>
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	685b      	ldr	r3, [r3, #4]
 8010586:	685a      	ldr	r2, [r3, #4]
 8010588:	693b      	ldr	r3, [r7, #16]
 801058a:	605a      	str	r2, [r3, #4]
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	685b      	ldr	r3, [r3, #4]
 8010590:	68db      	ldr	r3, [r3, #12]
 8010592:	4a08      	ldr	r2, [pc, #32]	; (80105b4 <vTaskSwitchContext+0xb4>)
 8010594:	6013      	str	r3, [r2, #0]
}
 8010596:	bf00      	nop
 8010598:	371c      	adds	r7, #28
 801059a:	46bd      	mov	sp, r7
 801059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a0:	4770      	bx	lr
 80105a2:	bf00      	nop
 80105a4:	20000a8c 	.word	0x20000a8c
 80105a8:	20000a78 	.word	0x20000a78
 80105ac:	20000a6c 	.word	0x20000a6c
 80105b0:	20000968 	.word	0x20000968
 80105b4:	20000964 	.word	0x20000964

080105b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b084      	sub	sp, #16
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
 80105c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d10a      	bne.n	80105de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80105c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105cc:	f383 8811 	msr	BASEPRI, r3
 80105d0:	f3bf 8f6f 	isb	sy
 80105d4:	f3bf 8f4f 	dsb	sy
 80105d8:	60fb      	str	r3, [r7, #12]
}
 80105da:	bf00      	nop
 80105dc:	e7fe      	b.n	80105dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80105de:	4b07      	ldr	r3, [pc, #28]	; (80105fc <vTaskPlaceOnEventList+0x44>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	3318      	adds	r3, #24
 80105e4:	4619      	mov	r1, r3
 80105e6:	6878      	ldr	r0, [r7, #4]
 80105e8:	f7fe ff14 	bl	800f414 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80105ec:	2101      	movs	r1, #1
 80105ee:	6838      	ldr	r0, [r7, #0]
 80105f0:	f000 fb5e 	bl	8010cb0 <prvAddCurrentTaskToDelayedList>
}
 80105f4:	bf00      	nop
 80105f6:	3710      	adds	r7, #16
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}
 80105fc:	20000964 	.word	0x20000964

08010600 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b086      	sub	sp, #24
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	68db      	ldr	r3, [r3, #12]
 801060c:	68db      	ldr	r3, [r3, #12]
 801060e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d10a      	bne.n	801062c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010616:	f04f 0350 	mov.w	r3, #80	; 0x50
 801061a:	f383 8811 	msr	BASEPRI, r3
 801061e:	f3bf 8f6f 	isb	sy
 8010622:	f3bf 8f4f 	dsb	sy
 8010626:	60fb      	str	r3, [r7, #12]
}
 8010628:	bf00      	nop
 801062a:	e7fe      	b.n	801062a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801062c:	693b      	ldr	r3, [r7, #16]
 801062e:	3318      	adds	r3, #24
 8010630:	4618      	mov	r0, r3
 8010632:	f7fe ff28 	bl	800f486 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010636:	4b1d      	ldr	r3, [pc, #116]	; (80106ac <xTaskRemoveFromEventList+0xac>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d11c      	bne.n	8010678 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801063e:	693b      	ldr	r3, [r7, #16]
 8010640:	3304      	adds	r3, #4
 8010642:	4618      	mov	r0, r3
 8010644:	f7fe ff1f 	bl	800f486 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801064c:	2201      	movs	r2, #1
 801064e:	409a      	lsls	r2, r3
 8010650:	4b17      	ldr	r3, [pc, #92]	; (80106b0 <xTaskRemoveFromEventList+0xb0>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	4313      	orrs	r3, r2
 8010656:	4a16      	ldr	r2, [pc, #88]	; (80106b0 <xTaskRemoveFromEventList+0xb0>)
 8010658:	6013      	str	r3, [r2, #0]
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801065e:	4613      	mov	r3, r2
 8010660:	009b      	lsls	r3, r3, #2
 8010662:	4413      	add	r3, r2
 8010664:	009b      	lsls	r3, r3, #2
 8010666:	4a13      	ldr	r2, [pc, #76]	; (80106b4 <xTaskRemoveFromEventList+0xb4>)
 8010668:	441a      	add	r2, r3
 801066a:	693b      	ldr	r3, [r7, #16]
 801066c:	3304      	adds	r3, #4
 801066e:	4619      	mov	r1, r3
 8010670:	4610      	mov	r0, r2
 8010672:	f7fe feab 	bl	800f3cc <vListInsertEnd>
 8010676:	e005      	b.n	8010684 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010678:	693b      	ldr	r3, [r7, #16]
 801067a:	3318      	adds	r3, #24
 801067c:	4619      	mov	r1, r3
 801067e:	480e      	ldr	r0, [pc, #56]	; (80106b8 <xTaskRemoveFromEventList+0xb8>)
 8010680:	f7fe fea4 	bl	800f3cc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010684:	693b      	ldr	r3, [r7, #16]
 8010686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010688:	4b0c      	ldr	r3, [pc, #48]	; (80106bc <xTaskRemoveFromEventList+0xbc>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801068e:	429a      	cmp	r2, r3
 8010690:	d905      	bls.n	801069e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010692:	2301      	movs	r3, #1
 8010694:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010696:	4b0a      	ldr	r3, [pc, #40]	; (80106c0 <xTaskRemoveFromEventList+0xc0>)
 8010698:	2201      	movs	r2, #1
 801069a:	601a      	str	r2, [r3, #0]
 801069c:	e001      	b.n	80106a2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801069e:	2300      	movs	r3, #0
 80106a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80106a2:	697b      	ldr	r3, [r7, #20]
}
 80106a4:	4618      	mov	r0, r3
 80106a6:	3718      	adds	r7, #24
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}
 80106ac:	20000a8c 	.word	0x20000a8c
 80106b0:	20000a6c 	.word	0x20000a6c
 80106b4:	20000968 	.word	0x20000968
 80106b8:	20000a24 	.word	0x20000a24
 80106bc:	20000964 	.word	0x20000964
 80106c0:	20000a78 	.word	0x20000a78

080106c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80106c4:	b480      	push	{r7}
 80106c6:	b083      	sub	sp, #12
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80106cc:	4b06      	ldr	r3, [pc, #24]	; (80106e8 <vTaskInternalSetTimeOutState+0x24>)
 80106ce:	681a      	ldr	r2, [r3, #0]
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80106d4:	4b05      	ldr	r3, [pc, #20]	; (80106ec <vTaskInternalSetTimeOutState+0x28>)
 80106d6:	681a      	ldr	r2, [r3, #0]
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	605a      	str	r2, [r3, #4]
}
 80106dc:	bf00      	nop
 80106de:	370c      	adds	r7, #12
 80106e0:	46bd      	mov	sp, r7
 80106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e6:	4770      	bx	lr
 80106e8:	20000a7c 	.word	0x20000a7c
 80106ec:	20000a68 	.word	0x20000a68

080106f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b088      	sub	sp, #32
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d10a      	bne.n	8010716 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010704:	f383 8811 	msr	BASEPRI, r3
 8010708:	f3bf 8f6f 	isb	sy
 801070c:	f3bf 8f4f 	dsb	sy
 8010710:	613b      	str	r3, [r7, #16]
}
 8010712:	bf00      	nop
 8010714:	e7fe      	b.n	8010714 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d10a      	bne.n	8010732 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801071c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010720:	f383 8811 	msr	BASEPRI, r3
 8010724:	f3bf 8f6f 	isb	sy
 8010728:	f3bf 8f4f 	dsb	sy
 801072c:	60fb      	str	r3, [r7, #12]
}
 801072e:	bf00      	nop
 8010730:	e7fe      	b.n	8010730 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010732:	f000 fc4f 	bl	8010fd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010736:	4b1d      	ldr	r3, [pc, #116]	; (80107ac <xTaskCheckForTimeOut+0xbc>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	685b      	ldr	r3, [r3, #4]
 8010740:	69ba      	ldr	r2, [r7, #24]
 8010742:	1ad3      	subs	r3, r2, r3
 8010744:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801074e:	d102      	bne.n	8010756 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010750:	2300      	movs	r3, #0
 8010752:	61fb      	str	r3, [r7, #28]
 8010754:	e023      	b.n	801079e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681a      	ldr	r2, [r3, #0]
 801075a:	4b15      	ldr	r3, [pc, #84]	; (80107b0 <xTaskCheckForTimeOut+0xc0>)
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	429a      	cmp	r2, r3
 8010760:	d007      	beq.n	8010772 <xTaskCheckForTimeOut+0x82>
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	685b      	ldr	r3, [r3, #4]
 8010766:	69ba      	ldr	r2, [r7, #24]
 8010768:	429a      	cmp	r2, r3
 801076a:	d302      	bcc.n	8010772 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801076c:	2301      	movs	r3, #1
 801076e:	61fb      	str	r3, [r7, #28]
 8010770:	e015      	b.n	801079e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	697a      	ldr	r2, [r7, #20]
 8010778:	429a      	cmp	r2, r3
 801077a:	d20b      	bcs.n	8010794 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	681a      	ldr	r2, [r3, #0]
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	1ad2      	subs	r2, r2, r3
 8010784:	683b      	ldr	r3, [r7, #0]
 8010786:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f7ff ff9b 	bl	80106c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801078e:	2300      	movs	r3, #0
 8010790:	61fb      	str	r3, [r7, #28]
 8010792:	e004      	b.n	801079e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	2200      	movs	r2, #0
 8010798:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801079a:	2301      	movs	r3, #1
 801079c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801079e:	f000 fc49 	bl	8011034 <vPortExitCritical>

	return xReturn;
 80107a2:	69fb      	ldr	r3, [r7, #28]
}
 80107a4:	4618      	mov	r0, r3
 80107a6:	3720      	adds	r7, #32
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}
 80107ac:	20000a68 	.word	0x20000a68
 80107b0:	20000a7c 	.word	0x20000a7c

080107b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80107b4:	b480      	push	{r7}
 80107b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80107b8:	4b03      	ldr	r3, [pc, #12]	; (80107c8 <vTaskMissedYield+0x14>)
 80107ba:	2201      	movs	r2, #1
 80107bc:	601a      	str	r2, [r3, #0]
}
 80107be:	bf00      	nop
 80107c0:	46bd      	mov	sp, r7
 80107c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c6:	4770      	bx	lr
 80107c8:	20000a78 	.word	0x20000a78

080107cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b082      	sub	sp, #8
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80107d4:	f000 f852 	bl	801087c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80107d8:	4b06      	ldr	r3, [pc, #24]	; (80107f4 <prvIdleTask+0x28>)
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	2b01      	cmp	r3, #1
 80107de:	d9f9      	bls.n	80107d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80107e0:	4b05      	ldr	r3, [pc, #20]	; (80107f8 <prvIdleTask+0x2c>)
 80107e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107e6:	601a      	str	r2, [r3, #0]
 80107e8:	f3bf 8f4f 	dsb	sy
 80107ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80107f0:	e7f0      	b.n	80107d4 <prvIdleTask+0x8>
 80107f2:	bf00      	nop
 80107f4:	20000968 	.word	0x20000968
 80107f8:	e000ed04 	.word	0xe000ed04

080107fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b082      	sub	sp, #8
 8010800:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010802:	2300      	movs	r3, #0
 8010804:	607b      	str	r3, [r7, #4]
 8010806:	e00c      	b.n	8010822 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010808:	687a      	ldr	r2, [r7, #4]
 801080a:	4613      	mov	r3, r2
 801080c:	009b      	lsls	r3, r3, #2
 801080e:	4413      	add	r3, r2
 8010810:	009b      	lsls	r3, r3, #2
 8010812:	4a12      	ldr	r2, [pc, #72]	; (801085c <prvInitialiseTaskLists+0x60>)
 8010814:	4413      	add	r3, r2
 8010816:	4618      	mov	r0, r3
 8010818:	f7fe fdab 	bl	800f372 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	3301      	adds	r3, #1
 8010820:	607b      	str	r3, [r7, #4]
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2b06      	cmp	r3, #6
 8010826:	d9ef      	bls.n	8010808 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010828:	480d      	ldr	r0, [pc, #52]	; (8010860 <prvInitialiseTaskLists+0x64>)
 801082a:	f7fe fda2 	bl	800f372 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801082e:	480d      	ldr	r0, [pc, #52]	; (8010864 <prvInitialiseTaskLists+0x68>)
 8010830:	f7fe fd9f 	bl	800f372 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010834:	480c      	ldr	r0, [pc, #48]	; (8010868 <prvInitialiseTaskLists+0x6c>)
 8010836:	f7fe fd9c 	bl	800f372 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801083a:	480c      	ldr	r0, [pc, #48]	; (801086c <prvInitialiseTaskLists+0x70>)
 801083c:	f7fe fd99 	bl	800f372 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010840:	480b      	ldr	r0, [pc, #44]	; (8010870 <prvInitialiseTaskLists+0x74>)
 8010842:	f7fe fd96 	bl	800f372 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010846:	4b0b      	ldr	r3, [pc, #44]	; (8010874 <prvInitialiseTaskLists+0x78>)
 8010848:	4a05      	ldr	r2, [pc, #20]	; (8010860 <prvInitialiseTaskLists+0x64>)
 801084a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801084c:	4b0a      	ldr	r3, [pc, #40]	; (8010878 <prvInitialiseTaskLists+0x7c>)
 801084e:	4a05      	ldr	r2, [pc, #20]	; (8010864 <prvInitialiseTaskLists+0x68>)
 8010850:	601a      	str	r2, [r3, #0]
}
 8010852:	bf00      	nop
 8010854:	3708      	adds	r7, #8
 8010856:	46bd      	mov	sp, r7
 8010858:	bd80      	pop	{r7, pc}
 801085a:	bf00      	nop
 801085c:	20000968 	.word	0x20000968
 8010860:	200009f4 	.word	0x200009f4
 8010864:	20000a08 	.word	0x20000a08
 8010868:	20000a24 	.word	0x20000a24
 801086c:	20000a38 	.word	0x20000a38
 8010870:	20000a50 	.word	0x20000a50
 8010874:	20000a1c 	.word	0x20000a1c
 8010878:	20000a20 	.word	0x20000a20

0801087c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b082      	sub	sp, #8
 8010880:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010882:	e019      	b.n	80108b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010884:	f000 fba6 	bl	8010fd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010888:	4b10      	ldr	r3, [pc, #64]	; (80108cc <prvCheckTasksWaitingTermination+0x50>)
 801088a:	68db      	ldr	r3, [r3, #12]
 801088c:	68db      	ldr	r3, [r3, #12]
 801088e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	3304      	adds	r3, #4
 8010894:	4618      	mov	r0, r3
 8010896:	f7fe fdf6 	bl	800f486 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801089a:	4b0d      	ldr	r3, [pc, #52]	; (80108d0 <prvCheckTasksWaitingTermination+0x54>)
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	3b01      	subs	r3, #1
 80108a0:	4a0b      	ldr	r2, [pc, #44]	; (80108d0 <prvCheckTasksWaitingTermination+0x54>)
 80108a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80108a4:	4b0b      	ldr	r3, [pc, #44]	; (80108d4 <prvCheckTasksWaitingTermination+0x58>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	3b01      	subs	r3, #1
 80108aa:	4a0a      	ldr	r2, [pc, #40]	; (80108d4 <prvCheckTasksWaitingTermination+0x58>)
 80108ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80108ae:	f000 fbc1 	bl	8011034 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80108b2:	6878      	ldr	r0, [r7, #4]
 80108b4:	f000 f810 	bl	80108d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80108b8:	4b06      	ldr	r3, [pc, #24]	; (80108d4 <prvCheckTasksWaitingTermination+0x58>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d1e1      	bne.n	8010884 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80108c0:	bf00      	nop
 80108c2:	bf00      	nop
 80108c4:	3708      	adds	r7, #8
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}
 80108ca:	bf00      	nop
 80108cc:	20000a38 	.word	0x20000a38
 80108d0:	20000a64 	.word	0x20000a64
 80108d4:	20000a4c 	.word	0x20000a4c

080108d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b082      	sub	sp, #8
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108e4:	4618      	mov	r0, r3
 80108e6:	f000 fd23 	bl	8011330 <vPortFree>
			vPortFree( pxTCB );
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f000 fd20 	bl	8011330 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80108f0:	bf00      	nop
 80108f2:	3708      	adds	r7, #8
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}

080108f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80108f8:	b480      	push	{r7}
 80108fa:	b083      	sub	sp, #12
 80108fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80108fe:	4b0c      	ldr	r3, [pc, #48]	; (8010930 <prvResetNextTaskUnblockTime+0x38>)
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d104      	bne.n	8010912 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010908:	4b0a      	ldr	r3, [pc, #40]	; (8010934 <prvResetNextTaskUnblockTime+0x3c>)
 801090a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801090e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010910:	e008      	b.n	8010924 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010912:	4b07      	ldr	r3, [pc, #28]	; (8010930 <prvResetNextTaskUnblockTime+0x38>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	68db      	ldr	r3, [r3, #12]
 8010918:	68db      	ldr	r3, [r3, #12]
 801091a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	685b      	ldr	r3, [r3, #4]
 8010920:	4a04      	ldr	r2, [pc, #16]	; (8010934 <prvResetNextTaskUnblockTime+0x3c>)
 8010922:	6013      	str	r3, [r2, #0]
}
 8010924:	bf00      	nop
 8010926:	370c      	adds	r7, #12
 8010928:	46bd      	mov	sp, r7
 801092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092e:	4770      	bx	lr
 8010930:	20000a1c 	.word	0x20000a1c
 8010934:	20000a84 	.word	0x20000a84

08010938 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010938:	b480      	push	{r7}
 801093a:	b083      	sub	sp, #12
 801093c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801093e:	4b0b      	ldr	r3, [pc, #44]	; (801096c <xTaskGetSchedulerState+0x34>)
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d102      	bne.n	801094c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010946:	2301      	movs	r3, #1
 8010948:	607b      	str	r3, [r7, #4]
 801094a:	e008      	b.n	801095e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801094c:	4b08      	ldr	r3, [pc, #32]	; (8010970 <xTaskGetSchedulerState+0x38>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d102      	bne.n	801095a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010954:	2302      	movs	r3, #2
 8010956:	607b      	str	r3, [r7, #4]
 8010958:	e001      	b.n	801095e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801095a:	2300      	movs	r3, #0
 801095c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801095e:	687b      	ldr	r3, [r7, #4]
	}
 8010960:	4618      	mov	r0, r3
 8010962:	370c      	adds	r7, #12
 8010964:	46bd      	mov	sp, r7
 8010966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096a:	4770      	bx	lr
 801096c:	20000a70 	.word	0x20000a70
 8010970:	20000a8c 	.word	0x20000a8c

08010974 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010974:	b580      	push	{r7, lr}
 8010976:	b084      	sub	sp, #16
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010980:	2300      	movs	r3, #0
 8010982:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d05e      	beq.n	8010a48 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801098a:	68bb      	ldr	r3, [r7, #8]
 801098c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801098e:	4b31      	ldr	r3, [pc, #196]	; (8010a54 <xTaskPriorityInherit+0xe0>)
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010994:	429a      	cmp	r2, r3
 8010996:	d24e      	bcs.n	8010a36 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	699b      	ldr	r3, [r3, #24]
 801099c:	2b00      	cmp	r3, #0
 801099e:	db06      	blt.n	80109ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109a0:	4b2c      	ldr	r3, [pc, #176]	; (8010a54 <xTaskPriorityInherit+0xe0>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109a6:	f1c3 0207 	rsb	r2, r3, #7
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	6959      	ldr	r1, [r3, #20]
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109b6:	4613      	mov	r3, r2
 80109b8:	009b      	lsls	r3, r3, #2
 80109ba:	4413      	add	r3, r2
 80109bc:	009b      	lsls	r3, r3, #2
 80109be:	4a26      	ldr	r2, [pc, #152]	; (8010a58 <xTaskPriorityInherit+0xe4>)
 80109c0:	4413      	add	r3, r2
 80109c2:	4299      	cmp	r1, r3
 80109c4:	d12f      	bne.n	8010a26 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80109c6:	68bb      	ldr	r3, [r7, #8]
 80109c8:	3304      	adds	r3, #4
 80109ca:	4618      	mov	r0, r3
 80109cc:	f7fe fd5b 	bl	800f486 <uxListRemove>
 80109d0:	4603      	mov	r3, r0
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d10a      	bne.n	80109ec <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80109d6:	68bb      	ldr	r3, [r7, #8]
 80109d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109da:	2201      	movs	r2, #1
 80109dc:	fa02 f303 	lsl.w	r3, r2, r3
 80109e0:	43da      	mvns	r2, r3
 80109e2:	4b1e      	ldr	r3, [pc, #120]	; (8010a5c <xTaskPriorityInherit+0xe8>)
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	4013      	ands	r3, r2
 80109e8:	4a1c      	ldr	r2, [pc, #112]	; (8010a5c <xTaskPriorityInherit+0xe8>)
 80109ea:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80109ec:	4b19      	ldr	r3, [pc, #100]	; (8010a54 <xTaskPriorityInherit+0xe0>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109fa:	2201      	movs	r2, #1
 80109fc:	409a      	lsls	r2, r3
 80109fe:	4b17      	ldr	r3, [pc, #92]	; (8010a5c <xTaskPriorityInherit+0xe8>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	4313      	orrs	r3, r2
 8010a04:	4a15      	ldr	r2, [pc, #84]	; (8010a5c <xTaskPriorityInherit+0xe8>)
 8010a06:	6013      	str	r3, [r2, #0]
 8010a08:	68bb      	ldr	r3, [r7, #8]
 8010a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a0c:	4613      	mov	r3, r2
 8010a0e:	009b      	lsls	r3, r3, #2
 8010a10:	4413      	add	r3, r2
 8010a12:	009b      	lsls	r3, r3, #2
 8010a14:	4a10      	ldr	r2, [pc, #64]	; (8010a58 <xTaskPriorityInherit+0xe4>)
 8010a16:	441a      	add	r2, r3
 8010a18:	68bb      	ldr	r3, [r7, #8]
 8010a1a:	3304      	adds	r3, #4
 8010a1c:	4619      	mov	r1, r3
 8010a1e:	4610      	mov	r0, r2
 8010a20:	f7fe fcd4 	bl	800f3cc <vListInsertEnd>
 8010a24:	e004      	b.n	8010a30 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010a26:	4b0b      	ldr	r3, [pc, #44]	; (8010a54 <xTaskPriorityInherit+0xe0>)
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010a30:	2301      	movs	r3, #1
 8010a32:	60fb      	str	r3, [r7, #12]
 8010a34:	e008      	b.n	8010a48 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010a36:	68bb      	ldr	r3, [r7, #8]
 8010a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a3a:	4b06      	ldr	r3, [pc, #24]	; (8010a54 <xTaskPriorityInherit+0xe0>)
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a40:	429a      	cmp	r2, r3
 8010a42:	d201      	bcs.n	8010a48 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010a44:	2301      	movs	r3, #1
 8010a46:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010a48:	68fb      	ldr	r3, [r7, #12]
	}
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	3710      	adds	r7, #16
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd80      	pop	{r7, pc}
 8010a52:	bf00      	nop
 8010a54:	20000964 	.word	0x20000964
 8010a58:	20000968 	.word	0x20000968
 8010a5c:	20000a6c 	.word	0x20000a6c

08010a60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b086      	sub	sp, #24
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d06e      	beq.n	8010b54 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010a76:	4b3a      	ldr	r3, [pc, #232]	; (8010b60 <xTaskPriorityDisinherit+0x100>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	693a      	ldr	r2, [r7, #16]
 8010a7c:	429a      	cmp	r2, r3
 8010a7e:	d00a      	beq.n	8010a96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a84:	f383 8811 	msr	BASEPRI, r3
 8010a88:	f3bf 8f6f 	isb	sy
 8010a8c:	f3bf 8f4f 	dsb	sy
 8010a90:	60fb      	str	r3, [r7, #12]
}
 8010a92:	bf00      	nop
 8010a94:	e7fe      	b.n	8010a94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010a96:	693b      	ldr	r3, [r7, #16]
 8010a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d10a      	bne.n	8010ab4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aa2:	f383 8811 	msr	BASEPRI, r3
 8010aa6:	f3bf 8f6f 	isb	sy
 8010aaa:	f3bf 8f4f 	dsb	sy
 8010aae:	60bb      	str	r3, [r7, #8]
}
 8010ab0:	bf00      	nop
 8010ab2:	e7fe      	b.n	8010ab2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010ab4:	693b      	ldr	r3, [r7, #16]
 8010ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010ab8:	1e5a      	subs	r2, r3, #1
 8010aba:	693b      	ldr	r3, [r7, #16]
 8010abc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010abe:	693b      	ldr	r3, [r7, #16]
 8010ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ac2:	693b      	ldr	r3, [r7, #16]
 8010ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	d044      	beq.n	8010b54 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010aca:	693b      	ldr	r3, [r7, #16]
 8010acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d140      	bne.n	8010b54 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010ad2:	693b      	ldr	r3, [r7, #16]
 8010ad4:	3304      	adds	r3, #4
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f7fe fcd5 	bl	800f486 <uxListRemove>
 8010adc:	4603      	mov	r3, r0
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d115      	bne.n	8010b0e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010ae2:	693b      	ldr	r3, [r7, #16]
 8010ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ae6:	491f      	ldr	r1, [pc, #124]	; (8010b64 <xTaskPriorityDisinherit+0x104>)
 8010ae8:	4613      	mov	r3, r2
 8010aea:	009b      	lsls	r3, r3, #2
 8010aec:	4413      	add	r3, r2
 8010aee:	009b      	lsls	r3, r3, #2
 8010af0:	440b      	add	r3, r1
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d10a      	bne.n	8010b0e <xTaskPriorityDisinherit+0xae>
 8010af8:	693b      	ldr	r3, [r7, #16]
 8010afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010afc:	2201      	movs	r2, #1
 8010afe:	fa02 f303 	lsl.w	r3, r2, r3
 8010b02:	43da      	mvns	r2, r3
 8010b04:	4b18      	ldr	r3, [pc, #96]	; (8010b68 <xTaskPriorityDisinherit+0x108>)
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	4013      	ands	r3, r2
 8010b0a:	4a17      	ldr	r2, [pc, #92]	; (8010b68 <xTaskPriorityDisinherit+0x108>)
 8010b0c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010b0e:	693b      	ldr	r3, [r7, #16]
 8010b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010b12:	693b      	ldr	r3, [r7, #16]
 8010b14:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b16:	693b      	ldr	r3, [r7, #16]
 8010b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b1a:	f1c3 0207 	rsb	r2, r3, #7
 8010b1e:	693b      	ldr	r3, [r7, #16]
 8010b20:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010b22:	693b      	ldr	r3, [r7, #16]
 8010b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b26:	2201      	movs	r2, #1
 8010b28:	409a      	lsls	r2, r3
 8010b2a:	4b0f      	ldr	r3, [pc, #60]	; (8010b68 <xTaskPriorityDisinherit+0x108>)
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	4313      	orrs	r3, r2
 8010b30:	4a0d      	ldr	r2, [pc, #52]	; (8010b68 <xTaskPriorityDisinherit+0x108>)
 8010b32:	6013      	str	r3, [r2, #0]
 8010b34:	693b      	ldr	r3, [r7, #16]
 8010b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b38:	4613      	mov	r3, r2
 8010b3a:	009b      	lsls	r3, r3, #2
 8010b3c:	4413      	add	r3, r2
 8010b3e:	009b      	lsls	r3, r3, #2
 8010b40:	4a08      	ldr	r2, [pc, #32]	; (8010b64 <xTaskPriorityDisinherit+0x104>)
 8010b42:	441a      	add	r2, r3
 8010b44:	693b      	ldr	r3, [r7, #16]
 8010b46:	3304      	adds	r3, #4
 8010b48:	4619      	mov	r1, r3
 8010b4a:	4610      	mov	r0, r2
 8010b4c:	f7fe fc3e 	bl	800f3cc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010b50:	2301      	movs	r3, #1
 8010b52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010b54:	697b      	ldr	r3, [r7, #20]
	}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3718      	adds	r7, #24
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}
 8010b5e:	bf00      	nop
 8010b60:	20000964 	.word	0x20000964
 8010b64:	20000968 	.word	0x20000968
 8010b68:	20000a6c 	.word	0x20000a6c

08010b6c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b088      	sub	sp, #32
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
 8010b74:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d077      	beq.n	8010c74 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010b84:	69bb      	ldr	r3, [r7, #24]
 8010b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d10a      	bne.n	8010ba2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8010b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b90:	f383 8811 	msr	BASEPRI, r3
 8010b94:	f3bf 8f6f 	isb	sy
 8010b98:	f3bf 8f4f 	dsb	sy
 8010b9c:	60fb      	str	r3, [r7, #12]
}
 8010b9e:	bf00      	nop
 8010ba0:	e7fe      	b.n	8010ba0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010ba2:	69bb      	ldr	r3, [r7, #24]
 8010ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ba6:	683a      	ldr	r2, [r7, #0]
 8010ba8:	429a      	cmp	r2, r3
 8010baa:	d902      	bls.n	8010bb2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	61fb      	str	r3, [r7, #28]
 8010bb0:	e002      	b.n	8010bb8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010bb2:	69bb      	ldr	r3, [r7, #24]
 8010bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bb6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010bb8:	69bb      	ldr	r3, [r7, #24]
 8010bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bbc:	69fa      	ldr	r2, [r7, #28]
 8010bbe:	429a      	cmp	r2, r3
 8010bc0:	d058      	beq.n	8010c74 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010bc2:	69bb      	ldr	r3, [r7, #24]
 8010bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010bc6:	697a      	ldr	r2, [r7, #20]
 8010bc8:	429a      	cmp	r2, r3
 8010bca:	d153      	bne.n	8010c74 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010bcc:	4b2b      	ldr	r3, [pc, #172]	; (8010c7c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	69ba      	ldr	r2, [r7, #24]
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d10a      	bne.n	8010bec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8010bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bda:	f383 8811 	msr	BASEPRI, r3
 8010bde:	f3bf 8f6f 	isb	sy
 8010be2:	f3bf 8f4f 	dsb	sy
 8010be6:	60bb      	str	r3, [r7, #8]
}
 8010be8:	bf00      	nop
 8010bea:	e7fe      	b.n	8010bea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010bec:	69bb      	ldr	r3, [r7, #24]
 8010bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bf0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010bf2:	69bb      	ldr	r3, [r7, #24]
 8010bf4:	69fa      	ldr	r2, [r7, #28]
 8010bf6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010bf8:	69bb      	ldr	r3, [r7, #24]
 8010bfa:	699b      	ldr	r3, [r3, #24]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	db04      	blt.n	8010c0a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c00:	69fb      	ldr	r3, [r7, #28]
 8010c02:	f1c3 0207 	rsb	r2, r3, #7
 8010c06:	69bb      	ldr	r3, [r7, #24]
 8010c08:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010c0a:	69bb      	ldr	r3, [r7, #24]
 8010c0c:	6959      	ldr	r1, [r3, #20]
 8010c0e:	693a      	ldr	r2, [r7, #16]
 8010c10:	4613      	mov	r3, r2
 8010c12:	009b      	lsls	r3, r3, #2
 8010c14:	4413      	add	r3, r2
 8010c16:	009b      	lsls	r3, r3, #2
 8010c18:	4a19      	ldr	r2, [pc, #100]	; (8010c80 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8010c1a:	4413      	add	r3, r2
 8010c1c:	4299      	cmp	r1, r3
 8010c1e:	d129      	bne.n	8010c74 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010c20:	69bb      	ldr	r3, [r7, #24]
 8010c22:	3304      	adds	r3, #4
 8010c24:	4618      	mov	r0, r3
 8010c26:	f7fe fc2e 	bl	800f486 <uxListRemove>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d10a      	bne.n	8010c46 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8010c30:	69bb      	ldr	r3, [r7, #24]
 8010c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c34:	2201      	movs	r2, #1
 8010c36:	fa02 f303 	lsl.w	r3, r2, r3
 8010c3a:	43da      	mvns	r2, r3
 8010c3c:	4b11      	ldr	r3, [pc, #68]	; (8010c84 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	4013      	ands	r3, r2
 8010c42:	4a10      	ldr	r2, [pc, #64]	; (8010c84 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010c44:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010c46:	69bb      	ldr	r3, [r7, #24]
 8010c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c4a:	2201      	movs	r2, #1
 8010c4c:	409a      	lsls	r2, r3
 8010c4e:	4b0d      	ldr	r3, [pc, #52]	; (8010c84 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	4313      	orrs	r3, r2
 8010c54:	4a0b      	ldr	r2, [pc, #44]	; (8010c84 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010c56:	6013      	str	r3, [r2, #0]
 8010c58:	69bb      	ldr	r3, [r7, #24]
 8010c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c5c:	4613      	mov	r3, r2
 8010c5e:	009b      	lsls	r3, r3, #2
 8010c60:	4413      	add	r3, r2
 8010c62:	009b      	lsls	r3, r3, #2
 8010c64:	4a06      	ldr	r2, [pc, #24]	; (8010c80 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8010c66:	441a      	add	r2, r3
 8010c68:	69bb      	ldr	r3, [r7, #24]
 8010c6a:	3304      	adds	r3, #4
 8010c6c:	4619      	mov	r1, r3
 8010c6e:	4610      	mov	r0, r2
 8010c70:	f7fe fbac 	bl	800f3cc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010c74:	bf00      	nop
 8010c76:	3720      	adds	r7, #32
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bd80      	pop	{r7, pc}
 8010c7c:	20000964 	.word	0x20000964
 8010c80:	20000968 	.word	0x20000968
 8010c84:	20000a6c 	.word	0x20000a6c

08010c88 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010c88:	b480      	push	{r7}
 8010c8a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010c8c:	4b07      	ldr	r3, [pc, #28]	; (8010cac <pvTaskIncrementMutexHeldCount+0x24>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d004      	beq.n	8010c9e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010c94:	4b05      	ldr	r3, [pc, #20]	; (8010cac <pvTaskIncrementMutexHeldCount+0x24>)
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010c9a:	3201      	adds	r2, #1
 8010c9c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8010c9e:	4b03      	ldr	r3, [pc, #12]	; (8010cac <pvTaskIncrementMutexHeldCount+0x24>)
 8010ca0:	681b      	ldr	r3, [r3, #0]
	}
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010caa:	4770      	bx	lr
 8010cac:	20000964 	.word	0x20000964

08010cb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b084      	sub	sp, #16
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
 8010cb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010cba:	4b29      	ldr	r3, [pc, #164]	; (8010d60 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010cc0:	4b28      	ldr	r3, [pc, #160]	; (8010d64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	3304      	adds	r3, #4
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f7fe fbdd 	bl	800f486 <uxListRemove>
 8010ccc:	4603      	mov	r3, r0
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d10b      	bne.n	8010cea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010cd2:	4b24      	ldr	r3, [pc, #144]	; (8010d64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cd8:	2201      	movs	r2, #1
 8010cda:	fa02 f303 	lsl.w	r3, r2, r3
 8010cde:	43da      	mvns	r2, r3
 8010ce0:	4b21      	ldr	r3, [pc, #132]	; (8010d68 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	4013      	ands	r3, r2
 8010ce6:	4a20      	ldr	r2, [pc, #128]	; (8010d68 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010ce8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010cf0:	d10a      	bne.n	8010d08 <prvAddCurrentTaskToDelayedList+0x58>
 8010cf2:	683b      	ldr	r3, [r7, #0]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d007      	beq.n	8010d08 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010cf8:	4b1a      	ldr	r3, [pc, #104]	; (8010d64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	3304      	adds	r3, #4
 8010cfe:	4619      	mov	r1, r3
 8010d00:	481a      	ldr	r0, [pc, #104]	; (8010d6c <prvAddCurrentTaskToDelayedList+0xbc>)
 8010d02:	f7fe fb63 	bl	800f3cc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010d06:	e026      	b.n	8010d56 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010d08:	68fa      	ldr	r2, [r7, #12]
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	4413      	add	r3, r2
 8010d0e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010d10:	4b14      	ldr	r3, [pc, #80]	; (8010d64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	68ba      	ldr	r2, [r7, #8]
 8010d16:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010d18:	68ba      	ldr	r2, [r7, #8]
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	429a      	cmp	r2, r3
 8010d1e:	d209      	bcs.n	8010d34 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010d20:	4b13      	ldr	r3, [pc, #76]	; (8010d70 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010d22:	681a      	ldr	r2, [r3, #0]
 8010d24:	4b0f      	ldr	r3, [pc, #60]	; (8010d64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	3304      	adds	r3, #4
 8010d2a:	4619      	mov	r1, r3
 8010d2c:	4610      	mov	r0, r2
 8010d2e:	f7fe fb71 	bl	800f414 <vListInsert>
}
 8010d32:	e010      	b.n	8010d56 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010d34:	4b0f      	ldr	r3, [pc, #60]	; (8010d74 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010d36:	681a      	ldr	r2, [r3, #0]
 8010d38:	4b0a      	ldr	r3, [pc, #40]	; (8010d64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	3304      	adds	r3, #4
 8010d3e:	4619      	mov	r1, r3
 8010d40:	4610      	mov	r0, r2
 8010d42:	f7fe fb67 	bl	800f414 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010d46:	4b0c      	ldr	r3, [pc, #48]	; (8010d78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	68ba      	ldr	r2, [r7, #8]
 8010d4c:	429a      	cmp	r2, r3
 8010d4e:	d202      	bcs.n	8010d56 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010d50:	4a09      	ldr	r2, [pc, #36]	; (8010d78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	6013      	str	r3, [r2, #0]
}
 8010d56:	bf00      	nop
 8010d58:	3710      	adds	r7, #16
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}
 8010d5e:	bf00      	nop
 8010d60:	20000a68 	.word	0x20000a68
 8010d64:	20000964 	.word	0x20000964
 8010d68:	20000a6c 	.word	0x20000a6c
 8010d6c:	20000a50 	.word	0x20000a50
 8010d70:	20000a20 	.word	0x20000a20
 8010d74:	20000a1c 	.word	0x20000a1c
 8010d78:	20000a84 	.word	0x20000a84

08010d7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010d7c:	b480      	push	{r7}
 8010d7e:	b085      	sub	sp, #20
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	60f8      	str	r0, [r7, #12]
 8010d84:	60b9      	str	r1, [r7, #8]
 8010d86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	3b04      	subs	r3, #4
 8010d8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010d94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	3b04      	subs	r3, #4
 8010d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010d9c:	68bb      	ldr	r3, [r7, #8]
 8010d9e:	f023 0201 	bic.w	r2, r3, #1
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	3b04      	subs	r3, #4
 8010daa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010dac:	4a0c      	ldr	r2, [pc, #48]	; (8010de0 <pxPortInitialiseStack+0x64>)
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	3b14      	subs	r3, #20
 8010db6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010db8:	687a      	ldr	r2, [r7, #4]
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	3b04      	subs	r3, #4
 8010dc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	f06f 0202 	mvn.w	r2, #2
 8010dca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	3b20      	subs	r3, #32
 8010dd0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010dd2:	68fb      	ldr	r3, [r7, #12]
}
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	3714      	adds	r7, #20
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dde:	4770      	bx	lr
 8010de0:	08010de5 	.word	0x08010de5

08010de4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010de4:	b480      	push	{r7}
 8010de6:	b085      	sub	sp, #20
 8010de8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010dea:	2300      	movs	r3, #0
 8010dec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010dee:	4b12      	ldr	r3, [pc, #72]	; (8010e38 <prvTaskExitError+0x54>)
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010df6:	d00a      	beq.n	8010e0e <prvTaskExitError+0x2a>
	__asm volatile
 8010df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dfc:	f383 8811 	msr	BASEPRI, r3
 8010e00:	f3bf 8f6f 	isb	sy
 8010e04:	f3bf 8f4f 	dsb	sy
 8010e08:	60fb      	str	r3, [r7, #12]
}
 8010e0a:	bf00      	nop
 8010e0c:	e7fe      	b.n	8010e0c <prvTaskExitError+0x28>
	__asm volatile
 8010e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e12:	f383 8811 	msr	BASEPRI, r3
 8010e16:	f3bf 8f6f 	isb	sy
 8010e1a:	f3bf 8f4f 	dsb	sy
 8010e1e:	60bb      	str	r3, [r7, #8]
}
 8010e20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010e22:	bf00      	nop
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d0fc      	beq.n	8010e24 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010e2a:	bf00      	nop
 8010e2c:	bf00      	nop
 8010e2e:	3714      	adds	r7, #20
 8010e30:	46bd      	mov	sp, r7
 8010e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e36:	4770      	bx	lr
 8010e38:	2000011c 	.word	0x2000011c
 8010e3c:	00000000 	.word	0x00000000

08010e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010e40:	4b07      	ldr	r3, [pc, #28]	; (8010e60 <pxCurrentTCBConst2>)
 8010e42:	6819      	ldr	r1, [r3, #0]
 8010e44:	6808      	ldr	r0, [r1, #0]
 8010e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e4a:	f380 8809 	msr	PSP, r0
 8010e4e:	f3bf 8f6f 	isb	sy
 8010e52:	f04f 0000 	mov.w	r0, #0
 8010e56:	f380 8811 	msr	BASEPRI, r0
 8010e5a:	4770      	bx	lr
 8010e5c:	f3af 8000 	nop.w

08010e60 <pxCurrentTCBConst2>:
 8010e60:	20000964 	.word	0x20000964
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010e64:	bf00      	nop
 8010e66:	bf00      	nop

08010e68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010e68:	4808      	ldr	r0, [pc, #32]	; (8010e8c <prvPortStartFirstTask+0x24>)
 8010e6a:	6800      	ldr	r0, [r0, #0]
 8010e6c:	6800      	ldr	r0, [r0, #0]
 8010e6e:	f380 8808 	msr	MSP, r0
 8010e72:	f04f 0000 	mov.w	r0, #0
 8010e76:	f380 8814 	msr	CONTROL, r0
 8010e7a:	b662      	cpsie	i
 8010e7c:	b661      	cpsie	f
 8010e7e:	f3bf 8f4f 	dsb	sy
 8010e82:	f3bf 8f6f 	isb	sy
 8010e86:	df00      	svc	0
 8010e88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010e8a:	bf00      	nop
 8010e8c:	e000ed08 	.word	0xe000ed08

08010e90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b086      	sub	sp, #24
 8010e94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010e96:	4b46      	ldr	r3, [pc, #280]	; (8010fb0 <xPortStartScheduler+0x120>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	4a46      	ldr	r2, [pc, #280]	; (8010fb4 <xPortStartScheduler+0x124>)
 8010e9c:	4293      	cmp	r3, r2
 8010e9e:	d10a      	bne.n	8010eb6 <xPortStartScheduler+0x26>
	__asm volatile
 8010ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ea4:	f383 8811 	msr	BASEPRI, r3
 8010ea8:	f3bf 8f6f 	isb	sy
 8010eac:	f3bf 8f4f 	dsb	sy
 8010eb0:	613b      	str	r3, [r7, #16]
}
 8010eb2:	bf00      	nop
 8010eb4:	e7fe      	b.n	8010eb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010eb6:	4b3e      	ldr	r3, [pc, #248]	; (8010fb0 <xPortStartScheduler+0x120>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	4a3f      	ldr	r2, [pc, #252]	; (8010fb8 <xPortStartScheduler+0x128>)
 8010ebc:	4293      	cmp	r3, r2
 8010ebe:	d10a      	bne.n	8010ed6 <xPortStartScheduler+0x46>
	__asm volatile
 8010ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ec4:	f383 8811 	msr	BASEPRI, r3
 8010ec8:	f3bf 8f6f 	isb	sy
 8010ecc:	f3bf 8f4f 	dsb	sy
 8010ed0:	60fb      	str	r3, [r7, #12]
}
 8010ed2:	bf00      	nop
 8010ed4:	e7fe      	b.n	8010ed4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010ed6:	4b39      	ldr	r3, [pc, #228]	; (8010fbc <xPortStartScheduler+0x12c>)
 8010ed8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010eda:	697b      	ldr	r3, [r7, #20]
 8010edc:	781b      	ldrb	r3, [r3, #0]
 8010ede:	b2db      	uxtb	r3, r3
 8010ee0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010ee2:	697b      	ldr	r3, [r7, #20]
 8010ee4:	22ff      	movs	r2, #255	; 0xff
 8010ee6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010ee8:	697b      	ldr	r3, [r7, #20]
 8010eea:	781b      	ldrb	r3, [r3, #0]
 8010eec:	b2db      	uxtb	r3, r3
 8010eee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010ef0:	78fb      	ldrb	r3, [r7, #3]
 8010ef2:	b2db      	uxtb	r3, r3
 8010ef4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010ef8:	b2da      	uxtb	r2, r3
 8010efa:	4b31      	ldr	r3, [pc, #196]	; (8010fc0 <xPortStartScheduler+0x130>)
 8010efc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010efe:	4b31      	ldr	r3, [pc, #196]	; (8010fc4 <xPortStartScheduler+0x134>)
 8010f00:	2207      	movs	r2, #7
 8010f02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010f04:	e009      	b.n	8010f1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010f06:	4b2f      	ldr	r3, [pc, #188]	; (8010fc4 <xPortStartScheduler+0x134>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	3b01      	subs	r3, #1
 8010f0c:	4a2d      	ldr	r2, [pc, #180]	; (8010fc4 <xPortStartScheduler+0x134>)
 8010f0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010f10:	78fb      	ldrb	r3, [r7, #3]
 8010f12:	b2db      	uxtb	r3, r3
 8010f14:	005b      	lsls	r3, r3, #1
 8010f16:	b2db      	uxtb	r3, r3
 8010f18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010f1a:	78fb      	ldrb	r3, [r7, #3]
 8010f1c:	b2db      	uxtb	r3, r3
 8010f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f22:	2b80      	cmp	r3, #128	; 0x80
 8010f24:	d0ef      	beq.n	8010f06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010f26:	4b27      	ldr	r3, [pc, #156]	; (8010fc4 <xPortStartScheduler+0x134>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	f1c3 0307 	rsb	r3, r3, #7
 8010f2e:	2b04      	cmp	r3, #4
 8010f30:	d00a      	beq.n	8010f48 <xPortStartScheduler+0xb8>
	__asm volatile
 8010f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f36:	f383 8811 	msr	BASEPRI, r3
 8010f3a:	f3bf 8f6f 	isb	sy
 8010f3e:	f3bf 8f4f 	dsb	sy
 8010f42:	60bb      	str	r3, [r7, #8]
}
 8010f44:	bf00      	nop
 8010f46:	e7fe      	b.n	8010f46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010f48:	4b1e      	ldr	r3, [pc, #120]	; (8010fc4 <xPortStartScheduler+0x134>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	021b      	lsls	r3, r3, #8
 8010f4e:	4a1d      	ldr	r2, [pc, #116]	; (8010fc4 <xPortStartScheduler+0x134>)
 8010f50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010f52:	4b1c      	ldr	r3, [pc, #112]	; (8010fc4 <xPortStartScheduler+0x134>)
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010f5a:	4a1a      	ldr	r2, [pc, #104]	; (8010fc4 <xPortStartScheduler+0x134>)
 8010f5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	b2da      	uxtb	r2, r3
 8010f62:	697b      	ldr	r3, [r7, #20]
 8010f64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010f66:	4b18      	ldr	r3, [pc, #96]	; (8010fc8 <xPortStartScheduler+0x138>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	4a17      	ldr	r2, [pc, #92]	; (8010fc8 <xPortStartScheduler+0x138>)
 8010f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010f70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010f72:	4b15      	ldr	r3, [pc, #84]	; (8010fc8 <xPortStartScheduler+0x138>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	4a14      	ldr	r2, [pc, #80]	; (8010fc8 <xPortStartScheduler+0x138>)
 8010f78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010f7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010f7e:	f000 f8dd 	bl	801113c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010f82:	4b12      	ldr	r3, [pc, #72]	; (8010fcc <xPortStartScheduler+0x13c>)
 8010f84:	2200      	movs	r2, #0
 8010f86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010f88:	f000 f8fc 	bl	8011184 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010f8c:	4b10      	ldr	r3, [pc, #64]	; (8010fd0 <xPortStartScheduler+0x140>)
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	4a0f      	ldr	r2, [pc, #60]	; (8010fd0 <xPortStartScheduler+0x140>)
 8010f92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010f96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010f98:	f7ff ff66 	bl	8010e68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010f9c:	f7ff fab0 	bl	8010500 <vTaskSwitchContext>
	prvTaskExitError();
 8010fa0:	f7ff ff20 	bl	8010de4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010fa4:	2300      	movs	r3, #0
}
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	3718      	adds	r7, #24
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}
 8010fae:	bf00      	nop
 8010fb0:	e000ed00 	.word	0xe000ed00
 8010fb4:	410fc271 	.word	0x410fc271
 8010fb8:	410fc270 	.word	0x410fc270
 8010fbc:	e000e400 	.word	0xe000e400
 8010fc0:	20000a90 	.word	0x20000a90
 8010fc4:	20000a94 	.word	0x20000a94
 8010fc8:	e000ed20 	.word	0xe000ed20
 8010fcc:	2000011c 	.word	0x2000011c
 8010fd0:	e000ef34 	.word	0xe000ef34

08010fd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b083      	sub	sp, #12
 8010fd8:	af00      	add	r7, sp, #0
	__asm volatile
 8010fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fde:	f383 8811 	msr	BASEPRI, r3
 8010fe2:	f3bf 8f6f 	isb	sy
 8010fe6:	f3bf 8f4f 	dsb	sy
 8010fea:	607b      	str	r3, [r7, #4]
}
 8010fec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010fee:	4b0f      	ldr	r3, [pc, #60]	; (801102c <vPortEnterCritical+0x58>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	3301      	adds	r3, #1
 8010ff4:	4a0d      	ldr	r2, [pc, #52]	; (801102c <vPortEnterCritical+0x58>)
 8010ff6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010ff8:	4b0c      	ldr	r3, [pc, #48]	; (801102c <vPortEnterCritical+0x58>)
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	2b01      	cmp	r3, #1
 8010ffe:	d10f      	bne.n	8011020 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011000:	4b0b      	ldr	r3, [pc, #44]	; (8011030 <vPortEnterCritical+0x5c>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	b2db      	uxtb	r3, r3
 8011006:	2b00      	cmp	r3, #0
 8011008:	d00a      	beq.n	8011020 <vPortEnterCritical+0x4c>
	__asm volatile
 801100a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801100e:	f383 8811 	msr	BASEPRI, r3
 8011012:	f3bf 8f6f 	isb	sy
 8011016:	f3bf 8f4f 	dsb	sy
 801101a:	603b      	str	r3, [r7, #0]
}
 801101c:	bf00      	nop
 801101e:	e7fe      	b.n	801101e <vPortEnterCritical+0x4a>
	}
}
 8011020:	bf00      	nop
 8011022:	370c      	adds	r7, #12
 8011024:	46bd      	mov	sp, r7
 8011026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102a:	4770      	bx	lr
 801102c:	2000011c 	.word	0x2000011c
 8011030:	e000ed04 	.word	0xe000ed04

08011034 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011034:	b480      	push	{r7}
 8011036:	b083      	sub	sp, #12
 8011038:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801103a:	4b12      	ldr	r3, [pc, #72]	; (8011084 <vPortExitCritical+0x50>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d10a      	bne.n	8011058 <vPortExitCritical+0x24>
	__asm volatile
 8011042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011046:	f383 8811 	msr	BASEPRI, r3
 801104a:	f3bf 8f6f 	isb	sy
 801104e:	f3bf 8f4f 	dsb	sy
 8011052:	607b      	str	r3, [r7, #4]
}
 8011054:	bf00      	nop
 8011056:	e7fe      	b.n	8011056 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011058:	4b0a      	ldr	r3, [pc, #40]	; (8011084 <vPortExitCritical+0x50>)
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	3b01      	subs	r3, #1
 801105e:	4a09      	ldr	r2, [pc, #36]	; (8011084 <vPortExitCritical+0x50>)
 8011060:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011062:	4b08      	ldr	r3, [pc, #32]	; (8011084 <vPortExitCritical+0x50>)
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d105      	bne.n	8011076 <vPortExitCritical+0x42>
 801106a:	2300      	movs	r3, #0
 801106c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801106e:	683b      	ldr	r3, [r7, #0]
 8011070:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011074:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011076:	bf00      	nop
 8011078:	370c      	adds	r7, #12
 801107a:	46bd      	mov	sp, r7
 801107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011080:	4770      	bx	lr
 8011082:	bf00      	nop
 8011084:	2000011c 	.word	0x2000011c
	...

08011090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011090:	f3ef 8009 	mrs	r0, PSP
 8011094:	f3bf 8f6f 	isb	sy
 8011098:	4b15      	ldr	r3, [pc, #84]	; (80110f0 <pxCurrentTCBConst>)
 801109a:	681a      	ldr	r2, [r3, #0]
 801109c:	f01e 0f10 	tst.w	lr, #16
 80110a0:	bf08      	it	eq
 80110a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80110a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110aa:	6010      	str	r0, [r2, #0]
 80110ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80110b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80110b4:	f380 8811 	msr	BASEPRI, r0
 80110b8:	f3bf 8f4f 	dsb	sy
 80110bc:	f3bf 8f6f 	isb	sy
 80110c0:	f7ff fa1e 	bl	8010500 <vTaskSwitchContext>
 80110c4:	f04f 0000 	mov.w	r0, #0
 80110c8:	f380 8811 	msr	BASEPRI, r0
 80110cc:	bc09      	pop	{r0, r3}
 80110ce:	6819      	ldr	r1, [r3, #0]
 80110d0:	6808      	ldr	r0, [r1, #0]
 80110d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110d6:	f01e 0f10 	tst.w	lr, #16
 80110da:	bf08      	it	eq
 80110dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80110e0:	f380 8809 	msr	PSP, r0
 80110e4:	f3bf 8f6f 	isb	sy
 80110e8:	4770      	bx	lr
 80110ea:	bf00      	nop
 80110ec:	f3af 8000 	nop.w

080110f0 <pxCurrentTCBConst>:
 80110f0:	20000964 	.word	0x20000964
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80110f4:	bf00      	nop
 80110f6:	bf00      	nop

080110f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b082      	sub	sp, #8
 80110fc:	af00      	add	r7, sp, #0
	__asm volatile
 80110fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011102:	f383 8811 	msr	BASEPRI, r3
 8011106:	f3bf 8f6f 	isb	sy
 801110a:	f3bf 8f4f 	dsb	sy
 801110e:	607b      	str	r3, [r7, #4]
}
 8011110:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011112:	f7ff f93d 	bl	8010390 <xTaskIncrementTick>
 8011116:	4603      	mov	r3, r0
 8011118:	2b00      	cmp	r3, #0
 801111a:	d003      	beq.n	8011124 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801111c:	4b06      	ldr	r3, [pc, #24]	; (8011138 <SysTick_Handler+0x40>)
 801111e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011122:	601a      	str	r2, [r3, #0]
 8011124:	2300      	movs	r3, #0
 8011126:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	f383 8811 	msr	BASEPRI, r3
}
 801112e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011130:	bf00      	nop
 8011132:	3708      	adds	r7, #8
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}
 8011138:	e000ed04 	.word	0xe000ed04

0801113c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801113c:	b480      	push	{r7}
 801113e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011140:	4b0b      	ldr	r3, [pc, #44]	; (8011170 <vPortSetupTimerInterrupt+0x34>)
 8011142:	2200      	movs	r2, #0
 8011144:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011146:	4b0b      	ldr	r3, [pc, #44]	; (8011174 <vPortSetupTimerInterrupt+0x38>)
 8011148:	2200      	movs	r2, #0
 801114a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801114c:	4b0a      	ldr	r3, [pc, #40]	; (8011178 <vPortSetupTimerInterrupt+0x3c>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	4a0a      	ldr	r2, [pc, #40]	; (801117c <vPortSetupTimerInterrupt+0x40>)
 8011152:	fba2 2303 	umull	r2, r3, r2, r3
 8011156:	099b      	lsrs	r3, r3, #6
 8011158:	4a09      	ldr	r2, [pc, #36]	; (8011180 <vPortSetupTimerInterrupt+0x44>)
 801115a:	3b01      	subs	r3, #1
 801115c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801115e:	4b04      	ldr	r3, [pc, #16]	; (8011170 <vPortSetupTimerInterrupt+0x34>)
 8011160:	2207      	movs	r2, #7
 8011162:	601a      	str	r2, [r3, #0]
}
 8011164:	bf00      	nop
 8011166:	46bd      	mov	sp, r7
 8011168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116c:	4770      	bx	lr
 801116e:	bf00      	nop
 8011170:	e000e010 	.word	0xe000e010
 8011174:	e000e018 	.word	0xe000e018
 8011178:	20000000 	.word	0x20000000
 801117c:	10624dd3 	.word	0x10624dd3
 8011180:	e000e014 	.word	0xe000e014

08011184 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011184:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011194 <vPortEnableVFP+0x10>
 8011188:	6801      	ldr	r1, [r0, #0]
 801118a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801118e:	6001      	str	r1, [r0, #0]
 8011190:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011192:	bf00      	nop
 8011194:	e000ed88 	.word	0xe000ed88

08011198 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b08a      	sub	sp, #40	; 0x28
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80111a0:	2300      	movs	r3, #0
 80111a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80111a4:	f7ff f84a 	bl	801023c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80111a8:	4b5b      	ldr	r3, [pc, #364]	; (8011318 <pvPortMalloc+0x180>)
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d101      	bne.n	80111b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80111b0:	f000 f920 	bl	80113f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80111b4:	4b59      	ldr	r3, [pc, #356]	; (801131c <pvPortMalloc+0x184>)
 80111b6:	681a      	ldr	r2, [r3, #0]
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	4013      	ands	r3, r2
 80111bc:	2b00      	cmp	r3, #0
 80111be:	f040 8093 	bne.w	80112e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d01d      	beq.n	8011204 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80111c8:	2208      	movs	r2, #8
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	4413      	add	r3, r2
 80111ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f003 0307 	and.w	r3, r3, #7
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d014      	beq.n	8011204 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	f023 0307 	bic.w	r3, r3, #7
 80111e0:	3308      	adds	r3, #8
 80111e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	f003 0307 	and.w	r3, r3, #7
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d00a      	beq.n	8011204 <pvPortMalloc+0x6c>
	__asm volatile
 80111ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111f2:	f383 8811 	msr	BASEPRI, r3
 80111f6:	f3bf 8f6f 	isb	sy
 80111fa:	f3bf 8f4f 	dsb	sy
 80111fe:	617b      	str	r3, [r7, #20]
}
 8011200:	bf00      	nop
 8011202:	e7fe      	b.n	8011202 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d06e      	beq.n	80112e8 <pvPortMalloc+0x150>
 801120a:	4b45      	ldr	r3, [pc, #276]	; (8011320 <pvPortMalloc+0x188>)
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	687a      	ldr	r2, [r7, #4]
 8011210:	429a      	cmp	r2, r3
 8011212:	d869      	bhi.n	80112e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011214:	4b43      	ldr	r3, [pc, #268]	; (8011324 <pvPortMalloc+0x18c>)
 8011216:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011218:	4b42      	ldr	r3, [pc, #264]	; (8011324 <pvPortMalloc+0x18c>)
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801121e:	e004      	b.n	801122a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011222:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801122c:	685b      	ldr	r3, [r3, #4]
 801122e:	687a      	ldr	r2, [r7, #4]
 8011230:	429a      	cmp	r2, r3
 8011232:	d903      	bls.n	801123c <pvPortMalloc+0xa4>
 8011234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d1f1      	bne.n	8011220 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801123c:	4b36      	ldr	r3, [pc, #216]	; (8011318 <pvPortMalloc+0x180>)
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011242:	429a      	cmp	r2, r3
 8011244:	d050      	beq.n	80112e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011246:	6a3b      	ldr	r3, [r7, #32]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	2208      	movs	r2, #8
 801124c:	4413      	add	r3, r2
 801124e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011252:	681a      	ldr	r2, [r3, #0]
 8011254:	6a3b      	ldr	r3, [r7, #32]
 8011256:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801125a:	685a      	ldr	r2, [r3, #4]
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	1ad2      	subs	r2, r2, r3
 8011260:	2308      	movs	r3, #8
 8011262:	005b      	lsls	r3, r3, #1
 8011264:	429a      	cmp	r2, r3
 8011266:	d91f      	bls.n	80112a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	4413      	add	r3, r2
 801126e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011270:	69bb      	ldr	r3, [r7, #24]
 8011272:	f003 0307 	and.w	r3, r3, #7
 8011276:	2b00      	cmp	r3, #0
 8011278:	d00a      	beq.n	8011290 <pvPortMalloc+0xf8>
	__asm volatile
 801127a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801127e:	f383 8811 	msr	BASEPRI, r3
 8011282:	f3bf 8f6f 	isb	sy
 8011286:	f3bf 8f4f 	dsb	sy
 801128a:	613b      	str	r3, [r7, #16]
}
 801128c:	bf00      	nop
 801128e:	e7fe      	b.n	801128e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011292:	685a      	ldr	r2, [r3, #4]
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	1ad2      	subs	r2, r2, r3
 8011298:	69bb      	ldr	r3, [r7, #24]
 801129a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801129e:	687a      	ldr	r2, [r7, #4]
 80112a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80112a2:	69b8      	ldr	r0, [r7, #24]
 80112a4:	f000 f908 	bl	80114b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80112a8:	4b1d      	ldr	r3, [pc, #116]	; (8011320 <pvPortMalloc+0x188>)
 80112aa:	681a      	ldr	r2, [r3, #0]
 80112ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ae:	685b      	ldr	r3, [r3, #4]
 80112b0:	1ad3      	subs	r3, r2, r3
 80112b2:	4a1b      	ldr	r2, [pc, #108]	; (8011320 <pvPortMalloc+0x188>)
 80112b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80112b6:	4b1a      	ldr	r3, [pc, #104]	; (8011320 <pvPortMalloc+0x188>)
 80112b8:	681a      	ldr	r2, [r3, #0]
 80112ba:	4b1b      	ldr	r3, [pc, #108]	; (8011328 <pvPortMalloc+0x190>)
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	429a      	cmp	r2, r3
 80112c0:	d203      	bcs.n	80112ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80112c2:	4b17      	ldr	r3, [pc, #92]	; (8011320 <pvPortMalloc+0x188>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	4a18      	ldr	r2, [pc, #96]	; (8011328 <pvPortMalloc+0x190>)
 80112c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80112ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112cc:	685a      	ldr	r2, [r3, #4]
 80112ce:	4b13      	ldr	r3, [pc, #76]	; (801131c <pvPortMalloc+0x184>)
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	431a      	orrs	r2, r3
 80112d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80112d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112da:	2200      	movs	r2, #0
 80112dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80112de:	4b13      	ldr	r3, [pc, #76]	; (801132c <pvPortMalloc+0x194>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	3301      	adds	r3, #1
 80112e4:	4a11      	ldr	r2, [pc, #68]	; (801132c <pvPortMalloc+0x194>)
 80112e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80112e8:	f7fe ffb6 	bl	8010258 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80112ec:	69fb      	ldr	r3, [r7, #28]
 80112ee:	f003 0307 	and.w	r3, r3, #7
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d00a      	beq.n	801130c <pvPortMalloc+0x174>
	__asm volatile
 80112f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112fa:	f383 8811 	msr	BASEPRI, r3
 80112fe:	f3bf 8f6f 	isb	sy
 8011302:	f3bf 8f4f 	dsb	sy
 8011306:	60fb      	str	r3, [r7, #12]
}
 8011308:	bf00      	nop
 801130a:	e7fe      	b.n	801130a <pvPortMalloc+0x172>
	return pvReturn;
 801130c:	69fb      	ldr	r3, [r7, #28]
}
 801130e:	4618      	mov	r0, r3
 8011310:	3728      	adds	r7, #40	; 0x28
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
 8011316:	bf00      	nop
 8011318:	20001aa0 	.word	0x20001aa0
 801131c:	20001ab4 	.word	0x20001ab4
 8011320:	20001aa4 	.word	0x20001aa4
 8011324:	20001a98 	.word	0x20001a98
 8011328:	20001aa8 	.word	0x20001aa8
 801132c:	20001aac 	.word	0x20001aac

08011330 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b086      	sub	sp, #24
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d04d      	beq.n	80113de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011342:	2308      	movs	r3, #8
 8011344:	425b      	negs	r3, r3
 8011346:	697a      	ldr	r2, [r7, #20]
 8011348:	4413      	add	r3, r2
 801134a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801134c:	697b      	ldr	r3, [r7, #20]
 801134e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011350:	693b      	ldr	r3, [r7, #16]
 8011352:	685a      	ldr	r2, [r3, #4]
 8011354:	4b24      	ldr	r3, [pc, #144]	; (80113e8 <vPortFree+0xb8>)
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	4013      	ands	r3, r2
 801135a:	2b00      	cmp	r3, #0
 801135c:	d10a      	bne.n	8011374 <vPortFree+0x44>
	__asm volatile
 801135e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011362:	f383 8811 	msr	BASEPRI, r3
 8011366:	f3bf 8f6f 	isb	sy
 801136a:	f3bf 8f4f 	dsb	sy
 801136e:	60fb      	str	r3, [r7, #12]
}
 8011370:	bf00      	nop
 8011372:	e7fe      	b.n	8011372 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011374:	693b      	ldr	r3, [r7, #16]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d00a      	beq.n	8011392 <vPortFree+0x62>
	__asm volatile
 801137c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011380:	f383 8811 	msr	BASEPRI, r3
 8011384:	f3bf 8f6f 	isb	sy
 8011388:	f3bf 8f4f 	dsb	sy
 801138c:	60bb      	str	r3, [r7, #8]
}
 801138e:	bf00      	nop
 8011390:	e7fe      	b.n	8011390 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011392:	693b      	ldr	r3, [r7, #16]
 8011394:	685a      	ldr	r2, [r3, #4]
 8011396:	4b14      	ldr	r3, [pc, #80]	; (80113e8 <vPortFree+0xb8>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	4013      	ands	r3, r2
 801139c:	2b00      	cmp	r3, #0
 801139e:	d01e      	beq.n	80113de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80113a0:	693b      	ldr	r3, [r7, #16]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d11a      	bne.n	80113de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80113a8:	693b      	ldr	r3, [r7, #16]
 80113aa:	685a      	ldr	r2, [r3, #4]
 80113ac:	4b0e      	ldr	r3, [pc, #56]	; (80113e8 <vPortFree+0xb8>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	43db      	mvns	r3, r3
 80113b2:	401a      	ands	r2, r3
 80113b4:	693b      	ldr	r3, [r7, #16]
 80113b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80113b8:	f7fe ff40 	bl	801023c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80113bc:	693b      	ldr	r3, [r7, #16]
 80113be:	685a      	ldr	r2, [r3, #4]
 80113c0:	4b0a      	ldr	r3, [pc, #40]	; (80113ec <vPortFree+0xbc>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	4413      	add	r3, r2
 80113c6:	4a09      	ldr	r2, [pc, #36]	; (80113ec <vPortFree+0xbc>)
 80113c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80113ca:	6938      	ldr	r0, [r7, #16]
 80113cc:	f000 f874 	bl	80114b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80113d0:	4b07      	ldr	r3, [pc, #28]	; (80113f0 <vPortFree+0xc0>)
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	3301      	adds	r3, #1
 80113d6:	4a06      	ldr	r2, [pc, #24]	; (80113f0 <vPortFree+0xc0>)
 80113d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80113da:	f7fe ff3d 	bl	8010258 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80113de:	bf00      	nop
 80113e0:	3718      	adds	r7, #24
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd80      	pop	{r7, pc}
 80113e6:	bf00      	nop
 80113e8:	20001ab4 	.word	0x20001ab4
 80113ec:	20001aa4 	.word	0x20001aa4
 80113f0:	20001ab0 	.word	0x20001ab0

080113f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80113f4:	b480      	push	{r7}
 80113f6:	b085      	sub	sp, #20
 80113f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80113fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80113fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011400:	4b27      	ldr	r3, [pc, #156]	; (80114a0 <prvHeapInit+0xac>)
 8011402:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	f003 0307 	and.w	r3, r3, #7
 801140a:	2b00      	cmp	r3, #0
 801140c:	d00c      	beq.n	8011428 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	3307      	adds	r3, #7
 8011412:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	f023 0307 	bic.w	r3, r3, #7
 801141a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801141c:	68ba      	ldr	r2, [r7, #8]
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	1ad3      	subs	r3, r2, r3
 8011422:	4a1f      	ldr	r2, [pc, #124]	; (80114a0 <prvHeapInit+0xac>)
 8011424:	4413      	add	r3, r2
 8011426:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801142c:	4a1d      	ldr	r2, [pc, #116]	; (80114a4 <prvHeapInit+0xb0>)
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011432:	4b1c      	ldr	r3, [pc, #112]	; (80114a4 <prvHeapInit+0xb0>)
 8011434:	2200      	movs	r2, #0
 8011436:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	68ba      	ldr	r2, [r7, #8]
 801143c:	4413      	add	r3, r2
 801143e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011440:	2208      	movs	r2, #8
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	1a9b      	subs	r3, r3, r2
 8011446:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	f023 0307 	bic.w	r3, r3, #7
 801144e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	4a15      	ldr	r2, [pc, #84]	; (80114a8 <prvHeapInit+0xb4>)
 8011454:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011456:	4b14      	ldr	r3, [pc, #80]	; (80114a8 <prvHeapInit+0xb4>)
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	2200      	movs	r2, #0
 801145c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801145e:	4b12      	ldr	r3, [pc, #72]	; (80114a8 <prvHeapInit+0xb4>)
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	2200      	movs	r2, #0
 8011464:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	68fa      	ldr	r2, [r7, #12]
 801146e:	1ad2      	subs	r2, r2, r3
 8011470:	683b      	ldr	r3, [r7, #0]
 8011472:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011474:	4b0c      	ldr	r3, [pc, #48]	; (80114a8 <prvHeapInit+0xb4>)
 8011476:	681a      	ldr	r2, [r3, #0]
 8011478:	683b      	ldr	r3, [r7, #0]
 801147a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	685b      	ldr	r3, [r3, #4]
 8011480:	4a0a      	ldr	r2, [pc, #40]	; (80114ac <prvHeapInit+0xb8>)
 8011482:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	685b      	ldr	r3, [r3, #4]
 8011488:	4a09      	ldr	r2, [pc, #36]	; (80114b0 <prvHeapInit+0xbc>)
 801148a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801148c:	4b09      	ldr	r3, [pc, #36]	; (80114b4 <prvHeapInit+0xc0>)
 801148e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011492:	601a      	str	r2, [r3, #0]
}
 8011494:	bf00      	nop
 8011496:	3714      	adds	r7, #20
 8011498:	46bd      	mov	sp, r7
 801149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149e:	4770      	bx	lr
 80114a0:	20000a98 	.word	0x20000a98
 80114a4:	20001a98 	.word	0x20001a98
 80114a8:	20001aa0 	.word	0x20001aa0
 80114ac:	20001aa8 	.word	0x20001aa8
 80114b0:	20001aa4 	.word	0x20001aa4
 80114b4:	20001ab4 	.word	0x20001ab4

080114b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80114b8:	b480      	push	{r7}
 80114ba:	b085      	sub	sp, #20
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80114c0:	4b28      	ldr	r3, [pc, #160]	; (8011564 <prvInsertBlockIntoFreeList+0xac>)
 80114c2:	60fb      	str	r3, [r7, #12]
 80114c4:	e002      	b.n	80114cc <prvInsertBlockIntoFreeList+0x14>
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	60fb      	str	r3, [r7, #12]
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	687a      	ldr	r2, [r7, #4]
 80114d2:	429a      	cmp	r2, r3
 80114d4:	d8f7      	bhi.n	80114c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	685b      	ldr	r3, [r3, #4]
 80114de:	68ba      	ldr	r2, [r7, #8]
 80114e0:	4413      	add	r3, r2
 80114e2:	687a      	ldr	r2, [r7, #4]
 80114e4:	429a      	cmp	r2, r3
 80114e6:	d108      	bne.n	80114fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	685a      	ldr	r2, [r3, #4]
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	685b      	ldr	r3, [r3, #4]
 80114f0:	441a      	add	r2, r3
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	685b      	ldr	r3, [r3, #4]
 8011502:	68ba      	ldr	r2, [r7, #8]
 8011504:	441a      	add	r2, r3
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	429a      	cmp	r2, r3
 801150c:	d118      	bne.n	8011540 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	681a      	ldr	r2, [r3, #0]
 8011512:	4b15      	ldr	r3, [pc, #84]	; (8011568 <prvInsertBlockIntoFreeList+0xb0>)
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	429a      	cmp	r2, r3
 8011518:	d00d      	beq.n	8011536 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	685a      	ldr	r2, [r3, #4]
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	685b      	ldr	r3, [r3, #4]
 8011524:	441a      	add	r2, r3
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	681a      	ldr	r2, [r3, #0]
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	601a      	str	r2, [r3, #0]
 8011534:	e008      	b.n	8011548 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011536:	4b0c      	ldr	r3, [pc, #48]	; (8011568 <prvInsertBlockIntoFreeList+0xb0>)
 8011538:	681a      	ldr	r2, [r3, #0]
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	601a      	str	r2, [r3, #0]
 801153e:	e003      	b.n	8011548 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	681a      	ldr	r2, [r3, #0]
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011548:	68fa      	ldr	r2, [r7, #12]
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	429a      	cmp	r2, r3
 801154e:	d002      	beq.n	8011556 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	687a      	ldr	r2, [r7, #4]
 8011554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011556:	bf00      	nop
 8011558:	3714      	adds	r7, #20
 801155a:	46bd      	mov	sp, r7
 801155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011560:	4770      	bx	lr
 8011562:	bf00      	nop
 8011564:	20001a98 	.word	0x20001a98
 8011568:	20001aa0 	.word	0x20001aa0

0801156c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8011570:	2200      	movs	r2, #0
 8011572:	4912      	ldr	r1, [pc, #72]	; (80115bc <MX_USB_Device_Init+0x50>)
 8011574:	4812      	ldr	r0, [pc, #72]	; (80115c0 <MX_USB_Device_Init+0x54>)
 8011576:	f7fc fd83 	bl	800e080 <USBD_Init>
 801157a:	4603      	mov	r3, r0
 801157c:	2b00      	cmp	r3, #0
 801157e:	d001      	beq.n	8011584 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8011580:	f7f0 fbc4 	bl	8001d0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8011584:	490f      	ldr	r1, [pc, #60]	; (80115c4 <MX_USB_Device_Init+0x58>)
 8011586:	480e      	ldr	r0, [pc, #56]	; (80115c0 <MX_USB_Device_Init+0x54>)
 8011588:	f7fc fdaa 	bl	800e0e0 <USBD_RegisterClass>
 801158c:	4603      	mov	r3, r0
 801158e:	2b00      	cmp	r3, #0
 8011590:	d001      	beq.n	8011596 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8011592:	f7f0 fbbb 	bl	8001d0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8011596:	490c      	ldr	r1, [pc, #48]	; (80115c8 <MX_USB_Device_Init+0x5c>)
 8011598:	4809      	ldr	r0, [pc, #36]	; (80115c0 <MX_USB_Device_Init+0x54>)
 801159a:	f7fc fcfb 	bl	800df94 <USBD_CDC_RegisterInterface>
 801159e:	4603      	mov	r3, r0
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d001      	beq.n	80115a8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80115a4:	f7f0 fbb2 	bl	8001d0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80115a8:	4805      	ldr	r0, [pc, #20]	; (80115c0 <MX_USB_Device_Init+0x54>)
 80115aa:	f7fc fdc0 	bl	800e12e <USBD_Start>
 80115ae:	4603      	mov	r3, r0
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d001      	beq.n	80115b8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80115b4:	f7f0 fbaa 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80115b8:	bf00      	nop
 80115ba:	bd80      	pop	{r7, pc}
 80115bc:	20000134 	.word	0x20000134
 80115c0:	20001ab8 	.word	0x20001ab8
 80115c4:	20000018 	.word	0x20000018
 80115c8:	20000120 	.word	0x20000120

080115cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80115d0:	2200      	movs	r2, #0
 80115d2:	4905      	ldr	r1, [pc, #20]	; (80115e8 <CDC_Init_FS+0x1c>)
 80115d4:	4805      	ldr	r0, [pc, #20]	; (80115ec <CDC_Init_FS+0x20>)
 80115d6:	f7fc fcf2 	bl	800dfbe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80115da:	4905      	ldr	r1, [pc, #20]	; (80115f0 <CDC_Init_FS+0x24>)
 80115dc:	4803      	ldr	r0, [pc, #12]	; (80115ec <CDC_Init_FS+0x20>)
 80115de:	f7fc fd0c 	bl	800dffa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80115e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80115e4:	4618      	mov	r0, r3
 80115e6:	bd80      	pop	{r7, pc}
 80115e8:	20002588 	.word	0x20002588
 80115ec:	20001ab8 	.word	0x20001ab8
 80115f0:	20001d88 	.word	0x20001d88

080115f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80115f4:	b480      	push	{r7}
 80115f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80115f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	46bd      	mov	sp, r7
 80115fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011602:	4770      	bx	lr

08011604 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011604:	b480      	push	{r7}
 8011606:	b083      	sub	sp, #12
 8011608:	af00      	add	r7, sp, #0
 801160a:	4603      	mov	r3, r0
 801160c:	6039      	str	r1, [r7, #0]
 801160e:	71fb      	strb	r3, [r7, #7]
 8011610:	4613      	mov	r3, r2
 8011612:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011614:	79fb      	ldrb	r3, [r7, #7]
 8011616:	2b23      	cmp	r3, #35	; 0x23
 8011618:	d84a      	bhi.n	80116b0 <CDC_Control_FS+0xac>
 801161a:	a201      	add	r2, pc, #4	; (adr r2, 8011620 <CDC_Control_FS+0x1c>)
 801161c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011620:	080116b1 	.word	0x080116b1
 8011624:	080116b1 	.word	0x080116b1
 8011628:	080116b1 	.word	0x080116b1
 801162c:	080116b1 	.word	0x080116b1
 8011630:	080116b1 	.word	0x080116b1
 8011634:	080116b1 	.word	0x080116b1
 8011638:	080116b1 	.word	0x080116b1
 801163c:	080116b1 	.word	0x080116b1
 8011640:	080116b1 	.word	0x080116b1
 8011644:	080116b1 	.word	0x080116b1
 8011648:	080116b1 	.word	0x080116b1
 801164c:	080116b1 	.word	0x080116b1
 8011650:	080116b1 	.word	0x080116b1
 8011654:	080116b1 	.word	0x080116b1
 8011658:	080116b1 	.word	0x080116b1
 801165c:	080116b1 	.word	0x080116b1
 8011660:	080116b1 	.word	0x080116b1
 8011664:	080116b1 	.word	0x080116b1
 8011668:	080116b1 	.word	0x080116b1
 801166c:	080116b1 	.word	0x080116b1
 8011670:	080116b1 	.word	0x080116b1
 8011674:	080116b1 	.word	0x080116b1
 8011678:	080116b1 	.word	0x080116b1
 801167c:	080116b1 	.word	0x080116b1
 8011680:	080116b1 	.word	0x080116b1
 8011684:	080116b1 	.word	0x080116b1
 8011688:	080116b1 	.word	0x080116b1
 801168c:	080116b1 	.word	0x080116b1
 8011690:	080116b1 	.word	0x080116b1
 8011694:	080116b1 	.word	0x080116b1
 8011698:	080116b1 	.word	0x080116b1
 801169c:	080116b1 	.word	0x080116b1
 80116a0:	080116b1 	.word	0x080116b1
 80116a4:	080116b1 	.word	0x080116b1
 80116a8:	080116b1 	.word	0x080116b1
 80116ac:	080116b1 	.word	0x080116b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80116b0:	bf00      	nop
  }

  return (USBD_OK);
 80116b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80116b4:	4618      	mov	r0, r3
 80116b6:	370c      	adds	r7, #12
 80116b8:	46bd      	mov	sp, r7
 80116ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116be:	4770      	bx	lr

080116c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b082      	sub	sp, #8
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
 80116c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80116ca:	6879      	ldr	r1, [r7, #4]
 80116cc:	4805      	ldr	r0, [pc, #20]	; (80116e4 <CDC_Receive_FS+0x24>)
 80116ce:	f7fc fc94 	bl	800dffa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80116d2:	4804      	ldr	r0, [pc, #16]	; (80116e4 <CDC_Receive_FS+0x24>)
 80116d4:	f7fc fcaa 	bl	800e02c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80116d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80116da:	4618      	mov	r0, r3
 80116dc:	3708      	adds	r7, #8
 80116de:	46bd      	mov	sp, r7
 80116e0:	bd80      	pop	{r7, pc}
 80116e2:	bf00      	nop
 80116e4:	20001ab8 	.word	0x20001ab8

080116e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80116e8:	b480      	push	{r7}
 80116ea:	b087      	sub	sp, #28
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	60f8      	str	r0, [r7, #12]
 80116f0:	60b9      	str	r1, [r7, #8]
 80116f2:	4613      	mov	r3, r2
 80116f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80116f6:	2300      	movs	r3, #0
 80116f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80116fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80116fe:	4618      	mov	r0, r3
 8011700:	371c      	adds	r7, #28
 8011702:	46bd      	mov	sp, r7
 8011704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011708:	4770      	bx	lr
	...

0801170c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801170c:	b480      	push	{r7}
 801170e:	b083      	sub	sp, #12
 8011710:	af00      	add	r7, sp, #0
 8011712:	4603      	mov	r3, r0
 8011714:	6039      	str	r1, [r7, #0]
 8011716:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8011718:	683b      	ldr	r3, [r7, #0]
 801171a:	2212      	movs	r2, #18
 801171c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801171e:	4b03      	ldr	r3, [pc, #12]	; (801172c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8011720:	4618      	mov	r0, r3
 8011722:	370c      	adds	r7, #12
 8011724:	46bd      	mov	sp, r7
 8011726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172a:	4770      	bx	lr
 801172c:	20000154 	.word	0x20000154

08011730 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011730:	b480      	push	{r7}
 8011732:	b083      	sub	sp, #12
 8011734:	af00      	add	r7, sp, #0
 8011736:	4603      	mov	r3, r0
 8011738:	6039      	str	r1, [r7, #0]
 801173a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	2204      	movs	r2, #4
 8011740:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011742:	4b03      	ldr	r3, [pc, #12]	; (8011750 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8011744:	4618      	mov	r0, r3
 8011746:	370c      	adds	r7, #12
 8011748:	46bd      	mov	sp, r7
 801174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174e:	4770      	bx	lr
 8011750:	20000168 	.word	0x20000168

08011754 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b082      	sub	sp, #8
 8011758:	af00      	add	r7, sp, #0
 801175a:	4603      	mov	r3, r0
 801175c:	6039      	str	r1, [r7, #0]
 801175e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011760:	79fb      	ldrb	r3, [r7, #7]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d105      	bne.n	8011772 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011766:	683a      	ldr	r2, [r7, #0]
 8011768:	4907      	ldr	r1, [pc, #28]	; (8011788 <USBD_CDC_ProductStrDescriptor+0x34>)
 801176a:	4808      	ldr	r0, [pc, #32]	; (801178c <USBD_CDC_ProductStrDescriptor+0x38>)
 801176c:	f7fd fcc7 	bl	800f0fe <USBD_GetString>
 8011770:	e004      	b.n	801177c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011772:	683a      	ldr	r2, [r7, #0]
 8011774:	4904      	ldr	r1, [pc, #16]	; (8011788 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011776:	4805      	ldr	r0, [pc, #20]	; (801178c <USBD_CDC_ProductStrDescriptor+0x38>)
 8011778:	f7fd fcc1 	bl	800f0fe <USBD_GetString>
  }
  return USBD_StrDesc;
 801177c:	4b02      	ldr	r3, [pc, #8]	; (8011788 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801177e:	4618      	mov	r0, r3
 8011780:	3708      	adds	r7, #8
 8011782:	46bd      	mov	sp, r7
 8011784:	bd80      	pop	{r7, pc}
 8011786:	bf00      	nop
 8011788:	20002d88 	.word	0x20002d88
 801178c:	08015330 	.word	0x08015330

08011790 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b082      	sub	sp, #8
 8011794:	af00      	add	r7, sp, #0
 8011796:	4603      	mov	r3, r0
 8011798:	6039      	str	r1, [r7, #0]
 801179a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801179c:	683a      	ldr	r2, [r7, #0]
 801179e:	4904      	ldr	r1, [pc, #16]	; (80117b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80117a0:	4804      	ldr	r0, [pc, #16]	; (80117b4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80117a2:	f7fd fcac 	bl	800f0fe <USBD_GetString>
  return USBD_StrDesc;
 80117a6:	4b02      	ldr	r3, [pc, #8]	; (80117b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80117a8:	4618      	mov	r0, r3
 80117aa:	3708      	adds	r7, #8
 80117ac:	46bd      	mov	sp, r7
 80117ae:	bd80      	pop	{r7, pc}
 80117b0:	20002d88 	.word	0x20002d88
 80117b4:	08015348 	.word	0x08015348

080117b8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b082      	sub	sp, #8
 80117bc:	af00      	add	r7, sp, #0
 80117be:	4603      	mov	r3, r0
 80117c0:	6039      	str	r1, [r7, #0]
 80117c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80117c4:	683b      	ldr	r3, [r7, #0]
 80117c6:	221a      	movs	r2, #26
 80117c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80117ca:	f000 f843 	bl	8011854 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80117ce:	4b02      	ldr	r3, [pc, #8]	; (80117d8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80117d0:	4618      	mov	r0, r3
 80117d2:	3708      	adds	r7, #8
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}
 80117d8:	2000016c 	.word	0x2000016c

080117dc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b082      	sub	sp, #8
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	4603      	mov	r3, r0
 80117e4:	6039      	str	r1, [r7, #0]
 80117e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80117e8:	79fb      	ldrb	r3, [r7, #7]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d105      	bne.n	80117fa <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80117ee:	683a      	ldr	r2, [r7, #0]
 80117f0:	4907      	ldr	r1, [pc, #28]	; (8011810 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80117f2:	4808      	ldr	r0, [pc, #32]	; (8011814 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80117f4:	f7fd fc83 	bl	800f0fe <USBD_GetString>
 80117f8:	e004      	b.n	8011804 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80117fa:	683a      	ldr	r2, [r7, #0]
 80117fc:	4904      	ldr	r1, [pc, #16]	; (8011810 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80117fe:	4805      	ldr	r0, [pc, #20]	; (8011814 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011800:	f7fd fc7d 	bl	800f0fe <USBD_GetString>
  }
  return USBD_StrDesc;
 8011804:	4b02      	ldr	r3, [pc, #8]	; (8011810 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8011806:	4618      	mov	r0, r3
 8011808:	3708      	adds	r7, #8
 801180a:	46bd      	mov	sp, r7
 801180c:	bd80      	pop	{r7, pc}
 801180e:	bf00      	nop
 8011810:	20002d88 	.word	0x20002d88
 8011814:	0801535c 	.word	0x0801535c

08011818 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b082      	sub	sp, #8
 801181c:	af00      	add	r7, sp, #0
 801181e:	4603      	mov	r3, r0
 8011820:	6039      	str	r1, [r7, #0]
 8011822:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011824:	79fb      	ldrb	r3, [r7, #7]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d105      	bne.n	8011836 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801182a:	683a      	ldr	r2, [r7, #0]
 801182c:	4907      	ldr	r1, [pc, #28]	; (801184c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801182e:	4808      	ldr	r0, [pc, #32]	; (8011850 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011830:	f7fd fc65 	bl	800f0fe <USBD_GetString>
 8011834:	e004      	b.n	8011840 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011836:	683a      	ldr	r2, [r7, #0]
 8011838:	4904      	ldr	r1, [pc, #16]	; (801184c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801183a:	4805      	ldr	r0, [pc, #20]	; (8011850 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801183c:	f7fd fc5f 	bl	800f0fe <USBD_GetString>
  }
  return USBD_StrDesc;
 8011840:	4b02      	ldr	r3, [pc, #8]	; (801184c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8011842:	4618      	mov	r0, r3
 8011844:	3708      	adds	r7, #8
 8011846:	46bd      	mov	sp, r7
 8011848:	bd80      	pop	{r7, pc}
 801184a:	bf00      	nop
 801184c:	20002d88 	.word	0x20002d88
 8011850:	08015368 	.word	0x08015368

08011854 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b084      	sub	sp, #16
 8011858:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801185a:	4b0f      	ldr	r3, [pc, #60]	; (8011898 <Get_SerialNum+0x44>)
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011860:	4b0e      	ldr	r3, [pc, #56]	; (801189c <Get_SerialNum+0x48>)
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011866:	4b0e      	ldr	r3, [pc, #56]	; (80118a0 <Get_SerialNum+0x4c>)
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801186c:	68fa      	ldr	r2, [r7, #12]
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	4413      	add	r3, r2
 8011872:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d009      	beq.n	801188e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801187a:	2208      	movs	r2, #8
 801187c:	4909      	ldr	r1, [pc, #36]	; (80118a4 <Get_SerialNum+0x50>)
 801187e:	68f8      	ldr	r0, [r7, #12]
 8011880:	f000 f814 	bl	80118ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011884:	2204      	movs	r2, #4
 8011886:	4908      	ldr	r1, [pc, #32]	; (80118a8 <Get_SerialNum+0x54>)
 8011888:	68b8      	ldr	r0, [r7, #8]
 801188a:	f000 f80f 	bl	80118ac <IntToUnicode>
  }
}
 801188e:	bf00      	nop
 8011890:	3710      	adds	r7, #16
 8011892:	46bd      	mov	sp, r7
 8011894:	bd80      	pop	{r7, pc}
 8011896:	bf00      	nop
 8011898:	1fff7590 	.word	0x1fff7590
 801189c:	1fff7594 	.word	0x1fff7594
 80118a0:	1fff7598 	.word	0x1fff7598
 80118a4:	2000016e 	.word	0x2000016e
 80118a8:	2000017e 	.word	0x2000017e

080118ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80118ac:	b480      	push	{r7}
 80118ae:	b087      	sub	sp, #28
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	60f8      	str	r0, [r7, #12]
 80118b4:	60b9      	str	r1, [r7, #8]
 80118b6:	4613      	mov	r3, r2
 80118b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80118ba:	2300      	movs	r3, #0
 80118bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80118be:	2300      	movs	r3, #0
 80118c0:	75fb      	strb	r3, [r7, #23]
 80118c2:	e027      	b.n	8011914 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	0f1b      	lsrs	r3, r3, #28
 80118c8:	2b09      	cmp	r3, #9
 80118ca:	d80b      	bhi.n	80118e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	0f1b      	lsrs	r3, r3, #28
 80118d0:	b2da      	uxtb	r2, r3
 80118d2:	7dfb      	ldrb	r3, [r7, #23]
 80118d4:	005b      	lsls	r3, r3, #1
 80118d6:	4619      	mov	r1, r3
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	440b      	add	r3, r1
 80118dc:	3230      	adds	r2, #48	; 0x30
 80118de:	b2d2      	uxtb	r2, r2
 80118e0:	701a      	strb	r2, [r3, #0]
 80118e2:	e00a      	b.n	80118fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	0f1b      	lsrs	r3, r3, #28
 80118e8:	b2da      	uxtb	r2, r3
 80118ea:	7dfb      	ldrb	r3, [r7, #23]
 80118ec:	005b      	lsls	r3, r3, #1
 80118ee:	4619      	mov	r1, r3
 80118f0:	68bb      	ldr	r3, [r7, #8]
 80118f2:	440b      	add	r3, r1
 80118f4:	3237      	adds	r2, #55	; 0x37
 80118f6:	b2d2      	uxtb	r2, r2
 80118f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	011b      	lsls	r3, r3, #4
 80118fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011900:	7dfb      	ldrb	r3, [r7, #23]
 8011902:	005b      	lsls	r3, r3, #1
 8011904:	3301      	adds	r3, #1
 8011906:	68ba      	ldr	r2, [r7, #8]
 8011908:	4413      	add	r3, r2
 801190a:	2200      	movs	r2, #0
 801190c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801190e:	7dfb      	ldrb	r3, [r7, #23]
 8011910:	3301      	adds	r3, #1
 8011912:	75fb      	strb	r3, [r7, #23]
 8011914:	7dfa      	ldrb	r2, [r7, #23]
 8011916:	79fb      	ldrb	r3, [r7, #7]
 8011918:	429a      	cmp	r2, r3
 801191a:	d3d3      	bcc.n	80118c4 <IntToUnicode+0x18>
  }
}
 801191c:	bf00      	nop
 801191e:	bf00      	nop
 8011920:	371c      	adds	r7, #28
 8011922:	46bd      	mov	sp, r7
 8011924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011928:	4770      	bx	lr
	...

0801192c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b098      	sub	sp, #96	; 0x60
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8011934:	f107 030c 	add.w	r3, r7, #12
 8011938:	2254      	movs	r2, #84	; 0x54
 801193a:	2100      	movs	r1, #0
 801193c:	4618      	mov	r0, r3
 801193e:	f000 fb33 	bl	8011fa8 <memset>
  if(pcdHandle->Instance==USB)
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	4a15      	ldr	r2, [pc, #84]	; (801199c <HAL_PCD_MspInit+0x70>)
 8011948:	4293      	cmp	r3, r2
 801194a:	d122      	bne.n	8011992 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801194c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011950:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8011952:	2300      	movs	r3, #0
 8011954:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8011956:	f107 030c 	add.w	r3, r7, #12
 801195a:	4618      	mov	r0, r3
 801195c:	f7f6 fc96 	bl	800828c <HAL_RCCEx_PeriphCLKConfig>
 8011960:	4603      	mov	r3, r0
 8011962:	2b00      	cmp	r3, #0
 8011964:	d001      	beq.n	801196a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8011966:	f7f0 f9d1 	bl	8001d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801196a:	4b0d      	ldr	r3, [pc, #52]	; (80119a0 <HAL_PCD_MspInit+0x74>)
 801196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801196e:	4a0c      	ldr	r2, [pc, #48]	; (80119a0 <HAL_PCD_MspInit+0x74>)
 8011970:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011974:	6593      	str	r3, [r2, #88]	; 0x58
 8011976:	4b0a      	ldr	r3, [pc, #40]	; (80119a0 <HAL_PCD_MspInit+0x74>)
 8011978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801197a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801197e:	60bb      	str	r3, [r7, #8]
 8011980:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8011982:	2200      	movs	r2, #0
 8011984:	2105      	movs	r1, #5
 8011986:	2014      	movs	r0, #20
 8011988:	f7f3 f818 	bl	80049bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801198c:	2014      	movs	r0, #20
 801198e:	f7f3 f82f 	bl	80049f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8011992:	bf00      	nop
 8011994:	3760      	adds	r7, #96	; 0x60
 8011996:	46bd      	mov	sp, r7
 8011998:	bd80      	pop	{r7, pc}
 801199a:	bf00      	nop
 801199c:	40005c00 	.word	0x40005c00
 80119a0:	40021000 	.word	0x40021000

080119a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b082      	sub	sp, #8
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80119b8:	4619      	mov	r1, r3
 80119ba:	4610      	mov	r0, r2
 80119bc:	f7fc fc02 	bl	800e1c4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80119c0:	bf00      	nop
 80119c2:	3708      	adds	r7, #8
 80119c4:	46bd      	mov	sp, r7
 80119c6:	bd80      	pop	{r7, pc}

080119c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b082      	sub	sp, #8
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
 80119d0:	460b      	mov	r3, r1
 80119d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80119da:	78fa      	ldrb	r2, [r7, #3]
 80119dc:	6879      	ldr	r1, [r7, #4]
 80119de:	4613      	mov	r3, r2
 80119e0:	009b      	lsls	r3, r3, #2
 80119e2:	4413      	add	r3, r2
 80119e4:	00db      	lsls	r3, r3, #3
 80119e6:	440b      	add	r3, r1
 80119e8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80119ec:	681a      	ldr	r2, [r3, #0]
 80119ee:	78fb      	ldrb	r3, [r7, #3]
 80119f0:	4619      	mov	r1, r3
 80119f2:	f7fc fc3c 	bl	800e26e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80119f6:	bf00      	nop
 80119f8:	3708      	adds	r7, #8
 80119fa:	46bd      	mov	sp, r7
 80119fc:	bd80      	pop	{r7, pc}

080119fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119fe:	b580      	push	{r7, lr}
 8011a00:	b082      	sub	sp, #8
 8011a02:	af00      	add	r7, sp, #0
 8011a04:	6078      	str	r0, [r7, #4]
 8011a06:	460b      	mov	r3, r1
 8011a08:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8011a10:	78fa      	ldrb	r2, [r7, #3]
 8011a12:	6879      	ldr	r1, [r7, #4]
 8011a14:	4613      	mov	r3, r2
 8011a16:	009b      	lsls	r3, r3, #2
 8011a18:	4413      	add	r3, r2
 8011a1a:	00db      	lsls	r3, r3, #3
 8011a1c:	440b      	add	r3, r1
 8011a1e:	333c      	adds	r3, #60	; 0x3c
 8011a20:	681a      	ldr	r2, [r3, #0]
 8011a22:	78fb      	ldrb	r3, [r7, #3]
 8011a24:	4619      	mov	r1, r3
 8011a26:	f7fc fc85 	bl	800e334 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8011a2a:	bf00      	nop
 8011a2c:	3708      	adds	r7, #8
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}

08011a32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a32:	b580      	push	{r7, lr}
 8011a34:	b082      	sub	sp, #8
 8011a36:	af00      	add	r7, sp, #0
 8011a38:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011a40:	4618      	mov	r0, r3
 8011a42:	f7fc fd99 	bl	800e578 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8011a46:	bf00      	nop
 8011a48:	3708      	adds	r7, #8
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}

08011a4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a4e:	b580      	push	{r7, lr}
 8011a50:	b084      	sub	sp, #16
 8011a52:	af00      	add	r7, sp, #0
 8011a54:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011a56:	2301      	movs	r3, #1
 8011a58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	689b      	ldr	r3, [r3, #8]
 8011a5e:	2b02      	cmp	r3, #2
 8011a60:	d001      	beq.n	8011a66 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8011a62:	f7f0 f953 	bl	8001d0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011a6c:	7bfa      	ldrb	r2, [r7, #15]
 8011a6e:	4611      	mov	r1, r2
 8011a70:	4618      	mov	r0, r3
 8011a72:	f7fc fd43 	bl	800e4fc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f7fc fcef 	bl	800e460 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8011a82:	bf00      	nop
 8011a84:	3710      	adds	r7, #16
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bd80      	pop	{r7, pc}
	...

08011a8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b082      	sub	sp, #8
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f7fc fd3e 	bl	800e51c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	699b      	ldr	r3, [r3, #24]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d005      	beq.n	8011ab4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011aa8:	4b04      	ldr	r3, [pc, #16]	; (8011abc <HAL_PCD_SuspendCallback+0x30>)
 8011aaa:	691b      	ldr	r3, [r3, #16]
 8011aac:	4a03      	ldr	r2, [pc, #12]	; (8011abc <HAL_PCD_SuspendCallback+0x30>)
 8011aae:	f043 0306 	orr.w	r3, r3, #6
 8011ab2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8011ab4:	bf00      	nop
 8011ab6:	3708      	adds	r7, #8
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	bd80      	pop	{r7, pc}
 8011abc:	e000ed00 	.word	0xe000ed00

08011ac0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b082      	sub	sp, #8
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	699b      	ldr	r3, [r3, #24]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d007      	beq.n	8011ae0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011ad0:	4b08      	ldr	r3, [pc, #32]	; (8011af4 <HAL_PCD_ResumeCallback+0x34>)
 8011ad2:	691b      	ldr	r3, [r3, #16]
 8011ad4:	4a07      	ldr	r2, [pc, #28]	; (8011af4 <HAL_PCD_ResumeCallback+0x34>)
 8011ad6:	f023 0306 	bic.w	r3, r3, #6
 8011ada:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8011adc:	f000 f9fa 	bl	8011ed4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	f7fc fd2e 	bl	800e548 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8011aec:	bf00      	nop
 8011aee:	3708      	adds	r7, #8
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd80      	pop	{r7, pc}
 8011af4:	e000ed00 	.word	0xe000ed00

08011af8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b082      	sub	sp, #8
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8011b00:	4a2b      	ldr	r2, [pc, #172]	; (8011bb0 <USBD_LL_Init+0xb8>)
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	4a29      	ldr	r2, [pc, #164]	; (8011bb0 <USBD_LL_Init+0xb8>)
 8011b0c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8011b10:	4b27      	ldr	r3, [pc, #156]	; (8011bb0 <USBD_LL_Init+0xb8>)
 8011b12:	4a28      	ldr	r2, [pc, #160]	; (8011bb4 <USBD_LL_Init+0xbc>)
 8011b14:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8011b16:	4b26      	ldr	r3, [pc, #152]	; (8011bb0 <USBD_LL_Init+0xb8>)
 8011b18:	2208      	movs	r2, #8
 8011b1a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011b1c:	4b24      	ldr	r3, [pc, #144]	; (8011bb0 <USBD_LL_Init+0xb8>)
 8011b1e:	2202      	movs	r2, #2
 8011b20:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011b22:	4b23      	ldr	r3, [pc, #140]	; (8011bb0 <USBD_LL_Init+0xb8>)
 8011b24:	2202      	movs	r2, #2
 8011b26:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8011b28:	4b21      	ldr	r3, [pc, #132]	; (8011bb0 <USBD_LL_Init+0xb8>)
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8011b2e:	4b20      	ldr	r3, [pc, #128]	; (8011bb0 <USBD_LL_Init+0xb8>)
 8011b30:	2200      	movs	r2, #0
 8011b32:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011b34:	4b1e      	ldr	r3, [pc, #120]	; (8011bb0 <USBD_LL_Init+0xb8>)
 8011b36:	2200      	movs	r2, #0
 8011b38:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8011b3a:	4b1d      	ldr	r3, [pc, #116]	; (8011bb0 <USBD_LL_Init+0xb8>)
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8011b40:	481b      	ldr	r0, [pc, #108]	; (8011bb0 <USBD_LL_Init+0xb8>)
 8011b42:	f7f4 f86a 	bl	8005c1a <HAL_PCD_Init>
 8011b46:	4603      	mov	r3, r0
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d001      	beq.n	8011b50 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8011b4c:	f7f0 f8de 	bl	8001d0c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011b56:	2318      	movs	r3, #24
 8011b58:	2200      	movs	r2, #0
 8011b5a:	2100      	movs	r1, #0
 8011b5c:	f7f5 fd23 	bl	80075a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011b66:	2358      	movs	r3, #88	; 0x58
 8011b68:	2200      	movs	r2, #0
 8011b6a:	2180      	movs	r1, #128	; 0x80
 8011b6c:	f7f5 fd1b 	bl	80075a6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011b76:	23c0      	movs	r3, #192	; 0xc0
 8011b78:	2200      	movs	r2, #0
 8011b7a:	2181      	movs	r1, #129	; 0x81
 8011b7c:	f7f5 fd13 	bl	80075a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011b86:	f44f 7388 	mov.w	r3, #272	; 0x110
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	2101      	movs	r1, #1
 8011b8e:	f7f5 fd0a 	bl	80075a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011b98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	2182      	movs	r1, #130	; 0x82
 8011ba0:	f7f5 fd01 	bl	80075a6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8011ba4:	2300      	movs	r3, #0
}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	3708      	adds	r7, #8
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd80      	pop	{r7, pc}
 8011bae:	bf00      	nop
 8011bb0:	20002f88 	.word	0x20002f88
 8011bb4:	40005c00 	.word	0x40005c00

08011bb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b084      	sub	sp, #16
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f7f4 f908 	bl	8005de4 <HAL_PCD_Start>
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011bd8:	7bfb      	ldrb	r3, [r7, #15]
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f000 f980 	bl	8011ee0 <USBD_Get_USB_Status>
 8011be0:	4603      	mov	r3, r0
 8011be2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011be4:	7bbb      	ldrb	r3, [r7, #14]
}
 8011be6:	4618      	mov	r0, r3
 8011be8:	3710      	adds	r7, #16
 8011bea:	46bd      	mov	sp, r7
 8011bec:	bd80      	pop	{r7, pc}

08011bee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011bee:	b580      	push	{r7, lr}
 8011bf0:	b084      	sub	sp, #16
 8011bf2:	af00      	add	r7, sp, #0
 8011bf4:	6078      	str	r0, [r7, #4]
 8011bf6:	4608      	mov	r0, r1
 8011bf8:	4611      	mov	r1, r2
 8011bfa:	461a      	mov	r2, r3
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	70fb      	strb	r3, [r7, #3]
 8011c00:	460b      	mov	r3, r1
 8011c02:	70bb      	strb	r3, [r7, #2]
 8011c04:	4613      	mov	r3, r2
 8011c06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c08:	2300      	movs	r3, #0
 8011c0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011c16:	78bb      	ldrb	r3, [r7, #2]
 8011c18:	883a      	ldrh	r2, [r7, #0]
 8011c1a:	78f9      	ldrb	r1, [r7, #3]
 8011c1c:	f7f4 fa50 	bl	80060c0 <HAL_PCD_EP_Open>
 8011c20:	4603      	mov	r3, r0
 8011c22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c24:	7bfb      	ldrb	r3, [r7, #15]
 8011c26:	4618      	mov	r0, r3
 8011c28:	f000 f95a 	bl	8011ee0 <USBD_Get_USB_Status>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c30:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c32:	4618      	mov	r0, r3
 8011c34:	3710      	adds	r7, #16
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}

08011c3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c3a:	b580      	push	{r7, lr}
 8011c3c:	b084      	sub	sp, #16
 8011c3e:	af00      	add	r7, sp, #0
 8011c40:	6078      	str	r0, [r7, #4]
 8011c42:	460b      	mov	r3, r1
 8011c44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c46:	2300      	movs	r3, #0
 8011c48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011c54:	78fa      	ldrb	r2, [r7, #3]
 8011c56:	4611      	mov	r1, r2
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f7f4 fa97 	bl	800618c <HAL_PCD_EP_Close>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c62:	7bfb      	ldrb	r3, [r7, #15]
 8011c64:	4618      	mov	r0, r3
 8011c66:	f000 f93b 	bl	8011ee0 <USBD_Get_USB_Status>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c70:	4618      	mov	r0, r3
 8011c72:	3710      	adds	r7, #16
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd80      	pop	{r7, pc}

08011c78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b084      	sub	sp, #16
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
 8011c80:	460b      	mov	r3, r1
 8011c82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c84:	2300      	movs	r3, #0
 8011c86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c88:	2300      	movs	r3, #0
 8011c8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011c92:	78fa      	ldrb	r2, [r7, #3]
 8011c94:	4611      	mov	r1, r2
 8011c96:	4618      	mov	r0, r3
 8011c98:	f7f4 fb58 	bl	800634c <HAL_PCD_EP_SetStall>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ca0:	7bfb      	ldrb	r3, [r7, #15]
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f000 f91c 	bl	8011ee0 <USBD_Get_USB_Status>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011cac:	7bbb      	ldrb	r3, [r7, #14]
}
 8011cae:	4618      	mov	r0, r3
 8011cb0:	3710      	adds	r7, #16
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	bd80      	pop	{r7, pc}

08011cb6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011cb6:	b580      	push	{r7, lr}
 8011cb8:	b084      	sub	sp, #16
 8011cba:	af00      	add	r7, sp, #0
 8011cbc:	6078      	str	r0, [r7, #4]
 8011cbe:	460b      	mov	r3, r1
 8011cc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011cd0:	78fa      	ldrb	r2, [r7, #3]
 8011cd2:	4611      	mov	r1, r2
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f7f4 fb8b 	bl	80063f0 <HAL_PCD_EP_ClrStall>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011cde:	7bfb      	ldrb	r3, [r7, #15]
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f000 f8fd 	bl	8011ee0 <USBD_Get_USB_Status>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011cea:	7bbb      	ldrb	r3, [r7, #14]
}
 8011cec:	4618      	mov	r0, r3
 8011cee:	3710      	adds	r7, #16
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	bd80      	pop	{r7, pc}

08011cf4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011cf4:	b480      	push	{r7}
 8011cf6:	b085      	sub	sp, #20
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
 8011cfc:	460b      	mov	r3, r1
 8011cfe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011d06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011d08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	da0c      	bge.n	8011d2a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011d10:	78fb      	ldrb	r3, [r7, #3]
 8011d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d16:	68f9      	ldr	r1, [r7, #12]
 8011d18:	1c5a      	adds	r2, r3, #1
 8011d1a:	4613      	mov	r3, r2
 8011d1c:	009b      	lsls	r3, r3, #2
 8011d1e:	4413      	add	r3, r2
 8011d20:	00db      	lsls	r3, r3, #3
 8011d22:	440b      	add	r3, r1
 8011d24:	3302      	adds	r3, #2
 8011d26:	781b      	ldrb	r3, [r3, #0]
 8011d28:	e00b      	b.n	8011d42 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011d2a:	78fb      	ldrb	r3, [r7, #3]
 8011d2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011d30:	68f9      	ldr	r1, [r7, #12]
 8011d32:	4613      	mov	r3, r2
 8011d34:	009b      	lsls	r3, r3, #2
 8011d36:	4413      	add	r3, r2
 8011d38:	00db      	lsls	r3, r3, #3
 8011d3a:	440b      	add	r3, r1
 8011d3c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8011d40:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011d42:	4618      	mov	r0, r3
 8011d44:	3714      	adds	r7, #20
 8011d46:	46bd      	mov	sp, r7
 8011d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4c:	4770      	bx	lr

08011d4e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011d4e:	b580      	push	{r7, lr}
 8011d50:	b084      	sub	sp, #16
 8011d52:	af00      	add	r7, sp, #0
 8011d54:	6078      	str	r0, [r7, #4]
 8011d56:	460b      	mov	r3, r1
 8011d58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d5e:	2300      	movs	r3, #0
 8011d60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011d68:	78fa      	ldrb	r2, [r7, #3]
 8011d6a:	4611      	mov	r1, r2
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	f7f4 f982 	bl	8006076 <HAL_PCD_SetAddress>
 8011d72:	4603      	mov	r3, r0
 8011d74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d76:	7bfb      	ldrb	r3, [r7, #15]
 8011d78:	4618      	mov	r0, r3
 8011d7a:	f000 f8b1 	bl	8011ee0 <USBD_Get_USB_Status>
 8011d7e:	4603      	mov	r3, r0
 8011d80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d82:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d84:	4618      	mov	r0, r3
 8011d86:	3710      	adds	r7, #16
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}

08011d8c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b086      	sub	sp, #24
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	60f8      	str	r0, [r7, #12]
 8011d94:	607a      	str	r2, [r7, #4]
 8011d96:	603b      	str	r3, [r7, #0]
 8011d98:	460b      	mov	r3, r1
 8011d9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011da0:	2300      	movs	r3, #0
 8011da2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011daa:	7af9      	ldrb	r1, [r7, #11]
 8011dac:	683b      	ldr	r3, [r7, #0]
 8011dae:	687a      	ldr	r2, [r7, #4]
 8011db0:	f7f4 fa89 	bl	80062c6 <HAL_PCD_EP_Transmit>
 8011db4:	4603      	mov	r3, r0
 8011db6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011db8:	7dfb      	ldrb	r3, [r7, #23]
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f000 f890 	bl	8011ee0 <USBD_Get_USB_Status>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011dc4:	7dbb      	ldrb	r3, [r7, #22]
}
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	3718      	adds	r7, #24
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	bd80      	pop	{r7, pc}

08011dce <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011dce:	b580      	push	{r7, lr}
 8011dd0:	b086      	sub	sp, #24
 8011dd2:	af00      	add	r7, sp, #0
 8011dd4:	60f8      	str	r0, [r7, #12]
 8011dd6:	607a      	str	r2, [r7, #4]
 8011dd8:	603b      	str	r3, [r7, #0]
 8011dda:	460b      	mov	r3, r1
 8011ddc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011dde:	2300      	movs	r3, #0
 8011de0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011de2:	2300      	movs	r3, #0
 8011de4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011dec:	7af9      	ldrb	r1, [r7, #11]
 8011dee:	683b      	ldr	r3, [r7, #0]
 8011df0:	687a      	ldr	r2, [r7, #4]
 8011df2:	f7f4 fa13 	bl	800621c <HAL_PCD_EP_Receive>
 8011df6:	4603      	mov	r3, r0
 8011df8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011dfa:	7dfb      	ldrb	r3, [r7, #23]
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f000 f86f 	bl	8011ee0 <USBD_Get_USB_Status>
 8011e02:	4603      	mov	r3, r0
 8011e04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011e06:	7dbb      	ldrb	r3, [r7, #22]
}
 8011e08:	4618      	mov	r0, r3
 8011e0a:	3718      	adds	r7, #24
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd80      	pop	{r7, pc}

08011e10 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b082      	sub	sp, #8
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
 8011e18:	460b      	mov	r3, r1
 8011e1a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011e22:	78fa      	ldrb	r2, [r7, #3]
 8011e24:	4611      	mov	r1, r2
 8011e26:	4618      	mov	r0, r3
 8011e28:	f7f4 fa35 	bl	8006296 <HAL_PCD_EP_GetRxCount>
 8011e2c:	4603      	mov	r3, r0
}
 8011e2e:	4618      	mov	r0, r3
 8011e30:	3708      	adds	r7, #8
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bd80      	pop	{r7, pc}
	...

08011e38 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b082      	sub	sp, #8
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
 8011e40:	460b      	mov	r3, r1
 8011e42:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011e44:	78fb      	ldrb	r3, [r7, #3]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d002      	beq.n	8011e50 <HAL_PCDEx_LPM_Callback+0x18>
 8011e4a:	2b01      	cmp	r3, #1
 8011e4c:	d013      	beq.n	8011e76 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8011e4e:	e023      	b.n	8011e98 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	699b      	ldr	r3, [r3, #24]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d007      	beq.n	8011e68 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011e58:	f000 f83c 	bl	8011ed4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011e5c:	4b10      	ldr	r3, [pc, #64]	; (8011ea0 <HAL_PCDEx_LPM_Callback+0x68>)
 8011e5e:	691b      	ldr	r3, [r3, #16]
 8011e60:	4a0f      	ldr	r2, [pc, #60]	; (8011ea0 <HAL_PCDEx_LPM_Callback+0x68>)
 8011e62:	f023 0306 	bic.w	r3, r3, #6
 8011e66:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011e6e:	4618      	mov	r0, r3
 8011e70:	f7fc fb6a 	bl	800e548 <USBD_LL_Resume>
    break;
 8011e74:	e010      	b.n	8011e98 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f7fc fb4d 	bl	800e51c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	699b      	ldr	r3, [r3, #24]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d005      	beq.n	8011e96 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011e8a:	4b05      	ldr	r3, [pc, #20]	; (8011ea0 <HAL_PCDEx_LPM_Callback+0x68>)
 8011e8c:	691b      	ldr	r3, [r3, #16]
 8011e8e:	4a04      	ldr	r2, [pc, #16]	; (8011ea0 <HAL_PCDEx_LPM_Callback+0x68>)
 8011e90:	f043 0306 	orr.w	r3, r3, #6
 8011e94:	6113      	str	r3, [r2, #16]
    break;
 8011e96:	bf00      	nop
}
 8011e98:	bf00      	nop
 8011e9a:	3708      	adds	r7, #8
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	bd80      	pop	{r7, pc}
 8011ea0:	e000ed00 	.word	0xe000ed00

08011ea4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011ea4:	b480      	push	{r7}
 8011ea6:	b083      	sub	sp, #12
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011eac:	4b03      	ldr	r3, [pc, #12]	; (8011ebc <USBD_static_malloc+0x18>)
}
 8011eae:	4618      	mov	r0, r3
 8011eb0:	370c      	adds	r7, #12
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb8:	4770      	bx	lr
 8011eba:	bf00      	nop
 8011ebc:	2000327c 	.word	0x2000327c

08011ec0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011ec0:	b480      	push	{r7}
 8011ec2:	b083      	sub	sp, #12
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]

}
 8011ec8:	bf00      	nop
 8011eca:	370c      	adds	r7, #12
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed2:	4770      	bx	lr

08011ed4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011ed8:	f7ef fea8 	bl	8001c2c <SystemClock_Config>
}
 8011edc:	bf00      	nop
 8011ede:	bd80      	pop	{r7, pc}

08011ee0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011ee0:	b480      	push	{r7}
 8011ee2:	b085      	sub	sp, #20
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011eea:	2300      	movs	r3, #0
 8011eec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011eee:	79fb      	ldrb	r3, [r7, #7]
 8011ef0:	2b03      	cmp	r3, #3
 8011ef2:	d817      	bhi.n	8011f24 <USBD_Get_USB_Status+0x44>
 8011ef4:	a201      	add	r2, pc, #4	; (adr r2, 8011efc <USBD_Get_USB_Status+0x1c>)
 8011ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011efa:	bf00      	nop
 8011efc:	08011f0d 	.word	0x08011f0d
 8011f00:	08011f13 	.word	0x08011f13
 8011f04:	08011f19 	.word	0x08011f19
 8011f08:	08011f1f 	.word	0x08011f1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	73fb      	strb	r3, [r7, #15]
    break;
 8011f10:	e00b      	b.n	8011f2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011f12:	2303      	movs	r3, #3
 8011f14:	73fb      	strb	r3, [r7, #15]
    break;
 8011f16:	e008      	b.n	8011f2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011f18:	2301      	movs	r3, #1
 8011f1a:	73fb      	strb	r3, [r7, #15]
    break;
 8011f1c:	e005      	b.n	8011f2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011f1e:	2303      	movs	r3, #3
 8011f20:	73fb      	strb	r3, [r7, #15]
    break;
 8011f22:	e002      	b.n	8011f2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011f24:	2303      	movs	r3, #3
 8011f26:	73fb      	strb	r3, [r7, #15]
    break;
 8011f28:	bf00      	nop
  }
  return usb_status;
 8011f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	3714      	adds	r7, #20
 8011f30:	46bd      	mov	sp, r7
 8011f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f36:	4770      	bx	lr

08011f38 <__errno>:
 8011f38:	4b01      	ldr	r3, [pc, #4]	; (8011f40 <__errno+0x8>)
 8011f3a:	6818      	ldr	r0, [r3, #0]
 8011f3c:	4770      	bx	lr
 8011f3e:	bf00      	nop
 8011f40:	20000188 	.word	0x20000188

08011f44 <__libc_init_array>:
 8011f44:	b570      	push	{r4, r5, r6, lr}
 8011f46:	4d0d      	ldr	r5, [pc, #52]	; (8011f7c <__libc_init_array+0x38>)
 8011f48:	4c0d      	ldr	r4, [pc, #52]	; (8011f80 <__libc_init_array+0x3c>)
 8011f4a:	1b64      	subs	r4, r4, r5
 8011f4c:	10a4      	asrs	r4, r4, #2
 8011f4e:	2600      	movs	r6, #0
 8011f50:	42a6      	cmp	r6, r4
 8011f52:	d109      	bne.n	8011f68 <__libc_init_array+0x24>
 8011f54:	4d0b      	ldr	r5, [pc, #44]	; (8011f84 <__libc_init_array+0x40>)
 8011f56:	4c0c      	ldr	r4, [pc, #48]	; (8011f88 <__libc_init_array+0x44>)
 8011f58:	f002 ffc4 	bl	8014ee4 <_init>
 8011f5c:	1b64      	subs	r4, r4, r5
 8011f5e:	10a4      	asrs	r4, r4, #2
 8011f60:	2600      	movs	r6, #0
 8011f62:	42a6      	cmp	r6, r4
 8011f64:	d105      	bne.n	8011f72 <__libc_init_array+0x2e>
 8011f66:	bd70      	pop	{r4, r5, r6, pc}
 8011f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f6c:	4798      	blx	r3
 8011f6e:	3601      	adds	r6, #1
 8011f70:	e7ee      	b.n	8011f50 <__libc_init_array+0xc>
 8011f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f76:	4798      	blx	r3
 8011f78:	3601      	adds	r6, #1
 8011f7a:	e7f2      	b.n	8011f62 <__libc_init_array+0x1e>
 8011f7c:	0801579c 	.word	0x0801579c
 8011f80:	0801579c 	.word	0x0801579c
 8011f84:	0801579c 	.word	0x0801579c
 8011f88:	080157a0 	.word	0x080157a0

08011f8c <memcpy>:
 8011f8c:	440a      	add	r2, r1
 8011f8e:	4291      	cmp	r1, r2
 8011f90:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011f94:	d100      	bne.n	8011f98 <memcpy+0xc>
 8011f96:	4770      	bx	lr
 8011f98:	b510      	push	{r4, lr}
 8011f9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011fa2:	4291      	cmp	r1, r2
 8011fa4:	d1f9      	bne.n	8011f9a <memcpy+0xe>
 8011fa6:	bd10      	pop	{r4, pc}

08011fa8 <memset>:
 8011fa8:	4402      	add	r2, r0
 8011faa:	4603      	mov	r3, r0
 8011fac:	4293      	cmp	r3, r2
 8011fae:	d100      	bne.n	8011fb2 <memset+0xa>
 8011fb0:	4770      	bx	lr
 8011fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8011fb6:	e7f9      	b.n	8011fac <memset+0x4>

08011fb8 <__cvt>:
 8011fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011fbc:	ec55 4b10 	vmov	r4, r5, d0
 8011fc0:	2d00      	cmp	r5, #0
 8011fc2:	460e      	mov	r6, r1
 8011fc4:	4619      	mov	r1, r3
 8011fc6:	462b      	mov	r3, r5
 8011fc8:	bfbb      	ittet	lt
 8011fca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011fce:	461d      	movlt	r5, r3
 8011fd0:	2300      	movge	r3, #0
 8011fd2:	232d      	movlt	r3, #45	; 0x2d
 8011fd4:	700b      	strb	r3, [r1, #0]
 8011fd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011fd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011fdc:	4691      	mov	r9, r2
 8011fde:	f023 0820 	bic.w	r8, r3, #32
 8011fe2:	bfbc      	itt	lt
 8011fe4:	4622      	movlt	r2, r4
 8011fe6:	4614      	movlt	r4, r2
 8011fe8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011fec:	d005      	beq.n	8011ffa <__cvt+0x42>
 8011fee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011ff2:	d100      	bne.n	8011ff6 <__cvt+0x3e>
 8011ff4:	3601      	adds	r6, #1
 8011ff6:	2102      	movs	r1, #2
 8011ff8:	e000      	b.n	8011ffc <__cvt+0x44>
 8011ffa:	2103      	movs	r1, #3
 8011ffc:	ab03      	add	r3, sp, #12
 8011ffe:	9301      	str	r3, [sp, #4]
 8012000:	ab02      	add	r3, sp, #8
 8012002:	9300      	str	r3, [sp, #0]
 8012004:	ec45 4b10 	vmov	d0, r4, r5
 8012008:	4653      	mov	r3, sl
 801200a:	4632      	mov	r2, r6
 801200c:	f000 fe6c 	bl	8012ce8 <_dtoa_r>
 8012010:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012014:	4607      	mov	r7, r0
 8012016:	d102      	bne.n	801201e <__cvt+0x66>
 8012018:	f019 0f01 	tst.w	r9, #1
 801201c:	d022      	beq.n	8012064 <__cvt+0xac>
 801201e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012022:	eb07 0906 	add.w	r9, r7, r6
 8012026:	d110      	bne.n	801204a <__cvt+0x92>
 8012028:	783b      	ldrb	r3, [r7, #0]
 801202a:	2b30      	cmp	r3, #48	; 0x30
 801202c:	d10a      	bne.n	8012044 <__cvt+0x8c>
 801202e:	2200      	movs	r2, #0
 8012030:	2300      	movs	r3, #0
 8012032:	4620      	mov	r0, r4
 8012034:	4629      	mov	r1, r5
 8012036:	f7ee fd6f 	bl	8000b18 <__aeabi_dcmpeq>
 801203a:	b918      	cbnz	r0, 8012044 <__cvt+0x8c>
 801203c:	f1c6 0601 	rsb	r6, r6, #1
 8012040:	f8ca 6000 	str.w	r6, [sl]
 8012044:	f8da 3000 	ldr.w	r3, [sl]
 8012048:	4499      	add	r9, r3
 801204a:	2200      	movs	r2, #0
 801204c:	2300      	movs	r3, #0
 801204e:	4620      	mov	r0, r4
 8012050:	4629      	mov	r1, r5
 8012052:	f7ee fd61 	bl	8000b18 <__aeabi_dcmpeq>
 8012056:	b108      	cbz	r0, 801205c <__cvt+0xa4>
 8012058:	f8cd 900c 	str.w	r9, [sp, #12]
 801205c:	2230      	movs	r2, #48	; 0x30
 801205e:	9b03      	ldr	r3, [sp, #12]
 8012060:	454b      	cmp	r3, r9
 8012062:	d307      	bcc.n	8012074 <__cvt+0xbc>
 8012064:	9b03      	ldr	r3, [sp, #12]
 8012066:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012068:	1bdb      	subs	r3, r3, r7
 801206a:	4638      	mov	r0, r7
 801206c:	6013      	str	r3, [r2, #0]
 801206e:	b004      	add	sp, #16
 8012070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012074:	1c59      	adds	r1, r3, #1
 8012076:	9103      	str	r1, [sp, #12]
 8012078:	701a      	strb	r2, [r3, #0]
 801207a:	e7f0      	b.n	801205e <__cvt+0xa6>

0801207c <__exponent>:
 801207c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801207e:	4603      	mov	r3, r0
 8012080:	2900      	cmp	r1, #0
 8012082:	bfb8      	it	lt
 8012084:	4249      	neglt	r1, r1
 8012086:	f803 2b02 	strb.w	r2, [r3], #2
 801208a:	bfb4      	ite	lt
 801208c:	222d      	movlt	r2, #45	; 0x2d
 801208e:	222b      	movge	r2, #43	; 0x2b
 8012090:	2909      	cmp	r1, #9
 8012092:	7042      	strb	r2, [r0, #1]
 8012094:	dd2a      	ble.n	80120ec <__exponent+0x70>
 8012096:	f10d 0407 	add.w	r4, sp, #7
 801209a:	46a4      	mov	ip, r4
 801209c:	270a      	movs	r7, #10
 801209e:	46a6      	mov	lr, r4
 80120a0:	460a      	mov	r2, r1
 80120a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80120a6:	fb07 1516 	mls	r5, r7, r6, r1
 80120aa:	3530      	adds	r5, #48	; 0x30
 80120ac:	2a63      	cmp	r2, #99	; 0x63
 80120ae:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80120b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80120b6:	4631      	mov	r1, r6
 80120b8:	dcf1      	bgt.n	801209e <__exponent+0x22>
 80120ba:	3130      	adds	r1, #48	; 0x30
 80120bc:	f1ae 0502 	sub.w	r5, lr, #2
 80120c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80120c4:	1c44      	adds	r4, r0, #1
 80120c6:	4629      	mov	r1, r5
 80120c8:	4561      	cmp	r1, ip
 80120ca:	d30a      	bcc.n	80120e2 <__exponent+0x66>
 80120cc:	f10d 0209 	add.w	r2, sp, #9
 80120d0:	eba2 020e 	sub.w	r2, r2, lr
 80120d4:	4565      	cmp	r5, ip
 80120d6:	bf88      	it	hi
 80120d8:	2200      	movhi	r2, #0
 80120da:	4413      	add	r3, r2
 80120dc:	1a18      	subs	r0, r3, r0
 80120de:	b003      	add	sp, #12
 80120e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80120e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80120ea:	e7ed      	b.n	80120c8 <__exponent+0x4c>
 80120ec:	2330      	movs	r3, #48	; 0x30
 80120ee:	3130      	adds	r1, #48	; 0x30
 80120f0:	7083      	strb	r3, [r0, #2]
 80120f2:	70c1      	strb	r1, [r0, #3]
 80120f4:	1d03      	adds	r3, r0, #4
 80120f6:	e7f1      	b.n	80120dc <__exponent+0x60>

080120f8 <_printf_float>:
 80120f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120fc:	ed2d 8b02 	vpush	{d8}
 8012100:	b08d      	sub	sp, #52	; 0x34
 8012102:	460c      	mov	r4, r1
 8012104:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012108:	4616      	mov	r6, r2
 801210a:	461f      	mov	r7, r3
 801210c:	4605      	mov	r5, r0
 801210e:	f001 fd91 	bl	8013c34 <_localeconv_r>
 8012112:	f8d0 a000 	ldr.w	sl, [r0]
 8012116:	4650      	mov	r0, sl
 8012118:	f7ee f882 	bl	8000220 <strlen>
 801211c:	2300      	movs	r3, #0
 801211e:	930a      	str	r3, [sp, #40]	; 0x28
 8012120:	6823      	ldr	r3, [r4, #0]
 8012122:	9305      	str	r3, [sp, #20]
 8012124:	f8d8 3000 	ldr.w	r3, [r8]
 8012128:	f894 b018 	ldrb.w	fp, [r4, #24]
 801212c:	3307      	adds	r3, #7
 801212e:	f023 0307 	bic.w	r3, r3, #7
 8012132:	f103 0208 	add.w	r2, r3, #8
 8012136:	f8c8 2000 	str.w	r2, [r8]
 801213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801213e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012142:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012146:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801214a:	9307      	str	r3, [sp, #28]
 801214c:	f8cd 8018 	str.w	r8, [sp, #24]
 8012150:	ee08 0a10 	vmov	s16, r0
 8012154:	4b9f      	ldr	r3, [pc, #636]	; (80123d4 <_printf_float+0x2dc>)
 8012156:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801215a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801215e:	f7ee fd0d 	bl	8000b7c <__aeabi_dcmpun>
 8012162:	bb88      	cbnz	r0, 80121c8 <_printf_float+0xd0>
 8012164:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012168:	4b9a      	ldr	r3, [pc, #616]	; (80123d4 <_printf_float+0x2dc>)
 801216a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801216e:	f7ee fce7 	bl	8000b40 <__aeabi_dcmple>
 8012172:	bb48      	cbnz	r0, 80121c8 <_printf_float+0xd0>
 8012174:	2200      	movs	r2, #0
 8012176:	2300      	movs	r3, #0
 8012178:	4640      	mov	r0, r8
 801217a:	4649      	mov	r1, r9
 801217c:	f7ee fcd6 	bl	8000b2c <__aeabi_dcmplt>
 8012180:	b110      	cbz	r0, 8012188 <_printf_float+0x90>
 8012182:	232d      	movs	r3, #45	; 0x2d
 8012184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012188:	4b93      	ldr	r3, [pc, #588]	; (80123d8 <_printf_float+0x2e0>)
 801218a:	4894      	ldr	r0, [pc, #592]	; (80123dc <_printf_float+0x2e4>)
 801218c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012190:	bf94      	ite	ls
 8012192:	4698      	movls	r8, r3
 8012194:	4680      	movhi	r8, r0
 8012196:	2303      	movs	r3, #3
 8012198:	6123      	str	r3, [r4, #16]
 801219a:	9b05      	ldr	r3, [sp, #20]
 801219c:	f023 0204 	bic.w	r2, r3, #4
 80121a0:	6022      	str	r2, [r4, #0]
 80121a2:	f04f 0900 	mov.w	r9, #0
 80121a6:	9700      	str	r7, [sp, #0]
 80121a8:	4633      	mov	r3, r6
 80121aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80121ac:	4621      	mov	r1, r4
 80121ae:	4628      	mov	r0, r5
 80121b0:	f000 f9d8 	bl	8012564 <_printf_common>
 80121b4:	3001      	adds	r0, #1
 80121b6:	f040 8090 	bne.w	80122da <_printf_float+0x1e2>
 80121ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80121be:	b00d      	add	sp, #52	; 0x34
 80121c0:	ecbd 8b02 	vpop	{d8}
 80121c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121c8:	4642      	mov	r2, r8
 80121ca:	464b      	mov	r3, r9
 80121cc:	4640      	mov	r0, r8
 80121ce:	4649      	mov	r1, r9
 80121d0:	f7ee fcd4 	bl	8000b7c <__aeabi_dcmpun>
 80121d4:	b140      	cbz	r0, 80121e8 <_printf_float+0xf0>
 80121d6:	464b      	mov	r3, r9
 80121d8:	2b00      	cmp	r3, #0
 80121da:	bfbc      	itt	lt
 80121dc:	232d      	movlt	r3, #45	; 0x2d
 80121de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80121e2:	487f      	ldr	r0, [pc, #508]	; (80123e0 <_printf_float+0x2e8>)
 80121e4:	4b7f      	ldr	r3, [pc, #508]	; (80123e4 <_printf_float+0x2ec>)
 80121e6:	e7d1      	b.n	801218c <_printf_float+0x94>
 80121e8:	6863      	ldr	r3, [r4, #4]
 80121ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80121ee:	9206      	str	r2, [sp, #24]
 80121f0:	1c5a      	adds	r2, r3, #1
 80121f2:	d13f      	bne.n	8012274 <_printf_float+0x17c>
 80121f4:	2306      	movs	r3, #6
 80121f6:	6063      	str	r3, [r4, #4]
 80121f8:	9b05      	ldr	r3, [sp, #20]
 80121fa:	6861      	ldr	r1, [r4, #4]
 80121fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012200:	2300      	movs	r3, #0
 8012202:	9303      	str	r3, [sp, #12]
 8012204:	ab0a      	add	r3, sp, #40	; 0x28
 8012206:	e9cd b301 	strd	fp, r3, [sp, #4]
 801220a:	ab09      	add	r3, sp, #36	; 0x24
 801220c:	ec49 8b10 	vmov	d0, r8, r9
 8012210:	9300      	str	r3, [sp, #0]
 8012212:	6022      	str	r2, [r4, #0]
 8012214:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012218:	4628      	mov	r0, r5
 801221a:	f7ff fecd 	bl	8011fb8 <__cvt>
 801221e:	9b06      	ldr	r3, [sp, #24]
 8012220:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012222:	2b47      	cmp	r3, #71	; 0x47
 8012224:	4680      	mov	r8, r0
 8012226:	d108      	bne.n	801223a <_printf_float+0x142>
 8012228:	1cc8      	adds	r0, r1, #3
 801222a:	db02      	blt.n	8012232 <_printf_float+0x13a>
 801222c:	6863      	ldr	r3, [r4, #4]
 801222e:	4299      	cmp	r1, r3
 8012230:	dd41      	ble.n	80122b6 <_printf_float+0x1be>
 8012232:	f1ab 0b02 	sub.w	fp, fp, #2
 8012236:	fa5f fb8b 	uxtb.w	fp, fp
 801223a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801223e:	d820      	bhi.n	8012282 <_printf_float+0x18a>
 8012240:	3901      	subs	r1, #1
 8012242:	465a      	mov	r2, fp
 8012244:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012248:	9109      	str	r1, [sp, #36]	; 0x24
 801224a:	f7ff ff17 	bl	801207c <__exponent>
 801224e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012250:	1813      	adds	r3, r2, r0
 8012252:	2a01      	cmp	r2, #1
 8012254:	4681      	mov	r9, r0
 8012256:	6123      	str	r3, [r4, #16]
 8012258:	dc02      	bgt.n	8012260 <_printf_float+0x168>
 801225a:	6822      	ldr	r2, [r4, #0]
 801225c:	07d2      	lsls	r2, r2, #31
 801225e:	d501      	bpl.n	8012264 <_printf_float+0x16c>
 8012260:	3301      	adds	r3, #1
 8012262:	6123      	str	r3, [r4, #16]
 8012264:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012268:	2b00      	cmp	r3, #0
 801226a:	d09c      	beq.n	80121a6 <_printf_float+0xae>
 801226c:	232d      	movs	r3, #45	; 0x2d
 801226e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012272:	e798      	b.n	80121a6 <_printf_float+0xae>
 8012274:	9a06      	ldr	r2, [sp, #24]
 8012276:	2a47      	cmp	r2, #71	; 0x47
 8012278:	d1be      	bne.n	80121f8 <_printf_float+0x100>
 801227a:	2b00      	cmp	r3, #0
 801227c:	d1bc      	bne.n	80121f8 <_printf_float+0x100>
 801227e:	2301      	movs	r3, #1
 8012280:	e7b9      	b.n	80121f6 <_printf_float+0xfe>
 8012282:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012286:	d118      	bne.n	80122ba <_printf_float+0x1c2>
 8012288:	2900      	cmp	r1, #0
 801228a:	6863      	ldr	r3, [r4, #4]
 801228c:	dd0b      	ble.n	80122a6 <_printf_float+0x1ae>
 801228e:	6121      	str	r1, [r4, #16]
 8012290:	b913      	cbnz	r3, 8012298 <_printf_float+0x1a0>
 8012292:	6822      	ldr	r2, [r4, #0]
 8012294:	07d0      	lsls	r0, r2, #31
 8012296:	d502      	bpl.n	801229e <_printf_float+0x1a6>
 8012298:	3301      	adds	r3, #1
 801229a:	440b      	add	r3, r1
 801229c:	6123      	str	r3, [r4, #16]
 801229e:	65a1      	str	r1, [r4, #88]	; 0x58
 80122a0:	f04f 0900 	mov.w	r9, #0
 80122a4:	e7de      	b.n	8012264 <_printf_float+0x16c>
 80122a6:	b913      	cbnz	r3, 80122ae <_printf_float+0x1b6>
 80122a8:	6822      	ldr	r2, [r4, #0]
 80122aa:	07d2      	lsls	r2, r2, #31
 80122ac:	d501      	bpl.n	80122b2 <_printf_float+0x1ba>
 80122ae:	3302      	adds	r3, #2
 80122b0:	e7f4      	b.n	801229c <_printf_float+0x1a4>
 80122b2:	2301      	movs	r3, #1
 80122b4:	e7f2      	b.n	801229c <_printf_float+0x1a4>
 80122b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80122ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122bc:	4299      	cmp	r1, r3
 80122be:	db05      	blt.n	80122cc <_printf_float+0x1d4>
 80122c0:	6823      	ldr	r3, [r4, #0]
 80122c2:	6121      	str	r1, [r4, #16]
 80122c4:	07d8      	lsls	r0, r3, #31
 80122c6:	d5ea      	bpl.n	801229e <_printf_float+0x1a6>
 80122c8:	1c4b      	adds	r3, r1, #1
 80122ca:	e7e7      	b.n	801229c <_printf_float+0x1a4>
 80122cc:	2900      	cmp	r1, #0
 80122ce:	bfd4      	ite	le
 80122d0:	f1c1 0202 	rsble	r2, r1, #2
 80122d4:	2201      	movgt	r2, #1
 80122d6:	4413      	add	r3, r2
 80122d8:	e7e0      	b.n	801229c <_printf_float+0x1a4>
 80122da:	6823      	ldr	r3, [r4, #0]
 80122dc:	055a      	lsls	r2, r3, #21
 80122de:	d407      	bmi.n	80122f0 <_printf_float+0x1f8>
 80122e0:	6923      	ldr	r3, [r4, #16]
 80122e2:	4642      	mov	r2, r8
 80122e4:	4631      	mov	r1, r6
 80122e6:	4628      	mov	r0, r5
 80122e8:	47b8      	blx	r7
 80122ea:	3001      	adds	r0, #1
 80122ec:	d12c      	bne.n	8012348 <_printf_float+0x250>
 80122ee:	e764      	b.n	80121ba <_printf_float+0xc2>
 80122f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80122f4:	f240 80e0 	bls.w	80124b8 <_printf_float+0x3c0>
 80122f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80122fc:	2200      	movs	r2, #0
 80122fe:	2300      	movs	r3, #0
 8012300:	f7ee fc0a 	bl	8000b18 <__aeabi_dcmpeq>
 8012304:	2800      	cmp	r0, #0
 8012306:	d034      	beq.n	8012372 <_printf_float+0x27a>
 8012308:	4a37      	ldr	r2, [pc, #220]	; (80123e8 <_printf_float+0x2f0>)
 801230a:	2301      	movs	r3, #1
 801230c:	4631      	mov	r1, r6
 801230e:	4628      	mov	r0, r5
 8012310:	47b8      	blx	r7
 8012312:	3001      	adds	r0, #1
 8012314:	f43f af51 	beq.w	80121ba <_printf_float+0xc2>
 8012318:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801231c:	429a      	cmp	r2, r3
 801231e:	db02      	blt.n	8012326 <_printf_float+0x22e>
 8012320:	6823      	ldr	r3, [r4, #0]
 8012322:	07d8      	lsls	r0, r3, #31
 8012324:	d510      	bpl.n	8012348 <_printf_float+0x250>
 8012326:	ee18 3a10 	vmov	r3, s16
 801232a:	4652      	mov	r2, sl
 801232c:	4631      	mov	r1, r6
 801232e:	4628      	mov	r0, r5
 8012330:	47b8      	blx	r7
 8012332:	3001      	adds	r0, #1
 8012334:	f43f af41 	beq.w	80121ba <_printf_float+0xc2>
 8012338:	f04f 0800 	mov.w	r8, #0
 801233c:	f104 091a 	add.w	r9, r4, #26
 8012340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012342:	3b01      	subs	r3, #1
 8012344:	4543      	cmp	r3, r8
 8012346:	dc09      	bgt.n	801235c <_printf_float+0x264>
 8012348:	6823      	ldr	r3, [r4, #0]
 801234a:	079b      	lsls	r3, r3, #30
 801234c:	f100 8105 	bmi.w	801255a <_printf_float+0x462>
 8012350:	68e0      	ldr	r0, [r4, #12]
 8012352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012354:	4298      	cmp	r0, r3
 8012356:	bfb8      	it	lt
 8012358:	4618      	movlt	r0, r3
 801235a:	e730      	b.n	80121be <_printf_float+0xc6>
 801235c:	2301      	movs	r3, #1
 801235e:	464a      	mov	r2, r9
 8012360:	4631      	mov	r1, r6
 8012362:	4628      	mov	r0, r5
 8012364:	47b8      	blx	r7
 8012366:	3001      	adds	r0, #1
 8012368:	f43f af27 	beq.w	80121ba <_printf_float+0xc2>
 801236c:	f108 0801 	add.w	r8, r8, #1
 8012370:	e7e6      	b.n	8012340 <_printf_float+0x248>
 8012372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012374:	2b00      	cmp	r3, #0
 8012376:	dc39      	bgt.n	80123ec <_printf_float+0x2f4>
 8012378:	4a1b      	ldr	r2, [pc, #108]	; (80123e8 <_printf_float+0x2f0>)
 801237a:	2301      	movs	r3, #1
 801237c:	4631      	mov	r1, r6
 801237e:	4628      	mov	r0, r5
 8012380:	47b8      	blx	r7
 8012382:	3001      	adds	r0, #1
 8012384:	f43f af19 	beq.w	80121ba <_printf_float+0xc2>
 8012388:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801238c:	4313      	orrs	r3, r2
 801238e:	d102      	bne.n	8012396 <_printf_float+0x29e>
 8012390:	6823      	ldr	r3, [r4, #0]
 8012392:	07d9      	lsls	r1, r3, #31
 8012394:	d5d8      	bpl.n	8012348 <_printf_float+0x250>
 8012396:	ee18 3a10 	vmov	r3, s16
 801239a:	4652      	mov	r2, sl
 801239c:	4631      	mov	r1, r6
 801239e:	4628      	mov	r0, r5
 80123a0:	47b8      	blx	r7
 80123a2:	3001      	adds	r0, #1
 80123a4:	f43f af09 	beq.w	80121ba <_printf_float+0xc2>
 80123a8:	f04f 0900 	mov.w	r9, #0
 80123ac:	f104 0a1a 	add.w	sl, r4, #26
 80123b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123b2:	425b      	negs	r3, r3
 80123b4:	454b      	cmp	r3, r9
 80123b6:	dc01      	bgt.n	80123bc <_printf_float+0x2c4>
 80123b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123ba:	e792      	b.n	80122e2 <_printf_float+0x1ea>
 80123bc:	2301      	movs	r3, #1
 80123be:	4652      	mov	r2, sl
 80123c0:	4631      	mov	r1, r6
 80123c2:	4628      	mov	r0, r5
 80123c4:	47b8      	blx	r7
 80123c6:	3001      	adds	r0, #1
 80123c8:	f43f aef7 	beq.w	80121ba <_printf_float+0xc2>
 80123cc:	f109 0901 	add.w	r9, r9, #1
 80123d0:	e7ee      	b.n	80123b0 <_printf_float+0x2b8>
 80123d2:	bf00      	nop
 80123d4:	7fefffff 	.word	0x7fefffff
 80123d8:	080153c0 	.word	0x080153c0
 80123dc:	080153c4 	.word	0x080153c4
 80123e0:	080153cc 	.word	0x080153cc
 80123e4:	080153c8 	.word	0x080153c8
 80123e8:	080153d0 	.word	0x080153d0
 80123ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80123f0:	429a      	cmp	r2, r3
 80123f2:	bfa8      	it	ge
 80123f4:	461a      	movge	r2, r3
 80123f6:	2a00      	cmp	r2, #0
 80123f8:	4691      	mov	r9, r2
 80123fa:	dc37      	bgt.n	801246c <_printf_float+0x374>
 80123fc:	f04f 0b00 	mov.w	fp, #0
 8012400:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012404:	f104 021a 	add.w	r2, r4, #26
 8012408:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801240a:	9305      	str	r3, [sp, #20]
 801240c:	eba3 0309 	sub.w	r3, r3, r9
 8012410:	455b      	cmp	r3, fp
 8012412:	dc33      	bgt.n	801247c <_printf_float+0x384>
 8012414:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012418:	429a      	cmp	r2, r3
 801241a:	db3b      	blt.n	8012494 <_printf_float+0x39c>
 801241c:	6823      	ldr	r3, [r4, #0]
 801241e:	07da      	lsls	r2, r3, #31
 8012420:	d438      	bmi.n	8012494 <_printf_float+0x39c>
 8012422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012424:	9a05      	ldr	r2, [sp, #20]
 8012426:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012428:	1a9a      	subs	r2, r3, r2
 801242a:	eba3 0901 	sub.w	r9, r3, r1
 801242e:	4591      	cmp	r9, r2
 8012430:	bfa8      	it	ge
 8012432:	4691      	movge	r9, r2
 8012434:	f1b9 0f00 	cmp.w	r9, #0
 8012438:	dc35      	bgt.n	80124a6 <_printf_float+0x3ae>
 801243a:	f04f 0800 	mov.w	r8, #0
 801243e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012442:	f104 0a1a 	add.w	sl, r4, #26
 8012446:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801244a:	1a9b      	subs	r3, r3, r2
 801244c:	eba3 0309 	sub.w	r3, r3, r9
 8012450:	4543      	cmp	r3, r8
 8012452:	f77f af79 	ble.w	8012348 <_printf_float+0x250>
 8012456:	2301      	movs	r3, #1
 8012458:	4652      	mov	r2, sl
 801245a:	4631      	mov	r1, r6
 801245c:	4628      	mov	r0, r5
 801245e:	47b8      	blx	r7
 8012460:	3001      	adds	r0, #1
 8012462:	f43f aeaa 	beq.w	80121ba <_printf_float+0xc2>
 8012466:	f108 0801 	add.w	r8, r8, #1
 801246a:	e7ec      	b.n	8012446 <_printf_float+0x34e>
 801246c:	4613      	mov	r3, r2
 801246e:	4631      	mov	r1, r6
 8012470:	4642      	mov	r2, r8
 8012472:	4628      	mov	r0, r5
 8012474:	47b8      	blx	r7
 8012476:	3001      	adds	r0, #1
 8012478:	d1c0      	bne.n	80123fc <_printf_float+0x304>
 801247a:	e69e      	b.n	80121ba <_printf_float+0xc2>
 801247c:	2301      	movs	r3, #1
 801247e:	4631      	mov	r1, r6
 8012480:	4628      	mov	r0, r5
 8012482:	9205      	str	r2, [sp, #20]
 8012484:	47b8      	blx	r7
 8012486:	3001      	adds	r0, #1
 8012488:	f43f ae97 	beq.w	80121ba <_printf_float+0xc2>
 801248c:	9a05      	ldr	r2, [sp, #20]
 801248e:	f10b 0b01 	add.w	fp, fp, #1
 8012492:	e7b9      	b.n	8012408 <_printf_float+0x310>
 8012494:	ee18 3a10 	vmov	r3, s16
 8012498:	4652      	mov	r2, sl
 801249a:	4631      	mov	r1, r6
 801249c:	4628      	mov	r0, r5
 801249e:	47b8      	blx	r7
 80124a0:	3001      	adds	r0, #1
 80124a2:	d1be      	bne.n	8012422 <_printf_float+0x32a>
 80124a4:	e689      	b.n	80121ba <_printf_float+0xc2>
 80124a6:	9a05      	ldr	r2, [sp, #20]
 80124a8:	464b      	mov	r3, r9
 80124aa:	4442      	add	r2, r8
 80124ac:	4631      	mov	r1, r6
 80124ae:	4628      	mov	r0, r5
 80124b0:	47b8      	blx	r7
 80124b2:	3001      	adds	r0, #1
 80124b4:	d1c1      	bne.n	801243a <_printf_float+0x342>
 80124b6:	e680      	b.n	80121ba <_printf_float+0xc2>
 80124b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80124ba:	2a01      	cmp	r2, #1
 80124bc:	dc01      	bgt.n	80124c2 <_printf_float+0x3ca>
 80124be:	07db      	lsls	r3, r3, #31
 80124c0:	d538      	bpl.n	8012534 <_printf_float+0x43c>
 80124c2:	2301      	movs	r3, #1
 80124c4:	4642      	mov	r2, r8
 80124c6:	4631      	mov	r1, r6
 80124c8:	4628      	mov	r0, r5
 80124ca:	47b8      	blx	r7
 80124cc:	3001      	adds	r0, #1
 80124ce:	f43f ae74 	beq.w	80121ba <_printf_float+0xc2>
 80124d2:	ee18 3a10 	vmov	r3, s16
 80124d6:	4652      	mov	r2, sl
 80124d8:	4631      	mov	r1, r6
 80124da:	4628      	mov	r0, r5
 80124dc:	47b8      	blx	r7
 80124de:	3001      	adds	r0, #1
 80124e0:	f43f ae6b 	beq.w	80121ba <_printf_float+0xc2>
 80124e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80124e8:	2200      	movs	r2, #0
 80124ea:	2300      	movs	r3, #0
 80124ec:	f7ee fb14 	bl	8000b18 <__aeabi_dcmpeq>
 80124f0:	b9d8      	cbnz	r0, 801252a <_printf_float+0x432>
 80124f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124f4:	f108 0201 	add.w	r2, r8, #1
 80124f8:	3b01      	subs	r3, #1
 80124fa:	4631      	mov	r1, r6
 80124fc:	4628      	mov	r0, r5
 80124fe:	47b8      	blx	r7
 8012500:	3001      	adds	r0, #1
 8012502:	d10e      	bne.n	8012522 <_printf_float+0x42a>
 8012504:	e659      	b.n	80121ba <_printf_float+0xc2>
 8012506:	2301      	movs	r3, #1
 8012508:	4652      	mov	r2, sl
 801250a:	4631      	mov	r1, r6
 801250c:	4628      	mov	r0, r5
 801250e:	47b8      	blx	r7
 8012510:	3001      	adds	r0, #1
 8012512:	f43f ae52 	beq.w	80121ba <_printf_float+0xc2>
 8012516:	f108 0801 	add.w	r8, r8, #1
 801251a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801251c:	3b01      	subs	r3, #1
 801251e:	4543      	cmp	r3, r8
 8012520:	dcf1      	bgt.n	8012506 <_printf_float+0x40e>
 8012522:	464b      	mov	r3, r9
 8012524:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012528:	e6dc      	b.n	80122e4 <_printf_float+0x1ec>
 801252a:	f04f 0800 	mov.w	r8, #0
 801252e:	f104 0a1a 	add.w	sl, r4, #26
 8012532:	e7f2      	b.n	801251a <_printf_float+0x422>
 8012534:	2301      	movs	r3, #1
 8012536:	4642      	mov	r2, r8
 8012538:	e7df      	b.n	80124fa <_printf_float+0x402>
 801253a:	2301      	movs	r3, #1
 801253c:	464a      	mov	r2, r9
 801253e:	4631      	mov	r1, r6
 8012540:	4628      	mov	r0, r5
 8012542:	47b8      	blx	r7
 8012544:	3001      	adds	r0, #1
 8012546:	f43f ae38 	beq.w	80121ba <_printf_float+0xc2>
 801254a:	f108 0801 	add.w	r8, r8, #1
 801254e:	68e3      	ldr	r3, [r4, #12]
 8012550:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012552:	1a5b      	subs	r3, r3, r1
 8012554:	4543      	cmp	r3, r8
 8012556:	dcf0      	bgt.n	801253a <_printf_float+0x442>
 8012558:	e6fa      	b.n	8012350 <_printf_float+0x258>
 801255a:	f04f 0800 	mov.w	r8, #0
 801255e:	f104 0919 	add.w	r9, r4, #25
 8012562:	e7f4      	b.n	801254e <_printf_float+0x456>

08012564 <_printf_common>:
 8012564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012568:	4616      	mov	r6, r2
 801256a:	4699      	mov	r9, r3
 801256c:	688a      	ldr	r2, [r1, #8]
 801256e:	690b      	ldr	r3, [r1, #16]
 8012570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012574:	4293      	cmp	r3, r2
 8012576:	bfb8      	it	lt
 8012578:	4613      	movlt	r3, r2
 801257a:	6033      	str	r3, [r6, #0]
 801257c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012580:	4607      	mov	r7, r0
 8012582:	460c      	mov	r4, r1
 8012584:	b10a      	cbz	r2, 801258a <_printf_common+0x26>
 8012586:	3301      	adds	r3, #1
 8012588:	6033      	str	r3, [r6, #0]
 801258a:	6823      	ldr	r3, [r4, #0]
 801258c:	0699      	lsls	r1, r3, #26
 801258e:	bf42      	ittt	mi
 8012590:	6833      	ldrmi	r3, [r6, #0]
 8012592:	3302      	addmi	r3, #2
 8012594:	6033      	strmi	r3, [r6, #0]
 8012596:	6825      	ldr	r5, [r4, #0]
 8012598:	f015 0506 	ands.w	r5, r5, #6
 801259c:	d106      	bne.n	80125ac <_printf_common+0x48>
 801259e:	f104 0a19 	add.w	sl, r4, #25
 80125a2:	68e3      	ldr	r3, [r4, #12]
 80125a4:	6832      	ldr	r2, [r6, #0]
 80125a6:	1a9b      	subs	r3, r3, r2
 80125a8:	42ab      	cmp	r3, r5
 80125aa:	dc26      	bgt.n	80125fa <_printf_common+0x96>
 80125ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80125b0:	1e13      	subs	r3, r2, #0
 80125b2:	6822      	ldr	r2, [r4, #0]
 80125b4:	bf18      	it	ne
 80125b6:	2301      	movne	r3, #1
 80125b8:	0692      	lsls	r2, r2, #26
 80125ba:	d42b      	bmi.n	8012614 <_printf_common+0xb0>
 80125bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80125c0:	4649      	mov	r1, r9
 80125c2:	4638      	mov	r0, r7
 80125c4:	47c0      	blx	r8
 80125c6:	3001      	adds	r0, #1
 80125c8:	d01e      	beq.n	8012608 <_printf_common+0xa4>
 80125ca:	6823      	ldr	r3, [r4, #0]
 80125cc:	68e5      	ldr	r5, [r4, #12]
 80125ce:	6832      	ldr	r2, [r6, #0]
 80125d0:	f003 0306 	and.w	r3, r3, #6
 80125d4:	2b04      	cmp	r3, #4
 80125d6:	bf08      	it	eq
 80125d8:	1aad      	subeq	r5, r5, r2
 80125da:	68a3      	ldr	r3, [r4, #8]
 80125dc:	6922      	ldr	r2, [r4, #16]
 80125de:	bf0c      	ite	eq
 80125e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80125e4:	2500      	movne	r5, #0
 80125e6:	4293      	cmp	r3, r2
 80125e8:	bfc4      	itt	gt
 80125ea:	1a9b      	subgt	r3, r3, r2
 80125ec:	18ed      	addgt	r5, r5, r3
 80125ee:	2600      	movs	r6, #0
 80125f0:	341a      	adds	r4, #26
 80125f2:	42b5      	cmp	r5, r6
 80125f4:	d11a      	bne.n	801262c <_printf_common+0xc8>
 80125f6:	2000      	movs	r0, #0
 80125f8:	e008      	b.n	801260c <_printf_common+0xa8>
 80125fa:	2301      	movs	r3, #1
 80125fc:	4652      	mov	r2, sl
 80125fe:	4649      	mov	r1, r9
 8012600:	4638      	mov	r0, r7
 8012602:	47c0      	blx	r8
 8012604:	3001      	adds	r0, #1
 8012606:	d103      	bne.n	8012610 <_printf_common+0xac>
 8012608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801260c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012610:	3501      	adds	r5, #1
 8012612:	e7c6      	b.n	80125a2 <_printf_common+0x3e>
 8012614:	18e1      	adds	r1, r4, r3
 8012616:	1c5a      	adds	r2, r3, #1
 8012618:	2030      	movs	r0, #48	; 0x30
 801261a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801261e:	4422      	add	r2, r4
 8012620:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012624:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012628:	3302      	adds	r3, #2
 801262a:	e7c7      	b.n	80125bc <_printf_common+0x58>
 801262c:	2301      	movs	r3, #1
 801262e:	4622      	mov	r2, r4
 8012630:	4649      	mov	r1, r9
 8012632:	4638      	mov	r0, r7
 8012634:	47c0      	blx	r8
 8012636:	3001      	adds	r0, #1
 8012638:	d0e6      	beq.n	8012608 <_printf_common+0xa4>
 801263a:	3601      	adds	r6, #1
 801263c:	e7d9      	b.n	80125f2 <_printf_common+0x8e>
	...

08012640 <_printf_i>:
 8012640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012644:	7e0f      	ldrb	r7, [r1, #24]
 8012646:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012648:	2f78      	cmp	r7, #120	; 0x78
 801264a:	4691      	mov	r9, r2
 801264c:	4680      	mov	r8, r0
 801264e:	460c      	mov	r4, r1
 8012650:	469a      	mov	sl, r3
 8012652:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012656:	d807      	bhi.n	8012668 <_printf_i+0x28>
 8012658:	2f62      	cmp	r7, #98	; 0x62
 801265a:	d80a      	bhi.n	8012672 <_printf_i+0x32>
 801265c:	2f00      	cmp	r7, #0
 801265e:	f000 80d8 	beq.w	8012812 <_printf_i+0x1d2>
 8012662:	2f58      	cmp	r7, #88	; 0x58
 8012664:	f000 80a3 	beq.w	80127ae <_printf_i+0x16e>
 8012668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801266c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012670:	e03a      	b.n	80126e8 <_printf_i+0xa8>
 8012672:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012676:	2b15      	cmp	r3, #21
 8012678:	d8f6      	bhi.n	8012668 <_printf_i+0x28>
 801267a:	a101      	add	r1, pc, #4	; (adr r1, 8012680 <_printf_i+0x40>)
 801267c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012680:	080126d9 	.word	0x080126d9
 8012684:	080126ed 	.word	0x080126ed
 8012688:	08012669 	.word	0x08012669
 801268c:	08012669 	.word	0x08012669
 8012690:	08012669 	.word	0x08012669
 8012694:	08012669 	.word	0x08012669
 8012698:	080126ed 	.word	0x080126ed
 801269c:	08012669 	.word	0x08012669
 80126a0:	08012669 	.word	0x08012669
 80126a4:	08012669 	.word	0x08012669
 80126a8:	08012669 	.word	0x08012669
 80126ac:	080127f9 	.word	0x080127f9
 80126b0:	0801271d 	.word	0x0801271d
 80126b4:	080127db 	.word	0x080127db
 80126b8:	08012669 	.word	0x08012669
 80126bc:	08012669 	.word	0x08012669
 80126c0:	0801281b 	.word	0x0801281b
 80126c4:	08012669 	.word	0x08012669
 80126c8:	0801271d 	.word	0x0801271d
 80126cc:	08012669 	.word	0x08012669
 80126d0:	08012669 	.word	0x08012669
 80126d4:	080127e3 	.word	0x080127e3
 80126d8:	682b      	ldr	r3, [r5, #0]
 80126da:	1d1a      	adds	r2, r3, #4
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	602a      	str	r2, [r5, #0]
 80126e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80126e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80126e8:	2301      	movs	r3, #1
 80126ea:	e0a3      	b.n	8012834 <_printf_i+0x1f4>
 80126ec:	6820      	ldr	r0, [r4, #0]
 80126ee:	6829      	ldr	r1, [r5, #0]
 80126f0:	0606      	lsls	r6, r0, #24
 80126f2:	f101 0304 	add.w	r3, r1, #4
 80126f6:	d50a      	bpl.n	801270e <_printf_i+0xce>
 80126f8:	680e      	ldr	r6, [r1, #0]
 80126fa:	602b      	str	r3, [r5, #0]
 80126fc:	2e00      	cmp	r6, #0
 80126fe:	da03      	bge.n	8012708 <_printf_i+0xc8>
 8012700:	232d      	movs	r3, #45	; 0x2d
 8012702:	4276      	negs	r6, r6
 8012704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012708:	485e      	ldr	r0, [pc, #376]	; (8012884 <_printf_i+0x244>)
 801270a:	230a      	movs	r3, #10
 801270c:	e019      	b.n	8012742 <_printf_i+0x102>
 801270e:	680e      	ldr	r6, [r1, #0]
 8012710:	602b      	str	r3, [r5, #0]
 8012712:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012716:	bf18      	it	ne
 8012718:	b236      	sxthne	r6, r6
 801271a:	e7ef      	b.n	80126fc <_printf_i+0xbc>
 801271c:	682b      	ldr	r3, [r5, #0]
 801271e:	6820      	ldr	r0, [r4, #0]
 8012720:	1d19      	adds	r1, r3, #4
 8012722:	6029      	str	r1, [r5, #0]
 8012724:	0601      	lsls	r1, r0, #24
 8012726:	d501      	bpl.n	801272c <_printf_i+0xec>
 8012728:	681e      	ldr	r6, [r3, #0]
 801272a:	e002      	b.n	8012732 <_printf_i+0xf2>
 801272c:	0646      	lsls	r6, r0, #25
 801272e:	d5fb      	bpl.n	8012728 <_printf_i+0xe8>
 8012730:	881e      	ldrh	r6, [r3, #0]
 8012732:	4854      	ldr	r0, [pc, #336]	; (8012884 <_printf_i+0x244>)
 8012734:	2f6f      	cmp	r7, #111	; 0x6f
 8012736:	bf0c      	ite	eq
 8012738:	2308      	moveq	r3, #8
 801273a:	230a      	movne	r3, #10
 801273c:	2100      	movs	r1, #0
 801273e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012742:	6865      	ldr	r5, [r4, #4]
 8012744:	60a5      	str	r5, [r4, #8]
 8012746:	2d00      	cmp	r5, #0
 8012748:	bfa2      	ittt	ge
 801274a:	6821      	ldrge	r1, [r4, #0]
 801274c:	f021 0104 	bicge.w	r1, r1, #4
 8012750:	6021      	strge	r1, [r4, #0]
 8012752:	b90e      	cbnz	r6, 8012758 <_printf_i+0x118>
 8012754:	2d00      	cmp	r5, #0
 8012756:	d04d      	beq.n	80127f4 <_printf_i+0x1b4>
 8012758:	4615      	mov	r5, r2
 801275a:	fbb6 f1f3 	udiv	r1, r6, r3
 801275e:	fb03 6711 	mls	r7, r3, r1, r6
 8012762:	5dc7      	ldrb	r7, [r0, r7]
 8012764:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012768:	4637      	mov	r7, r6
 801276a:	42bb      	cmp	r3, r7
 801276c:	460e      	mov	r6, r1
 801276e:	d9f4      	bls.n	801275a <_printf_i+0x11a>
 8012770:	2b08      	cmp	r3, #8
 8012772:	d10b      	bne.n	801278c <_printf_i+0x14c>
 8012774:	6823      	ldr	r3, [r4, #0]
 8012776:	07de      	lsls	r6, r3, #31
 8012778:	d508      	bpl.n	801278c <_printf_i+0x14c>
 801277a:	6923      	ldr	r3, [r4, #16]
 801277c:	6861      	ldr	r1, [r4, #4]
 801277e:	4299      	cmp	r1, r3
 8012780:	bfde      	ittt	le
 8012782:	2330      	movle	r3, #48	; 0x30
 8012784:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012788:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801278c:	1b52      	subs	r2, r2, r5
 801278e:	6122      	str	r2, [r4, #16]
 8012790:	f8cd a000 	str.w	sl, [sp]
 8012794:	464b      	mov	r3, r9
 8012796:	aa03      	add	r2, sp, #12
 8012798:	4621      	mov	r1, r4
 801279a:	4640      	mov	r0, r8
 801279c:	f7ff fee2 	bl	8012564 <_printf_common>
 80127a0:	3001      	adds	r0, #1
 80127a2:	d14c      	bne.n	801283e <_printf_i+0x1fe>
 80127a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80127a8:	b004      	add	sp, #16
 80127aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127ae:	4835      	ldr	r0, [pc, #212]	; (8012884 <_printf_i+0x244>)
 80127b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80127b4:	6829      	ldr	r1, [r5, #0]
 80127b6:	6823      	ldr	r3, [r4, #0]
 80127b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80127bc:	6029      	str	r1, [r5, #0]
 80127be:	061d      	lsls	r5, r3, #24
 80127c0:	d514      	bpl.n	80127ec <_printf_i+0x1ac>
 80127c2:	07df      	lsls	r7, r3, #31
 80127c4:	bf44      	itt	mi
 80127c6:	f043 0320 	orrmi.w	r3, r3, #32
 80127ca:	6023      	strmi	r3, [r4, #0]
 80127cc:	b91e      	cbnz	r6, 80127d6 <_printf_i+0x196>
 80127ce:	6823      	ldr	r3, [r4, #0]
 80127d0:	f023 0320 	bic.w	r3, r3, #32
 80127d4:	6023      	str	r3, [r4, #0]
 80127d6:	2310      	movs	r3, #16
 80127d8:	e7b0      	b.n	801273c <_printf_i+0xfc>
 80127da:	6823      	ldr	r3, [r4, #0]
 80127dc:	f043 0320 	orr.w	r3, r3, #32
 80127e0:	6023      	str	r3, [r4, #0]
 80127e2:	2378      	movs	r3, #120	; 0x78
 80127e4:	4828      	ldr	r0, [pc, #160]	; (8012888 <_printf_i+0x248>)
 80127e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80127ea:	e7e3      	b.n	80127b4 <_printf_i+0x174>
 80127ec:	0659      	lsls	r1, r3, #25
 80127ee:	bf48      	it	mi
 80127f0:	b2b6      	uxthmi	r6, r6
 80127f2:	e7e6      	b.n	80127c2 <_printf_i+0x182>
 80127f4:	4615      	mov	r5, r2
 80127f6:	e7bb      	b.n	8012770 <_printf_i+0x130>
 80127f8:	682b      	ldr	r3, [r5, #0]
 80127fa:	6826      	ldr	r6, [r4, #0]
 80127fc:	6961      	ldr	r1, [r4, #20]
 80127fe:	1d18      	adds	r0, r3, #4
 8012800:	6028      	str	r0, [r5, #0]
 8012802:	0635      	lsls	r5, r6, #24
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	d501      	bpl.n	801280c <_printf_i+0x1cc>
 8012808:	6019      	str	r1, [r3, #0]
 801280a:	e002      	b.n	8012812 <_printf_i+0x1d2>
 801280c:	0670      	lsls	r0, r6, #25
 801280e:	d5fb      	bpl.n	8012808 <_printf_i+0x1c8>
 8012810:	8019      	strh	r1, [r3, #0]
 8012812:	2300      	movs	r3, #0
 8012814:	6123      	str	r3, [r4, #16]
 8012816:	4615      	mov	r5, r2
 8012818:	e7ba      	b.n	8012790 <_printf_i+0x150>
 801281a:	682b      	ldr	r3, [r5, #0]
 801281c:	1d1a      	adds	r2, r3, #4
 801281e:	602a      	str	r2, [r5, #0]
 8012820:	681d      	ldr	r5, [r3, #0]
 8012822:	6862      	ldr	r2, [r4, #4]
 8012824:	2100      	movs	r1, #0
 8012826:	4628      	mov	r0, r5
 8012828:	f7ed fd02 	bl	8000230 <memchr>
 801282c:	b108      	cbz	r0, 8012832 <_printf_i+0x1f2>
 801282e:	1b40      	subs	r0, r0, r5
 8012830:	6060      	str	r0, [r4, #4]
 8012832:	6863      	ldr	r3, [r4, #4]
 8012834:	6123      	str	r3, [r4, #16]
 8012836:	2300      	movs	r3, #0
 8012838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801283c:	e7a8      	b.n	8012790 <_printf_i+0x150>
 801283e:	6923      	ldr	r3, [r4, #16]
 8012840:	462a      	mov	r2, r5
 8012842:	4649      	mov	r1, r9
 8012844:	4640      	mov	r0, r8
 8012846:	47d0      	blx	sl
 8012848:	3001      	adds	r0, #1
 801284a:	d0ab      	beq.n	80127a4 <_printf_i+0x164>
 801284c:	6823      	ldr	r3, [r4, #0]
 801284e:	079b      	lsls	r3, r3, #30
 8012850:	d413      	bmi.n	801287a <_printf_i+0x23a>
 8012852:	68e0      	ldr	r0, [r4, #12]
 8012854:	9b03      	ldr	r3, [sp, #12]
 8012856:	4298      	cmp	r0, r3
 8012858:	bfb8      	it	lt
 801285a:	4618      	movlt	r0, r3
 801285c:	e7a4      	b.n	80127a8 <_printf_i+0x168>
 801285e:	2301      	movs	r3, #1
 8012860:	4632      	mov	r2, r6
 8012862:	4649      	mov	r1, r9
 8012864:	4640      	mov	r0, r8
 8012866:	47d0      	blx	sl
 8012868:	3001      	adds	r0, #1
 801286a:	d09b      	beq.n	80127a4 <_printf_i+0x164>
 801286c:	3501      	adds	r5, #1
 801286e:	68e3      	ldr	r3, [r4, #12]
 8012870:	9903      	ldr	r1, [sp, #12]
 8012872:	1a5b      	subs	r3, r3, r1
 8012874:	42ab      	cmp	r3, r5
 8012876:	dcf2      	bgt.n	801285e <_printf_i+0x21e>
 8012878:	e7eb      	b.n	8012852 <_printf_i+0x212>
 801287a:	2500      	movs	r5, #0
 801287c:	f104 0619 	add.w	r6, r4, #25
 8012880:	e7f5      	b.n	801286e <_printf_i+0x22e>
 8012882:	bf00      	nop
 8012884:	080153d2 	.word	0x080153d2
 8012888:	080153e3 	.word	0x080153e3

0801288c <iprintf>:
 801288c:	b40f      	push	{r0, r1, r2, r3}
 801288e:	4b0a      	ldr	r3, [pc, #40]	; (80128b8 <iprintf+0x2c>)
 8012890:	b513      	push	{r0, r1, r4, lr}
 8012892:	681c      	ldr	r4, [r3, #0]
 8012894:	b124      	cbz	r4, 80128a0 <iprintf+0x14>
 8012896:	69a3      	ldr	r3, [r4, #24]
 8012898:	b913      	cbnz	r3, 80128a0 <iprintf+0x14>
 801289a:	4620      	mov	r0, r4
 801289c:	f001 f92c 	bl	8013af8 <__sinit>
 80128a0:	ab05      	add	r3, sp, #20
 80128a2:	9a04      	ldr	r2, [sp, #16]
 80128a4:	68a1      	ldr	r1, [r4, #8]
 80128a6:	9301      	str	r3, [sp, #4]
 80128a8:	4620      	mov	r0, r4
 80128aa:	f002 f837 	bl	801491c <_vfiprintf_r>
 80128ae:	b002      	add	sp, #8
 80128b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128b4:	b004      	add	sp, #16
 80128b6:	4770      	bx	lr
 80128b8:	20000188 	.word	0x20000188

080128bc <_puts_r>:
 80128bc:	b570      	push	{r4, r5, r6, lr}
 80128be:	460e      	mov	r6, r1
 80128c0:	4605      	mov	r5, r0
 80128c2:	b118      	cbz	r0, 80128cc <_puts_r+0x10>
 80128c4:	6983      	ldr	r3, [r0, #24]
 80128c6:	b90b      	cbnz	r3, 80128cc <_puts_r+0x10>
 80128c8:	f001 f916 	bl	8013af8 <__sinit>
 80128cc:	69ab      	ldr	r3, [r5, #24]
 80128ce:	68ac      	ldr	r4, [r5, #8]
 80128d0:	b913      	cbnz	r3, 80128d8 <_puts_r+0x1c>
 80128d2:	4628      	mov	r0, r5
 80128d4:	f001 f910 	bl	8013af8 <__sinit>
 80128d8:	4b2c      	ldr	r3, [pc, #176]	; (801298c <_puts_r+0xd0>)
 80128da:	429c      	cmp	r4, r3
 80128dc:	d120      	bne.n	8012920 <_puts_r+0x64>
 80128de:	686c      	ldr	r4, [r5, #4]
 80128e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80128e2:	07db      	lsls	r3, r3, #31
 80128e4:	d405      	bmi.n	80128f2 <_puts_r+0x36>
 80128e6:	89a3      	ldrh	r3, [r4, #12]
 80128e8:	0598      	lsls	r0, r3, #22
 80128ea:	d402      	bmi.n	80128f2 <_puts_r+0x36>
 80128ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128ee:	f001 f9a6 	bl	8013c3e <__retarget_lock_acquire_recursive>
 80128f2:	89a3      	ldrh	r3, [r4, #12]
 80128f4:	0719      	lsls	r1, r3, #28
 80128f6:	d51d      	bpl.n	8012934 <_puts_r+0x78>
 80128f8:	6923      	ldr	r3, [r4, #16]
 80128fa:	b1db      	cbz	r3, 8012934 <_puts_r+0x78>
 80128fc:	3e01      	subs	r6, #1
 80128fe:	68a3      	ldr	r3, [r4, #8]
 8012900:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012904:	3b01      	subs	r3, #1
 8012906:	60a3      	str	r3, [r4, #8]
 8012908:	bb39      	cbnz	r1, 801295a <_puts_r+0x9e>
 801290a:	2b00      	cmp	r3, #0
 801290c:	da38      	bge.n	8012980 <_puts_r+0xc4>
 801290e:	4622      	mov	r2, r4
 8012910:	210a      	movs	r1, #10
 8012912:	4628      	mov	r0, r5
 8012914:	f000 f89c 	bl	8012a50 <__swbuf_r>
 8012918:	3001      	adds	r0, #1
 801291a:	d011      	beq.n	8012940 <_puts_r+0x84>
 801291c:	250a      	movs	r5, #10
 801291e:	e011      	b.n	8012944 <_puts_r+0x88>
 8012920:	4b1b      	ldr	r3, [pc, #108]	; (8012990 <_puts_r+0xd4>)
 8012922:	429c      	cmp	r4, r3
 8012924:	d101      	bne.n	801292a <_puts_r+0x6e>
 8012926:	68ac      	ldr	r4, [r5, #8]
 8012928:	e7da      	b.n	80128e0 <_puts_r+0x24>
 801292a:	4b1a      	ldr	r3, [pc, #104]	; (8012994 <_puts_r+0xd8>)
 801292c:	429c      	cmp	r4, r3
 801292e:	bf08      	it	eq
 8012930:	68ec      	ldreq	r4, [r5, #12]
 8012932:	e7d5      	b.n	80128e0 <_puts_r+0x24>
 8012934:	4621      	mov	r1, r4
 8012936:	4628      	mov	r0, r5
 8012938:	f000 f8dc 	bl	8012af4 <__swsetup_r>
 801293c:	2800      	cmp	r0, #0
 801293e:	d0dd      	beq.n	80128fc <_puts_r+0x40>
 8012940:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8012944:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012946:	07da      	lsls	r2, r3, #31
 8012948:	d405      	bmi.n	8012956 <_puts_r+0x9a>
 801294a:	89a3      	ldrh	r3, [r4, #12]
 801294c:	059b      	lsls	r3, r3, #22
 801294e:	d402      	bmi.n	8012956 <_puts_r+0x9a>
 8012950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012952:	f001 f975 	bl	8013c40 <__retarget_lock_release_recursive>
 8012956:	4628      	mov	r0, r5
 8012958:	bd70      	pop	{r4, r5, r6, pc}
 801295a:	2b00      	cmp	r3, #0
 801295c:	da04      	bge.n	8012968 <_puts_r+0xac>
 801295e:	69a2      	ldr	r2, [r4, #24]
 8012960:	429a      	cmp	r2, r3
 8012962:	dc06      	bgt.n	8012972 <_puts_r+0xb6>
 8012964:	290a      	cmp	r1, #10
 8012966:	d004      	beq.n	8012972 <_puts_r+0xb6>
 8012968:	6823      	ldr	r3, [r4, #0]
 801296a:	1c5a      	adds	r2, r3, #1
 801296c:	6022      	str	r2, [r4, #0]
 801296e:	7019      	strb	r1, [r3, #0]
 8012970:	e7c5      	b.n	80128fe <_puts_r+0x42>
 8012972:	4622      	mov	r2, r4
 8012974:	4628      	mov	r0, r5
 8012976:	f000 f86b 	bl	8012a50 <__swbuf_r>
 801297a:	3001      	adds	r0, #1
 801297c:	d1bf      	bne.n	80128fe <_puts_r+0x42>
 801297e:	e7df      	b.n	8012940 <_puts_r+0x84>
 8012980:	6823      	ldr	r3, [r4, #0]
 8012982:	250a      	movs	r5, #10
 8012984:	1c5a      	adds	r2, r3, #1
 8012986:	6022      	str	r2, [r4, #0]
 8012988:	701d      	strb	r5, [r3, #0]
 801298a:	e7db      	b.n	8012944 <_puts_r+0x88>
 801298c:	080154a4 	.word	0x080154a4
 8012990:	080154c4 	.word	0x080154c4
 8012994:	08015484 	.word	0x08015484

08012998 <puts>:
 8012998:	4b02      	ldr	r3, [pc, #8]	; (80129a4 <puts+0xc>)
 801299a:	4601      	mov	r1, r0
 801299c:	6818      	ldr	r0, [r3, #0]
 801299e:	f7ff bf8d 	b.w	80128bc <_puts_r>
 80129a2:	bf00      	nop
 80129a4:	20000188 	.word	0x20000188

080129a8 <sniprintf>:
 80129a8:	b40c      	push	{r2, r3}
 80129aa:	b530      	push	{r4, r5, lr}
 80129ac:	4b17      	ldr	r3, [pc, #92]	; (8012a0c <sniprintf+0x64>)
 80129ae:	1e0c      	subs	r4, r1, #0
 80129b0:	681d      	ldr	r5, [r3, #0]
 80129b2:	b09d      	sub	sp, #116	; 0x74
 80129b4:	da08      	bge.n	80129c8 <sniprintf+0x20>
 80129b6:	238b      	movs	r3, #139	; 0x8b
 80129b8:	602b      	str	r3, [r5, #0]
 80129ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80129be:	b01d      	add	sp, #116	; 0x74
 80129c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80129c4:	b002      	add	sp, #8
 80129c6:	4770      	bx	lr
 80129c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80129cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80129d0:	bf14      	ite	ne
 80129d2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80129d6:	4623      	moveq	r3, r4
 80129d8:	9304      	str	r3, [sp, #16]
 80129da:	9307      	str	r3, [sp, #28]
 80129dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80129e0:	9002      	str	r0, [sp, #8]
 80129e2:	9006      	str	r0, [sp, #24]
 80129e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80129e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80129ea:	ab21      	add	r3, sp, #132	; 0x84
 80129ec:	a902      	add	r1, sp, #8
 80129ee:	4628      	mov	r0, r5
 80129f0:	9301      	str	r3, [sp, #4]
 80129f2:	f001 fe69 	bl	80146c8 <_svfiprintf_r>
 80129f6:	1c43      	adds	r3, r0, #1
 80129f8:	bfbc      	itt	lt
 80129fa:	238b      	movlt	r3, #139	; 0x8b
 80129fc:	602b      	strlt	r3, [r5, #0]
 80129fe:	2c00      	cmp	r4, #0
 8012a00:	d0dd      	beq.n	80129be <sniprintf+0x16>
 8012a02:	9b02      	ldr	r3, [sp, #8]
 8012a04:	2200      	movs	r2, #0
 8012a06:	701a      	strb	r2, [r3, #0]
 8012a08:	e7d9      	b.n	80129be <sniprintf+0x16>
 8012a0a:	bf00      	nop
 8012a0c:	20000188 	.word	0x20000188

08012a10 <siprintf>:
 8012a10:	b40e      	push	{r1, r2, r3}
 8012a12:	b500      	push	{lr}
 8012a14:	b09c      	sub	sp, #112	; 0x70
 8012a16:	ab1d      	add	r3, sp, #116	; 0x74
 8012a18:	9002      	str	r0, [sp, #8]
 8012a1a:	9006      	str	r0, [sp, #24]
 8012a1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012a20:	4809      	ldr	r0, [pc, #36]	; (8012a48 <siprintf+0x38>)
 8012a22:	9107      	str	r1, [sp, #28]
 8012a24:	9104      	str	r1, [sp, #16]
 8012a26:	4909      	ldr	r1, [pc, #36]	; (8012a4c <siprintf+0x3c>)
 8012a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a2c:	9105      	str	r1, [sp, #20]
 8012a2e:	6800      	ldr	r0, [r0, #0]
 8012a30:	9301      	str	r3, [sp, #4]
 8012a32:	a902      	add	r1, sp, #8
 8012a34:	f001 fe48 	bl	80146c8 <_svfiprintf_r>
 8012a38:	9b02      	ldr	r3, [sp, #8]
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	701a      	strb	r2, [r3, #0]
 8012a3e:	b01c      	add	sp, #112	; 0x70
 8012a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8012a44:	b003      	add	sp, #12
 8012a46:	4770      	bx	lr
 8012a48:	20000188 	.word	0x20000188
 8012a4c:	ffff0208 	.word	0xffff0208

08012a50 <__swbuf_r>:
 8012a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a52:	460e      	mov	r6, r1
 8012a54:	4614      	mov	r4, r2
 8012a56:	4605      	mov	r5, r0
 8012a58:	b118      	cbz	r0, 8012a62 <__swbuf_r+0x12>
 8012a5a:	6983      	ldr	r3, [r0, #24]
 8012a5c:	b90b      	cbnz	r3, 8012a62 <__swbuf_r+0x12>
 8012a5e:	f001 f84b 	bl	8013af8 <__sinit>
 8012a62:	4b21      	ldr	r3, [pc, #132]	; (8012ae8 <__swbuf_r+0x98>)
 8012a64:	429c      	cmp	r4, r3
 8012a66:	d12b      	bne.n	8012ac0 <__swbuf_r+0x70>
 8012a68:	686c      	ldr	r4, [r5, #4]
 8012a6a:	69a3      	ldr	r3, [r4, #24]
 8012a6c:	60a3      	str	r3, [r4, #8]
 8012a6e:	89a3      	ldrh	r3, [r4, #12]
 8012a70:	071a      	lsls	r2, r3, #28
 8012a72:	d52f      	bpl.n	8012ad4 <__swbuf_r+0x84>
 8012a74:	6923      	ldr	r3, [r4, #16]
 8012a76:	b36b      	cbz	r3, 8012ad4 <__swbuf_r+0x84>
 8012a78:	6923      	ldr	r3, [r4, #16]
 8012a7a:	6820      	ldr	r0, [r4, #0]
 8012a7c:	1ac0      	subs	r0, r0, r3
 8012a7e:	6963      	ldr	r3, [r4, #20]
 8012a80:	b2f6      	uxtb	r6, r6
 8012a82:	4283      	cmp	r3, r0
 8012a84:	4637      	mov	r7, r6
 8012a86:	dc04      	bgt.n	8012a92 <__swbuf_r+0x42>
 8012a88:	4621      	mov	r1, r4
 8012a8a:	4628      	mov	r0, r5
 8012a8c:	f000 ffa0 	bl	80139d0 <_fflush_r>
 8012a90:	bb30      	cbnz	r0, 8012ae0 <__swbuf_r+0x90>
 8012a92:	68a3      	ldr	r3, [r4, #8]
 8012a94:	3b01      	subs	r3, #1
 8012a96:	60a3      	str	r3, [r4, #8]
 8012a98:	6823      	ldr	r3, [r4, #0]
 8012a9a:	1c5a      	adds	r2, r3, #1
 8012a9c:	6022      	str	r2, [r4, #0]
 8012a9e:	701e      	strb	r6, [r3, #0]
 8012aa0:	6963      	ldr	r3, [r4, #20]
 8012aa2:	3001      	adds	r0, #1
 8012aa4:	4283      	cmp	r3, r0
 8012aa6:	d004      	beq.n	8012ab2 <__swbuf_r+0x62>
 8012aa8:	89a3      	ldrh	r3, [r4, #12]
 8012aaa:	07db      	lsls	r3, r3, #31
 8012aac:	d506      	bpl.n	8012abc <__swbuf_r+0x6c>
 8012aae:	2e0a      	cmp	r6, #10
 8012ab0:	d104      	bne.n	8012abc <__swbuf_r+0x6c>
 8012ab2:	4621      	mov	r1, r4
 8012ab4:	4628      	mov	r0, r5
 8012ab6:	f000 ff8b 	bl	80139d0 <_fflush_r>
 8012aba:	b988      	cbnz	r0, 8012ae0 <__swbuf_r+0x90>
 8012abc:	4638      	mov	r0, r7
 8012abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ac0:	4b0a      	ldr	r3, [pc, #40]	; (8012aec <__swbuf_r+0x9c>)
 8012ac2:	429c      	cmp	r4, r3
 8012ac4:	d101      	bne.n	8012aca <__swbuf_r+0x7a>
 8012ac6:	68ac      	ldr	r4, [r5, #8]
 8012ac8:	e7cf      	b.n	8012a6a <__swbuf_r+0x1a>
 8012aca:	4b09      	ldr	r3, [pc, #36]	; (8012af0 <__swbuf_r+0xa0>)
 8012acc:	429c      	cmp	r4, r3
 8012ace:	bf08      	it	eq
 8012ad0:	68ec      	ldreq	r4, [r5, #12]
 8012ad2:	e7ca      	b.n	8012a6a <__swbuf_r+0x1a>
 8012ad4:	4621      	mov	r1, r4
 8012ad6:	4628      	mov	r0, r5
 8012ad8:	f000 f80c 	bl	8012af4 <__swsetup_r>
 8012adc:	2800      	cmp	r0, #0
 8012ade:	d0cb      	beq.n	8012a78 <__swbuf_r+0x28>
 8012ae0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012ae4:	e7ea      	b.n	8012abc <__swbuf_r+0x6c>
 8012ae6:	bf00      	nop
 8012ae8:	080154a4 	.word	0x080154a4
 8012aec:	080154c4 	.word	0x080154c4
 8012af0:	08015484 	.word	0x08015484

08012af4 <__swsetup_r>:
 8012af4:	4b32      	ldr	r3, [pc, #200]	; (8012bc0 <__swsetup_r+0xcc>)
 8012af6:	b570      	push	{r4, r5, r6, lr}
 8012af8:	681d      	ldr	r5, [r3, #0]
 8012afa:	4606      	mov	r6, r0
 8012afc:	460c      	mov	r4, r1
 8012afe:	b125      	cbz	r5, 8012b0a <__swsetup_r+0x16>
 8012b00:	69ab      	ldr	r3, [r5, #24]
 8012b02:	b913      	cbnz	r3, 8012b0a <__swsetup_r+0x16>
 8012b04:	4628      	mov	r0, r5
 8012b06:	f000 fff7 	bl	8013af8 <__sinit>
 8012b0a:	4b2e      	ldr	r3, [pc, #184]	; (8012bc4 <__swsetup_r+0xd0>)
 8012b0c:	429c      	cmp	r4, r3
 8012b0e:	d10f      	bne.n	8012b30 <__swsetup_r+0x3c>
 8012b10:	686c      	ldr	r4, [r5, #4]
 8012b12:	89a3      	ldrh	r3, [r4, #12]
 8012b14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012b18:	0719      	lsls	r1, r3, #28
 8012b1a:	d42c      	bmi.n	8012b76 <__swsetup_r+0x82>
 8012b1c:	06dd      	lsls	r5, r3, #27
 8012b1e:	d411      	bmi.n	8012b44 <__swsetup_r+0x50>
 8012b20:	2309      	movs	r3, #9
 8012b22:	6033      	str	r3, [r6, #0]
 8012b24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012b28:	81a3      	strh	r3, [r4, #12]
 8012b2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b2e:	e03e      	b.n	8012bae <__swsetup_r+0xba>
 8012b30:	4b25      	ldr	r3, [pc, #148]	; (8012bc8 <__swsetup_r+0xd4>)
 8012b32:	429c      	cmp	r4, r3
 8012b34:	d101      	bne.n	8012b3a <__swsetup_r+0x46>
 8012b36:	68ac      	ldr	r4, [r5, #8]
 8012b38:	e7eb      	b.n	8012b12 <__swsetup_r+0x1e>
 8012b3a:	4b24      	ldr	r3, [pc, #144]	; (8012bcc <__swsetup_r+0xd8>)
 8012b3c:	429c      	cmp	r4, r3
 8012b3e:	bf08      	it	eq
 8012b40:	68ec      	ldreq	r4, [r5, #12]
 8012b42:	e7e6      	b.n	8012b12 <__swsetup_r+0x1e>
 8012b44:	0758      	lsls	r0, r3, #29
 8012b46:	d512      	bpl.n	8012b6e <__swsetup_r+0x7a>
 8012b48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012b4a:	b141      	cbz	r1, 8012b5e <__swsetup_r+0x6a>
 8012b4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012b50:	4299      	cmp	r1, r3
 8012b52:	d002      	beq.n	8012b5a <__swsetup_r+0x66>
 8012b54:	4630      	mov	r0, r6
 8012b56:	f001 fc7b 	bl	8014450 <_free_r>
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	6363      	str	r3, [r4, #52]	; 0x34
 8012b5e:	89a3      	ldrh	r3, [r4, #12]
 8012b60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012b64:	81a3      	strh	r3, [r4, #12]
 8012b66:	2300      	movs	r3, #0
 8012b68:	6063      	str	r3, [r4, #4]
 8012b6a:	6923      	ldr	r3, [r4, #16]
 8012b6c:	6023      	str	r3, [r4, #0]
 8012b6e:	89a3      	ldrh	r3, [r4, #12]
 8012b70:	f043 0308 	orr.w	r3, r3, #8
 8012b74:	81a3      	strh	r3, [r4, #12]
 8012b76:	6923      	ldr	r3, [r4, #16]
 8012b78:	b94b      	cbnz	r3, 8012b8e <__swsetup_r+0x9a>
 8012b7a:	89a3      	ldrh	r3, [r4, #12]
 8012b7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b84:	d003      	beq.n	8012b8e <__swsetup_r+0x9a>
 8012b86:	4621      	mov	r1, r4
 8012b88:	4630      	mov	r0, r6
 8012b8a:	f001 f87f 	bl	8013c8c <__smakebuf_r>
 8012b8e:	89a0      	ldrh	r0, [r4, #12]
 8012b90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012b94:	f010 0301 	ands.w	r3, r0, #1
 8012b98:	d00a      	beq.n	8012bb0 <__swsetup_r+0xbc>
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	60a3      	str	r3, [r4, #8]
 8012b9e:	6963      	ldr	r3, [r4, #20]
 8012ba0:	425b      	negs	r3, r3
 8012ba2:	61a3      	str	r3, [r4, #24]
 8012ba4:	6923      	ldr	r3, [r4, #16]
 8012ba6:	b943      	cbnz	r3, 8012bba <__swsetup_r+0xc6>
 8012ba8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012bac:	d1ba      	bne.n	8012b24 <__swsetup_r+0x30>
 8012bae:	bd70      	pop	{r4, r5, r6, pc}
 8012bb0:	0781      	lsls	r1, r0, #30
 8012bb2:	bf58      	it	pl
 8012bb4:	6963      	ldrpl	r3, [r4, #20]
 8012bb6:	60a3      	str	r3, [r4, #8]
 8012bb8:	e7f4      	b.n	8012ba4 <__swsetup_r+0xb0>
 8012bba:	2000      	movs	r0, #0
 8012bbc:	e7f7      	b.n	8012bae <__swsetup_r+0xba>
 8012bbe:	bf00      	nop
 8012bc0:	20000188 	.word	0x20000188
 8012bc4:	080154a4 	.word	0x080154a4
 8012bc8:	080154c4 	.word	0x080154c4
 8012bcc:	08015484 	.word	0x08015484

08012bd0 <quorem>:
 8012bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bd4:	6903      	ldr	r3, [r0, #16]
 8012bd6:	690c      	ldr	r4, [r1, #16]
 8012bd8:	42a3      	cmp	r3, r4
 8012bda:	4607      	mov	r7, r0
 8012bdc:	f2c0 8081 	blt.w	8012ce2 <quorem+0x112>
 8012be0:	3c01      	subs	r4, #1
 8012be2:	f101 0814 	add.w	r8, r1, #20
 8012be6:	f100 0514 	add.w	r5, r0, #20
 8012bea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012bee:	9301      	str	r3, [sp, #4]
 8012bf0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012bf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012bf8:	3301      	adds	r3, #1
 8012bfa:	429a      	cmp	r2, r3
 8012bfc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012c00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012c04:	fbb2 f6f3 	udiv	r6, r2, r3
 8012c08:	d331      	bcc.n	8012c6e <quorem+0x9e>
 8012c0a:	f04f 0e00 	mov.w	lr, #0
 8012c0e:	4640      	mov	r0, r8
 8012c10:	46ac      	mov	ip, r5
 8012c12:	46f2      	mov	sl, lr
 8012c14:	f850 2b04 	ldr.w	r2, [r0], #4
 8012c18:	b293      	uxth	r3, r2
 8012c1a:	fb06 e303 	mla	r3, r6, r3, lr
 8012c1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012c22:	b29b      	uxth	r3, r3
 8012c24:	ebaa 0303 	sub.w	r3, sl, r3
 8012c28:	f8dc a000 	ldr.w	sl, [ip]
 8012c2c:	0c12      	lsrs	r2, r2, #16
 8012c2e:	fa13 f38a 	uxtah	r3, r3, sl
 8012c32:	fb06 e202 	mla	r2, r6, r2, lr
 8012c36:	9300      	str	r3, [sp, #0]
 8012c38:	9b00      	ldr	r3, [sp, #0]
 8012c3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012c3e:	b292      	uxth	r2, r2
 8012c40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012c44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012c48:	f8bd 3000 	ldrh.w	r3, [sp]
 8012c4c:	4581      	cmp	r9, r0
 8012c4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012c52:	f84c 3b04 	str.w	r3, [ip], #4
 8012c56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012c5a:	d2db      	bcs.n	8012c14 <quorem+0x44>
 8012c5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8012c60:	b92b      	cbnz	r3, 8012c6e <quorem+0x9e>
 8012c62:	9b01      	ldr	r3, [sp, #4]
 8012c64:	3b04      	subs	r3, #4
 8012c66:	429d      	cmp	r5, r3
 8012c68:	461a      	mov	r2, r3
 8012c6a:	d32e      	bcc.n	8012cca <quorem+0xfa>
 8012c6c:	613c      	str	r4, [r7, #16]
 8012c6e:	4638      	mov	r0, r7
 8012c70:	f001 fad6 	bl	8014220 <__mcmp>
 8012c74:	2800      	cmp	r0, #0
 8012c76:	db24      	blt.n	8012cc2 <quorem+0xf2>
 8012c78:	3601      	adds	r6, #1
 8012c7a:	4628      	mov	r0, r5
 8012c7c:	f04f 0c00 	mov.w	ip, #0
 8012c80:	f858 2b04 	ldr.w	r2, [r8], #4
 8012c84:	f8d0 e000 	ldr.w	lr, [r0]
 8012c88:	b293      	uxth	r3, r2
 8012c8a:	ebac 0303 	sub.w	r3, ip, r3
 8012c8e:	0c12      	lsrs	r2, r2, #16
 8012c90:	fa13 f38e 	uxtah	r3, r3, lr
 8012c94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012c98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012c9c:	b29b      	uxth	r3, r3
 8012c9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012ca2:	45c1      	cmp	r9, r8
 8012ca4:	f840 3b04 	str.w	r3, [r0], #4
 8012ca8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012cac:	d2e8      	bcs.n	8012c80 <quorem+0xb0>
 8012cae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012cb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012cb6:	b922      	cbnz	r2, 8012cc2 <quorem+0xf2>
 8012cb8:	3b04      	subs	r3, #4
 8012cba:	429d      	cmp	r5, r3
 8012cbc:	461a      	mov	r2, r3
 8012cbe:	d30a      	bcc.n	8012cd6 <quorem+0x106>
 8012cc0:	613c      	str	r4, [r7, #16]
 8012cc2:	4630      	mov	r0, r6
 8012cc4:	b003      	add	sp, #12
 8012cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cca:	6812      	ldr	r2, [r2, #0]
 8012ccc:	3b04      	subs	r3, #4
 8012cce:	2a00      	cmp	r2, #0
 8012cd0:	d1cc      	bne.n	8012c6c <quorem+0x9c>
 8012cd2:	3c01      	subs	r4, #1
 8012cd4:	e7c7      	b.n	8012c66 <quorem+0x96>
 8012cd6:	6812      	ldr	r2, [r2, #0]
 8012cd8:	3b04      	subs	r3, #4
 8012cda:	2a00      	cmp	r2, #0
 8012cdc:	d1f0      	bne.n	8012cc0 <quorem+0xf0>
 8012cde:	3c01      	subs	r4, #1
 8012ce0:	e7eb      	b.n	8012cba <quorem+0xea>
 8012ce2:	2000      	movs	r0, #0
 8012ce4:	e7ee      	b.n	8012cc4 <quorem+0xf4>
	...

08012ce8 <_dtoa_r>:
 8012ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cec:	ed2d 8b04 	vpush	{d8-d9}
 8012cf0:	ec57 6b10 	vmov	r6, r7, d0
 8012cf4:	b093      	sub	sp, #76	; 0x4c
 8012cf6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012cf8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012cfc:	9106      	str	r1, [sp, #24]
 8012cfe:	ee10 aa10 	vmov	sl, s0
 8012d02:	4604      	mov	r4, r0
 8012d04:	9209      	str	r2, [sp, #36]	; 0x24
 8012d06:	930c      	str	r3, [sp, #48]	; 0x30
 8012d08:	46bb      	mov	fp, r7
 8012d0a:	b975      	cbnz	r5, 8012d2a <_dtoa_r+0x42>
 8012d0c:	2010      	movs	r0, #16
 8012d0e:	f000 fffd 	bl	8013d0c <malloc>
 8012d12:	4602      	mov	r2, r0
 8012d14:	6260      	str	r0, [r4, #36]	; 0x24
 8012d16:	b920      	cbnz	r0, 8012d22 <_dtoa_r+0x3a>
 8012d18:	4ba7      	ldr	r3, [pc, #668]	; (8012fb8 <_dtoa_r+0x2d0>)
 8012d1a:	21ea      	movs	r1, #234	; 0xea
 8012d1c:	48a7      	ldr	r0, [pc, #668]	; (8012fbc <_dtoa_r+0x2d4>)
 8012d1e:	f001 ff93 	bl	8014c48 <__assert_func>
 8012d22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012d26:	6005      	str	r5, [r0, #0]
 8012d28:	60c5      	str	r5, [r0, #12]
 8012d2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d2c:	6819      	ldr	r1, [r3, #0]
 8012d2e:	b151      	cbz	r1, 8012d46 <_dtoa_r+0x5e>
 8012d30:	685a      	ldr	r2, [r3, #4]
 8012d32:	604a      	str	r2, [r1, #4]
 8012d34:	2301      	movs	r3, #1
 8012d36:	4093      	lsls	r3, r2
 8012d38:	608b      	str	r3, [r1, #8]
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	f001 f82e 	bl	8013d9c <_Bfree>
 8012d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d42:	2200      	movs	r2, #0
 8012d44:	601a      	str	r2, [r3, #0]
 8012d46:	1e3b      	subs	r3, r7, #0
 8012d48:	bfaa      	itet	ge
 8012d4a:	2300      	movge	r3, #0
 8012d4c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8012d50:	f8c8 3000 	strge.w	r3, [r8]
 8012d54:	4b9a      	ldr	r3, [pc, #616]	; (8012fc0 <_dtoa_r+0x2d8>)
 8012d56:	bfbc      	itt	lt
 8012d58:	2201      	movlt	r2, #1
 8012d5a:	f8c8 2000 	strlt.w	r2, [r8]
 8012d5e:	ea33 030b 	bics.w	r3, r3, fp
 8012d62:	d11b      	bne.n	8012d9c <_dtoa_r+0xb4>
 8012d64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012d66:	f242 730f 	movw	r3, #9999	; 0x270f
 8012d6a:	6013      	str	r3, [r2, #0]
 8012d6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012d70:	4333      	orrs	r3, r6
 8012d72:	f000 8592 	beq.w	801389a <_dtoa_r+0xbb2>
 8012d76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012d78:	b963      	cbnz	r3, 8012d94 <_dtoa_r+0xac>
 8012d7a:	4b92      	ldr	r3, [pc, #584]	; (8012fc4 <_dtoa_r+0x2dc>)
 8012d7c:	e022      	b.n	8012dc4 <_dtoa_r+0xdc>
 8012d7e:	4b92      	ldr	r3, [pc, #584]	; (8012fc8 <_dtoa_r+0x2e0>)
 8012d80:	9301      	str	r3, [sp, #4]
 8012d82:	3308      	adds	r3, #8
 8012d84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012d86:	6013      	str	r3, [r2, #0]
 8012d88:	9801      	ldr	r0, [sp, #4]
 8012d8a:	b013      	add	sp, #76	; 0x4c
 8012d8c:	ecbd 8b04 	vpop	{d8-d9}
 8012d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d94:	4b8b      	ldr	r3, [pc, #556]	; (8012fc4 <_dtoa_r+0x2dc>)
 8012d96:	9301      	str	r3, [sp, #4]
 8012d98:	3303      	adds	r3, #3
 8012d9a:	e7f3      	b.n	8012d84 <_dtoa_r+0x9c>
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	2300      	movs	r3, #0
 8012da0:	4650      	mov	r0, sl
 8012da2:	4659      	mov	r1, fp
 8012da4:	f7ed feb8 	bl	8000b18 <__aeabi_dcmpeq>
 8012da8:	ec4b ab19 	vmov	d9, sl, fp
 8012dac:	4680      	mov	r8, r0
 8012dae:	b158      	cbz	r0, 8012dc8 <_dtoa_r+0xe0>
 8012db0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012db2:	2301      	movs	r3, #1
 8012db4:	6013      	str	r3, [r2, #0]
 8012db6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	f000 856b 	beq.w	8013894 <_dtoa_r+0xbac>
 8012dbe:	4883      	ldr	r0, [pc, #524]	; (8012fcc <_dtoa_r+0x2e4>)
 8012dc0:	6018      	str	r0, [r3, #0]
 8012dc2:	1e43      	subs	r3, r0, #1
 8012dc4:	9301      	str	r3, [sp, #4]
 8012dc6:	e7df      	b.n	8012d88 <_dtoa_r+0xa0>
 8012dc8:	ec4b ab10 	vmov	d0, sl, fp
 8012dcc:	aa10      	add	r2, sp, #64	; 0x40
 8012dce:	a911      	add	r1, sp, #68	; 0x44
 8012dd0:	4620      	mov	r0, r4
 8012dd2:	f001 facb 	bl	801436c <__d2b>
 8012dd6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8012dda:	ee08 0a10 	vmov	s16, r0
 8012dde:	2d00      	cmp	r5, #0
 8012de0:	f000 8084 	beq.w	8012eec <_dtoa_r+0x204>
 8012de4:	ee19 3a90 	vmov	r3, s19
 8012de8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012dec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012df0:	4656      	mov	r6, sl
 8012df2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012df6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012dfa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8012dfe:	4b74      	ldr	r3, [pc, #464]	; (8012fd0 <_dtoa_r+0x2e8>)
 8012e00:	2200      	movs	r2, #0
 8012e02:	4630      	mov	r0, r6
 8012e04:	4639      	mov	r1, r7
 8012e06:	f7ed fa67 	bl	80002d8 <__aeabi_dsub>
 8012e0a:	a365      	add	r3, pc, #404	; (adr r3, 8012fa0 <_dtoa_r+0x2b8>)
 8012e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e10:	f7ed fc1a 	bl	8000648 <__aeabi_dmul>
 8012e14:	a364      	add	r3, pc, #400	; (adr r3, 8012fa8 <_dtoa_r+0x2c0>)
 8012e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e1a:	f7ed fa5f 	bl	80002dc <__adddf3>
 8012e1e:	4606      	mov	r6, r0
 8012e20:	4628      	mov	r0, r5
 8012e22:	460f      	mov	r7, r1
 8012e24:	f7ed fba6 	bl	8000574 <__aeabi_i2d>
 8012e28:	a361      	add	r3, pc, #388	; (adr r3, 8012fb0 <_dtoa_r+0x2c8>)
 8012e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e2e:	f7ed fc0b 	bl	8000648 <__aeabi_dmul>
 8012e32:	4602      	mov	r2, r0
 8012e34:	460b      	mov	r3, r1
 8012e36:	4630      	mov	r0, r6
 8012e38:	4639      	mov	r1, r7
 8012e3a:	f7ed fa4f 	bl	80002dc <__adddf3>
 8012e3e:	4606      	mov	r6, r0
 8012e40:	460f      	mov	r7, r1
 8012e42:	f7ed feb1 	bl	8000ba8 <__aeabi_d2iz>
 8012e46:	2200      	movs	r2, #0
 8012e48:	9000      	str	r0, [sp, #0]
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	4630      	mov	r0, r6
 8012e4e:	4639      	mov	r1, r7
 8012e50:	f7ed fe6c 	bl	8000b2c <__aeabi_dcmplt>
 8012e54:	b150      	cbz	r0, 8012e6c <_dtoa_r+0x184>
 8012e56:	9800      	ldr	r0, [sp, #0]
 8012e58:	f7ed fb8c 	bl	8000574 <__aeabi_i2d>
 8012e5c:	4632      	mov	r2, r6
 8012e5e:	463b      	mov	r3, r7
 8012e60:	f7ed fe5a 	bl	8000b18 <__aeabi_dcmpeq>
 8012e64:	b910      	cbnz	r0, 8012e6c <_dtoa_r+0x184>
 8012e66:	9b00      	ldr	r3, [sp, #0]
 8012e68:	3b01      	subs	r3, #1
 8012e6a:	9300      	str	r3, [sp, #0]
 8012e6c:	9b00      	ldr	r3, [sp, #0]
 8012e6e:	2b16      	cmp	r3, #22
 8012e70:	d85a      	bhi.n	8012f28 <_dtoa_r+0x240>
 8012e72:	9a00      	ldr	r2, [sp, #0]
 8012e74:	4b57      	ldr	r3, [pc, #348]	; (8012fd4 <_dtoa_r+0x2ec>)
 8012e76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e7e:	ec51 0b19 	vmov	r0, r1, d9
 8012e82:	f7ed fe53 	bl	8000b2c <__aeabi_dcmplt>
 8012e86:	2800      	cmp	r0, #0
 8012e88:	d050      	beq.n	8012f2c <_dtoa_r+0x244>
 8012e8a:	9b00      	ldr	r3, [sp, #0]
 8012e8c:	3b01      	subs	r3, #1
 8012e8e:	9300      	str	r3, [sp, #0]
 8012e90:	2300      	movs	r3, #0
 8012e92:	930b      	str	r3, [sp, #44]	; 0x2c
 8012e94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012e96:	1b5d      	subs	r5, r3, r5
 8012e98:	1e6b      	subs	r3, r5, #1
 8012e9a:	9305      	str	r3, [sp, #20]
 8012e9c:	bf45      	ittet	mi
 8012e9e:	f1c5 0301 	rsbmi	r3, r5, #1
 8012ea2:	9304      	strmi	r3, [sp, #16]
 8012ea4:	2300      	movpl	r3, #0
 8012ea6:	2300      	movmi	r3, #0
 8012ea8:	bf4c      	ite	mi
 8012eaa:	9305      	strmi	r3, [sp, #20]
 8012eac:	9304      	strpl	r3, [sp, #16]
 8012eae:	9b00      	ldr	r3, [sp, #0]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	db3d      	blt.n	8012f30 <_dtoa_r+0x248>
 8012eb4:	9b05      	ldr	r3, [sp, #20]
 8012eb6:	9a00      	ldr	r2, [sp, #0]
 8012eb8:	920a      	str	r2, [sp, #40]	; 0x28
 8012eba:	4413      	add	r3, r2
 8012ebc:	9305      	str	r3, [sp, #20]
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	9307      	str	r3, [sp, #28]
 8012ec2:	9b06      	ldr	r3, [sp, #24]
 8012ec4:	2b09      	cmp	r3, #9
 8012ec6:	f200 8089 	bhi.w	8012fdc <_dtoa_r+0x2f4>
 8012eca:	2b05      	cmp	r3, #5
 8012ecc:	bfc4      	itt	gt
 8012ece:	3b04      	subgt	r3, #4
 8012ed0:	9306      	strgt	r3, [sp, #24]
 8012ed2:	9b06      	ldr	r3, [sp, #24]
 8012ed4:	f1a3 0302 	sub.w	r3, r3, #2
 8012ed8:	bfcc      	ite	gt
 8012eda:	2500      	movgt	r5, #0
 8012edc:	2501      	movle	r5, #1
 8012ede:	2b03      	cmp	r3, #3
 8012ee0:	f200 8087 	bhi.w	8012ff2 <_dtoa_r+0x30a>
 8012ee4:	e8df f003 	tbb	[pc, r3]
 8012ee8:	59383a2d 	.word	0x59383a2d
 8012eec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012ef0:	441d      	add	r5, r3
 8012ef2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012ef6:	2b20      	cmp	r3, #32
 8012ef8:	bfc1      	itttt	gt
 8012efa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012efe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012f02:	fa0b f303 	lslgt.w	r3, fp, r3
 8012f06:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012f0a:	bfda      	itte	le
 8012f0c:	f1c3 0320 	rsble	r3, r3, #32
 8012f10:	fa06 f003 	lslle.w	r0, r6, r3
 8012f14:	4318      	orrgt	r0, r3
 8012f16:	f7ed fb1d 	bl	8000554 <__aeabi_ui2d>
 8012f1a:	2301      	movs	r3, #1
 8012f1c:	4606      	mov	r6, r0
 8012f1e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012f22:	3d01      	subs	r5, #1
 8012f24:	930e      	str	r3, [sp, #56]	; 0x38
 8012f26:	e76a      	b.n	8012dfe <_dtoa_r+0x116>
 8012f28:	2301      	movs	r3, #1
 8012f2a:	e7b2      	b.n	8012e92 <_dtoa_r+0x1aa>
 8012f2c:	900b      	str	r0, [sp, #44]	; 0x2c
 8012f2e:	e7b1      	b.n	8012e94 <_dtoa_r+0x1ac>
 8012f30:	9b04      	ldr	r3, [sp, #16]
 8012f32:	9a00      	ldr	r2, [sp, #0]
 8012f34:	1a9b      	subs	r3, r3, r2
 8012f36:	9304      	str	r3, [sp, #16]
 8012f38:	4253      	negs	r3, r2
 8012f3a:	9307      	str	r3, [sp, #28]
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	930a      	str	r3, [sp, #40]	; 0x28
 8012f40:	e7bf      	b.n	8012ec2 <_dtoa_r+0x1da>
 8012f42:	2300      	movs	r3, #0
 8012f44:	9308      	str	r3, [sp, #32]
 8012f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	dc55      	bgt.n	8012ff8 <_dtoa_r+0x310>
 8012f4c:	2301      	movs	r3, #1
 8012f4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012f52:	461a      	mov	r2, r3
 8012f54:	9209      	str	r2, [sp, #36]	; 0x24
 8012f56:	e00c      	b.n	8012f72 <_dtoa_r+0x28a>
 8012f58:	2301      	movs	r3, #1
 8012f5a:	e7f3      	b.n	8012f44 <_dtoa_r+0x25c>
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f60:	9308      	str	r3, [sp, #32]
 8012f62:	9b00      	ldr	r3, [sp, #0]
 8012f64:	4413      	add	r3, r2
 8012f66:	9302      	str	r3, [sp, #8]
 8012f68:	3301      	adds	r3, #1
 8012f6a:	2b01      	cmp	r3, #1
 8012f6c:	9303      	str	r3, [sp, #12]
 8012f6e:	bfb8      	it	lt
 8012f70:	2301      	movlt	r3, #1
 8012f72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012f74:	2200      	movs	r2, #0
 8012f76:	6042      	str	r2, [r0, #4]
 8012f78:	2204      	movs	r2, #4
 8012f7a:	f102 0614 	add.w	r6, r2, #20
 8012f7e:	429e      	cmp	r6, r3
 8012f80:	6841      	ldr	r1, [r0, #4]
 8012f82:	d93d      	bls.n	8013000 <_dtoa_r+0x318>
 8012f84:	4620      	mov	r0, r4
 8012f86:	f000 fec9 	bl	8013d1c <_Balloc>
 8012f8a:	9001      	str	r0, [sp, #4]
 8012f8c:	2800      	cmp	r0, #0
 8012f8e:	d13b      	bne.n	8013008 <_dtoa_r+0x320>
 8012f90:	4b11      	ldr	r3, [pc, #68]	; (8012fd8 <_dtoa_r+0x2f0>)
 8012f92:	4602      	mov	r2, r0
 8012f94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012f98:	e6c0      	b.n	8012d1c <_dtoa_r+0x34>
 8012f9a:	2301      	movs	r3, #1
 8012f9c:	e7df      	b.n	8012f5e <_dtoa_r+0x276>
 8012f9e:	bf00      	nop
 8012fa0:	636f4361 	.word	0x636f4361
 8012fa4:	3fd287a7 	.word	0x3fd287a7
 8012fa8:	8b60c8b3 	.word	0x8b60c8b3
 8012fac:	3fc68a28 	.word	0x3fc68a28
 8012fb0:	509f79fb 	.word	0x509f79fb
 8012fb4:	3fd34413 	.word	0x3fd34413
 8012fb8:	08015401 	.word	0x08015401
 8012fbc:	08015418 	.word	0x08015418
 8012fc0:	7ff00000 	.word	0x7ff00000
 8012fc4:	080153fd 	.word	0x080153fd
 8012fc8:	080153f4 	.word	0x080153f4
 8012fcc:	080153d1 	.word	0x080153d1
 8012fd0:	3ff80000 	.word	0x3ff80000
 8012fd4:	08015568 	.word	0x08015568
 8012fd8:	08015473 	.word	0x08015473
 8012fdc:	2501      	movs	r5, #1
 8012fde:	2300      	movs	r3, #0
 8012fe0:	9306      	str	r3, [sp, #24]
 8012fe2:	9508      	str	r5, [sp, #32]
 8012fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012fe8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012fec:	2200      	movs	r2, #0
 8012fee:	2312      	movs	r3, #18
 8012ff0:	e7b0      	b.n	8012f54 <_dtoa_r+0x26c>
 8012ff2:	2301      	movs	r3, #1
 8012ff4:	9308      	str	r3, [sp, #32]
 8012ff6:	e7f5      	b.n	8012fe4 <_dtoa_r+0x2fc>
 8012ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ffa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012ffe:	e7b8      	b.n	8012f72 <_dtoa_r+0x28a>
 8013000:	3101      	adds	r1, #1
 8013002:	6041      	str	r1, [r0, #4]
 8013004:	0052      	lsls	r2, r2, #1
 8013006:	e7b8      	b.n	8012f7a <_dtoa_r+0x292>
 8013008:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801300a:	9a01      	ldr	r2, [sp, #4]
 801300c:	601a      	str	r2, [r3, #0]
 801300e:	9b03      	ldr	r3, [sp, #12]
 8013010:	2b0e      	cmp	r3, #14
 8013012:	f200 809d 	bhi.w	8013150 <_dtoa_r+0x468>
 8013016:	2d00      	cmp	r5, #0
 8013018:	f000 809a 	beq.w	8013150 <_dtoa_r+0x468>
 801301c:	9b00      	ldr	r3, [sp, #0]
 801301e:	2b00      	cmp	r3, #0
 8013020:	dd32      	ble.n	8013088 <_dtoa_r+0x3a0>
 8013022:	4ab7      	ldr	r2, [pc, #732]	; (8013300 <_dtoa_r+0x618>)
 8013024:	f003 030f 	and.w	r3, r3, #15
 8013028:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801302c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013030:	9b00      	ldr	r3, [sp, #0]
 8013032:	05d8      	lsls	r0, r3, #23
 8013034:	ea4f 1723 	mov.w	r7, r3, asr #4
 8013038:	d516      	bpl.n	8013068 <_dtoa_r+0x380>
 801303a:	4bb2      	ldr	r3, [pc, #712]	; (8013304 <_dtoa_r+0x61c>)
 801303c:	ec51 0b19 	vmov	r0, r1, d9
 8013040:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013044:	f7ed fc2a 	bl	800089c <__aeabi_ddiv>
 8013048:	f007 070f 	and.w	r7, r7, #15
 801304c:	4682      	mov	sl, r0
 801304e:	468b      	mov	fp, r1
 8013050:	2503      	movs	r5, #3
 8013052:	4eac      	ldr	r6, [pc, #688]	; (8013304 <_dtoa_r+0x61c>)
 8013054:	b957      	cbnz	r7, 801306c <_dtoa_r+0x384>
 8013056:	4642      	mov	r2, r8
 8013058:	464b      	mov	r3, r9
 801305a:	4650      	mov	r0, sl
 801305c:	4659      	mov	r1, fp
 801305e:	f7ed fc1d 	bl	800089c <__aeabi_ddiv>
 8013062:	4682      	mov	sl, r0
 8013064:	468b      	mov	fp, r1
 8013066:	e028      	b.n	80130ba <_dtoa_r+0x3d2>
 8013068:	2502      	movs	r5, #2
 801306a:	e7f2      	b.n	8013052 <_dtoa_r+0x36a>
 801306c:	07f9      	lsls	r1, r7, #31
 801306e:	d508      	bpl.n	8013082 <_dtoa_r+0x39a>
 8013070:	4640      	mov	r0, r8
 8013072:	4649      	mov	r1, r9
 8013074:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013078:	f7ed fae6 	bl	8000648 <__aeabi_dmul>
 801307c:	3501      	adds	r5, #1
 801307e:	4680      	mov	r8, r0
 8013080:	4689      	mov	r9, r1
 8013082:	107f      	asrs	r7, r7, #1
 8013084:	3608      	adds	r6, #8
 8013086:	e7e5      	b.n	8013054 <_dtoa_r+0x36c>
 8013088:	f000 809b 	beq.w	80131c2 <_dtoa_r+0x4da>
 801308c:	9b00      	ldr	r3, [sp, #0]
 801308e:	4f9d      	ldr	r7, [pc, #628]	; (8013304 <_dtoa_r+0x61c>)
 8013090:	425e      	negs	r6, r3
 8013092:	4b9b      	ldr	r3, [pc, #620]	; (8013300 <_dtoa_r+0x618>)
 8013094:	f006 020f 	and.w	r2, r6, #15
 8013098:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130a0:	ec51 0b19 	vmov	r0, r1, d9
 80130a4:	f7ed fad0 	bl	8000648 <__aeabi_dmul>
 80130a8:	1136      	asrs	r6, r6, #4
 80130aa:	4682      	mov	sl, r0
 80130ac:	468b      	mov	fp, r1
 80130ae:	2300      	movs	r3, #0
 80130b0:	2502      	movs	r5, #2
 80130b2:	2e00      	cmp	r6, #0
 80130b4:	d17a      	bne.n	80131ac <_dtoa_r+0x4c4>
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d1d3      	bne.n	8013062 <_dtoa_r+0x37a>
 80130ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80130bc:	2b00      	cmp	r3, #0
 80130be:	f000 8082 	beq.w	80131c6 <_dtoa_r+0x4de>
 80130c2:	4b91      	ldr	r3, [pc, #580]	; (8013308 <_dtoa_r+0x620>)
 80130c4:	2200      	movs	r2, #0
 80130c6:	4650      	mov	r0, sl
 80130c8:	4659      	mov	r1, fp
 80130ca:	f7ed fd2f 	bl	8000b2c <__aeabi_dcmplt>
 80130ce:	2800      	cmp	r0, #0
 80130d0:	d079      	beq.n	80131c6 <_dtoa_r+0x4de>
 80130d2:	9b03      	ldr	r3, [sp, #12]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d076      	beq.n	80131c6 <_dtoa_r+0x4de>
 80130d8:	9b02      	ldr	r3, [sp, #8]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	dd36      	ble.n	801314c <_dtoa_r+0x464>
 80130de:	9b00      	ldr	r3, [sp, #0]
 80130e0:	4650      	mov	r0, sl
 80130e2:	4659      	mov	r1, fp
 80130e4:	1e5f      	subs	r7, r3, #1
 80130e6:	2200      	movs	r2, #0
 80130e8:	4b88      	ldr	r3, [pc, #544]	; (801330c <_dtoa_r+0x624>)
 80130ea:	f7ed faad 	bl	8000648 <__aeabi_dmul>
 80130ee:	9e02      	ldr	r6, [sp, #8]
 80130f0:	4682      	mov	sl, r0
 80130f2:	468b      	mov	fp, r1
 80130f4:	3501      	adds	r5, #1
 80130f6:	4628      	mov	r0, r5
 80130f8:	f7ed fa3c 	bl	8000574 <__aeabi_i2d>
 80130fc:	4652      	mov	r2, sl
 80130fe:	465b      	mov	r3, fp
 8013100:	f7ed faa2 	bl	8000648 <__aeabi_dmul>
 8013104:	4b82      	ldr	r3, [pc, #520]	; (8013310 <_dtoa_r+0x628>)
 8013106:	2200      	movs	r2, #0
 8013108:	f7ed f8e8 	bl	80002dc <__adddf3>
 801310c:	46d0      	mov	r8, sl
 801310e:	46d9      	mov	r9, fp
 8013110:	4682      	mov	sl, r0
 8013112:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8013116:	2e00      	cmp	r6, #0
 8013118:	d158      	bne.n	80131cc <_dtoa_r+0x4e4>
 801311a:	4b7e      	ldr	r3, [pc, #504]	; (8013314 <_dtoa_r+0x62c>)
 801311c:	2200      	movs	r2, #0
 801311e:	4640      	mov	r0, r8
 8013120:	4649      	mov	r1, r9
 8013122:	f7ed f8d9 	bl	80002d8 <__aeabi_dsub>
 8013126:	4652      	mov	r2, sl
 8013128:	465b      	mov	r3, fp
 801312a:	4680      	mov	r8, r0
 801312c:	4689      	mov	r9, r1
 801312e:	f7ed fd1b 	bl	8000b68 <__aeabi_dcmpgt>
 8013132:	2800      	cmp	r0, #0
 8013134:	f040 8295 	bne.w	8013662 <_dtoa_r+0x97a>
 8013138:	4652      	mov	r2, sl
 801313a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801313e:	4640      	mov	r0, r8
 8013140:	4649      	mov	r1, r9
 8013142:	f7ed fcf3 	bl	8000b2c <__aeabi_dcmplt>
 8013146:	2800      	cmp	r0, #0
 8013148:	f040 8289 	bne.w	801365e <_dtoa_r+0x976>
 801314c:	ec5b ab19 	vmov	sl, fp, d9
 8013150:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013152:	2b00      	cmp	r3, #0
 8013154:	f2c0 8148 	blt.w	80133e8 <_dtoa_r+0x700>
 8013158:	9a00      	ldr	r2, [sp, #0]
 801315a:	2a0e      	cmp	r2, #14
 801315c:	f300 8144 	bgt.w	80133e8 <_dtoa_r+0x700>
 8013160:	4b67      	ldr	r3, [pc, #412]	; (8013300 <_dtoa_r+0x618>)
 8013162:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013166:	e9d3 8900 	ldrd	r8, r9, [r3]
 801316a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801316c:	2b00      	cmp	r3, #0
 801316e:	f280 80d5 	bge.w	801331c <_dtoa_r+0x634>
 8013172:	9b03      	ldr	r3, [sp, #12]
 8013174:	2b00      	cmp	r3, #0
 8013176:	f300 80d1 	bgt.w	801331c <_dtoa_r+0x634>
 801317a:	f040 826f 	bne.w	801365c <_dtoa_r+0x974>
 801317e:	4b65      	ldr	r3, [pc, #404]	; (8013314 <_dtoa_r+0x62c>)
 8013180:	2200      	movs	r2, #0
 8013182:	4640      	mov	r0, r8
 8013184:	4649      	mov	r1, r9
 8013186:	f7ed fa5f 	bl	8000648 <__aeabi_dmul>
 801318a:	4652      	mov	r2, sl
 801318c:	465b      	mov	r3, fp
 801318e:	f7ed fce1 	bl	8000b54 <__aeabi_dcmpge>
 8013192:	9e03      	ldr	r6, [sp, #12]
 8013194:	4637      	mov	r7, r6
 8013196:	2800      	cmp	r0, #0
 8013198:	f040 8245 	bne.w	8013626 <_dtoa_r+0x93e>
 801319c:	9d01      	ldr	r5, [sp, #4]
 801319e:	2331      	movs	r3, #49	; 0x31
 80131a0:	f805 3b01 	strb.w	r3, [r5], #1
 80131a4:	9b00      	ldr	r3, [sp, #0]
 80131a6:	3301      	adds	r3, #1
 80131a8:	9300      	str	r3, [sp, #0]
 80131aa:	e240      	b.n	801362e <_dtoa_r+0x946>
 80131ac:	07f2      	lsls	r2, r6, #31
 80131ae:	d505      	bpl.n	80131bc <_dtoa_r+0x4d4>
 80131b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80131b4:	f7ed fa48 	bl	8000648 <__aeabi_dmul>
 80131b8:	3501      	adds	r5, #1
 80131ba:	2301      	movs	r3, #1
 80131bc:	1076      	asrs	r6, r6, #1
 80131be:	3708      	adds	r7, #8
 80131c0:	e777      	b.n	80130b2 <_dtoa_r+0x3ca>
 80131c2:	2502      	movs	r5, #2
 80131c4:	e779      	b.n	80130ba <_dtoa_r+0x3d2>
 80131c6:	9f00      	ldr	r7, [sp, #0]
 80131c8:	9e03      	ldr	r6, [sp, #12]
 80131ca:	e794      	b.n	80130f6 <_dtoa_r+0x40e>
 80131cc:	9901      	ldr	r1, [sp, #4]
 80131ce:	4b4c      	ldr	r3, [pc, #304]	; (8013300 <_dtoa_r+0x618>)
 80131d0:	4431      	add	r1, r6
 80131d2:	910d      	str	r1, [sp, #52]	; 0x34
 80131d4:	9908      	ldr	r1, [sp, #32]
 80131d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80131da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80131de:	2900      	cmp	r1, #0
 80131e0:	d043      	beq.n	801326a <_dtoa_r+0x582>
 80131e2:	494d      	ldr	r1, [pc, #308]	; (8013318 <_dtoa_r+0x630>)
 80131e4:	2000      	movs	r0, #0
 80131e6:	f7ed fb59 	bl	800089c <__aeabi_ddiv>
 80131ea:	4652      	mov	r2, sl
 80131ec:	465b      	mov	r3, fp
 80131ee:	f7ed f873 	bl	80002d8 <__aeabi_dsub>
 80131f2:	9d01      	ldr	r5, [sp, #4]
 80131f4:	4682      	mov	sl, r0
 80131f6:	468b      	mov	fp, r1
 80131f8:	4649      	mov	r1, r9
 80131fa:	4640      	mov	r0, r8
 80131fc:	f7ed fcd4 	bl	8000ba8 <__aeabi_d2iz>
 8013200:	4606      	mov	r6, r0
 8013202:	f7ed f9b7 	bl	8000574 <__aeabi_i2d>
 8013206:	4602      	mov	r2, r0
 8013208:	460b      	mov	r3, r1
 801320a:	4640      	mov	r0, r8
 801320c:	4649      	mov	r1, r9
 801320e:	f7ed f863 	bl	80002d8 <__aeabi_dsub>
 8013212:	3630      	adds	r6, #48	; 0x30
 8013214:	f805 6b01 	strb.w	r6, [r5], #1
 8013218:	4652      	mov	r2, sl
 801321a:	465b      	mov	r3, fp
 801321c:	4680      	mov	r8, r0
 801321e:	4689      	mov	r9, r1
 8013220:	f7ed fc84 	bl	8000b2c <__aeabi_dcmplt>
 8013224:	2800      	cmp	r0, #0
 8013226:	d163      	bne.n	80132f0 <_dtoa_r+0x608>
 8013228:	4642      	mov	r2, r8
 801322a:	464b      	mov	r3, r9
 801322c:	4936      	ldr	r1, [pc, #216]	; (8013308 <_dtoa_r+0x620>)
 801322e:	2000      	movs	r0, #0
 8013230:	f7ed f852 	bl	80002d8 <__aeabi_dsub>
 8013234:	4652      	mov	r2, sl
 8013236:	465b      	mov	r3, fp
 8013238:	f7ed fc78 	bl	8000b2c <__aeabi_dcmplt>
 801323c:	2800      	cmp	r0, #0
 801323e:	f040 80b5 	bne.w	80133ac <_dtoa_r+0x6c4>
 8013242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013244:	429d      	cmp	r5, r3
 8013246:	d081      	beq.n	801314c <_dtoa_r+0x464>
 8013248:	4b30      	ldr	r3, [pc, #192]	; (801330c <_dtoa_r+0x624>)
 801324a:	2200      	movs	r2, #0
 801324c:	4650      	mov	r0, sl
 801324e:	4659      	mov	r1, fp
 8013250:	f7ed f9fa 	bl	8000648 <__aeabi_dmul>
 8013254:	4b2d      	ldr	r3, [pc, #180]	; (801330c <_dtoa_r+0x624>)
 8013256:	4682      	mov	sl, r0
 8013258:	468b      	mov	fp, r1
 801325a:	4640      	mov	r0, r8
 801325c:	4649      	mov	r1, r9
 801325e:	2200      	movs	r2, #0
 8013260:	f7ed f9f2 	bl	8000648 <__aeabi_dmul>
 8013264:	4680      	mov	r8, r0
 8013266:	4689      	mov	r9, r1
 8013268:	e7c6      	b.n	80131f8 <_dtoa_r+0x510>
 801326a:	4650      	mov	r0, sl
 801326c:	4659      	mov	r1, fp
 801326e:	f7ed f9eb 	bl	8000648 <__aeabi_dmul>
 8013272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013274:	9d01      	ldr	r5, [sp, #4]
 8013276:	930f      	str	r3, [sp, #60]	; 0x3c
 8013278:	4682      	mov	sl, r0
 801327a:	468b      	mov	fp, r1
 801327c:	4649      	mov	r1, r9
 801327e:	4640      	mov	r0, r8
 8013280:	f7ed fc92 	bl	8000ba8 <__aeabi_d2iz>
 8013284:	4606      	mov	r6, r0
 8013286:	f7ed f975 	bl	8000574 <__aeabi_i2d>
 801328a:	3630      	adds	r6, #48	; 0x30
 801328c:	4602      	mov	r2, r0
 801328e:	460b      	mov	r3, r1
 8013290:	4640      	mov	r0, r8
 8013292:	4649      	mov	r1, r9
 8013294:	f7ed f820 	bl	80002d8 <__aeabi_dsub>
 8013298:	f805 6b01 	strb.w	r6, [r5], #1
 801329c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801329e:	429d      	cmp	r5, r3
 80132a0:	4680      	mov	r8, r0
 80132a2:	4689      	mov	r9, r1
 80132a4:	f04f 0200 	mov.w	r2, #0
 80132a8:	d124      	bne.n	80132f4 <_dtoa_r+0x60c>
 80132aa:	4b1b      	ldr	r3, [pc, #108]	; (8013318 <_dtoa_r+0x630>)
 80132ac:	4650      	mov	r0, sl
 80132ae:	4659      	mov	r1, fp
 80132b0:	f7ed f814 	bl	80002dc <__adddf3>
 80132b4:	4602      	mov	r2, r0
 80132b6:	460b      	mov	r3, r1
 80132b8:	4640      	mov	r0, r8
 80132ba:	4649      	mov	r1, r9
 80132bc:	f7ed fc54 	bl	8000b68 <__aeabi_dcmpgt>
 80132c0:	2800      	cmp	r0, #0
 80132c2:	d173      	bne.n	80133ac <_dtoa_r+0x6c4>
 80132c4:	4652      	mov	r2, sl
 80132c6:	465b      	mov	r3, fp
 80132c8:	4913      	ldr	r1, [pc, #76]	; (8013318 <_dtoa_r+0x630>)
 80132ca:	2000      	movs	r0, #0
 80132cc:	f7ed f804 	bl	80002d8 <__aeabi_dsub>
 80132d0:	4602      	mov	r2, r0
 80132d2:	460b      	mov	r3, r1
 80132d4:	4640      	mov	r0, r8
 80132d6:	4649      	mov	r1, r9
 80132d8:	f7ed fc28 	bl	8000b2c <__aeabi_dcmplt>
 80132dc:	2800      	cmp	r0, #0
 80132de:	f43f af35 	beq.w	801314c <_dtoa_r+0x464>
 80132e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80132e4:	1e6b      	subs	r3, r5, #1
 80132e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80132e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80132ec:	2b30      	cmp	r3, #48	; 0x30
 80132ee:	d0f8      	beq.n	80132e2 <_dtoa_r+0x5fa>
 80132f0:	9700      	str	r7, [sp, #0]
 80132f2:	e049      	b.n	8013388 <_dtoa_r+0x6a0>
 80132f4:	4b05      	ldr	r3, [pc, #20]	; (801330c <_dtoa_r+0x624>)
 80132f6:	f7ed f9a7 	bl	8000648 <__aeabi_dmul>
 80132fa:	4680      	mov	r8, r0
 80132fc:	4689      	mov	r9, r1
 80132fe:	e7bd      	b.n	801327c <_dtoa_r+0x594>
 8013300:	08015568 	.word	0x08015568
 8013304:	08015540 	.word	0x08015540
 8013308:	3ff00000 	.word	0x3ff00000
 801330c:	40240000 	.word	0x40240000
 8013310:	401c0000 	.word	0x401c0000
 8013314:	40140000 	.word	0x40140000
 8013318:	3fe00000 	.word	0x3fe00000
 801331c:	9d01      	ldr	r5, [sp, #4]
 801331e:	4656      	mov	r6, sl
 8013320:	465f      	mov	r7, fp
 8013322:	4642      	mov	r2, r8
 8013324:	464b      	mov	r3, r9
 8013326:	4630      	mov	r0, r6
 8013328:	4639      	mov	r1, r7
 801332a:	f7ed fab7 	bl	800089c <__aeabi_ddiv>
 801332e:	f7ed fc3b 	bl	8000ba8 <__aeabi_d2iz>
 8013332:	4682      	mov	sl, r0
 8013334:	f7ed f91e 	bl	8000574 <__aeabi_i2d>
 8013338:	4642      	mov	r2, r8
 801333a:	464b      	mov	r3, r9
 801333c:	f7ed f984 	bl	8000648 <__aeabi_dmul>
 8013340:	4602      	mov	r2, r0
 8013342:	460b      	mov	r3, r1
 8013344:	4630      	mov	r0, r6
 8013346:	4639      	mov	r1, r7
 8013348:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801334c:	f7ec ffc4 	bl	80002d8 <__aeabi_dsub>
 8013350:	f805 6b01 	strb.w	r6, [r5], #1
 8013354:	9e01      	ldr	r6, [sp, #4]
 8013356:	9f03      	ldr	r7, [sp, #12]
 8013358:	1bae      	subs	r6, r5, r6
 801335a:	42b7      	cmp	r7, r6
 801335c:	4602      	mov	r2, r0
 801335e:	460b      	mov	r3, r1
 8013360:	d135      	bne.n	80133ce <_dtoa_r+0x6e6>
 8013362:	f7ec ffbb 	bl	80002dc <__adddf3>
 8013366:	4642      	mov	r2, r8
 8013368:	464b      	mov	r3, r9
 801336a:	4606      	mov	r6, r0
 801336c:	460f      	mov	r7, r1
 801336e:	f7ed fbfb 	bl	8000b68 <__aeabi_dcmpgt>
 8013372:	b9d0      	cbnz	r0, 80133aa <_dtoa_r+0x6c2>
 8013374:	4642      	mov	r2, r8
 8013376:	464b      	mov	r3, r9
 8013378:	4630      	mov	r0, r6
 801337a:	4639      	mov	r1, r7
 801337c:	f7ed fbcc 	bl	8000b18 <__aeabi_dcmpeq>
 8013380:	b110      	cbz	r0, 8013388 <_dtoa_r+0x6a0>
 8013382:	f01a 0f01 	tst.w	sl, #1
 8013386:	d110      	bne.n	80133aa <_dtoa_r+0x6c2>
 8013388:	4620      	mov	r0, r4
 801338a:	ee18 1a10 	vmov	r1, s16
 801338e:	f000 fd05 	bl	8013d9c <_Bfree>
 8013392:	2300      	movs	r3, #0
 8013394:	9800      	ldr	r0, [sp, #0]
 8013396:	702b      	strb	r3, [r5, #0]
 8013398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801339a:	3001      	adds	r0, #1
 801339c:	6018      	str	r0, [r3, #0]
 801339e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	f43f acf1 	beq.w	8012d88 <_dtoa_r+0xa0>
 80133a6:	601d      	str	r5, [r3, #0]
 80133a8:	e4ee      	b.n	8012d88 <_dtoa_r+0xa0>
 80133aa:	9f00      	ldr	r7, [sp, #0]
 80133ac:	462b      	mov	r3, r5
 80133ae:	461d      	mov	r5, r3
 80133b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80133b4:	2a39      	cmp	r2, #57	; 0x39
 80133b6:	d106      	bne.n	80133c6 <_dtoa_r+0x6de>
 80133b8:	9a01      	ldr	r2, [sp, #4]
 80133ba:	429a      	cmp	r2, r3
 80133bc:	d1f7      	bne.n	80133ae <_dtoa_r+0x6c6>
 80133be:	9901      	ldr	r1, [sp, #4]
 80133c0:	2230      	movs	r2, #48	; 0x30
 80133c2:	3701      	adds	r7, #1
 80133c4:	700a      	strb	r2, [r1, #0]
 80133c6:	781a      	ldrb	r2, [r3, #0]
 80133c8:	3201      	adds	r2, #1
 80133ca:	701a      	strb	r2, [r3, #0]
 80133cc:	e790      	b.n	80132f0 <_dtoa_r+0x608>
 80133ce:	4ba6      	ldr	r3, [pc, #664]	; (8013668 <_dtoa_r+0x980>)
 80133d0:	2200      	movs	r2, #0
 80133d2:	f7ed f939 	bl	8000648 <__aeabi_dmul>
 80133d6:	2200      	movs	r2, #0
 80133d8:	2300      	movs	r3, #0
 80133da:	4606      	mov	r6, r0
 80133dc:	460f      	mov	r7, r1
 80133de:	f7ed fb9b 	bl	8000b18 <__aeabi_dcmpeq>
 80133e2:	2800      	cmp	r0, #0
 80133e4:	d09d      	beq.n	8013322 <_dtoa_r+0x63a>
 80133e6:	e7cf      	b.n	8013388 <_dtoa_r+0x6a0>
 80133e8:	9a08      	ldr	r2, [sp, #32]
 80133ea:	2a00      	cmp	r2, #0
 80133ec:	f000 80d7 	beq.w	801359e <_dtoa_r+0x8b6>
 80133f0:	9a06      	ldr	r2, [sp, #24]
 80133f2:	2a01      	cmp	r2, #1
 80133f4:	f300 80ba 	bgt.w	801356c <_dtoa_r+0x884>
 80133f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80133fa:	2a00      	cmp	r2, #0
 80133fc:	f000 80b2 	beq.w	8013564 <_dtoa_r+0x87c>
 8013400:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013404:	9e07      	ldr	r6, [sp, #28]
 8013406:	9d04      	ldr	r5, [sp, #16]
 8013408:	9a04      	ldr	r2, [sp, #16]
 801340a:	441a      	add	r2, r3
 801340c:	9204      	str	r2, [sp, #16]
 801340e:	9a05      	ldr	r2, [sp, #20]
 8013410:	2101      	movs	r1, #1
 8013412:	441a      	add	r2, r3
 8013414:	4620      	mov	r0, r4
 8013416:	9205      	str	r2, [sp, #20]
 8013418:	f000 fd78 	bl	8013f0c <__i2b>
 801341c:	4607      	mov	r7, r0
 801341e:	2d00      	cmp	r5, #0
 8013420:	dd0c      	ble.n	801343c <_dtoa_r+0x754>
 8013422:	9b05      	ldr	r3, [sp, #20]
 8013424:	2b00      	cmp	r3, #0
 8013426:	dd09      	ble.n	801343c <_dtoa_r+0x754>
 8013428:	42ab      	cmp	r3, r5
 801342a:	9a04      	ldr	r2, [sp, #16]
 801342c:	bfa8      	it	ge
 801342e:	462b      	movge	r3, r5
 8013430:	1ad2      	subs	r2, r2, r3
 8013432:	9204      	str	r2, [sp, #16]
 8013434:	9a05      	ldr	r2, [sp, #20]
 8013436:	1aed      	subs	r5, r5, r3
 8013438:	1ad3      	subs	r3, r2, r3
 801343a:	9305      	str	r3, [sp, #20]
 801343c:	9b07      	ldr	r3, [sp, #28]
 801343e:	b31b      	cbz	r3, 8013488 <_dtoa_r+0x7a0>
 8013440:	9b08      	ldr	r3, [sp, #32]
 8013442:	2b00      	cmp	r3, #0
 8013444:	f000 80af 	beq.w	80135a6 <_dtoa_r+0x8be>
 8013448:	2e00      	cmp	r6, #0
 801344a:	dd13      	ble.n	8013474 <_dtoa_r+0x78c>
 801344c:	4639      	mov	r1, r7
 801344e:	4632      	mov	r2, r6
 8013450:	4620      	mov	r0, r4
 8013452:	f000 fe1b 	bl	801408c <__pow5mult>
 8013456:	ee18 2a10 	vmov	r2, s16
 801345a:	4601      	mov	r1, r0
 801345c:	4607      	mov	r7, r0
 801345e:	4620      	mov	r0, r4
 8013460:	f000 fd6a 	bl	8013f38 <__multiply>
 8013464:	ee18 1a10 	vmov	r1, s16
 8013468:	4680      	mov	r8, r0
 801346a:	4620      	mov	r0, r4
 801346c:	f000 fc96 	bl	8013d9c <_Bfree>
 8013470:	ee08 8a10 	vmov	s16, r8
 8013474:	9b07      	ldr	r3, [sp, #28]
 8013476:	1b9a      	subs	r2, r3, r6
 8013478:	d006      	beq.n	8013488 <_dtoa_r+0x7a0>
 801347a:	ee18 1a10 	vmov	r1, s16
 801347e:	4620      	mov	r0, r4
 8013480:	f000 fe04 	bl	801408c <__pow5mult>
 8013484:	ee08 0a10 	vmov	s16, r0
 8013488:	2101      	movs	r1, #1
 801348a:	4620      	mov	r0, r4
 801348c:	f000 fd3e 	bl	8013f0c <__i2b>
 8013490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013492:	2b00      	cmp	r3, #0
 8013494:	4606      	mov	r6, r0
 8013496:	f340 8088 	ble.w	80135aa <_dtoa_r+0x8c2>
 801349a:	461a      	mov	r2, r3
 801349c:	4601      	mov	r1, r0
 801349e:	4620      	mov	r0, r4
 80134a0:	f000 fdf4 	bl	801408c <__pow5mult>
 80134a4:	9b06      	ldr	r3, [sp, #24]
 80134a6:	2b01      	cmp	r3, #1
 80134a8:	4606      	mov	r6, r0
 80134aa:	f340 8081 	ble.w	80135b0 <_dtoa_r+0x8c8>
 80134ae:	f04f 0800 	mov.w	r8, #0
 80134b2:	6933      	ldr	r3, [r6, #16]
 80134b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80134b8:	6918      	ldr	r0, [r3, #16]
 80134ba:	f000 fcd7 	bl	8013e6c <__hi0bits>
 80134be:	f1c0 0020 	rsb	r0, r0, #32
 80134c2:	9b05      	ldr	r3, [sp, #20]
 80134c4:	4418      	add	r0, r3
 80134c6:	f010 001f 	ands.w	r0, r0, #31
 80134ca:	f000 8092 	beq.w	80135f2 <_dtoa_r+0x90a>
 80134ce:	f1c0 0320 	rsb	r3, r0, #32
 80134d2:	2b04      	cmp	r3, #4
 80134d4:	f340 808a 	ble.w	80135ec <_dtoa_r+0x904>
 80134d8:	f1c0 001c 	rsb	r0, r0, #28
 80134dc:	9b04      	ldr	r3, [sp, #16]
 80134de:	4403      	add	r3, r0
 80134e0:	9304      	str	r3, [sp, #16]
 80134e2:	9b05      	ldr	r3, [sp, #20]
 80134e4:	4403      	add	r3, r0
 80134e6:	4405      	add	r5, r0
 80134e8:	9305      	str	r3, [sp, #20]
 80134ea:	9b04      	ldr	r3, [sp, #16]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	dd07      	ble.n	8013500 <_dtoa_r+0x818>
 80134f0:	ee18 1a10 	vmov	r1, s16
 80134f4:	461a      	mov	r2, r3
 80134f6:	4620      	mov	r0, r4
 80134f8:	f000 fe22 	bl	8014140 <__lshift>
 80134fc:	ee08 0a10 	vmov	s16, r0
 8013500:	9b05      	ldr	r3, [sp, #20]
 8013502:	2b00      	cmp	r3, #0
 8013504:	dd05      	ble.n	8013512 <_dtoa_r+0x82a>
 8013506:	4631      	mov	r1, r6
 8013508:	461a      	mov	r2, r3
 801350a:	4620      	mov	r0, r4
 801350c:	f000 fe18 	bl	8014140 <__lshift>
 8013510:	4606      	mov	r6, r0
 8013512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013514:	2b00      	cmp	r3, #0
 8013516:	d06e      	beq.n	80135f6 <_dtoa_r+0x90e>
 8013518:	ee18 0a10 	vmov	r0, s16
 801351c:	4631      	mov	r1, r6
 801351e:	f000 fe7f 	bl	8014220 <__mcmp>
 8013522:	2800      	cmp	r0, #0
 8013524:	da67      	bge.n	80135f6 <_dtoa_r+0x90e>
 8013526:	9b00      	ldr	r3, [sp, #0]
 8013528:	3b01      	subs	r3, #1
 801352a:	ee18 1a10 	vmov	r1, s16
 801352e:	9300      	str	r3, [sp, #0]
 8013530:	220a      	movs	r2, #10
 8013532:	2300      	movs	r3, #0
 8013534:	4620      	mov	r0, r4
 8013536:	f000 fc53 	bl	8013de0 <__multadd>
 801353a:	9b08      	ldr	r3, [sp, #32]
 801353c:	ee08 0a10 	vmov	s16, r0
 8013540:	2b00      	cmp	r3, #0
 8013542:	f000 81b1 	beq.w	80138a8 <_dtoa_r+0xbc0>
 8013546:	2300      	movs	r3, #0
 8013548:	4639      	mov	r1, r7
 801354a:	220a      	movs	r2, #10
 801354c:	4620      	mov	r0, r4
 801354e:	f000 fc47 	bl	8013de0 <__multadd>
 8013552:	9b02      	ldr	r3, [sp, #8]
 8013554:	2b00      	cmp	r3, #0
 8013556:	4607      	mov	r7, r0
 8013558:	f300 808e 	bgt.w	8013678 <_dtoa_r+0x990>
 801355c:	9b06      	ldr	r3, [sp, #24]
 801355e:	2b02      	cmp	r3, #2
 8013560:	dc51      	bgt.n	8013606 <_dtoa_r+0x91e>
 8013562:	e089      	b.n	8013678 <_dtoa_r+0x990>
 8013564:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013566:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801356a:	e74b      	b.n	8013404 <_dtoa_r+0x71c>
 801356c:	9b03      	ldr	r3, [sp, #12]
 801356e:	1e5e      	subs	r6, r3, #1
 8013570:	9b07      	ldr	r3, [sp, #28]
 8013572:	42b3      	cmp	r3, r6
 8013574:	bfbf      	itttt	lt
 8013576:	9b07      	ldrlt	r3, [sp, #28]
 8013578:	9607      	strlt	r6, [sp, #28]
 801357a:	1af2      	sublt	r2, r6, r3
 801357c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801357e:	bfb6      	itet	lt
 8013580:	189b      	addlt	r3, r3, r2
 8013582:	1b9e      	subge	r6, r3, r6
 8013584:	930a      	strlt	r3, [sp, #40]	; 0x28
 8013586:	9b03      	ldr	r3, [sp, #12]
 8013588:	bfb8      	it	lt
 801358a:	2600      	movlt	r6, #0
 801358c:	2b00      	cmp	r3, #0
 801358e:	bfb7      	itett	lt
 8013590:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8013594:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8013598:	1a9d      	sublt	r5, r3, r2
 801359a:	2300      	movlt	r3, #0
 801359c:	e734      	b.n	8013408 <_dtoa_r+0x720>
 801359e:	9e07      	ldr	r6, [sp, #28]
 80135a0:	9d04      	ldr	r5, [sp, #16]
 80135a2:	9f08      	ldr	r7, [sp, #32]
 80135a4:	e73b      	b.n	801341e <_dtoa_r+0x736>
 80135a6:	9a07      	ldr	r2, [sp, #28]
 80135a8:	e767      	b.n	801347a <_dtoa_r+0x792>
 80135aa:	9b06      	ldr	r3, [sp, #24]
 80135ac:	2b01      	cmp	r3, #1
 80135ae:	dc18      	bgt.n	80135e2 <_dtoa_r+0x8fa>
 80135b0:	f1ba 0f00 	cmp.w	sl, #0
 80135b4:	d115      	bne.n	80135e2 <_dtoa_r+0x8fa>
 80135b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80135ba:	b993      	cbnz	r3, 80135e2 <_dtoa_r+0x8fa>
 80135bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80135c0:	0d1b      	lsrs	r3, r3, #20
 80135c2:	051b      	lsls	r3, r3, #20
 80135c4:	b183      	cbz	r3, 80135e8 <_dtoa_r+0x900>
 80135c6:	9b04      	ldr	r3, [sp, #16]
 80135c8:	3301      	adds	r3, #1
 80135ca:	9304      	str	r3, [sp, #16]
 80135cc:	9b05      	ldr	r3, [sp, #20]
 80135ce:	3301      	adds	r3, #1
 80135d0:	9305      	str	r3, [sp, #20]
 80135d2:	f04f 0801 	mov.w	r8, #1
 80135d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135d8:	2b00      	cmp	r3, #0
 80135da:	f47f af6a 	bne.w	80134b2 <_dtoa_r+0x7ca>
 80135de:	2001      	movs	r0, #1
 80135e0:	e76f      	b.n	80134c2 <_dtoa_r+0x7da>
 80135e2:	f04f 0800 	mov.w	r8, #0
 80135e6:	e7f6      	b.n	80135d6 <_dtoa_r+0x8ee>
 80135e8:	4698      	mov	r8, r3
 80135ea:	e7f4      	b.n	80135d6 <_dtoa_r+0x8ee>
 80135ec:	f43f af7d 	beq.w	80134ea <_dtoa_r+0x802>
 80135f0:	4618      	mov	r0, r3
 80135f2:	301c      	adds	r0, #28
 80135f4:	e772      	b.n	80134dc <_dtoa_r+0x7f4>
 80135f6:	9b03      	ldr	r3, [sp, #12]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	dc37      	bgt.n	801366c <_dtoa_r+0x984>
 80135fc:	9b06      	ldr	r3, [sp, #24]
 80135fe:	2b02      	cmp	r3, #2
 8013600:	dd34      	ble.n	801366c <_dtoa_r+0x984>
 8013602:	9b03      	ldr	r3, [sp, #12]
 8013604:	9302      	str	r3, [sp, #8]
 8013606:	9b02      	ldr	r3, [sp, #8]
 8013608:	b96b      	cbnz	r3, 8013626 <_dtoa_r+0x93e>
 801360a:	4631      	mov	r1, r6
 801360c:	2205      	movs	r2, #5
 801360e:	4620      	mov	r0, r4
 8013610:	f000 fbe6 	bl	8013de0 <__multadd>
 8013614:	4601      	mov	r1, r0
 8013616:	4606      	mov	r6, r0
 8013618:	ee18 0a10 	vmov	r0, s16
 801361c:	f000 fe00 	bl	8014220 <__mcmp>
 8013620:	2800      	cmp	r0, #0
 8013622:	f73f adbb 	bgt.w	801319c <_dtoa_r+0x4b4>
 8013626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013628:	9d01      	ldr	r5, [sp, #4]
 801362a:	43db      	mvns	r3, r3
 801362c:	9300      	str	r3, [sp, #0]
 801362e:	f04f 0800 	mov.w	r8, #0
 8013632:	4631      	mov	r1, r6
 8013634:	4620      	mov	r0, r4
 8013636:	f000 fbb1 	bl	8013d9c <_Bfree>
 801363a:	2f00      	cmp	r7, #0
 801363c:	f43f aea4 	beq.w	8013388 <_dtoa_r+0x6a0>
 8013640:	f1b8 0f00 	cmp.w	r8, #0
 8013644:	d005      	beq.n	8013652 <_dtoa_r+0x96a>
 8013646:	45b8      	cmp	r8, r7
 8013648:	d003      	beq.n	8013652 <_dtoa_r+0x96a>
 801364a:	4641      	mov	r1, r8
 801364c:	4620      	mov	r0, r4
 801364e:	f000 fba5 	bl	8013d9c <_Bfree>
 8013652:	4639      	mov	r1, r7
 8013654:	4620      	mov	r0, r4
 8013656:	f000 fba1 	bl	8013d9c <_Bfree>
 801365a:	e695      	b.n	8013388 <_dtoa_r+0x6a0>
 801365c:	2600      	movs	r6, #0
 801365e:	4637      	mov	r7, r6
 8013660:	e7e1      	b.n	8013626 <_dtoa_r+0x93e>
 8013662:	9700      	str	r7, [sp, #0]
 8013664:	4637      	mov	r7, r6
 8013666:	e599      	b.n	801319c <_dtoa_r+0x4b4>
 8013668:	40240000 	.word	0x40240000
 801366c:	9b08      	ldr	r3, [sp, #32]
 801366e:	2b00      	cmp	r3, #0
 8013670:	f000 80ca 	beq.w	8013808 <_dtoa_r+0xb20>
 8013674:	9b03      	ldr	r3, [sp, #12]
 8013676:	9302      	str	r3, [sp, #8]
 8013678:	2d00      	cmp	r5, #0
 801367a:	dd05      	ble.n	8013688 <_dtoa_r+0x9a0>
 801367c:	4639      	mov	r1, r7
 801367e:	462a      	mov	r2, r5
 8013680:	4620      	mov	r0, r4
 8013682:	f000 fd5d 	bl	8014140 <__lshift>
 8013686:	4607      	mov	r7, r0
 8013688:	f1b8 0f00 	cmp.w	r8, #0
 801368c:	d05b      	beq.n	8013746 <_dtoa_r+0xa5e>
 801368e:	6879      	ldr	r1, [r7, #4]
 8013690:	4620      	mov	r0, r4
 8013692:	f000 fb43 	bl	8013d1c <_Balloc>
 8013696:	4605      	mov	r5, r0
 8013698:	b928      	cbnz	r0, 80136a6 <_dtoa_r+0x9be>
 801369a:	4b87      	ldr	r3, [pc, #540]	; (80138b8 <_dtoa_r+0xbd0>)
 801369c:	4602      	mov	r2, r0
 801369e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80136a2:	f7ff bb3b 	b.w	8012d1c <_dtoa_r+0x34>
 80136a6:	693a      	ldr	r2, [r7, #16]
 80136a8:	3202      	adds	r2, #2
 80136aa:	0092      	lsls	r2, r2, #2
 80136ac:	f107 010c 	add.w	r1, r7, #12
 80136b0:	300c      	adds	r0, #12
 80136b2:	f7fe fc6b 	bl	8011f8c <memcpy>
 80136b6:	2201      	movs	r2, #1
 80136b8:	4629      	mov	r1, r5
 80136ba:	4620      	mov	r0, r4
 80136bc:	f000 fd40 	bl	8014140 <__lshift>
 80136c0:	9b01      	ldr	r3, [sp, #4]
 80136c2:	f103 0901 	add.w	r9, r3, #1
 80136c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80136ca:	4413      	add	r3, r2
 80136cc:	9305      	str	r3, [sp, #20]
 80136ce:	f00a 0301 	and.w	r3, sl, #1
 80136d2:	46b8      	mov	r8, r7
 80136d4:	9304      	str	r3, [sp, #16]
 80136d6:	4607      	mov	r7, r0
 80136d8:	4631      	mov	r1, r6
 80136da:	ee18 0a10 	vmov	r0, s16
 80136de:	f7ff fa77 	bl	8012bd0 <quorem>
 80136e2:	4641      	mov	r1, r8
 80136e4:	9002      	str	r0, [sp, #8]
 80136e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80136ea:	ee18 0a10 	vmov	r0, s16
 80136ee:	f000 fd97 	bl	8014220 <__mcmp>
 80136f2:	463a      	mov	r2, r7
 80136f4:	9003      	str	r0, [sp, #12]
 80136f6:	4631      	mov	r1, r6
 80136f8:	4620      	mov	r0, r4
 80136fa:	f000 fdad 	bl	8014258 <__mdiff>
 80136fe:	68c2      	ldr	r2, [r0, #12]
 8013700:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8013704:	4605      	mov	r5, r0
 8013706:	bb02      	cbnz	r2, 801374a <_dtoa_r+0xa62>
 8013708:	4601      	mov	r1, r0
 801370a:	ee18 0a10 	vmov	r0, s16
 801370e:	f000 fd87 	bl	8014220 <__mcmp>
 8013712:	4602      	mov	r2, r0
 8013714:	4629      	mov	r1, r5
 8013716:	4620      	mov	r0, r4
 8013718:	9207      	str	r2, [sp, #28]
 801371a:	f000 fb3f 	bl	8013d9c <_Bfree>
 801371e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8013722:	ea43 0102 	orr.w	r1, r3, r2
 8013726:	9b04      	ldr	r3, [sp, #16]
 8013728:	430b      	orrs	r3, r1
 801372a:	464d      	mov	r5, r9
 801372c:	d10f      	bne.n	801374e <_dtoa_r+0xa66>
 801372e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013732:	d02a      	beq.n	801378a <_dtoa_r+0xaa2>
 8013734:	9b03      	ldr	r3, [sp, #12]
 8013736:	2b00      	cmp	r3, #0
 8013738:	dd02      	ble.n	8013740 <_dtoa_r+0xa58>
 801373a:	9b02      	ldr	r3, [sp, #8]
 801373c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8013740:	f88b a000 	strb.w	sl, [fp]
 8013744:	e775      	b.n	8013632 <_dtoa_r+0x94a>
 8013746:	4638      	mov	r0, r7
 8013748:	e7ba      	b.n	80136c0 <_dtoa_r+0x9d8>
 801374a:	2201      	movs	r2, #1
 801374c:	e7e2      	b.n	8013714 <_dtoa_r+0xa2c>
 801374e:	9b03      	ldr	r3, [sp, #12]
 8013750:	2b00      	cmp	r3, #0
 8013752:	db04      	blt.n	801375e <_dtoa_r+0xa76>
 8013754:	9906      	ldr	r1, [sp, #24]
 8013756:	430b      	orrs	r3, r1
 8013758:	9904      	ldr	r1, [sp, #16]
 801375a:	430b      	orrs	r3, r1
 801375c:	d122      	bne.n	80137a4 <_dtoa_r+0xabc>
 801375e:	2a00      	cmp	r2, #0
 8013760:	ddee      	ble.n	8013740 <_dtoa_r+0xa58>
 8013762:	ee18 1a10 	vmov	r1, s16
 8013766:	2201      	movs	r2, #1
 8013768:	4620      	mov	r0, r4
 801376a:	f000 fce9 	bl	8014140 <__lshift>
 801376e:	4631      	mov	r1, r6
 8013770:	ee08 0a10 	vmov	s16, r0
 8013774:	f000 fd54 	bl	8014220 <__mcmp>
 8013778:	2800      	cmp	r0, #0
 801377a:	dc03      	bgt.n	8013784 <_dtoa_r+0xa9c>
 801377c:	d1e0      	bne.n	8013740 <_dtoa_r+0xa58>
 801377e:	f01a 0f01 	tst.w	sl, #1
 8013782:	d0dd      	beq.n	8013740 <_dtoa_r+0xa58>
 8013784:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013788:	d1d7      	bne.n	801373a <_dtoa_r+0xa52>
 801378a:	2339      	movs	r3, #57	; 0x39
 801378c:	f88b 3000 	strb.w	r3, [fp]
 8013790:	462b      	mov	r3, r5
 8013792:	461d      	mov	r5, r3
 8013794:	3b01      	subs	r3, #1
 8013796:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801379a:	2a39      	cmp	r2, #57	; 0x39
 801379c:	d071      	beq.n	8013882 <_dtoa_r+0xb9a>
 801379e:	3201      	adds	r2, #1
 80137a0:	701a      	strb	r2, [r3, #0]
 80137a2:	e746      	b.n	8013632 <_dtoa_r+0x94a>
 80137a4:	2a00      	cmp	r2, #0
 80137a6:	dd07      	ble.n	80137b8 <_dtoa_r+0xad0>
 80137a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80137ac:	d0ed      	beq.n	801378a <_dtoa_r+0xaa2>
 80137ae:	f10a 0301 	add.w	r3, sl, #1
 80137b2:	f88b 3000 	strb.w	r3, [fp]
 80137b6:	e73c      	b.n	8013632 <_dtoa_r+0x94a>
 80137b8:	9b05      	ldr	r3, [sp, #20]
 80137ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 80137be:	4599      	cmp	r9, r3
 80137c0:	d047      	beq.n	8013852 <_dtoa_r+0xb6a>
 80137c2:	ee18 1a10 	vmov	r1, s16
 80137c6:	2300      	movs	r3, #0
 80137c8:	220a      	movs	r2, #10
 80137ca:	4620      	mov	r0, r4
 80137cc:	f000 fb08 	bl	8013de0 <__multadd>
 80137d0:	45b8      	cmp	r8, r7
 80137d2:	ee08 0a10 	vmov	s16, r0
 80137d6:	f04f 0300 	mov.w	r3, #0
 80137da:	f04f 020a 	mov.w	r2, #10
 80137de:	4641      	mov	r1, r8
 80137e0:	4620      	mov	r0, r4
 80137e2:	d106      	bne.n	80137f2 <_dtoa_r+0xb0a>
 80137e4:	f000 fafc 	bl	8013de0 <__multadd>
 80137e8:	4680      	mov	r8, r0
 80137ea:	4607      	mov	r7, r0
 80137ec:	f109 0901 	add.w	r9, r9, #1
 80137f0:	e772      	b.n	80136d8 <_dtoa_r+0x9f0>
 80137f2:	f000 faf5 	bl	8013de0 <__multadd>
 80137f6:	4639      	mov	r1, r7
 80137f8:	4680      	mov	r8, r0
 80137fa:	2300      	movs	r3, #0
 80137fc:	220a      	movs	r2, #10
 80137fe:	4620      	mov	r0, r4
 8013800:	f000 faee 	bl	8013de0 <__multadd>
 8013804:	4607      	mov	r7, r0
 8013806:	e7f1      	b.n	80137ec <_dtoa_r+0xb04>
 8013808:	9b03      	ldr	r3, [sp, #12]
 801380a:	9302      	str	r3, [sp, #8]
 801380c:	9d01      	ldr	r5, [sp, #4]
 801380e:	ee18 0a10 	vmov	r0, s16
 8013812:	4631      	mov	r1, r6
 8013814:	f7ff f9dc 	bl	8012bd0 <quorem>
 8013818:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801381c:	9b01      	ldr	r3, [sp, #4]
 801381e:	f805 ab01 	strb.w	sl, [r5], #1
 8013822:	1aea      	subs	r2, r5, r3
 8013824:	9b02      	ldr	r3, [sp, #8]
 8013826:	4293      	cmp	r3, r2
 8013828:	dd09      	ble.n	801383e <_dtoa_r+0xb56>
 801382a:	ee18 1a10 	vmov	r1, s16
 801382e:	2300      	movs	r3, #0
 8013830:	220a      	movs	r2, #10
 8013832:	4620      	mov	r0, r4
 8013834:	f000 fad4 	bl	8013de0 <__multadd>
 8013838:	ee08 0a10 	vmov	s16, r0
 801383c:	e7e7      	b.n	801380e <_dtoa_r+0xb26>
 801383e:	9b02      	ldr	r3, [sp, #8]
 8013840:	2b00      	cmp	r3, #0
 8013842:	bfc8      	it	gt
 8013844:	461d      	movgt	r5, r3
 8013846:	9b01      	ldr	r3, [sp, #4]
 8013848:	bfd8      	it	le
 801384a:	2501      	movle	r5, #1
 801384c:	441d      	add	r5, r3
 801384e:	f04f 0800 	mov.w	r8, #0
 8013852:	ee18 1a10 	vmov	r1, s16
 8013856:	2201      	movs	r2, #1
 8013858:	4620      	mov	r0, r4
 801385a:	f000 fc71 	bl	8014140 <__lshift>
 801385e:	4631      	mov	r1, r6
 8013860:	ee08 0a10 	vmov	s16, r0
 8013864:	f000 fcdc 	bl	8014220 <__mcmp>
 8013868:	2800      	cmp	r0, #0
 801386a:	dc91      	bgt.n	8013790 <_dtoa_r+0xaa8>
 801386c:	d102      	bne.n	8013874 <_dtoa_r+0xb8c>
 801386e:	f01a 0f01 	tst.w	sl, #1
 8013872:	d18d      	bne.n	8013790 <_dtoa_r+0xaa8>
 8013874:	462b      	mov	r3, r5
 8013876:	461d      	mov	r5, r3
 8013878:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801387c:	2a30      	cmp	r2, #48	; 0x30
 801387e:	d0fa      	beq.n	8013876 <_dtoa_r+0xb8e>
 8013880:	e6d7      	b.n	8013632 <_dtoa_r+0x94a>
 8013882:	9a01      	ldr	r2, [sp, #4]
 8013884:	429a      	cmp	r2, r3
 8013886:	d184      	bne.n	8013792 <_dtoa_r+0xaaa>
 8013888:	9b00      	ldr	r3, [sp, #0]
 801388a:	3301      	adds	r3, #1
 801388c:	9300      	str	r3, [sp, #0]
 801388e:	2331      	movs	r3, #49	; 0x31
 8013890:	7013      	strb	r3, [r2, #0]
 8013892:	e6ce      	b.n	8013632 <_dtoa_r+0x94a>
 8013894:	4b09      	ldr	r3, [pc, #36]	; (80138bc <_dtoa_r+0xbd4>)
 8013896:	f7ff ba95 	b.w	8012dc4 <_dtoa_r+0xdc>
 801389a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801389c:	2b00      	cmp	r3, #0
 801389e:	f47f aa6e 	bne.w	8012d7e <_dtoa_r+0x96>
 80138a2:	4b07      	ldr	r3, [pc, #28]	; (80138c0 <_dtoa_r+0xbd8>)
 80138a4:	f7ff ba8e 	b.w	8012dc4 <_dtoa_r+0xdc>
 80138a8:	9b02      	ldr	r3, [sp, #8]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	dcae      	bgt.n	801380c <_dtoa_r+0xb24>
 80138ae:	9b06      	ldr	r3, [sp, #24]
 80138b0:	2b02      	cmp	r3, #2
 80138b2:	f73f aea8 	bgt.w	8013606 <_dtoa_r+0x91e>
 80138b6:	e7a9      	b.n	801380c <_dtoa_r+0xb24>
 80138b8:	08015473 	.word	0x08015473
 80138bc:	080153d0 	.word	0x080153d0
 80138c0:	080153f4 	.word	0x080153f4

080138c4 <__sflush_r>:
 80138c4:	898a      	ldrh	r2, [r1, #12]
 80138c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138ca:	4605      	mov	r5, r0
 80138cc:	0710      	lsls	r0, r2, #28
 80138ce:	460c      	mov	r4, r1
 80138d0:	d458      	bmi.n	8013984 <__sflush_r+0xc0>
 80138d2:	684b      	ldr	r3, [r1, #4]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	dc05      	bgt.n	80138e4 <__sflush_r+0x20>
 80138d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80138da:	2b00      	cmp	r3, #0
 80138dc:	dc02      	bgt.n	80138e4 <__sflush_r+0x20>
 80138de:	2000      	movs	r0, #0
 80138e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80138e6:	2e00      	cmp	r6, #0
 80138e8:	d0f9      	beq.n	80138de <__sflush_r+0x1a>
 80138ea:	2300      	movs	r3, #0
 80138ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80138f0:	682f      	ldr	r7, [r5, #0]
 80138f2:	602b      	str	r3, [r5, #0]
 80138f4:	d032      	beq.n	801395c <__sflush_r+0x98>
 80138f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80138f8:	89a3      	ldrh	r3, [r4, #12]
 80138fa:	075a      	lsls	r2, r3, #29
 80138fc:	d505      	bpl.n	801390a <__sflush_r+0x46>
 80138fe:	6863      	ldr	r3, [r4, #4]
 8013900:	1ac0      	subs	r0, r0, r3
 8013902:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013904:	b10b      	cbz	r3, 801390a <__sflush_r+0x46>
 8013906:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013908:	1ac0      	subs	r0, r0, r3
 801390a:	2300      	movs	r3, #0
 801390c:	4602      	mov	r2, r0
 801390e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013910:	6a21      	ldr	r1, [r4, #32]
 8013912:	4628      	mov	r0, r5
 8013914:	47b0      	blx	r6
 8013916:	1c43      	adds	r3, r0, #1
 8013918:	89a3      	ldrh	r3, [r4, #12]
 801391a:	d106      	bne.n	801392a <__sflush_r+0x66>
 801391c:	6829      	ldr	r1, [r5, #0]
 801391e:	291d      	cmp	r1, #29
 8013920:	d82c      	bhi.n	801397c <__sflush_r+0xb8>
 8013922:	4a2a      	ldr	r2, [pc, #168]	; (80139cc <__sflush_r+0x108>)
 8013924:	40ca      	lsrs	r2, r1
 8013926:	07d6      	lsls	r6, r2, #31
 8013928:	d528      	bpl.n	801397c <__sflush_r+0xb8>
 801392a:	2200      	movs	r2, #0
 801392c:	6062      	str	r2, [r4, #4]
 801392e:	04d9      	lsls	r1, r3, #19
 8013930:	6922      	ldr	r2, [r4, #16]
 8013932:	6022      	str	r2, [r4, #0]
 8013934:	d504      	bpl.n	8013940 <__sflush_r+0x7c>
 8013936:	1c42      	adds	r2, r0, #1
 8013938:	d101      	bne.n	801393e <__sflush_r+0x7a>
 801393a:	682b      	ldr	r3, [r5, #0]
 801393c:	b903      	cbnz	r3, 8013940 <__sflush_r+0x7c>
 801393e:	6560      	str	r0, [r4, #84]	; 0x54
 8013940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013942:	602f      	str	r7, [r5, #0]
 8013944:	2900      	cmp	r1, #0
 8013946:	d0ca      	beq.n	80138de <__sflush_r+0x1a>
 8013948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801394c:	4299      	cmp	r1, r3
 801394e:	d002      	beq.n	8013956 <__sflush_r+0x92>
 8013950:	4628      	mov	r0, r5
 8013952:	f000 fd7d 	bl	8014450 <_free_r>
 8013956:	2000      	movs	r0, #0
 8013958:	6360      	str	r0, [r4, #52]	; 0x34
 801395a:	e7c1      	b.n	80138e0 <__sflush_r+0x1c>
 801395c:	6a21      	ldr	r1, [r4, #32]
 801395e:	2301      	movs	r3, #1
 8013960:	4628      	mov	r0, r5
 8013962:	47b0      	blx	r6
 8013964:	1c41      	adds	r1, r0, #1
 8013966:	d1c7      	bne.n	80138f8 <__sflush_r+0x34>
 8013968:	682b      	ldr	r3, [r5, #0]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d0c4      	beq.n	80138f8 <__sflush_r+0x34>
 801396e:	2b1d      	cmp	r3, #29
 8013970:	d001      	beq.n	8013976 <__sflush_r+0xb2>
 8013972:	2b16      	cmp	r3, #22
 8013974:	d101      	bne.n	801397a <__sflush_r+0xb6>
 8013976:	602f      	str	r7, [r5, #0]
 8013978:	e7b1      	b.n	80138de <__sflush_r+0x1a>
 801397a:	89a3      	ldrh	r3, [r4, #12]
 801397c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013980:	81a3      	strh	r3, [r4, #12]
 8013982:	e7ad      	b.n	80138e0 <__sflush_r+0x1c>
 8013984:	690f      	ldr	r7, [r1, #16]
 8013986:	2f00      	cmp	r7, #0
 8013988:	d0a9      	beq.n	80138de <__sflush_r+0x1a>
 801398a:	0793      	lsls	r3, r2, #30
 801398c:	680e      	ldr	r6, [r1, #0]
 801398e:	bf08      	it	eq
 8013990:	694b      	ldreq	r3, [r1, #20]
 8013992:	600f      	str	r7, [r1, #0]
 8013994:	bf18      	it	ne
 8013996:	2300      	movne	r3, #0
 8013998:	eba6 0807 	sub.w	r8, r6, r7
 801399c:	608b      	str	r3, [r1, #8]
 801399e:	f1b8 0f00 	cmp.w	r8, #0
 80139a2:	dd9c      	ble.n	80138de <__sflush_r+0x1a>
 80139a4:	6a21      	ldr	r1, [r4, #32]
 80139a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80139a8:	4643      	mov	r3, r8
 80139aa:	463a      	mov	r2, r7
 80139ac:	4628      	mov	r0, r5
 80139ae:	47b0      	blx	r6
 80139b0:	2800      	cmp	r0, #0
 80139b2:	dc06      	bgt.n	80139c2 <__sflush_r+0xfe>
 80139b4:	89a3      	ldrh	r3, [r4, #12]
 80139b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139ba:	81a3      	strh	r3, [r4, #12]
 80139bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80139c0:	e78e      	b.n	80138e0 <__sflush_r+0x1c>
 80139c2:	4407      	add	r7, r0
 80139c4:	eba8 0800 	sub.w	r8, r8, r0
 80139c8:	e7e9      	b.n	801399e <__sflush_r+0xda>
 80139ca:	bf00      	nop
 80139cc:	20400001 	.word	0x20400001

080139d0 <_fflush_r>:
 80139d0:	b538      	push	{r3, r4, r5, lr}
 80139d2:	690b      	ldr	r3, [r1, #16]
 80139d4:	4605      	mov	r5, r0
 80139d6:	460c      	mov	r4, r1
 80139d8:	b913      	cbnz	r3, 80139e0 <_fflush_r+0x10>
 80139da:	2500      	movs	r5, #0
 80139dc:	4628      	mov	r0, r5
 80139de:	bd38      	pop	{r3, r4, r5, pc}
 80139e0:	b118      	cbz	r0, 80139ea <_fflush_r+0x1a>
 80139e2:	6983      	ldr	r3, [r0, #24]
 80139e4:	b90b      	cbnz	r3, 80139ea <_fflush_r+0x1a>
 80139e6:	f000 f887 	bl	8013af8 <__sinit>
 80139ea:	4b14      	ldr	r3, [pc, #80]	; (8013a3c <_fflush_r+0x6c>)
 80139ec:	429c      	cmp	r4, r3
 80139ee:	d11b      	bne.n	8013a28 <_fflush_r+0x58>
 80139f0:	686c      	ldr	r4, [r5, #4]
 80139f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d0ef      	beq.n	80139da <_fflush_r+0xa>
 80139fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80139fc:	07d0      	lsls	r0, r2, #31
 80139fe:	d404      	bmi.n	8013a0a <_fflush_r+0x3a>
 8013a00:	0599      	lsls	r1, r3, #22
 8013a02:	d402      	bmi.n	8013a0a <_fflush_r+0x3a>
 8013a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a06:	f000 f91a 	bl	8013c3e <__retarget_lock_acquire_recursive>
 8013a0a:	4628      	mov	r0, r5
 8013a0c:	4621      	mov	r1, r4
 8013a0e:	f7ff ff59 	bl	80138c4 <__sflush_r>
 8013a12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013a14:	07da      	lsls	r2, r3, #31
 8013a16:	4605      	mov	r5, r0
 8013a18:	d4e0      	bmi.n	80139dc <_fflush_r+0xc>
 8013a1a:	89a3      	ldrh	r3, [r4, #12]
 8013a1c:	059b      	lsls	r3, r3, #22
 8013a1e:	d4dd      	bmi.n	80139dc <_fflush_r+0xc>
 8013a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a22:	f000 f90d 	bl	8013c40 <__retarget_lock_release_recursive>
 8013a26:	e7d9      	b.n	80139dc <_fflush_r+0xc>
 8013a28:	4b05      	ldr	r3, [pc, #20]	; (8013a40 <_fflush_r+0x70>)
 8013a2a:	429c      	cmp	r4, r3
 8013a2c:	d101      	bne.n	8013a32 <_fflush_r+0x62>
 8013a2e:	68ac      	ldr	r4, [r5, #8]
 8013a30:	e7df      	b.n	80139f2 <_fflush_r+0x22>
 8013a32:	4b04      	ldr	r3, [pc, #16]	; (8013a44 <_fflush_r+0x74>)
 8013a34:	429c      	cmp	r4, r3
 8013a36:	bf08      	it	eq
 8013a38:	68ec      	ldreq	r4, [r5, #12]
 8013a3a:	e7da      	b.n	80139f2 <_fflush_r+0x22>
 8013a3c:	080154a4 	.word	0x080154a4
 8013a40:	080154c4 	.word	0x080154c4
 8013a44:	08015484 	.word	0x08015484

08013a48 <std>:
 8013a48:	2300      	movs	r3, #0
 8013a4a:	b510      	push	{r4, lr}
 8013a4c:	4604      	mov	r4, r0
 8013a4e:	e9c0 3300 	strd	r3, r3, [r0]
 8013a52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013a56:	6083      	str	r3, [r0, #8]
 8013a58:	8181      	strh	r1, [r0, #12]
 8013a5a:	6643      	str	r3, [r0, #100]	; 0x64
 8013a5c:	81c2      	strh	r2, [r0, #14]
 8013a5e:	6183      	str	r3, [r0, #24]
 8013a60:	4619      	mov	r1, r3
 8013a62:	2208      	movs	r2, #8
 8013a64:	305c      	adds	r0, #92	; 0x5c
 8013a66:	f7fe fa9f 	bl	8011fa8 <memset>
 8013a6a:	4b05      	ldr	r3, [pc, #20]	; (8013a80 <std+0x38>)
 8013a6c:	6263      	str	r3, [r4, #36]	; 0x24
 8013a6e:	4b05      	ldr	r3, [pc, #20]	; (8013a84 <std+0x3c>)
 8013a70:	62a3      	str	r3, [r4, #40]	; 0x28
 8013a72:	4b05      	ldr	r3, [pc, #20]	; (8013a88 <std+0x40>)
 8013a74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013a76:	4b05      	ldr	r3, [pc, #20]	; (8013a8c <std+0x44>)
 8013a78:	6224      	str	r4, [r4, #32]
 8013a7a:	6323      	str	r3, [r4, #48]	; 0x30
 8013a7c:	bd10      	pop	{r4, pc}
 8013a7e:	bf00      	nop
 8013a80:	08014b9d 	.word	0x08014b9d
 8013a84:	08014bbf 	.word	0x08014bbf
 8013a88:	08014bf7 	.word	0x08014bf7
 8013a8c:	08014c1b 	.word	0x08014c1b

08013a90 <_cleanup_r>:
 8013a90:	4901      	ldr	r1, [pc, #4]	; (8013a98 <_cleanup_r+0x8>)
 8013a92:	f000 b8af 	b.w	8013bf4 <_fwalk_reent>
 8013a96:	bf00      	nop
 8013a98:	080139d1 	.word	0x080139d1

08013a9c <__sfmoreglue>:
 8013a9c:	b570      	push	{r4, r5, r6, lr}
 8013a9e:	2268      	movs	r2, #104	; 0x68
 8013aa0:	1e4d      	subs	r5, r1, #1
 8013aa2:	4355      	muls	r5, r2
 8013aa4:	460e      	mov	r6, r1
 8013aa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013aaa:	f000 fd3d 	bl	8014528 <_malloc_r>
 8013aae:	4604      	mov	r4, r0
 8013ab0:	b140      	cbz	r0, 8013ac4 <__sfmoreglue+0x28>
 8013ab2:	2100      	movs	r1, #0
 8013ab4:	e9c0 1600 	strd	r1, r6, [r0]
 8013ab8:	300c      	adds	r0, #12
 8013aba:	60a0      	str	r0, [r4, #8]
 8013abc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013ac0:	f7fe fa72 	bl	8011fa8 <memset>
 8013ac4:	4620      	mov	r0, r4
 8013ac6:	bd70      	pop	{r4, r5, r6, pc}

08013ac8 <__sfp_lock_acquire>:
 8013ac8:	4801      	ldr	r0, [pc, #4]	; (8013ad0 <__sfp_lock_acquire+0x8>)
 8013aca:	f000 b8b8 	b.w	8013c3e <__retarget_lock_acquire_recursive>
 8013ace:	bf00      	nop
 8013ad0:	2000349d 	.word	0x2000349d

08013ad4 <__sfp_lock_release>:
 8013ad4:	4801      	ldr	r0, [pc, #4]	; (8013adc <__sfp_lock_release+0x8>)
 8013ad6:	f000 b8b3 	b.w	8013c40 <__retarget_lock_release_recursive>
 8013ada:	bf00      	nop
 8013adc:	2000349d 	.word	0x2000349d

08013ae0 <__sinit_lock_acquire>:
 8013ae0:	4801      	ldr	r0, [pc, #4]	; (8013ae8 <__sinit_lock_acquire+0x8>)
 8013ae2:	f000 b8ac 	b.w	8013c3e <__retarget_lock_acquire_recursive>
 8013ae6:	bf00      	nop
 8013ae8:	2000349e 	.word	0x2000349e

08013aec <__sinit_lock_release>:
 8013aec:	4801      	ldr	r0, [pc, #4]	; (8013af4 <__sinit_lock_release+0x8>)
 8013aee:	f000 b8a7 	b.w	8013c40 <__retarget_lock_release_recursive>
 8013af2:	bf00      	nop
 8013af4:	2000349e 	.word	0x2000349e

08013af8 <__sinit>:
 8013af8:	b510      	push	{r4, lr}
 8013afa:	4604      	mov	r4, r0
 8013afc:	f7ff fff0 	bl	8013ae0 <__sinit_lock_acquire>
 8013b00:	69a3      	ldr	r3, [r4, #24]
 8013b02:	b11b      	cbz	r3, 8013b0c <__sinit+0x14>
 8013b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b08:	f7ff bff0 	b.w	8013aec <__sinit_lock_release>
 8013b0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013b10:	6523      	str	r3, [r4, #80]	; 0x50
 8013b12:	4b13      	ldr	r3, [pc, #76]	; (8013b60 <__sinit+0x68>)
 8013b14:	4a13      	ldr	r2, [pc, #76]	; (8013b64 <__sinit+0x6c>)
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	62a2      	str	r2, [r4, #40]	; 0x28
 8013b1a:	42a3      	cmp	r3, r4
 8013b1c:	bf04      	itt	eq
 8013b1e:	2301      	moveq	r3, #1
 8013b20:	61a3      	streq	r3, [r4, #24]
 8013b22:	4620      	mov	r0, r4
 8013b24:	f000 f820 	bl	8013b68 <__sfp>
 8013b28:	6060      	str	r0, [r4, #4]
 8013b2a:	4620      	mov	r0, r4
 8013b2c:	f000 f81c 	bl	8013b68 <__sfp>
 8013b30:	60a0      	str	r0, [r4, #8]
 8013b32:	4620      	mov	r0, r4
 8013b34:	f000 f818 	bl	8013b68 <__sfp>
 8013b38:	2200      	movs	r2, #0
 8013b3a:	60e0      	str	r0, [r4, #12]
 8013b3c:	2104      	movs	r1, #4
 8013b3e:	6860      	ldr	r0, [r4, #4]
 8013b40:	f7ff ff82 	bl	8013a48 <std>
 8013b44:	68a0      	ldr	r0, [r4, #8]
 8013b46:	2201      	movs	r2, #1
 8013b48:	2109      	movs	r1, #9
 8013b4a:	f7ff ff7d 	bl	8013a48 <std>
 8013b4e:	68e0      	ldr	r0, [r4, #12]
 8013b50:	2202      	movs	r2, #2
 8013b52:	2112      	movs	r1, #18
 8013b54:	f7ff ff78 	bl	8013a48 <std>
 8013b58:	2301      	movs	r3, #1
 8013b5a:	61a3      	str	r3, [r4, #24]
 8013b5c:	e7d2      	b.n	8013b04 <__sinit+0xc>
 8013b5e:	bf00      	nop
 8013b60:	080153bc 	.word	0x080153bc
 8013b64:	08013a91 	.word	0x08013a91

08013b68 <__sfp>:
 8013b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b6a:	4607      	mov	r7, r0
 8013b6c:	f7ff ffac 	bl	8013ac8 <__sfp_lock_acquire>
 8013b70:	4b1e      	ldr	r3, [pc, #120]	; (8013bec <__sfp+0x84>)
 8013b72:	681e      	ldr	r6, [r3, #0]
 8013b74:	69b3      	ldr	r3, [r6, #24]
 8013b76:	b913      	cbnz	r3, 8013b7e <__sfp+0x16>
 8013b78:	4630      	mov	r0, r6
 8013b7a:	f7ff ffbd 	bl	8013af8 <__sinit>
 8013b7e:	3648      	adds	r6, #72	; 0x48
 8013b80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013b84:	3b01      	subs	r3, #1
 8013b86:	d503      	bpl.n	8013b90 <__sfp+0x28>
 8013b88:	6833      	ldr	r3, [r6, #0]
 8013b8a:	b30b      	cbz	r3, 8013bd0 <__sfp+0x68>
 8013b8c:	6836      	ldr	r6, [r6, #0]
 8013b8e:	e7f7      	b.n	8013b80 <__sfp+0x18>
 8013b90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013b94:	b9d5      	cbnz	r5, 8013bcc <__sfp+0x64>
 8013b96:	4b16      	ldr	r3, [pc, #88]	; (8013bf0 <__sfp+0x88>)
 8013b98:	60e3      	str	r3, [r4, #12]
 8013b9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013b9e:	6665      	str	r5, [r4, #100]	; 0x64
 8013ba0:	f000 f84c 	bl	8013c3c <__retarget_lock_init_recursive>
 8013ba4:	f7ff ff96 	bl	8013ad4 <__sfp_lock_release>
 8013ba8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013bac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013bb0:	6025      	str	r5, [r4, #0]
 8013bb2:	61a5      	str	r5, [r4, #24]
 8013bb4:	2208      	movs	r2, #8
 8013bb6:	4629      	mov	r1, r5
 8013bb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013bbc:	f7fe f9f4 	bl	8011fa8 <memset>
 8013bc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013bc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013bc8:	4620      	mov	r0, r4
 8013bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bcc:	3468      	adds	r4, #104	; 0x68
 8013bce:	e7d9      	b.n	8013b84 <__sfp+0x1c>
 8013bd0:	2104      	movs	r1, #4
 8013bd2:	4638      	mov	r0, r7
 8013bd4:	f7ff ff62 	bl	8013a9c <__sfmoreglue>
 8013bd8:	4604      	mov	r4, r0
 8013bda:	6030      	str	r0, [r6, #0]
 8013bdc:	2800      	cmp	r0, #0
 8013bde:	d1d5      	bne.n	8013b8c <__sfp+0x24>
 8013be0:	f7ff ff78 	bl	8013ad4 <__sfp_lock_release>
 8013be4:	230c      	movs	r3, #12
 8013be6:	603b      	str	r3, [r7, #0]
 8013be8:	e7ee      	b.n	8013bc8 <__sfp+0x60>
 8013bea:	bf00      	nop
 8013bec:	080153bc 	.word	0x080153bc
 8013bf0:	ffff0001 	.word	0xffff0001

08013bf4 <_fwalk_reent>:
 8013bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013bf8:	4606      	mov	r6, r0
 8013bfa:	4688      	mov	r8, r1
 8013bfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013c00:	2700      	movs	r7, #0
 8013c02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013c06:	f1b9 0901 	subs.w	r9, r9, #1
 8013c0a:	d505      	bpl.n	8013c18 <_fwalk_reent+0x24>
 8013c0c:	6824      	ldr	r4, [r4, #0]
 8013c0e:	2c00      	cmp	r4, #0
 8013c10:	d1f7      	bne.n	8013c02 <_fwalk_reent+0xe>
 8013c12:	4638      	mov	r0, r7
 8013c14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c18:	89ab      	ldrh	r3, [r5, #12]
 8013c1a:	2b01      	cmp	r3, #1
 8013c1c:	d907      	bls.n	8013c2e <_fwalk_reent+0x3a>
 8013c1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013c22:	3301      	adds	r3, #1
 8013c24:	d003      	beq.n	8013c2e <_fwalk_reent+0x3a>
 8013c26:	4629      	mov	r1, r5
 8013c28:	4630      	mov	r0, r6
 8013c2a:	47c0      	blx	r8
 8013c2c:	4307      	orrs	r7, r0
 8013c2e:	3568      	adds	r5, #104	; 0x68
 8013c30:	e7e9      	b.n	8013c06 <_fwalk_reent+0x12>
	...

08013c34 <_localeconv_r>:
 8013c34:	4800      	ldr	r0, [pc, #0]	; (8013c38 <_localeconv_r+0x4>)
 8013c36:	4770      	bx	lr
 8013c38:	200002dc 	.word	0x200002dc

08013c3c <__retarget_lock_init_recursive>:
 8013c3c:	4770      	bx	lr

08013c3e <__retarget_lock_acquire_recursive>:
 8013c3e:	4770      	bx	lr

08013c40 <__retarget_lock_release_recursive>:
 8013c40:	4770      	bx	lr

08013c42 <__swhatbuf_r>:
 8013c42:	b570      	push	{r4, r5, r6, lr}
 8013c44:	460e      	mov	r6, r1
 8013c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c4a:	2900      	cmp	r1, #0
 8013c4c:	b096      	sub	sp, #88	; 0x58
 8013c4e:	4614      	mov	r4, r2
 8013c50:	461d      	mov	r5, r3
 8013c52:	da08      	bge.n	8013c66 <__swhatbuf_r+0x24>
 8013c54:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013c58:	2200      	movs	r2, #0
 8013c5a:	602a      	str	r2, [r5, #0]
 8013c5c:	061a      	lsls	r2, r3, #24
 8013c5e:	d410      	bmi.n	8013c82 <__swhatbuf_r+0x40>
 8013c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013c64:	e00e      	b.n	8013c84 <__swhatbuf_r+0x42>
 8013c66:	466a      	mov	r2, sp
 8013c68:	f001 f82e 	bl	8014cc8 <_fstat_r>
 8013c6c:	2800      	cmp	r0, #0
 8013c6e:	dbf1      	blt.n	8013c54 <__swhatbuf_r+0x12>
 8013c70:	9a01      	ldr	r2, [sp, #4]
 8013c72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013c76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013c7a:	425a      	negs	r2, r3
 8013c7c:	415a      	adcs	r2, r3
 8013c7e:	602a      	str	r2, [r5, #0]
 8013c80:	e7ee      	b.n	8013c60 <__swhatbuf_r+0x1e>
 8013c82:	2340      	movs	r3, #64	; 0x40
 8013c84:	2000      	movs	r0, #0
 8013c86:	6023      	str	r3, [r4, #0]
 8013c88:	b016      	add	sp, #88	; 0x58
 8013c8a:	bd70      	pop	{r4, r5, r6, pc}

08013c8c <__smakebuf_r>:
 8013c8c:	898b      	ldrh	r3, [r1, #12]
 8013c8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013c90:	079d      	lsls	r5, r3, #30
 8013c92:	4606      	mov	r6, r0
 8013c94:	460c      	mov	r4, r1
 8013c96:	d507      	bpl.n	8013ca8 <__smakebuf_r+0x1c>
 8013c98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013c9c:	6023      	str	r3, [r4, #0]
 8013c9e:	6123      	str	r3, [r4, #16]
 8013ca0:	2301      	movs	r3, #1
 8013ca2:	6163      	str	r3, [r4, #20]
 8013ca4:	b002      	add	sp, #8
 8013ca6:	bd70      	pop	{r4, r5, r6, pc}
 8013ca8:	ab01      	add	r3, sp, #4
 8013caa:	466a      	mov	r2, sp
 8013cac:	f7ff ffc9 	bl	8013c42 <__swhatbuf_r>
 8013cb0:	9900      	ldr	r1, [sp, #0]
 8013cb2:	4605      	mov	r5, r0
 8013cb4:	4630      	mov	r0, r6
 8013cb6:	f000 fc37 	bl	8014528 <_malloc_r>
 8013cba:	b948      	cbnz	r0, 8013cd0 <__smakebuf_r+0x44>
 8013cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013cc0:	059a      	lsls	r2, r3, #22
 8013cc2:	d4ef      	bmi.n	8013ca4 <__smakebuf_r+0x18>
 8013cc4:	f023 0303 	bic.w	r3, r3, #3
 8013cc8:	f043 0302 	orr.w	r3, r3, #2
 8013ccc:	81a3      	strh	r3, [r4, #12]
 8013cce:	e7e3      	b.n	8013c98 <__smakebuf_r+0xc>
 8013cd0:	4b0d      	ldr	r3, [pc, #52]	; (8013d08 <__smakebuf_r+0x7c>)
 8013cd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8013cd4:	89a3      	ldrh	r3, [r4, #12]
 8013cd6:	6020      	str	r0, [r4, #0]
 8013cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013cdc:	81a3      	strh	r3, [r4, #12]
 8013cde:	9b00      	ldr	r3, [sp, #0]
 8013ce0:	6163      	str	r3, [r4, #20]
 8013ce2:	9b01      	ldr	r3, [sp, #4]
 8013ce4:	6120      	str	r0, [r4, #16]
 8013ce6:	b15b      	cbz	r3, 8013d00 <__smakebuf_r+0x74>
 8013ce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013cec:	4630      	mov	r0, r6
 8013cee:	f000 fffd 	bl	8014cec <_isatty_r>
 8013cf2:	b128      	cbz	r0, 8013d00 <__smakebuf_r+0x74>
 8013cf4:	89a3      	ldrh	r3, [r4, #12]
 8013cf6:	f023 0303 	bic.w	r3, r3, #3
 8013cfa:	f043 0301 	orr.w	r3, r3, #1
 8013cfe:	81a3      	strh	r3, [r4, #12]
 8013d00:	89a0      	ldrh	r0, [r4, #12]
 8013d02:	4305      	orrs	r5, r0
 8013d04:	81a5      	strh	r5, [r4, #12]
 8013d06:	e7cd      	b.n	8013ca4 <__smakebuf_r+0x18>
 8013d08:	08013a91 	.word	0x08013a91

08013d0c <malloc>:
 8013d0c:	4b02      	ldr	r3, [pc, #8]	; (8013d18 <malloc+0xc>)
 8013d0e:	4601      	mov	r1, r0
 8013d10:	6818      	ldr	r0, [r3, #0]
 8013d12:	f000 bc09 	b.w	8014528 <_malloc_r>
 8013d16:	bf00      	nop
 8013d18:	20000188 	.word	0x20000188

08013d1c <_Balloc>:
 8013d1c:	b570      	push	{r4, r5, r6, lr}
 8013d1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013d20:	4604      	mov	r4, r0
 8013d22:	460d      	mov	r5, r1
 8013d24:	b976      	cbnz	r6, 8013d44 <_Balloc+0x28>
 8013d26:	2010      	movs	r0, #16
 8013d28:	f7ff fff0 	bl	8013d0c <malloc>
 8013d2c:	4602      	mov	r2, r0
 8013d2e:	6260      	str	r0, [r4, #36]	; 0x24
 8013d30:	b920      	cbnz	r0, 8013d3c <_Balloc+0x20>
 8013d32:	4b18      	ldr	r3, [pc, #96]	; (8013d94 <_Balloc+0x78>)
 8013d34:	4818      	ldr	r0, [pc, #96]	; (8013d98 <_Balloc+0x7c>)
 8013d36:	2166      	movs	r1, #102	; 0x66
 8013d38:	f000 ff86 	bl	8014c48 <__assert_func>
 8013d3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013d40:	6006      	str	r6, [r0, #0]
 8013d42:	60c6      	str	r6, [r0, #12]
 8013d44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013d46:	68f3      	ldr	r3, [r6, #12]
 8013d48:	b183      	cbz	r3, 8013d6c <_Balloc+0x50>
 8013d4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d4c:	68db      	ldr	r3, [r3, #12]
 8013d4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013d52:	b9b8      	cbnz	r0, 8013d84 <_Balloc+0x68>
 8013d54:	2101      	movs	r1, #1
 8013d56:	fa01 f605 	lsl.w	r6, r1, r5
 8013d5a:	1d72      	adds	r2, r6, #5
 8013d5c:	0092      	lsls	r2, r2, #2
 8013d5e:	4620      	mov	r0, r4
 8013d60:	f000 fb60 	bl	8014424 <_calloc_r>
 8013d64:	b160      	cbz	r0, 8013d80 <_Balloc+0x64>
 8013d66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013d6a:	e00e      	b.n	8013d8a <_Balloc+0x6e>
 8013d6c:	2221      	movs	r2, #33	; 0x21
 8013d6e:	2104      	movs	r1, #4
 8013d70:	4620      	mov	r0, r4
 8013d72:	f000 fb57 	bl	8014424 <_calloc_r>
 8013d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d78:	60f0      	str	r0, [r6, #12]
 8013d7a:	68db      	ldr	r3, [r3, #12]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d1e4      	bne.n	8013d4a <_Balloc+0x2e>
 8013d80:	2000      	movs	r0, #0
 8013d82:	bd70      	pop	{r4, r5, r6, pc}
 8013d84:	6802      	ldr	r2, [r0, #0]
 8013d86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013d90:	e7f7      	b.n	8013d82 <_Balloc+0x66>
 8013d92:	bf00      	nop
 8013d94:	08015401 	.word	0x08015401
 8013d98:	080154e4 	.word	0x080154e4

08013d9c <_Bfree>:
 8013d9c:	b570      	push	{r4, r5, r6, lr}
 8013d9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013da0:	4605      	mov	r5, r0
 8013da2:	460c      	mov	r4, r1
 8013da4:	b976      	cbnz	r6, 8013dc4 <_Bfree+0x28>
 8013da6:	2010      	movs	r0, #16
 8013da8:	f7ff ffb0 	bl	8013d0c <malloc>
 8013dac:	4602      	mov	r2, r0
 8013dae:	6268      	str	r0, [r5, #36]	; 0x24
 8013db0:	b920      	cbnz	r0, 8013dbc <_Bfree+0x20>
 8013db2:	4b09      	ldr	r3, [pc, #36]	; (8013dd8 <_Bfree+0x3c>)
 8013db4:	4809      	ldr	r0, [pc, #36]	; (8013ddc <_Bfree+0x40>)
 8013db6:	218a      	movs	r1, #138	; 0x8a
 8013db8:	f000 ff46 	bl	8014c48 <__assert_func>
 8013dbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013dc0:	6006      	str	r6, [r0, #0]
 8013dc2:	60c6      	str	r6, [r0, #12]
 8013dc4:	b13c      	cbz	r4, 8013dd6 <_Bfree+0x3a>
 8013dc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013dc8:	6862      	ldr	r2, [r4, #4]
 8013dca:	68db      	ldr	r3, [r3, #12]
 8013dcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013dd0:	6021      	str	r1, [r4, #0]
 8013dd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013dd6:	bd70      	pop	{r4, r5, r6, pc}
 8013dd8:	08015401 	.word	0x08015401
 8013ddc:	080154e4 	.word	0x080154e4

08013de0 <__multadd>:
 8013de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013de4:	690d      	ldr	r5, [r1, #16]
 8013de6:	4607      	mov	r7, r0
 8013de8:	460c      	mov	r4, r1
 8013dea:	461e      	mov	r6, r3
 8013dec:	f101 0c14 	add.w	ip, r1, #20
 8013df0:	2000      	movs	r0, #0
 8013df2:	f8dc 3000 	ldr.w	r3, [ip]
 8013df6:	b299      	uxth	r1, r3
 8013df8:	fb02 6101 	mla	r1, r2, r1, r6
 8013dfc:	0c1e      	lsrs	r6, r3, #16
 8013dfe:	0c0b      	lsrs	r3, r1, #16
 8013e00:	fb02 3306 	mla	r3, r2, r6, r3
 8013e04:	b289      	uxth	r1, r1
 8013e06:	3001      	adds	r0, #1
 8013e08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013e0c:	4285      	cmp	r5, r0
 8013e0e:	f84c 1b04 	str.w	r1, [ip], #4
 8013e12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013e16:	dcec      	bgt.n	8013df2 <__multadd+0x12>
 8013e18:	b30e      	cbz	r6, 8013e5e <__multadd+0x7e>
 8013e1a:	68a3      	ldr	r3, [r4, #8]
 8013e1c:	42ab      	cmp	r3, r5
 8013e1e:	dc19      	bgt.n	8013e54 <__multadd+0x74>
 8013e20:	6861      	ldr	r1, [r4, #4]
 8013e22:	4638      	mov	r0, r7
 8013e24:	3101      	adds	r1, #1
 8013e26:	f7ff ff79 	bl	8013d1c <_Balloc>
 8013e2a:	4680      	mov	r8, r0
 8013e2c:	b928      	cbnz	r0, 8013e3a <__multadd+0x5a>
 8013e2e:	4602      	mov	r2, r0
 8013e30:	4b0c      	ldr	r3, [pc, #48]	; (8013e64 <__multadd+0x84>)
 8013e32:	480d      	ldr	r0, [pc, #52]	; (8013e68 <__multadd+0x88>)
 8013e34:	21b5      	movs	r1, #181	; 0xb5
 8013e36:	f000 ff07 	bl	8014c48 <__assert_func>
 8013e3a:	6922      	ldr	r2, [r4, #16]
 8013e3c:	3202      	adds	r2, #2
 8013e3e:	f104 010c 	add.w	r1, r4, #12
 8013e42:	0092      	lsls	r2, r2, #2
 8013e44:	300c      	adds	r0, #12
 8013e46:	f7fe f8a1 	bl	8011f8c <memcpy>
 8013e4a:	4621      	mov	r1, r4
 8013e4c:	4638      	mov	r0, r7
 8013e4e:	f7ff ffa5 	bl	8013d9c <_Bfree>
 8013e52:	4644      	mov	r4, r8
 8013e54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013e58:	3501      	adds	r5, #1
 8013e5a:	615e      	str	r6, [r3, #20]
 8013e5c:	6125      	str	r5, [r4, #16]
 8013e5e:	4620      	mov	r0, r4
 8013e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e64:	08015473 	.word	0x08015473
 8013e68:	080154e4 	.word	0x080154e4

08013e6c <__hi0bits>:
 8013e6c:	0c03      	lsrs	r3, r0, #16
 8013e6e:	041b      	lsls	r3, r3, #16
 8013e70:	b9d3      	cbnz	r3, 8013ea8 <__hi0bits+0x3c>
 8013e72:	0400      	lsls	r0, r0, #16
 8013e74:	2310      	movs	r3, #16
 8013e76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013e7a:	bf04      	itt	eq
 8013e7c:	0200      	lsleq	r0, r0, #8
 8013e7e:	3308      	addeq	r3, #8
 8013e80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013e84:	bf04      	itt	eq
 8013e86:	0100      	lsleq	r0, r0, #4
 8013e88:	3304      	addeq	r3, #4
 8013e8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013e8e:	bf04      	itt	eq
 8013e90:	0080      	lsleq	r0, r0, #2
 8013e92:	3302      	addeq	r3, #2
 8013e94:	2800      	cmp	r0, #0
 8013e96:	db05      	blt.n	8013ea4 <__hi0bits+0x38>
 8013e98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013e9c:	f103 0301 	add.w	r3, r3, #1
 8013ea0:	bf08      	it	eq
 8013ea2:	2320      	moveq	r3, #32
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	4770      	bx	lr
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	e7e4      	b.n	8013e76 <__hi0bits+0xa>

08013eac <__lo0bits>:
 8013eac:	6803      	ldr	r3, [r0, #0]
 8013eae:	f013 0207 	ands.w	r2, r3, #7
 8013eb2:	4601      	mov	r1, r0
 8013eb4:	d00b      	beq.n	8013ece <__lo0bits+0x22>
 8013eb6:	07da      	lsls	r2, r3, #31
 8013eb8:	d423      	bmi.n	8013f02 <__lo0bits+0x56>
 8013eba:	0798      	lsls	r0, r3, #30
 8013ebc:	bf49      	itett	mi
 8013ebe:	085b      	lsrmi	r3, r3, #1
 8013ec0:	089b      	lsrpl	r3, r3, #2
 8013ec2:	2001      	movmi	r0, #1
 8013ec4:	600b      	strmi	r3, [r1, #0]
 8013ec6:	bf5c      	itt	pl
 8013ec8:	600b      	strpl	r3, [r1, #0]
 8013eca:	2002      	movpl	r0, #2
 8013ecc:	4770      	bx	lr
 8013ece:	b298      	uxth	r0, r3
 8013ed0:	b9a8      	cbnz	r0, 8013efe <__lo0bits+0x52>
 8013ed2:	0c1b      	lsrs	r3, r3, #16
 8013ed4:	2010      	movs	r0, #16
 8013ed6:	b2da      	uxtb	r2, r3
 8013ed8:	b90a      	cbnz	r2, 8013ede <__lo0bits+0x32>
 8013eda:	3008      	adds	r0, #8
 8013edc:	0a1b      	lsrs	r3, r3, #8
 8013ede:	071a      	lsls	r2, r3, #28
 8013ee0:	bf04      	itt	eq
 8013ee2:	091b      	lsreq	r3, r3, #4
 8013ee4:	3004      	addeq	r0, #4
 8013ee6:	079a      	lsls	r2, r3, #30
 8013ee8:	bf04      	itt	eq
 8013eea:	089b      	lsreq	r3, r3, #2
 8013eec:	3002      	addeq	r0, #2
 8013eee:	07da      	lsls	r2, r3, #31
 8013ef0:	d403      	bmi.n	8013efa <__lo0bits+0x4e>
 8013ef2:	085b      	lsrs	r3, r3, #1
 8013ef4:	f100 0001 	add.w	r0, r0, #1
 8013ef8:	d005      	beq.n	8013f06 <__lo0bits+0x5a>
 8013efa:	600b      	str	r3, [r1, #0]
 8013efc:	4770      	bx	lr
 8013efe:	4610      	mov	r0, r2
 8013f00:	e7e9      	b.n	8013ed6 <__lo0bits+0x2a>
 8013f02:	2000      	movs	r0, #0
 8013f04:	4770      	bx	lr
 8013f06:	2020      	movs	r0, #32
 8013f08:	4770      	bx	lr
	...

08013f0c <__i2b>:
 8013f0c:	b510      	push	{r4, lr}
 8013f0e:	460c      	mov	r4, r1
 8013f10:	2101      	movs	r1, #1
 8013f12:	f7ff ff03 	bl	8013d1c <_Balloc>
 8013f16:	4602      	mov	r2, r0
 8013f18:	b928      	cbnz	r0, 8013f26 <__i2b+0x1a>
 8013f1a:	4b05      	ldr	r3, [pc, #20]	; (8013f30 <__i2b+0x24>)
 8013f1c:	4805      	ldr	r0, [pc, #20]	; (8013f34 <__i2b+0x28>)
 8013f1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013f22:	f000 fe91 	bl	8014c48 <__assert_func>
 8013f26:	2301      	movs	r3, #1
 8013f28:	6144      	str	r4, [r0, #20]
 8013f2a:	6103      	str	r3, [r0, #16]
 8013f2c:	bd10      	pop	{r4, pc}
 8013f2e:	bf00      	nop
 8013f30:	08015473 	.word	0x08015473
 8013f34:	080154e4 	.word	0x080154e4

08013f38 <__multiply>:
 8013f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f3c:	4691      	mov	r9, r2
 8013f3e:	690a      	ldr	r2, [r1, #16]
 8013f40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013f44:	429a      	cmp	r2, r3
 8013f46:	bfb8      	it	lt
 8013f48:	460b      	movlt	r3, r1
 8013f4a:	460c      	mov	r4, r1
 8013f4c:	bfbc      	itt	lt
 8013f4e:	464c      	movlt	r4, r9
 8013f50:	4699      	movlt	r9, r3
 8013f52:	6927      	ldr	r7, [r4, #16]
 8013f54:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013f58:	68a3      	ldr	r3, [r4, #8]
 8013f5a:	6861      	ldr	r1, [r4, #4]
 8013f5c:	eb07 060a 	add.w	r6, r7, sl
 8013f60:	42b3      	cmp	r3, r6
 8013f62:	b085      	sub	sp, #20
 8013f64:	bfb8      	it	lt
 8013f66:	3101      	addlt	r1, #1
 8013f68:	f7ff fed8 	bl	8013d1c <_Balloc>
 8013f6c:	b930      	cbnz	r0, 8013f7c <__multiply+0x44>
 8013f6e:	4602      	mov	r2, r0
 8013f70:	4b44      	ldr	r3, [pc, #272]	; (8014084 <__multiply+0x14c>)
 8013f72:	4845      	ldr	r0, [pc, #276]	; (8014088 <__multiply+0x150>)
 8013f74:	f240 115d 	movw	r1, #349	; 0x15d
 8013f78:	f000 fe66 	bl	8014c48 <__assert_func>
 8013f7c:	f100 0514 	add.w	r5, r0, #20
 8013f80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013f84:	462b      	mov	r3, r5
 8013f86:	2200      	movs	r2, #0
 8013f88:	4543      	cmp	r3, r8
 8013f8a:	d321      	bcc.n	8013fd0 <__multiply+0x98>
 8013f8c:	f104 0314 	add.w	r3, r4, #20
 8013f90:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013f94:	f109 0314 	add.w	r3, r9, #20
 8013f98:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013f9c:	9202      	str	r2, [sp, #8]
 8013f9e:	1b3a      	subs	r2, r7, r4
 8013fa0:	3a15      	subs	r2, #21
 8013fa2:	f022 0203 	bic.w	r2, r2, #3
 8013fa6:	3204      	adds	r2, #4
 8013fa8:	f104 0115 	add.w	r1, r4, #21
 8013fac:	428f      	cmp	r7, r1
 8013fae:	bf38      	it	cc
 8013fb0:	2204      	movcc	r2, #4
 8013fb2:	9201      	str	r2, [sp, #4]
 8013fb4:	9a02      	ldr	r2, [sp, #8]
 8013fb6:	9303      	str	r3, [sp, #12]
 8013fb8:	429a      	cmp	r2, r3
 8013fba:	d80c      	bhi.n	8013fd6 <__multiply+0x9e>
 8013fbc:	2e00      	cmp	r6, #0
 8013fbe:	dd03      	ble.n	8013fc8 <__multiply+0x90>
 8013fc0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d05a      	beq.n	801407e <__multiply+0x146>
 8013fc8:	6106      	str	r6, [r0, #16]
 8013fca:	b005      	add	sp, #20
 8013fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fd0:	f843 2b04 	str.w	r2, [r3], #4
 8013fd4:	e7d8      	b.n	8013f88 <__multiply+0x50>
 8013fd6:	f8b3 a000 	ldrh.w	sl, [r3]
 8013fda:	f1ba 0f00 	cmp.w	sl, #0
 8013fde:	d024      	beq.n	801402a <__multiply+0xf2>
 8013fe0:	f104 0e14 	add.w	lr, r4, #20
 8013fe4:	46a9      	mov	r9, r5
 8013fe6:	f04f 0c00 	mov.w	ip, #0
 8013fea:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013fee:	f8d9 1000 	ldr.w	r1, [r9]
 8013ff2:	fa1f fb82 	uxth.w	fp, r2
 8013ff6:	b289      	uxth	r1, r1
 8013ff8:	fb0a 110b 	mla	r1, sl, fp, r1
 8013ffc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014000:	f8d9 2000 	ldr.w	r2, [r9]
 8014004:	4461      	add	r1, ip
 8014006:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801400a:	fb0a c20b 	mla	r2, sl, fp, ip
 801400e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014012:	b289      	uxth	r1, r1
 8014014:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014018:	4577      	cmp	r7, lr
 801401a:	f849 1b04 	str.w	r1, [r9], #4
 801401e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014022:	d8e2      	bhi.n	8013fea <__multiply+0xb2>
 8014024:	9a01      	ldr	r2, [sp, #4]
 8014026:	f845 c002 	str.w	ip, [r5, r2]
 801402a:	9a03      	ldr	r2, [sp, #12]
 801402c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014030:	3304      	adds	r3, #4
 8014032:	f1b9 0f00 	cmp.w	r9, #0
 8014036:	d020      	beq.n	801407a <__multiply+0x142>
 8014038:	6829      	ldr	r1, [r5, #0]
 801403a:	f104 0c14 	add.w	ip, r4, #20
 801403e:	46ae      	mov	lr, r5
 8014040:	f04f 0a00 	mov.w	sl, #0
 8014044:	f8bc b000 	ldrh.w	fp, [ip]
 8014048:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801404c:	fb09 220b 	mla	r2, r9, fp, r2
 8014050:	4492      	add	sl, r2
 8014052:	b289      	uxth	r1, r1
 8014054:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8014058:	f84e 1b04 	str.w	r1, [lr], #4
 801405c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014060:	f8be 1000 	ldrh.w	r1, [lr]
 8014064:	0c12      	lsrs	r2, r2, #16
 8014066:	fb09 1102 	mla	r1, r9, r2, r1
 801406a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801406e:	4567      	cmp	r7, ip
 8014070:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014074:	d8e6      	bhi.n	8014044 <__multiply+0x10c>
 8014076:	9a01      	ldr	r2, [sp, #4]
 8014078:	50a9      	str	r1, [r5, r2]
 801407a:	3504      	adds	r5, #4
 801407c:	e79a      	b.n	8013fb4 <__multiply+0x7c>
 801407e:	3e01      	subs	r6, #1
 8014080:	e79c      	b.n	8013fbc <__multiply+0x84>
 8014082:	bf00      	nop
 8014084:	08015473 	.word	0x08015473
 8014088:	080154e4 	.word	0x080154e4

0801408c <__pow5mult>:
 801408c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014090:	4615      	mov	r5, r2
 8014092:	f012 0203 	ands.w	r2, r2, #3
 8014096:	4606      	mov	r6, r0
 8014098:	460f      	mov	r7, r1
 801409a:	d007      	beq.n	80140ac <__pow5mult+0x20>
 801409c:	4c25      	ldr	r4, [pc, #148]	; (8014134 <__pow5mult+0xa8>)
 801409e:	3a01      	subs	r2, #1
 80140a0:	2300      	movs	r3, #0
 80140a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80140a6:	f7ff fe9b 	bl	8013de0 <__multadd>
 80140aa:	4607      	mov	r7, r0
 80140ac:	10ad      	asrs	r5, r5, #2
 80140ae:	d03d      	beq.n	801412c <__pow5mult+0xa0>
 80140b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80140b2:	b97c      	cbnz	r4, 80140d4 <__pow5mult+0x48>
 80140b4:	2010      	movs	r0, #16
 80140b6:	f7ff fe29 	bl	8013d0c <malloc>
 80140ba:	4602      	mov	r2, r0
 80140bc:	6270      	str	r0, [r6, #36]	; 0x24
 80140be:	b928      	cbnz	r0, 80140cc <__pow5mult+0x40>
 80140c0:	4b1d      	ldr	r3, [pc, #116]	; (8014138 <__pow5mult+0xac>)
 80140c2:	481e      	ldr	r0, [pc, #120]	; (801413c <__pow5mult+0xb0>)
 80140c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80140c8:	f000 fdbe 	bl	8014c48 <__assert_func>
 80140cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80140d0:	6004      	str	r4, [r0, #0]
 80140d2:	60c4      	str	r4, [r0, #12]
 80140d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80140d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80140dc:	b94c      	cbnz	r4, 80140f2 <__pow5mult+0x66>
 80140de:	f240 2171 	movw	r1, #625	; 0x271
 80140e2:	4630      	mov	r0, r6
 80140e4:	f7ff ff12 	bl	8013f0c <__i2b>
 80140e8:	2300      	movs	r3, #0
 80140ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80140ee:	4604      	mov	r4, r0
 80140f0:	6003      	str	r3, [r0, #0]
 80140f2:	f04f 0900 	mov.w	r9, #0
 80140f6:	07eb      	lsls	r3, r5, #31
 80140f8:	d50a      	bpl.n	8014110 <__pow5mult+0x84>
 80140fa:	4639      	mov	r1, r7
 80140fc:	4622      	mov	r2, r4
 80140fe:	4630      	mov	r0, r6
 8014100:	f7ff ff1a 	bl	8013f38 <__multiply>
 8014104:	4639      	mov	r1, r7
 8014106:	4680      	mov	r8, r0
 8014108:	4630      	mov	r0, r6
 801410a:	f7ff fe47 	bl	8013d9c <_Bfree>
 801410e:	4647      	mov	r7, r8
 8014110:	106d      	asrs	r5, r5, #1
 8014112:	d00b      	beq.n	801412c <__pow5mult+0xa0>
 8014114:	6820      	ldr	r0, [r4, #0]
 8014116:	b938      	cbnz	r0, 8014128 <__pow5mult+0x9c>
 8014118:	4622      	mov	r2, r4
 801411a:	4621      	mov	r1, r4
 801411c:	4630      	mov	r0, r6
 801411e:	f7ff ff0b 	bl	8013f38 <__multiply>
 8014122:	6020      	str	r0, [r4, #0]
 8014124:	f8c0 9000 	str.w	r9, [r0]
 8014128:	4604      	mov	r4, r0
 801412a:	e7e4      	b.n	80140f6 <__pow5mult+0x6a>
 801412c:	4638      	mov	r0, r7
 801412e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014132:	bf00      	nop
 8014134:	08015630 	.word	0x08015630
 8014138:	08015401 	.word	0x08015401
 801413c:	080154e4 	.word	0x080154e4

08014140 <__lshift>:
 8014140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014144:	460c      	mov	r4, r1
 8014146:	6849      	ldr	r1, [r1, #4]
 8014148:	6923      	ldr	r3, [r4, #16]
 801414a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801414e:	68a3      	ldr	r3, [r4, #8]
 8014150:	4607      	mov	r7, r0
 8014152:	4691      	mov	r9, r2
 8014154:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014158:	f108 0601 	add.w	r6, r8, #1
 801415c:	42b3      	cmp	r3, r6
 801415e:	db0b      	blt.n	8014178 <__lshift+0x38>
 8014160:	4638      	mov	r0, r7
 8014162:	f7ff fddb 	bl	8013d1c <_Balloc>
 8014166:	4605      	mov	r5, r0
 8014168:	b948      	cbnz	r0, 801417e <__lshift+0x3e>
 801416a:	4602      	mov	r2, r0
 801416c:	4b2a      	ldr	r3, [pc, #168]	; (8014218 <__lshift+0xd8>)
 801416e:	482b      	ldr	r0, [pc, #172]	; (801421c <__lshift+0xdc>)
 8014170:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014174:	f000 fd68 	bl	8014c48 <__assert_func>
 8014178:	3101      	adds	r1, #1
 801417a:	005b      	lsls	r3, r3, #1
 801417c:	e7ee      	b.n	801415c <__lshift+0x1c>
 801417e:	2300      	movs	r3, #0
 8014180:	f100 0114 	add.w	r1, r0, #20
 8014184:	f100 0210 	add.w	r2, r0, #16
 8014188:	4618      	mov	r0, r3
 801418a:	4553      	cmp	r3, sl
 801418c:	db37      	blt.n	80141fe <__lshift+0xbe>
 801418e:	6920      	ldr	r0, [r4, #16]
 8014190:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014194:	f104 0314 	add.w	r3, r4, #20
 8014198:	f019 091f 	ands.w	r9, r9, #31
 801419c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80141a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80141a4:	d02f      	beq.n	8014206 <__lshift+0xc6>
 80141a6:	f1c9 0e20 	rsb	lr, r9, #32
 80141aa:	468a      	mov	sl, r1
 80141ac:	f04f 0c00 	mov.w	ip, #0
 80141b0:	681a      	ldr	r2, [r3, #0]
 80141b2:	fa02 f209 	lsl.w	r2, r2, r9
 80141b6:	ea42 020c 	orr.w	r2, r2, ip
 80141ba:	f84a 2b04 	str.w	r2, [sl], #4
 80141be:	f853 2b04 	ldr.w	r2, [r3], #4
 80141c2:	4298      	cmp	r0, r3
 80141c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80141c8:	d8f2      	bhi.n	80141b0 <__lshift+0x70>
 80141ca:	1b03      	subs	r3, r0, r4
 80141cc:	3b15      	subs	r3, #21
 80141ce:	f023 0303 	bic.w	r3, r3, #3
 80141d2:	3304      	adds	r3, #4
 80141d4:	f104 0215 	add.w	r2, r4, #21
 80141d8:	4290      	cmp	r0, r2
 80141da:	bf38      	it	cc
 80141dc:	2304      	movcc	r3, #4
 80141de:	f841 c003 	str.w	ip, [r1, r3]
 80141e2:	f1bc 0f00 	cmp.w	ip, #0
 80141e6:	d001      	beq.n	80141ec <__lshift+0xac>
 80141e8:	f108 0602 	add.w	r6, r8, #2
 80141ec:	3e01      	subs	r6, #1
 80141ee:	4638      	mov	r0, r7
 80141f0:	612e      	str	r6, [r5, #16]
 80141f2:	4621      	mov	r1, r4
 80141f4:	f7ff fdd2 	bl	8013d9c <_Bfree>
 80141f8:	4628      	mov	r0, r5
 80141fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8014202:	3301      	adds	r3, #1
 8014204:	e7c1      	b.n	801418a <__lshift+0x4a>
 8014206:	3904      	subs	r1, #4
 8014208:	f853 2b04 	ldr.w	r2, [r3], #4
 801420c:	f841 2f04 	str.w	r2, [r1, #4]!
 8014210:	4298      	cmp	r0, r3
 8014212:	d8f9      	bhi.n	8014208 <__lshift+0xc8>
 8014214:	e7ea      	b.n	80141ec <__lshift+0xac>
 8014216:	bf00      	nop
 8014218:	08015473 	.word	0x08015473
 801421c:	080154e4 	.word	0x080154e4

08014220 <__mcmp>:
 8014220:	b530      	push	{r4, r5, lr}
 8014222:	6902      	ldr	r2, [r0, #16]
 8014224:	690c      	ldr	r4, [r1, #16]
 8014226:	1b12      	subs	r2, r2, r4
 8014228:	d10e      	bne.n	8014248 <__mcmp+0x28>
 801422a:	f100 0314 	add.w	r3, r0, #20
 801422e:	3114      	adds	r1, #20
 8014230:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014234:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014238:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801423c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014240:	42a5      	cmp	r5, r4
 8014242:	d003      	beq.n	801424c <__mcmp+0x2c>
 8014244:	d305      	bcc.n	8014252 <__mcmp+0x32>
 8014246:	2201      	movs	r2, #1
 8014248:	4610      	mov	r0, r2
 801424a:	bd30      	pop	{r4, r5, pc}
 801424c:	4283      	cmp	r3, r0
 801424e:	d3f3      	bcc.n	8014238 <__mcmp+0x18>
 8014250:	e7fa      	b.n	8014248 <__mcmp+0x28>
 8014252:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014256:	e7f7      	b.n	8014248 <__mcmp+0x28>

08014258 <__mdiff>:
 8014258:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801425c:	460c      	mov	r4, r1
 801425e:	4606      	mov	r6, r0
 8014260:	4611      	mov	r1, r2
 8014262:	4620      	mov	r0, r4
 8014264:	4690      	mov	r8, r2
 8014266:	f7ff ffdb 	bl	8014220 <__mcmp>
 801426a:	1e05      	subs	r5, r0, #0
 801426c:	d110      	bne.n	8014290 <__mdiff+0x38>
 801426e:	4629      	mov	r1, r5
 8014270:	4630      	mov	r0, r6
 8014272:	f7ff fd53 	bl	8013d1c <_Balloc>
 8014276:	b930      	cbnz	r0, 8014286 <__mdiff+0x2e>
 8014278:	4b3a      	ldr	r3, [pc, #232]	; (8014364 <__mdiff+0x10c>)
 801427a:	4602      	mov	r2, r0
 801427c:	f240 2132 	movw	r1, #562	; 0x232
 8014280:	4839      	ldr	r0, [pc, #228]	; (8014368 <__mdiff+0x110>)
 8014282:	f000 fce1 	bl	8014c48 <__assert_func>
 8014286:	2301      	movs	r3, #1
 8014288:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801428c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014290:	bfa4      	itt	ge
 8014292:	4643      	movge	r3, r8
 8014294:	46a0      	movge	r8, r4
 8014296:	4630      	mov	r0, r6
 8014298:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801429c:	bfa6      	itte	ge
 801429e:	461c      	movge	r4, r3
 80142a0:	2500      	movge	r5, #0
 80142a2:	2501      	movlt	r5, #1
 80142a4:	f7ff fd3a 	bl	8013d1c <_Balloc>
 80142a8:	b920      	cbnz	r0, 80142b4 <__mdiff+0x5c>
 80142aa:	4b2e      	ldr	r3, [pc, #184]	; (8014364 <__mdiff+0x10c>)
 80142ac:	4602      	mov	r2, r0
 80142ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 80142b2:	e7e5      	b.n	8014280 <__mdiff+0x28>
 80142b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80142b8:	6926      	ldr	r6, [r4, #16]
 80142ba:	60c5      	str	r5, [r0, #12]
 80142bc:	f104 0914 	add.w	r9, r4, #20
 80142c0:	f108 0514 	add.w	r5, r8, #20
 80142c4:	f100 0e14 	add.w	lr, r0, #20
 80142c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80142cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80142d0:	f108 0210 	add.w	r2, r8, #16
 80142d4:	46f2      	mov	sl, lr
 80142d6:	2100      	movs	r1, #0
 80142d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80142dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80142e0:	fa1f f883 	uxth.w	r8, r3
 80142e4:	fa11 f18b 	uxtah	r1, r1, fp
 80142e8:	0c1b      	lsrs	r3, r3, #16
 80142ea:	eba1 0808 	sub.w	r8, r1, r8
 80142ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80142f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80142f6:	fa1f f888 	uxth.w	r8, r8
 80142fa:	1419      	asrs	r1, r3, #16
 80142fc:	454e      	cmp	r6, r9
 80142fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014302:	f84a 3b04 	str.w	r3, [sl], #4
 8014306:	d8e7      	bhi.n	80142d8 <__mdiff+0x80>
 8014308:	1b33      	subs	r3, r6, r4
 801430a:	3b15      	subs	r3, #21
 801430c:	f023 0303 	bic.w	r3, r3, #3
 8014310:	3304      	adds	r3, #4
 8014312:	3415      	adds	r4, #21
 8014314:	42a6      	cmp	r6, r4
 8014316:	bf38      	it	cc
 8014318:	2304      	movcc	r3, #4
 801431a:	441d      	add	r5, r3
 801431c:	4473      	add	r3, lr
 801431e:	469e      	mov	lr, r3
 8014320:	462e      	mov	r6, r5
 8014322:	4566      	cmp	r6, ip
 8014324:	d30e      	bcc.n	8014344 <__mdiff+0xec>
 8014326:	f10c 0203 	add.w	r2, ip, #3
 801432a:	1b52      	subs	r2, r2, r5
 801432c:	f022 0203 	bic.w	r2, r2, #3
 8014330:	3d03      	subs	r5, #3
 8014332:	45ac      	cmp	ip, r5
 8014334:	bf38      	it	cc
 8014336:	2200      	movcc	r2, #0
 8014338:	441a      	add	r2, r3
 801433a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801433e:	b17b      	cbz	r3, 8014360 <__mdiff+0x108>
 8014340:	6107      	str	r7, [r0, #16]
 8014342:	e7a3      	b.n	801428c <__mdiff+0x34>
 8014344:	f856 8b04 	ldr.w	r8, [r6], #4
 8014348:	fa11 f288 	uxtah	r2, r1, r8
 801434c:	1414      	asrs	r4, r2, #16
 801434e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014352:	b292      	uxth	r2, r2
 8014354:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014358:	f84e 2b04 	str.w	r2, [lr], #4
 801435c:	1421      	asrs	r1, r4, #16
 801435e:	e7e0      	b.n	8014322 <__mdiff+0xca>
 8014360:	3f01      	subs	r7, #1
 8014362:	e7ea      	b.n	801433a <__mdiff+0xe2>
 8014364:	08015473 	.word	0x08015473
 8014368:	080154e4 	.word	0x080154e4

0801436c <__d2b>:
 801436c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014370:	4689      	mov	r9, r1
 8014372:	2101      	movs	r1, #1
 8014374:	ec57 6b10 	vmov	r6, r7, d0
 8014378:	4690      	mov	r8, r2
 801437a:	f7ff fccf 	bl	8013d1c <_Balloc>
 801437e:	4604      	mov	r4, r0
 8014380:	b930      	cbnz	r0, 8014390 <__d2b+0x24>
 8014382:	4602      	mov	r2, r0
 8014384:	4b25      	ldr	r3, [pc, #148]	; (801441c <__d2b+0xb0>)
 8014386:	4826      	ldr	r0, [pc, #152]	; (8014420 <__d2b+0xb4>)
 8014388:	f240 310a 	movw	r1, #778	; 0x30a
 801438c:	f000 fc5c 	bl	8014c48 <__assert_func>
 8014390:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014394:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014398:	bb35      	cbnz	r5, 80143e8 <__d2b+0x7c>
 801439a:	2e00      	cmp	r6, #0
 801439c:	9301      	str	r3, [sp, #4]
 801439e:	d028      	beq.n	80143f2 <__d2b+0x86>
 80143a0:	4668      	mov	r0, sp
 80143a2:	9600      	str	r6, [sp, #0]
 80143a4:	f7ff fd82 	bl	8013eac <__lo0bits>
 80143a8:	9900      	ldr	r1, [sp, #0]
 80143aa:	b300      	cbz	r0, 80143ee <__d2b+0x82>
 80143ac:	9a01      	ldr	r2, [sp, #4]
 80143ae:	f1c0 0320 	rsb	r3, r0, #32
 80143b2:	fa02 f303 	lsl.w	r3, r2, r3
 80143b6:	430b      	orrs	r3, r1
 80143b8:	40c2      	lsrs	r2, r0
 80143ba:	6163      	str	r3, [r4, #20]
 80143bc:	9201      	str	r2, [sp, #4]
 80143be:	9b01      	ldr	r3, [sp, #4]
 80143c0:	61a3      	str	r3, [r4, #24]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	bf14      	ite	ne
 80143c6:	2202      	movne	r2, #2
 80143c8:	2201      	moveq	r2, #1
 80143ca:	6122      	str	r2, [r4, #16]
 80143cc:	b1d5      	cbz	r5, 8014404 <__d2b+0x98>
 80143ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80143d2:	4405      	add	r5, r0
 80143d4:	f8c9 5000 	str.w	r5, [r9]
 80143d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80143dc:	f8c8 0000 	str.w	r0, [r8]
 80143e0:	4620      	mov	r0, r4
 80143e2:	b003      	add	sp, #12
 80143e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80143ec:	e7d5      	b.n	801439a <__d2b+0x2e>
 80143ee:	6161      	str	r1, [r4, #20]
 80143f0:	e7e5      	b.n	80143be <__d2b+0x52>
 80143f2:	a801      	add	r0, sp, #4
 80143f4:	f7ff fd5a 	bl	8013eac <__lo0bits>
 80143f8:	9b01      	ldr	r3, [sp, #4]
 80143fa:	6163      	str	r3, [r4, #20]
 80143fc:	2201      	movs	r2, #1
 80143fe:	6122      	str	r2, [r4, #16]
 8014400:	3020      	adds	r0, #32
 8014402:	e7e3      	b.n	80143cc <__d2b+0x60>
 8014404:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014408:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801440c:	f8c9 0000 	str.w	r0, [r9]
 8014410:	6918      	ldr	r0, [r3, #16]
 8014412:	f7ff fd2b 	bl	8013e6c <__hi0bits>
 8014416:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801441a:	e7df      	b.n	80143dc <__d2b+0x70>
 801441c:	08015473 	.word	0x08015473
 8014420:	080154e4 	.word	0x080154e4

08014424 <_calloc_r>:
 8014424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014426:	fba1 2402 	umull	r2, r4, r1, r2
 801442a:	b94c      	cbnz	r4, 8014440 <_calloc_r+0x1c>
 801442c:	4611      	mov	r1, r2
 801442e:	9201      	str	r2, [sp, #4]
 8014430:	f000 f87a 	bl	8014528 <_malloc_r>
 8014434:	9a01      	ldr	r2, [sp, #4]
 8014436:	4605      	mov	r5, r0
 8014438:	b930      	cbnz	r0, 8014448 <_calloc_r+0x24>
 801443a:	4628      	mov	r0, r5
 801443c:	b003      	add	sp, #12
 801443e:	bd30      	pop	{r4, r5, pc}
 8014440:	220c      	movs	r2, #12
 8014442:	6002      	str	r2, [r0, #0]
 8014444:	2500      	movs	r5, #0
 8014446:	e7f8      	b.n	801443a <_calloc_r+0x16>
 8014448:	4621      	mov	r1, r4
 801444a:	f7fd fdad 	bl	8011fa8 <memset>
 801444e:	e7f4      	b.n	801443a <_calloc_r+0x16>

08014450 <_free_r>:
 8014450:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014452:	2900      	cmp	r1, #0
 8014454:	d044      	beq.n	80144e0 <_free_r+0x90>
 8014456:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801445a:	9001      	str	r0, [sp, #4]
 801445c:	2b00      	cmp	r3, #0
 801445e:	f1a1 0404 	sub.w	r4, r1, #4
 8014462:	bfb8      	it	lt
 8014464:	18e4      	addlt	r4, r4, r3
 8014466:	f000 fc8f 	bl	8014d88 <__malloc_lock>
 801446a:	4a1e      	ldr	r2, [pc, #120]	; (80144e4 <_free_r+0x94>)
 801446c:	9801      	ldr	r0, [sp, #4]
 801446e:	6813      	ldr	r3, [r2, #0]
 8014470:	b933      	cbnz	r3, 8014480 <_free_r+0x30>
 8014472:	6063      	str	r3, [r4, #4]
 8014474:	6014      	str	r4, [r2, #0]
 8014476:	b003      	add	sp, #12
 8014478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801447c:	f000 bc8a 	b.w	8014d94 <__malloc_unlock>
 8014480:	42a3      	cmp	r3, r4
 8014482:	d908      	bls.n	8014496 <_free_r+0x46>
 8014484:	6825      	ldr	r5, [r4, #0]
 8014486:	1961      	adds	r1, r4, r5
 8014488:	428b      	cmp	r3, r1
 801448a:	bf01      	itttt	eq
 801448c:	6819      	ldreq	r1, [r3, #0]
 801448e:	685b      	ldreq	r3, [r3, #4]
 8014490:	1949      	addeq	r1, r1, r5
 8014492:	6021      	streq	r1, [r4, #0]
 8014494:	e7ed      	b.n	8014472 <_free_r+0x22>
 8014496:	461a      	mov	r2, r3
 8014498:	685b      	ldr	r3, [r3, #4]
 801449a:	b10b      	cbz	r3, 80144a0 <_free_r+0x50>
 801449c:	42a3      	cmp	r3, r4
 801449e:	d9fa      	bls.n	8014496 <_free_r+0x46>
 80144a0:	6811      	ldr	r1, [r2, #0]
 80144a2:	1855      	adds	r5, r2, r1
 80144a4:	42a5      	cmp	r5, r4
 80144a6:	d10b      	bne.n	80144c0 <_free_r+0x70>
 80144a8:	6824      	ldr	r4, [r4, #0]
 80144aa:	4421      	add	r1, r4
 80144ac:	1854      	adds	r4, r2, r1
 80144ae:	42a3      	cmp	r3, r4
 80144b0:	6011      	str	r1, [r2, #0]
 80144b2:	d1e0      	bne.n	8014476 <_free_r+0x26>
 80144b4:	681c      	ldr	r4, [r3, #0]
 80144b6:	685b      	ldr	r3, [r3, #4]
 80144b8:	6053      	str	r3, [r2, #4]
 80144ba:	4421      	add	r1, r4
 80144bc:	6011      	str	r1, [r2, #0]
 80144be:	e7da      	b.n	8014476 <_free_r+0x26>
 80144c0:	d902      	bls.n	80144c8 <_free_r+0x78>
 80144c2:	230c      	movs	r3, #12
 80144c4:	6003      	str	r3, [r0, #0]
 80144c6:	e7d6      	b.n	8014476 <_free_r+0x26>
 80144c8:	6825      	ldr	r5, [r4, #0]
 80144ca:	1961      	adds	r1, r4, r5
 80144cc:	428b      	cmp	r3, r1
 80144ce:	bf04      	itt	eq
 80144d0:	6819      	ldreq	r1, [r3, #0]
 80144d2:	685b      	ldreq	r3, [r3, #4]
 80144d4:	6063      	str	r3, [r4, #4]
 80144d6:	bf04      	itt	eq
 80144d8:	1949      	addeq	r1, r1, r5
 80144da:	6021      	streq	r1, [r4, #0]
 80144dc:	6054      	str	r4, [r2, #4]
 80144de:	e7ca      	b.n	8014476 <_free_r+0x26>
 80144e0:	b003      	add	sp, #12
 80144e2:	bd30      	pop	{r4, r5, pc}
 80144e4:	200034a0 	.word	0x200034a0

080144e8 <sbrk_aligned>:
 80144e8:	b570      	push	{r4, r5, r6, lr}
 80144ea:	4e0e      	ldr	r6, [pc, #56]	; (8014524 <sbrk_aligned+0x3c>)
 80144ec:	460c      	mov	r4, r1
 80144ee:	6831      	ldr	r1, [r6, #0]
 80144f0:	4605      	mov	r5, r0
 80144f2:	b911      	cbnz	r1, 80144fa <sbrk_aligned+0x12>
 80144f4:	f000 fb42 	bl	8014b7c <_sbrk_r>
 80144f8:	6030      	str	r0, [r6, #0]
 80144fa:	4621      	mov	r1, r4
 80144fc:	4628      	mov	r0, r5
 80144fe:	f000 fb3d 	bl	8014b7c <_sbrk_r>
 8014502:	1c43      	adds	r3, r0, #1
 8014504:	d00a      	beq.n	801451c <sbrk_aligned+0x34>
 8014506:	1cc4      	adds	r4, r0, #3
 8014508:	f024 0403 	bic.w	r4, r4, #3
 801450c:	42a0      	cmp	r0, r4
 801450e:	d007      	beq.n	8014520 <sbrk_aligned+0x38>
 8014510:	1a21      	subs	r1, r4, r0
 8014512:	4628      	mov	r0, r5
 8014514:	f000 fb32 	bl	8014b7c <_sbrk_r>
 8014518:	3001      	adds	r0, #1
 801451a:	d101      	bne.n	8014520 <sbrk_aligned+0x38>
 801451c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014520:	4620      	mov	r0, r4
 8014522:	bd70      	pop	{r4, r5, r6, pc}
 8014524:	200034a4 	.word	0x200034a4

08014528 <_malloc_r>:
 8014528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801452c:	1ccd      	adds	r5, r1, #3
 801452e:	f025 0503 	bic.w	r5, r5, #3
 8014532:	3508      	adds	r5, #8
 8014534:	2d0c      	cmp	r5, #12
 8014536:	bf38      	it	cc
 8014538:	250c      	movcc	r5, #12
 801453a:	2d00      	cmp	r5, #0
 801453c:	4607      	mov	r7, r0
 801453e:	db01      	blt.n	8014544 <_malloc_r+0x1c>
 8014540:	42a9      	cmp	r1, r5
 8014542:	d905      	bls.n	8014550 <_malloc_r+0x28>
 8014544:	230c      	movs	r3, #12
 8014546:	603b      	str	r3, [r7, #0]
 8014548:	2600      	movs	r6, #0
 801454a:	4630      	mov	r0, r6
 801454c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014550:	4e2e      	ldr	r6, [pc, #184]	; (801460c <_malloc_r+0xe4>)
 8014552:	f000 fc19 	bl	8014d88 <__malloc_lock>
 8014556:	6833      	ldr	r3, [r6, #0]
 8014558:	461c      	mov	r4, r3
 801455a:	bb34      	cbnz	r4, 80145aa <_malloc_r+0x82>
 801455c:	4629      	mov	r1, r5
 801455e:	4638      	mov	r0, r7
 8014560:	f7ff ffc2 	bl	80144e8 <sbrk_aligned>
 8014564:	1c43      	adds	r3, r0, #1
 8014566:	4604      	mov	r4, r0
 8014568:	d14d      	bne.n	8014606 <_malloc_r+0xde>
 801456a:	6834      	ldr	r4, [r6, #0]
 801456c:	4626      	mov	r6, r4
 801456e:	2e00      	cmp	r6, #0
 8014570:	d140      	bne.n	80145f4 <_malloc_r+0xcc>
 8014572:	6823      	ldr	r3, [r4, #0]
 8014574:	4631      	mov	r1, r6
 8014576:	4638      	mov	r0, r7
 8014578:	eb04 0803 	add.w	r8, r4, r3
 801457c:	f000 fafe 	bl	8014b7c <_sbrk_r>
 8014580:	4580      	cmp	r8, r0
 8014582:	d13a      	bne.n	80145fa <_malloc_r+0xd2>
 8014584:	6821      	ldr	r1, [r4, #0]
 8014586:	3503      	adds	r5, #3
 8014588:	1a6d      	subs	r5, r5, r1
 801458a:	f025 0503 	bic.w	r5, r5, #3
 801458e:	3508      	adds	r5, #8
 8014590:	2d0c      	cmp	r5, #12
 8014592:	bf38      	it	cc
 8014594:	250c      	movcc	r5, #12
 8014596:	4629      	mov	r1, r5
 8014598:	4638      	mov	r0, r7
 801459a:	f7ff ffa5 	bl	80144e8 <sbrk_aligned>
 801459e:	3001      	adds	r0, #1
 80145a0:	d02b      	beq.n	80145fa <_malloc_r+0xd2>
 80145a2:	6823      	ldr	r3, [r4, #0]
 80145a4:	442b      	add	r3, r5
 80145a6:	6023      	str	r3, [r4, #0]
 80145a8:	e00e      	b.n	80145c8 <_malloc_r+0xa0>
 80145aa:	6822      	ldr	r2, [r4, #0]
 80145ac:	1b52      	subs	r2, r2, r5
 80145ae:	d41e      	bmi.n	80145ee <_malloc_r+0xc6>
 80145b0:	2a0b      	cmp	r2, #11
 80145b2:	d916      	bls.n	80145e2 <_malloc_r+0xba>
 80145b4:	1961      	adds	r1, r4, r5
 80145b6:	42a3      	cmp	r3, r4
 80145b8:	6025      	str	r5, [r4, #0]
 80145ba:	bf18      	it	ne
 80145bc:	6059      	strne	r1, [r3, #4]
 80145be:	6863      	ldr	r3, [r4, #4]
 80145c0:	bf08      	it	eq
 80145c2:	6031      	streq	r1, [r6, #0]
 80145c4:	5162      	str	r2, [r4, r5]
 80145c6:	604b      	str	r3, [r1, #4]
 80145c8:	4638      	mov	r0, r7
 80145ca:	f104 060b 	add.w	r6, r4, #11
 80145ce:	f000 fbe1 	bl	8014d94 <__malloc_unlock>
 80145d2:	f026 0607 	bic.w	r6, r6, #7
 80145d6:	1d23      	adds	r3, r4, #4
 80145d8:	1af2      	subs	r2, r6, r3
 80145da:	d0b6      	beq.n	801454a <_malloc_r+0x22>
 80145dc:	1b9b      	subs	r3, r3, r6
 80145de:	50a3      	str	r3, [r4, r2]
 80145e0:	e7b3      	b.n	801454a <_malloc_r+0x22>
 80145e2:	6862      	ldr	r2, [r4, #4]
 80145e4:	42a3      	cmp	r3, r4
 80145e6:	bf0c      	ite	eq
 80145e8:	6032      	streq	r2, [r6, #0]
 80145ea:	605a      	strne	r2, [r3, #4]
 80145ec:	e7ec      	b.n	80145c8 <_malloc_r+0xa0>
 80145ee:	4623      	mov	r3, r4
 80145f0:	6864      	ldr	r4, [r4, #4]
 80145f2:	e7b2      	b.n	801455a <_malloc_r+0x32>
 80145f4:	4634      	mov	r4, r6
 80145f6:	6876      	ldr	r6, [r6, #4]
 80145f8:	e7b9      	b.n	801456e <_malloc_r+0x46>
 80145fa:	230c      	movs	r3, #12
 80145fc:	603b      	str	r3, [r7, #0]
 80145fe:	4638      	mov	r0, r7
 8014600:	f000 fbc8 	bl	8014d94 <__malloc_unlock>
 8014604:	e7a1      	b.n	801454a <_malloc_r+0x22>
 8014606:	6025      	str	r5, [r4, #0]
 8014608:	e7de      	b.n	80145c8 <_malloc_r+0xa0>
 801460a:	bf00      	nop
 801460c:	200034a0 	.word	0x200034a0

08014610 <__ssputs_r>:
 8014610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014614:	688e      	ldr	r6, [r1, #8]
 8014616:	429e      	cmp	r6, r3
 8014618:	4682      	mov	sl, r0
 801461a:	460c      	mov	r4, r1
 801461c:	4690      	mov	r8, r2
 801461e:	461f      	mov	r7, r3
 8014620:	d838      	bhi.n	8014694 <__ssputs_r+0x84>
 8014622:	898a      	ldrh	r2, [r1, #12]
 8014624:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014628:	d032      	beq.n	8014690 <__ssputs_r+0x80>
 801462a:	6825      	ldr	r5, [r4, #0]
 801462c:	6909      	ldr	r1, [r1, #16]
 801462e:	eba5 0901 	sub.w	r9, r5, r1
 8014632:	6965      	ldr	r5, [r4, #20]
 8014634:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014638:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801463c:	3301      	adds	r3, #1
 801463e:	444b      	add	r3, r9
 8014640:	106d      	asrs	r5, r5, #1
 8014642:	429d      	cmp	r5, r3
 8014644:	bf38      	it	cc
 8014646:	461d      	movcc	r5, r3
 8014648:	0553      	lsls	r3, r2, #21
 801464a:	d531      	bpl.n	80146b0 <__ssputs_r+0xa0>
 801464c:	4629      	mov	r1, r5
 801464e:	f7ff ff6b 	bl	8014528 <_malloc_r>
 8014652:	4606      	mov	r6, r0
 8014654:	b950      	cbnz	r0, 801466c <__ssputs_r+0x5c>
 8014656:	230c      	movs	r3, #12
 8014658:	f8ca 3000 	str.w	r3, [sl]
 801465c:	89a3      	ldrh	r3, [r4, #12]
 801465e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014662:	81a3      	strh	r3, [r4, #12]
 8014664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801466c:	6921      	ldr	r1, [r4, #16]
 801466e:	464a      	mov	r2, r9
 8014670:	f7fd fc8c 	bl	8011f8c <memcpy>
 8014674:	89a3      	ldrh	r3, [r4, #12]
 8014676:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801467a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801467e:	81a3      	strh	r3, [r4, #12]
 8014680:	6126      	str	r6, [r4, #16]
 8014682:	6165      	str	r5, [r4, #20]
 8014684:	444e      	add	r6, r9
 8014686:	eba5 0509 	sub.w	r5, r5, r9
 801468a:	6026      	str	r6, [r4, #0]
 801468c:	60a5      	str	r5, [r4, #8]
 801468e:	463e      	mov	r6, r7
 8014690:	42be      	cmp	r6, r7
 8014692:	d900      	bls.n	8014696 <__ssputs_r+0x86>
 8014694:	463e      	mov	r6, r7
 8014696:	6820      	ldr	r0, [r4, #0]
 8014698:	4632      	mov	r2, r6
 801469a:	4641      	mov	r1, r8
 801469c:	f000 fb5a 	bl	8014d54 <memmove>
 80146a0:	68a3      	ldr	r3, [r4, #8]
 80146a2:	1b9b      	subs	r3, r3, r6
 80146a4:	60a3      	str	r3, [r4, #8]
 80146a6:	6823      	ldr	r3, [r4, #0]
 80146a8:	4433      	add	r3, r6
 80146aa:	6023      	str	r3, [r4, #0]
 80146ac:	2000      	movs	r0, #0
 80146ae:	e7db      	b.n	8014668 <__ssputs_r+0x58>
 80146b0:	462a      	mov	r2, r5
 80146b2:	f000 fb75 	bl	8014da0 <_realloc_r>
 80146b6:	4606      	mov	r6, r0
 80146b8:	2800      	cmp	r0, #0
 80146ba:	d1e1      	bne.n	8014680 <__ssputs_r+0x70>
 80146bc:	6921      	ldr	r1, [r4, #16]
 80146be:	4650      	mov	r0, sl
 80146c0:	f7ff fec6 	bl	8014450 <_free_r>
 80146c4:	e7c7      	b.n	8014656 <__ssputs_r+0x46>
	...

080146c8 <_svfiprintf_r>:
 80146c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146cc:	4698      	mov	r8, r3
 80146ce:	898b      	ldrh	r3, [r1, #12]
 80146d0:	061b      	lsls	r3, r3, #24
 80146d2:	b09d      	sub	sp, #116	; 0x74
 80146d4:	4607      	mov	r7, r0
 80146d6:	460d      	mov	r5, r1
 80146d8:	4614      	mov	r4, r2
 80146da:	d50e      	bpl.n	80146fa <_svfiprintf_r+0x32>
 80146dc:	690b      	ldr	r3, [r1, #16]
 80146de:	b963      	cbnz	r3, 80146fa <_svfiprintf_r+0x32>
 80146e0:	2140      	movs	r1, #64	; 0x40
 80146e2:	f7ff ff21 	bl	8014528 <_malloc_r>
 80146e6:	6028      	str	r0, [r5, #0]
 80146e8:	6128      	str	r0, [r5, #16]
 80146ea:	b920      	cbnz	r0, 80146f6 <_svfiprintf_r+0x2e>
 80146ec:	230c      	movs	r3, #12
 80146ee:	603b      	str	r3, [r7, #0]
 80146f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80146f4:	e0d1      	b.n	801489a <_svfiprintf_r+0x1d2>
 80146f6:	2340      	movs	r3, #64	; 0x40
 80146f8:	616b      	str	r3, [r5, #20]
 80146fa:	2300      	movs	r3, #0
 80146fc:	9309      	str	r3, [sp, #36]	; 0x24
 80146fe:	2320      	movs	r3, #32
 8014700:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014704:	f8cd 800c 	str.w	r8, [sp, #12]
 8014708:	2330      	movs	r3, #48	; 0x30
 801470a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80148b4 <_svfiprintf_r+0x1ec>
 801470e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014712:	f04f 0901 	mov.w	r9, #1
 8014716:	4623      	mov	r3, r4
 8014718:	469a      	mov	sl, r3
 801471a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801471e:	b10a      	cbz	r2, 8014724 <_svfiprintf_r+0x5c>
 8014720:	2a25      	cmp	r2, #37	; 0x25
 8014722:	d1f9      	bne.n	8014718 <_svfiprintf_r+0x50>
 8014724:	ebba 0b04 	subs.w	fp, sl, r4
 8014728:	d00b      	beq.n	8014742 <_svfiprintf_r+0x7a>
 801472a:	465b      	mov	r3, fp
 801472c:	4622      	mov	r2, r4
 801472e:	4629      	mov	r1, r5
 8014730:	4638      	mov	r0, r7
 8014732:	f7ff ff6d 	bl	8014610 <__ssputs_r>
 8014736:	3001      	adds	r0, #1
 8014738:	f000 80aa 	beq.w	8014890 <_svfiprintf_r+0x1c8>
 801473c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801473e:	445a      	add	r2, fp
 8014740:	9209      	str	r2, [sp, #36]	; 0x24
 8014742:	f89a 3000 	ldrb.w	r3, [sl]
 8014746:	2b00      	cmp	r3, #0
 8014748:	f000 80a2 	beq.w	8014890 <_svfiprintf_r+0x1c8>
 801474c:	2300      	movs	r3, #0
 801474e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014752:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014756:	f10a 0a01 	add.w	sl, sl, #1
 801475a:	9304      	str	r3, [sp, #16]
 801475c:	9307      	str	r3, [sp, #28]
 801475e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014762:	931a      	str	r3, [sp, #104]	; 0x68
 8014764:	4654      	mov	r4, sl
 8014766:	2205      	movs	r2, #5
 8014768:	f814 1b01 	ldrb.w	r1, [r4], #1
 801476c:	4851      	ldr	r0, [pc, #324]	; (80148b4 <_svfiprintf_r+0x1ec>)
 801476e:	f7eb fd5f 	bl	8000230 <memchr>
 8014772:	9a04      	ldr	r2, [sp, #16]
 8014774:	b9d8      	cbnz	r0, 80147ae <_svfiprintf_r+0xe6>
 8014776:	06d0      	lsls	r0, r2, #27
 8014778:	bf44      	itt	mi
 801477a:	2320      	movmi	r3, #32
 801477c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014780:	0711      	lsls	r1, r2, #28
 8014782:	bf44      	itt	mi
 8014784:	232b      	movmi	r3, #43	; 0x2b
 8014786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801478a:	f89a 3000 	ldrb.w	r3, [sl]
 801478e:	2b2a      	cmp	r3, #42	; 0x2a
 8014790:	d015      	beq.n	80147be <_svfiprintf_r+0xf6>
 8014792:	9a07      	ldr	r2, [sp, #28]
 8014794:	4654      	mov	r4, sl
 8014796:	2000      	movs	r0, #0
 8014798:	f04f 0c0a 	mov.w	ip, #10
 801479c:	4621      	mov	r1, r4
 801479e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80147a2:	3b30      	subs	r3, #48	; 0x30
 80147a4:	2b09      	cmp	r3, #9
 80147a6:	d94e      	bls.n	8014846 <_svfiprintf_r+0x17e>
 80147a8:	b1b0      	cbz	r0, 80147d8 <_svfiprintf_r+0x110>
 80147aa:	9207      	str	r2, [sp, #28]
 80147ac:	e014      	b.n	80147d8 <_svfiprintf_r+0x110>
 80147ae:	eba0 0308 	sub.w	r3, r0, r8
 80147b2:	fa09 f303 	lsl.w	r3, r9, r3
 80147b6:	4313      	orrs	r3, r2
 80147b8:	9304      	str	r3, [sp, #16]
 80147ba:	46a2      	mov	sl, r4
 80147bc:	e7d2      	b.n	8014764 <_svfiprintf_r+0x9c>
 80147be:	9b03      	ldr	r3, [sp, #12]
 80147c0:	1d19      	adds	r1, r3, #4
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	9103      	str	r1, [sp, #12]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	bfbb      	ittet	lt
 80147ca:	425b      	neglt	r3, r3
 80147cc:	f042 0202 	orrlt.w	r2, r2, #2
 80147d0:	9307      	strge	r3, [sp, #28]
 80147d2:	9307      	strlt	r3, [sp, #28]
 80147d4:	bfb8      	it	lt
 80147d6:	9204      	strlt	r2, [sp, #16]
 80147d8:	7823      	ldrb	r3, [r4, #0]
 80147da:	2b2e      	cmp	r3, #46	; 0x2e
 80147dc:	d10c      	bne.n	80147f8 <_svfiprintf_r+0x130>
 80147de:	7863      	ldrb	r3, [r4, #1]
 80147e0:	2b2a      	cmp	r3, #42	; 0x2a
 80147e2:	d135      	bne.n	8014850 <_svfiprintf_r+0x188>
 80147e4:	9b03      	ldr	r3, [sp, #12]
 80147e6:	1d1a      	adds	r2, r3, #4
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	9203      	str	r2, [sp, #12]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	bfb8      	it	lt
 80147f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80147f4:	3402      	adds	r4, #2
 80147f6:	9305      	str	r3, [sp, #20]
 80147f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80148c4 <_svfiprintf_r+0x1fc>
 80147fc:	7821      	ldrb	r1, [r4, #0]
 80147fe:	2203      	movs	r2, #3
 8014800:	4650      	mov	r0, sl
 8014802:	f7eb fd15 	bl	8000230 <memchr>
 8014806:	b140      	cbz	r0, 801481a <_svfiprintf_r+0x152>
 8014808:	2340      	movs	r3, #64	; 0x40
 801480a:	eba0 000a 	sub.w	r0, r0, sl
 801480e:	fa03 f000 	lsl.w	r0, r3, r0
 8014812:	9b04      	ldr	r3, [sp, #16]
 8014814:	4303      	orrs	r3, r0
 8014816:	3401      	adds	r4, #1
 8014818:	9304      	str	r3, [sp, #16]
 801481a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801481e:	4826      	ldr	r0, [pc, #152]	; (80148b8 <_svfiprintf_r+0x1f0>)
 8014820:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014824:	2206      	movs	r2, #6
 8014826:	f7eb fd03 	bl	8000230 <memchr>
 801482a:	2800      	cmp	r0, #0
 801482c:	d038      	beq.n	80148a0 <_svfiprintf_r+0x1d8>
 801482e:	4b23      	ldr	r3, [pc, #140]	; (80148bc <_svfiprintf_r+0x1f4>)
 8014830:	bb1b      	cbnz	r3, 801487a <_svfiprintf_r+0x1b2>
 8014832:	9b03      	ldr	r3, [sp, #12]
 8014834:	3307      	adds	r3, #7
 8014836:	f023 0307 	bic.w	r3, r3, #7
 801483a:	3308      	adds	r3, #8
 801483c:	9303      	str	r3, [sp, #12]
 801483e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014840:	4433      	add	r3, r6
 8014842:	9309      	str	r3, [sp, #36]	; 0x24
 8014844:	e767      	b.n	8014716 <_svfiprintf_r+0x4e>
 8014846:	fb0c 3202 	mla	r2, ip, r2, r3
 801484a:	460c      	mov	r4, r1
 801484c:	2001      	movs	r0, #1
 801484e:	e7a5      	b.n	801479c <_svfiprintf_r+0xd4>
 8014850:	2300      	movs	r3, #0
 8014852:	3401      	adds	r4, #1
 8014854:	9305      	str	r3, [sp, #20]
 8014856:	4619      	mov	r1, r3
 8014858:	f04f 0c0a 	mov.w	ip, #10
 801485c:	4620      	mov	r0, r4
 801485e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014862:	3a30      	subs	r2, #48	; 0x30
 8014864:	2a09      	cmp	r2, #9
 8014866:	d903      	bls.n	8014870 <_svfiprintf_r+0x1a8>
 8014868:	2b00      	cmp	r3, #0
 801486a:	d0c5      	beq.n	80147f8 <_svfiprintf_r+0x130>
 801486c:	9105      	str	r1, [sp, #20]
 801486e:	e7c3      	b.n	80147f8 <_svfiprintf_r+0x130>
 8014870:	fb0c 2101 	mla	r1, ip, r1, r2
 8014874:	4604      	mov	r4, r0
 8014876:	2301      	movs	r3, #1
 8014878:	e7f0      	b.n	801485c <_svfiprintf_r+0x194>
 801487a:	ab03      	add	r3, sp, #12
 801487c:	9300      	str	r3, [sp, #0]
 801487e:	462a      	mov	r2, r5
 8014880:	4b0f      	ldr	r3, [pc, #60]	; (80148c0 <_svfiprintf_r+0x1f8>)
 8014882:	a904      	add	r1, sp, #16
 8014884:	4638      	mov	r0, r7
 8014886:	f7fd fc37 	bl	80120f8 <_printf_float>
 801488a:	1c42      	adds	r2, r0, #1
 801488c:	4606      	mov	r6, r0
 801488e:	d1d6      	bne.n	801483e <_svfiprintf_r+0x176>
 8014890:	89ab      	ldrh	r3, [r5, #12]
 8014892:	065b      	lsls	r3, r3, #25
 8014894:	f53f af2c 	bmi.w	80146f0 <_svfiprintf_r+0x28>
 8014898:	9809      	ldr	r0, [sp, #36]	; 0x24
 801489a:	b01d      	add	sp, #116	; 0x74
 801489c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148a0:	ab03      	add	r3, sp, #12
 80148a2:	9300      	str	r3, [sp, #0]
 80148a4:	462a      	mov	r2, r5
 80148a6:	4b06      	ldr	r3, [pc, #24]	; (80148c0 <_svfiprintf_r+0x1f8>)
 80148a8:	a904      	add	r1, sp, #16
 80148aa:	4638      	mov	r0, r7
 80148ac:	f7fd fec8 	bl	8012640 <_printf_i>
 80148b0:	e7eb      	b.n	801488a <_svfiprintf_r+0x1c2>
 80148b2:	bf00      	nop
 80148b4:	0801563c 	.word	0x0801563c
 80148b8:	08015646 	.word	0x08015646
 80148bc:	080120f9 	.word	0x080120f9
 80148c0:	08014611 	.word	0x08014611
 80148c4:	08015642 	.word	0x08015642

080148c8 <__sfputc_r>:
 80148c8:	6893      	ldr	r3, [r2, #8]
 80148ca:	3b01      	subs	r3, #1
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	b410      	push	{r4}
 80148d0:	6093      	str	r3, [r2, #8]
 80148d2:	da08      	bge.n	80148e6 <__sfputc_r+0x1e>
 80148d4:	6994      	ldr	r4, [r2, #24]
 80148d6:	42a3      	cmp	r3, r4
 80148d8:	db01      	blt.n	80148de <__sfputc_r+0x16>
 80148da:	290a      	cmp	r1, #10
 80148dc:	d103      	bne.n	80148e6 <__sfputc_r+0x1e>
 80148de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148e2:	f7fe b8b5 	b.w	8012a50 <__swbuf_r>
 80148e6:	6813      	ldr	r3, [r2, #0]
 80148e8:	1c58      	adds	r0, r3, #1
 80148ea:	6010      	str	r0, [r2, #0]
 80148ec:	7019      	strb	r1, [r3, #0]
 80148ee:	4608      	mov	r0, r1
 80148f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148f4:	4770      	bx	lr

080148f6 <__sfputs_r>:
 80148f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148f8:	4606      	mov	r6, r0
 80148fa:	460f      	mov	r7, r1
 80148fc:	4614      	mov	r4, r2
 80148fe:	18d5      	adds	r5, r2, r3
 8014900:	42ac      	cmp	r4, r5
 8014902:	d101      	bne.n	8014908 <__sfputs_r+0x12>
 8014904:	2000      	movs	r0, #0
 8014906:	e007      	b.n	8014918 <__sfputs_r+0x22>
 8014908:	f814 1b01 	ldrb.w	r1, [r4], #1
 801490c:	463a      	mov	r2, r7
 801490e:	4630      	mov	r0, r6
 8014910:	f7ff ffda 	bl	80148c8 <__sfputc_r>
 8014914:	1c43      	adds	r3, r0, #1
 8014916:	d1f3      	bne.n	8014900 <__sfputs_r+0xa>
 8014918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801491c <_vfiprintf_r>:
 801491c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014920:	460d      	mov	r5, r1
 8014922:	b09d      	sub	sp, #116	; 0x74
 8014924:	4614      	mov	r4, r2
 8014926:	4698      	mov	r8, r3
 8014928:	4606      	mov	r6, r0
 801492a:	b118      	cbz	r0, 8014934 <_vfiprintf_r+0x18>
 801492c:	6983      	ldr	r3, [r0, #24]
 801492e:	b90b      	cbnz	r3, 8014934 <_vfiprintf_r+0x18>
 8014930:	f7ff f8e2 	bl	8013af8 <__sinit>
 8014934:	4b89      	ldr	r3, [pc, #548]	; (8014b5c <_vfiprintf_r+0x240>)
 8014936:	429d      	cmp	r5, r3
 8014938:	d11b      	bne.n	8014972 <_vfiprintf_r+0x56>
 801493a:	6875      	ldr	r5, [r6, #4]
 801493c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801493e:	07d9      	lsls	r1, r3, #31
 8014940:	d405      	bmi.n	801494e <_vfiprintf_r+0x32>
 8014942:	89ab      	ldrh	r3, [r5, #12]
 8014944:	059a      	lsls	r2, r3, #22
 8014946:	d402      	bmi.n	801494e <_vfiprintf_r+0x32>
 8014948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801494a:	f7ff f978 	bl	8013c3e <__retarget_lock_acquire_recursive>
 801494e:	89ab      	ldrh	r3, [r5, #12]
 8014950:	071b      	lsls	r3, r3, #28
 8014952:	d501      	bpl.n	8014958 <_vfiprintf_r+0x3c>
 8014954:	692b      	ldr	r3, [r5, #16]
 8014956:	b9eb      	cbnz	r3, 8014994 <_vfiprintf_r+0x78>
 8014958:	4629      	mov	r1, r5
 801495a:	4630      	mov	r0, r6
 801495c:	f7fe f8ca 	bl	8012af4 <__swsetup_r>
 8014960:	b1c0      	cbz	r0, 8014994 <_vfiprintf_r+0x78>
 8014962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014964:	07dc      	lsls	r4, r3, #31
 8014966:	d50e      	bpl.n	8014986 <_vfiprintf_r+0x6a>
 8014968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801496c:	b01d      	add	sp, #116	; 0x74
 801496e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014972:	4b7b      	ldr	r3, [pc, #492]	; (8014b60 <_vfiprintf_r+0x244>)
 8014974:	429d      	cmp	r5, r3
 8014976:	d101      	bne.n	801497c <_vfiprintf_r+0x60>
 8014978:	68b5      	ldr	r5, [r6, #8]
 801497a:	e7df      	b.n	801493c <_vfiprintf_r+0x20>
 801497c:	4b79      	ldr	r3, [pc, #484]	; (8014b64 <_vfiprintf_r+0x248>)
 801497e:	429d      	cmp	r5, r3
 8014980:	bf08      	it	eq
 8014982:	68f5      	ldreq	r5, [r6, #12]
 8014984:	e7da      	b.n	801493c <_vfiprintf_r+0x20>
 8014986:	89ab      	ldrh	r3, [r5, #12]
 8014988:	0598      	lsls	r0, r3, #22
 801498a:	d4ed      	bmi.n	8014968 <_vfiprintf_r+0x4c>
 801498c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801498e:	f7ff f957 	bl	8013c40 <__retarget_lock_release_recursive>
 8014992:	e7e9      	b.n	8014968 <_vfiprintf_r+0x4c>
 8014994:	2300      	movs	r3, #0
 8014996:	9309      	str	r3, [sp, #36]	; 0x24
 8014998:	2320      	movs	r3, #32
 801499a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801499e:	f8cd 800c 	str.w	r8, [sp, #12]
 80149a2:	2330      	movs	r3, #48	; 0x30
 80149a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014b68 <_vfiprintf_r+0x24c>
 80149a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80149ac:	f04f 0901 	mov.w	r9, #1
 80149b0:	4623      	mov	r3, r4
 80149b2:	469a      	mov	sl, r3
 80149b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80149b8:	b10a      	cbz	r2, 80149be <_vfiprintf_r+0xa2>
 80149ba:	2a25      	cmp	r2, #37	; 0x25
 80149bc:	d1f9      	bne.n	80149b2 <_vfiprintf_r+0x96>
 80149be:	ebba 0b04 	subs.w	fp, sl, r4
 80149c2:	d00b      	beq.n	80149dc <_vfiprintf_r+0xc0>
 80149c4:	465b      	mov	r3, fp
 80149c6:	4622      	mov	r2, r4
 80149c8:	4629      	mov	r1, r5
 80149ca:	4630      	mov	r0, r6
 80149cc:	f7ff ff93 	bl	80148f6 <__sfputs_r>
 80149d0:	3001      	adds	r0, #1
 80149d2:	f000 80aa 	beq.w	8014b2a <_vfiprintf_r+0x20e>
 80149d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80149d8:	445a      	add	r2, fp
 80149da:	9209      	str	r2, [sp, #36]	; 0x24
 80149dc:	f89a 3000 	ldrb.w	r3, [sl]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	f000 80a2 	beq.w	8014b2a <_vfiprintf_r+0x20e>
 80149e6:	2300      	movs	r3, #0
 80149e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80149ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80149f0:	f10a 0a01 	add.w	sl, sl, #1
 80149f4:	9304      	str	r3, [sp, #16]
 80149f6:	9307      	str	r3, [sp, #28]
 80149f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80149fc:	931a      	str	r3, [sp, #104]	; 0x68
 80149fe:	4654      	mov	r4, sl
 8014a00:	2205      	movs	r2, #5
 8014a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a06:	4858      	ldr	r0, [pc, #352]	; (8014b68 <_vfiprintf_r+0x24c>)
 8014a08:	f7eb fc12 	bl	8000230 <memchr>
 8014a0c:	9a04      	ldr	r2, [sp, #16]
 8014a0e:	b9d8      	cbnz	r0, 8014a48 <_vfiprintf_r+0x12c>
 8014a10:	06d1      	lsls	r1, r2, #27
 8014a12:	bf44      	itt	mi
 8014a14:	2320      	movmi	r3, #32
 8014a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a1a:	0713      	lsls	r3, r2, #28
 8014a1c:	bf44      	itt	mi
 8014a1e:	232b      	movmi	r3, #43	; 0x2b
 8014a20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a24:	f89a 3000 	ldrb.w	r3, [sl]
 8014a28:	2b2a      	cmp	r3, #42	; 0x2a
 8014a2a:	d015      	beq.n	8014a58 <_vfiprintf_r+0x13c>
 8014a2c:	9a07      	ldr	r2, [sp, #28]
 8014a2e:	4654      	mov	r4, sl
 8014a30:	2000      	movs	r0, #0
 8014a32:	f04f 0c0a 	mov.w	ip, #10
 8014a36:	4621      	mov	r1, r4
 8014a38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014a3c:	3b30      	subs	r3, #48	; 0x30
 8014a3e:	2b09      	cmp	r3, #9
 8014a40:	d94e      	bls.n	8014ae0 <_vfiprintf_r+0x1c4>
 8014a42:	b1b0      	cbz	r0, 8014a72 <_vfiprintf_r+0x156>
 8014a44:	9207      	str	r2, [sp, #28]
 8014a46:	e014      	b.n	8014a72 <_vfiprintf_r+0x156>
 8014a48:	eba0 0308 	sub.w	r3, r0, r8
 8014a4c:	fa09 f303 	lsl.w	r3, r9, r3
 8014a50:	4313      	orrs	r3, r2
 8014a52:	9304      	str	r3, [sp, #16]
 8014a54:	46a2      	mov	sl, r4
 8014a56:	e7d2      	b.n	80149fe <_vfiprintf_r+0xe2>
 8014a58:	9b03      	ldr	r3, [sp, #12]
 8014a5a:	1d19      	adds	r1, r3, #4
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	9103      	str	r1, [sp, #12]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	bfbb      	ittet	lt
 8014a64:	425b      	neglt	r3, r3
 8014a66:	f042 0202 	orrlt.w	r2, r2, #2
 8014a6a:	9307      	strge	r3, [sp, #28]
 8014a6c:	9307      	strlt	r3, [sp, #28]
 8014a6e:	bfb8      	it	lt
 8014a70:	9204      	strlt	r2, [sp, #16]
 8014a72:	7823      	ldrb	r3, [r4, #0]
 8014a74:	2b2e      	cmp	r3, #46	; 0x2e
 8014a76:	d10c      	bne.n	8014a92 <_vfiprintf_r+0x176>
 8014a78:	7863      	ldrb	r3, [r4, #1]
 8014a7a:	2b2a      	cmp	r3, #42	; 0x2a
 8014a7c:	d135      	bne.n	8014aea <_vfiprintf_r+0x1ce>
 8014a7e:	9b03      	ldr	r3, [sp, #12]
 8014a80:	1d1a      	adds	r2, r3, #4
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	9203      	str	r2, [sp, #12]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	bfb8      	it	lt
 8014a8a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014a8e:	3402      	adds	r4, #2
 8014a90:	9305      	str	r3, [sp, #20]
 8014a92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014b78 <_vfiprintf_r+0x25c>
 8014a96:	7821      	ldrb	r1, [r4, #0]
 8014a98:	2203      	movs	r2, #3
 8014a9a:	4650      	mov	r0, sl
 8014a9c:	f7eb fbc8 	bl	8000230 <memchr>
 8014aa0:	b140      	cbz	r0, 8014ab4 <_vfiprintf_r+0x198>
 8014aa2:	2340      	movs	r3, #64	; 0x40
 8014aa4:	eba0 000a 	sub.w	r0, r0, sl
 8014aa8:	fa03 f000 	lsl.w	r0, r3, r0
 8014aac:	9b04      	ldr	r3, [sp, #16]
 8014aae:	4303      	orrs	r3, r0
 8014ab0:	3401      	adds	r4, #1
 8014ab2:	9304      	str	r3, [sp, #16]
 8014ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ab8:	482c      	ldr	r0, [pc, #176]	; (8014b6c <_vfiprintf_r+0x250>)
 8014aba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014abe:	2206      	movs	r2, #6
 8014ac0:	f7eb fbb6 	bl	8000230 <memchr>
 8014ac4:	2800      	cmp	r0, #0
 8014ac6:	d03f      	beq.n	8014b48 <_vfiprintf_r+0x22c>
 8014ac8:	4b29      	ldr	r3, [pc, #164]	; (8014b70 <_vfiprintf_r+0x254>)
 8014aca:	bb1b      	cbnz	r3, 8014b14 <_vfiprintf_r+0x1f8>
 8014acc:	9b03      	ldr	r3, [sp, #12]
 8014ace:	3307      	adds	r3, #7
 8014ad0:	f023 0307 	bic.w	r3, r3, #7
 8014ad4:	3308      	adds	r3, #8
 8014ad6:	9303      	str	r3, [sp, #12]
 8014ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ada:	443b      	add	r3, r7
 8014adc:	9309      	str	r3, [sp, #36]	; 0x24
 8014ade:	e767      	b.n	80149b0 <_vfiprintf_r+0x94>
 8014ae0:	fb0c 3202 	mla	r2, ip, r2, r3
 8014ae4:	460c      	mov	r4, r1
 8014ae6:	2001      	movs	r0, #1
 8014ae8:	e7a5      	b.n	8014a36 <_vfiprintf_r+0x11a>
 8014aea:	2300      	movs	r3, #0
 8014aec:	3401      	adds	r4, #1
 8014aee:	9305      	str	r3, [sp, #20]
 8014af0:	4619      	mov	r1, r3
 8014af2:	f04f 0c0a 	mov.w	ip, #10
 8014af6:	4620      	mov	r0, r4
 8014af8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014afc:	3a30      	subs	r2, #48	; 0x30
 8014afe:	2a09      	cmp	r2, #9
 8014b00:	d903      	bls.n	8014b0a <_vfiprintf_r+0x1ee>
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d0c5      	beq.n	8014a92 <_vfiprintf_r+0x176>
 8014b06:	9105      	str	r1, [sp, #20]
 8014b08:	e7c3      	b.n	8014a92 <_vfiprintf_r+0x176>
 8014b0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8014b0e:	4604      	mov	r4, r0
 8014b10:	2301      	movs	r3, #1
 8014b12:	e7f0      	b.n	8014af6 <_vfiprintf_r+0x1da>
 8014b14:	ab03      	add	r3, sp, #12
 8014b16:	9300      	str	r3, [sp, #0]
 8014b18:	462a      	mov	r2, r5
 8014b1a:	4b16      	ldr	r3, [pc, #88]	; (8014b74 <_vfiprintf_r+0x258>)
 8014b1c:	a904      	add	r1, sp, #16
 8014b1e:	4630      	mov	r0, r6
 8014b20:	f7fd faea 	bl	80120f8 <_printf_float>
 8014b24:	4607      	mov	r7, r0
 8014b26:	1c78      	adds	r0, r7, #1
 8014b28:	d1d6      	bne.n	8014ad8 <_vfiprintf_r+0x1bc>
 8014b2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014b2c:	07d9      	lsls	r1, r3, #31
 8014b2e:	d405      	bmi.n	8014b3c <_vfiprintf_r+0x220>
 8014b30:	89ab      	ldrh	r3, [r5, #12]
 8014b32:	059a      	lsls	r2, r3, #22
 8014b34:	d402      	bmi.n	8014b3c <_vfiprintf_r+0x220>
 8014b36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014b38:	f7ff f882 	bl	8013c40 <__retarget_lock_release_recursive>
 8014b3c:	89ab      	ldrh	r3, [r5, #12]
 8014b3e:	065b      	lsls	r3, r3, #25
 8014b40:	f53f af12 	bmi.w	8014968 <_vfiprintf_r+0x4c>
 8014b44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b46:	e711      	b.n	801496c <_vfiprintf_r+0x50>
 8014b48:	ab03      	add	r3, sp, #12
 8014b4a:	9300      	str	r3, [sp, #0]
 8014b4c:	462a      	mov	r2, r5
 8014b4e:	4b09      	ldr	r3, [pc, #36]	; (8014b74 <_vfiprintf_r+0x258>)
 8014b50:	a904      	add	r1, sp, #16
 8014b52:	4630      	mov	r0, r6
 8014b54:	f7fd fd74 	bl	8012640 <_printf_i>
 8014b58:	e7e4      	b.n	8014b24 <_vfiprintf_r+0x208>
 8014b5a:	bf00      	nop
 8014b5c:	080154a4 	.word	0x080154a4
 8014b60:	080154c4 	.word	0x080154c4
 8014b64:	08015484 	.word	0x08015484
 8014b68:	0801563c 	.word	0x0801563c
 8014b6c:	08015646 	.word	0x08015646
 8014b70:	080120f9 	.word	0x080120f9
 8014b74:	080148f7 	.word	0x080148f7
 8014b78:	08015642 	.word	0x08015642

08014b7c <_sbrk_r>:
 8014b7c:	b538      	push	{r3, r4, r5, lr}
 8014b7e:	4d06      	ldr	r5, [pc, #24]	; (8014b98 <_sbrk_r+0x1c>)
 8014b80:	2300      	movs	r3, #0
 8014b82:	4604      	mov	r4, r0
 8014b84:	4608      	mov	r0, r1
 8014b86:	602b      	str	r3, [r5, #0]
 8014b88:	f7ed fa1e 	bl	8001fc8 <_sbrk>
 8014b8c:	1c43      	adds	r3, r0, #1
 8014b8e:	d102      	bne.n	8014b96 <_sbrk_r+0x1a>
 8014b90:	682b      	ldr	r3, [r5, #0]
 8014b92:	b103      	cbz	r3, 8014b96 <_sbrk_r+0x1a>
 8014b94:	6023      	str	r3, [r4, #0]
 8014b96:	bd38      	pop	{r3, r4, r5, pc}
 8014b98:	200034a8 	.word	0x200034a8

08014b9c <__sread>:
 8014b9c:	b510      	push	{r4, lr}
 8014b9e:	460c      	mov	r4, r1
 8014ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ba4:	f000 f92c 	bl	8014e00 <_read_r>
 8014ba8:	2800      	cmp	r0, #0
 8014baa:	bfab      	itete	ge
 8014bac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014bae:	89a3      	ldrhlt	r3, [r4, #12]
 8014bb0:	181b      	addge	r3, r3, r0
 8014bb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014bb6:	bfac      	ite	ge
 8014bb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8014bba:	81a3      	strhlt	r3, [r4, #12]
 8014bbc:	bd10      	pop	{r4, pc}

08014bbe <__swrite>:
 8014bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bc2:	461f      	mov	r7, r3
 8014bc4:	898b      	ldrh	r3, [r1, #12]
 8014bc6:	05db      	lsls	r3, r3, #23
 8014bc8:	4605      	mov	r5, r0
 8014bca:	460c      	mov	r4, r1
 8014bcc:	4616      	mov	r6, r2
 8014bce:	d505      	bpl.n	8014bdc <__swrite+0x1e>
 8014bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bd4:	2302      	movs	r3, #2
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	f000 f898 	bl	8014d0c <_lseek_r>
 8014bdc:	89a3      	ldrh	r3, [r4, #12]
 8014bde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014be2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014be6:	81a3      	strh	r3, [r4, #12]
 8014be8:	4632      	mov	r2, r6
 8014bea:	463b      	mov	r3, r7
 8014bec:	4628      	mov	r0, r5
 8014bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014bf2:	f000 b817 	b.w	8014c24 <_write_r>

08014bf6 <__sseek>:
 8014bf6:	b510      	push	{r4, lr}
 8014bf8:	460c      	mov	r4, r1
 8014bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bfe:	f000 f885 	bl	8014d0c <_lseek_r>
 8014c02:	1c43      	adds	r3, r0, #1
 8014c04:	89a3      	ldrh	r3, [r4, #12]
 8014c06:	bf15      	itete	ne
 8014c08:	6560      	strne	r0, [r4, #84]	; 0x54
 8014c0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014c0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014c12:	81a3      	strheq	r3, [r4, #12]
 8014c14:	bf18      	it	ne
 8014c16:	81a3      	strhne	r3, [r4, #12]
 8014c18:	bd10      	pop	{r4, pc}

08014c1a <__sclose>:
 8014c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c1e:	f000 b831 	b.w	8014c84 <_close_r>
	...

08014c24 <_write_r>:
 8014c24:	b538      	push	{r3, r4, r5, lr}
 8014c26:	4d07      	ldr	r5, [pc, #28]	; (8014c44 <_write_r+0x20>)
 8014c28:	4604      	mov	r4, r0
 8014c2a:	4608      	mov	r0, r1
 8014c2c:	4611      	mov	r1, r2
 8014c2e:	2200      	movs	r2, #0
 8014c30:	602a      	str	r2, [r5, #0]
 8014c32:	461a      	mov	r2, r3
 8014c34:	f7ed f977 	bl	8001f26 <_write>
 8014c38:	1c43      	adds	r3, r0, #1
 8014c3a:	d102      	bne.n	8014c42 <_write_r+0x1e>
 8014c3c:	682b      	ldr	r3, [r5, #0]
 8014c3e:	b103      	cbz	r3, 8014c42 <_write_r+0x1e>
 8014c40:	6023      	str	r3, [r4, #0]
 8014c42:	bd38      	pop	{r3, r4, r5, pc}
 8014c44:	200034a8 	.word	0x200034a8

08014c48 <__assert_func>:
 8014c48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014c4a:	4614      	mov	r4, r2
 8014c4c:	461a      	mov	r2, r3
 8014c4e:	4b09      	ldr	r3, [pc, #36]	; (8014c74 <__assert_func+0x2c>)
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	4605      	mov	r5, r0
 8014c54:	68d8      	ldr	r0, [r3, #12]
 8014c56:	b14c      	cbz	r4, 8014c6c <__assert_func+0x24>
 8014c58:	4b07      	ldr	r3, [pc, #28]	; (8014c78 <__assert_func+0x30>)
 8014c5a:	9100      	str	r1, [sp, #0]
 8014c5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014c60:	4906      	ldr	r1, [pc, #24]	; (8014c7c <__assert_func+0x34>)
 8014c62:	462b      	mov	r3, r5
 8014c64:	f000 f81e 	bl	8014ca4 <fiprintf>
 8014c68:	f000 f8e9 	bl	8014e3e <abort>
 8014c6c:	4b04      	ldr	r3, [pc, #16]	; (8014c80 <__assert_func+0x38>)
 8014c6e:	461c      	mov	r4, r3
 8014c70:	e7f3      	b.n	8014c5a <__assert_func+0x12>
 8014c72:	bf00      	nop
 8014c74:	20000188 	.word	0x20000188
 8014c78:	0801564d 	.word	0x0801564d
 8014c7c:	0801565a 	.word	0x0801565a
 8014c80:	08015688 	.word	0x08015688

08014c84 <_close_r>:
 8014c84:	b538      	push	{r3, r4, r5, lr}
 8014c86:	4d06      	ldr	r5, [pc, #24]	; (8014ca0 <_close_r+0x1c>)
 8014c88:	2300      	movs	r3, #0
 8014c8a:	4604      	mov	r4, r0
 8014c8c:	4608      	mov	r0, r1
 8014c8e:	602b      	str	r3, [r5, #0]
 8014c90:	f7ed f965 	bl	8001f5e <_close>
 8014c94:	1c43      	adds	r3, r0, #1
 8014c96:	d102      	bne.n	8014c9e <_close_r+0x1a>
 8014c98:	682b      	ldr	r3, [r5, #0]
 8014c9a:	b103      	cbz	r3, 8014c9e <_close_r+0x1a>
 8014c9c:	6023      	str	r3, [r4, #0]
 8014c9e:	bd38      	pop	{r3, r4, r5, pc}
 8014ca0:	200034a8 	.word	0x200034a8

08014ca4 <fiprintf>:
 8014ca4:	b40e      	push	{r1, r2, r3}
 8014ca6:	b503      	push	{r0, r1, lr}
 8014ca8:	4601      	mov	r1, r0
 8014caa:	ab03      	add	r3, sp, #12
 8014cac:	4805      	ldr	r0, [pc, #20]	; (8014cc4 <fiprintf+0x20>)
 8014cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8014cb2:	6800      	ldr	r0, [r0, #0]
 8014cb4:	9301      	str	r3, [sp, #4]
 8014cb6:	f7ff fe31 	bl	801491c <_vfiprintf_r>
 8014cba:	b002      	add	sp, #8
 8014cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014cc0:	b003      	add	sp, #12
 8014cc2:	4770      	bx	lr
 8014cc4:	20000188 	.word	0x20000188

08014cc8 <_fstat_r>:
 8014cc8:	b538      	push	{r3, r4, r5, lr}
 8014cca:	4d07      	ldr	r5, [pc, #28]	; (8014ce8 <_fstat_r+0x20>)
 8014ccc:	2300      	movs	r3, #0
 8014cce:	4604      	mov	r4, r0
 8014cd0:	4608      	mov	r0, r1
 8014cd2:	4611      	mov	r1, r2
 8014cd4:	602b      	str	r3, [r5, #0]
 8014cd6:	f7ed f94e 	bl	8001f76 <_fstat>
 8014cda:	1c43      	adds	r3, r0, #1
 8014cdc:	d102      	bne.n	8014ce4 <_fstat_r+0x1c>
 8014cde:	682b      	ldr	r3, [r5, #0]
 8014ce0:	b103      	cbz	r3, 8014ce4 <_fstat_r+0x1c>
 8014ce2:	6023      	str	r3, [r4, #0]
 8014ce4:	bd38      	pop	{r3, r4, r5, pc}
 8014ce6:	bf00      	nop
 8014ce8:	200034a8 	.word	0x200034a8

08014cec <_isatty_r>:
 8014cec:	b538      	push	{r3, r4, r5, lr}
 8014cee:	4d06      	ldr	r5, [pc, #24]	; (8014d08 <_isatty_r+0x1c>)
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	4604      	mov	r4, r0
 8014cf4:	4608      	mov	r0, r1
 8014cf6:	602b      	str	r3, [r5, #0]
 8014cf8:	f7ed f94d 	bl	8001f96 <_isatty>
 8014cfc:	1c43      	adds	r3, r0, #1
 8014cfe:	d102      	bne.n	8014d06 <_isatty_r+0x1a>
 8014d00:	682b      	ldr	r3, [r5, #0]
 8014d02:	b103      	cbz	r3, 8014d06 <_isatty_r+0x1a>
 8014d04:	6023      	str	r3, [r4, #0]
 8014d06:	bd38      	pop	{r3, r4, r5, pc}
 8014d08:	200034a8 	.word	0x200034a8

08014d0c <_lseek_r>:
 8014d0c:	b538      	push	{r3, r4, r5, lr}
 8014d0e:	4d07      	ldr	r5, [pc, #28]	; (8014d2c <_lseek_r+0x20>)
 8014d10:	4604      	mov	r4, r0
 8014d12:	4608      	mov	r0, r1
 8014d14:	4611      	mov	r1, r2
 8014d16:	2200      	movs	r2, #0
 8014d18:	602a      	str	r2, [r5, #0]
 8014d1a:	461a      	mov	r2, r3
 8014d1c:	f7ed f946 	bl	8001fac <_lseek>
 8014d20:	1c43      	adds	r3, r0, #1
 8014d22:	d102      	bne.n	8014d2a <_lseek_r+0x1e>
 8014d24:	682b      	ldr	r3, [r5, #0]
 8014d26:	b103      	cbz	r3, 8014d2a <_lseek_r+0x1e>
 8014d28:	6023      	str	r3, [r4, #0]
 8014d2a:	bd38      	pop	{r3, r4, r5, pc}
 8014d2c:	200034a8 	.word	0x200034a8

08014d30 <__ascii_mbtowc>:
 8014d30:	b082      	sub	sp, #8
 8014d32:	b901      	cbnz	r1, 8014d36 <__ascii_mbtowc+0x6>
 8014d34:	a901      	add	r1, sp, #4
 8014d36:	b142      	cbz	r2, 8014d4a <__ascii_mbtowc+0x1a>
 8014d38:	b14b      	cbz	r3, 8014d4e <__ascii_mbtowc+0x1e>
 8014d3a:	7813      	ldrb	r3, [r2, #0]
 8014d3c:	600b      	str	r3, [r1, #0]
 8014d3e:	7812      	ldrb	r2, [r2, #0]
 8014d40:	1e10      	subs	r0, r2, #0
 8014d42:	bf18      	it	ne
 8014d44:	2001      	movne	r0, #1
 8014d46:	b002      	add	sp, #8
 8014d48:	4770      	bx	lr
 8014d4a:	4610      	mov	r0, r2
 8014d4c:	e7fb      	b.n	8014d46 <__ascii_mbtowc+0x16>
 8014d4e:	f06f 0001 	mvn.w	r0, #1
 8014d52:	e7f8      	b.n	8014d46 <__ascii_mbtowc+0x16>

08014d54 <memmove>:
 8014d54:	4288      	cmp	r0, r1
 8014d56:	b510      	push	{r4, lr}
 8014d58:	eb01 0402 	add.w	r4, r1, r2
 8014d5c:	d902      	bls.n	8014d64 <memmove+0x10>
 8014d5e:	4284      	cmp	r4, r0
 8014d60:	4623      	mov	r3, r4
 8014d62:	d807      	bhi.n	8014d74 <memmove+0x20>
 8014d64:	1e43      	subs	r3, r0, #1
 8014d66:	42a1      	cmp	r1, r4
 8014d68:	d008      	beq.n	8014d7c <memmove+0x28>
 8014d6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014d6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014d72:	e7f8      	b.n	8014d66 <memmove+0x12>
 8014d74:	4402      	add	r2, r0
 8014d76:	4601      	mov	r1, r0
 8014d78:	428a      	cmp	r2, r1
 8014d7a:	d100      	bne.n	8014d7e <memmove+0x2a>
 8014d7c:	bd10      	pop	{r4, pc}
 8014d7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014d82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014d86:	e7f7      	b.n	8014d78 <memmove+0x24>

08014d88 <__malloc_lock>:
 8014d88:	4801      	ldr	r0, [pc, #4]	; (8014d90 <__malloc_lock+0x8>)
 8014d8a:	f7fe bf58 	b.w	8013c3e <__retarget_lock_acquire_recursive>
 8014d8e:	bf00      	nop
 8014d90:	2000349c 	.word	0x2000349c

08014d94 <__malloc_unlock>:
 8014d94:	4801      	ldr	r0, [pc, #4]	; (8014d9c <__malloc_unlock+0x8>)
 8014d96:	f7fe bf53 	b.w	8013c40 <__retarget_lock_release_recursive>
 8014d9a:	bf00      	nop
 8014d9c:	2000349c 	.word	0x2000349c

08014da0 <_realloc_r>:
 8014da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014da4:	4680      	mov	r8, r0
 8014da6:	4614      	mov	r4, r2
 8014da8:	460e      	mov	r6, r1
 8014daa:	b921      	cbnz	r1, 8014db6 <_realloc_r+0x16>
 8014dac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014db0:	4611      	mov	r1, r2
 8014db2:	f7ff bbb9 	b.w	8014528 <_malloc_r>
 8014db6:	b92a      	cbnz	r2, 8014dc4 <_realloc_r+0x24>
 8014db8:	f7ff fb4a 	bl	8014450 <_free_r>
 8014dbc:	4625      	mov	r5, r4
 8014dbe:	4628      	mov	r0, r5
 8014dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dc4:	f000 f842 	bl	8014e4c <_malloc_usable_size_r>
 8014dc8:	4284      	cmp	r4, r0
 8014dca:	4607      	mov	r7, r0
 8014dcc:	d802      	bhi.n	8014dd4 <_realloc_r+0x34>
 8014dce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014dd2:	d812      	bhi.n	8014dfa <_realloc_r+0x5a>
 8014dd4:	4621      	mov	r1, r4
 8014dd6:	4640      	mov	r0, r8
 8014dd8:	f7ff fba6 	bl	8014528 <_malloc_r>
 8014ddc:	4605      	mov	r5, r0
 8014dde:	2800      	cmp	r0, #0
 8014de0:	d0ed      	beq.n	8014dbe <_realloc_r+0x1e>
 8014de2:	42bc      	cmp	r4, r7
 8014de4:	4622      	mov	r2, r4
 8014de6:	4631      	mov	r1, r6
 8014de8:	bf28      	it	cs
 8014dea:	463a      	movcs	r2, r7
 8014dec:	f7fd f8ce 	bl	8011f8c <memcpy>
 8014df0:	4631      	mov	r1, r6
 8014df2:	4640      	mov	r0, r8
 8014df4:	f7ff fb2c 	bl	8014450 <_free_r>
 8014df8:	e7e1      	b.n	8014dbe <_realloc_r+0x1e>
 8014dfa:	4635      	mov	r5, r6
 8014dfc:	e7df      	b.n	8014dbe <_realloc_r+0x1e>
	...

08014e00 <_read_r>:
 8014e00:	b538      	push	{r3, r4, r5, lr}
 8014e02:	4d07      	ldr	r5, [pc, #28]	; (8014e20 <_read_r+0x20>)
 8014e04:	4604      	mov	r4, r0
 8014e06:	4608      	mov	r0, r1
 8014e08:	4611      	mov	r1, r2
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	602a      	str	r2, [r5, #0]
 8014e0e:	461a      	mov	r2, r3
 8014e10:	f7ed f86c 	bl	8001eec <_read>
 8014e14:	1c43      	adds	r3, r0, #1
 8014e16:	d102      	bne.n	8014e1e <_read_r+0x1e>
 8014e18:	682b      	ldr	r3, [r5, #0]
 8014e1a:	b103      	cbz	r3, 8014e1e <_read_r+0x1e>
 8014e1c:	6023      	str	r3, [r4, #0]
 8014e1e:	bd38      	pop	{r3, r4, r5, pc}
 8014e20:	200034a8 	.word	0x200034a8

08014e24 <__ascii_wctomb>:
 8014e24:	b149      	cbz	r1, 8014e3a <__ascii_wctomb+0x16>
 8014e26:	2aff      	cmp	r2, #255	; 0xff
 8014e28:	bf85      	ittet	hi
 8014e2a:	238a      	movhi	r3, #138	; 0x8a
 8014e2c:	6003      	strhi	r3, [r0, #0]
 8014e2e:	700a      	strbls	r2, [r1, #0]
 8014e30:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8014e34:	bf98      	it	ls
 8014e36:	2001      	movls	r0, #1
 8014e38:	4770      	bx	lr
 8014e3a:	4608      	mov	r0, r1
 8014e3c:	4770      	bx	lr

08014e3e <abort>:
 8014e3e:	b508      	push	{r3, lr}
 8014e40:	2006      	movs	r0, #6
 8014e42:	f000 f833 	bl	8014eac <raise>
 8014e46:	2001      	movs	r0, #1
 8014e48:	f7ed f846 	bl	8001ed8 <_exit>

08014e4c <_malloc_usable_size_r>:
 8014e4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014e50:	1f18      	subs	r0, r3, #4
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	bfbc      	itt	lt
 8014e56:	580b      	ldrlt	r3, [r1, r0]
 8014e58:	18c0      	addlt	r0, r0, r3
 8014e5a:	4770      	bx	lr

08014e5c <_raise_r>:
 8014e5c:	291f      	cmp	r1, #31
 8014e5e:	b538      	push	{r3, r4, r5, lr}
 8014e60:	4604      	mov	r4, r0
 8014e62:	460d      	mov	r5, r1
 8014e64:	d904      	bls.n	8014e70 <_raise_r+0x14>
 8014e66:	2316      	movs	r3, #22
 8014e68:	6003      	str	r3, [r0, #0]
 8014e6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014e6e:	bd38      	pop	{r3, r4, r5, pc}
 8014e70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014e72:	b112      	cbz	r2, 8014e7a <_raise_r+0x1e>
 8014e74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014e78:	b94b      	cbnz	r3, 8014e8e <_raise_r+0x32>
 8014e7a:	4620      	mov	r0, r4
 8014e7c:	f000 f830 	bl	8014ee0 <_getpid_r>
 8014e80:	462a      	mov	r2, r5
 8014e82:	4601      	mov	r1, r0
 8014e84:	4620      	mov	r0, r4
 8014e86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014e8a:	f000 b817 	b.w	8014ebc <_kill_r>
 8014e8e:	2b01      	cmp	r3, #1
 8014e90:	d00a      	beq.n	8014ea8 <_raise_r+0x4c>
 8014e92:	1c59      	adds	r1, r3, #1
 8014e94:	d103      	bne.n	8014e9e <_raise_r+0x42>
 8014e96:	2316      	movs	r3, #22
 8014e98:	6003      	str	r3, [r0, #0]
 8014e9a:	2001      	movs	r0, #1
 8014e9c:	e7e7      	b.n	8014e6e <_raise_r+0x12>
 8014e9e:	2400      	movs	r4, #0
 8014ea0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014ea4:	4628      	mov	r0, r5
 8014ea6:	4798      	blx	r3
 8014ea8:	2000      	movs	r0, #0
 8014eaa:	e7e0      	b.n	8014e6e <_raise_r+0x12>

08014eac <raise>:
 8014eac:	4b02      	ldr	r3, [pc, #8]	; (8014eb8 <raise+0xc>)
 8014eae:	4601      	mov	r1, r0
 8014eb0:	6818      	ldr	r0, [r3, #0]
 8014eb2:	f7ff bfd3 	b.w	8014e5c <_raise_r>
 8014eb6:	bf00      	nop
 8014eb8:	20000188 	.word	0x20000188

08014ebc <_kill_r>:
 8014ebc:	b538      	push	{r3, r4, r5, lr}
 8014ebe:	4d07      	ldr	r5, [pc, #28]	; (8014edc <_kill_r+0x20>)
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	4604      	mov	r4, r0
 8014ec4:	4608      	mov	r0, r1
 8014ec6:	4611      	mov	r1, r2
 8014ec8:	602b      	str	r3, [r5, #0]
 8014eca:	f7ec fff5 	bl	8001eb8 <_kill>
 8014ece:	1c43      	adds	r3, r0, #1
 8014ed0:	d102      	bne.n	8014ed8 <_kill_r+0x1c>
 8014ed2:	682b      	ldr	r3, [r5, #0]
 8014ed4:	b103      	cbz	r3, 8014ed8 <_kill_r+0x1c>
 8014ed6:	6023      	str	r3, [r4, #0]
 8014ed8:	bd38      	pop	{r3, r4, r5, pc}
 8014eda:	bf00      	nop
 8014edc:	200034a8 	.word	0x200034a8

08014ee0 <_getpid_r>:
 8014ee0:	f7ec bfe2 	b.w	8001ea8 <_getpid>

08014ee4 <_init>:
 8014ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ee6:	bf00      	nop
 8014ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014eea:	bc08      	pop	{r3}
 8014eec:	469e      	mov	lr, r3
 8014eee:	4770      	bx	lr

08014ef0 <_fini>:
 8014ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ef2:	bf00      	nop
 8014ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ef6:	bc08      	pop	{r3}
 8014ef8:	469e      	mov	lr, r3
 8014efa:	4770      	bx	lr
