
STM32G474RET6_SecurityCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014fac  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000086c  08015190  08015190  00025190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080159fc  080159fc  00030350  2**0
                  CONTENTS
  4 .ARM          00000008  080159fc  080159fc  000259fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015a04  08015a04  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015a04  08015a04  00025a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015a08  08015a08  00025a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08015a0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000648c  20000350  08015d5c  00030350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200067dc  08015d5c  000367dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003284a  00000000  00000000  000303c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007840  00000000  00000000  00062c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000027d0  00000000  00000000  0006a450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001e7a  00000000  00000000  0006cc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032137  00000000  00000000  0006ea9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033f06  00000000  00000000  000a0bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00128c0f  00000000  00000000  000d4ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000b610  00000000  00000000  001fd6e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00208cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000350 	.word	0x20000350
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015174 	.word	0x08015174

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000354 	.word	0x20000354
 800021c:	08015174 	.word	0x08015174

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
ADC_HandleTypeDef hadc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	; 0x30
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2220      	movs	r2, #32
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f012 f9cf 	bl	8013350 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fb2:	4b32      	ldr	r3, [pc, #200]	; (800107c <MX_ADC1_Init+0xe8>)
 8000fb4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fb8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fba:	4b30      	ldr	r3, [pc, #192]	; (800107c <MX_ADC1_Init+0xe8>)
 8000fbc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fc0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fc2:	4b2e      	ldr	r3, [pc, #184]	; (800107c <MX_ADC1_Init+0xe8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc8:	4b2c      	ldr	r3, [pc, #176]	; (800107c <MX_ADC1_Init+0xe8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000fce:	4b2b      	ldr	r3, [pc, #172]	; (800107c <MX_ADC1_Init+0xe8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fd4:	4b29      	ldr	r3, [pc, #164]	; (800107c <MX_ADC1_Init+0xe8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fda:	4b28      	ldr	r3, [pc, #160]	; (800107c <MX_ADC1_Init+0xe8>)
 8000fdc:	2204      	movs	r2, #4
 8000fde:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fe0:	4b26      	ldr	r3, [pc, #152]	; (800107c <MX_ADC1_Init+0xe8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fe6:	4b25      	ldr	r3, [pc, #148]	; (800107c <MX_ADC1_Init+0xe8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000fec:	4b23      	ldr	r3, [pc, #140]	; (800107c <MX_ADC1_Init+0xe8>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ff2:	4b22      	ldr	r3, [pc, #136]	; (800107c <MX_ADC1_Init+0xe8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ffa:	4b20      	ldr	r3, [pc, #128]	; (800107c <MX_ADC1_Init+0xe8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001000:	4b1e      	ldr	r3, [pc, #120]	; (800107c <MX_ADC1_Init+0xe8>)
 8001002:	2200      	movs	r2, #0
 8001004:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001006:	4b1d      	ldr	r3, [pc, #116]	; (800107c <MX_ADC1_Init+0xe8>)
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800100e:	4b1b      	ldr	r3, [pc, #108]	; (800107c <MX_ADC1_Init+0xe8>)
 8001010:	2200      	movs	r2, #0
 8001012:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <MX_ADC1_Init+0xe8>)
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800101c:	4817      	ldr	r0, [pc, #92]	; (800107c <MX_ADC1_Init+0xe8>)
 800101e:	f002 fe29 	bl	8003c74 <HAL_ADC_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001028:	f000 feb2 	bl	8001d90 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001034:	4619      	mov	r1, r3
 8001036:	4811      	ldr	r0, [pc, #68]	; (800107c <MX_ADC1_Init+0xe8>)
 8001038:	f003 fe9e 	bl	8004d78 <HAL_ADCEx_MultiModeConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001042:	f000 fea5 	bl	8001d90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_ADC1_Init+0xec>)
 8001048:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800104a:	2306      	movs	r3, #6
 800104c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001052:	237f      	movs	r3, #127	; 0x7f
 8001054:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001056:	2304      	movs	r3, #4
 8001058:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	4619      	mov	r1, r3
 8001062:	4806      	ldr	r0, [pc, #24]	; (800107c <MX_ADC1_Init+0xe8>)
 8001064:	f003 f9c0 	bl	80043e8 <HAL_ADC_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800106e:	f000 fe8f 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	3730      	adds	r7, #48	; 0x30
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	2000036c 	.word	0x2000036c
 8001080:	04300002 	.word	0x04300002

08001084 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800108a:	463b      	mov	r3, r7
 800108c:	2220      	movs	r2, #32
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f012 f95d 	bl	8013350 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001096:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <MX_ADC2_Init+0xc0>)
 8001098:	4a2b      	ldr	r2, [pc, #172]	; (8001148 <MX_ADC2_Init+0xc4>)
 800109a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800109c:	4b29      	ldr	r3, [pc, #164]	; (8001144 <MX_ADC2_Init+0xc0>)
 800109e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010a2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010a4:	4b27      	ldr	r3, [pc, #156]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010aa:	4b26      	ldr	r3, [pc, #152]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010b0:	4b24      	ldr	r3, [pc, #144]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010b6:	4b23      	ldr	r3, [pc, #140]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010bc:	4b21      	ldr	r3, [pc, #132]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010be:	2204      	movs	r2, #4
 80010c0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010c2:	4b20      	ldr	r3, [pc, #128]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010c8:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80010f6:	4b13      	ldr	r3, [pc, #76]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010fe:	4811      	ldr	r0, [pc, #68]	; (8001144 <MX_ADC2_Init+0xc0>)
 8001100:	f002 fdb8 	bl	8003c74 <HAL_ADC_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800110a:	f000 fe41 	bl	8001d90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_ADC2_Init+0xc8>)
 8001110:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001112:	2306      	movs	r3, #6
 8001114:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800111a:	237f      	movs	r3, #127	; 0x7f
 800111c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800111e:	2304      	movs	r3, #4
 8001120:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	4806      	ldr	r0, [pc, #24]	; (8001144 <MX_ADC2_Init+0xc0>)
 800112c:	f003 f95c 	bl	80043e8 <HAL_ADC_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001136:	f000 fe2b 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	3720      	adds	r7, #32
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200003d8 	.word	0x200003d8
 8001148:	50000100 	.word	0x50000100
 800114c:	25b00200 	.word	0x25b00200

08001150 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08c      	sub	sp, #48	; 0x30
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2220      	movs	r2, #32
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f012 f8f1 	bl	8013350 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800116e:	4b31      	ldr	r3, [pc, #196]	; (8001234 <MX_ADC3_Init+0xe4>)
 8001170:	4a31      	ldr	r2, [pc, #196]	; (8001238 <MX_ADC3_Init+0xe8>)
 8001172:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001174:	4b2f      	ldr	r3, [pc, #188]	; (8001234 <MX_ADC3_Init+0xe4>)
 8001176:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800117a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800117c:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <MX_ADC3_Init+0xe4>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001182:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <MX_ADC3_Init+0xe4>)
 8001184:	2200      	movs	r2, #0
 8001186:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001188:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <MX_ADC3_Init+0xe4>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800118e:	4b29      	ldr	r3, [pc, #164]	; (8001234 <MX_ADC3_Init+0xe4>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001194:	4b27      	ldr	r3, [pc, #156]	; (8001234 <MX_ADC3_Init+0xe4>)
 8001196:	2204      	movs	r2, #4
 8001198:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <MX_ADC3_Init+0xe4>)
 800119c:	2200      	movs	r2, #0
 800119e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011a0:	4b24      	ldr	r3, [pc, #144]	; (8001234 <MX_ADC3_Init+0xe4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 80011a6:	4b23      	ldr	r3, [pc, #140]	; (8001234 <MX_ADC3_Init+0xe4>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011ac:	4b21      	ldr	r3, [pc, #132]	; (8001234 <MX_ADC3_Init+0xe4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b4:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <MX_ADC3_Init+0xe4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ba:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <MX_ADC3_Init+0xe4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011c0:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <MX_ADC3_Init+0xe4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <MX_ADC3_Init+0xe4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <MX_ADC3_Init+0xe4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011d6:	4817      	ldr	r0, [pc, #92]	; (8001234 <MX_ADC3_Init+0xe4>)
 80011d8:	f002 fd4c 	bl	8003c74 <HAL_ADC_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80011e2:	f000 fdd5 	bl	8001d90 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011e6:	2300      	movs	r3, #0
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ee:	4619      	mov	r1, r3
 80011f0:	4810      	ldr	r0, [pc, #64]	; (8001234 <MX_ADC3_Init+0xe4>)
 80011f2:	f003 fdc1 	bl	8004d78 <HAL_ADCEx_MultiModeConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80011fc:	f000 fdc8 	bl	8001d90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_ADC3_Init+0xec>)
 8001202:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001204:	2306      	movs	r3, #6
 8001206:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800120c:	237f      	movs	r3, #127	; 0x7f
 800120e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001210:	2304      	movs	r3, #4
 8001212:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	4619      	mov	r1, r3
 800121c:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_ADC3_Init+0xe4>)
 800121e:	f003 f8e3 	bl	80043e8 <HAL_ADC_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8001228:	f000 fdb2 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	3730      	adds	r7, #48	; 0x30
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000444 	.word	0x20000444
 8001238:	50000400 	.word	0x50000400
 800123c:	04300002 	.word	0x04300002

08001240 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001246:	463b      	mov	r3, r7
 8001248:	2220      	movs	r2, #32
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f012 f87f 	bl	8013350 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001252:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <MX_ADC4_Init+0xc0>)
 8001254:	4a2b      	ldr	r2, [pc, #172]	; (8001304 <MX_ADC4_Init+0xc4>)
 8001256:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001258:	4b29      	ldr	r3, [pc, #164]	; (8001300 <MX_ADC4_Init+0xc0>)
 800125a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800125e:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001260:	4b27      	ldr	r3, [pc, #156]	; (8001300 <MX_ADC4_Init+0xc0>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <MX_ADC4_Init+0xc0>)
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 800126c:	4b24      	ldr	r3, [pc, #144]	; (8001300 <MX_ADC4_Init+0xc0>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001272:	4b23      	ldr	r3, [pc, #140]	; (8001300 <MX_ADC4_Init+0xc0>)
 8001274:	2200      	movs	r2, #0
 8001276:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001278:	4b21      	ldr	r3, [pc, #132]	; (8001300 <MX_ADC4_Init+0xc0>)
 800127a:	2204      	movs	r2, #4
 800127c:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800127e:	4b20      	ldr	r3, [pc, #128]	; (8001300 <MX_ADC4_Init+0xc0>)
 8001280:	2200      	movs	r2, #0
 8001282:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8001284:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <MX_ADC4_Init+0xc0>)
 8001286:	2200      	movs	r2, #0
 8001288:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <MX_ADC4_Init+0xc0>)
 800128c:	2201      	movs	r2, #1
 800128e:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <MX_ADC4_Init+0xc0>)
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <MX_ADC4_Init+0xc0>)
 800129a:	2200      	movs	r2, #0
 800129c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <MX_ADC4_Init+0xc0>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <MX_ADC4_Init+0xc0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <MX_ADC4_Init+0xc0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <MX_ADC4_Init+0xc0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80012ba:	4811      	ldr	r0, [pc, #68]	; (8001300 <MX_ADC4_Init+0xc0>)
 80012bc:	f002 fcda 	bl	8003c74 <HAL_ADC_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 80012c6:	f000 fd63 	bl	8001d90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MX_ADC4_Init+0xc8>)
 80012cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ce:	2306      	movs	r3, #6
 80012d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80012d2:	2304      	movs	r3, #4
 80012d4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012d6:	237f      	movs	r3, #127	; 0x7f
 80012d8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012da:	2304      	movs	r3, #4
 80012dc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80012e2:	463b      	mov	r3, r7
 80012e4:	4619      	mov	r1, r3
 80012e6:	4806      	ldr	r0, [pc, #24]	; (8001300 <MX_ADC4_Init+0xc0>)
 80012e8:	f003 f87e 	bl	80043e8 <HAL_ADC_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 80012f2:	f000 fd4d 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	3720      	adds	r7, #32
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200004b0 	.word	0x200004b0
 8001304:	50000500 	.word	0x50000500
 8001308:	0c900008 	.word	0x0c900008

0800130c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b0a6      	sub	sp, #152	; 0x98
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001324:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001328:	2254      	movs	r2, #84	; 0x54
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f012 f80f 	bl	8013350 <memset>
  if(adcHandle->Instance==ADC1)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800133a:	d141      	bne.n	80013c0 <HAL_ADC_MspInit+0xb4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800133c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001340:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001342:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001346:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001348:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800134c:	4618      	mov	r0, r3
 800134e:	f007 fa47 	bl	80087e0 <HAL_RCCEx_PeriphCLKConfig>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001358:	f000 fd1a 	bl	8001d90 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800135c:	4b91      	ldr	r3, [pc, #580]	; (80015a4 <HAL_ADC_MspInit+0x298>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	4a90      	ldr	r2, [pc, #576]	; (80015a4 <HAL_ADC_MspInit+0x298>)
 8001364:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001366:	4b8f      	ldr	r3, [pc, #572]	; (80015a4 <HAL_ADC_MspInit+0x298>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d10b      	bne.n	8001386 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800136e:	4b8e      	ldr	r3, [pc, #568]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a8d      	ldr	r2, [pc, #564]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 8001374:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b8b      	ldr	r3, [pc, #556]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	4b88      	ldr	r3, [pc, #544]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	4a87      	ldr	r2, [pc, #540]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001392:	4b85      	ldr	r3, [pc, #532]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
 800139c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800139e:	2303      	movs	r3, #3
 80013a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a4:	2303      	movs	r3, #3
 80013a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80013b4:	4619      	mov	r1, r3
 80013b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ba:	f003 ffa3 	bl	8005304 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 80013be:	e0ed      	b.n	800159c <HAL_ADC_MspInit+0x290>
  else if(adcHandle->Instance==ADC2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a79      	ldr	r2, [pc, #484]	; (80015ac <HAL_ADC_MspInit+0x2a0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d15b      	bne.n	8001482 <HAL_ADC_MspInit+0x176>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013ce:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013d0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80013d4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013da:	4618      	mov	r0, r3
 80013dc:	f007 fa00 	bl	80087e0 <HAL_RCCEx_PeriphCLKConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_ADC_MspInit+0xde>
      Error_Handler();
 80013e6:	f000 fcd3 	bl	8001d90 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013ea:	4b6e      	ldr	r3, [pc, #440]	; (80015a4 <HAL_ADC_MspInit+0x298>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	3301      	adds	r3, #1
 80013f0:	4a6c      	ldr	r2, [pc, #432]	; (80015a4 <HAL_ADC_MspInit+0x298>)
 80013f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013f4:	4b6b      	ldr	r3, [pc, #428]	; (80015a4 <HAL_ADC_MspInit+0x298>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d10b      	bne.n	8001414 <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013fc:	4b6a      	ldr	r3, [pc, #424]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001400:	4a69      	ldr	r2, [pc, #420]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 8001402:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001408:	4b67      	ldr	r3, [pc, #412]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001414:	4b64      	ldr	r3, [pc, #400]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 8001416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001418:	4a63      	ldr	r2, [pc, #396]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001420:	4b61      	ldr	r3, [pc, #388]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 8001422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	623b      	str	r3, [r7, #32]
 800142a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142c:	4b5e      	ldr	r3, [pc, #376]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 800142e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001430:	4a5d      	ldr	r2, [pc, #372]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 8001432:	f043 0302 	orr.w	r3, r3, #2
 8001436:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001438:	4b5b      	ldr	r3, [pc, #364]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 800143a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	61fb      	str	r3, [r7, #28]
 8001442:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001444:	2308      	movs	r3, #8
 8001446:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800144a:	2303      	movs	r3, #3
 800144c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001456:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800145a:	4619      	mov	r1, r3
 800145c:	4854      	ldr	r0, [pc, #336]	; (80015b0 <HAL_ADC_MspInit+0x2a4>)
 800145e:	f003 ff51 	bl	8005304 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001462:	2304      	movs	r3, #4
 8001464:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001468:	2303      	movs	r3, #3
 800146a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001474:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001478:	4619      	mov	r1, r3
 800147a:	484e      	ldr	r0, [pc, #312]	; (80015b4 <HAL_ADC_MspInit+0x2a8>)
 800147c:	f003 ff42 	bl	8005304 <HAL_GPIO_Init>
}
 8001480:	e08c      	b.n	800159c <HAL_ADC_MspInit+0x290>
  else if(adcHandle->Instance==ADC3)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a4c      	ldr	r2, [pc, #304]	; (80015b8 <HAL_ADC_MspInit+0x2ac>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d141      	bne.n	8001510 <HAL_ADC_MspInit+0x204>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800148c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001490:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001492:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001496:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001498:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800149c:	4618      	mov	r0, r3
 800149e:	f007 f99f 	bl	80087e0 <HAL_RCCEx_PeriphCLKConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_ADC_MspInit+0x1a0>
      Error_Handler();
 80014a8:	f000 fc72 	bl	8001d90 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80014ac:	4b43      	ldr	r3, [pc, #268]	; (80015bc <HAL_ADC_MspInit+0x2b0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	3301      	adds	r3, #1
 80014b2:	4a42      	ldr	r2, [pc, #264]	; (80015bc <HAL_ADC_MspInit+0x2b0>)
 80014b4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80014b6:	4b41      	ldr	r3, [pc, #260]	; (80015bc <HAL_ADC_MspInit+0x2b0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d10b      	bne.n	80014d6 <HAL_ADC_MspInit+0x1ca>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80014be:	4b3a      	ldr	r3, [pc, #232]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	4a39      	ldr	r2, [pc, #228]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 80014c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ca:	4b37      	ldr	r3, [pc, #220]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	4a33      	ldr	r2, [pc, #204]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e2:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 80014ee:	f242 0302 	movw	r3, #8194	; 0x2002
 80014f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f6:	2303      	movs	r3, #3
 80014f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001502:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001506:	4619      	mov	r1, r3
 8001508:	482a      	ldr	r0, [pc, #168]	; (80015b4 <HAL_ADC_MspInit+0x2a8>)
 800150a:	f003 fefb 	bl	8005304 <HAL_GPIO_Init>
}
 800150e:	e045      	b.n	800159c <HAL_ADC_MspInit+0x290>
  else if(adcHandle->Instance==ADC4)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a2a      	ldr	r2, [pc, #168]	; (80015c0 <HAL_ADC_MspInit+0x2b4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d140      	bne.n	800159c <HAL_ADC_MspInit+0x290>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800151a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001520:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001524:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001526:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800152a:	4618      	mov	r0, r3
 800152c:	f007 f958 	bl	80087e0 <HAL_RCCEx_PeriphCLKConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_ADC_MspInit+0x22e>
      Error_Handler();
 8001536:	f000 fc2b 	bl	8001d90 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <HAL_ADC_MspInit+0x2b0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	3301      	adds	r3, #1
 8001540:	4a1e      	ldr	r2, [pc, #120]	; (80015bc <HAL_ADC_MspInit+0x2b0>)
 8001542:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001544:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <HAL_ADC_MspInit+0x2b0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d10b      	bne.n	8001564 <HAL_ADC_MspInit+0x258>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 800154e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001550:	4a15      	ldr	r2, [pc, #84]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 8001552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001556:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 800155a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001564:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 8001566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001568:	4a0f      	ldr	r2, [pc, #60]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 800156a:	f043 0302 	orr.w	r3, r3, #2
 800156e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001570:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 8001572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800157c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001580:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001584:	2303      	movs	r3, #3
 8001586:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001590:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001594:	4619      	mov	r1, r3
 8001596:	4807      	ldr	r0, [pc, #28]	; (80015b4 <HAL_ADC_MspInit+0x2a8>)
 8001598:	f003 feb4 	bl	8005304 <HAL_GPIO_Init>
}
 800159c:	bf00      	nop
 800159e:	3798      	adds	r7, #152	; 0x98
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	2000051c 	.word	0x2000051c
 80015a8:	40021000 	.word	0x40021000
 80015ac:	50000100 	.word	0x50000100
 80015b0:	48000800 	.word	0x48000800
 80015b4:	48000400 	.word	0x48000400
 80015b8:	50000400 	.word	0x50000400
 80015bc:	20000520 	.word	0x20000520
 80015c0:	50000500 	.word	0x50000500

080015c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80015c4:	b5b0      	push	{r4, r5, r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_FREERTOS_Init+0x2c>)
 80015cc:	1d3c      	adds	r4, r7, #4
 80015ce:	461d      	mov	r5, r3
 80015d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d4:	682b      	ldr	r3, [r5, #0]
 80015d6:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f00e f937 	bl	800f850 <osThreadCreate>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a03      	ldr	r2, [pc, #12]	; (80015f4 <MX_FREERTOS_Init+0x30>)
 80015e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80015e8:	bf00      	nop
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bdb0      	pop	{r4, r5, r7, pc}
 80015f0:	0801519c 	.word	0x0801519c
 80015f4:	20000524 	.word	0x20000524

080015f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001600:	2001      	movs	r0, #1
 8001602:	f00e f94c 	bl	800f89e <osDelay>
 8001606:	e7fb      	b.n	8001600 <StartDefaultTask+0x8>

08001608 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_CORDIC_Init+0x20>)
 800160e:	4a07      	ldr	r2, [pc, #28]	; (800162c <MX_CORDIC_Init+0x24>)
 8001610:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	; (8001628 <MX_CORDIC_Init+0x20>)
 8001614:	f003 fcb8 	bl	8004f88 <HAL_CORDIC_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 800161e:	f000 fbb7 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000528 	.word	0x20000528
 800162c:	40020c00 	.word	0x40020c00

08001630 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <HAL_CORDIC_MspInit+0x38>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d10b      	bne.n	800165a <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_CORDIC_MspInit+0x3c>)
 8001644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001646:	4a09      	ldr	r2, [pc, #36]	; (800166c <HAL_CORDIC_MspInit+0x3c>)
 8001648:	f043 0308 	orr.w	r3, r3, #8
 800164c:	6493      	str	r3, [r2, #72]	; 0x48
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <HAL_CORDIC_MspInit+0x3c>)
 8001650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 800165a:	bf00      	nop
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	40020c00 	.word	0x40020c00
 800166c:	40021000 	.word	0x40021000

08001670 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_FMAC_Init+0x20>)
 8001676:	4a07      	ldr	r2, [pc, #28]	; (8001694 <MX_FMAC_Init+0x24>)
 8001678:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_FMAC_Init+0x20>)
 800167c:	f003 fd96 	bl	80051ac <HAL_FMAC_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8001686:	f000 fb83 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000550 	.word	0x20000550
 8001694:	40021400 	.word	0x40021400

08001698 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <HAL_FMAC_MspInit+0x38>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d10b      	bne.n	80016c2 <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <HAL_FMAC_MspInit+0x3c>)
 80016ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ae:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <HAL_FMAC_MspInit+0x3c>)
 80016b0:	f043 0310 	orr.w	r3, r3, #16
 80016b4:	6493      	str	r3, [r2, #72]	; 0x48
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <HAL_FMAC_MspInit+0x3c>)
 80016b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ba:	f003 0310 	and.w	r3, r3, #16
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40021400 	.word	0x40021400
 80016d4:	40021000 	.word	0x40021000

080016d8 <HAL_GPIO_EXTI_Callback>:
extern TaskHandle_t xHandle_Button;
extern QueueHandle_t xExtIQueue;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	80fb      	strh	r3, [r7, #6]
	Button_HandleTypeDef button;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
	switch(GPIO_Pin){
 80016e6:	88fb      	ldrh	r3, [r7, #6]
 80016e8:	2b80      	cmp	r3, #128	; 0x80
 80016ea:	d01f      	beq.n	800172c <HAL_GPIO_EXTI_Callback+0x54>
 80016ec:	2b80      	cmp	r3, #128	; 0x80
 80016ee:	dc28      	bgt.n	8001742 <HAL_GPIO_EXTI_Callback+0x6a>
 80016f0:	2b40      	cmp	r3, #64	; 0x40
 80016f2:	d015      	beq.n	8001720 <HAL_GPIO_EXTI_Callback+0x48>
 80016f4:	2b40      	cmp	r3, #64	; 0x40
 80016f6:	dc24      	bgt.n	8001742 <HAL_GPIO_EXTI_Callback+0x6a>
 80016f8:	2b20      	cmp	r3, #32
 80016fa:	d01c      	beq.n	8001736 <HAL_GPIO_EXTI_Callback+0x5e>
 80016fc:	2b20      	cmp	r3, #32
 80016fe:	dc20      	bgt.n	8001742 <HAL_GPIO_EXTI_Callback+0x6a>
 8001700:	2b04      	cmp	r3, #4
 8001702:	d002      	beq.n	800170a <HAL_GPIO_EXTI_Callback+0x32>
 8001704:	2b10      	cmp	r3, #16
 8001706:	d005      	beq.n	8001714 <HAL_GPIO_EXTI_Callback+0x3c>
	case ENC_BTN_Pin:	//0x0020 PA5
		button.port = ENC_BTN_GPIO_Port;
		button.pin = ENC_BTN_Pin;
		break;
	default:
		break;
 8001708:	e01b      	b.n	8001742 <HAL_GPIO_EXTI_Callback+0x6a>
		button.port = USR_BTN_1_GPIO_Port;
 800170a:	4b1c      	ldr	r3, [pc, #112]	; (800177c <HAL_GPIO_EXTI_Callback+0xa4>)
 800170c:	613b      	str	r3, [r7, #16]
		button.pin = USR_BTN_1_Pin;
 800170e:	2304      	movs	r3, #4
 8001710:	82bb      	strh	r3, [r7, #20]
		break;
 8001712:	e017      	b.n	8001744 <HAL_GPIO_EXTI_Callback+0x6c>
		button.port = USR_BTN_2_GPIO_Port;
 8001714:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001718:	613b      	str	r3, [r7, #16]
		button.pin = USR_BTN_2_Pin;
 800171a:	2310      	movs	r3, #16
 800171c:	82bb      	strh	r3, [r7, #20]
		break;
 800171e:	e011      	b.n	8001744 <HAL_GPIO_EXTI_Callback+0x6c>
		button.port = USR_BTN_2_GPIO_Port;
 8001720:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001724:	613b      	str	r3, [r7, #16]
		button.pin = USR_BTN_2_Pin;
 8001726:	2310      	movs	r3, #16
 8001728:	82bb      	strh	r3, [r7, #20]
		break;
 800172a:	e00b      	b.n	8001744 <HAL_GPIO_EXTI_Callback+0x6c>
		button.port = Soft_NRST_GPIO_Port;
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <HAL_GPIO_EXTI_Callback+0xa8>)
 800172e:	613b      	str	r3, [r7, #16]
		button.pin = Soft_NRST_Pin;
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	82bb      	strh	r3, [r7, #20]
		break;
 8001734:	e006      	b.n	8001744 <HAL_GPIO_EXTI_Callback+0x6c>
		button.port = ENC_BTN_GPIO_Port;
 8001736:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800173a:	613b      	str	r3, [r7, #16]
		button.pin = ENC_BTN_Pin;
 800173c:	2320      	movs	r3, #32
 800173e:	82bb      	strh	r3, [r7, #20]
		break;
 8001740:	e000      	b.n	8001744 <HAL_GPIO_EXTI_Callback+0x6c>
		break;
 8001742:	bf00      	nop
	}
//	vTaskNotifyGiveFromISR(xHandle_Button, &higher_priority_task_woken);
    xQueueSendFromISR(xExtIQueue, &button, &xHigherPriorityTaskWoken);
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <HAL_GPIO_EXTI_Callback+0xac>)
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	f107 020c 	add.w	r2, r7, #12
 800174c:	f107 0110 	add.w	r1, r7, #16
 8001750:	2300      	movs	r3, #0
 8001752:	f00e fb5b 	bl	800fe0c <xQueueGenericSendFromISR>
    if(xHigherPriorityTaskWoken) portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00a      	beq.n	8001772 <HAL_GPIO_EXTI_Callback+0x9a>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d007      	beq.n	8001772 <HAL_GPIO_EXTI_Callback+0x9a>
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	f3bf 8f4f 	dsb	sy
 800176e:	f3bf 8f6f 	isb	sy
}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	48000c00 	.word	0x48000c00
 8001780:	48000400 	.word	0x48000400
 8001784:	200005e0 	.word	0x200005e0
 8001788:	e000ed04 	.word	0xe000ed04

0800178c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08c      	sub	sp, #48	; 0x30
 8001790:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001792:	f107 031c 	add.w	r3, r7, #28
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a2:	4b74      	ldr	r3, [pc, #464]	; (8001974 <MX_GPIO_Init+0x1e8>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	4a73      	ldr	r2, [pc, #460]	; (8001974 <MX_GPIO_Init+0x1e8>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ae:	4b71      	ldr	r3, [pc, #452]	; (8001974 <MX_GPIO_Init+0x1e8>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	61bb      	str	r3, [r7, #24]
 80017b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ba:	4b6e      	ldr	r3, [pc, #440]	; (8001974 <MX_GPIO_Init+0x1e8>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	4a6d      	ldr	r2, [pc, #436]	; (8001974 <MX_GPIO_Init+0x1e8>)
 80017c0:	f043 0320 	orr.w	r3, r3, #32
 80017c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c6:	4b6b      	ldr	r3, [pc, #428]	; (8001974 <MX_GPIO_Init+0x1e8>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	f003 0320 	and.w	r3, r3, #32
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017d2:	4b68      	ldr	r3, [pc, #416]	; (8001974 <MX_GPIO_Init+0x1e8>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	4a67      	ldr	r2, [pc, #412]	; (8001974 <MX_GPIO_Init+0x1e8>)
 80017d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017de:	4b65      	ldr	r3, [pc, #404]	; (8001974 <MX_GPIO_Init+0x1e8>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	4b62      	ldr	r3, [pc, #392]	; (8001974 <MX_GPIO_Init+0x1e8>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	4a61      	ldr	r2, [pc, #388]	; (8001974 <MX_GPIO_Init+0x1e8>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f6:	4b5f      	ldr	r3, [pc, #380]	; (8001974 <MX_GPIO_Init+0x1e8>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	4b5c      	ldr	r3, [pc, #368]	; (8001974 <MX_GPIO_Init+0x1e8>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001806:	4a5b      	ldr	r2, [pc, #364]	; (8001974 <MX_GPIO_Init+0x1e8>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180e:	4b59      	ldr	r3, [pc, #356]	; (8001974 <MX_GPIO_Init+0x1e8>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800181a:	4b56      	ldr	r3, [pc, #344]	; (8001974 <MX_GPIO_Init+0x1e8>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	4a55      	ldr	r2, [pc, #340]	; (8001974 <MX_GPIO_Init+0x1e8>)
 8001820:	f043 0308 	orr.w	r3, r3, #8
 8001824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001826:	4b53      	ldr	r3, [pc, #332]	; (8001974 <MX_GPIO_Init+0x1e8>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Pwr_Enable_U_Pin|Pwr_Enable_V_Pin|Pwr_Enable_W_Pin|USR_LED_3_Pin
 8001832:	2200      	movs	r2, #0
 8001834:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8001838:	484f      	ldr	r0, [pc, #316]	; (8001978 <MX_GPIO_Init+0x1ec>)
 800183a:	f003 fee5 	bl	8005608 <HAL_GPIO_WritePin>
                          |USR_LED_2_Pin|USR_LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_4_GPIO_Port, USR_LED_4_Pin, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001848:	f003 fede 	bl	8005608 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = Pwr_Enable_U_Pin|Pwr_Enable_V_Pin|Pwr_Enable_W_Pin|USR_LED_3_Pin
 800184c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001850:	61fb      	str	r3, [r7, #28]
                          |USR_LED_2_Pin|USR_LED_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001852:	2301      	movs	r3, #1
 8001854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185e:	f107 031c 	add.w	r3, r7, #28
 8001862:	4619      	mov	r1, r3
 8001864:	4844      	ldr	r0, [pc, #272]	; (8001978 <MX_GPIO_Init+0x1ec>)
 8001866:	f003 fd4d 	bl	8005304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_Pin;
 800186a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800186e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001870:	2300      	movs	r3, #0
 8001872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001874:	2301      	movs	r3, #1
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	4619      	mov	r1, r3
 800187e:	483f      	ldr	r0, [pc, #252]	; (800197c <MX_GPIO_Init+0x1f0>)
 8001880:	f003 fd40 	bl	8005304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_2_Pin;
 8001884:	2310      	movs	r3, #16
 8001886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001888:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800188c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188e:	2301      	movs	r3, #1
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USR_BTN_2_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	4619      	mov	r1, r3
 8001898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189c:	f003 fd32 	bl	8005304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 80018a0:	2320      	movs	r3, #32
 80018a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	4619      	mov	r1, r3
 80018b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b8:	f003 fd24 	bl	8005304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Nucleo_NRST_Pin;
 80018bc:	2301      	movs	r3, #1
 80018be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018c0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Nucleo_NRST_GPIO_Port, &GPIO_InitStruct);
 80018ca:	f107 031c 	add.w	r3, r7, #28
 80018ce:	4619      	mov	r1, r3
 80018d0:	482b      	ldr	r0, [pc, #172]	; (8001980 <MX_GPIO_Init+0x1f4>)
 80018d2:	f003 fd17 	bl	8005304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_4_Pin;
 80018d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018dc:	2301      	movs	r3, #1
 80018de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USR_LED_4_GPIO_Port, &GPIO_InitStruct);
 80018e8:	f107 031c 	add.w	r3, r7, #28
 80018ec:	4619      	mov	r1, r3
 80018ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f2:	f003 fd07 	bl	8005304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_1_Pin;
 80018f6:	2304      	movs	r3, #4
 80018f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018fa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001900:	2301      	movs	r3, #1
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USR_BTN_1_GPIO_Port, &GPIO_InitStruct);
 8001904:	f107 031c 	add.w	r3, r7, #28
 8001908:	4619      	mov	r1, r3
 800190a:	481e      	ldr	r0, [pc, #120]	; (8001984 <MX_GPIO_Init+0x1f8>)
 800190c:	f003 fcfa 	bl	8005304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USR_BTN_3_Pin|Soft_NRST_Pin;
 8001910:	23c0      	movs	r3, #192	; 0xc0
 8001912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001914:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800191a:	2301      	movs	r3, #1
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191e:	f107 031c 	add.w	r3, r7, #28
 8001922:	4619      	mov	r1, r3
 8001924:	4816      	ldr	r0, [pc, #88]	; (8001980 <MX_GPIO_Init+0x1f4>)
 8001926:	f003 fced 	bl	8005304 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2105      	movs	r1, #5
 800192e:	2006      	movs	r0, #6
 8001930:	f003 fc14 	bl	800515c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001934:	2006      	movs	r0, #6
 8001936:	f003 fc2b 	bl	8005190 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2105      	movs	r1, #5
 800193e:	2008      	movs	r0, #8
 8001940:	f003 fc0c 	bl	800515c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001944:	2008      	movs	r0, #8
 8001946:	f003 fc23 	bl	8005190 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	2105      	movs	r1, #5
 800194e:	200a      	movs	r0, #10
 8001950:	f003 fc04 	bl	800515c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001954:	200a      	movs	r0, #10
 8001956:	f003 fc1b 	bl	8005190 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2105      	movs	r1, #5
 800195e:	2017      	movs	r0, #23
 8001960:	f003 fbfc 	bl	800515c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001964:	2017      	movs	r0, #23
 8001966:	f003 fc13 	bl	8005190 <HAL_NVIC_EnableIRQ>

}
 800196a:	bf00      	nop
 800196c:	3730      	adds	r7, #48	; 0x30
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000
 8001978:	48000800 	.word	0x48000800
 800197c:	48001800 	.word	0x48001800
 8001980:	48000400 	.word	0x48000400
 8001984:	48000c00 	.word	0x48000c00

08001988 <I2C_Scan>:
  /* USER CODE END I2C2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void I2C_Scan(I2C_HandleTypeDef* i2cHandle){
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	uint8_t i2c_Number = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	73fb      	strb	r3, [r7, #15]
	if(i2cHandle->Instance==I2C1) i2c_Number = 1;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a23      	ldr	r2, [pc, #140]	; (8001a28 <I2C_Scan+0xa0>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d101      	bne.n	80019a2 <I2C_Scan+0x1a>
 800199e:	2301      	movs	r3, #1
 80019a0:	73fb      	strb	r3, [r7, #15]
	if(i2cHandle->Instance==I2C2) i2c_Number = 2;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a21      	ldr	r2, [pc, #132]	; (8001a2c <I2C_Scan+0xa4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d101      	bne.n	80019b0 <I2C_Scan+0x28>
 80019ac:	2302      	movs	r3, #2
 80019ae:	73fb      	strb	r3, [r7, #15]
	if(i2cHandle->Instance==I2C3) i2c_Number = 3;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a1e      	ldr	r2, [pc, #120]	; (8001a30 <I2C_Scan+0xa8>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d101      	bne.n	80019be <I2C_Scan+0x36>
 80019ba:	2303      	movs	r3, #3
 80019bc:	73fb      	strb	r3, [r7, #15]
	printf("### Scanning I2C bus number %d ###\r\n", i2c_Number);
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	4619      	mov	r1, r3
 80019c2:	481c      	ldr	r0, [pc, #112]	; (8001a34 <I2C_Scan+0xac>)
 80019c4:	f011 fb7e 	bl	80130c4 <iprintf>
	for(uint16_t addr = 0x00; addr < 0x80; addr++){
 80019c8:	2300      	movs	r3, #0
 80019ca:	81bb      	strh	r3, [r7, #12]
 80019cc:	e022      	b.n	8001a14 <I2C_Scan+0x8c>
		if(HAL_I2C_IsDeviceReady(i2cHandle, addr<<1, 1, 10) == HAL_OK){
 80019ce:	89bb      	ldrh	r3, [r7, #12]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	b299      	uxth	r1, r3
 80019d4:	230a      	movs	r3, #10
 80019d6:	2201      	movs	r2, #1
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f004 f86d 	bl	8005ab8 <HAL_I2C_IsDeviceReady>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d105      	bne.n	80019f0 <I2C_Scan+0x68>
			printf("0x%2x ", addr);
 80019e4:	89bb      	ldrh	r3, [r7, #12]
 80019e6:	4619      	mov	r1, r3
 80019e8:	4813      	ldr	r0, [pc, #76]	; (8001a38 <I2C_Scan+0xb0>)
 80019ea:	f011 fb6b 	bl	80130c4 <iprintf>
 80019ee:	e002      	b.n	80019f6 <I2C_Scan+0x6e>
		}
		else{
			printf(" --  ");
 80019f0:	4812      	ldr	r0, [pc, #72]	; (8001a3c <I2C_Scan+0xb4>)
 80019f2:	f011 fb67 	bl	80130c4 <iprintf>
		}
		if((addr+1)%8 == 0){
 80019f6:	89bb      	ldrh	r3, [r7, #12]
 80019f8:	3301      	adds	r3, #1
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d102      	bne.n	8001a08 <I2C_Scan+0x80>
			printf("\r\n");
 8001a02:	480f      	ldr	r0, [pc, #60]	; (8001a40 <I2C_Scan+0xb8>)
 8001a04:	f011 fbc4 	bl	8013190 <puts>
		}
		HAL_Delay(1);
 8001a08:	2001      	movs	r0, #1
 8001a0a:	f001 fee1 	bl	80037d0 <HAL_Delay>
	for(uint16_t addr = 0x00; addr < 0x80; addr++){
 8001a0e:	89bb      	ldrh	r3, [r7, #12]
 8001a10:	3301      	adds	r3, #1
 8001a12:	81bb      	strh	r3, [r7, #12]
 8001a14:	89bb      	ldrh	r3, [r7, #12]
 8001a16:	2b7f      	cmp	r3, #127	; 0x7f
 8001a18:	d9d9      	bls.n	80019ce <I2C_Scan+0x46>
	}
	printf("\r\n");
 8001a1a:	4809      	ldr	r0, [pc, #36]	; (8001a40 <I2C_Scan+0xb8>)
 8001a1c:	f011 fbb8 	bl	8013190 <puts>
}
 8001a20:	bf00      	nop
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40005400 	.word	0x40005400
 8001a2c:	40005800 	.word	0x40005800
 8001a30:	40007800 	.word	0x40007800
 8001a34:	080151b0 	.word	0x080151b0
 8001a38:	080151d8 	.word	0x080151d8
 8001a3c:	080151e0 	.word	0x080151e0
 8001a40:	080151e8 	.word	0x080151e8

08001a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a4a:	f001 fe8a 	bl	8003762 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a4e:	f000 f92f 	bl	8001cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a52:	f7ff fe9b 	bl	800178c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001a56:	f7ff fa9d 	bl	8000f94 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001a5a:	f7ff fb13 	bl	8001084 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001a5e:	f7ff fb77 	bl	8001150 <MX_ADC3_Init>
  MX_ADC4_Init();
 8001a62:	f7ff fbed 	bl	8001240 <MX_ADC4_Init>
  MX_CORDIC_Init();
 8001a66:	f7ff fdcf 	bl	8001608 <MX_CORDIC_Init>
  MX_FMAC_Init();
 8001a6a:	f7ff fe01 	bl	8001670 <MX_FMAC_Init>
//  MX_I2C2_Init();
  MX_TIM8_Init();
 8001a6e:	f000 fc13 	bl	8002298 <MX_TIM8_Init>
  MX_TIM15_Init();
 8001a72:	f000 fca9 	bl	80023c8 <MX_TIM15_Init>
  MX_TIM17_Init();
 8001a76:	f000 fda1 	bl	80025bc <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8001a7a:	f000 ff83 	bl	8002984 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001a7e:	f000 ffcd 	bl	8002a1c <MX_USART3_UART_Init>
  MX_TIM16_Init();
 8001a82:	f000 fd21 	bl	80024c8 <MX_TIM16_Init>
  MX_TIM1_Init();
 8001a86:	f000 fb43 	bl	8002110 <MX_TIM1_Init>
  MX_USB_Device_Init();
 8001a8a:	f010 f91f 	bl	8011ccc <MX_USB_Device_Init>
  MX_TIM3_Init();
 8001a8e:	f000 fbad 	bl	80021ec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	printf(	"*****************************************\r\n"
 8001a92:	485e      	ldr	r0, [pc, #376]	; (8001c0c <main+0x1c8>)
 8001a94:	f011 fb7c 	bl	8013190 <puts>
			"* ENSEA INVERTER PROJECT                *\r\n"
			"* Firmware revision 1.1                 *\r\n"
			"* By Nicolas Papazoglou & Alexis Martin *\r\n"
			"*****************************************\r\n");
	I2C_Scan(&hi2c2);
 8001a98:	485d      	ldr	r0, [pc, #372]	; (8001c10 <main+0x1cc>)
 8001a9a:	f7ff ff75 	bl	8001988 <I2C_Scan>
	xUartMutex = xSemaphoreCreateMutex();
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f00e f89d 	bl	800fbde <xQueueCreateMutex>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4a5b      	ldr	r2, [pc, #364]	; (8001c14 <main+0x1d0>)
 8001aa8:	6013      	str	r3, [r2, #0]
	xI2CMutex = xSemaphoreCreateMutex();
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f00e f897 	bl	800fbde <xQueueCreateMutex>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4a59      	ldr	r2, [pc, #356]	; (8001c18 <main+0x1d4>)
 8001ab4:	6013      	str	r3, [r2, #0]
	xTemperatureQueue = xQueueCreate(1, sizeof(float));
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2104      	movs	r1, #4
 8001aba:	2001      	movs	r0, #1
 8001abc:	f00e f820 	bl	800fb00 <xQueueGenericCreate>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4a56      	ldr	r2, [pc, #344]	; (8001c1c <main+0x1d8>)
 8001ac4:	6013      	str	r3, [r2, #0]
	xExtIQueue = xQueueCreate(1, sizeof(Button_HandleTypeDef));
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2108      	movs	r1, #8
 8001aca:	2001      	movs	r0, #1
 8001acc:	f00e f818 	bl	800fb00 <xQueueGenericCreate>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4a53      	ldr	r2, [pc, #332]	; (8001c20 <main+0x1dc>)
 8001ad4:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(Pwr_Enable_U_GPIO_Port, Pwr_Enable_U_Pin, RESET);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001adc:	4851      	ldr	r0, [pc, #324]	; (8001c24 <main+0x1e0>)
 8001ade:	f003 fd93 	bl	8005608 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Pwr_Enable_V_GPIO_Port, Pwr_Enable_V_Pin, RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ae8:	484e      	ldr	r0, [pc, #312]	; (8001c24 <main+0x1e0>)
 8001aea:	f003 fd8d 	bl	8005608 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Pwr_Enable_W_GPIO_Port, Pwr_Enable_W_Pin, RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001af4:	484b      	ldr	r0, [pc, #300]	; (8001c24 <main+0x1e0>)
 8001af6:	f003 fd87 	bl	8005608 <HAL_GPIO_WritePin>

	if(pdPASS==xTaskCreate(vTask_Break, "Break_Task", STACK_SIZE, (void *) &htim17, Break_Task_Priority, &xHandle_Break)){
 8001afa:	4b4b      	ldr	r3, [pc, #300]	; (8001c28 <main+0x1e4>)
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	2306      	movs	r3, #6
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	4b4a      	ldr	r3, [pc, #296]	; (8001c2c <main+0x1e8>)
 8001b04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b08:	4949      	ldr	r1, [pc, #292]	; (8001c30 <main+0x1ec>)
 8001b0a:	484a      	ldr	r0, [pc, #296]	; (8001c34 <main+0x1f0>)
 8001b0c:	f00e fd2e 	bl	801056c <xTaskCreate>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d103      	bne.n	8001b1e <main+0xda>
		printf("Break_Task successfully created\r\n");
 8001b16:	4848      	ldr	r0, [pc, #288]	; (8001c38 <main+0x1f4>)
 8001b18:	f011 fb3a 	bl	8013190 <puts>
 8001b1c:	e002      	b.n	8001b24 <main+0xe0>
	}
	else{
		printf("Break_Task creation error\r\n");
 8001b1e:	4847      	ldr	r0, [pc, #284]	; (8001c3c <main+0x1f8>)
 8001b20:	f011 fb36 	bl	8013190 <puts>
	}

	if(pdPASS==xTaskCreate(vTask_Button, "Button_Task", STACK_SIZE, (void *) NULL, Button_Task_Priority, &xHandle_Button)){
 8001b24:	4b46      	ldr	r3, [pc, #280]	; (8001c40 <main+0x1fc>)
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	2305      	movs	r3, #5
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b32:	4944      	ldr	r1, [pc, #272]	; (8001c44 <main+0x200>)
 8001b34:	4844      	ldr	r0, [pc, #272]	; (8001c48 <main+0x204>)
 8001b36:	f00e fd19 	bl	801056c <xTaskCreate>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d103      	bne.n	8001b48 <main+0x104>
		printf("Button_Task successfully created\r\n");
 8001b40:	4842      	ldr	r0, [pc, #264]	; (8001c4c <main+0x208>)
 8001b42:	f011 fb25 	bl	8013190 <puts>
 8001b46:	e002      	b.n	8001b4e <main+0x10a>
	}
	else{
		printf("Button_Task creation error\r\n");
 8001b48:	4841      	ldr	r0, [pc, #260]	; (8001c50 <main+0x20c>)
 8001b4a:	f011 fb21 	bl	8013190 <puts>
//	}
//	else{
//		printf("LCD_Task creation error\r\n");
//	}

	if(pdPASS==xTaskCreate(vTask_RotaryEnc, "RotEncorder_Task", STACK_SIZE, (void *) &htim3, RotaryEnc_Task_Priority, &xHandle_Rotary)){
 8001b4e:	4b41      	ldr	r3, [pc, #260]	; (8001c54 <main+0x210>)
 8001b50:	9301      	str	r3, [sp, #4]
 8001b52:	2304      	movs	r3, #4
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	4b40      	ldr	r3, [pc, #256]	; (8001c58 <main+0x214>)
 8001b58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b5c:	493f      	ldr	r1, [pc, #252]	; (8001c5c <main+0x218>)
 8001b5e:	4840      	ldr	r0, [pc, #256]	; (8001c60 <main+0x21c>)
 8001b60:	f00e fd04 	bl	801056c <xTaskCreate>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d103      	bne.n	8001b72 <main+0x12e>
		printf("RotEncorder_Task successfully created\r\n");
 8001b6a:	483e      	ldr	r0, [pc, #248]	; (8001c64 <main+0x220>)
 8001b6c:	f011 fb10 	bl	8013190 <puts>
 8001b70:	e002      	b.n	8001b78 <main+0x134>
	}
	else{
		printf("RotEncorder_Task creation error\r\n");
 8001b72:	483d      	ldr	r0, [pc, #244]	; (8001c68 <main+0x224>)
 8001b74:	f011 fb0c 	bl	8013190 <puts>
	}

	if(pdPASS==xTaskCreate(vTask_LED, "LED_Task", STACK_SIZE, (void *) NULL, LED_Task_Priority, &xHandle_LED)){
 8001b78:	4b3c      	ldr	r3, [pc, #240]	; (8001c6c <main+0x228>)
 8001b7a:	9301      	str	r3, [sp, #4]
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2300      	movs	r3, #0
 8001b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b86:	493a      	ldr	r1, [pc, #232]	; (8001c70 <main+0x22c>)
 8001b88:	483a      	ldr	r0, [pc, #232]	; (8001c74 <main+0x230>)
 8001b8a:	f00e fcef 	bl	801056c <xTaskCreate>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d103      	bne.n	8001b9c <main+0x158>
		printf("LED_Task successfully created\r\n");
 8001b94:	4838      	ldr	r0, [pc, #224]	; (8001c78 <main+0x234>)
 8001b96:	f011 fafb 	bl	8013190 <puts>
 8001b9a:	e002      	b.n	8001ba2 <main+0x15e>
	}
	else{
		printf("LED_Task creation error\r\n");
 8001b9c:	4837      	ldr	r0, [pc, #220]	; (8001c7c <main+0x238>)
 8001b9e:	f011 faf7 	bl	8013190 <puts>
	}

	if(pdPASS==xTaskCreate(vTask_TCN75A, "TCN75A_Task", STACK_SIZE, (void *) &hi2c2, TCN75A_Task_Priority, &xHandle_TCN75A)){
 8001ba2:	4b37      	ldr	r3, [pc, #220]	; (8001c80 <main+0x23c>)
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <main+0x1cc>)
 8001bac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bb0:	4934      	ldr	r1, [pc, #208]	; (8001c84 <main+0x240>)
 8001bb2:	4835      	ldr	r0, [pc, #212]	; (8001c88 <main+0x244>)
 8001bb4:	f00e fcda 	bl	801056c <xTaskCreate>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d103      	bne.n	8001bc6 <main+0x182>
		printf("TCN75A_Task successfully created\r\n");
 8001bbe:	4833      	ldr	r0, [pc, #204]	; (8001c8c <main+0x248>)
 8001bc0:	f011 fae6 	bl	8013190 <puts>
 8001bc4:	e002      	b.n	8001bcc <main+0x188>
	}
	else{
		printf("TCN75A_Task creation error\r\n");
 8001bc6:	4832      	ldr	r0, [pc, #200]	; (8001c90 <main+0x24c>)
 8001bc8:	f011 fae2 	bl	8013190 <puts>
	}

	if(pdPASS==xTaskCreate(vTask_Fan, "Fan_Task", STACK_SIZE, (void *) &htim16, Fan_Task_Priority, &xHandle_Fan)){
 8001bcc:	4b31      	ldr	r3, [pc, #196]	; (8001c94 <main+0x250>)
 8001bce:	9301      	str	r3, [sp, #4]
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	4b30      	ldr	r3, [pc, #192]	; (8001c98 <main+0x254>)
 8001bd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bda:	4930      	ldr	r1, [pc, #192]	; (8001c9c <main+0x258>)
 8001bdc:	4830      	ldr	r0, [pc, #192]	; (8001ca0 <main+0x25c>)
 8001bde:	f00e fcc5 	bl	801056c <xTaskCreate>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d103      	bne.n	8001bf0 <main+0x1ac>
		printf("Fan_Task successfully created\r\n");
 8001be8:	482e      	ldr	r0, [pc, #184]	; (8001ca4 <main+0x260>)
 8001bea:	f011 fad1 	bl	8013190 <puts>
 8001bee:	e002      	b.n	8001bf6 <main+0x1b2>
	}
	else{
		printf("Fan_Task creation error\r\n");
 8001bf0:	482d      	ldr	r0, [pc, #180]	; (8001ca8 <main+0x264>)
 8001bf2:	f011 facd 	bl	8013190 <puts>
	}



	printf("Starting Scheduler... \r\n");
 8001bf6:	482d      	ldr	r0, [pc, #180]	; (8001cac <main+0x268>)
 8001bf8:	f011 faca 	bl	8013190 <puts>
	vTaskStartScheduler();
 8001bfc:	f00e fe34 	bl	8010868 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001c00:	f7ff fce0 	bl	80015c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001c04:	f00d fe1d 	bl	800f842 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
 8001c08:	e7fe      	b.n	8001c08 <main+0x1c4>
 8001c0a:	bf00      	nop
 8001c0c:	080151ec 	.word	0x080151ec
 8001c10:	20000588 	.word	0x20000588
 8001c14:	200005d4 	.word	0x200005d4
 8001c18:	200005d8 	.word	0x200005d8
 8001c1c:	200005dc 	.word	0x200005dc
 8001c20:	200005e0 	.word	0x200005e0
 8001c24:	48000800 	.word	0x48000800
 8001c28:	200005e4 	.word	0x200005e4
 8001c2c:	200007c8 	.word	0x200007c8
 8001c30:	080152c4 	.word	0x080152c4
 8001c34:	08002d89 	.word	0x08002d89
 8001c38:	080152d0 	.word	0x080152d0
 8001c3c:	080152f4 	.word	0x080152f4
 8001c40:	200005e8 	.word	0x200005e8
 8001c44:	08015310 	.word	0x08015310
 8001c48:	08003091 	.word	0x08003091
 8001c4c:	0801531c 	.word	0x0801531c
 8001c50:	08015340 	.word	0x08015340
 8001c54:	200005ec 	.word	0x200005ec
 8001c58:	20000698 	.word	0x20000698
 8001c5c:	0801535c 	.word	0x0801535c
 8001c60:	0800367d 	.word	0x0800367d
 8001c64:	08015370 	.word	0x08015370
 8001c68:	08015398 	.word	0x08015398
 8001c6c:	200005f0 	.word	0x200005f0
 8001c70:	080153bc 	.word	0x080153bc
 8001c74:	0800358d 	.word	0x0800358d
 8001c78:	080153c8 	.word	0x080153c8
 8001c7c:	080153e8 	.word	0x080153e8
 8001c80:	200005f4 	.word	0x200005f4
 8001c84:	08015404 	.word	0x08015404
 8001c88:	08002be9 	.word	0x08002be9
 8001c8c:	08015410 	.word	0x08015410
 8001c90:	08015434 	.word	0x08015434
 8001c94:	200005f8 	.word	0x200005f8
 8001c98:	2000077c 	.word	0x2000077c
 8001c9c:	08015450 	.word	0x08015450
 8001ca0:	0800339d 	.word	0x0800339d
 8001ca4:	0801545c 	.word	0x0801545c
 8001ca8:	0801547c 	.word	0x0801547c
 8001cac:	08015498 	.word	0x08015498

08001cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b094      	sub	sp, #80	; 0x50
 8001cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cb6:	f107 0318 	add.w	r3, r7, #24
 8001cba:	2238      	movs	r2, #56	; 0x38
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f011 fb46 	bl	8013350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	60da      	str	r2, [r3, #12]
 8001cd0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f005 ff7e 	bl	8007bd4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001cd8:	2321      	movs	r3, #33	; 0x21
 8001cda:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ce0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cea:	2303      	movs	r3, #3
 8001cec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001cee:	2304      	movs	r3, #4
 8001cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001cf2:	2355      	movs	r3, #85	; 0x55
 8001cf4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d02:	f107 0318 	add.w	r3, r7, #24
 8001d06:	4618      	mov	r0, r3
 8001d08:	f006 f808 	bl	8007d1c <HAL_RCC_OscConfig>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001d12:	f000 f83d 	bl	8001d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d16:	230f      	movs	r3, #15
 8001d18:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	2104      	movs	r1, #4
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f006 fb0c 	bl	800834c <HAL_RCC_ClockConfig>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001d3a:	f000 f829 	bl	8001d90 <Error_Handler>
  }
}
 8001d3e:	bf00      	nop
 8001d40:	3750      	adds	r7, #80	; 0x50
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001d50:	1d39      	adds	r1, r7, #4
 8001d52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d56:	2201      	movs	r2, #1
 8001d58:	4803      	ldr	r0, [pc, #12]	; (8001d68 <__io_putchar+0x20>)
 8001d5a:	f009 f829 	bl	800adb0 <HAL_UART_Transmit>

	return ch;
 8001d5e:	687b      	ldr	r3, [r7, #4]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	200008a4 	.word	0x200008a4

08001d6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d101      	bne.n	8001d82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d7e:	f001 fd09 	bl	8003794 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40001000 	.word	0x40001000

08001d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d94:	b672      	cpsid	i
}
 8001d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d98:	e7fe      	b.n	8001d98 <Error_Handler+0x8>
	...

08001d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <HAL_MspInit+0x4c>)
 8001da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da6:	4a10      	ldr	r2, [pc, #64]	; (8001de8 <HAL_MspInit+0x4c>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6613      	str	r3, [r2, #96]	; 0x60
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <HAL_MspInit+0x4c>)
 8001db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_MspInit+0x4c>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <HAL_MspInit+0x4c>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc6:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <HAL_MspInit+0x4c>)
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	210f      	movs	r1, #15
 8001dd6:	f06f 0001 	mvn.w	r0, #1
 8001dda:	f003 f9bf 	bl	800515c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000

08001dec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08c      	sub	sp, #48	; 0x30
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001dfc:	4b2c      	ldr	r3, [pc, #176]	; (8001eb0 <HAL_InitTick+0xc4>)
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e00:	4a2b      	ldr	r2, [pc, #172]	; (8001eb0 <HAL_InitTick+0xc4>)
 8001e02:	f043 0310 	orr.w	r3, r3, #16
 8001e06:	6593      	str	r3, [r2, #88]	; 0x58
 8001e08:	4b29      	ldr	r3, [pc, #164]	; (8001eb0 <HAL_InitTick+0xc4>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e14:	f107 020c 	add.w	r2, r7, #12
 8001e18:	f107 0310 	add.w	r3, r7, #16
 8001e1c:	4611      	mov	r1, r2
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f006 fc68 	bl	80086f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e24:	f006 fc3a 	bl	800869c <HAL_RCC_GetPCLK1Freq>
 8001e28:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2c:	4a21      	ldr	r2, [pc, #132]	; (8001eb4 <HAL_InitTick+0xc8>)
 8001e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e32:	0c9b      	lsrs	r3, r3, #18
 8001e34:	3b01      	subs	r3, #1
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001e38:	4b1f      	ldr	r3, [pc, #124]	; (8001eb8 <HAL_InitTick+0xcc>)
 8001e3a:	4a20      	ldr	r2, [pc, #128]	; (8001ebc <HAL_InitTick+0xd0>)
 8001e3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001e3e:	4b1e      	ldr	r3, [pc, #120]	; (8001eb8 <HAL_InitTick+0xcc>)
 8001e40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e44:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e46:	4a1c      	ldr	r2, [pc, #112]	; (8001eb8 <HAL_InitTick+0xcc>)
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e4c:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <HAL_InitTick+0xcc>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e52:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <HAL_InitTick+0xcc>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001e58:	4817      	ldr	r0, [pc, #92]	; (8001eb8 <HAL_InitTick+0xcc>)
 8001e5a:	f006 ff0f 	bl	8008c7c <HAL_TIM_Base_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001e64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d11b      	bne.n	8001ea4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001e6c:	4812      	ldr	r0, [pc, #72]	; (8001eb8 <HAL_InitTick+0xcc>)
 8001e6e:	f006 ff5d 	bl	8008d2c <HAL_TIM_Base_Start_IT>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001e78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d111      	bne.n	8001ea4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e80:	2036      	movs	r0, #54	; 0x36
 8001e82:	f003 f985 	bl	8005190 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b0f      	cmp	r3, #15
 8001e8a:	d808      	bhi.n	8001e9e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	2036      	movs	r0, #54	; 0x36
 8001e92:	f003 f963 	bl	800515c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <HAL_InitTick+0xd4>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	e002      	b.n	8001ea4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001ea4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3730      	adds	r7, #48	; 0x30
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	431bde83 	.word	0x431bde83
 8001eb8:	200005fc 	.word	0x200005fc
 8001ebc:	40001000 	.word	0x40001000
 8001ec0:	20000004 	.word	0x20000004

08001ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <NMI_Handler+0x4>

08001eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ece:	e7fe      	b.n	8001ece <HardFault_Handler+0x4>

08001ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <MemManage_Handler+0x4>

08001ed6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eda:	e7fe      	b.n	8001eda <BusFault_Handler+0x4>

08001edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <UsageFault_Handler+0x4>

08001ee2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Nucleo_NRST_Pin);
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	f003 fbb9 	bl	800566c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}

08001efe <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_1_Pin);
 8001f02:	2004      	movs	r0, #4
 8001f04:	f003 fbb2 	bl	800566c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_2_Pin);
 8001f10:	2010      	movs	r0, #16
 8001f12:	f003 fbab 	bl	800566c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001f20:	4802      	ldr	r0, [pc, #8]	; (8001f2c <USB_LP_IRQHandler+0x10>)
 8001f22:	f004 fa2a 	bl	800637a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	2000617c 	.word	0x2000617c

08001f30 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_Pin);
 8001f34:	2020      	movs	r0, #32
 8001f36:	f003 fb99 	bl	800566c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_A_Pin);
 8001f3a:	2040      	movs	r0, #64	; 0x40
 8001f3c:	f003 fb96 	bl	800566c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_B_Pin);
 8001f40:	2080      	movs	r0, #128	; 0x80
 8001f42:	f003 fb93 	bl	800566c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f50:	4802      	ldr	r0, [pc, #8]	; (8001f5c <TIM6_DAC_IRQHandler+0x10>)
 8001f52:	f007 fa6c 	bl	800942e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200005fc 	.word	0x200005fc

08001f60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
	return 1;
 8001f64:	2301      	movs	r3, #1
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <_kill>:

int _kill(int pid, int sig)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f7a:	f011 fa91 	bl	80134a0 <__errno>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2216      	movs	r2, #22
 8001f82:	601a      	str	r2, [r3, #0]
	return -1;
 8001f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <_exit>:

void _exit (int status)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ffe7 	bl	8001f70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fa2:	e7fe      	b.n	8001fa2 <_exit+0x12>

08001fa4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	e00a      	b.n	8001fcc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fb6:	f3af 8000 	nop.w
 8001fba:	4601      	mov	r1, r0
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	60ba      	str	r2, [r7, #8]
 8001fc2:	b2ca      	uxtb	r2, r1
 8001fc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	dbf0      	blt.n	8001fb6 <_read+0x12>
	}

return len;
 8001fd4:	687b      	ldr	r3, [r7, #4]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b086      	sub	sp, #24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	e009      	b.n	8002004 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	60ba      	str	r2, [r7, #8]
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff fea5 	bl	8001d48 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	3301      	adds	r3, #1
 8002002:	617b      	str	r3, [r7, #20]
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	429a      	cmp	r2, r3
 800200a:	dbf1      	blt.n	8001ff0 <_write+0x12>
	}
	return len;
 800200c:	687b      	ldr	r3, [r7, #4]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <_close>:

int _close(int file)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
	return -1;
 800201e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002022:	4618      	mov	r0, r3
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800203e:	605a      	str	r2, [r3, #4]
	return 0;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <_isatty>:

int _isatty(int file)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
	return 1;
 8002056:	2301      	movs	r3, #1
}
 8002058:	4618      	mov	r0, r3
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
	return 0;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002088:	4a14      	ldr	r2, [pc, #80]	; (80020dc <_sbrk+0x5c>)
 800208a:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <_sbrk+0x60>)
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002094:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <_sbrk+0x64>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d102      	bne.n	80020a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <_sbrk+0x64>)
 800209e:	4a12      	ldr	r2, [pc, #72]	; (80020e8 <_sbrk+0x68>)
 80020a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020a2:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <_sbrk+0x64>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d207      	bcs.n	80020c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020b0:	f011 f9f6 	bl	80134a0 <__errno>
 80020b4:	4603      	mov	r3, r0
 80020b6:	220c      	movs	r2, #12
 80020b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020be:	e009      	b.n	80020d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <_sbrk+0x64>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020c6:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <_sbrk+0x64>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	4a05      	ldr	r2, [pc, #20]	; (80020e4 <_sbrk+0x64>)
 80020d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020d2:	68fb      	ldr	r3, [r7, #12]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20020000 	.word	0x20020000
 80020e0:	00000400 	.word	0x00000400
 80020e4:	20000648 	.word	0x20000648
 80020e8:	200067e0 	.word	0x200067e0

080020ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <SystemInit+0x20>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f6:	4a05      	ldr	r2, [pc, #20]	; (800210c <SystemInit+0x20>)
 80020f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08c      	sub	sp, #48	; 0x30
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002116:	f107 0320 	add.w	r3, r7, #32
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]
 8002122:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8002124:	f107 0310 	add.w	r3, r7, #16
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002132:	1d3b      	adds	r3, r7, #4
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800213c:	4b29      	ldr	r3, [pc, #164]	; (80021e4 <MX_TIM1_Init+0xd4>)
 800213e:	4a2a      	ldr	r2, [pc, #168]	; (80021e8 <MX_TIM1_Init+0xd8>)
 8002140:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002142:	4b28      	ldr	r3, [pc, #160]	; (80021e4 <MX_TIM1_Init+0xd4>)
 8002144:	2200      	movs	r2, #0
 8002146:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002148:	4b26      	ldr	r3, [pc, #152]	; (80021e4 <MX_TIM1_Init+0xd4>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800214e:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <MX_TIM1_Init+0xd4>)
 8002150:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002154:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002156:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <MX_TIM1_Init+0xd4>)
 8002158:	2200      	movs	r2, #0
 800215a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800215c:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <MX_TIM1_Init+0xd4>)
 800215e:	2200      	movs	r2, #0
 8002160:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <MX_TIM1_Init+0xd4>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002168:	481e      	ldr	r0, [pc, #120]	; (80021e4 <MX_TIM1_Init+0xd4>)
 800216a:	f006 fd87 	bl	8008c7c <HAL_TIM_Base_Init>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8002174:	f7ff fe0c 	bl	8001d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800217c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800217e:	f107 0320 	add.w	r3, r7, #32
 8002182:	4619      	mov	r1, r3
 8002184:	4817      	ldr	r0, [pc, #92]	; (80021e4 <MX_TIM1_Init+0xd4>)
 8002186:	f007 fc81 	bl	8009a8c <HAL_TIM_ConfigClockSource>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002190:	f7ff fdfe 	bl	8001d90 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002194:	2300      	movs	r3, #0
 8002196:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim1, &sConfig) != HAL_OK)
 80021a4:	f107 0310 	add.w	r3, r7, #16
 80021a8:	4619      	mov	r1, r3
 80021aa:	480e      	ldr	r0, [pc, #56]	; (80021e4 <MX_TIM1_Init+0xd4>)
 80021ac:	f008 fb69 	bl	800a882 <HAL_TIMEx_HallSensor_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80021b6:	f7ff fdeb 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80021ba:	2350      	movs	r3, #80	; 0x50
 80021bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	4619      	mov	r1, r3
 80021ca:	4806      	ldr	r0, [pc, #24]	; (80021e4 <MX_TIM1_Init+0xd4>)
 80021cc:	f008 fc12 	bl	800a9f4 <HAL_TIMEx_MasterConfigSynchronization>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80021d6:	f7ff fddb 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80021da:	bf00      	nop
 80021dc:	3730      	adds	r7, #48	; 0x30
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	2000064c 	.word	0x2000064c
 80021e8:	40012c00 	.word	0x40012c00

080021ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08c      	sub	sp, #48	; 0x30
 80021f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80021f2:	f107 030c 	add.w	r3, r7, #12
 80021f6:	2224      	movs	r2, #36	; 0x24
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f011 f8a8 	bl	8013350 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002200:	463b      	mov	r3, r7
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800220a:	4b21      	ldr	r3, [pc, #132]	; (8002290 <MX_TIM3_Init+0xa4>)
 800220c:	4a21      	ldr	r2, [pc, #132]	; (8002294 <MX_TIM3_Init+0xa8>)
 800220e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002210:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <MX_TIM3_Init+0xa4>)
 8002212:	2200      	movs	r2, #0
 8002214:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002216:	4b1e      	ldr	r3, [pc, #120]	; (8002290 <MX_TIM3_Init+0xa4>)
 8002218:	2200      	movs	r2, #0
 800221a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800221c:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <MX_TIM3_Init+0xa4>)
 800221e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002222:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002224:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <MX_TIM3_Init+0xa4>)
 8002226:	2200      	movs	r2, #0
 8002228:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222a:	4b19      	ldr	r3, [pc, #100]	; (8002290 <MX_TIM3_Init+0xa4>)
 800222c:	2200      	movs	r2, #0
 800222e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002230:	2303      	movs	r3, #3
 8002232:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002234:	2300      	movs	r3, #0
 8002236:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002238:	2301      	movs	r3, #1
 800223a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800223c:	2300      	movs	r3, #0
 800223e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002244:	2300      	movs	r3, #0
 8002246:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002248:	2301      	movs	r3, #1
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800224c:	2300      	movs	r3, #0
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002254:	f107 030c 	add.w	r3, r7, #12
 8002258:	4619      	mov	r1, r3
 800225a:	480d      	ldr	r0, [pc, #52]	; (8002290 <MX_TIM3_Init+0xa4>)
 800225c:	f006 ffb3 	bl	80091c6 <HAL_TIM_Encoder_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002266:	f7ff fd93 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800226a:	2300      	movs	r3, #0
 800226c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800226e:	2300      	movs	r3, #0
 8002270:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002272:	463b      	mov	r3, r7
 8002274:	4619      	mov	r1, r3
 8002276:	4806      	ldr	r0, [pc, #24]	; (8002290 <MX_TIM3_Init+0xa4>)
 8002278:	f008 fbbc 	bl	800a9f4 <HAL_TIMEx_MasterConfigSynchronization>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002282:	f7ff fd85 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002286:	bf00      	nop
 8002288:	3730      	adds	r7, #48	; 0x30
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000698 	.word	0x20000698
 8002294:	40000400 	.word	0x40000400

08002298 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08c      	sub	sp, #48	; 0x30
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800229e:	f107 0320 	add.w	r3, r7, #32
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ac:	f107 0314 	add.w	r3, r7, #20
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80022b8:	1d3b      	adds	r3, r7, #4
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	605a      	str	r2, [r3, #4]
 80022c0:	609a      	str	r2, [r3, #8]
 80022c2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80022c4:	4b3e      	ldr	r3, [pc, #248]	; (80023c0 <MX_TIM8_Init+0x128>)
 80022c6:	4a3f      	ldr	r2, [pc, #252]	; (80023c4 <MX_TIM8_Init+0x12c>)
 80022c8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80022ca:	4b3d      	ldr	r3, [pc, #244]	; (80023c0 <MX_TIM8_Init+0x128>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d0:	4b3b      	ldr	r3, [pc, #236]	; (80023c0 <MX_TIM8_Init+0x128>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80022d6:	4b3a      	ldr	r3, [pc, #232]	; (80023c0 <MX_TIM8_Init+0x128>)
 80022d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022dc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022de:	4b38      	ldr	r3, [pc, #224]	; (80023c0 <MX_TIM8_Init+0x128>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80022e4:	4b36      	ldr	r3, [pc, #216]	; (80023c0 <MX_TIM8_Init+0x128>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ea:	4b35      	ldr	r3, [pc, #212]	; (80023c0 <MX_TIM8_Init+0x128>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80022f0:	4833      	ldr	r0, [pc, #204]	; (80023c0 <MX_TIM8_Init+0x128>)
 80022f2:	f006 fcc3 	bl	8008c7c <HAL_TIM_Base_Init>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 80022fc:	f7ff fd48 	bl	8001d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002304:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002306:	f107 0320 	add.w	r3, r7, #32
 800230a:	4619      	mov	r1, r3
 800230c:	482c      	ldr	r0, [pc, #176]	; (80023c0 <MX_TIM8_Init+0x128>)
 800230e:	f007 fbbd 	bl	8009a8c <HAL_TIM_ConfigClockSource>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002318:	f7ff fd3a 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800231c:	4828      	ldr	r0, [pc, #160]	; (80023c0 <MX_TIM8_Init+0x128>)
 800231e:	f006 fef1 	bl	8009104 <HAL_TIM_IC_Init>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8002328:	f7ff fd32 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002330:	2300      	movs	r3, #0
 8002332:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	4619      	mov	r1, r3
 800233e:	4820      	ldr	r0, [pc, #128]	; (80023c0 <MX_TIM8_Init+0x128>)
 8002340:	f008 fb58 	bl	800a9f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 800234a:	f7ff fd21 	bl	8001d90 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800234e:	2300      	movs	r3, #0
 8002350:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002352:	2301      	movs	r3, #1
 8002354:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800235e:	1d3b      	adds	r3, r7, #4
 8002360:	2200      	movs	r2, #0
 8002362:	4619      	mov	r1, r3
 8002364:	4816      	ldr	r0, [pc, #88]	; (80023c0 <MX_TIM8_Init+0x128>)
 8002366:	f007 f9e1 	bl	800972c <HAL_TIM_IC_ConfigChannel>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8002370:	f7ff fd0e 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	2204      	movs	r2, #4
 8002378:	4619      	mov	r1, r3
 800237a:	4811      	ldr	r0, [pc, #68]	; (80023c0 <MX_TIM8_Init+0x128>)
 800237c:	f007 f9d6 	bl	800972c <HAL_TIM_IC_ConfigChannel>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 8002386:	f7ff fd03 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	2208      	movs	r2, #8
 800238e:	4619      	mov	r1, r3
 8002390:	480b      	ldr	r0, [pc, #44]	; (80023c0 <MX_TIM8_Init+0x128>)
 8002392:	f007 f9cb 	bl	800972c <HAL_TIM_IC_ConfigChannel>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 800239c:	f7ff fcf8 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	220c      	movs	r2, #12
 80023a4:	4619      	mov	r1, r3
 80023a6:	4806      	ldr	r0, [pc, #24]	; (80023c0 <MX_TIM8_Init+0x128>)
 80023a8:	f007 f9c0 	bl	800972c <HAL_TIM_IC_ConfigChannel>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 80023b2:	f7ff fced 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80023b6:	bf00      	nop
 80023b8:	3730      	adds	r7, #48	; 0x30
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200006e4 	.word	0x200006e4
 80023c4:	40013400 	.word	0x40013400

080023c8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08c      	sub	sp, #48	; 0x30
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ce:	f107 0320 	add.w	r3, r7, #32
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	605a      	str	r2, [r3, #4]
 80023d8:	609a      	str	r2, [r3, #8]
 80023da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80023f4:	4b32      	ldr	r3, [pc, #200]	; (80024c0 <MX_TIM15_Init+0xf8>)
 80023f6:	4a33      	ldr	r2, [pc, #204]	; (80024c4 <MX_TIM15_Init+0xfc>)
 80023f8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80023fa:	4b31      	ldr	r3, [pc, #196]	; (80024c0 <MX_TIM15_Init+0xf8>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002400:	4b2f      	ldr	r3, [pc, #188]	; (80024c0 <MX_TIM15_Init+0xf8>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002406:	4b2e      	ldr	r3, [pc, #184]	; (80024c0 <MX_TIM15_Init+0xf8>)
 8002408:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800240c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800240e:	4b2c      	ldr	r3, [pc, #176]	; (80024c0 <MX_TIM15_Init+0xf8>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002414:	4b2a      	ldr	r3, [pc, #168]	; (80024c0 <MX_TIM15_Init+0xf8>)
 8002416:	2200      	movs	r2, #0
 8002418:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241a:	4b29      	ldr	r3, [pc, #164]	; (80024c0 <MX_TIM15_Init+0xf8>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002420:	4827      	ldr	r0, [pc, #156]	; (80024c0 <MX_TIM15_Init+0xf8>)
 8002422:	f006 fc2b 	bl	8008c7c <HAL_TIM_Base_Init>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_TIM15_Init+0x68>
  {
    Error_Handler();
 800242c:	f7ff fcb0 	bl	8001d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002434:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002436:	f107 0320 	add.w	r3, r7, #32
 800243a:	4619      	mov	r1, r3
 800243c:	4820      	ldr	r0, [pc, #128]	; (80024c0 <MX_TIM15_Init+0xf8>)
 800243e:	f007 fb25 	bl	8009a8c <HAL_TIM_ConfigClockSource>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_TIM15_Init+0x84>
  {
    Error_Handler();
 8002448:	f7ff fca2 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 800244c:	481c      	ldr	r0, [pc, #112]	; (80024c0 <MX_TIM15_Init+0xf8>)
 800244e:	f006 fe59 	bl	8009104 <HAL_TIM_IC_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8002458:	f7ff fc9a 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002460:	2300      	movs	r3, #0
 8002462:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	4619      	mov	r1, r3
 800246a:	4815      	ldr	r0, [pc, #84]	; (80024c0 <MX_TIM15_Init+0xf8>)
 800246c:	f008 fac2 	bl	800a9f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM15_Init+0xb2>
  {
    Error_Handler();
 8002476:	f7ff fc8b 	bl	8001d90 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800247a:	2300      	movs	r3, #0
 800247c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800247e:	2301      	movs	r3, #1
 8002480:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	2200      	movs	r2, #0
 800248e:	4619      	mov	r1, r3
 8002490:	480b      	ldr	r0, [pc, #44]	; (80024c0 <MX_TIM15_Init+0xf8>)
 8002492:	f007 f94b 	bl	800972c <HAL_TIM_IC_ConfigChannel>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 800249c:	f7ff fc78 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80024a0:	1d3b      	adds	r3, r7, #4
 80024a2:	2204      	movs	r2, #4
 80024a4:	4619      	mov	r1, r3
 80024a6:	4806      	ldr	r0, [pc, #24]	; (80024c0 <MX_TIM15_Init+0xf8>)
 80024a8:	f007 f940 	bl	800972c <HAL_TIM_IC_ConfigChannel>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_TIM15_Init+0xee>
  {
    Error_Handler();
 80024b2:	f7ff fc6d 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80024b6:	bf00      	nop
 80024b8:	3730      	adds	r7, #48	; 0x30
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000730 	.word	0x20000730
 80024c4:	40014000 	.word	0x40014000

080024c8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b094      	sub	sp, #80	; 0x50
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	60da      	str	r2, [r3, #12]
 80024dc:	611a      	str	r2, [r3, #16]
 80024de:	615a      	str	r2, [r3, #20]
 80024e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024e2:	463b      	mov	r3, r7
 80024e4:	2234      	movs	r2, #52	; 0x34
 80024e6:	2100      	movs	r1, #0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f010 ff31 	bl	8013350 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80024ee:	4b31      	ldr	r3, [pc, #196]	; (80025b4 <MX_TIM16_Init+0xec>)
 80024f0:	4a31      	ldr	r2, [pc, #196]	; (80025b8 <MX_TIM16_Init+0xf0>)
 80024f2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80024f4:	4b2f      	ldr	r3, [pc, #188]	; (80025b4 <MX_TIM16_Init+0xec>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024fa:	4b2e      	ldr	r3, [pc, #184]	; (80025b4 <MX_TIM16_Init+0xec>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8500;
 8002500:	4b2c      	ldr	r3, [pc, #176]	; (80025b4 <MX_TIM16_Init+0xec>)
 8002502:	f242 1234 	movw	r2, #8500	; 0x2134
 8002506:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002508:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <MX_TIM16_Init+0xec>)
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800250e:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <MX_TIM16_Init+0xec>)
 8002510:	2200      	movs	r2, #0
 8002512:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <MX_TIM16_Init+0xec>)
 8002516:	2280      	movs	r2, #128	; 0x80
 8002518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800251a:	4826      	ldr	r0, [pc, #152]	; (80025b4 <MX_TIM16_Init+0xec>)
 800251c:	f006 fbae 	bl	8008c7c <HAL_TIM_Base_Init>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002526:	f7ff fc33 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800252a:	4822      	ldr	r0, [pc, #136]	; (80025b4 <MX_TIM16_Init+0xec>)
 800252c:	f006 fc76 	bl	8008e1c <HAL_TIM_PWM_Init>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002536:	f7ff fc2b 	bl	8001d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800253a:	2360      	movs	r3, #96	; 0x60
 800253c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002542:	2300      	movs	r3, #0
 8002544:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002546:	2300      	movs	r3, #0
 8002548:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800254a:	2300      	movs	r3, #0
 800254c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002556:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800255a:	2200      	movs	r2, #0
 800255c:	4619      	mov	r1, r3
 800255e:	4815      	ldr	r0, [pc, #84]	; (80025b4 <MX_TIM16_Init+0xec>)
 8002560:	f007 f980 	bl	8009864 <HAL_TIM_PWM_ConfigChannel>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800256a:	f7ff fc11 	bl	8001d90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800256e:	2300      	movs	r3, #0
 8002570:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002572:	2300      	movs	r3, #0
 8002574:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002582:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002586:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002590:	463b      	mov	r3, r7
 8002592:	4619      	mov	r1, r3
 8002594:	4807      	ldr	r0, [pc, #28]	; (80025b4 <MX_TIM16_Init+0xec>)
 8002596:	f008 fac3 	bl	800ab20 <HAL_TIMEx_ConfigBreakDeadTime>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80025a0:	f7ff fbf6 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80025a4:	4803      	ldr	r0, [pc, #12]	; (80025b4 <MX_TIM16_Init+0xec>)
 80025a6:	f000 f991 	bl	80028cc <HAL_TIM_MspPostInit>

}
 80025aa:	bf00      	nop
 80025ac:	3750      	adds	r7, #80	; 0x50
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	2000077c 	.word	0x2000077c
 80025b8:	40014400 	.word	0x40014400

080025bc <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b094      	sub	sp, #80	; 0x50
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80025c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	609a      	str	r2, [r3, #8]
 80025ce:	60da      	str	r2, [r3, #12]
 80025d0:	611a      	str	r2, [r3, #16]
 80025d2:	615a      	str	r2, [r3, #20]
 80025d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025d6:	463b      	mov	r3, r7
 80025d8:	2234      	movs	r2, #52	; 0x34
 80025da:	2100      	movs	r1, #0
 80025dc:	4618      	mov	r0, r3
 80025de:	f010 feb7 	bl	8013350 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80025e2:	4b30      	ldr	r3, [pc, #192]	; (80026a4 <MX_TIM17_Init+0xe8>)
 80025e4:	4a30      	ldr	r2, [pc, #192]	; (80026a8 <MX_TIM17_Init+0xec>)
 80025e6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 33-1;
 80025e8:	4b2e      	ldr	r3, [pc, #184]	; (80026a4 <MX_TIM17_Init+0xe8>)
 80025ea:	2220      	movs	r2, #32
 80025ec:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ee:	4b2d      	ldr	r3, [pc, #180]	; (80026a4 <MX_TIM17_Init+0xe8>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 255;
 80025f4:	4b2b      	ldr	r3, [pc, #172]	; (80026a4 <MX_TIM17_Init+0xe8>)
 80025f6:	22ff      	movs	r2, #255	; 0xff
 80025f8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025fa:	4b2a      	ldr	r3, [pc, #168]	; (80026a4 <MX_TIM17_Init+0xe8>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002600:	4b28      	ldr	r3, [pc, #160]	; (80026a4 <MX_TIM17_Init+0xe8>)
 8002602:	2200      	movs	r2, #0
 8002604:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002606:	4b27      	ldr	r3, [pc, #156]	; (80026a4 <MX_TIM17_Init+0xe8>)
 8002608:	2200      	movs	r2, #0
 800260a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800260c:	4825      	ldr	r0, [pc, #148]	; (80026a4 <MX_TIM17_Init+0xe8>)
 800260e:	f006 fb35 	bl	8008c7c <HAL_TIM_Base_Init>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8002618:	f7ff fbba 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800261c:	4821      	ldr	r0, [pc, #132]	; (80026a4 <MX_TIM17_Init+0xe8>)
 800261e:	f006 fbfd 	bl	8008e1c <HAL_TIM_PWM_Init>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8002628:	f7ff fbb2 	bl	8001d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800262c:	2360      	movs	r3, #96	; 0x60
 800262e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002634:	2300      	movs	r3, #0
 8002636:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002638:	2300      	movs	r3, #0
 800263a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800263c:	2300      	movs	r3, #0
 800263e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002640:	2300      	movs	r3, #0
 8002642:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002644:	2300      	movs	r3, #0
 8002646:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002648:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800264c:	2200      	movs	r2, #0
 800264e:	4619      	mov	r1, r3
 8002650:	4814      	ldr	r0, [pc, #80]	; (80026a4 <MX_TIM17_Init+0xe8>)
 8002652:	f007 f907 	bl	8009864 <HAL_TIM_PWM_ConfigChannel>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 800265c:	f7ff fb98 	bl	8001d90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002660:	2300      	movs	r3, #0
 8002662:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002664:	2300      	movs	r3, #0
 8002666:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002668:	2300      	movs	r3, #0
 800266a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002670:	2300      	movs	r3, #0
 8002672:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002678:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800267e:	2300      	movs	r3, #0
 8002680:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002682:	463b      	mov	r3, r7
 8002684:	4619      	mov	r1, r3
 8002686:	4807      	ldr	r0, [pc, #28]	; (80026a4 <MX_TIM17_Init+0xe8>)
 8002688:	f008 fa4a 	bl	800ab20 <HAL_TIMEx_ConfigBreakDeadTime>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8002692:	f7ff fb7d 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002696:	4803      	ldr	r0, [pc, #12]	; (80026a4 <MX_TIM17_Init+0xe8>)
 8002698:	f000 f918 	bl	80028cc <HAL_TIM_MspPostInit>

}
 800269c:	bf00      	nop
 800269e:	3750      	adds	r7, #80	; 0x50
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	200007c8 	.word	0x200007c8
 80026a8:	40014800 	.word	0x40014800

080026ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b090      	sub	sp, #64	; 0x40
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a58      	ldr	r2, [pc, #352]	; (800282c <HAL_TIM_Base_MspInit+0x180>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d128      	bne.n	8002720 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026ce:	4b58      	ldr	r3, [pc, #352]	; (8002830 <HAL_TIM_Base_MspInit+0x184>)
 80026d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d2:	4a57      	ldr	r2, [pc, #348]	; (8002830 <HAL_TIM_Base_MspInit+0x184>)
 80026d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026d8:	6613      	str	r3, [r2, #96]	; 0x60
 80026da:	4b55      	ldr	r3, [pc, #340]	; (8002830 <HAL_TIM_Base_MspInit+0x184>)
 80026dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80026e4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e6:	4b52      	ldr	r3, [pc, #328]	; (8002830 <HAL_TIM_Base_MspInit+0x184>)
 80026e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ea:	4a51      	ldr	r2, [pc, #324]	; (8002830 <HAL_TIM_Base_MspInit+0x184>)
 80026ec:	f043 0304 	orr.w	r3, r3, #4
 80026f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026f2:	4b4f      	ldr	r3, [pc, #316]	; (8002830 <HAL_TIM_Base_MspInit+0x184>)
 80026f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80026fe:	2307      	movs	r3, #7
 8002700:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002702:	2302      	movs	r3, #2
 8002704:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270a:	2300      	movs	r3, #0
 800270c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800270e:	2302      	movs	r3, #2
 8002710:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002712:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002716:	4619      	mov	r1, r3
 8002718:	4846      	ldr	r0, [pc, #280]	; (8002834 <HAL_TIM_Base_MspInit+0x188>)
 800271a:	f002 fdf3 	bl	8005304 <HAL_GPIO_Init>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800271e:	e080      	b.n	8002822 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM8)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a44      	ldr	r2, [pc, #272]	; (8002838 <HAL_TIM_Base_MspInit+0x18c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d129      	bne.n	800277e <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800272a:	4b41      	ldr	r3, [pc, #260]	; (8002830 <HAL_TIM_Base_MspInit+0x184>)
 800272c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800272e:	4a40      	ldr	r2, [pc, #256]	; (8002830 <HAL_TIM_Base_MspInit+0x184>)
 8002730:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002734:	6613      	str	r3, [r2, #96]	; 0x60
 8002736:	4b3e      	ldr	r3, [pc, #248]	; (8002830 <HAL_TIM_Base_MspInit+0x184>)
 8002738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800273a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800273e:	623b      	str	r3, [r7, #32]
 8002740:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002742:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <HAL_TIM_Base_MspInit+0x184>)
 8002744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002746:	4a3a      	ldr	r2, [pc, #232]	; (8002830 <HAL_TIM_Base_MspInit+0x184>)
 8002748:	f043 0304 	orr.w	r3, r3, #4
 800274c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800274e:	4b38      	ldr	r3, [pc, #224]	; (8002830 <HAL_TIM_Base_MspInit+0x184>)
 8002750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	61fb      	str	r3, [r7, #28]
 8002758:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800275a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800275e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002760:	2302      	movs	r3, #2
 8002762:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002768:	2300      	movs	r3, #0
 800276a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800276c:	2304      	movs	r3, #4
 800276e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002770:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002774:	4619      	mov	r1, r3
 8002776:	482f      	ldr	r0, [pc, #188]	; (8002834 <HAL_TIM_Base_MspInit+0x188>)
 8002778:	f002 fdc4 	bl	8005304 <HAL_GPIO_Init>
}
 800277c:	e051      	b.n	8002822 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM15)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a2e      	ldr	r2, [pc, #184]	; (800283c <HAL_TIM_Base_MspInit+0x190>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d129      	bne.n	80027dc <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002788:	4b29      	ldr	r3, [pc, #164]	; (8002830 <HAL_TIM_Base_MspInit+0x184>)
 800278a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278c:	4a28      	ldr	r2, [pc, #160]	; (8002830 <HAL_TIM_Base_MspInit+0x184>)
 800278e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002792:	6613      	str	r3, [r2, #96]	; 0x60
 8002794:	4b26      	ldr	r3, [pc, #152]	; (8002830 <HAL_TIM_Base_MspInit+0x184>)
 8002796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279c:	61bb      	str	r3, [r7, #24]
 800279e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a0:	4b23      	ldr	r3, [pc, #140]	; (8002830 <HAL_TIM_Base_MspInit+0x184>)
 80027a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a4:	4a22      	ldr	r2, [pc, #136]	; (8002830 <HAL_TIM_Base_MspInit+0x184>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ac:	4b20      	ldr	r3, [pc, #128]	; (8002830 <HAL_TIM_Base_MspInit+0x184>)
 80027ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027b8:	230c      	movs	r3, #12
 80027ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027bc:	2302      	movs	r3, #2
 80027be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c4:	2300      	movs	r3, #0
 80027c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80027c8:	2309      	movs	r3, #9
 80027ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027d0:	4619      	mov	r1, r3
 80027d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027d6:	f002 fd95 	bl	8005304 <HAL_GPIO_Init>
}
 80027da:	e022      	b.n	8002822 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM16)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a17      	ldr	r2, [pc, #92]	; (8002840 <HAL_TIM_Base_MspInit+0x194>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d10c      	bne.n	8002800 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <HAL_TIM_Base_MspInit+0x184>)
 80027e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ea:	4a11      	ldr	r2, [pc, #68]	; (8002830 <HAL_TIM_Base_MspInit+0x184>)
 80027ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f0:	6613      	str	r3, [r2, #96]	; 0x60
 80027f2:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <HAL_TIM_Base_MspInit+0x184>)
 80027f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	693b      	ldr	r3, [r7, #16]
}
 80027fe:	e010      	b.n	8002822 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM17)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0f      	ldr	r2, [pc, #60]	; (8002844 <HAL_TIM_Base_MspInit+0x198>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d10b      	bne.n	8002822 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <HAL_TIM_Base_MspInit+0x184>)
 800280c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800280e:	4a08      	ldr	r2, [pc, #32]	; (8002830 <HAL_TIM_Base_MspInit+0x184>)
 8002810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002814:	6613      	str	r3, [r2, #96]	; 0x60
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_TIM_Base_MspInit+0x184>)
 8002818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
}
 8002822:	bf00      	nop
 8002824:	3740      	adds	r7, #64	; 0x40
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40012c00 	.word	0x40012c00
 8002830:	40021000 	.word	0x40021000
 8002834:	48000800 	.word	0x48000800
 8002838:	40013400 	.word	0x40013400
 800283c:	40014000 	.word	0x40014000
 8002840:	40014400 	.word	0x40014400
 8002844:	40014800 	.word	0x40014800

08002848 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08a      	sub	sp, #40	; 0x28
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a17      	ldr	r2, [pc, #92]	; (80028c4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d128      	bne.n	80028bc <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800286a:	4b17      	ldr	r3, [pc, #92]	; (80028c8 <HAL_TIM_Encoder_MspInit+0x80>)
 800286c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286e:	4a16      	ldr	r2, [pc, #88]	; (80028c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002870:	f043 0302 	orr.w	r3, r3, #2
 8002874:	6593      	str	r3, [r2, #88]	; 0x58
 8002876:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002882:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002886:	4a10      	ldr	r2, [pc, #64]	; (80028c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800288e:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_BTN_A_Pin|ENC_BTN_B_Pin;
 800289a:	23c0      	movs	r3, #192	; 0xc0
 800289c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289e:	2302      	movs	r3, #2
 80028a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a6:	2300      	movs	r3, #0
 80028a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028aa:	2302      	movs	r3, #2
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ae:	f107 0314 	add.w	r3, r7, #20
 80028b2:	4619      	mov	r1, r3
 80028b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028b8:	f002 fd24 	bl	8005304 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80028bc:	bf00      	nop
 80028be:	3728      	adds	r7, #40	; 0x28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40000400 	.word	0x40000400
 80028c8:	40021000 	.word	0x40021000

080028cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	; 0x28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d4:	f107 0314 	add.w	r3, r7, #20
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a22      	ldr	r2, [pc, #136]	; (8002974 <HAL_TIM_MspPostInit+0xa8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d11c      	bne.n	8002928 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ee:	4b22      	ldr	r3, [pc, #136]	; (8002978 <HAL_TIM_MspPostInit+0xac>)
 80028f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f2:	4a21      	ldr	r2, [pc, #132]	; (8002978 <HAL_TIM_MspPostInit+0xac>)
 80028f4:	f043 0302 	orr.w	r3, r3, #2
 80028f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028fa:	4b1f      	ldr	r3, [pc, #124]	; (8002978 <HAL_TIM_MspPostInit+0xac>)
 80028fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB4     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002906:	2310      	movs	r3, #16
 8002908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	2302      	movs	r3, #2
 800290c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002912:	2300      	movs	r3, #0
 8002914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002916:	2301      	movs	r3, #1
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291a:	f107 0314 	add.w	r3, r7, #20
 800291e:	4619      	mov	r1, r3
 8002920:	4816      	ldr	r0, [pc, #88]	; (800297c <HAL_TIM_MspPostInit+0xb0>)
 8002922:	f002 fcef 	bl	8005304 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002926:	e020      	b.n	800296a <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM17)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a14      	ldr	r2, [pc, #80]	; (8002980 <HAL_TIM_MspPostInit+0xb4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d11b      	bne.n	800296a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002932:	4b11      	ldr	r3, [pc, #68]	; (8002978 <HAL_TIM_MspPostInit+0xac>)
 8002934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002936:	4a10      	ldr	r2, [pc, #64]	; (8002978 <HAL_TIM_MspPostInit+0xac>)
 8002938:	f043 0302 	orr.w	r3, r3, #2
 800293c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800293e:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <HAL_TIM_MspPostInit+0xac>)
 8002940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ISO_PWM_BREAK_Pin;
 800294a:	2320      	movs	r3, #32
 800294c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294e:	2302      	movs	r3, #2
 8002950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002956:	2300      	movs	r3, #0
 8002958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800295a:	230a      	movs	r3, #10
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ISO_PWM_BREAK_GPIO_Port, &GPIO_InitStruct);
 800295e:	f107 0314 	add.w	r3, r7, #20
 8002962:	4619      	mov	r1, r3
 8002964:	4805      	ldr	r0, [pc, #20]	; (800297c <HAL_TIM_MspPostInit+0xb0>)
 8002966:	f002 fccd 	bl	8005304 <HAL_GPIO_Init>
}
 800296a:	bf00      	nop
 800296c:	3728      	adds	r7, #40	; 0x28
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40014400 	.word	0x40014400
 8002978:	40021000 	.word	0x40021000
 800297c:	48000400 	.word	0x48000400
 8002980:	40014800 	.word	0x40014800

08002984 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002988:	4b22      	ldr	r3, [pc, #136]	; (8002a14 <MX_USART1_UART_Init+0x90>)
 800298a:	4a23      	ldr	r2, [pc, #140]	; (8002a18 <MX_USART1_UART_Init+0x94>)
 800298c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800298e:	4b21      	ldr	r3, [pc, #132]	; (8002a14 <MX_USART1_UART_Init+0x90>)
 8002990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002994:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002996:	4b1f      	ldr	r3, [pc, #124]	; (8002a14 <MX_USART1_UART_Init+0x90>)
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800299c:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <MX_USART1_UART_Init+0x90>)
 800299e:	2200      	movs	r2, #0
 80029a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029a2:	4b1c      	ldr	r3, [pc, #112]	; (8002a14 <MX_USART1_UART_Init+0x90>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029a8:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <MX_USART1_UART_Init+0x90>)
 80029aa:	220c      	movs	r2, #12
 80029ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ae:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <MX_USART1_UART_Init+0x90>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029b4:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <MX_USART1_UART_Init+0x90>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029ba:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <MX_USART1_UART_Init+0x90>)
 80029bc:	2200      	movs	r2, #0
 80029be:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029c0:	4b14      	ldr	r3, [pc, #80]	; (8002a14 <MX_USART1_UART_Init+0x90>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029c6:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <MX_USART1_UART_Init+0x90>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029cc:	4811      	ldr	r0, [pc, #68]	; (8002a14 <MX_USART1_UART_Init+0x90>)
 80029ce:	f008 f99f 	bl	800ad10 <HAL_UART_Init>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80029d8:	f7ff f9da 	bl	8001d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029dc:	2100      	movs	r1, #0
 80029de:	480d      	ldr	r0, [pc, #52]	; (8002a14 <MX_USART1_UART_Init+0x90>)
 80029e0:	f008 ff66 	bl	800b8b0 <HAL_UARTEx_SetTxFifoThreshold>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80029ea:	f7ff f9d1 	bl	8001d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029ee:	2100      	movs	r1, #0
 80029f0:	4808      	ldr	r0, [pc, #32]	; (8002a14 <MX_USART1_UART_Init+0x90>)
 80029f2:	f008 ff9b 	bl	800b92c <HAL_UARTEx_SetRxFifoThreshold>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80029fc:	f7ff f9c8 	bl	8001d90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002a00:	4804      	ldr	r0, [pc, #16]	; (8002a14 <MX_USART1_UART_Init+0x90>)
 8002a02:	f008 ff1c 	bl	800b83e <HAL_UARTEx_DisableFifoMode>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002a0c:	f7ff f9c0 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a10:	bf00      	nop
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20000814 	.word	0x20000814
 8002a18:	40013800 	.word	0x40013800

08002a1c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a20:	4b22      	ldr	r3, [pc, #136]	; (8002aac <MX_USART3_UART_Init+0x90>)
 8002a22:	4a23      	ldr	r2, [pc, #140]	; (8002ab0 <MX_USART3_UART_Init+0x94>)
 8002a24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002a26:	4b21      	ldr	r3, [pc, #132]	; (8002aac <MX_USART3_UART_Init+0x90>)
 8002a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a2e:	4b1f      	ldr	r3, [pc, #124]	; (8002aac <MX_USART3_UART_Init+0x90>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a34:	4b1d      	ldr	r3, [pc, #116]	; (8002aac <MX_USART3_UART_Init+0x90>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a3a:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <MX_USART3_UART_Init+0x90>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a40:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <MX_USART3_UART_Init+0x90>)
 8002a42:	220c      	movs	r2, #12
 8002a44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a46:	4b19      	ldr	r3, [pc, #100]	; (8002aac <MX_USART3_UART_Init+0x90>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a4c:	4b17      	ldr	r3, [pc, #92]	; (8002aac <MX_USART3_UART_Init+0x90>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a52:	4b16      	ldr	r3, [pc, #88]	; (8002aac <MX_USART3_UART_Init+0x90>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a58:	4b14      	ldr	r3, [pc, #80]	; (8002aac <MX_USART3_UART_Init+0x90>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a5e:	4b13      	ldr	r3, [pc, #76]	; (8002aac <MX_USART3_UART_Init+0x90>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a64:	4811      	ldr	r0, [pc, #68]	; (8002aac <MX_USART3_UART_Init+0x90>)
 8002a66:	f008 f953 	bl	800ad10 <HAL_UART_Init>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002a70:	f7ff f98e 	bl	8001d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a74:	2100      	movs	r1, #0
 8002a76:	480d      	ldr	r0, [pc, #52]	; (8002aac <MX_USART3_UART_Init+0x90>)
 8002a78:	f008 ff1a 	bl	800b8b0 <HAL_UARTEx_SetTxFifoThreshold>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002a82:	f7ff f985 	bl	8001d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a86:	2100      	movs	r1, #0
 8002a88:	4808      	ldr	r0, [pc, #32]	; (8002aac <MX_USART3_UART_Init+0x90>)
 8002a8a:	f008 ff4f 	bl	800b92c <HAL_UARTEx_SetRxFifoThreshold>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002a94:	f7ff f97c 	bl	8001d90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002a98:	4804      	ldr	r0, [pc, #16]	; (8002aac <MX_USART3_UART_Init+0x90>)
 8002a9a:	f008 fed0 	bl	800b83e <HAL_UARTEx_DisableFifoMode>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002aa4:	f7ff f974 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002aa8:	bf00      	nop
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	200008a4 	.word	0x200008a4
 8002ab0:	40004800 	.word	0x40004800

08002ab4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b0a0      	sub	sp, #128	; 0x80
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002acc:	f107 0318 	add.w	r3, r7, #24
 8002ad0:	2254      	movs	r2, #84	; 0x54
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f010 fc3b 	bl	8013350 <memset>
  if(uartHandle->Instance==USART1)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a3d      	ldr	r2, [pc, #244]	; (8002bd4 <HAL_UART_MspInit+0x120>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d136      	bne.n	8002b52 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aec:	f107 0318 	add.w	r3, r7, #24
 8002af0:	4618      	mov	r0, r3
 8002af2:	f005 fe75 	bl	80087e0 <HAL_RCCEx_PeriphCLKConfig>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002afc:	f7ff f948 	bl	8001d90 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b00:	4b35      	ldr	r3, [pc, #212]	; (8002bd8 <HAL_UART_MspInit+0x124>)
 8002b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b04:	4a34      	ldr	r2, [pc, #208]	; (8002bd8 <HAL_UART_MspInit+0x124>)
 8002b06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b0a:	6613      	str	r3, [r2, #96]	; 0x60
 8002b0c:	4b32      	ldr	r3, [pc, #200]	; (8002bd8 <HAL_UART_MspInit+0x124>)
 8002b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b18:	4b2f      	ldr	r3, [pc, #188]	; (8002bd8 <HAL_UART_MspInit+0x124>)
 8002b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1c:	4a2e      	ldr	r2, [pc, #184]	; (8002bd8 <HAL_UART_MspInit+0x124>)
 8002b1e:	f043 0304 	orr.w	r3, r3, #4
 8002b22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b24:	4b2c      	ldr	r3, [pc, #176]	; (8002bd8 <HAL_UART_MspInit+0x124>)
 8002b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002b30:	2330      	movs	r3, #48	; 0x30
 8002b32:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b34:	2302      	movs	r3, #2
 8002b36:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b40:	2307      	movs	r3, #7
 8002b42:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4824      	ldr	r0, [pc, #144]	; (8002bdc <HAL_UART_MspInit+0x128>)
 8002b4c:	f002 fbda 	bl	8005304 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002b50:	e03b      	b.n	8002bca <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART3)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a22      	ldr	r2, [pc, #136]	; (8002be0 <HAL_UART_MspInit+0x12c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d136      	bne.n	8002bca <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002b60:	2300      	movs	r3, #0
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b64:	f107 0318 	add.w	r3, r7, #24
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f005 fe39 	bl	80087e0 <HAL_RCCEx_PeriphCLKConfig>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8002b74:	f7ff f90c 	bl	8001d90 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b78:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <HAL_UART_MspInit+0x124>)
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7c:	4a16      	ldr	r2, [pc, #88]	; (8002bd8 <HAL_UART_MspInit+0x124>)
 8002b7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b82:	6593      	str	r3, [r2, #88]	; 0x58
 8002b84:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <HAL_UART_MspInit+0x124>)
 8002b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b90:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <HAL_UART_MspInit+0x124>)
 8002b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b94:	4a10      	ldr	r2, [pc, #64]	; (8002bd8 <HAL_UART_MspInit+0x124>)
 8002b96:	f043 0302 	orr.w	r3, r3, #2
 8002b9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b9c:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <HAL_UART_MspInit+0x124>)
 8002b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ba8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002bac:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002bba:	2307      	movs	r3, #7
 8002bbc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bbe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4807      	ldr	r0, [pc, #28]	; (8002be4 <HAL_UART_MspInit+0x130>)
 8002bc6:	f002 fb9d 	bl	8005304 <HAL_GPIO_Init>
}
 8002bca:	bf00      	nop
 8002bcc:	3780      	adds	r7, #128	; 0x80
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40013800 	.word	0x40013800
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	48000800 	.word	0x48000800
 8002be0:	40004800 	.word	0x40004800
 8002be4:	48000400 	.word	0x48000400

08002be8 <vTask_TCN75A>:
extern SemaphoreHandle_t xI2CMutex;
extern QueueHandle_t xTemperatureQueue;
TCN75A_HandleTypeDef hTCN75A1;


void vTask_TCN75A(void *pvParameters){
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*) pvParameters;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	60fb      	str	r3, [r7, #12]
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002bf4:	4b28      	ldr	r3, [pc, #160]	; (8002c98 <vTask_TCN75A+0xb0>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f00d fa81 	bl	8010104 <xQueueSemaphoreTake>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d109      	bne.n	8002c1c <vTask_TCN75A+0x34>
		printf("Init Task TCN75A...   ");
 8002c08:	4824      	ldr	r0, [pc, #144]	; (8002c9c <vTask_TCN75A+0xb4>)
 8002c0a:	f010 fa5b 	bl	80130c4 <iprintf>
		xSemaphoreGive(xUartMutex);
 8002c0e:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <vTask_TCN75A+0xb0>)
 8002c10:	6818      	ldr	r0, [r3, #0]
 8002c12:	2300      	movs	r3, #0
 8002c14:	2200      	movs	r2, #0
 8002c16:	2100      	movs	r1, #0
 8002c18:	f00c fffa 	bl	800fc10 <xQueueGenericSend>
	}
	TCN75A_Init(&hTCN75A1, hi2c);
 8002c1c:	68f9      	ldr	r1, [r7, #12]
 8002c1e:	4820      	ldr	r0, [pc, #128]	; (8002ca0 <vTask_TCN75A+0xb8>)
 8002c20:	f000 f846 	bl	8002cb0 <TCN75A_Init>
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002c24:	4b1c      	ldr	r3, [pc, #112]	; (8002c98 <vTask_TCN75A+0xb0>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f00d fa69 	bl	8010104 <xQueueSemaphoreTake>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d109      	bne.n	8002c4c <vTask_TCN75A+0x64>
		printf(" Done\r\n");
 8002c38:	481a      	ldr	r0, [pc, #104]	; (8002ca4 <vTask_TCN75A+0xbc>)
 8002c3a:	f010 faa9 	bl	8013190 <puts>
		xSemaphoreGive(xUartMutex);
 8002c3e:	4b16      	ldr	r3, [pc, #88]	; (8002c98 <vTask_TCN75A+0xb0>)
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	2300      	movs	r3, #0
 8002c44:	2200      	movs	r2, #0
 8002c46:	2100      	movs	r1, #0
 8002c48:	f00c ffe2 	bl	800fc10 <xQueueGenericSend>
	}
	vTaskDelay(1000);
 8002c4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c50:	f00d fdd6 	bl	8010800 <vTaskDelay>
	for(;;){
		TCN75A_Read_Temperature(&hTCN75A1);
 8002c54:	4812      	ldr	r0, [pc, #72]	; (8002ca0 <vTask_TCN75A+0xb8>)
 8002c56:	f000 f84d 	bl	8002cf4 <TCN75A_Read_Temperature>
		if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002c5a:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <vTask_TCN75A+0xb0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c62:	4618      	mov	r0, r3
 8002c64:	f00d fa4e 	bl	8010104 <xQueueSemaphoreTake>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d10e      	bne.n	8002c8c <vTask_TCN75A+0xa4>
//			printf("Temperature %2.2f°C\r\n",hTCN75A1.temperature);
			xSemaphoreGive(xUartMutex);
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <vTask_TCN75A+0xb0>)
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	2300      	movs	r3, #0
 8002c74:	2200      	movs	r2, #0
 8002c76:	2100      	movs	r1, #0
 8002c78:	f00c ffca 	bl	800fc10 <xQueueGenericSend>
			if(pdPASS == xQueueSend(xTemperatureQueue, &hTCN75A1.temperature, portMAX_DELAY)){
 8002c7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <vTask_TCN75A+0xc0>)
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	2300      	movs	r3, #0
 8002c82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c86:	4909      	ldr	r1, [pc, #36]	; (8002cac <vTask_TCN75A+0xc4>)
 8002c88:	f00c ffc2 	bl	800fc10 <xQueueGenericSend>
//				printf("Temperature transmit to fan controller\r\n");
			}

		}
		vTaskDelay(1000);
 8002c8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c90:	f00d fdb6 	bl	8010800 <vTaskDelay>
	for(;;){
 8002c94:	e7de      	b.n	8002c54 <vTask_TCN75A+0x6c>
 8002c96:	bf00      	nop
 8002c98:	200005d4 	.word	0x200005d4
 8002c9c:	080154b0 	.word	0x080154b0
 8002ca0:	20000934 	.word	0x20000934
 8002ca4:	080154c8 	.word	0x080154c8
 8002ca8:	200005dc 	.word	0x200005dc
 8002cac:	20000940 	.word	0x20000940

08002cb0 <TCN75A_Init>:
	}
}

void TCN75A_Init(TCN75A_HandleTypeDef* hTCN75A, I2C_HandleTypeDef* hi2c){
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
	hTCN75A->hi2c = hi2c;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	601a      	str	r2, [r3, #0]
	hTCN75A->I2C_addr = _TCN75A_I2C_ADDR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2248      	movs	r2, #72	; 0x48
 8002cc4:	711a      	strb	r2, [r3, #4]

	uint8_t config[2] = {_TCN75A_RP_CONFIG, _TCN75A_12BITS};
 8002cc6:	f246 0301 	movw	r3, #24577	; 0x6001
 8002cca:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(hTCN75A->hi2c, hTCN75A->I2C_addr<<1, config, 2, HAL_MAX_DELAY);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	791b      	ldrb	r3, [r3, #4]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	b299      	uxth	r1, r3
 8002cda:	f107 020c 	add.w	r2, r7, #12
 8002cde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	f002 fcd9 	bl	800569c <HAL_I2C_Master_Transmit>
}
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <TCN75A_Read_Temperature>:

void TCN75A_Read_Temperature(TCN75A_HandleTypeDef* hTCN75A){
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af04      	add	r7, sp, #16
 8002cfa:	6078      	str	r0, [r7, #4]
	uint8_t data[2] = {0x00, 0x00};
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	81bb      	strh	r3, [r7, #12]
	if(xSemaphoreTake(xI2CMutex, portMAX_DELAY)==pdTRUE){
 8002d00:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <TCN75A_Read_Temperature+0x90>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f00d f9fb 	bl	8010104 <xQueueSemaphoreTake>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d119      	bne.n	8002d48 <TCN75A_Read_Temperature+0x54>
		//HAL_I2C_Master_Transmit(hTCN75A->hi2c, hTCN75A->I2C_addr<<1, data, 1, HAL_MAX_DELAY);
		//HAL_I2C_Master_Receive(hTCN75A->hi2c, hTCN75A->I2C_addr<<1, data, 2, HAL_MAX_DELAY);
		HAL_I2C_Mem_Read(hTCN75A->hi2c, hTCN75A->I2C_addr<<1, _TCN75A_RP_TA, 1, data, 2, HAL_MAX_DELAY);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6818      	ldr	r0, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	791b      	ldrb	r3, [r3, #4]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	b299      	uxth	r1, r3
 8002d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d26:	9302      	str	r3, [sp, #8]
 8002d28:	2302      	movs	r3, #2
 8002d2a:	9301      	str	r3, [sp, #4]
 8002d2c:	f107 030c 	add.w	r3, r7, #12
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	2301      	movs	r3, #1
 8002d34:	2200      	movs	r2, #0
 8002d36:	f002 fda5 	bl	8005884 <HAL_I2C_Mem_Read>
		xSemaphoreGive(xI2CMutex);
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <TCN75A_Read_Temperature+0x90>)
 8002d3c:	6818      	ldr	r0, [r3, #0]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	2200      	movs	r2, #0
 8002d42:	2100      	movs	r1, #0
 8002d44:	f00c ff64 	bl	800fc10 <xQueueGenericSend>
	}
		hTCN75A->temperature_raw = (data[0]<<4)|(data[1]>>4);
 8002d48:	7b3b      	ldrb	r3, [r7, #12]
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	b21a      	sxth	r2, r3
 8002d4e:	7b7b      	ldrb	r3, [r7, #13]
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	b21b      	sxth	r3, r3
 8002d56:	4313      	orrs	r3, r2
 8002d58:	b21b      	sxth	r3, r3
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	811a      	strh	r2, [r3, #8]
		hTCN75A->temperature = (float)hTCN75A->temperature_raw / 16.0;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	891b      	ldrh	r3, [r3, #8]
 8002d64:	ee07 3a90 	vmov	s15, r3
 8002d68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d6c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002d70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	200005d8 	.word	0x200005d8

08002d88 <vTask_Break>:
#include "adc.h"

extern SemaphoreHandle_t xUartMutex;
BREAK_HandleTypeDef hbreak1;

void vTask_Break(void *pvParameters){
 8002d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d8c:	b08d      	sub	sp, #52	; 0x34
 8002d8e:	af06      	add	r7, sp, #24
 8002d90:	6078      	str	r0, [r7, #4]
	uint16_t VBus_raw;
	float Vin, VBus;
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002d92:	4b71      	ldr	r3, [pc, #452]	; (8002f58 <vTask_Break+0x1d0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f00d f9b2 	bl	8010104 <xQueueSemaphoreTake>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d109      	bne.n	8002dba <vTask_Break+0x32>
		printf("Init Break...         ");
 8002da6:	486d      	ldr	r0, [pc, #436]	; (8002f5c <vTask_Break+0x1d4>)
 8002da8:	f010 f98c 	bl	80130c4 <iprintf>
		xSemaphoreGive(xUartMutex);
 8002dac:	4b6a      	ldr	r3, [pc, #424]	; (8002f58 <vTask_Break+0x1d0>)
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	2300      	movs	r3, #0
 8002db2:	2200      	movs	r2, #0
 8002db4:	2100      	movs	r1, #0
 8002db6:	f00c ff2b 	bl	800fc10 <xQueueGenericSend>
	}
	Break_Init(&hbreak1, (TIM_HandleTypeDef*)pvParameters);
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4868      	ldr	r0, [pc, #416]	; (8002f60 <vTask_Break+0x1d8>)
 8002dbe:	f000 f8db 	bl	8002f78 <Break_Init>
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002dc2:	4b65      	ldr	r3, [pc, #404]	; (8002f58 <vTask_Break+0x1d0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f00d f99a 	bl	8010104 <xQueueSemaphoreTake>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d109      	bne.n	8002dea <vTask_Break+0x62>
		printf(" Done\r\n");
 8002dd6:	4863      	ldr	r0, [pc, #396]	; (8002f64 <vTask_Break+0x1dc>)
 8002dd8:	f010 f9da 	bl	8013190 <puts>
		xSemaphoreGive(xUartMutex);
 8002ddc:	4b5e      	ldr	r3, [pc, #376]	; (8002f58 <vTask_Break+0x1d0>)
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	2300      	movs	r3, #0
 8002de2:	2200      	movs	r2, #0
 8002de4:	2100      	movs	r1, #0
 8002de6:	f00c ff13 	bl	800fc10 <xQueueGenericSend>
	}

	for(;;){
		HAL_ADC_Start(&hadc4);
 8002dea:	485f      	ldr	r0, [pc, #380]	; (8002f68 <vTask_Break+0x1e0>)
 8002dec:	f001 f904 	bl	8003ff8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc4, HAL_MAX_DELAY);
 8002df0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002df4:	485c      	ldr	r0, [pc, #368]	; (8002f68 <vTask_Break+0x1e0>)
 8002df6:	f001 f9e3 	bl	80041c0 <HAL_ADC_PollForConversion>
		VBus_raw = HAL_ADC_GetValue(&hadc4);
 8002dfa:	485b      	ldr	r0, [pc, #364]	; (8002f68 <vTask_Break+0x1e0>)
 8002dfc:	f001 fae6 	bl	80043cc <HAL_ADC_GetValue>
 8002e00:	4603      	mov	r3, r0
 8002e02:	82fb      	strh	r3, [r7, #22]
		Vin = ((float)VBus_raw)*3.3/4096;
 8002e04:	8afb      	ldrh	r3, [r7, #22]
 8002e06:	ee07 3a90 	vmov	s15, r3
 8002e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e0e:	ee17 0a90 	vmov	r0, s15
 8002e12:	f7fd fbc1 	bl	8000598 <__aeabi_f2d>
 8002e16:	a34a      	add	r3, pc, #296	; (adr r3, 8002f40 <vTask_Break+0x1b8>)
 8002e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1c:	f7fd fc14 	bl	8000648 <__aeabi_dmul>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4610      	mov	r0, r2
 8002e26:	4619      	mov	r1, r3
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	4b4f      	ldr	r3, [pc, #316]	; (8002f6c <vTask_Break+0x1e4>)
 8002e2e:	f7fd fd35 	bl	800089c <__aeabi_ddiv>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4610      	mov	r0, r2
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f7fd fedd 	bl	8000bf8 <__aeabi_d2f>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	613b      	str	r3, [r7, #16]
		VBus = (Vin-2.56)/4*471;
 8002e42:	6938      	ldr	r0, [r7, #16]
 8002e44:	f7fd fba8 	bl	8000598 <__aeabi_f2d>
 8002e48:	a33f      	add	r3, pc, #252	; (adr r3, 8002f48 <vTask_Break+0x1c0>)
 8002e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4e:	f7fd fa43 	bl	80002d8 <__aeabi_dsub>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	4b44      	ldr	r3, [pc, #272]	; (8002f70 <vTask_Break+0x1e8>)
 8002e60:	f7fd fd1c 	bl	800089c <__aeabi_ddiv>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	a338      	add	r3, pc, #224	; (adr r3, 8002f50 <vTask_Break+0x1c8>)
 8002e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e72:	f7fd fbe9 	bl	8000648 <__aeabi_dmul>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f7fd febb 	bl	8000bf8 <__aeabi_d2f>
 8002e82:	4603      	mov	r3, r0
 8002e84:	60fb      	str	r3, [r7, #12]
		if(hbreak1.VBus_max_configured){
 8002e86:	4b36      	ldr	r3, [pc, #216]	; (8002f60 <vTask_Break+0x1d8>)
 8002e88:	7d1b      	ldrb	r3, [r3, #20]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d04c      	beq.n	8002f28 <vTask_Break+0x1a0>
			if(VBus > hbreak1.VBus_max){
 8002e8e:	4b34      	ldr	r3, [pc, #208]	; (8002f60 <vTask_Break+0x1d8>)
 8002e90:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e94:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea0:	dd06      	ble.n	8002eb0 <vTask_Break+0x128>
				__HAL_TIM_SET_COMPARE(hbreak1.htim, TIM_CHANNEL_1, 256);
 8002ea2:	4b2f      	ldr	r3, [pc, #188]	; (8002f60 <vTask_Break+0x1d8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eac:	635a      	str	r2, [r3, #52]	; 0x34
 8002eae:	e004      	b.n	8002eba <vTask_Break+0x132>
			}
			else{
				__HAL_TIM_SET_COMPARE(hbreak1.htim, TIM_CHANNEL_1, 0);
 8002eb0:	4b2b      	ldr	r3, [pc, #172]	; (8002f60 <vTask_Break+0x1d8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	635a      	str	r2, [r3, #52]	; 0x34
			//							__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, 256);
			//						}
			//						else{
			//							__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, 0);

			if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002eba:	4b27      	ldr	r3, [pc, #156]	; (8002f58 <vTask_Break+0x1d0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f00d f91e 	bl	8010104 <xQueueSemaphoreTake>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d131      	bne.n	8002f32 <vTask_Break+0x1aa>
				printf("Vbus 0x%4d; Vin %1.3f V; VBus = %2.2f V; Vref = %2.2f V; Vmax = %2.2f V\r\n", VBus_raw, Vin, VBus, hbreak1.VBus_ref, hbreak1.VBus_max);
 8002ece:	8afe      	ldrh	r6, [r7, #22]
 8002ed0:	6938      	ldr	r0, [r7, #16]
 8002ed2:	f7fd fb61 	bl	8000598 <__aeabi_f2d>
 8002ed6:	4682      	mov	sl, r0
 8002ed8:	468b      	mov	fp, r1
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f7fd fb5c 	bl	8000598 <__aeabi_f2d>
 8002ee0:	4604      	mov	r4, r0
 8002ee2:	460d      	mov	r5, r1
 8002ee4:	4b1e      	ldr	r3, [pc, #120]	; (8002f60 <vTask_Break+0x1d8>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd fb55 	bl	8000598 <__aeabi_f2d>
 8002eee:	4680      	mov	r8, r0
 8002ef0:	4689      	mov	r9, r1
 8002ef2:	4b1b      	ldr	r3, [pc, #108]	; (8002f60 <vTask_Break+0x1d8>)
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fd fb4e 	bl	8000598 <__aeabi_f2d>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002f04:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002f08:	e9cd 4500 	strd	r4, r5, [sp]
 8002f0c:	4652      	mov	r2, sl
 8002f0e:	465b      	mov	r3, fp
 8002f10:	4631      	mov	r1, r6
 8002f12:	4818      	ldr	r0, [pc, #96]	; (8002f74 <vTask_Break+0x1ec>)
 8002f14:	f010 f8d6 	bl	80130c4 <iprintf>
				xSemaphoreGive(xUartMutex);
 8002f18:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <vTask_Break+0x1d0>)
 8002f1a:	6818      	ldr	r0, [r3, #0]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2100      	movs	r1, #0
 8002f22:	f00c fe75 	bl	800fc10 <xQueueGenericSend>
 8002f26:	e004      	b.n	8002f32 <vTask_Break+0x1aa>
			}
		}
		else{
			__HAL_TIM_SET_COMPARE(hbreak1.htim, TIM_CHANNEL_1, 0);
 8002f28:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <vTask_Break+0x1d8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	635a      	str	r2, [r3, #52]	; 0x34

		}
		vTaskDelay(10);
 8002f32:	200a      	movs	r0, #10
 8002f34:	f00d fc64 	bl	8010800 <vTaskDelay>
		HAL_ADC_Start(&hadc4);
 8002f38:	e757      	b.n	8002dea <vTask_Break+0x62>
 8002f3a:	bf00      	nop
 8002f3c:	f3af 8000 	nop.w
 8002f40:	66666666 	.word	0x66666666
 8002f44:	400a6666 	.word	0x400a6666
 8002f48:	47ae147b 	.word	0x47ae147b
 8002f4c:	40047ae1 	.word	0x40047ae1
 8002f50:	00000000 	.word	0x00000000
 8002f54:	407d7000 	.word	0x407d7000
 8002f58:	200005d4 	.word	0x200005d4
 8002f5c:	080154d0 	.word	0x080154d0
 8002f60:	20000944 	.word	0x20000944
 8002f64:	080154e8 	.word	0x080154e8
 8002f68:	200004b0 	.word	0x200004b0
 8002f6c:	40b00000 	.word	0x40b00000
 8002f70:	40100000 	.word	0x40100000
 8002f74:	080154f0 	.word	0x080154f0

08002f78 <Break_Init>:
	}
}

void Break_Init(BREAK_HandleTypeDef* hbreak, TIM_HandleTypeDef* htim){
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
	hbreak->htim = htim;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	601a      	str	r2, [r3, #0]
	hbreak->Max_Pwm = __HAL_TIM_GET_AUTORELOAD(htim);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	809a      	strh	r2, [r3, #4]
	hbreak->Pwm = 0;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	80da      	strh	r2, [r3, #6]
	hbreak->Channel = BREAK_CHANNEL;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	721a      	strb	r2, [r3, #8]
	hbreak->VBus_max_configured = 0;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	751a      	strb	r2, [r3, #20]
	Break_Set_DutyCycle(hbreak, 0);
 8002fa6:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8002fc8 <Break_Init+0x50>
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f80e 	bl	8002fcc <Break_Set_DutyCycle>
	HAL_TIM_PWM_Start(hbreak->htim, hbreak->Channel);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	7a1b      	ldrb	r3, [r3, #8]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4610      	mov	r0, r2
 8002fbc:	f005 ff90 	bl	8008ee0 <HAL_TIM_PWM_Start>
}
 8002fc0:	bf00      	nop
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	00000000 	.word	0x00000000

08002fcc <Break_Set_DutyCycle>:

void Break_Set_DutyCycle(BREAK_HandleTypeDef* hbreak, float dutyCycle){
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	ed87 0a00 	vstr	s0, [r7]
	hbreak->Pwm = (uint16_t)(dutyCycle*((float)hbreak->Max_Pwm));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	889b      	ldrh	r3, [r3, #4]
 8002fdc:	ee07 3a90 	vmov	s15, r3
 8002fe0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fe4:	edd7 7a00 	vldr	s15, [r7]
 8002fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ff0:	ee17 3a90 	vmov	r3, s15
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	80da      	strh	r2, [r3, #6]
	__HAL_TIM_SET_COMPARE(hbreak->htim, hbreak->Channel, hbreak->Pwm);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	7a1b      	ldrb	r3, [r3, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <Break_Set_DutyCycle+0x44>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	88da      	ldrh	r2, [r3, #6]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800300e:	e036      	b.n	800307e <Break_Set_DutyCycle+0xb2>
	__HAL_TIM_SET_COMPARE(hbreak->htim, hbreak->Channel, hbreak->Pwm);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	7a1b      	ldrb	r3, [r3, #8]
 8003014:	2b04      	cmp	r3, #4
 8003016:	d107      	bne.n	8003028 <Break_Set_DutyCycle+0x5c>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	88d9      	ldrh	r1, [r3, #6]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	460b      	mov	r3, r1
 8003024:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003026:	e02a      	b.n	800307e <Break_Set_DutyCycle+0xb2>
	__HAL_TIM_SET_COMPARE(hbreak->htim, hbreak->Channel, hbreak->Pwm);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	7a1b      	ldrb	r3, [r3, #8]
 800302c:	2b08      	cmp	r3, #8
 800302e:	d107      	bne.n	8003040 <Break_Set_DutyCycle+0x74>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	88d9      	ldrh	r1, [r3, #6]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	460b      	mov	r3, r1
 800303c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800303e:	e01e      	b.n	800307e <Break_Set_DutyCycle+0xb2>
	__HAL_TIM_SET_COMPARE(hbreak->htim, hbreak->Channel, hbreak->Pwm);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	7a1b      	ldrb	r3, [r3, #8]
 8003044:	2b0c      	cmp	r3, #12
 8003046:	d107      	bne.n	8003058 <Break_Set_DutyCycle+0x8c>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	88d9      	ldrh	r1, [r3, #6]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	460b      	mov	r3, r1
 8003054:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003056:	e012      	b.n	800307e <Break_Set_DutyCycle+0xb2>
	__HAL_TIM_SET_COMPARE(hbreak->htim, hbreak->Channel, hbreak->Pwm);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	7a1b      	ldrb	r3, [r3, #8]
 800305c:	2b10      	cmp	r3, #16
 800305e:	d107      	bne.n	8003070 <Break_Set_DutyCycle+0xa4>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	88d9      	ldrh	r1, [r3, #6]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	460b      	mov	r3, r1
 800306c:	6493      	str	r3, [r2, #72]	; 0x48
}
 800306e:	e006      	b.n	800307e <Break_Set_DutyCycle+0xb2>
	__HAL_TIM_SET_COMPARE(hbreak->htim, hbreak->Channel, hbreak->Pwm);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	88d9      	ldrh	r1, [r3, #6]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	460b      	mov	r3, r1
 800307c:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	0000      	movs	r0, r0
 800308c:	0000      	movs	r0, r0
	...

08003090 <vTask_Button>:
extern QueueHandle_t xExtIQueue;
extern TIM_HandleTypeDef htim17;
extern BREAK_HandleTypeDef hbreak1;
uint8_t break_state = 0;

void vTask_Button(void *pvParameters){
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
	Button_HandleTypeDef button;
	uint16_t VBus_raw;
	float Vin, VBus;

	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8003098:	4ba5      	ldr	r3, [pc, #660]	; (8003330 <vTask_Button+0x2a0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030a0:	4618      	mov	r0, r3
 80030a2:	f00d f82f 	bl	8010104 <xQueueSemaphoreTake>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d109      	bne.n	80030c0 <vTask_Button+0x30>
		printf("Init Button...         ");
 80030ac:	48a1      	ldr	r0, [pc, #644]	; (8003334 <vTask_Button+0x2a4>)
 80030ae:	f010 f809 	bl	80130c4 <iprintf>
		xSemaphoreGive(xUartMutex);
 80030b2:	4b9f      	ldr	r3, [pc, #636]	; (8003330 <vTask_Button+0x2a0>)
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	2300      	movs	r3, #0
 80030b8:	2200      	movs	r2, #0
 80030ba:	2100      	movs	r1, #0
 80030bc:	f00c fda8 	bl	800fc10 <xQueueGenericSend>
	}
	Button_Init();
 80030c0:	f000 f954 	bl	800336c <Button_Init>
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 80030c4:	4b9a      	ldr	r3, [pc, #616]	; (8003330 <vTask_Button+0x2a0>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030cc:	4618      	mov	r0, r3
 80030ce:	f00d f819 	bl	8010104 <xQueueSemaphoreTake>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d109      	bne.n	80030ec <vTask_Button+0x5c>
		printf("Done\r\n");
 80030d8:	4897      	ldr	r0, [pc, #604]	; (8003338 <vTask_Button+0x2a8>)
 80030da:	f010 f859 	bl	8013190 <puts>
		xSemaphoreGive(xUartMutex);
 80030de:	4b94      	ldr	r3, [pc, #592]	; (8003330 <vTask_Button+0x2a0>)
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	2300      	movs	r3, #0
 80030e4:	2200      	movs	r2, #0
 80030e6:	2100      	movs	r1, #0
 80030e8:	f00c fd92 	bl	800fc10 <xQueueGenericSend>
	}

	for(;;){
		if(pdPASS == xQueueReceive(xExtIQueue, &button, portMAX_DELAY)){
 80030ec:	4b93      	ldr	r3, [pc, #588]	; (800333c <vTask_Button+0x2ac>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f107 010c 	add.w	r1, r7, #12
 80030f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030f8:	4618      	mov	r0, r3
 80030fa:	f00c ff23 	bl	800ff44 <xQueueReceive>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b01      	cmp	r3, #1
 8003102:	f040 8101 	bne.w	8003308 <vTask_Button+0x278>
			switch(button.pin){
 8003106:	8a3b      	ldrh	r3, [r7, #16]
 8003108:	2b80      	cmp	r3, #128	; 0x80
 800310a:	f000 80c8 	beq.w	800329e <vTask_Button+0x20e>
 800310e:	2b80      	cmp	r3, #128	; 0x80
 8003110:	f300 80ef 	bgt.w	80032f2 <vTask_Button+0x262>
 8003114:	2b40      	cmp	r3, #64	; 0x40
 8003116:	f000 80ad 	beq.w	8003274 <vTask_Button+0x1e4>
 800311a:	2b40      	cmp	r3, #64	; 0x40
 800311c:	f300 80e9 	bgt.w	80032f2 <vTask_Button+0x262>
 8003120:	2b20      	cmp	r3, #32
 8003122:	f000 80d1 	beq.w	80032c8 <vTask_Button+0x238>
 8003126:	2b20      	cmp	r3, #32
 8003128:	f300 80e3 	bgt.w	80032f2 <vTask_Button+0x262>
 800312c:	2b04      	cmp	r3, #4
 800312e:	d002      	beq.n	8003136 <vTask_Button+0xa6>
 8003130:	2b10      	cmp	r3, #16
 8003132:	d020      	beq.n	8003176 <vTask_Button+0xe6>
					printf("BTN_ENC\r\n");
					xSemaphoreGive(xUartMutex);
				}
				break;
			default:
				break;
 8003134:	e0dd      	b.n	80032f2 <vTask_Button+0x262>
				HAL_GPIO_TogglePin(Pwr_Enable_U_GPIO_Port, Pwr_Enable_U_Pin);
 8003136:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800313a:	4881      	ldr	r0, [pc, #516]	; (8003340 <vTask_Button+0x2b0>)
 800313c:	f002 fa7c 	bl	8005638 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(Pwr_Enable_V_GPIO_Port, Pwr_Enable_V_Pin);
 8003140:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003144:	487e      	ldr	r0, [pc, #504]	; (8003340 <vTask_Button+0x2b0>)
 8003146:	f002 fa77 	bl	8005638 <HAL_GPIO_TogglePin>
				if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 800314a:	4b79      	ldr	r3, [pc, #484]	; (8003330 <vTask_Button+0x2a0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003152:	4618      	mov	r0, r3
 8003154:	f00c ffd6 	bl	8010104 <xQueueSemaphoreTake>
 8003158:	4603      	mov	r3, r0
 800315a:	2b01      	cmp	r3, #1
 800315c:	f040 80cb 	bne.w	80032f6 <vTask_Button+0x266>
					printf("BTN1\r\n");
 8003160:	4878      	ldr	r0, [pc, #480]	; (8003344 <vTask_Button+0x2b4>)
 8003162:	f010 f815 	bl	8013190 <puts>
					xSemaphoreGive(xUartMutex);
 8003166:	4b72      	ldr	r3, [pc, #456]	; (8003330 <vTask_Button+0x2a0>)
 8003168:	6818      	ldr	r0, [r3, #0]
 800316a:	2300      	movs	r3, #0
 800316c:	2200      	movs	r2, #0
 800316e:	2100      	movs	r1, #0
 8003170:	f00c fd4e 	bl	800fc10 <xQueueGenericSend>
				break;
 8003174:	e0bf      	b.n	80032f6 <vTask_Button+0x266>
				__HAL_TIM_SET_COMPARE(hbreak1.htim, TIM_CHANNEL_1, 0);
 8003176:	4b74      	ldr	r3, [pc, #464]	; (8003348 <vTask_Button+0x2b8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2200      	movs	r2, #0
 800317e:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_ADC_Start(&hadc4);
 8003180:	4872      	ldr	r0, [pc, #456]	; (800334c <vTask_Button+0x2bc>)
 8003182:	f000 ff39 	bl	8003ff8 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc4, HAL_MAX_DELAY);
 8003186:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800318a:	4870      	ldr	r0, [pc, #448]	; (800334c <vTask_Button+0x2bc>)
 800318c:	f001 f818 	bl	80041c0 <HAL_ADC_PollForConversion>
				VBus_raw = HAL_ADC_GetValue(&hadc4);
 8003190:	486e      	ldr	r0, [pc, #440]	; (800334c <vTask_Button+0x2bc>)
 8003192:	f001 f91b 	bl	80043cc <HAL_ADC_GetValue>
 8003196:	4603      	mov	r3, r0
 8003198:	83fb      	strh	r3, [r7, #30]
				Vin = ((float)VBus_raw)*3.3/4096;
 800319a:	8bfb      	ldrh	r3, [r7, #30]
 800319c:	ee07 3a90 	vmov	s15, r3
 80031a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a4:	ee17 0a90 	vmov	r0, s15
 80031a8:	f7fd f9f6 	bl	8000598 <__aeabi_f2d>
 80031ac:	a35a      	add	r3, pc, #360	; (adr r3, 8003318 <vTask_Button+0x288>)
 80031ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b2:	f7fd fa49 	bl	8000648 <__aeabi_dmul>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4610      	mov	r0, r2
 80031bc:	4619      	mov	r1, r3
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	4b63      	ldr	r3, [pc, #396]	; (8003350 <vTask_Button+0x2c0>)
 80031c4:	f7fd fb6a 	bl	800089c <__aeabi_ddiv>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4610      	mov	r0, r2
 80031ce:	4619      	mov	r1, r3
 80031d0:	f7fd fd12 	bl	8000bf8 <__aeabi_d2f>
 80031d4:	4603      	mov	r3, r0
 80031d6:	61bb      	str	r3, [r7, #24]
				VBus = (Vin-2.56)/4*471;
 80031d8:	69b8      	ldr	r0, [r7, #24]
 80031da:	f7fd f9dd 	bl	8000598 <__aeabi_f2d>
 80031de:	a350      	add	r3, pc, #320	; (adr r3, 8003320 <vTask_Button+0x290>)
 80031e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e4:	f7fd f878 	bl	80002d8 <__aeabi_dsub>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4610      	mov	r0, r2
 80031ee:	4619      	mov	r1, r3
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	4b57      	ldr	r3, [pc, #348]	; (8003354 <vTask_Button+0x2c4>)
 80031f6:	f7fd fb51 	bl	800089c <__aeabi_ddiv>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	4610      	mov	r0, r2
 8003200:	4619      	mov	r1, r3
 8003202:	a349      	add	r3, pc, #292	; (adr r3, 8003328 <vTask_Button+0x298>)
 8003204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003208:	f7fd fa1e 	bl	8000648 <__aeabi_dmul>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	f7fd fcf0 	bl	8000bf8 <__aeabi_d2f>
 8003218:	4603      	mov	r3, r0
 800321a:	617b      	str	r3, [r7, #20]
				hbreak1.VBus_ref = VBus;
 800321c:	4a4a      	ldr	r2, [pc, #296]	; (8003348 <vTask_Button+0x2b8>)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	60d3      	str	r3, [r2, #12]
				hbreak1.VBus_max = VBus*BREAK_COEFF;
 8003222:	6978      	ldr	r0, [r7, #20]
 8003224:	f7fd f9b8 	bl	8000598 <__aeabi_f2d>
 8003228:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800322c:	4b4a      	ldr	r3, [pc, #296]	; (8003358 <vTask_Button+0x2c8>)
 800322e:	f7fd fa0b 	bl	8000648 <__aeabi_dmul>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4610      	mov	r0, r2
 8003238:	4619      	mov	r1, r3
 800323a:	f7fd fcdd 	bl	8000bf8 <__aeabi_d2f>
 800323e:	4603      	mov	r3, r0
 8003240:	4a41      	ldr	r2, [pc, #260]	; (8003348 <vTask_Button+0x2b8>)
 8003242:	6113      	str	r3, [r2, #16]
				hbreak1.VBus_max_configured = 1;
 8003244:	4b40      	ldr	r3, [pc, #256]	; (8003348 <vTask_Button+0x2b8>)
 8003246:	2201      	movs	r2, #1
 8003248:	751a      	strb	r2, [r3, #20]
				if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 800324a:	4b39      	ldr	r3, [pc, #228]	; (8003330 <vTask_Button+0x2a0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003252:	4618      	mov	r0, r3
 8003254:	f00c ff56 	bl	8010104 <xQueueSemaphoreTake>
 8003258:	4603      	mov	r3, r0
 800325a:	2b01      	cmp	r3, #1
 800325c:	d14d      	bne.n	80032fa <vTask_Button+0x26a>
					printf("BTN2\r\n");
 800325e:	483f      	ldr	r0, [pc, #252]	; (800335c <vTask_Button+0x2cc>)
 8003260:	f00f ff96 	bl	8013190 <puts>
					xSemaphoreGive(xUartMutex);
 8003264:	4b32      	ldr	r3, [pc, #200]	; (8003330 <vTask_Button+0x2a0>)
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	2300      	movs	r3, #0
 800326a:	2200      	movs	r2, #0
 800326c:	2100      	movs	r1, #0
 800326e:	f00c fccf 	bl	800fc10 <xQueueGenericSend>
				break;
 8003272:	e042      	b.n	80032fa <vTask_Button+0x26a>
				if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8003274:	4b2e      	ldr	r3, [pc, #184]	; (8003330 <vTask_Button+0x2a0>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800327c:	4618      	mov	r0, r3
 800327e:	f00c ff41 	bl	8010104 <xQueueSemaphoreTake>
 8003282:	4603      	mov	r3, r0
 8003284:	2b01      	cmp	r3, #1
 8003286:	d13a      	bne.n	80032fe <vTask_Button+0x26e>
					printf("BTN3\r\n");
 8003288:	4835      	ldr	r0, [pc, #212]	; (8003360 <vTask_Button+0x2d0>)
 800328a:	f00f ff81 	bl	8013190 <puts>
					xSemaphoreGive(xUartMutex);
 800328e:	4b28      	ldr	r3, [pc, #160]	; (8003330 <vTask_Button+0x2a0>)
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	2300      	movs	r3, #0
 8003294:	2200      	movs	r2, #0
 8003296:	2100      	movs	r1, #0
 8003298:	f00c fcba 	bl	800fc10 <xQueueGenericSend>
				break;
 800329c:	e02f      	b.n	80032fe <vTask_Button+0x26e>
				if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 800329e:	4b24      	ldr	r3, [pc, #144]	; (8003330 <vTask_Button+0x2a0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032a6:	4618      	mov	r0, r3
 80032a8:	f00c ff2c 	bl	8010104 <xQueueSemaphoreTake>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d127      	bne.n	8003302 <vTask_Button+0x272>
					printf("BTN4\r\n");
 80032b2:	482c      	ldr	r0, [pc, #176]	; (8003364 <vTask_Button+0x2d4>)
 80032b4:	f00f ff6c 	bl	8013190 <puts>
					xSemaphoreGive(xUartMutex);
 80032b8:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <vTask_Button+0x2a0>)
 80032ba:	6818      	ldr	r0, [r3, #0]
 80032bc:	2300      	movs	r3, #0
 80032be:	2200      	movs	r2, #0
 80032c0:	2100      	movs	r1, #0
 80032c2:	f00c fca5 	bl	800fc10 <xQueueGenericSend>
				break;
 80032c6:	e01c      	b.n	8003302 <vTask_Button+0x272>
				if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 80032c8:	4b19      	ldr	r3, [pc, #100]	; (8003330 <vTask_Button+0x2a0>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032d0:	4618      	mov	r0, r3
 80032d2:	f00c ff17 	bl	8010104 <xQueueSemaphoreTake>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d114      	bne.n	8003306 <vTask_Button+0x276>
					printf("BTN_ENC\r\n");
 80032dc:	4822      	ldr	r0, [pc, #136]	; (8003368 <vTask_Button+0x2d8>)
 80032de:	f00f ff57 	bl	8013190 <puts>
					xSemaphoreGive(xUartMutex);
 80032e2:	4b13      	ldr	r3, [pc, #76]	; (8003330 <vTask_Button+0x2a0>)
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	2300      	movs	r3, #0
 80032e8:	2200      	movs	r2, #0
 80032ea:	2100      	movs	r1, #0
 80032ec:	f00c fc90 	bl	800fc10 <xQueueGenericSend>
				break;
 80032f0:	e009      	b.n	8003306 <vTask_Button+0x276>
				break;
 80032f2:	bf00      	nop
 80032f4:	e008      	b.n	8003308 <vTask_Button+0x278>
				break;
 80032f6:	bf00      	nop
 80032f8:	e006      	b.n	8003308 <vTask_Button+0x278>
				break;
 80032fa:	bf00      	nop
 80032fc:	e004      	b.n	8003308 <vTask_Button+0x278>
				break;
 80032fe:	bf00      	nop
 8003300:	e002      	b.n	8003308 <vTask_Button+0x278>
				break;
 8003302:	bf00      	nop
 8003304:	e000      	b.n	8003308 <vTask_Button+0x278>
				break;
 8003306:	bf00      	nop
			}
		}

		vTaskDelay(1000);
 8003308:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800330c:	f00d fa78 	bl	8010800 <vTaskDelay>
		if(pdPASS == xQueueReceive(xExtIQueue, &button, portMAX_DELAY)){
 8003310:	e6ec      	b.n	80030ec <vTask_Button+0x5c>
 8003312:	bf00      	nop
 8003314:	f3af 8000 	nop.w
 8003318:	66666666 	.word	0x66666666
 800331c:	400a6666 	.word	0x400a6666
 8003320:	47ae147b 	.word	0x47ae147b
 8003324:	40047ae1 	.word	0x40047ae1
 8003328:	00000000 	.word	0x00000000
 800332c:	407d7000 	.word	0x407d7000
 8003330:	200005d4 	.word	0x200005d4
 8003334:	0801553c 	.word	0x0801553c
 8003338:	08015554 	.word	0x08015554
 800333c:	200005e0 	.word	0x200005e0
 8003340:	48000800 	.word	0x48000800
 8003344:	0801555c 	.word	0x0801555c
 8003348:	20000944 	.word	0x20000944
 800334c:	200004b0 	.word	0x200004b0
 8003350:	40b00000 	.word	0x40b00000
 8003354:	40100000 	.word	0x40100000
 8003358:	3ff33333 	.word	0x3ff33333
 800335c:	08015564 	.word	0x08015564
 8003360:	0801556c 	.word	0x0801556c
 8003364:	08015574 	.word	0x08015574
 8003368:	0801557c 	.word	0x0801557c

0800336c <Button_Init>:
	}
}

void Button_Init(){
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Pwr_Enable_U_GPIO_Port, Pwr_Enable_U_Pin, RESET);
 8003370:	2200      	movs	r2, #0
 8003372:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003376:	4808      	ldr	r0, [pc, #32]	; (8003398 <Button_Init+0x2c>)
 8003378:	f002 f946 	bl	8005608 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Pwr_Enable_V_GPIO_Port, Pwr_Enable_V_Pin, RESET);
 800337c:	2200      	movs	r2, #0
 800337e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003382:	4805      	ldr	r0, [pc, #20]	; (8003398 <Button_Init+0x2c>)
 8003384:	f002 f940 	bl	8005608 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Pwr_Enable_W_GPIO_Port, Pwr_Enable_W_Pin, RESET);
 8003388:	2200      	movs	r2, #0
 800338a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800338e:	4802      	ldr	r0, [pc, #8]	; (8003398 <Button_Init+0x2c>)
 8003390:	f002 f93a 	bl	8005608 <HAL_GPIO_WritePin>
}
 8003394:	bf00      	nop
 8003396:	bd80      	pop	{r7, pc}
 8003398:	48000800 	.word	0x48000800

0800339c <vTask_Fan>:
#include "semphr.h"

extern SemaphoreHandle_t xUartMutex;
extern QueueHandle_t xTemperatureQueue;

void vTask_Fan(void *pvParameters){
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
	FAN_HandleTypeDef hfan1;
	float temperature;
	float speed = 0;
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 80033aa:	4b30      	ldr	r3, [pc, #192]	; (800346c <vTask_Fan+0xd0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033b2:	4618      	mov	r0, r3
 80033b4:	f00c fea6 	bl	8010104 <xQueueSemaphoreTake>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d109      	bne.n	80033d2 <vTask_Fan+0x36>
		printf("Init Fan...           ");
 80033be:	482c      	ldr	r0, [pc, #176]	; (8003470 <vTask_Fan+0xd4>)
 80033c0:	f00f fe80 	bl	80130c4 <iprintf>
		xSemaphoreGive(xUartMutex);
 80033c4:	4b29      	ldr	r3, [pc, #164]	; (800346c <vTask_Fan+0xd0>)
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	2300      	movs	r3, #0
 80033ca:	2200      	movs	r2, #0
 80033cc:	2100      	movs	r1, #0
 80033ce:	f00c fc1f 	bl	800fc10 <xQueueGenericSend>
	}
	Fan_Init(&hfan1, (TIM_HandleTypeDef*)pvParameters);
 80033d2:	f107 0310 	add.w	r3, r7, #16
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 f84f 	bl	800347c <Fan_Init>
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 80033de:	4b23      	ldr	r3, [pc, #140]	; (800346c <vTask_Fan+0xd0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033e6:	4618      	mov	r0, r3
 80033e8:	f00c fe8c 	bl	8010104 <xQueueSemaphoreTake>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d109      	bne.n	8003406 <vTask_Fan+0x6a>
		printf(" Done\r\n");
 80033f2:	4820      	ldr	r0, [pc, #128]	; (8003474 <vTask_Fan+0xd8>)
 80033f4:	f00f fecc 	bl	8013190 <puts>
		xSemaphoreGive(xUartMutex);
 80033f8:	4b1c      	ldr	r3, [pc, #112]	; (800346c <vTask_Fan+0xd0>)
 80033fa:	6818      	ldr	r0, [r3, #0]
 80033fc:	2300      	movs	r3, #0
 80033fe:	2200      	movs	r2, #0
 8003400:	2100      	movs	r1, #0
 8003402:	f00c fc05 	bl	800fc10 <xQueueGenericSend>
	}

	for(;;){
		if(pdPASS == xQueueReceive(xTemperatureQueue, &temperature, portMAX_DELAY)){
 8003406:	4b1c      	ldr	r3, [pc, #112]	; (8003478 <vTask_Fan+0xdc>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f107 010c 	add.w	r1, r7, #12
 800340e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003412:	4618      	mov	r0, r3
 8003414:	f00c fd96 	bl	800ff44 <xQueueReceive>
 8003418:	4603      	mov	r3, r0
 800341a:	2b01      	cmp	r3, #1
 800341c:	d120      	bne.n	8003460 <vTask_Fan+0xc4>
			speed = (temperature > 30) ? 1 : ((temperature < 29) ? 0 : speed);
 800341e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003422:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003426:	eef4 7ac7 	vcmpe.f32	s15, s14
 800342a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800342e:	dd02      	ble.n	8003436 <vTask_Fan+0x9a>
 8003430:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003434:	e00c      	b.n	8003450 <vTask_Fan+0xb4>
 8003436:	edd7 7a03 	vldr	s15, [r7, #12]
 800343a:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 800343e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003446:	d502      	bpl.n	800344e <vTask_Fan+0xb2>
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	e000      	b.n	8003450 <vTask_Fan+0xb4>
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	61fb      	str	r3, [r7, #28]
			Fan_Set_Speed(&hfan1, speed);
 8003452:	f107 0310 	add.w	r3, r7, #16
 8003456:	ed97 0a07 	vldr	s0, [r7, #28]
 800345a:	4618      	mov	r0, r3
 800345c:	f000 f836 	bl	80034cc <Fan_Set_Speed>
		}
		vTaskDelay(1000);
 8003460:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003464:	f00d f9cc 	bl	8010800 <vTaskDelay>
		if(pdPASS == xQueueReceive(xTemperatureQueue, &temperature, portMAX_DELAY)){
 8003468:	e7cd      	b.n	8003406 <vTask_Fan+0x6a>
 800346a:	bf00      	nop
 800346c:	200005d4 	.word	0x200005d4
 8003470:	08015588 	.word	0x08015588
 8003474:	080155a0 	.word	0x080155a0
 8003478:	200005dc 	.word	0x200005dc

0800347c <Fan_Init>:
	}
}

void Fan_Init(FAN_HandleTypeDef* hfan, TIM_HandleTypeDef* htim){
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
	hfan->htim = htim;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	601a      	str	r2, [r3, #0]
	hfan->Max_Pwm = __HAL_TIM_GET_AUTORELOAD(htim);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	b29a      	uxth	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	809a      	strh	r2, [r3, #4]
	hfan->Pwm = 0;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	80da      	strh	r2, [r3, #6]
	hfan->Channel = FAN_CHANNEL;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	721a      	strb	r2, [r3, #8]
	Fan_Set_Speed(hfan, 0);
 80034a4:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80034c8 <Fan_Init+0x4c>
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f80f 	bl	80034cc <Fan_Set_Speed>
	HAL_TIM_PWM_Start(hfan->htim, hfan->Channel);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	7a1b      	ldrb	r3, [r3, #8]
 80034b6:	4619      	mov	r1, r3
 80034b8:	4610      	mov	r0, r2
 80034ba:	f005 fd11 	bl	8008ee0 <HAL_TIM_PWM_Start>
}
 80034be:	bf00      	nop
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	00000000 	.word	0x00000000

080034cc <Fan_Set_Speed>:

void Fan_Set_Speed(FAN_HandleTypeDef* hfan, float speed){
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	ed87 0a00 	vstr	s0, [r7]
	hfan->Pwm = (uint16_t)(speed*((float)hfan->Max_Pwm));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	889b      	ldrh	r3, [r3, #4]
 80034dc:	ee07 3a90 	vmov	s15, r3
 80034e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034e4:	edd7 7a00 	vldr	s15, [r7]
 80034e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034f0:	ee17 3a90 	vmov	r3, s15
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	80da      	strh	r2, [r3, #6]
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	7a1b      	ldrb	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <Fan_Set_Speed+0x44>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	88da      	ldrh	r2, [r3, #6]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800350e:	e036      	b.n	800357e <Fan_Set_Speed+0xb2>
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	7a1b      	ldrb	r3, [r3, #8]
 8003514:	2b04      	cmp	r3, #4
 8003516:	d107      	bne.n	8003528 <Fan_Set_Speed+0x5c>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	88d9      	ldrh	r1, [r3, #6]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	460b      	mov	r3, r1
 8003524:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003526:	e02a      	b.n	800357e <Fan_Set_Speed+0xb2>
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	7a1b      	ldrb	r3, [r3, #8]
 800352c:	2b08      	cmp	r3, #8
 800352e:	d107      	bne.n	8003540 <Fan_Set_Speed+0x74>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	88d9      	ldrh	r1, [r3, #6]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	460b      	mov	r3, r1
 800353c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800353e:	e01e      	b.n	800357e <Fan_Set_Speed+0xb2>
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	7a1b      	ldrb	r3, [r3, #8]
 8003544:	2b0c      	cmp	r3, #12
 8003546:	d107      	bne.n	8003558 <Fan_Set_Speed+0x8c>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	88d9      	ldrh	r1, [r3, #6]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	460b      	mov	r3, r1
 8003554:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003556:	e012      	b.n	800357e <Fan_Set_Speed+0xb2>
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	7a1b      	ldrb	r3, [r3, #8]
 800355c:	2b10      	cmp	r3, #16
 800355e:	d107      	bne.n	8003570 <Fan_Set_Speed+0xa4>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	88d9      	ldrh	r1, [r3, #6]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	460b      	mov	r3, r1
 800356c:	6493      	str	r3, [r2, #72]	; 0x48
}
 800356e:	e006      	b.n	800357e <Fan_Set_Speed+0xb2>
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	88d9      	ldrh	r1, [r3, #6]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	460b      	mov	r3, r1
 800357c:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
	...

0800358c <vTask_LED>:
 *  Created on: Aug 1, 2023
 *      Author: nicolas
 */
#include "mylibs/led.h"

void vTask_LED(void *pvParameters){
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
	uint8_t led = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	73fb      	strb	r3, [r7, #15]
	uint8_t dir = 1;
 8003598:	2301      	movs	r3, #1
 800359a:	73bb      	strb	r3, [r7, #14]
	printf("Init LED...           ");
 800359c:	4814      	ldr	r0, [pc, #80]	; (80035f0 <vTask_LED+0x64>)
 800359e:	f00f fd91 	bl	80130c4 <iprintf>
	LED_Init();
 80035a2:	f000 f829 	bl	80035f8 <LED_Init>
	printf(" Done\r\n");
 80035a6:	4813      	ldr	r0, [pc, #76]	; (80035f4 <vTask_LED+0x68>)
 80035a8:	f00f fdf2 	bl	8013190 <puts>
	for(;;){
		LED_Write(led);
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 f82a 	bl	8003608 <LED_Write>
		if(dir){
 80035b4:	7bbb      	ldrb	r3, [r7, #14]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <vTask_LED+0x44>
			led = 2*led+1;
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	3301      	adds	r3, #1
 80035c2:	73fb      	strb	r3, [r7, #15]
			if(led==0x0F) dir = 0;
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
 80035c6:	2b0f      	cmp	r3, #15
 80035c8:	d10d      	bne.n	80035e6 <vTask_LED+0x5a>
 80035ca:	2300      	movs	r3, #0
 80035cc:	73bb      	strb	r3, [r7, #14]
 80035ce:	e00a      	b.n	80035e6 <vTask_LED+0x5a>
		}
		else{
			led = (led-1)/2;
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	0fda      	lsrs	r2, r3, #31
 80035d6:	4413      	add	r3, r2
 80035d8:	105b      	asrs	r3, r3, #1
 80035da:	73fb      	strb	r3, [r7, #15]
			if(led==0x00) dir = 1;
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <vTask_LED+0x5a>
 80035e2:	2301      	movs	r3, #1
 80035e4:	73bb      	strb	r3, [r7, #14]
		}
		vTaskDelay(100);
 80035e6:	2064      	movs	r0, #100	; 0x64
 80035e8:	f00d f90a 	bl	8010800 <vTaskDelay>
	for(;;){
 80035ec:	e7de      	b.n	80035ac <vTask_LED+0x20>
 80035ee:	bf00      	nop
 80035f0:	080155a8 	.word	0x080155a8
 80035f4:	080155c0 	.word	0x080155c0

080035f8 <LED_Init>:
	}
}

void LED_Init(){
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0

}
 80035fc:	bf00      	nop
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
	...

08003608 <LED_Write>:

void LED_Write(uint8_t leds){
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(USR_LED_1_GPIO_Port, USR_LED_1_Pin, (leds>>0)&1);
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	b2db      	uxtb	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003620:	4815      	ldr	r0, [pc, #84]	; (8003678 <LED_Write+0x70>)
 8003622:	f001 fff1 	bl	8005608 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USR_LED_2_GPIO_Port, USR_LED_2_Pin, (leds>>1)&1);
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	085b      	lsrs	r3, r3, #1
 800362a:	b2db      	uxtb	r3, r3
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	b2db      	uxtb	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003638:	480f      	ldr	r0, [pc, #60]	; (8003678 <LED_Write+0x70>)
 800363a:	f001 ffe5 	bl	8005608 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USR_LED_3_GPIO_Port, USR_LED_3_Pin, (leds>>2)&1);
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	089b      	lsrs	r3, r3, #2
 8003642:	b2db      	uxtb	r3, r3
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	b2db      	uxtb	r3, r3
 800364a:	461a      	mov	r2, r3
 800364c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003650:	4809      	ldr	r0, [pc, #36]	; (8003678 <LED_Write+0x70>)
 8003652:	f001 ffd9 	bl	8005608 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USR_LED_4_GPIO_Port, USR_LED_4_Pin, (leds>>3)&1);
 8003656:	79fb      	ldrb	r3, [r7, #7]
 8003658:	08db      	lsrs	r3, r3, #3
 800365a:	b2db      	uxtb	r3, r3
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	b2db      	uxtb	r3, r3
 8003662:	461a      	mov	r2, r3
 8003664:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800366c:	f001 ffcc 	bl	8005608 <HAL_GPIO_WritePin>
}
 8003670:	bf00      	nop
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	48000800 	.word	0x48000800

0800367c <vTask_RotaryEnc>:
extern SemaphoreHandle_t xUartMutex;

uint8_t value;
uint32_t last_Tick = 0;

void vTask_RotaryEnc(void *pvParameters){
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef* htim = (TIM_HandleTypeDef*) pvParameters;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	613b      	str	r3, [r7, #16]
	uint32_t RotaryEnc_Previous_Value = 0;
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
	uint32_t RotaryEnc_Value = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]
	printf("Init Rotary Encoder...");
 8003690:	4815      	ldr	r0, [pc, #84]	; (80036e8 <vTask_RotaryEnc+0x6c>)
 8003692:	f00f fd17 	bl	80130c4 <iprintf>
	RotaryEnc_Init(htim);
 8003696:	6938      	ldr	r0, [r7, #16]
 8003698:	f000 f82e 	bl	80036f8 <RotaryEnc_Init>
	printf(" Done\r\n");
 800369c:	4813      	ldr	r0, [pc, #76]	; (80036ec <vTask_RotaryEnc+0x70>)
 800369e:	f00f fd77 	bl	8013190 <puts>
	for(;;){
		RotaryEnc_Value = __HAL_TIM_GET_COUNTER(htim);
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	60fb      	str	r3, [r7, #12]

		if(RotaryEnc_Previous_Value != RotaryEnc_Value){
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d016      	beq.n	80036e0 <vTask_RotaryEnc+0x64>
			if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 80036b2:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <vTask_RotaryEnc+0x74>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80036ba:	4618      	mov	r0, r3
 80036bc:	f00c fd22 	bl	8010104 <xQueueSemaphoreTake>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d10a      	bne.n	80036dc <vTask_RotaryEnc+0x60>
				printf("Rot_Enc : %6d\r\n", RotaryEnc_Value);
 80036c6:	68f9      	ldr	r1, [r7, #12]
 80036c8:	480a      	ldr	r0, [pc, #40]	; (80036f4 <vTask_RotaryEnc+0x78>)
 80036ca:	f00f fcfb 	bl	80130c4 <iprintf>
				xSemaphoreGive(xUartMutex);
 80036ce:	4b08      	ldr	r3, [pc, #32]	; (80036f0 <vTask_RotaryEnc+0x74>)
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	2300      	movs	r3, #0
 80036d4:	2200      	movs	r2, #0
 80036d6:	2100      	movs	r1, #0
 80036d8:	f00c fa9a 	bl	800fc10 <xQueueGenericSend>
			}
			RotaryEnc_Previous_Value = RotaryEnc_Value;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	617b      	str	r3, [r7, #20]
		}
		vTaskDelay(100);
 80036e0:	2064      	movs	r0, #100	; 0x64
 80036e2:	f00d f88d 	bl	8010800 <vTaskDelay>
		RotaryEnc_Value = __HAL_TIM_GET_COUNTER(htim);
 80036e6:	e7dc      	b.n	80036a2 <vTask_RotaryEnc+0x26>
 80036e8:	080155c8 	.word	0x080155c8
 80036ec:	080155e0 	.word	0x080155e0
 80036f0:	200005d4 	.word	0x200005d4
 80036f4:	080155e8 	.word	0x080155e8

080036f8 <RotaryEnc_Init>:
	}
}

void RotaryEnc_Init(TIM_HandleTypeDef* htim){
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_1);
 8003700:	2100      	movs	r1, #0
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f005 fe05 	bl	8009312 <HAL_TIM_Encoder_Start>
}
 8003708:	bf00      	nop
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003710:	480d      	ldr	r0, [pc, #52]	; (8003748 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003712:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003714:	480d      	ldr	r0, [pc, #52]	; (800374c <LoopForever+0x6>)
  ldr r1, =_edata
 8003716:	490e      	ldr	r1, [pc, #56]	; (8003750 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003718:	4a0e      	ldr	r2, [pc, #56]	; (8003754 <LoopForever+0xe>)
  movs r3, #0
 800371a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800371c:	e002      	b.n	8003724 <LoopCopyDataInit>

0800371e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800371e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003722:	3304      	adds	r3, #4

08003724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003728:	d3f9      	bcc.n	800371e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800372a:	4a0b      	ldr	r2, [pc, #44]	; (8003758 <LoopForever+0x12>)
  ldr r4, =_ebss
 800372c:	4c0b      	ldr	r4, [pc, #44]	; (800375c <LoopForever+0x16>)
  movs r3, #0
 800372e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003730:	e001      	b.n	8003736 <LoopFillZerobss>

08003732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003734:	3204      	adds	r2, #4

08003736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003738:	d3fb      	bcc.n	8003732 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800373a:	f7fe fcd7 	bl	80020ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800373e:	f00f feb5 	bl	80134ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003742:	f7fe f97f 	bl	8001a44 <main>

08003746 <LoopForever>:

LoopForever:
    b LoopForever
 8003746:	e7fe      	b.n	8003746 <LoopForever>
  ldr   r0, =_estack
 8003748:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800374c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003750:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8003754:	08015a0c 	.word	0x08015a0c
  ldr r2, =_sbss
 8003758:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 800375c:	200067dc 	.word	0x200067dc

08003760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003760:	e7fe      	b.n	8003760 <ADC1_2_IRQHandler>

08003762 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800376c:	2003      	movs	r0, #3
 800376e:	f001 fcea 	bl	8005146 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003772:	200f      	movs	r0, #15
 8003774:	f7fe fb3a 	bl	8001dec <HAL_InitTick>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	71fb      	strb	r3, [r7, #7]
 8003782:	e001      	b.n	8003788 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003784:	f7fe fb0a 	bl	8001d9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003788:	79fb      	ldrb	r3, [r7, #7]

}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <HAL_IncTick+0x1c>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <HAL_IncTick+0x20>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4413      	add	r3, r2
 80037a2:	4a03      	ldr	r2, [pc, #12]	; (80037b0 <HAL_IncTick+0x1c>)
 80037a4:	6013      	str	r3, [r2, #0]
}
 80037a6:	bf00      	nop
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	2000095c 	.word	0x2000095c
 80037b4:	20000008 	.word	0x20000008

080037b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  return uwTick;
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <HAL_GetTick+0x14>)
 80037be:	681b      	ldr	r3, [r3, #0]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	2000095c 	.word	0x2000095c

080037d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037d8:	f7ff ffee 	bl	80037b8 <HAL_GetTick>
 80037dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037e8:	d004      	beq.n	80037f4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80037ea:	4b09      	ldr	r3, [pc, #36]	; (8003810 <HAL_Delay+0x40>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4413      	add	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037f4:	bf00      	nop
 80037f6:	f7ff ffdf 	bl	80037b8 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	429a      	cmp	r2, r3
 8003804:	d8f7      	bhi.n	80037f6 <HAL_Delay+0x26>
  {
  }
}
 8003806:	bf00      	nop
 8003808:	bf00      	nop
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	20000008 	.word	0x20000008

08003814 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	609a      	str	r2, [r3, #8]
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	609a      	str	r2, [r3, #8]
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003870:	4618      	mov	r0, r3
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
 8003888:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3360      	adds	r3, #96	; 0x60
 800388e:	461a      	mov	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	4b08      	ldr	r3, [pc, #32]	; (80038c0 <LL_ADC_SetOffset+0x44>)
 800389e:	4013      	ands	r3, r2
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80038b4:	bf00      	nop
 80038b6:	371c      	adds	r7, #28
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	03fff000 	.word	0x03fff000

080038c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3360      	adds	r3, #96	; 0x60
 80038d2:	461a      	mov	r2, r3
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	3360      	adds	r3, #96	; 0x60
 8003900:	461a      	mov	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	431a      	orrs	r2, r3
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800391a:	bf00      	nop
 800391c:	371c      	adds	r7, #28
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003926:	b480      	push	{r7}
 8003928:	b087      	sub	sp, #28
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	3360      	adds	r3, #96	; 0x60
 8003936:	461a      	mov	r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	431a      	orrs	r2, r3
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003950:	bf00      	nop
 8003952:	371c      	adds	r7, #28
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	3360      	adds	r3, #96	; 0x60
 800396c:	461a      	mov	r2, r3
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	431a      	orrs	r2, r3
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003986:	bf00      	nop
 8003988:	371c      	adds	r7, #28
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	615a      	str	r2, [r3, #20]
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80039de:	b480      	push	{r7}
 80039e0:	b087      	sub	sp, #28
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	3330      	adds	r3, #48	; 0x30
 80039ee:	461a      	mov	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	0a1b      	lsrs	r3, r3, #8
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	4413      	add	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f003 031f 	and.w	r3, r3, #31
 8003a08:	211f      	movs	r1, #31
 8003a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	401a      	ands	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	0e9b      	lsrs	r3, r3, #26
 8003a16:	f003 011f 	and.w	r1, r3, #31
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f003 031f 	and.w	r3, r3, #31
 8003a20:	fa01 f303 	lsl.w	r3, r1, r3
 8003a24:	431a      	orrs	r2, r3
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a2a:	bf00      	nop
 8003a2c:	371c      	adds	r7, #28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b087      	sub	sp, #28
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	3314      	adds	r3, #20
 8003a46:	461a      	mov	r2, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	0e5b      	lsrs	r3, r3, #25
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	4413      	add	r3, r2
 8003a54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	0d1b      	lsrs	r3, r3, #20
 8003a5e:	f003 031f 	and.w	r3, r3, #31
 8003a62:	2107      	movs	r1, #7
 8003a64:	fa01 f303 	lsl.w	r3, r1, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	401a      	ands	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	0d1b      	lsrs	r3, r3, #20
 8003a70:	f003 031f 	and.w	r3, r3, #31
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a80:	bf00      	nop
 8003a82:	371c      	adds	r7, #28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a0f      	ldr	r2, [pc, #60]	; (8003ad8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d10a      	bne.n	8003ab6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aac:	431a      	orrs	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003ab4:	e00a      	b.n	8003acc <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	401a      	ands	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003acc:	bf00      	nop
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	407f0000 	.word	0x407f0000

08003adc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 031f 	and.w	r3, r3, #31
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003b24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6093      	str	r3, [r2, #8]
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b4c:	d101      	bne.n	8003b52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003b70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b9c:	d101      	bne.n	8003ba2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bc4:	f043 0201 	orr.w	r2, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <LL_ADC_IsEnabled+0x18>
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <LL_ADC_IsEnabled+0x1a>
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c12:	f043 0204 	orr.w	r2, r3, #4
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d101      	bne.n	8003c3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d101      	bne.n	8003c64 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c74:	b590      	push	{r4, r7, lr}
 8003c76:	b089      	sub	sp, #36	; 0x24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e1af      	b.n	8003fee <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d109      	bne.n	8003cb0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7fd fb35 	bl	800130c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff ff3f 	bl	8003b38 <LL_ADC_IsDeepPowerDownEnabled>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d004      	beq.n	8003cca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff ff25 	bl	8003b14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff ff5a 	bl	8003b88 <LL_ADC_IsInternalRegulatorEnabled>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d115      	bne.n	8003d06 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff ff3e 	bl	8003b60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ce4:	4b9f      	ldr	r3, [pc, #636]	; (8003f64 <HAL_ADC_Init+0x2f0>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	099b      	lsrs	r3, r3, #6
 8003cea:	4a9f      	ldr	r2, [pc, #636]	; (8003f68 <HAL_ADC_Init+0x2f4>)
 8003cec:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf0:	099b      	lsrs	r3, r3, #6
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003cf8:	e002      	b.n	8003d00 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f9      	bne.n	8003cfa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff ff3c 	bl	8003b88 <LL_ADC_IsInternalRegulatorEnabled>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10d      	bne.n	8003d32 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1a:	f043 0210 	orr.w	r2, r3, #16
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d26:	f043 0201 	orr.w	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff ff75 	bl	8003c26 <LL_ADC_REG_IsConversionOngoing>
 8003d3c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f040 8148 	bne.w	8003fdc <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f040 8144 	bne.w	8003fdc <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d58:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003d5c:	f043 0202 	orr.w	r2, r3, #2
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff ff35 	bl	8003bd8 <LL_ADC_IsEnabled>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d141      	bne.n	8003df8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d7c:	d004      	beq.n	8003d88 <HAL_ADC_Init+0x114>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a7a      	ldr	r2, [pc, #488]	; (8003f6c <HAL_ADC_Init+0x2f8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d10f      	bne.n	8003da8 <HAL_ADC_Init+0x134>
 8003d88:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003d8c:	f7ff ff24 	bl	8003bd8 <LL_ADC_IsEnabled>
 8003d90:	4604      	mov	r4, r0
 8003d92:	4876      	ldr	r0, [pc, #472]	; (8003f6c <HAL_ADC_Init+0x2f8>)
 8003d94:	f7ff ff20 	bl	8003bd8 <LL_ADC_IsEnabled>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	4323      	orrs	r3, r4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	bf0c      	ite	eq
 8003da0:	2301      	moveq	r3, #1
 8003da2:	2300      	movne	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	e012      	b.n	8003dce <HAL_ADC_Init+0x15a>
 8003da8:	4871      	ldr	r0, [pc, #452]	; (8003f70 <HAL_ADC_Init+0x2fc>)
 8003daa:	f7ff ff15 	bl	8003bd8 <LL_ADC_IsEnabled>
 8003dae:	4604      	mov	r4, r0
 8003db0:	4870      	ldr	r0, [pc, #448]	; (8003f74 <HAL_ADC_Init+0x300>)
 8003db2:	f7ff ff11 	bl	8003bd8 <LL_ADC_IsEnabled>
 8003db6:	4603      	mov	r3, r0
 8003db8:	431c      	orrs	r4, r3
 8003dba:	486f      	ldr	r0, [pc, #444]	; (8003f78 <HAL_ADC_Init+0x304>)
 8003dbc:	f7ff ff0c 	bl	8003bd8 <LL_ADC_IsEnabled>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	4323      	orrs	r3, r4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf0c      	ite	eq
 8003dc8:	2301      	moveq	r3, #1
 8003dca:	2300      	movne	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d012      	beq.n	8003df8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dda:	d004      	beq.n	8003de6 <HAL_ADC_Init+0x172>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a62      	ldr	r2, [pc, #392]	; (8003f6c <HAL_ADC_Init+0x2f8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d101      	bne.n	8003dea <HAL_ADC_Init+0x176>
 8003de6:	4a65      	ldr	r2, [pc, #404]	; (8003f7c <HAL_ADC_Init+0x308>)
 8003de8:	e000      	b.n	8003dec <HAL_ADC_Init+0x178>
 8003dea:	4a65      	ldr	r2, [pc, #404]	; (8003f80 <HAL_ADC_Init+0x30c>)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4619      	mov	r1, r3
 8003df2:	4610      	mov	r0, r2
 8003df4:	f7ff fd0e 	bl	8003814 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	7f5b      	ldrb	r3, [r3, #29]
 8003dfc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e02:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003e08:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003e0e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e16:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d106      	bne.n	8003e34 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	045b      	lsls	r3, r3, #17
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d009      	beq.n	8003e50 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	4b4b      	ldr	r3, [pc, #300]	; (8003f84 <HAL_ADC_Init+0x310>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6812      	ldr	r2, [r2, #0]
 8003e5e:	69b9      	ldr	r1, [r7, #24]
 8003e60:	430b      	orrs	r3, r1
 8003e62:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff fed1 	bl	8003c26 <LL_ADC_REG_IsConversionOngoing>
 8003e84:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff fede 	bl	8003c4c <LL_ADC_INJ_IsConversionOngoing>
 8003e90:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d17f      	bne.n	8003f98 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d17c      	bne.n	8003f98 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ea2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003eaa:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003eac:	4313      	orrs	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eba:	f023 0302 	bic.w	r3, r3, #2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	69b9      	ldr	r1, [r7, #24]
 8003ec4:	430b      	orrs	r3, r1
 8003ec6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d017      	beq.n	8003f00 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691a      	ldr	r2, [r3, #16]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003ede:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003ee8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003eec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6911      	ldr	r1, [r2, #16]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003efe:	e013      	b.n	8003f28 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691a      	ldr	r2, [r3, #16]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f0e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6812      	ldr	r2, [r2, #0]
 8003f1c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003f20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f24:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d12a      	bne.n	8003f88 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003f3c:	f023 0304 	bic.w	r3, r3, #4
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f48:	4311      	orrs	r1, r2
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003f4e:	4311      	orrs	r1, r2
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f54:	430a      	orrs	r2, r1
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 0201 	orr.w	r2, r2, #1
 8003f60:	611a      	str	r2, [r3, #16]
 8003f62:	e019      	b.n	8003f98 <HAL_ADC_Init+0x324>
 8003f64:	20000000 	.word	0x20000000
 8003f68:	053e2d63 	.word	0x053e2d63
 8003f6c:	50000100 	.word	0x50000100
 8003f70:	50000400 	.word	0x50000400
 8003f74:	50000500 	.word	0x50000500
 8003f78:	50000600 	.word	0x50000600
 8003f7c:	50000300 	.word	0x50000300
 8003f80:	50000700 	.word	0x50000700
 8003f84:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	691a      	ldr	r2, [r3, #16]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0201 	bic.w	r2, r2, #1
 8003f96:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d10c      	bne.n	8003fba <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	f023 010f 	bic.w	r1, r3, #15
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	1e5a      	subs	r2, r3, #1
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	631a      	str	r2, [r3, #48]	; 0x30
 8003fb8:	e007      	b.n	8003fca <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 020f 	bic.w	r2, r2, #15
 8003fc8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fce:	f023 0303 	bic.w	r3, r3, #3
 8003fd2:	f043 0201 	orr.w	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003fda:	e007      	b.n	8003fec <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe0:	f043 0210 	orr.w	r2, r3, #16
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003fec:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3724      	adds	r7, #36	; 0x24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd90      	pop	{r4, r7, pc}
 8003ff6:	bf00      	nop

08003ff8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004008:	d004      	beq.n	8004014 <HAL_ADC_Start+0x1c>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a67      	ldr	r2, [pc, #412]	; (80041ac <HAL_ADC_Start+0x1b4>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d101      	bne.n	8004018 <HAL_ADC_Start+0x20>
 8004014:	4b66      	ldr	r3, [pc, #408]	; (80041b0 <HAL_ADC_Start+0x1b8>)
 8004016:	e000      	b.n	800401a <HAL_ADC_Start+0x22>
 8004018:	4b66      	ldr	r3, [pc, #408]	; (80041b4 <HAL_ADC_Start+0x1bc>)
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff fd5e 	bl	8003adc <LL_ADC_GetMultimode>
 8004020:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff fdfd 	bl	8003c26 <LL_ADC_REG_IsConversionOngoing>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	f040 80b4 	bne.w	800419c <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_ADC_Start+0x4a>
 800403e:	2302      	movs	r3, #2
 8004040:	e0af      	b.n	80041a2 <HAL_ADC_Start+0x1aa>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fe0c 	bl	8004c68 <ADC_Enable>
 8004050:	4603      	mov	r3, r0
 8004052:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004054:	7dfb      	ldrb	r3, [r7, #23]
 8004056:	2b00      	cmp	r3, #0
 8004058:	f040 809b 	bne.w	8004192 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004060:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004064:	f023 0301 	bic.w	r3, r3, #1
 8004068:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a4d      	ldr	r2, [pc, #308]	; (80041ac <HAL_ADC_Start+0x1b4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d009      	beq.n	800408e <HAL_ADC_Start+0x96>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a4e      	ldr	r2, [pc, #312]	; (80041b8 <HAL_ADC_Start+0x1c0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d002      	beq.n	800408a <HAL_ADC_Start+0x92>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	e003      	b.n	8004092 <HAL_ADC_Start+0x9a>
 800408a:	4b4c      	ldr	r3, [pc, #304]	; (80041bc <HAL_ADC_Start+0x1c4>)
 800408c:	e001      	b.n	8004092 <HAL_ADC_Start+0x9a>
 800408e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6812      	ldr	r2, [r2, #0]
 8004096:	4293      	cmp	r3, r2
 8004098:	d002      	beq.n	80040a0 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d105      	bne.n	80040ac <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b8:	d106      	bne.n	80040c8 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040be:	f023 0206 	bic.w	r2, r3, #6
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	661a      	str	r2, [r3, #96]	; 0x60
 80040c6:	e002      	b.n	80040ce <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	221c      	movs	r2, #28
 80040d4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a32      	ldr	r2, [pc, #200]	; (80041ac <HAL_ADC_Start+0x1b4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d009      	beq.n	80040fc <HAL_ADC_Start+0x104>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a32      	ldr	r2, [pc, #200]	; (80041b8 <HAL_ADC_Start+0x1c0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d002      	beq.n	80040f8 <HAL_ADC_Start+0x100>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	e003      	b.n	8004100 <HAL_ADC_Start+0x108>
 80040f8:	4b30      	ldr	r3, [pc, #192]	; (80041bc <HAL_ADC_Start+0x1c4>)
 80040fa:	e001      	b.n	8004100 <HAL_ADC_Start+0x108>
 80040fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6812      	ldr	r2, [r2, #0]
 8004104:	4293      	cmp	r3, r2
 8004106:	d008      	beq.n	800411a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d005      	beq.n	800411a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	2b05      	cmp	r3, #5
 8004112:	d002      	beq.n	800411a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	2b09      	cmp	r3, #9
 8004118:	d114      	bne.n	8004144 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d007      	beq.n	8004138 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004130:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff fd5e 	bl	8003bfe <LL_ADC_REG_StartConversion>
 8004142:	e02d      	b.n	80041a0 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004148:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a15      	ldr	r2, [pc, #84]	; (80041ac <HAL_ADC_Start+0x1b4>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d009      	beq.n	800416e <HAL_ADC_Start+0x176>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a16      	ldr	r2, [pc, #88]	; (80041b8 <HAL_ADC_Start+0x1c0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d002      	beq.n	800416a <HAL_ADC_Start+0x172>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	e003      	b.n	8004172 <HAL_ADC_Start+0x17a>
 800416a:	4b14      	ldr	r3, [pc, #80]	; (80041bc <HAL_ADC_Start+0x1c4>)
 800416c:	e001      	b.n	8004172 <HAL_ADC_Start+0x17a>
 800416e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004172:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00f      	beq.n	80041a0 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004184:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004188:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004190:	e006      	b.n	80041a0 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800419a:	e001      	b.n	80041a0 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800419c:	2302      	movs	r3, #2
 800419e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80041a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	50000100 	.word	0x50000100
 80041b0:	50000300 	.word	0x50000300
 80041b4:	50000700 	.word	0x50000700
 80041b8:	50000500 	.word	0x50000500
 80041bc:	50000400 	.word	0x50000400

080041c0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041d2:	d004      	beq.n	80041de <HAL_ADC_PollForConversion+0x1e>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a77      	ldr	r2, [pc, #476]	; (80043b8 <HAL_ADC_PollForConversion+0x1f8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d101      	bne.n	80041e2 <HAL_ADC_PollForConversion+0x22>
 80041de:	4b77      	ldr	r3, [pc, #476]	; (80043bc <HAL_ADC_PollForConversion+0x1fc>)
 80041e0:	e000      	b.n	80041e4 <HAL_ADC_PollForConversion+0x24>
 80041e2:	4b77      	ldr	r3, [pc, #476]	; (80043c0 <HAL_ADC_PollForConversion+0x200>)
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff fc79 	bl	8003adc <LL_ADC_GetMultimode>
 80041ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d102      	bne.n	80041fa <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80041f4:	2308      	movs	r3, #8
 80041f6:	61fb      	str	r3, [r7, #28]
 80041f8:	e037      	b.n	800426a <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	2b05      	cmp	r3, #5
 8004204:	d002      	beq.n	800420c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2b09      	cmp	r3, #9
 800420a:	d111      	bne.n	8004230 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d007      	beq.n	800422a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421e:	f043 0220 	orr.w	r2, r3, #32
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e0c1      	b.n	80043ae <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800422a:	2304      	movs	r3, #4
 800422c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800422e:	e01c      	b.n	800426a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004238:	d004      	beq.n	8004244 <HAL_ADC_PollForConversion+0x84>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a5e      	ldr	r2, [pc, #376]	; (80043b8 <HAL_ADC_PollForConversion+0x1f8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d101      	bne.n	8004248 <HAL_ADC_PollForConversion+0x88>
 8004244:	4b5d      	ldr	r3, [pc, #372]	; (80043bc <HAL_ADC_PollForConversion+0x1fc>)
 8004246:	e000      	b.n	800424a <HAL_ADC_PollForConversion+0x8a>
 8004248:	4b5d      	ldr	r3, [pc, #372]	; (80043c0 <HAL_ADC_PollForConversion+0x200>)
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff fc54 	bl	8003af8 <LL_ADC_GetMultiDMATransfer>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d007      	beq.n	8004266 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425a:	f043 0220 	orr.w	r2, r3, #32
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e0a3      	b.n	80043ae <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004266:	2304      	movs	r3, #4
 8004268:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800426a:	f7ff faa5 	bl	80037b8 <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004270:	e021      	b.n	80042b6 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004278:	d01d      	beq.n	80042b6 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800427a:	f7ff fa9d 	bl	80037b8 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d302      	bcc.n	8004290 <HAL_ADC_PollForConversion+0xd0>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d112      	bne.n	80042b6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	4013      	ands	r3, r2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10b      	bne.n	80042b6 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a2:	f043 0204 	orr.w	r2, r3, #4
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e07b      	b.n	80043ae <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	4013      	ands	r3, r2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0d6      	beq.n	8004272 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff fb6f 	bl	80039b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d01c      	beq.n	800431a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	7f5b      	ldrb	r3, [r3, #29]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d118      	bne.n	800431a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d111      	bne.n	800431a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d105      	bne.n	800431a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004312:	f043 0201 	orr.w	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a26      	ldr	r2, [pc, #152]	; (80043b8 <HAL_ADC_PollForConversion+0x1f8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d009      	beq.n	8004338 <HAL_ADC_PollForConversion+0x178>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a26      	ldr	r2, [pc, #152]	; (80043c4 <HAL_ADC_PollForConversion+0x204>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d002      	beq.n	8004334 <HAL_ADC_PollForConversion+0x174>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	e003      	b.n	800433c <HAL_ADC_PollForConversion+0x17c>
 8004334:	4b24      	ldr	r3, [pc, #144]	; (80043c8 <HAL_ADC_PollForConversion+0x208>)
 8004336:	e001      	b.n	800433c <HAL_ADC_PollForConversion+0x17c>
 8004338:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6812      	ldr	r2, [r2, #0]
 8004340:	4293      	cmp	r3, r2
 8004342:	d008      	beq.n	8004356 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d005      	beq.n	8004356 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	2b05      	cmp	r3, #5
 800434e:	d002      	beq.n	8004356 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	2b09      	cmp	r3, #9
 8004354:	d104      	bne.n	8004360 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	61bb      	str	r3, [r7, #24]
 800435e:	e014      	b.n	800438a <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a14      	ldr	r2, [pc, #80]	; (80043b8 <HAL_ADC_PollForConversion+0x1f8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d009      	beq.n	800437e <HAL_ADC_PollForConversion+0x1be>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <HAL_ADC_PollForConversion+0x204>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d002      	beq.n	800437a <HAL_ADC_PollForConversion+0x1ba>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	e003      	b.n	8004382 <HAL_ADC_PollForConversion+0x1c2>
 800437a:	4b13      	ldr	r3, [pc, #76]	; (80043c8 <HAL_ADC_PollForConversion+0x208>)
 800437c:	e001      	b.n	8004382 <HAL_ADC_PollForConversion+0x1c2>
 800437e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004382:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	2b08      	cmp	r3, #8
 800438e:	d104      	bne.n	800439a <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2208      	movs	r2, #8
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	e008      	b.n	80043ac <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d103      	bne.n	80043ac <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	220c      	movs	r2, #12
 80043aa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3720      	adds	r7, #32
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	50000100 	.word	0x50000100
 80043bc:	50000300 	.word	0x50000300
 80043c0:	50000700 	.word	0x50000700
 80043c4:	50000500 	.word	0x50000500
 80043c8:	50000400 	.word	0x50000400

080043cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80043da:	4618      	mov	r0, r3
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b0b6      	sub	sp, #216	; 0xd8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80043f8:	2300      	movs	r3, #0
 80043fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004402:	2b01      	cmp	r3, #1
 8004404:	d102      	bne.n	800440c <HAL_ADC_ConfigChannel+0x24>
 8004406:	2302      	movs	r3, #2
 8004408:	f000 bc13 	b.w	8004c32 <HAL_ADC_ConfigChannel+0x84a>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fc04 	bl	8003c26 <LL_ADC_REG_IsConversionOngoing>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	f040 83f3 	bne.w	8004c0c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6818      	ldr	r0, [r3, #0]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	6859      	ldr	r1, [r3, #4]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	461a      	mov	r2, r3
 8004434:	f7ff fad3 	bl	80039de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff fbf2 	bl	8003c26 <LL_ADC_REG_IsConversionOngoing>
 8004442:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fbfe 	bl	8003c4c <LL_ADC_INJ_IsConversionOngoing>
 8004450:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004454:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004458:	2b00      	cmp	r3, #0
 800445a:	f040 81d9 	bne.w	8004810 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800445e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004462:	2b00      	cmp	r3, #0
 8004464:	f040 81d4 	bne.w	8004810 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004470:	d10f      	bne.n	8004492 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2200      	movs	r2, #0
 800447c:	4619      	mov	r1, r3
 800447e:	f7ff fada 	bl	8003a36 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff fa81 	bl	8003992 <LL_ADC_SetSamplingTimeCommonConfig>
 8004490:	e00e      	b.n	80044b0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6818      	ldr	r0, [r3, #0]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	6819      	ldr	r1, [r3, #0]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	461a      	mov	r2, r3
 80044a0:	f7ff fac9 	bl	8003a36 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2100      	movs	r1, #0
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff fa71 	bl	8003992 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	695a      	ldr	r2, [r3, #20]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	08db      	lsrs	r3, r3, #3
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d022      	beq.n	8004518 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6818      	ldr	r0, [r3, #0]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	6919      	ldr	r1, [r3, #16]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80044e2:	f7ff f9cb 	bl	800387c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6818      	ldr	r0, [r3, #0]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	6919      	ldr	r1, [r3, #16]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	461a      	mov	r2, r3
 80044f4:	f7ff fa17 	bl	8003926 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	6919      	ldr	r1, [r3, #16]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	7f1b      	ldrb	r3, [r3, #28]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d102      	bne.n	800450e <HAL_ADC_ConfigChannel+0x126>
 8004508:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800450c:	e000      	b.n	8004510 <HAL_ADC_ConfigChannel+0x128>
 800450e:	2300      	movs	r3, #0
 8004510:	461a      	mov	r2, r3
 8004512:	f7ff fa23 	bl	800395c <LL_ADC_SetOffsetSaturation>
 8004516:	e17b      	b.n	8004810 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2100      	movs	r1, #0
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff f9d0 	bl	80038c4 <LL_ADC_GetOffsetChannel>
 8004524:	4603      	mov	r3, r0
 8004526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10a      	bne.n	8004544 <HAL_ADC_ConfigChannel+0x15c>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2100      	movs	r1, #0
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff f9c5 	bl	80038c4 <LL_ADC_GetOffsetChannel>
 800453a:	4603      	mov	r3, r0
 800453c:	0e9b      	lsrs	r3, r3, #26
 800453e:	f003 021f 	and.w	r2, r3, #31
 8004542:	e01e      	b.n	8004582 <HAL_ADC_ConfigChannel+0x19a>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2100      	movs	r1, #0
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff f9ba 	bl	80038c4 <LL_ADC_GetOffsetChannel>
 8004550:	4603      	mov	r3, r0
 8004552:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004556:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800455a:	fa93 f3a3 	rbit	r3, r3
 800455e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004562:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004566:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800456a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004572:	2320      	movs	r3, #32
 8004574:	e004      	b.n	8004580 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004576:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800457a:	fab3 f383 	clz	r3, r3
 800457e:	b2db      	uxtb	r3, r3
 8004580:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800458a:	2b00      	cmp	r3, #0
 800458c:	d105      	bne.n	800459a <HAL_ADC_ConfigChannel+0x1b2>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	0e9b      	lsrs	r3, r3, #26
 8004594:	f003 031f 	and.w	r3, r3, #31
 8004598:	e018      	b.n	80045cc <HAL_ADC_ConfigChannel+0x1e4>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80045a6:	fa93 f3a3 	rbit	r3, r3
 80045aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80045ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80045b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80045be:	2320      	movs	r3, #32
 80045c0:	e004      	b.n	80045cc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80045c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80045c6:	fab3 f383 	clz	r3, r3
 80045ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d106      	bne.n	80045de <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2200      	movs	r2, #0
 80045d6:	2100      	movs	r1, #0
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff f989 	bl	80038f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2101      	movs	r1, #1
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff f96d 	bl	80038c4 <LL_ADC_GetOffsetChannel>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10a      	bne.n	800460a <HAL_ADC_ConfigChannel+0x222>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2101      	movs	r1, #1
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff f962 	bl	80038c4 <LL_ADC_GetOffsetChannel>
 8004600:	4603      	mov	r3, r0
 8004602:	0e9b      	lsrs	r3, r3, #26
 8004604:	f003 021f 	and.w	r2, r3, #31
 8004608:	e01e      	b.n	8004648 <HAL_ADC_ConfigChannel+0x260>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2101      	movs	r1, #1
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff f957 	bl	80038c4 <LL_ADC_GetOffsetChannel>
 8004616:	4603      	mov	r3, r0
 8004618:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004620:	fa93 f3a3 	rbit	r3, r3
 8004624:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004628:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800462c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004630:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004638:	2320      	movs	r3, #32
 800463a:	e004      	b.n	8004646 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800463c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004640:	fab3 f383 	clz	r3, r3
 8004644:	b2db      	uxtb	r3, r3
 8004646:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004650:	2b00      	cmp	r3, #0
 8004652:	d105      	bne.n	8004660 <HAL_ADC_ConfigChannel+0x278>
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	0e9b      	lsrs	r3, r3, #26
 800465a:	f003 031f 	and.w	r3, r3, #31
 800465e:	e018      	b.n	8004692 <HAL_ADC_ConfigChannel+0x2aa>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004668:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800466c:	fa93 f3a3 	rbit	r3, r3
 8004670:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004674:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004678:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800467c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004684:	2320      	movs	r3, #32
 8004686:	e004      	b.n	8004692 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004688:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800468c:	fab3 f383 	clz	r3, r3
 8004690:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004692:	429a      	cmp	r2, r3
 8004694:	d106      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2200      	movs	r2, #0
 800469c:	2101      	movs	r1, #1
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff f926 	bl	80038f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2102      	movs	r1, #2
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff f90a 	bl	80038c4 <LL_ADC_GetOffsetChannel>
 80046b0:	4603      	mov	r3, r0
 80046b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10a      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x2e8>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2102      	movs	r1, #2
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff f8ff 	bl	80038c4 <LL_ADC_GetOffsetChannel>
 80046c6:	4603      	mov	r3, r0
 80046c8:	0e9b      	lsrs	r3, r3, #26
 80046ca:	f003 021f 	and.w	r2, r3, #31
 80046ce:	e01e      	b.n	800470e <HAL_ADC_ConfigChannel+0x326>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2102      	movs	r1, #2
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff f8f4 	bl	80038c4 <LL_ADC_GetOffsetChannel>
 80046dc:	4603      	mov	r3, r0
 80046de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046e6:	fa93 f3a3 	rbit	r3, r3
 80046ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80046ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80046f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80046fe:	2320      	movs	r3, #32
 8004700:	e004      	b.n	800470c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004702:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004706:	fab3 f383 	clz	r3, r3
 800470a:	b2db      	uxtb	r3, r3
 800470c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004716:	2b00      	cmp	r3, #0
 8004718:	d105      	bne.n	8004726 <HAL_ADC_ConfigChannel+0x33e>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	0e9b      	lsrs	r3, r3, #26
 8004720:	f003 031f 	and.w	r3, r3, #31
 8004724:	e016      	b.n	8004754 <HAL_ADC_ConfigChannel+0x36c>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004732:	fa93 f3a3 	rbit	r3, r3
 8004736:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004738:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800473a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800473e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004746:	2320      	movs	r3, #32
 8004748:	e004      	b.n	8004754 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800474a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800474e:	fab3 f383 	clz	r3, r3
 8004752:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004754:	429a      	cmp	r2, r3
 8004756:	d106      	bne.n	8004766 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2200      	movs	r2, #0
 800475e:	2102      	movs	r1, #2
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff f8c5 	bl	80038f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2103      	movs	r1, #3
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff f8a9 	bl	80038c4 <LL_ADC_GetOffsetChannel>
 8004772:	4603      	mov	r3, r0
 8004774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <HAL_ADC_ConfigChannel+0x3aa>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2103      	movs	r1, #3
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff f89e 	bl	80038c4 <LL_ADC_GetOffsetChannel>
 8004788:	4603      	mov	r3, r0
 800478a:	0e9b      	lsrs	r3, r3, #26
 800478c:	f003 021f 	and.w	r2, r3, #31
 8004790:	e017      	b.n	80047c2 <HAL_ADC_ConfigChannel+0x3da>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2103      	movs	r1, #3
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff f893 	bl	80038c4 <LL_ADC_GetOffsetChannel>
 800479e:	4603      	mov	r3, r0
 80047a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047a4:	fa93 f3a3 	rbit	r3, r3
 80047a8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80047aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047ac:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80047ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80047b4:	2320      	movs	r3, #32
 80047b6:	e003      	b.n	80047c0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80047b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047ba:	fab3 f383 	clz	r3, r3
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d105      	bne.n	80047da <HAL_ADC_ConfigChannel+0x3f2>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	0e9b      	lsrs	r3, r3, #26
 80047d4:	f003 031f 	and.w	r3, r3, #31
 80047d8:	e011      	b.n	80047fe <HAL_ADC_ConfigChannel+0x416>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047e2:	fa93 f3a3 	rbit	r3, r3
 80047e6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80047e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80047ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80047f2:	2320      	movs	r3, #32
 80047f4:	e003      	b.n	80047fe <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80047f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047f8:	fab3 f383 	clz	r3, r3
 80047fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047fe:	429a      	cmp	r2, r3
 8004800:	d106      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2200      	movs	r2, #0
 8004808:	2103      	movs	r1, #3
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff f870 	bl	80038f0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff f9df 	bl	8003bd8 <LL_ADC_IsEnabled>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	f040 813d 	bne.w	8004a9c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6819      	ldr	r1, [r3, #0]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	461a      	mov	r2, r3
 8004830:	f7ff f92c 	bl	8003a8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	4aa2      	ldr	r2, [pc, #648]	; (8004ac4 <HAL_ADC_ConfigChannel+0x6dc>)
 800483a:	4293      	cmp	r3, r2
 800483c:	f040 812e 	bne.w	8004a9c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10b      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x480>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	0e9b      	lsrs	r3, r3, #26
 8004856:	3301      	adds	r3, #1
 8004858:	f003 031f 	and.w	r3, r3, #31
 800485c:	2b09      	cmp	r3, #9
 800485e:	bf94      	ite	ls
 8004860:	2301      	movls	r3, #1
 8004862:	2300      	movhi	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	e019      	b.n	800489c <HAL_ADC_ConfigChannel+0x4b4>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004870:	fa93 f3a3 	rbit	r3, r3
 8004874:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004876:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004878:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800487a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004880:	2320      	movs	r3, #32
 8004882:	e003      	b.n	800488c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004884:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004886:	fab3 f383 	clz	r3, r3
 800488a:	b2db      	uxtb	r3, r3
 800488c:	3301      	adds	r3, #1
 800488e:	f003 031f 	and.w	r3, r3, #31
 8004892:	2b09      	cmp	r3, #9
 8004894:	bf94      	ite	ls
 8004896:	2301      	movls	r3, #1
 8004898:	2300      	movhi	r3, #0
 800489a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800489c:	2b00      	cmp	r3, #0
 800489e:	d079      	beq.n	8004994 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d107      	bne.n	80048bc <HAL_ADC_ConfigChannel+0x4d4>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	0e9b      	lsrs	r3, r3, #26
 80048b2:	3301      	adds	r3, #1
 80048b4:	069b      	lsls	r3, r3, #26
 80048b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048ba:	e015      	b.n	80048e8 <HAL_ADC_ConfigChannel+0x500>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c4:	fa93 f3a3 	rbit	r3, r3
 80048c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80048ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80048ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80048d4:	2320      	movs	r3, #32
 80048d6:	e003      	b.n	80048e0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80048d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048da:	fab3 f383 	clz	r3, r3
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	3301      	adds	r3, #1
 80048e2:	069b      	lsls	r3, r3, #26
 80048e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d109      	bne.n	8004908 <HAL_ADC_ConfigChannel+0x520>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	0e9b      	lsrs	r3, r3, #26
 80048fa:	3301      	adds	r3, #1
 80048fc:	f003 031f 	and.w	r3, r3, #31
 8004900:	2101      	movs	r1, #1
 8004902:	fa01 f303 	lsl.w	r3, r1, r3
 8004906:	e017      	b.n	8004938 <HAL_ADC_ConfigChannel+0x550>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004910:	fa93 f3a3 	rbit	r3, r3
 8004914:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004918:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800491a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004920:	2320      	movs	r3, #32
 8004922:	e003      	b.n	800492c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004926:	fab3 f383 	clz	r3, r3
 800492a:	b2db      	uxtb	r3, r3
 800492c:	3301      	adds	r3, #1
 800492e:	f003 031f 	and.w	r3, r3, #31
 8004932:	2101      	movs	r1, #1
 8004934:	fa01 f303 	lsl.w	r3, r1, r3
 8004938:	ea42 0103 	orr.w	r1, r2, r3
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10a      	bne.n	800495e <HAL_ADC_ConfigChannel+0x576>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	0e9b      	lsrs	r3, r3, #26
 800494e:	3301      	adds	r3, #1
 8004950:	f003 021f 	and.w	r2, r3, #31
 8004954:	4613      	mov	r3, r2
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	4413      	add	r3, r2
 800495a:	051b      	lsls	r3, r3, #20
 800495c:	e018      	b.n	8004990 <HAL_ADC_ConfigChannel+0x5a8>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004966:	fa93 f3a3 	rbit	r3, r3
 800496a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800496c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004976:	2320      	movs	r3, #32
 8004978:	e003      	b.n	8004982 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800497a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800497c:	fab3 f383 	clz	r3, r3
 8004980:	b2db      	uxtb	r3, r3
 8004982:	3301      	adds	r3, #1
 8004984:	f003 021f 	and.w	r2, r3, #31
 8004988:	4613      	mov	r3, r2
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	4413      	add	r3, r2
 800498e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004990:	430b      	orrs	r3, r1
 8004992:	e07e      	b.n	8004a92 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800499c:	2b00      	cmp	r3, #0
 800499e:	d107      	bne.n	80049b0 <HAL_ADC_ConfigChannel+0x5c8>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	0e9b      	lsrs	r3, r3, #26
 80049a6:	3301      	adds	r3, #1
 80049a8:	069b      	lsls	r3, r3, #26
 80049aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049ae:	e015      	b.n	80049dc <HAL_ADC_ConfigChannel+0x5f4>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b8:	fa93 f3a3 	rbit	r3, r3
 80049bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80049be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80049c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80049c8:	2320      	movs	r3, #32
 80049ca:	e003      	b.n	80049d4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80049cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ce:	fab3 f383 	clz	r3, r3
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	3301      	adds	r3, #1
 80049d6:	069b      	lsls	r3, r3, #26
 80049d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d109      	bne.n	80049fc <HAL_ADC_ConfigChannel+0x614>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	0e9b      	lsrs	r3, r3, #26
 80049ee:	3301      	adds	r3, #1
 80049f0:	f003 031f 	and.w	r3, r3, #31
 80049f4:	2101      	movs	r1, #1
 80049f6:	fa01 f303 	lsl.w	r3, r1, r3
 80049fa:	e017      	b.n	8004a2c <HAL_ADC_ConfigChannel+0x644>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	fa93 f3a3 	rbit	r3, r3
 8004a08:	61fb      	str	r3, [r7, #28]
  return result;
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004a14:	2320      	movs	r3, #32
 8004a16:	e003      	b.n	8004a20 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	fab3 f383 	clz	r3, r3
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	3301      	adds	r3, #1
 8004a22:	f003 031f 	and.w	r3, r3, #31
 8004a26:	2101      	movs	r1, #1
 8004a28:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2c:	ea42 0103 	orr.w	r1, r2, r3
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10d      	bne.n	8004a58 <HAL_ADC_ConfigChannel+0x670>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	0e9b      	lsrs	r3, r3, #26
 8004a42:	3301      	adds	r3, #1
 8004a44:	f003 021f 	and.w	r2, r3, #31
 8004a48:	4613      	mov	r3, r2
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	4413      	add	r3, r2
 8004a4e:	3b1e      	subs	r3, #30
 8004a50:	051b      	lsls	r3, r3, #20
 8004a52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a56:	e01b      	b.n	8004a90 <HAL_ADC_ConfigChannel+0x6a8>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	fa93 f3a3 	rbit	r3, r3
 8004a64:	613b      	str	r3, [r7, #16]
  return result;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004a70:	2320      	movs	r3, #32
 8004a72:	e003      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	fab3 f383 	clz	r3, r3
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	f003 021f 	and.w	r2, r3, #31
 8004a82:	4613      	mov	r3, r2
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	4413      	add	r3, r2
 8004a88:	3b1e      	subs	r3, #30
 8004a8a:	051b      	lsls	r3, r3, #20
 8004a8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a90:	430b      	orrs	r3, r1
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	6892      	ldr	r2, [r2, #8]
 8004a96:	4619      	mov	r1, r3
 8004a98:	f7fe ffcd 	bl	8003a36 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <HAL_ADC_ConfigChannel+0x6e0>)
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 80be 	beq.w	8004c26 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ab2:	d004      	beq.n	8004abe <HAL_ADC_ConfigChannel+0x6d6>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a04      	ldr	r2, [pc, #16]	; (8004acc <HAL_ADC_ConfigChannel+0x6e4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d10a      	bne.n	8004ad4 <HAL_ADC_ConfigChannel+0x6ec>
 8004abe:	4b04      	ldr	r3, [pc, #16]	; (8004ad0 <HAL_ADC_ConfigChannel+0x6e8>)
 8004ac0:	e009      	b.n	8004ad6 <HAL_ADC_ConfigChannel+0x6ee>
 8004ac2:	bf00      	nop
 8004ac4:	407f0000 	.word	0x407f0000
 8004ac8:	80080000 	.word	0x80080000
 8004acc:	50000100 	.word	0x50000100
 8004ad0:	50000300 	.word	0x50000300
 8004ad4:	4b59      	ldr	r3, [pc, #356]	; (8004c3c <HAL_ADC_ConfigChannel+0x854>)
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fe fec2 	bl	8003860 <LL_ADC_GetCommonPathInternalCh>
 8004adc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a56      	ldr	r2, [pc, #344]	; (8004c40 <HAL_ADC_ConfigChannel+0x858>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d004      	beq.n	8004af4 <HAL_ADC_ConfigChannel+0x70c>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a55      	ldr	r2, [pc, #340]	; (8004c44 <HAL_ADC_ConfigChannel+0x85c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d13a      	bne.n	8004b6a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004af4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004af8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d134      	bne.n	8004b6a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b08:	d005      	beq.n	8004b16 <HAL_ADC_ConfigChannel+0x72e>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a4e      	ldr	r2, [pc, #312]	; (8004c48 <HAL_ADC_ConfigChannel+0x860>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	f040 8085 	bne.w	8004c20 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b1e:	d004      	beq.n	8004b2a <HAL_ADC_ConfigChannel+0x742>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a49      	ldr	r2, [pc, #292]	; (8004c4c <HAL_ADC_ConfigChannel+0x864>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d101      	bne.n	8004b2e <HAL_ADC_ConfigChannel+0x746>
 8004b2a:	4a49      	ldr	r2, [pc, #292]	; (8004c50 <HAL_ADC_ConfigChannel+0x868>)
 8004b2c:	e000      	b.n	8004b30 <HAL_ADC_ConfigChannel+0x748>
 8004b2e:	4a43      	ldr	r2, [pc, #268]	; (8004c3c <HAL_ADC_ConfigChannel+0x854>)
 8004b30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	f7fe fe7d 	bl	800383a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b40:	4b44      	ldr	r3, [pc, #272]	; (8004c54 <HAL_ADC_ConfigChannel+0x86c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	099b      	lsrs	r3, r3, #6
 8004b46:	4a44      	ldr	r2, [pc, #272]	; (8004c58 <HAL_ADC_ConfigChannel+0x870>)
 8004b48:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4c:	099b      	lsrs	r3, r3, #6
 8004b4e:	1c5a      	adds	r2, r3, #1
 8004b50:	4613      	mov	r3, r2
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	4413      	add	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004b5a:	e002      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1f9      	bne.n	8004b5c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b68:	e05a      	b.n	8004c20 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a3b      	ldr	r2, [pc, #236]	; (8004c5c <HAL_ADC_ConfigChannel+0x874>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d125      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x7d8>
 8004b74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d11f      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a31      	ldr	r2, [pc, #196]	; (8004c4c <HAL_ADC_ConfigChannel+0x864>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d104      	bne.n	8004b94 <HAL_ADC_ConfigChannel+0x7ac>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a34      	ldr	r2, [pc, #208]	; (8004c60 <HAL_ADC_ConfigChannel+0x878>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d047      	beq.n	8004c24 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b9c:	d004      	beq.n	8004ba8 <HAL_ADC_ConfigChannel+0x7c0>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a2a      	ldr	r2, [pc, #168]	; (8004c4c <HAL_ADC_ConfigChannel+0x864>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d101      	bne.n	8004bac <HAL_ADC_ConfigChannel+0x7c4>
 8004ba8:	4a29      	ldr	r2, [pc, #164]	; (8004c50 <HAL_ADC_ConfigChannel+0x868>)
 8004baa:	e000      	b.n	8004bae <HAL_ADC_ConfigChannel+0x7c6>
 8004bac:	4a23      	ldr	r2, [pc, #140]	; (8004c3c <HAL_ADC_ConfigChannel+0x854>)
 8004bae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4610      	mov	r0, r2
 8004bba:	f7fe fe3e 	bl	800383a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004bbe:	e031      	b.n	8004c24 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a27      	ldr	r2, [pc, #156]	; (8004c64 <HAL_ADC_ConfigChannel+0x87c>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d12d      	bne.n	8004c26 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004bca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d127      	bne.n	8004c26 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a1c      	ldr	r2, [pc, #112]	; (8004c4c <HAL_ADC_ConfigChannel+0x864>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d022      	beq.n	8004c26 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004be8:	d004      	beq.n	8004bf4 <HAL_ADC_ConfigChannel+0x80c>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a17      	ldr	r2, [pc, #92]	; (8004c4c <HAL_ADC_ConfigChannel+0x864>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d101      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x810>
 8004bf4:	4a16      	ldr	r2, [pc, #88]	; (8004c50 <HAL_ADC_ConfigChannel+0x868>)
 8004bf6:	e000      	b.n	8004bfa <HAL_ADC_ConfigChannel+0x812>
 8004bf8:	4a10      	ldr	r2, [pc, #64]	; (8004c3c <HAL_ADC_ConfigChannel+0x854>)
 8004bfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c02:	4619      	mov	r1, r3
 8004c04:	4610      	mov	r0, r2
 8004c06:	f7fe fe18 	bl	800383a <LL_ADC_SetCommonPathInternalCh>
 8004c0a:	e00c      	b.n	8004c26 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c10:	f043 0220 	orr.w	r2, r3, #32
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004c1e:	e002      	b.n	8004c26 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c20:	bf00      	nop
 8004c22:	e000      	b.n	8004c26 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c24:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004c2e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	37d8      	adds	r7, #216	; 0xd8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	50000700 	.word	0x50000700
 8004c40:	c3210000 	.word	0xc3210000
 8004c44:	90c00010 	.word	0x90c00010
 8004c48:	50000600 	.word	0x50000600
 8004c4c:	50000100 	.word	0x50000100
 8004c50:	50000300 	.word	0x50000300
 8004c54:	20000000 	.word	0x20000000
 8004c58:	053e2d63 	.word	0x053e2d63
 8004c5c:	c7520000 	.word	0xc7520000
 8004c60:	50000500 	.word	0x50000500
 8004c64:	cb840000 	.word	0xcb840000

08004c68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fe ffaf 	bl	8003bd8 <LL_ADC_IsEnabled>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d14d      	bne.n	8004d1c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689a      	ldr	r2, [r3, #8]
 8004c86:	4b28      	ldr	r3, [pc, #160]	; (8004d28 <ADC_Enable+0xc0>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00d      	beq.n	8004caa <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c92:	f043 0210 	orr.w	r2, r3, #16
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c9e:	f043 0201 	orr.w	r2, r3, #1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e039      	b.n	8004d1e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fe ff7e 	bl	8003bb0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004cb4:	f7fe fd80 	bl	80037b8 <HAL_GetTick>
 8004cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004cba:	e028      	b.n	8004d0e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7fe ff89 	bl	8003bd8 <LL_ADC_IsEnabled>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d104      	bne.n	8004cd6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fe ff6d 	bl	8003bb0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004cd6:	f7fe fd6f 	bl	80037b8 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d914      	bls.n	8004d0e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d00d      	beq.n	8004d0e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf6:	f043 0210 	orr.w	r2, r3, #16
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d02:	f043 0201 	orr.w	r2, r3, #1
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e007      	b.n	8004d1e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d1cf      	bne.n	8004cbc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	8000003f 	.word	0x8000003f

08004d2c <LL_ADC_IsEnabled>:
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <LL_ADC_IsEnabled+0x18>
 8004d40:	2301      	movs	r3, #1
 8004d42:	e000      	b.n	8004d46 <LL_ADC_IsEnabled+0x1a>
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <LL_ADC_REG_IsConversionOngoing>:
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 0304 	and.w	r3, r3, #4
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d101      	bne.n	8004d6a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d66:	2301      	movs	r3, #1
 8004d68:	e000      	b.n	8004d6c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004d78:	b590      	push	{r4, r7, lr}
 8004d7a:	b0a1      	sub	sp, #132	; 0x84
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d101      	bne.n	8004d96 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004d92:	2302      	movs	r3, #2
 8004d94:	e0e7      	b.n	8004f66 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004d9e:	2300      	movs	r3, #0
 8004da0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004da2:	2300      	movs	r3, #0
 8004da4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dae:	d102      	bne.n	8004db6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004db0:	4b6f      	ldr	r3, [pc, #444]	; (8004f70 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004db2:	60bb      	str	r3, [r7, #8]
 8004db4:	e009      	b.n	8004dca <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a6e      	ldr	r2, [pc, #440]	; (8004f74 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d102      	bne.n	8004dc6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004dc0:	4b6d      	ldr	r3, [pc, #436]	; (8004f78 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004dc2:	60bb      	str	r3, [r7, #8]
 8004dc4:	e001      	b.n	8004dca <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10b      	bne.n	8004de8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd4:	f043 0220 	orr.w	r2, r3, #32
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e0be      	b.n	8004f66 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7ff ffb1 	bl	8004d52 <LL_ADC_REG_IsConversionOngoing>
 8004df0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff ffab 	bl	8004d52 <LL_ADC_REG_IsConversionOngoing>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f040 80a0 	bne.w	8004f44 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f040 809c 	bne.w	8004f44 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e14:	d004      	beq.n	8004e20 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a55      	ldr	r2, [pc, #340]	; (8004f70 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d101      	bne.n	8004e24 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004e20:	4b56      	ldr	r3, [pc, #344]	; (8004f7c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004e22:	e000      	b.n	8004e26 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004e24:	4b56      	ldr	r3, [pc, #344]	; (8004f80 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004e26:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d04b      	beq.n	8004ec8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004e30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	6859      	ldr	r1, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e42:	035b      	lsls	r3, r3, #13
 8004e44:	430b      	orrs	r3, r1
 8004e46:	431a      	orrs	r2, r3
 8004e48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e4a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e54:	d004      	beq.n	8004e60 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a45      	ldr	r2, [pc, #276]	; (8004f70 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d10f      	bne.n	8004e80 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004e60:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004e64:	f7ff ff62 	bl	8004d2c <LL_ADC_IsEnabled>
 8004e68:	4604      	mov	r4, r0
 8004e6a:	4841      	ldr	r0, [pc, #260]	; (8004f70 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004e6c:	f7ff ff5e 	bl	8004d2c <LL_ADC_IsEnabled>
 8004e70:	4603      	mov	r3, r0
 8004e72:	4323      	orrs	r3, r4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bf0c      	ite	eq
 8004e78:	2301      	moveq	r3, #1
 8004e7a:	2300      	movne	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	e012      	b.n	8004ea6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004e80:	483c      	ldr	r0, [pc, #240]	; (8004f74 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004e82:	f7ff ff53 	bl	8004d2c <LL_ADC_IsEnabled>
 8004e86:	4604      	mov	r4, r0
 8004e88:	483b      	ldr	r0, [pc, #236]	; (8004f78 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004e8a:	f7ff ff4f 	bl	8004d2c <LL_ADC_IsEnabled>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	431c      	orrs	r4, r3
 8004e92:	483c      	ldr	r0, [pc, #240]	; (8004f84 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004e94:	f7ff ff4a 	bl	8004d2c <LL_ADC_IsEnabled>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	4323      	orrs	r3, r4
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	bf0c      	ite	eq
 8004ea0:	2301      	moveq	r3, #1
 8004ea2:	2300      	movne	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d056      	beq.n	8004f58 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004eaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004eb2:	f023 030f 	bic.w	r3, r3, #15
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	6811      	ldr	r1, [r2, #0]
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	6892      	ldr	r2, [r2, #8]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ec4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ec6:	e047      	b.n	8004f58 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004ec8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ed0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ed2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004edc:	d004      	beq.n	8004ee8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a23      	ldr	r2, [pc, #140]	; (8004f70 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d10f      	bne.n	8004f08 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004ee8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004eec:	f7ff ff1e 	bl	8004d2c <LL_ADC_IsEnabled>
 8004ef0:	4604      	mov	r4, r0
 8004ef2:	481f      	ldr	r0, [pc, #124]	; (8004f70 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ef4:	f7ff ff1a 	bl	8004d2c <LL_ADC_IsEnabled>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	4323      	orrs	r3, r4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	bf0c      	ite	eq
 8004f00:	2301      	moveq	r3, #1
 8004f02:	2300      	movne	r3, #0
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	e012      	b.n	8004f2e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004f08:	481a      	ldr	r0, [pc, #104]	; (8004f74 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004f0a:	f7ff ff0f 	bl	8004d2c <LL_ADC_IsEnabled>
 8004f0e:	4604      	mov	r4, r0
 8004f10:	4819      	ldr	r0, [pc, #100]	; (8004f78 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004f12:	f7ff ff0b 	bl	8004d2c <LL_ADC_IsEnabled>
 8004f16:	4603      	mov	r3, r0
 8004f18:	431c      	orrs	r4, r3
 8004f1a:	481a      	ldr	r0, [pc, #104]	; (8004f84 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004f1c:	f7ff ff06 	bl	8004d2c <LL_ADC_IsEnabled>
 8004f20:	4603      	mov	r3, r0
 8004f22:	4323      	orrs	r3, r4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	bf0c      	ite	eq
 8004f28:	2301      	moveq	r3, #1
 8004f2a:	2300      	movne	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d012      	beq.n	8004f58 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004f32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004f3a:	f023 030f 	bic.w	r3, r3, #15
 8004f3e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004f40:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f42:	e009      	b.n	8004f58 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f48:	f043 0220 	orr.w	r2, r3, #32
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004f56:	e000      	b.n	8004f5a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f58:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004f62:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3784      	adds	r7, #132	; 0x84
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd90      	pop	{r4, r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	50000100 	.word	0x50000100
 8004f74:	50000400 	.word	0x50000400
 8004f78:	50000500 	.word	0x50000500
 8004f7c:	50000300 	.word	0x50000300
 8004f80:	50000700 	.word	0x50000700
 8004f84:	50000600 	.word	0x50000600

08004f88 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e023      	b.n	8004fe2 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d106      	bne.n	8004fb4 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7fc fb3e 	bl	8001630 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
	...

08004fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ffc:	4b0c      	ldr	r3, [pc, #48]	; (8005030 <__NVIC_SetPriorityGrouping+0x44>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005008:	4013      	ands	r3, r2
 800500a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800501c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800501e:	4a04      	ldr	r2, [pc, #16]	; (8005030 <__NVIC_SetPriorityGrouping+0x44>)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	60d3      	str	r3, [r2, #12]
}
 8005024:	bf00      	nop
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	e000ed00 	.word	0xe000ed00

08005034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005038:	4b04      	ldr	r3, [pc, #16]	; (800504c <__NVIC_GetPriorityGrouping+0x18>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	0a1b      	lsrs	r3, r3, #8
 800503e:	f003 0307 	and.w	r3, r3, #7
}
 8005042:	4618      	mov	r0, r3
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	e000ed00 	.word	0xe000ed00

08005050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	4603      	mov	r3, r0
 8005058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800505a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800505e:	2b00      	cmp	r3, #0
 8005060:	db0b      	blt.n	800507a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005062:	79fb      	ldrb	r3, [r7, #7]
 8005064:	f003 021f 	and.w	r2, r3, #31
 8005068:	4907      	ldr	r1, [pc, #28]	; (8005088 <__NVIC_EnableIRQ+0x38>)
 800506a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	2001      	movs	r0, #1
 8005072:	fa00 f202 	lsl.w	r2, r0, r2
 8005076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	e000e100 	.word	0xe000e100

0800508c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	6039      	str	r1, [r7, #0]
 8005096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800509c:	2b00      	cmp	r3, #0
 800509e:	db0a      	blt.n	80050b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	490c      	ldr	r1, [pc, #48]	; (80050d8 <__NVIC_SetPriority+0x4c>)
 80050a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050aa:	0112      	lsls	r2, r2, #4
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	440b      	add	r3, r1
 80050b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050b4:	e00a      	b.n	80050cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	4908      	ldr	r1, [pc, #32]	; (80050dc <__NVIC_SetPriority+0x50>)
 80050bc:	79fb      	ldrb	r3, [r7, #7]
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	3b04      	subs	r3, #4
 80050c4:	0112      	lsls	r2, r2, #4
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	440b      	add	r3, r1
 80050ca:	761a      	strb	r2, [r3, #24]
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	e000e100 	.word	0xe000e100
 80050dc:	e000ed00 	.word	0xe000ed00

080050e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b089      	sub	sp, #36	; 0x24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	f1c3 0307 	rsb	r3, r3, #7
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	bf28      	it	cs
 80050fe:	2304      	movcs	r3, #4
 8005100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	3304      	adds	r3, #4
 8005106:	2b06      	cmp	r3, #6
 8005108:	d902      	bls.n	8005110 <NVIC_EncodePriority+0x30>
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	3b03      	subs	r3, #3
 800510e:	e000      	b.n	8005112 <NVIC_EncodePriority+0x32>
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	fa02 f303 	lsl.w	r3, r2, r3
 800511e:	43da      	mvns	r2, r3
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	401a      	ands	r2, r3
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005128:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	fa01 f303 	lsl.w	r3, r1, r3
 8005132:	43d9      	mvns	r1, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005138:	4313      	orrs	r3, r2
         );
}
 800513a:	4618      	mov	r0, r3
 800513c:	3724      	adds	r7, #36	; 0x24
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b082      	sub	sp, #8
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7ff ff4c 	bl	8004fec <__NVIC_SetPriorityGrouping>
}
 8005154:	bf00      	nop
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	4603      	mov	r3, r0
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
 8005168:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800516a:	f7ff ff63 	bl	8005034 <__NVIC_GetPriorityGrouping>
 800516e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	68b9      	ldr	r1, [r7, #8]
 8005174:	6978      	ldr	r0, [r7, #20]
 8005176:	f7ff ffb3 	bl	80050e0 <NVIC_EncodePriority>
 800517a:	4602      	mov	r2, r0
 800517c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005180:	4611      	mov	r1, r2
 8005182:	4618      	mov	r0, r3
 8005184:	f7ff ff82 	bl	800508c <__NVIC_SetPriority>
}
 8005188:	bf00      	nop
 800518a:	3718      	adds	r7, #24
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	4603      	mov	r3, r0
 8005198:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800519a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff ff56 	bl	8005050 <__NVIC_EnableIRQ>
}
 80051a4:	bf00      	nop
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e033      	b.n	8005226 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d106      	bne.n	80051d8 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7fc fa60 	bl	8001698 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f854 	bl	800528c <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f822 	bl	800522e <FMAC_Reset>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d10c      	bne.n	800520a <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f4:	f043 0210 	orr.w	r2, r3, #16
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	22a0      	movs	r2, #160	; 0xa0
 8005200:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	73fb      	strb	r3, [r7, #15]
 8005208:	e008      	b.n	800521c <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2220      	movs	r2, #32
 8005214:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8005218:	2300      	movs	r3, #0
 800521a:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8005224:	7bfb      	ldrb	r3, [r7, #15]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005236:	f7fe fabf 	bl	80037b8 <HAL_GetTick>
 800523a:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691a      	ldr	r2, [r3, #16]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800524a:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800524c:	e00f      	b.n	800526e <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 800524e:	f7fe fab3 	bl	80037b8 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800525c:	d907      	bls.n	800526e <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005262:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e00a      	b.n	8005284 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1e8      	bne.n	800524e <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f807 	bl	80052a8 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f81b 	bl	80052d6 <FMAC_ResetOutputStateAndDataPointers>
}
 80052a0:	bf00      	nop
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800530e:	2300      	movs	r3, #0
 8005310:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005312:	e15a      	b.n	80055ca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	2101      	movs	r1, #1
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	fa01 f303 	lsl.w	r3, r1, r3
 8005320:	4013      	ands	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 814c 	beq.w	80055c4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f003 0303 	and.w	r3, r3, #3
 8005334:	2b01      	cmp	r3, #1
 8005336:	d005      	beq.n	8005344 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005340:	2b02      	cmp	r3, #2
 8005342:	d130      	bne.n	80053a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	2203      	movs	r2, #3
 8005350:	fa02 f303 	lsl.w	r3, r2, r3
 8005354:	43db      	mvns	r3, r3
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	4013      	ands	r3, r2
 800535a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	68da      	ldr	r2, [r3, #12]
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	4313      	orrs	r3, r2
 800536c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800537a:	2201      	movs	r2, #1
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	fa02 f303 	lsl.w	r3, r2, r3
 8005382:	43db      	mvns	r3, r3
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	4013      	ands	r3, r2
 8005388:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	091b      	lsrs	r3, r3, #4
 8005390:	f003 0201 	and.w	r2, r3, #1
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	fa02 f303 	lsl.w	r3, r2, r3
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	4313      	orrs	r3, r2
 800539e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d017      	beq.n	80053e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	2203      	movs	r2, #3
 80053be:	fa02 f303 	lsl.w	r3, r2, r3
 80053c2:	43db      	mvns	r3, r3
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	4013      	ands	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	fa02 f303 	lsl.w	r3, r2, r3
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	4313      	orrs	r3, r2
 80053da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d123      	bne.n	8005436 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	08da      	lsrs	r2, r3, #3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3208      	adds	r2, #8
 80053f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	220f      	movs	r2, #15
 8005406:	fa02 f303 	lsl.w	r3, r2, r3
 800540a:	43db      	mvns	r3, r3
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	4013      	ands	r3, r2
 8005410:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	691a      	ldr	r2, [r3, #16]
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	fa02 f303 	lsl.w	r3, r2, r3
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	4313      	orrs	r3, r2
 8005426:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	08da      	lsrs	r2, r3, #3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3208      	adds	r2, #8
 8005430:	6939      	ldr	r1, [r7, #16]
 8005432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	2203      	movs	r2, #3
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	43db      	mvns	r3, r3
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4013      	ands	r3, r2
 800544c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f003 0203 	and.w	r2, r3, #3
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	fa02 f303 	lsl.w	r3, r2, r3
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	4313      	orrs	r3, r2
 8005462:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 80a6 	beq.w	80055c4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005478:	4b5b      	ldr	r3, [pc, #364]	; (80055e8 <HAL_GPIO_Init+0x2e4>)
 800547a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800547c:	4a5a      	ldr	r2, [pc, #360]	; (80055e8 <HAL_GPIO_Init+0x2e4>)
 800547e:	f043 0301 	orr.w	r3, r3, #1
 8005482:	6613      	str	r3, [r2, #96]	; 0x60
 8005484:	4b58      	ldr	r3, [pc, #352]	; (80055e8 <HAL_GPIO_Init+0x2e4>)
 8005486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	60bb      	str	r3, [r7, #8]
 800548e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005490:	4a56      	ldr	r2, [pc, #344]	; (80055ec <HAL_GPIO_Init+0x2e8>)
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	089b      	lsrs	r3, r3, #2
 8005496:	3302      	adds	r3, #2
 8005498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800549c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f003 0303 	and.w	r3, r3, #3
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	220f      	movs	r2, #15
 80054a8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ac:	43db      	mvns	r3, r3
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	4013      	ands	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80054ba:	d01f      	beq.n	80054fc <HAL_GPIO_Init+0x1f8>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a4c      	ldr	r2, [pc, #304]	; (80055f0 <HAL_GPIO_Init+0x2ec>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d019      	beq.n	80054f8 <HAL_GPIO_Init+0x1f4>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a4b      	ldr	r2, [pc, #300]	; (80055f4 <HAL_GPIO_Init+0x2f0>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d013      	beq.n	80054f4 <HAL_GPIO_Init+0x1f0>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a4a      	ldr	r2, [pc, #296]	; (80055f8 <HAL_GPIO_Init+0x2f4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00d      	beq.n	80054f0 <HAL_GPIO_Init+0x1ec>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a49      	ldr	r2, [pc, #292]	; (80055fc <HAL_GPIO_Init+0x2f8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d007      	beq.n	80054ec <HAL_GPIO_Init+0x1e8>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a48      	ldr	r2, [pc, #288]	; (8005600 <HAL_GPIO_Init+0x2fc>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d101      	bne.n	80054e8 <HAL_GPIO_Init+0x1e4>
 80054e4:	2305      	movs	r3, #5
 80054e6:	e00a      	b.n	80054fe <HAL_GPIO_Init+0x1fa>
 80054e8:	2306      	movs	r3, #6
 80054ea:	e008      	b.n	80054fe <HAL_GPIO_Init+0x1fa>
 80054ec:	2304      	movs	r3, #4
 80054ee:	e006      	b.n	80054fe <HAL_GPIO_Init+0x1fa>
 80054f0:	2303      	movs	r3, #3
 80054f2:	e004      	b.n	80054fe <HAL_GPIO_Init+0x1fa>
 80054f4:	2302      	movs	r3, #2
 80054f6:	e002      	b.n	80054fe <HAL_GPIO_Init+0x1fa>
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <HAL_GPIO_Init+0x1fa>
 80054fc:	2300      	movs	r3, #0
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	f002 0203 	and.w	r2, r2, #3
 8005504:	0092      	lsls	r2, r2, #2
 8005506:	4093      	lsls	r3, r2
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800550e:	4937      	ldr	r1, [pc, #220]	; (80055ec <HAL_GPIO_Init+0x2e8>)
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	089b      	lsrs	r3, r3, #2
 8005514:	3302      	adds	r3, #2
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800551c:	4b39      	ldr	r3, [pc, #228]	; (8005604 <HAL_GPIO_Init+0x300>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	43db      	mvns	r3, r3
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4013      	ands	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005540:	4a30      	ldr	r2, [pc, #192]	; (8005604 <HAL_GPIO_Init+0x300>)
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005546:	4b2f      	ldr	r3, [pc, #188]	; (8005604 <HAL_GPIO_Init+0x300>)
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	43db      	mvns	r3, r3
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	4013      	ands	r3, r2
 8005554:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800556a:	4a26      	ldr	r2, [pc, #152]	; (8005604 <HAL_GPIO_Init+0x300>)
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005570:	4b24      	ldr	r3, [pc, #144]	; (8005604 <HAL_GPIO_Init+0x300>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	43db      	mvns	r3, r3
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	4013      	ands	r3, r2
 800557e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4313      	orrs	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005594:	4a1b      	ldr	r2, [pc, #108]	; (8005604 <HAL_GPIO_Init+0x300>)
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800559a:	4b1a      	ldr	r3, [pc, #104]	; (8005604 <HAL_GPIO_Init+0x300>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	43db      	mvns	r3, r3
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	4013      	ands	r3, r2
 80055a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80055be:	4a11      	ldr	r2, [pc, #68]	; (8005604 <HAL_GPIO_Init+0x300>)
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	3301      	adds	r3, #1
 80055c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	fa22 f303 	lsr.w	r3, r2, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f47f ae9d 	bne.w	8005314 <HAL_GPIO_Init+0x10>
  }
}
 80055da:	bf00      	nop
 80055dc:	bf00      	nop
 80055de:	371c      	adds	r7, #28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	40021000 	.word	0x40021000
 80055ec:	40010000 	.word	0x40010000
 80055f0:	48000400 	.word	0x48000400
 80055f4:	48000800 	.word	0x48000800
 80055f8:	48000c00 	.word	0x48000c00
 80055fc:	48001000 	.word	0x48001000
 8005600:	48001400 	.word	0x48001400
 8005604:	40010400 	.word	0x40010400

08005608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	807b      	strh	r3, [r7, #2]
 8005614:	4613      	mov	r3, r2
 8005616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005618:	787b      	ldrb	r3, [r7, #1]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800561e:	887a      	ldrh	r2, [r7, #2]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005624:	e002      	b.n	800562c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005626:	887a      	ldrh	r2, [r7, #2]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800564a:	887a      	ldrh	r2, [r7, #2]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4013      	ands	r3, r2
 8005650:	041a      	lsls	r2, r3, #16
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	43d9      	mvns	r1, r3
 8005656:	887b      	ldrh	r3, [r7, #2]
 8005658:	400b      	ands	r3, r1
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	619a      	str	r2, [r3, #24]
}
 8005660:	bf00      	nop
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	4603      	mov	r3, r0
 8005674:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005676:	4b08      	ldr	r3, [pc, #32]	; (8005698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005678:	695a      	ldr	r2, [r3, #20]
 800567a:	88fb      	ldrh	r3, [r7, #6]
 800567c:	4013      	ands	r3, r2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d006      	beq.n	8005690 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005682:	4a05      	ldr	r2, [pc, #20]	; (8005698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005684:	88fb      	ldrh	r3, [r7, #6]
 8005686:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005688:	88fb      	ldrh	r3, [r7, #6]
 800568a:	4618      	mov	r0, r3
 800568c:	f7fc f824 	bl	80016d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005690:	bf00      	nop
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	40010400 	.word	0x40010400

0800569c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b088      	sub	sp, #32
 80056a0:	af02      	add	r7, sp, #8
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	607a      	str	r2, [r7, #4]
 80056a6:	461a      	mov	r2, r3
 80056a8:	460b      	mov	r3, r1
 80056aa:	817b      	strh	r3, [r7, #10]
 80056ac:	4613      	mov	r3, r2
 80056ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b20      	cmp	r3, #32
 80056ba:	f040 80da 	bne.w	8005872 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <HAL_I2C_Master_Transmit+0x30>
 80056c8:	2302      	movs	r3, #2
 80056ca:	e0d3      	b.n	8005874 <HAL_I2C_Master_Transmit+0x1d8>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056d4:	f7fe f870 	bl	80037b8 <HAL_GetTick>
 80056d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	2319      	movs	r3, #25
 80056e0:	2201      	movs	r2, #1
 80056e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 fb66 	bl	8005db8 <I2C_WaitOnFlagUntilTimeout>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e0be      	b.n	8005874 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2221      	movs	r2, #33	; 0x21
 80056fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2210      	movs	r2, #16
 8005702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	893a      	ldrh	r2, [r7, #8]
 8005716:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005722:	b29b      	uxth	r3, r3
 8005724:	2bff      	cmp	r3, #255	; 0xff
 8005726:	d90e      	bls.n	8005746 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	22ff      	movs	r2, #255	; 0xff
 800572c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005732:	b2da      	uxtb	r2, r3
 8005734:	8979      	ldrh	r1, [r7, #10]
 8005736:	4b51      	ldr	r3, [pc, #324]	; (800587c <HAL_I2C_Master_Transmit+0x1e0>)
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 fce2 	bl	8006108 <I2C_TransferConfig>
 8005744:	e06c      	b.n	8005820 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005754:	b2da      	uxtb	r2, r3
 8005756:	8979      	ldrh	r1, [r7, #10]
 8005758:	4b48      	ldr	r3, [pc, #288]	; (800587c <HAL_I2C_Master_Transmit+0x1e0>)
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 fcd1 	bl	8006108 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005766:	e05b      	b.n	8005820 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	6a39      	ldr	r1, [r7, #32]
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 fb63 	bl	8005e38 <I2C_WaitOnTXISFlagUntilTimeout>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e07b      	b.n	8005874 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	781a      	ldrb	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005796:	b29b      	uxth	r3, r3
 8005798:	3b01      	subs	r3, #1
 800579a:	b29a      	uxth	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a4:	3b01      	subs	r3, #1
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d034      	beq.n	8005820 <HAL_I2C_Master_Transmit+0x184>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d130      	bne.n	8005820 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	2200      	movs	r2, #0
 80057c6:	2180      	movs	r1, #128	; 0x80
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 faf5 	bl	8005db8 <I2C_WaitOnFlagUntilTimeout>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e04d      	b.n	8005874 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057dc:	b29b      	uxth	r3, r3
 80057de:	2bff      	cmp	r3, #255	; 0xff
 80057e0:	d90e      	bls.n	8005800 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	22ff      	movs	r2, #255	; 0xff
 80057e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	8979      	ldrh	r1, [r7, #10]
 80057f0:	2300      	movs	r3, #0
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 fc85 	bl	8006108 <I2C_TransferConfig>
 80057fe:	e00f      	b.n	8005820 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800580e:	b2da      	uxtb	r2, r3
 8005810:	8979      	ldrh	r1, [r7, #10]
 8005812:	2300      	movs	r3, #0
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 fc74 	bl	8006108 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d19e      	bne.n	8005768 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	6a39      	ldr	r1, [r7, #32]
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 fb42 	bl	8005eb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e01a      	b.n	8005874 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2220      	movs	r2, #32
 8005844:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6859      	ldr	r1, [r3, #4]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	4b0b      	ldr	r3, [pc, #44]	; (8005880 <HAL_I2C_Master_Transmit+0x1e4>)
 8005852:	400b      	ands	r3, r1
 8005854:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	e000      	b.n	8005874 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005872:	2302      	movs	r3, #2
  }
}
 8005874:	4618      	mov	r0, r3
 8005876:	3718      	adds	r7, #24
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	80002000 	.word	0x80002000
 8005880:	fe00e800 	.word	0xfe00e800

08005884 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b088      	sub	sp, #32
 8005888:	af02      	add	r7, sp, #8
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	4608      	mov	r0, r1
 800588e:	4611      	mov	r1, r2
 8005890:	461a      	mov	r2, r3
 8005892:	4603      	mov	r3, r0
 8005894:	817b      	strh	r3, [r7, #10]
 8005896:	460b      	mov	r3, r1
 8005898:	813b      	strh	r3, [r7, #8]
 800589a:	4613      	mov	r3, r2
 800589c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b20      	cmp	r3, #32
 80058a8:	f040 80fd 	bne.w	8005aa6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <HAL_I2C_Mem_Read+0x34>
 80058b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d105      	bne.n	80058c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e0f1      	b.n	8005aa8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d101      	bne.n	80058d2 <HAL_I2C_Mem_Read+0x4e>
 80058ce:	2302      	movs	r3, #2
 80058d0:	e0ea      	b.n	8005aa8 <HAL_I2C_Mem_Read+0x224>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058da:	f7fd ff6d 	bl	80037b8 <HAL_GetTick>
 80058de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	2319      	movs	r3, #25
 80058e6:	2201      	movs	r2, #1
 80058e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 fa63 	bl	8005db8 <I2C_WaitOnFlagUntilTimeout>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e0d5      	b.n	8005aa8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2222      	movs	r2, #34	; 0x22
 8005900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2240      	movs	r2, #64	; 0x40
 8005908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6a3a      	ldr	r2, [r7, #32]
 8005916:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800591c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005924:	88f8      	ldrh	r0, [r7, #6]
 8005926:	893a      	ldrh	r2, [r7, #8]
 8005928:	8979      	ldrh	r1, [r7, #10]
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	9301      	str	r3, [sp, #4]
 800592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	4603      	mov	r3, r0
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 f9c7 	bl	8005cc8 <I2C_RequestMemoryRead>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d005      	beq.n	800594c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e0ad      	b.n	8005aa8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005950:	b29b      	uxth	r3, r3
 8005952:	2bff      	cmp	r3, #255	; 0xff
 8005954:	d90e      	bls.n	8005974 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	22ff      	movs	r2, #255	; 0xff
 800595a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005960:	b2da      	uxtb	r2, r3
 8005962:	8979      	ldrh	r1, [r7, #10]
 8005964:	4b52      	ldr	r3, [pc, #328]	; (8005ab0 <HAL_I2C_Mem_Read+0x22c>)
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 fbcb 	bl	8006108 <I2C_TransferConfig>
 8005972:	e00f      	b.n	8005994 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005978:	b29a      	uxth	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005982:	b2da      	uxtb	r2, r3
 8005984:	8979      	ldrh	r1, [r7, #10]
 8005986:	4b4a      	ldr	r3, [pc, #296]	; (8005ab0 <HAL_I2C_Mem_Read+0x22c>)
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f000 fbba 	bl	8006108 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599a:	2200      	movs	r2, #0
 800599c:	2104      	movs	r1, #4
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 fa0a 	bl	8005db8 <I2C_WaitOnFlagUntilTimeout>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e07c      	b.n	8005aa8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	b2d2      	uxtb	r2, r2
 80059ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ca:	3b01      	subs	r3, #1
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	3b01      	subs	r3, #1
 80059da:	b29a      	uxth	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d034      	beq.n	8005a54 <HAL_I2C_Mem_Read+0x1d0>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d130      	bne.n	8005a54 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f8:	2200      	movs	r2, #0
 80059fa:	2180      	movs	r1, #128	; 0x80
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 f9db 	bl	8005db8 <I2C_WaitOnFlagUntilTimeout>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e04d      	b.n	8005aa8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	2bff      	cmp	r3, #255	; 0xff
 8005a14:	d90e      	bls.n	8005a34 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	22ff      	movs	r2, #255	; 0xff
 8005a1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	8979      	ldrh	r1, [r7, #10]
 8005a24:	2300      	movs	r3, #0
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f000 fb6b 	bl	8006108 <I2C_TransferConfig>
 8005a32:	e00f      	b.n	8005a54 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	8979      	ldrh	r1, [r7, #10]
 8005a46:	2300      	movs	r3, #0
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 fb5a 	bl	8006108 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d19a      	bne.n	8005994 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f000 fa28 	bl	8005eb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e01a      	b.n	8005aa8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2220      	movs	r2, #32
 8005a78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6859      	ldr	r1, [r3, #4]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	4b0b      	ldr	r3, [pc, #44]	; (8005ab4 <HAL_I2C_Mem_Read+0x230>)
 8005a86:	400b      	ands	r3, r1
 8005a88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	e000      	b.n	8005aa8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005aa6:	2302      	movs	r3, #2
  }
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3718      	adds	r7, #24
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	80002400 	.word	0x80002400
 8005ab4:	fe00e800 	.word	0xfe00e800

08005ab8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08a      	sub	sp, #40	; 0x28
 8005abc:	af02      	add	r7, sp, #8
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	607a      	str	r2, [r7, #4]
 8005ac2:	603b      	str	r3, [r7, #0]
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b20      	cmp	r3, #32
 8005ad6:	f040 80f1 	bne.w	8005cbc <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ae8:	d101      	bne.n	8005aee <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005aea:	2302      	movs	r3, #2
 8005aec:	e0e7      	b.n	8005cbe <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d101      	bne.n	8005afc <HAL_I2C_IsDeviceReady+0x44>
 8005af8:	2302      	movs	r3, #2
 8005afa:	e0e0      	b.n	8005cbe <HAL_I2C_IsDeviceReady+0x206>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2224      	movs	r2, #36	; 0x24
 8005b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d107      	bne.n	8005b2a <HAL_I2C_IsDeviceReady+0x72>
 8005b1a:	897b      	ldrh	r3, [r7, #10]
 8005b1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005b28:	e004      	b.n	8005b34 <HAL_I2C_IsDeviceReady+0x7c>
 8005b2a:	897b      	ldrh	r3, [r7, #10]
 8005b2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b30:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	6812      	ldr	r2, [r2, #0]
 8005b38:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005b3a:	f7fd fe3d 	bl	80037b8 <HAL_GetTick>
 8005b3e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	f003 0320 	and.w	r3, r3, #32
 8005b4a:	2b20      	cmp	r3, #32
 8005b4c:	bf0c      	ite	eq
 8005b4e:	2301      	moveq	r3, #1
 8005b50:	2300      	movne	r3, #0
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	f003 0310 	and.w	r3, r3, #16
 8005b60:	2b10      	cmp	r3, #16
 8005b62:	bf0c      	ite	eq
 8005b64:	2301      	moveq	r3, #1
 8005b66:	2300      	movne	r3, #0
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005b6c:	e034      	b.n	8005bd8 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b74:	d01a      	beq.n	8005bac <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b76:	f7fd fe1f 	bl	80037b8 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d302      	bcc.n	8005b8c <HAL_I2C_IsDeviceReady+0xd4>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10f      	bne.n	8005bac <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b98:	f043 0220 	orr.w	r2, r3, #32
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e088      	b.n	8005cbe <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	f003 0320 	and.w	r3, r3, #32
 8005bb6:	2b20      	cmp	r3, #32
 8005bb8:	bf0c      	ite	eq
 8005bba:	2301      	moveq	r3, #1
 8005bbc:	2300      	movne	r3, #0
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	f003 0310 	and.w	r3, r3, #16
 8005bcc:	2b10      	cmp	r3, #16
 8005bce:	bf0c      	ite	eq
 8005bd0:	2301      	moveq	r3, #1
 8005bd2:	2300      	movne	r3, #0
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005bd8:	7ffb      	ldrb	r3, [r7, #31]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d102      	bne.n	8005be4 <HAL_I2C_IsDeviceReady+0x12c>
 8005bde:	7fbb      	ldrb	r3, [r7, #30]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0c4      	beq.n	8005b6e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	f003 0310 	and.w	r3, r3, #16
 8005bee:	2b10      	cmp	r3, #16
 8005bf0:	d01a      	beq.n	8005c28 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2120      	movs	r1, #32
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 f8db 	bl	8005db8 <I2C_WaitOnFlagUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e058      	b.n	8005cbe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2220      	movs	r2, #32
 8005c12:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	e04a      	b.n	8005cbe <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2120      	movs	r1, #32
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 f8c0 	bl	8005db8 <I2C_WaitOnFlagUntilTimeout>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e03d      	b.n	8005cbe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2210      	movs	r2, #16
 8005c48:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d118      	bne.n	8005c8c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c68:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2200      	movs	r2, #0
 8005c72:	2120      	movs	r1, #32
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 f89f 	bl	8005db8 <I2C_WaitOnFlagUntilTimeout>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e01c      	b.n	8005cbe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	f63f af3b 	bhi.w	8005b12 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca8:	f043 0220 	orr.w	r2, r3, #32
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e000      	b.n	8005cbe <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005cbc:	2302      	movs	r3, #2
  }
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3720      	adds	r7, #32
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
	...

08005cc8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	4608      	mov	r0, r1
 8005cd2:	4611      	mov	r1, r2
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	817b      	strh	r3, [r7, #10]
 8005cda:	460b      	mov	r3, r1
 8005cdc:	813b      	strh	r3, [r7, #8]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005ce2:	88fb      	ldrh	r3, [r7, #6]
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	8979      	ldrh	r1, [r7, #10]
 8005ce8:	4b20      	ldr	r3, [pc, #128]	; (8005d6c <I2C_RequestMemoryRead+0xa4>)
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	2300      	movs	r3, #0
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 fa0a 	bl	8006108 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cf4:	69fa      	ldr	r2, [r7, #28]
 8005cf6:	69b9      	ldr	r1, [r7, #24]
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 f89d 	bl	8005e38 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e02c      	b.n	8005d62 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d08:	88fb      	ldrh	r3, [r7, #6]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d105      	bne.n	8005d1a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d0e:	893b      	ldrh	r3, [r7, #8]
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	629a      	str	r2, [r3, #40]	; 0x28
 8005d18:	e015      	b.n	8005d46 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d1a:	893b      	ldrh	r3, [r7, #8]
 8005d1c:	0a1b      	lsrs	r3, r3, #8
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d28:	69fa      	ldr	r2, [r7, #28]
 8005d2a:	69b9      	ldr	r1, [r7, #24]
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 f883 	bl	8005e38 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e012      	b.n	8005d62 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d3c:	893b      	ldrh	r3, [r7, #8]
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	2140      	movs	r1, #64	; 0x40
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 f831 	bl	8005db8 <I2C_WaitOnFlagUntilTimeout>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e000      	b.n	8005d62 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	80002000 	.word	0x80002000

08005d70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d103      	bne.n	8005d8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d007      	beq.n	8005dac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699a      	ldr	r2, [r3, #24]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 0201 	orr.w	r2, r2, #1
 8005daa:	619a      	str	r2, [r3, #24]
  }
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	603b      	str	r3, [r7, #0]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dc8:	e022      	b.n	8005e10 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dd0:	d01e      	beq.n	8005e10 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dd2:	f7fd fcf1 	bl	80037b8 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d302      	bcc.n	8005de8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d113      	bne.n	8005e10 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dec:	f043 0220 	orr.w	r2, r3, #32
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2220      	movs	r2, #32
 8005df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e00f      	b.n	8005e30 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699a      	ldr	r2, [r3, #24]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	bf0c      	ite	eq
 8005e20:	2301      	moveq	r3, #1
 8005e22:	2300      	movne	r3, #0
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	461a      	mov	r2, r3
 8005e28:	79fb      	ldrb	r3, [r7, #7]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d0cd      	beq.n	8005dca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e44:	e02c      	b.n	8005ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	68b9      	ldr	r1, [r7, #8]
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 f870 	bl	8005f30 <I2C_IsErrorOccurred>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e02a      	b.n	8005eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e60:	d01e      	beq.n	8005ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e62:	f7fd fca9 	bl	80037b8 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d302      	bcc.n	8005e78 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d113      	bne.n	8005ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7c:	f043 0220 	orr.w	r2, r3, #32
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2220      	movs	r2, #32
 8005e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e007      	b.n	8005eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d1cb      	bne.n	8005e46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ec4:	e028      	b.n	8005f18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	68b9      	ldr	r1, [r7, #8]
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f000 f830 	bl	8005f30 <I2C_IsErrorOccurred>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e026      	b.n	8005f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eda:	f7fd fc6d 	bl	80037b8 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d302      	bcc.n	8005ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d113      	bne.n	8005f18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef4:	f043 0220 	orr.w	r2, r3, #32
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e007      	b.n	8005f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b20      	cmp	r3, #32
 8005f24:	d1cf      	bne.n	8005ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08a      	sub	sp, #40	; 0x28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d075      	beq.n	8006048 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2210      	movs	r2, #16
 8005f62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f64:	e056      	b.n	8006014 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f6c:	d052      	beq.n	8006014 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f6e:	f7fd fc23 	bl	80037b8 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d302      	bcc.n	8005f84 <I2C_IsErrorOccurred+0x54>
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d147      	bne.n	8006014 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fa6:	d12e      	bne.n	8006006 <I2C_IsErrorOccurred+0xd6>
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fae:	d02a      	beq.n	8006006 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005fb0:	7cfb      	ldrb	r3, [r7, #19]
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	d027      	beq.n	8006006 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fc4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005fc6:	f7fd fbf7 	bl	80037b8 <HAL_GetTick>
 8005fca:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fcc:	e01b      	b.n	8006006 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005fce:	f7fd fbf3 	bl	80037b8 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	2b19      	cmp	r3, #25
 8005fda:	d914      	bls.n	8006006 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe0:	f043 0220 	orr.w	r2, r3, #32
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	f003 0320 	and.w	r3, r3, #32
 8006010:	2b20      	cmp	r3, #32
 8006012:	d1dc      	bne.n	8005fce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	f003 0320 	and.w	r3, r3, #32
 800601e:	2b20      	cmp	r3, #32
 8006020:	d003      	beq.n	800602a <I2C_IsErrorOccurred+0xfa>
 8006022:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006026:	2b00      	cmp	r3, #0
 8006028:	d09d      	beq.n	8005f66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800602a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800602e:	2b00      	cmp	r3, #0
 8006030:	d103      	bne.n	800603a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2220      	movs	r2, #32
 8006038:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	f043 0304 	orr.w	r3, r3, #4
 8006040:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00b      	beq.n	8006072 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	f043 0301 	orr.w	r3, r3, #1
 8006060:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f44f 7280 	mov.w	r2, #256	; 0x100
 800606a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00b      	beq.n	8006094 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	f043 0308 	orr.w	r3, r3, #8
 8006082:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800608c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00b      	beq.n	80060b6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	f043 0302 	orr.w	r3, r3, #2
 80060a4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80060b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d01c      	beq.n	80060f8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f7ff fe56 	bl	8005d70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6859      	ldr	r1, [r3, #4]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	4b0d      	ldr	r3, [pc, #52]	; (8006104 <I2C_IsErrorOccurred+0x1d4>)
 80060d0:	400b      	ands	r3, r1
 80060d2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	431a      	orrs	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2220      	movs	r2, #32
 80060e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80060f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3728      	adds	r7, #40	; 0x28
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	fe00e800 	.word	0xfe00e800

08006108 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	607b      	str	r3, [r7, #4]
 8006112:	460b      	mov	r3, r1
 8006114:	817b      	strh	r3, [r7, #10]
 8006116:	4613      	mov	r3, r2
 8006118:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800611a:	897b      	ldrh	r3, [r7, #10]
 800611c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006120:	7a7b      	ldrb	r3, [r7, #9]
 8006122:	041b      	lsls	r3, r3, #16
 8006124:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006128:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800612e:	6a3b      	ldr	r3, [r7, #32]
 8006130:	4313      	orrs	r3, r2
 8006132:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006136:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	6a3b      	ldr	r3, [r7, #32]
 8006140:	0d5b      	lsrs	r3, r3, #21
 8006142:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006146:	4b08      	ldr	r3, [pc, #32]	; (8006168 <I2C_TransferConfig+0x60>)
 8006148:	430b      	orrs	r3, r1
 800614a:	43db      	mvns	r3, r3
 800614c:	ea02 0103 	and.w	r1, r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	430a      	orrs	r2, r1
 8006158:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800615a:	bf00      	nop
 800615c:	371c      	adds	r7, #28
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	03ff63ff 	.word	0x03ff63ff

0800616c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800616c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800616e:	b08b      	sub	sp, #44	; 0x2c
 8006170:	af06      	add	r7, sp, #24
 8006172:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e0d7      	b.n	800632e <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d106      	bne.n	8006198 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f00b ff7a 	bl	801208c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2203      	movs	r2, #3
 800619c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f005 fc64 	bl	800ba72 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061aa:	2300      	movs	r3, #0
 80061ac:	73fb      	strb	r3, [r7, #15]
 80061ae:	e04c      	b.n	800624a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	4613      	mov	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	440b      	add	r3, r1
 80061c0:	3301      	adds	r3, #1
 80061c2:	2201      	movs	r2, #1
 80061c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	4613      	mov	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	440b      	add	r3, r1
 80061d6:	7bfa      	ldrb	r2, [r7, #15]
 80061d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80061da:	7bfa      	ldrb	r2, [r7, #15]
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
 80061de:	b298      	uxth	r0, r3
 80061e0:	6879      	ldr	r1, [r7, #4]
 80061e2:	4613      	mov	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	440b      	add	r3, r1
 80061ec:	3336      	adds	r3, #54	; 0x36
 80061ee:	4602      	mov	r2, r0
 80061f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	4613      	mov	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	440b      	add	r3, r1
 8006202:	3303      	adds	r3, #3
 8006204:	2200      	movs	r2, #0
 8006206:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006208:	7bfa      	ldrb	r2, [r7, #15]
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	4613      	mov	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	00db      	lsls	r3, r3, #3
 8006214:	440b      	add	r3, r1
 8006216:	3338      	adds	r3, #56	; 0x38
 8006218:	2200      	movs	r2, #0
 800621a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800621c:	7bfa      	ldrb	r2, [r7, #15]
 800621e:	6879      	ldr	r1, [r7, #4]
 8006220:	4613      	mov	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	440b      	add	r3, r1
 800622a:	333c      	adds	r3, #60	; 0x3c
 800622c:	2200      	movs	r2, #0
 800622e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006230:	7bfa      	ldrb	r2, [r7, #15]
 8006232:	6879      	ldr	r1, [r7, #4]
 8006234:	4613      	mov	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	440b      	add	r3, r1
 800623e:	3340      	adds	r3, #64	; 0x40
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006244:	7bfb      	ldrb	r3, [r7, #15]
 8006246:	3301      	adds	r3, #1
 8006248:	73fb      	strb	r3, [r7, #15]
 800624a:	7bfa      	ldrb	r2, [r7, #15]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	429a      	cmp	r2, r3
 8006252:	d3ad      	bcc.n	80061b0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006254:	2300      	movs	r3, #0
 8006256:	73fb      	strb	r3, [r7, #15]
 8006258:	e044      	b.n	80062e4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800625a:	7bfa      	ldrb	r2, [r7, #15]
 800625c:	6879      	ldr	r1, [r7, #4]
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	00db      	lsls	r3, r3, #3
 8006266:	440b      	add	r3, r1
 8006268:	f203 1369 	addw	r3, r3, #361	; 0x169
 800626c:	2200      	movs	r2, #0
 800626e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006270:	7bfa      	ldrb	r2, [r7, #15]
 8006272:	6879      	ldr	r1, [r7, #4]
 8006274:	4613      	mov	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	440b      	add	r3, r1
 800627e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006282:	7bfa      	ldrb	r2, [r7, #15]
 8006284:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006286:	7bfa      	ldrb	r2, [r7, #15]
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	4613      	mov	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	00db      	lsls	r3, r3, #3
 8006292:	440b      	add	r3, r1
 8006294:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006298:	2200      	movs	r2, #0
 800629a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800629c:	7bfa      	ldrb	r2, [r7, #15]
 800629e:	6879      	ldr	r1, [r7, #4]
 80062a0:	4613      	mov	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	00db      	lsls	r3, r3, #3
 80062a8:	440b      	add	r3, r1
 80062aa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80062b2:	7bfa      	ldrb	r2, [r7, #15]
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	4613      	mov	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	440b      	add	r3, r1
 80062c0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80062c4:	2200      	movs	r2, #0
 80062c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80062c8:	7bfa      	ldrb	r2, [r7, #15]
 80062ca:	6879      	ldr	r1, [r7, #4]
 80062cc:	4613      	mov	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	00db      	lsls	r3, r3, #3
 80062d4:	440b      	add	r3, r1
 80062d6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80062da:	2200      	movs	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062de:	7bfb      	ldrb	r3, [r7, #15]
 80062e0:	3301      	adds	r3, #1
 80062e2:	73fb      	strb	r3, [r7, #15]
 80062e4:	7bfa      	ldrb	r2, [r7, #15]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d3b5      	bcc.n	800625a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	603b      	str	r3, [r7, #0]
 80062f4:	687e      	ldr	r6, [r7, #4]
 80062f6:	466d      	mov	r5, sp
 80062f8:	f106 0410 	add.w	r4, r6, #16
 80062fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006300:	6823      	ldr	r3, [r4, #0]
 8006302:	602b      	str	r3, [r5, #0]
 8006304:	1d33      	adds	r3, r6, #4
 8006306:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006308:	6838      	ldr	r0, [r7, #0]
 800630a:	f005 fbcd 	bl	800baa8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d102      	bne.n	800632c <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f001 fc29 	bl	8007b7e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006336 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b082      	sub	sp, #8
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <HAL_PCD_Start+0x16>
 8006348:	2302      	movs	r3, #2
 800634a:	e012      	b.n	8006372 <HAL_PCD_Start+0x3c>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4618      	mov	r0, r3
 800635a:	f005 fb73 	bl	800ba44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4618      	mov	r0, r3
 8006364:	f007 fd8c 	bl	800de80 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3708      	adds	r7, #8
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b084      	sub	sp, #16
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4618      	mov	r0, r3
 8006388:	f007 fd91 	bl	800deae <USB_ReadInterrupts>
 800638c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d003      	beq.n	80063a0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fb26 	bl	80069ea <PCD_EP_ISR_Handler>

    return;
 800639e:	e110      	b.n	80065c2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d013      	beq.n	80063d2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063bc:	b292      	uxth	r2, r2
 80063be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f00b fef3 	bl	80121ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80063c8:	2100      	movs	r1, #0
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f8fc 	bl	80065c8 <HAL_PCD_SetAddress>

    return;
 80063d0:	e0f7      	b.n	80065c2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00c      	beq.n	80063f6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063ee:	b292      	uxth	r2, r2
 80063f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80063f4:	e0e5      	b.n	80065c2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00c      	beq.n	800641a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006408:	b29a      	uxth	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006412:	b292      	uxth	r2, r2
 8006414:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006418:	e0d3      	b.n	80065c2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d034      	beq.n	800648e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800642c:	b29a      	uxth	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0204 	bic.w	r2, r2, #4
 8006436:	b292      	uxth	r2, r2
 8006438:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006444:	b29a      	uxth	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 0208 	bic.w	r2, r2, #8
 800644e:	b292      	uxth	r2, r2
 8006450:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800645a:	2b01      	cmp	r3, #1
 800645c:	d107      	bne.n	800646e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006466:	2100      	movs	r1, #0
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f00c f895 	bl	8012598 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f00b fed6 	bl	8012220 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800647c:	b29a      	uxth	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006486:	b292      	uxth	r2, r2
 8006488:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800648c:	e099      	b.n	80065c2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006494:	2b00      	cmp	r3, #0
 8006496:	d027      	beq.n	80064e8 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0208 	orr.w	r2, r2, #8
 80064aa:	b292      	uxth	r2, r2
 80064ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064c2:	b292      	uxth	r2, r2
 80064c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f042 0204 	orr.w	r2, r2, #4
 80064da:	b292      	uxth	r2, r2
 80064dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f00b fe83 	bl	80121ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80064e6:	e06c      	b.n	80065c2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d040      	beq.n	8006574 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006504:	b292      	uxth	r2, r2
 8006506:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d12b      	bne.n	800656c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800651c:	b29a      	uxth	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f042 0204 	orr.w	r2, r2, #4
 8006526:	b292      	uxth	r2, r2
 8006528:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006534:	b29a      	uxth	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f042 0208 	orr.w	r2, r2, #8
 800653e:	b292      	uxth	r2, r2
 8006540:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006554:	b29b      	uxth	r3, r3
 8006556:	089b      	lsrs	r3, r3, #2
 8006558:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006562:	2101      	movs	r1, #1
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f00c f817 	bl	8012598 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800656a:	e02a      	b.n	80065c2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f00b fe3d 	bl	80121ec <HAL_PCD_SuspendCallback>
    return;
 8006572:	e026      	b.n	80065c2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00f      	beq.n	800659e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006586:	b29a      	uxth	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006590:	b292      	uxth	r2, r2
 8006592:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f00b fdfb 	bl	8012192 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800659c:	e011      	b.n	80065c2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00c      	beq.n	80065c2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065ba:	b292      	uxth	r2, r2
 80065bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80065c0:	bf00      	nop
  }
}
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	460b      	mov	r3, r1
 80065d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d101      	bne.n	80065e2 <HAL_PCD_SetAddress+0x1a>
 80065de:	2302      	movs	r3, #2
 80065e0:	e013      	b.n	800660a <HAL_PCD_SetAddress+0x42>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	78fa      	ldrb	r2, [r7, #3]
 80065ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	78fa      	ldrb	r2, [r7, #3]
 80065f8:	4611      	mov	r1, r2
 80065fa:	4618      	mov	r0, r3
 80065fc:	f007 fc2c 	bl	800de58 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b084      	sub	sp, #16
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
 800661a:	4608      	mov	r0, r1
 800661c:	4611      	mov	r1, r2
 800661e:	461a      	mov	r2, r3
 8006620:	4603      	mov	r3, r0
 8006622:	70fb      	strb	r3, [r7, #3]
 8006624:	460b      	mov	r3, r1
 8006626:	803b      	strh	r3, [r7, #0]
 8006628:	4613      	mov	r3, r2
 800662a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800662c:	2300      	movs	r3, #0
 800662e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006630:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006634:	2b00      	cmp	r3, #0
 8006636:	da0e      	bge.n	8006656 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006638:	78fb      	ldrb	r3, [r7, #3]
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	1c5a      	adds	r2, r3, #1
 8006640:	4613      	mov	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	00db      	lsls	r3, r3, #3
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	4413      	add	r3, r2
 800664c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2201      	movs	r2, #1
 8006652:	705a      	strb	r2, [r3, #1]
 8006654:	e00e      	b.n	8006674 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006656:	78fb      	ldrb	r3, [r7, #3]
 8006658:	f003 0207 	and.w	r2, r3, #7
 800665c:	4613      	mov	r3, r2
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4413      	add	r3, r2
 8006662:	00db      	lsls	r3, r3, #3
 8006664:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	4413      	add	r3, r2
 800666c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006674:	78fb      	ldrb	r3, [r7, #3]
 8006676:	f003 0307 	and.w	r3, r3, #7
 800667a:	b2da      	uxtb	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006680:	883a      	ldrh	r2, [r7, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	78ba      	ldrb	r2, [r7, #2]
 800668a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	785b      	ldrb	r3, [r3, #1]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d004      	beq.n	800669e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	b29a      	uxth	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800669e:	78bb      	ldrb	r3, [r7, #2]
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d102      	bne.n	80066aa <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d101      	bne.n	80066b8 <HAL_PCD_EP_Open+0xa6>
 80066b4:	2302      	movs	r3, #2
 80066b6:	e00e      	b.n	80066d6 <HAL_PCD_EP_Open+0xc4>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68f9      	ldr	r1, [r7, #12]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f005 fa10 	bl	800baec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80066d4:	7afb      	ldrb	r3, [r7, #11]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b084      	sub	sp, #16
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	460b      	mov	r3, r1
 80066e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80066ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	da0e      	bge.n	8006710 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066f2:	78fb      	ldrb	r3, [r7, #3]
 80066f4:	f003 0307 	and.w	r3, r3, #7
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	4613      	mov	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4413      	add	r3, r2
 8006700:	00db      	lsls	r3, r3, #3
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	4413      	add	r3, r2
 8006706:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2201      	movs	r2, #1
 800670c:	705a      	strb	r2, [r3, #1]
 800670e:	e00e      	b.n	800672e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006710:	78fb      	ldrb	r3, [r7, #3]
 8006712:	f003 0207 	and.w	r2, r3, #7
 8006716:	4613      	mov	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	00db      	lsls	r3, r3, #3
 800671e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	4413      	add	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800672e:	78fb      	ldrb	r3, [r7, #3]
 8006730:	f003 0307 	and.w	r3, r3, #7
 8006734:	b2da      	uxtb	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006740:	2b01      	cmp	r3, #1
 8006742:	d101      	bne.n	8006748 <HAL_PCD_EP_Close+0x6a>
 8006744:	2302      	movs	r3, #2
 8006746:	e00e      	b.n	8006766 <HAL_PCD_EP_Close+0x88>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68f9      	ldr	r1, [r7, #12]
 8006756:	4618      	mov	r0, r3
 8006758:	f005 fd5c 	bl	800c214 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b086      	sub	sp, #24
 8006772:	af00      	add	r7, sp, #0
 8006774:	60f8      	str	r0, [r7, #12]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	603b      	str	r3, [r7, #0]
 800677a:	460b      	mov	r3, r1
 800677c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800677e:	7afb      	ldrb	r3, [r7, #11]
 8006780:	f003 0207 	and.w	r2, r3, #7
 8006784:	4613      	mov	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	00db      	lsls	r3, r3, #3
 800678c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	4413      	add	r3, r2
 8006794:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	2200      	movs	r2, #0
 80067a6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	2200      	movs	r2, #0
 80067ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067ae:	7afb      	ldrb	r3, [r7, #11]
 80067b0:	f003 0307 	and.w	r3, r3, #7
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80067ba:	7afb      	ldrb	r3, [r7, #11]
 80067bc:	f003 0307 	and.w	r3, r3, #7
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d106      	bne.n	80067d2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6979      	ldr	r1, [r7, #20]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f005 ff0f 	bl	800c5ee <USB_EPStartXfer>
 80067d0:	e005      	b.n	80067de <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6979      	ldr	r1, [r7, #20]
 80067d8:	4618      	mov	r0, r3
 80067da:	f005 ff08 	bl	800c5ee <USB_EPStartXfer>
  }

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3718      	adds	r7, #24
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	460b      	mov	r3, r1
 80067f2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80067f4:	78fb      	ldrb	r3, [r7, #3]
 80067f6:	f003 0207 	and.w	r2, r3, #7
 80067fa:	6879      	ldr	r1, [r7, #4]
 80067fc:	4613      	mov	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	00db      	lsls	r3, r3, #3
 8006804:	440b      	add	r3, r1
 8006806:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800680a:	681b      	ldr	r3, [r3, #0]
}
 800680c:	4618      	mov	r0, r3
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	607a      	str	r2, [r7, #4]
 8006822:	603b      	str	r3, [r7, #0]
 8006824:	460b      	mov	r3, r1
 8006826:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006828:	7afb      	ldrb	r3, [r7, #11]
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	1c5a      	adds	r2, r3, #1
 8006830:	4613      	mov	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	00db      	lsls	r3, r3, #3
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	4413      	add	r3, r2
 800683c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	2200      	movs	r2, #0
 800685c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2201      	movs	r2, #1
 8006862:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006864:	7afb      	ldrb	r3, [r7, #11]
 8006866:	f003 0307 	and.w	r3, r3, #7
 800686a:	b2da      	uxtb	r2, r3
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006870:	7afb      	ldrb	r3, [r7, #11]
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	2b00      	cmp	r3, #0
 8006878:	d106      	bne.n	8006888 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	6979      	ldr	r1, [r7, #20]
 8006880:	4618      	mov	r0, r3
 8006882:	f005 feb4 	bl	800c5ee <USB_EPStartXfer>
 8006886:	e005      	b.n	8006894 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6979      	ldr	r1, [r7, #20]
 800688e:	4618      	mov	r0, r3
 8006890:	f005 fead 	bl	800c5ee <USB_EPStartXfer>
  }

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3718      	adds	r7, #24
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b084      	sub	sp, #16
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	460b      	mov	r3, r1
 80068a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80068aa:	78fb      	ldrb	r3, [r7, #3]
 80068ac:	f003 0207 	and.w	r2, r3, #7
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d901      	bls.n	80068bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e03e      	b.n	800693a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80068bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	da0e      	bge.n	80068e2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068c4:	78fb      	ldrb	r3, [r7, #3]
 80068c6:	f003 0307 	and.w	r3, r3, #7
 80068ca:	1c5a      	adds	r2, r3, #1
 80068cc:	4613      	mov	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	4413      	add	r3, r2
 80068d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2201      	movs	r2, #1
 80068de:	705a      	strb	r2, [r3, #1]
 80068e0:	e00c      	b.n	80068fc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80068e2:	78fa      	ldrb	r2, [r7, #3]
 80068e4:	4613      	mov	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	00db      	lsls	r3, r3, #3
 80068ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	4413      	add	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2201      	movs	r2, #1
 8006900:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006902:	78fb      	ldrb	r3, [r7, #3]
 8006904:	f003 0307 	and.w	r3, r3, #7
 8006908:	b2da      	uxtb	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006914:	2b01      	cmp	r3, #1
 8006916:	d101      	bne.n	800691c <HAL_PCD_EP_SetStall+0x7e>
 8006918:	2302      	movs	r3, #2
 800691a:	e00e      	b.n	800693a <HAL_PCD_EP_SetStall+0x9c>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68f9      	ldr	r1, [r7, #12]
 800692a:	4618      	mov	r0, r3
 800692c:	f007 f995 	bl	800dc5a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b084      	sub	sp, #16
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	460b      	mov	r3, r1
 800694c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800694e:	78fb      	ldrb	r3, [r7, #3]
 8006950:	f003 020f 	and.w	r2, r3, #15
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	429a      	cmp	r2, r3
 800695a:	d901      	bls.n	8006960 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e040      	b.n	80069e2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006960:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006964:	2b00      	cmp	r3, #0
 8006966:	da0e      	bge.n	8006986 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006968:	78fb      	ldrb	r3, [r7, #3]
 800696a:	f003 0307 	and.w	r3, r3, #7
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	4613      	mov	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4413      	add	r3, r2
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	4413      	add	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2201      	movs	r2, #1
 8006982:	705a      	strb	r2, [r3, #1]
 8006984:	e00e      	b.n	80069a4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006986:	78fb      	ldrb	r3, [r7, #3]
 8006988:	f003 0207 	and.w	r2, r3, #7
 800698c:	4613      	mov	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	4413      	add	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069aa:	78fb      	ldrb	r3, [r7, #3]
 80069ac:	f003 0307 	and.w	r3, r3, #7
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d101      	bne.n	80069c4 <HAL_PCD_EP_ClrStall+0x82>
 80069c0:	2302      	movs	r3, #2
 80069c2:	e00e      	b.n	80069e2 <HAL_PCD_EP_ClrStall+0xa0>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68f9      	ldr	r1, [r7, #12]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f007 f992 	bl	800dcfc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b096      	sub	sp, #88	; 0x58
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80069f2:	e39c      	b.n	800712e <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80069fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006a00:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	f003 030f 	and.w	r3, r3, #15
 8006a0a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8006a0e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f040 815e 	bne.w	8006cd4 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006a18:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a1c:	f003 0310 	and.w	r3, r3, #16
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d150      	bne.n	8006ac6 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a34:	81fb      	strh	r3, [r7, #14]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	89fb      	ldrh	r3, [r7, #14]
 8006a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	3328      	adds	r3, #40	; 0x28
 8006a4c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	461a      	mov	r2, r3
 8006a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	00db      	lsls	r3, r3, #3
 8006a60:	4413      	add	r3, r2
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	6812      	ldr	r2, [r2, #0]
 8006a66:	4413      	add	r3, r2
 8006a68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a74:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a78:	695a      	ldr	r2, [r3, #20]
 8006a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	441a      	add	r2, r3
 8006a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a82:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006a84:	2100      	movs	r1, #0
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f00b fb69 	bl	801215e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 834a 	beq.w	800712e <PCD_EP_ISR_Handler+0x744>
 8006a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f040 8345 	bne.w	800712e <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	b292      	uxth	r2, r2
 8006ab8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006ac4:	e333      	b.n	800712e <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006acc:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	881b      	ldrh	r3, [r3, #0]
 8006ad4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006ad8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d032      	beq.n	8006b4a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	461a      	mov	r2, r3
 8006af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	00db      	lsls	r3, r3, #3
 8006af6:	4413      	add	r3, r2
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	6812      	ldr	r2, [r2, #0]
 8006afc:	4413      	add	r3, r2
 8006afe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b0a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6818      	ldr	r0, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8006b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b18:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b1c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	f007 fa17 	bl	800df52 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006b30:	4013      	ands	r3, r2
 8006b32:	823b      	strh	r3, [r7, #16]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	8a3a      	ldrh	r2, [r7, #16]
 8006b3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b3e:	b292      	uxth	r2, r2
 8006b40:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f00b fade 	bl	8012104 <HAL_PCD_SetupStageCallback>
 8006b48:	e2f1      	b.n	800712e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006b4a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f280 82ed 	bge.w	800712e <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006b60:	4013      	ands	r3, r2
 8006b62:	83fb      	strh	r3, [r7, #30]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	8bfa      	ldrh	r2, [r7, #30]
 8006b6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b6e:	b292      	uxth	r2, r2
 8006b70:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	4413      	add	r3, r2
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6812      	ldr	r2, [r2, #0]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b98:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d019      	beq.n	8006bd6 <PCD_EP_ISR_Handler+0x1ec>
 8006ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d015      	beq.n	8006bd6 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6818      	ldr	r0, [r3, #0]
 8006bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb0:	6959      	ldr	r1, [r3, #20]
 8006bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	f007 f9c9 	bl	800df52 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc2:	695a      	ldr	r2, [r3, #20]
 8006bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	441a      	add	r2, r3
 8006bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bcc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006bce:	2100      	movs	r1, #0
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f00b faa9 	bl	8012128 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f040 82a3 	bne.w	800712e <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	61bb      	str	r3, [r7, #24]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	61bb      	str	r3, [r7, #24]
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c06:	617b      	str	r3, [r7, #20]
 8006c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	2b3e      	cmp	r3, #62	; 0x3e
 8006c0e:	d918      	bls.n	8006c42 <PCD_EP_ISR_Handler+0x258>
 8006c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	095b      	lsrs	r3, r3, #5
 8006c16:	647b      	str	r3, [r7, #68]	; 0x44
 8006c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	f003 031f 	and.w	r3, r3, #31
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d102      	bne.n	8006c2a <PCD_EP_ISR_Handler+0x240>
 8006c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c26:	3b01      	subs	r3, #1
 8006c28:	647b      	str	r3, [r7, #68]	; 0x44
 8006c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	029b      	lsls	r3, r3, #10
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	801a      	strh	r2, [r3, #0]
 8006c40:	e029      	b.n	8006c96 <PCD_EP_ISR_Handler+0x2ac>
 8006c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d112      	bne.n	8006c70 <PCD_EP_ISR_Handler+0x286>
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	881b      	ldrh	r3, [r3, #0]
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	801a      	strh	r2, [r3, #0]
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	801a      	strh	r2, [r3, #0]
 8006c6e:	e012      	b.n	8006c96 <PCD_EP_ISR_Handler+0x2ac>
 8006c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	085b      	lsrs	r3, r3, #1
 8006c76:	647b      	str	r3, [r7, #68]	; 0x44
 8006c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <PCD_EP_ISR_Handler+0x2a0>
 8006c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c86:	3301      	adds	r3, #1
 8006c88:	647b      	str	r3, [r7, #68]	; 0x44
 8006c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	029b      	lsls	r3, r3, #10
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	881b      	ldrh	r3, [r3, #0]
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca6:	827b      	strh	r3, [r7, #18]
 8006ca8:	8a7b      	ldrh	r3, [r7, #18]
 8006caa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006cae:	827b      	strh	r3, [r7, #18]
 8006cb0:	8a7b      	ldrh	r3, [r7, #18]
 8006cb2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006cb6:	827b      	strh	r3, [r7, #18]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	8a7b      	ldrh	r3, [r7, #18]
 8006cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	8013      	strh	r3, [r2, #0]
 8006cd2:	e22c      	b.n	800712e <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006ce8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f280 80f6 	bge.w	8006ede <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006d08:	4013      	ands	r3, r2
 8006d0a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	461a      	mov	r2, r3
 8006d14:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8006d20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d24:	b292      	uxth	r2, r2
 8006d26:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006d28:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	00db      	lsls	r3, r3, #3
 8006d34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d40:	7b1b      	ldrb	r3, [r3, #12]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d123      	bne.n	8006d8e <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	461a      	mov	r2, r3
 8006d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	4413      	add	r3, r2
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	6812      	ldr	r2, [r2, #0]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d6a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8006d6e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 808e 	beq.w	8006e94 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6818      	ldr	r0, [r3, #0]
 8006d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d7e:	6959      	ldr	r1, [r3, #20]
 8006d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d82:	88da      	ldrh	r2, [r3, #6]
 8006d84:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006d88:	f007 f8e3 	bl	800df52 <USB_ReadPMA>
 8006d8c:	e082      	b.n	8006e94 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d90:	78db      	ldrb	r3, [r3, #3]
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d10a      	bne.n	8006dac <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006d96:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f9d3 	bl	800714a <HAL_PCD_EP_DB_Receive>
 8006da4:	4603      	mov	r3, r0
 8006da6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006daa:	e073      	b.n	8006e94 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	461a      	mov	r2, r3
 8006db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	441a      	add	r2, r3
 8006dd8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006de8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	461a      	mov	r2, r3
 8006df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d022      	beq.n	8006e50 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	461a      	mov	r2, r3
 8006e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	4413      	add	r3, r2
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6812      	ldr	r2, [r2, #0]
 8006e22:	4413      	add	r3, r2
 8006e24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e2e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8006e32:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d02c      	beq.n	8006e94 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6818      	ldr	r0, [r3, #0]
 8006e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e40:	6959      	ldr	r1, [r3, #20]
 8006e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e44:	891a      	ldrh	r2, [r3, #8]
 8006e46:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006e4a:	f007 f882 	bl	800df52 <USB_ReadPMA>
 8006e4e:	e021      	b.n	8006e94 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	00db      	lsls	r3, r3, #3
 8006e62:	4413      	add	r3, r2
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	6812      	ldr	r2, [r2, #0]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e74:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8006e78:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d009      	beq.n	8006e94 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6818      	ldr	r0, [r3, #0]
 8006e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e86:	6959      	ldr	r1, [r3, #20]
 8006e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e8a:	895a      	ldrh	r2, [r3, #10]
 8006e8c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006e90:	f007 f85f 	bl	800df52 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e96:	69da      	ldr	r2, [r3, #28]
 8006e98:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006e9c:	441a      	add	r2, r3
 8006e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea4:	695a      	ldr	r2, [r3, #20]
 8006ea6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006eaa:	441a      	add	r2, r3
 8006eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eae:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d005      	beq.n	8006ec4 <PCD_EP_ISR_Handler+0x4da>
 8006eb8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d206      	bcs.n	8006ed2 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f00b f92c 	bl	8012128 <HAL_PCD_DataOutStageCallback>
 8006ed0:	e005      	b.n	8006ede <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f005 fb88 	bl	800c5ee <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006ede:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 8121 	beq.w	800712e <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8006eec:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006ef0:	1c5a      	adds	r2, r3, #1
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	00db      	lsls	r3, r3, #3
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	4413      	add	r3, r2
 8006efe:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	461a      	mov	r2, r3
 8006f06:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	461a      	mov	r2, r3
 8006f24:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	441a      	add	r2, r3
 8006f2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006f30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8006f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f3e:	78db      	ldrb	r3, [r3, #3]
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	f000 80a2 	beq.w	800708a <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8006f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f48:	2200      	movs	r2, #0
 8006f4a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f4e:	7b1b      	ldrb	r3, [r3, #12]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 8093 	beq.w	800707c <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006f56:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d046      	beq.n	8006ff0 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f64:	785b      	ldrb	r3, [r3, #1]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d126      	bne.n	8006fb8 <PCD_EP_ISR_Handler+0x5ce>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7e:	4413      	add	r3, r2
 8006f80:	627b      	str	r3, [r7, #36]	; 0x24
 8006f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	00da      	lsls	r2, r3, #3
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f90:	623b      	str	r3, [r7, #32]
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	801a      	strh	r2, [r3, #0]
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	801a      	strh	r2, [r3, #0]
 8006fb6:	e061      	b.n	800707c <PCD_EP_ISR_Handler+0x692>
 8006fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fba:	785b      	ldrb	r3, [r3, #1]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d15d      	bne.n	800707c <PCD_EP_ISR_Handler+0x692>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd4:	4413      	add	r3, r2
 8006fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	00da      	lsls	r2, r3, #3
 8006fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fea:	2200      	movs	r2, #0
 8006fec:	801a      	strh	r2, [r3, #0]
 8006fee:	e045      	b.n	800707c <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ff8:	785b      	ldrb	r3, [r3, #1]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d126      	bne.n	800704c <PCD_EP_ISR_Handler+0x662>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	637b      	str	r3, [r7, #52]	; 0x34
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800700c:	b29b      	uxth	r3, r3
 800700e:	461a      	mov	r2, r3
 8007010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007012:	4413      	add	r3, r2
 8007014:	637b      	str	r3, [r7, #52]	; 0x34
 8007016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	00da      	lsls	r2, r3, #3
 800701c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701e:	4413      	add	r3, r2
 8007020:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007024:	633b      	str	r3, [r7, #48]	; 0x30
 8007026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	b29b      	uxth	r3, r3
 800702c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007030:	b29a      	uxth	r2, r3
 8007032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007034:	801a      	strh	r2, [r3, #0]
 8007036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	b29b      	uxth	r3, r3
 800703c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007044:	b29a      	uxth	r2, r3
 8007046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007048:	801a      	strh	r2, [r3, #0]
 800704a:	e017      	b.n	800707c <PCD_EP_ISR_Handler+0x692>
 800704c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800704e:	785b      	ldrb	r3, [r3, #1]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d113      	bne.n	800707c <PCD_EP_ISR_Handler+0x692>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800705c:	b29b      	uxth	r3, r3
 800705e:	461a      	mov	r2, r3
 8007060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007062:	4413      	add	r3, r2
 8007064:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	00da      	lsls	r2, r3, #3
 800706c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800706e:	4413      	add	r3, r2
 8007070:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007074:	63bb      	str	r3, [r7, #56]	; 0x38
 8007076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007078:	2200      	movs	r2, #0
 800707a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800707c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	4619      	mov	r1, r3
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f00b f86b 	bl	801215e <HAL_PCD_DataInStageCallback>
 8007088:	e051      	b.n	800712e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800708a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800708e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007092:	2b00      	cmp	r3, #0
 8007094:	d144      	bne.n	8007120 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800709e:	b29b      	uxth	r3, r3
 80070a0:	461a      	mov	r2, r3
 80070a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	00db      	lsls	r3, r3, #3
 80070a8:	4413      	add	r3, r2
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	6812      	ldr	r2, [r2, #0]
 80070ae:	4413      	add	r3, r2
 80070b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80070be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c0:	699a      	ldr	r2, [r3, #24]
 80070c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d907      	bls.n	80070da <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 80070ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070cc:	699a      	ldr	r2, [r3, #24]
 80070ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80070d2:	1ad2      	subs	r2, r2, r3
 80070d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070d6:	619a      	str	r2, [r3, #24]
 80070d8:	e002      	b.n	80070e0 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 80070da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070dc:	2200      	movs	r2, #0
 80070de:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80070e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d106      	bne.n	80070f6 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80070e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f00b f835 	bl	801215e <HAL_PCD_DataInStageCallback>
 80070f4:	e01b      	b.n	800712e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80070f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070f8:	695a      	ldr	r2, [r3, #20]
 80070fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80070fe:	441a      	add	r2, r3
 8007100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007102:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007106:	69da      	ldr	r2, [r3, #28]
 8007108:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800710c:	441a      	add	r2, r3
 800710e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007110:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007118:	4618      	mov	r0, r3
 800711a:	f005 fa68 	bl	800c5ee <USB_EPStartXfer>
 800711e:	e006      	b.n	800712e <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007120:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007124:	461a      	mov	r2, r3
 8007126:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f917 	bl	800735c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007136:	b29b      	uxth	r3, r3
 8007138:	b21b      	sxth	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	f6ff ac5a 	blt.w	80069f4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3758      	adds	r7, #88	; 0x58
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b088      	sub	sp, #32
 800714e:	af00      	add	r7, sp, #0
 8007150:	60f8      	str	r0, [r7, #12]
 8007152:	60b9      	str	r1, [r7, #8]
 8007154:	4613      	mov	r3, r2
 8007156:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007158:	88fb      	ldrh	r3, [r7, #6]
 800715a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d07c      	beq.n	800725c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800716a:	b29b      	uxth	r3, r3
 800716c:	461a      	mov	r2, r3
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	00db      	lsls	r3, r3, #3
 8007174:	4413      	add	r3, r2
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	6812      	ldr	r2, [r2, #0]
 800717a:	4413      	add	r3, r2
 800717c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007186:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	699a      	ldr	r2, [r3, #24]
 800718c:	8b7b      	ldrh	r3, [r7, #26]
 800718e:	429a      	cmp	r2, r3
 8007190:	d306      	bcc.n	80071a0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	699a      	ldr	r2, [r3, #24]
 8007196:	8b7b      	ldrh	r3, [r7, #26]
 8007198:	1ad2      	subs	r2, r2, r3
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	619a      	str	r2, [r3, #24]
 800719e:	e002      	b.n	80071a6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	2200      	movs	r2, #0
 80071a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d123      	bne.n	80071f6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	b29b      	uxth	r3, r3
 80071c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c8:	833b      	strh	r3, [r7, #24]
 80071ca:	8b3b      	ldrh	r3, [r7, #24]
 80071cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071d0:	833b      	strh	r3, [r7, #24]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	461a      	mov	r2, r3
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	441a      	add	r2, r3
 80071e0:	8b3b      	ldrh	r3, [r7, #24]
 80071e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80071f6:	88fb      	ldrh	r3, [r7, #6]
 80071f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d01f      	beq.n	8007240 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	461a      	mov	r2, r3
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4413      	add	r3, r2
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	b29b      	uxth	r3, r3
 8007212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800721a:	82fb      	strh	r3, [r7, #22]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	461a      	mov	r2, r3
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	441a      	add	r2, r3
 800722a:	8afb      	ldrh	r3, [r7, #22]
 800722c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007238:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800723c:	b29b      	uxth	r3, r3
 800723e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007240:	8b7b      	ldrh	r3, [r7, #26]
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 8085 	beq.w	8007352 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6818      	ldr	r0, [r3, #0]
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	6959      	ldr	r1, [r3, #20]
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	891a      	ldrh	r2, [r3, #8]
 8007254:	8b7b      	ldrh	r3, [r7, #26]
 8007256:	f006 fe7c 	bl	800df52 <USB_ReadPMA>
 800725a:	e07a      	b.n	8007352 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007264:	b29b      	uxth	r3, r3
 8007266:	461a      	mov	r2, r3
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	00db      	lsls	r3, r3, #3
 800726e:	4413      	add	r3, r2
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	6812      	ldr	r2, [r2, #0]
 8007274:	4413      	add	r3, r2
 8007276:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800727a:	881b      	ldrh	r3, [r3, #0]
 800727c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007280:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	699a      	ldr	r2, [r3, #24]
 8007286:	8b7b      	ldrh	r3, [r7, #26]
 8007288:	429a      	cmp	r2, r3
 800728a:	d306      	bcc.n	800729a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	699a      	ldr	r2, [r3, #24]
 8007290:	8b7b      	ldrh	r3, [r7, #26]
 8007292:	1ad2      	subs	r2, r2, r3
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	619a      	str	r2, [r3, #24]
 8007298:	e002      	b.n	80072a0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2200      	movs	r2, #0
 800729e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d123      	bne.n	80072f0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	461a      	mov	r2, r3
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c2:	83fb      	strh	r3, [r7, #30]
 80072c4:	8bfb      	ldrh	r3, [r7, #30]
 80072c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80072ca:	83fb      	strh	r3, [r7, #30]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	461a      	mov	r2, r3
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	441a      	add	r2, r3
 80072da:	8bfb      	ldrh	r3, [r7, #30]
 80072dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80072f0:	88fb      	ldrh	r3, [r7, #6]
 80072f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d11f      	bne.n	800733a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	461a      	mov	r2, r3
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	4413      	add	r3, r2
 8007308:	881b      	ldrh	r3, [r3, #0]
 800730a:	b29b      	uxth	r3, r3
 800730c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007314:	83bb      	strh	r3, [r7, #28]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	461a      	mov	r2, r3
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	441a      	add	r2, r3
 8007324:	8bbb      	ldrh	r3, [r7, #28]
 8007326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800732a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800732e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007332:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007336:	b29b      	uxth	r3, r3
 8007338:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800733a:	8b7b      	ldrh	r3, [r7, #26]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d008      	beq.n	8007352 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6818      	ldr	r0, [r3, #0]
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	6959      	ldr	r1, [r3, #20]
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	895a      	ldrh	r2, [r3, #10]
 800734c:	8b7b      	ldrh	r3, [r7, #26]
 800734e:	f006 fe00 	bl	800df52 <USB_ReadPMA>
    }
  }

  return count;
 8007352:	8b7b      	ldrh	r3, [r7, #26]
}
 8007354:	4618      	mov	r0, r3
 8007356:	3720      	adds	r7, #32
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b0a2      	sub	sp, #136	; 0x88
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	4613      	mov	r3, r2
 8007368:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800736a:	88fb      	ldrh	r3, [r7, #6]
 800736c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 81c5 	beq.w	8007700 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800737e:	b29b      	uxth	r3, r3
 8007380:	461a      	mov	r2, r3
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	00db      	lsls	r3, r3, #3
 8007388:	4413      	add	r3, r2
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	6812      	ldr	r2, [r2, #0]
 800738e:	4413      	add	r3, r2
 8007390:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800739a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	699a      	ldr	r2, [r3, #24]
 80073a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d907      	bls.n	80073ba <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	699a      	ldr	r2, [r3, #24]
 80073ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073b2:	1ad2      	subs	r2, r2, r3
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	619a      	str	r2, [r3, #24]
 80073b8:	e002      	b.n	80073c0 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2200      	movs	r2, #0
 80073be:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f040 80b9 	bne.w	800753c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	785b      	ldrb	r3, [r3, #1]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d126      	bne.n	8007420 <HAL_PCD_EP_DB_Transmit+0xc4>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	461a      	mov	r2, r3
 80073e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e6:	4413      	add	r3, r2
 80073e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	00da      	lsls	r2, r3, #3
 80073f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f2:	4413      	add	r3, r2
 80073f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073f8:	627b      	str	r3, [r7, #36]	; 0x24
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	b29b      	uxth	r3, r3
 8007400:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007404:	b29a      	uxth	r2, r3
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	801a      	strh	r2, [r3, #0]
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	b29b      	uxth	r3, r3
 8007410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007418:	b29a      	uxth	r2, r3
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	801a      	strh	r2, [r3, #0]
 800741e:	e01a      	b.n	8007456 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	785b      	ldrb	r3, [r3, #1]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d116      	bne.n	8007456 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	633b      	str	r3, [r7, #48]	; 0x30
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007436:	b29b      	uxth	r3, r3
 8007438:	461a      	mov	r2, r3
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	4413      	add	r3, r2
 800743e:	633b      	str	r3, [r7, #48]	; 0x30
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	00da      	lsls	r2, r3, #3
 8007446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007448:	4413      	add	r3, r2
 800744a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800744e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007452:	2200      	movs	r2, #0
 8007454:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	623b      	str	r3, [r7, #32]
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	785b      	ldrb	r3, [r3, #1]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d126      	bne.n	80074b2 <HAL_PCD_EP_DB_Transmit+0x156>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	61bb      	str	r3, [r7, #24]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007472:	b29b      	uxth	r3, r3
 8007474:	461a      	mov	r2, r3
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	4413      	add	r3, r2
 800747a:	61bb      	str	r3, [r7, #24]
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	00da      	lsls	r2, r3, #3
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	4413      	add	r3, r2
 8007486:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800748a:	617b      	str	r3, [r7, #20]
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	b29b      	uxth	r3, r3
 8007492:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007496:	b29a      	uxth	r2, r3
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	801a      	strh	r2, [r3, #0]
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	801a      	strh	r2, [r3, #0]
 80074b0:	e017      	b.n	80074e2 <HAL_PCD_EP_DB_Transmit+0x186>
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	785b      	ldrb	r3, [r3, #1]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d113      	bne.n	80074e2 <HAL_PCD_EP_DB_Transmit+0x186>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	461a      	mov	r2, r3
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	4413      	add	r3, r2
 80074ca:	623b      	str	r3, [r7, #32]
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	00da      	lsls	r2, r3, #3
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	4413      	add	r3, r2
 80074d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074da:	61fb      	str	r3, [r7, #28]
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	2200      	movs	r2, #0
 80074e0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	4619      	mov	r1, r3
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f00a fe38 	bl	801215e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80074ee:	88fb      	ldrh	r3, [r7, #6]
 80074f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 82d2 	beq.w	8007a9e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	b29b      	uxth	r3, r3
 800750c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007514:	827b      	strh	r3, [r7, #18]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	461a      	mov	r2, r3
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	441a      	add	r2, r3
 8007524:	8a7b      	ldrh	r3, [r7, #18]
 8007526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800752a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800752e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007536:	b29b      	uxth	r3, r3
 8007538:	8013      	strh	r3, [r2, #0]
 800753a:	e2b0      	b.n	8007a9e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800753c:	88fb      	ldrh	r3, [r7, #6]
 800753e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d021      	beq.n	800758a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	461a      	mov	r2, r3
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	b29b      	uxth	r3, r3
 8007558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800755c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007560:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	461a      	mov	r2, r3
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	441a      	add	r2, r3
 8007572:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800757a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800757e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007586:	b29b      	uxth	r3, r3
 8007588:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007590:	2b01      	cmp	r3, #1
 8007592:	f040 8284 	bne.w	8007a9e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	695a      	ldr	r2, [r3, #20]
 800759a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800759e:	441a      	add	r2, r3
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	69da      	ldr	r2, [r3, #28]
 80075a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80075ac:	441a      	add	r2, r3
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	6a1a      	ldr	r2, [r3, #32]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d309      	bcc.n	80075d2 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	6a1a      	ldr	r2, [r3, #32]
 80075c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075ca:	1ad2      	subs	r2, r2, r3
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	621a      	str	r2, [r3, #32]
 80075d0:	e015      	b.n	80075fe <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d107      	bne.n	80075ea <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80075da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80075de:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80075e8:	e009      	b.n	80075fe <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	2200      	movs	r2, #0
 80075fc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	785b      	ldrb	r3, [r3, #1]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d155      	bne.n	80076b2 <HAL_PCD_EP_DB_Transmit+0x356>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	63bb      	str	r3, [r7, #56]	; 0x38
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007614:	b29b      	uxth	r3, r3
 8007616:	461a      	mov	r2, r3
 8007618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761a:	4413      	add	r3, r2
 800761c:	63bb      	str	r3, [r7, #56]	; 0x38
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	00da      	lsls	r2, r3, #3
 8007624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007626:	4413      	add	r3, r2
 8007628:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800762c:	637b      	str	r3, [r7, #52]	; 0x34
 800762e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007630:	2b3e      	cmp	r3, #62	; 0x3e
 8007632:	d916      	bls.n	8007662 <HAL_PCD_EP_DB_Transmit+0x306>
 8007634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007636:	095b      	lsrs	r3, r3, #5
 8007638:	64bb      	str	r3, [r7, #72]	; 0x48
 800763a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800763c:	f003 031f 	and.w	r3, r3, #31
 8007640:	2b00      	cmp	r3, #0
 8007642:	d102      	bne.n	800764a <HAL_PCD_EP_DB_Transmit+0x2ee>
 8007644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007646:	3b01      	subs	r3, #1
 8007648:	64bb      	str	r3, [r7, #72]	; 0x48
 800764a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800764c:	b29b      	uxth	r3, r3
 800764e:	029b      	lsls	r3, r3, #10
 8007650:	b29b      	uxth	r3, r3
 8007652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800765a:	b29a      	uxth	r2, r3
 800765c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800765e:	801a      	strh	r2, [r3, #0]
 8007660:	e043      	b.n	80076ea <HAL_PCD_EP_DB_Transmit+0x38e>
 8007662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007664:	2b00      	cmp	r3, #0
 8007666:	d112      	bne.n	800768e <HAL_PCD_EP_DB_Transmit+0x332>
 8007668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800766a:	881b      	ldrh	r3, [r3, #0]
 800766c:	b29b      	uxth	r3, r3
 800766e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007672:	b29a      	uxth	r2, r3
 8007674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007676:	801a      	strh	r2, [r3, #0]
 8007678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800767a:	881b      	ldrh	r3, [r3, #0]
 800767c:	b29b      	uxth	r3, r3
 800767e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007686:	b29a      	uxth	r2, r3
 8007688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800768a:	801a      	strh	r2, [r3, #0]
 800768c:	e02d      	b.n	80076ea <HAL_PCD_EP_DB_Transmit+0x38e>
 800768e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007690:	085b      	lsrs	r3, r3, #1
 8007692:	64bb      	str	r3, [r7, #72]	; 0x48
 8007694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d002      	beq.n	80076a4 <HAL_PCD_EP_DB_Transmit+0x348>
 800769e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076a0:	3301      	adds	r3, #1
 80076a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80076a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	029b      	lsls	r3, r3, #10
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ae:	801a      	strh	r2, [r3, #0]
 80076b0:	e01b      	b.n	80076ea <HAL_PCD_EP_DB_Transmit+0x38e>
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	785b      	ldrb	r3, [r3, #1]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d117      	bne.n	80076ea <HAL_PCD_EP_DB_Transmit+0x38e>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	643b      	str	r3, [r7, #64]	; 0x40
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	461a      	mov	r2, r3
 80076cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ce:	4413      	add	r3, r2
 80076d0:	643b      	str	r3, [r7, #64]	; 0x40
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	00da      	lsls	r2, r3, #3
 80076d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076da:	4413      	add	r3, r2
 80076dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80076e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076e8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6818      	ldr	r0, [r3, #0]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	6959      	ldr	r1, [r3, #20]
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	891a      	ldrh	r2, [r3, #8]
 80076f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	f006 fbe8 	bl	800dece <USB_WritePMA>
 80076fe:	e1ce      	b.n	8007a9e <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007708:	b29b      	uxth	r3, r3
 800770a:	461a      	mov	r2, r3
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	00db      	lsls	r3, r3, #3
 8007712:	4413      	add	r3, r2
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	6812      	ldr	r2, [r2, #0]
 8007718:	4413      	add	r3, r2
 800771a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800771e:	881b      	ldrh	r3, [r3, #0]
 8007720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007724:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	699a      	ldr	r2, [r3, #24]
 800772c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007730:	429a      	cmp	r2, r3
 8007732:	d307      	bcc.n	8007744 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	699a      	ldr	r2, [r3, #24]
 8007738:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800773c:	1ad2      	subs	r2, r2, r3
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	619a      	str	r2, [r3, #24]
 8007742:	e002      	b.n	800774a <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	2200      	movs	r2, #0
 8007748:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	2b00      	cmp	r3, #0
 8007750:	f040 80c4 	bne.w	80078dc <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	785b      	ldrb	r3, [r3, #1]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d126      	bne.n	80077aa <HAL_PCD_EP_DB_Transmit+0x44e>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	66bb      	str	r3, [r7, #104]	; 0x68
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800776a:	b29b      	uxth	r3, r3
 800776c:	461a      	mov	r2, r3
 800776e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007770:	4413      	add	r3, r2
 8007772:	66bb      	str	r3, [r7, #104]	; 0x68
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	00da      	lsls	r2, r3, #3
 800777a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800777c:	4413      	add	r3, r2
 800777e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007782:	667b      	str	r3, [r7, #100]	; 0x64
 8007784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	b29b      	uxth	r3, r3
 800778a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800778e:	b29a      	uxth	r2, r3
 8007790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007792:	801a      	strh	r2, [r3, #0]
 8007794:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007796:	881b      	ldrh	r3, [r3, #0]
 8007798:	b29b      	uxth	r3, r3
 800779a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800779e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077a6:	801a      	strh	r2, [r3, #0]
 80077a8:	e01a      	b.n	80077e0 <HAL_PCD_EP_DB_Transmit+0x484>
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	785b      	ldrb	r3, [r3, #1]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d116      	bne.n	80077e0 <HAL_PCD_EP_DB_Transmit+0x484>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	673b      	str	r3, [r7, #112]	; 0x70
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	461a      	mov	r2, r3
 80077c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077c6:	4413      	add	r3, r2
 80077c8:	673b      	str	r3, [r7, #112]	; 0x70
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	00da      	lsls	r2, r3, #3
 80077d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077d2:	4413      	add	r3, r2
 80077d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077dc:	2200      	movs	r2, #0
 80077de:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	785b      	ldrb	r3, [r3, #1]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d12f      	bne.n	800784e <HAL_PCD_EP_DB_Transmit+0x4f2>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077fe:	b29b      	uxth	r3, r3
 8007800:	461a      	mov	r2, r3
 8007802:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007806:	4413      	add	r3, r2
 8007808:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	00da      	lsls	r2, r3, #3
 8007812:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007816:	4413      	add	r3, r2
 8007818:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800781c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007820:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007824:	881b      	ldrh	r3, [r3, #0]
 8007826:	b29b      	uxth	r3, r3
 8007828:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800782c:	b29a      	uxth	r2, r3
 800782e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007832:	801a      	strh	r2, [r3, #0]
 8007834:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007838:	881b      	ldrh	r3, [r3, #0]
 800783a:	b29b      	uxth	r3, r3
 800783c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007844:	b29a      	uxth	r2, r3
 8007846:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800784a:	801a      	strh	r2, [r3, #0]
 800784c:	e017      	b.n	800787e <HAL_PCD_EP_DB_Transmit+0x522>
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	785b      	ldrb	r3, [r3, #1]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d113      	bne.n	800787e <HAL_PCD_EP_DB_Transmit+0x522>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800785e:	b29b      	uxth	r3, r3
 8007860:	461a      	mov	r2, r3
 8007862:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007864:	4413      	add	r3, r2
 8007866:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	00da      	lsls	r2, r3, #3
 800786e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007870:	4413      	add	r3, r2
 8007872:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007876:	67bb      	str	r3, [r7, #120]	; 0x78
 8007878:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800787a:	2200      	movs	r2, #0
 800787c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	4619      	mov	r1, r3
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f00a fc6a 	bl	801215e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800788a:	88fb      	ldrh	r3, [r7, #6]
 800788c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007890:	2b00      	cmp	r3, #0
 8007892:	f040 8104 	bne.w	8007a9e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	881b      	ldrh	r3, [r3, #0]
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	461a      	mov	r2, r3
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	441a      	add	r2, r3
 80078c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80078c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	8013      	strh	r3, [r2, #0]
 80078da:	e0e0      	b.n	8007a9e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80078dc:	88fb      	ldrh	r3, [r7, #6]
 80078de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d121      	bne.n	800792a <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	461a      	mov	r2, r3
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	4413      	add	r3, r2
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007900:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	461a      	mov	r2, r3
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	441a      	add	r2, r3
 8007912:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800791a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800791e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007926:	b29b      	uxth	r3, r3
 8007928:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007930:	2b01      	cmp	r3, #1
 8007932:	f040 80b4 	bne.w	8007a9e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	695a      	ldr	r2, [r3, #20]
 800793a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800793e:	441a      	add	r2, r3
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	69da      	ldr	r2, [r3, #28]
 8007948:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800794c:	441a      	add	r2, r3
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	6a1a      	ldr	r2, [r3, #32]
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	429a      	cmp	r2, r3
 800795c:	d309      	bcc.n	8007972 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	6a1a      	ldr	r2, [r3, #32]
 8007968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800796a:	1ad2      	subs	r2, r2, r3
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	621a      	str	r2, [r3, #32]
 8007970:	e015      	b.n	800799e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d107      	bne.n	800798a <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 800797a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800797e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007988:	e009      	b.n	800799e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2200      	movs	r2, #0
 8007994:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	663b      	str	r3, [r7, #96]	; 0x60
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	785b      	ldrb	r3, [r3, #1]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d155      	bne.n	8007a58 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	461a      	mov	r2, r3
 80079be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079c0:	4413      	add	r3, r2
 80079c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	00da      	lsls	r2, r3, #3
 80079ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079cc:	4413      	add	r3, r2
 80079ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079d2:	657b      	str	r3, [r7, #84]	; 0x54
 80079d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079d6:	2b3e      	cmp	r3, #62	; 0x3e
 80079d8:	d916      	bls.n	8007a08 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80079da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079dc:	095b      	lsrs	r3, r3, #5
 80079de:	677b      	str	r3, [r7, #116]	; 0x74
 80079e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079e2:	f003 031f 	and.w	r3, r3, #31
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d102      	bne.n	80079f0 <HAL_PCD_EP_DB_Transmit+0x694>
 80079ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079ec:	3b01      	subs	r3, #1
 80079ee:	677b      	str	r3, [r7, #116]	; 0x74
 80079f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	029b      	lsls	r3, r3, #10
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a04:	801a      	strh	r2, [r3, #0]
 8007a06:	e040      	b.n	8007a8a <HAL_PCD_EP_DB_Transmit+0x72e>
 8007a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d112      	bne.n	8007a34 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8007a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a1c:	801a      	strh	r2, [r3, #0]
 8007a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a20:	881b      	ldrh	r3, [r3, #0]
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a30:	801a      	strh	r2, [r3, #0]
 8007a32:	e02a      	b.n	8007a8a <HAL_PCD_EP_DB_Transmit+0x72e>
 8007a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a36:	085b      	lsrs	r3, r3, #1
 8007a38:	677b      	str	r3, [r7, #116]	; 0x74
 8007a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a3c:	f003 0301 	and.w	r3, r3, #1
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d002      	beq.n	8007a4a <HAL_PCD_EP_DB_Transmit+0x6ee>
 8007a44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a46:	3301      	adds	r3, #1
 8007a48:	677b      	str	r3, [r7, #116]	; 0x74
 8007a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	029b      	lsls	r3, r3, #10
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a54:	801a      	strh	r2, [r3, #0]
 8007a56:	e018      	b.n	8007a8a <HAL_PCD_EP_DB_Transmit+0x72e>
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	785b      	ldrb	r3, [r3, #1]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d114      	bne.n	8007a8a <HAL_PCD_EP_DB_Transmit+0x72e>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a6e:	4413      	add	r3, r2
 8007a70:	663b      	str	r3, [r7, #96]	; 0x60
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	00da      	lsls	r2, r3, #3
 8007a78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a88:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6818      	ldr	r0, [r3, #0]
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	6959      	ldr	r1, [r3, #20]
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	895a      	ldrh	r2, [r3, #10]
 8007a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	f006 fa18 	bl	800dece <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	881b      	ldrh	r3, [r3, #0]
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ab8:	823b      	strh	r3, [r7, #16]
 8007aba:	8a3b      	ldrh	r3, [r7, #16]
 8007abc:	f083 0310 	eor.w	r3, r3, #16
 8007ac0:	823b      	strh	r3, [r7, #16]
 8007ac2:	8a3b      	ldrh	r3, [r7, #16]
 8007ac4:	f083 0320 	eor.w	r3, r3, #32
 8007ac8:	823b      	strh	r3, [r7, #16]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	441a      	add	r2, r3
 8007ad8:	8a3b      	ldrh	r3, [r7, #16]
 8007ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3788      	adds	r7, #136	; 0x88
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b087      	sub	sp, #28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	607b      	str	r3, [r7, #4]
 8007b02:	460b      	mov	r3, r1
 8007b04:	817b      	strh	r3, [r7, #10]
 8007b06:	4613      	mov	r3, r2
 8007b08:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007b0a:	897b      	ldrh	r3, [r7, #10]
 8007b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00b      	beq.n	8007b2e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b16:	897b      	ldrh	r3, [r7, #10]
 8007b18:	f003 0307 	and.w	r3, r3, #7
 8007b1c:	1c5a      	adds	r2, r3, #1
 8007b1e:	4613      	mov	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	00db      	lsls	r3, r3, #3
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	4413      	add	r3, r2
 8007b2a:	617b      	str	r3, [r7, #20]
 8007b2c:	e009      	b.n	8007b42 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007b2e:	897a      	ldrh	r2, [r7, #10]
 8007b30:	4613      	mov	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4413      	add	r3, r2
 8007b36:	00db      	lsls	r3, r3, #3
 8007b38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	4413      	add	r3, r2
 8007b40:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007b42:	893b      	ldrh	r3, [r7, #8]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d107      	bne.n	8007b58 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	80da      	strh	r2, [r3, #6]
 8007b56:	e00b      	b.n	8007b70 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	0c1b      	lsrs	r3, r3, #16
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	371c      	adds	r7, #28
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b085      	sub	sp, #20
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	f043 0301 	orr.w	r3, r3, #1
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	f043 0302 	orr.w	r3, r3, #2
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
	...

08007bd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d141      	bne.n	8007c66 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007be2:	4b4b      	ldr	r3, [pc, #300]	; (8007d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bee:	d131      	bne.n	8007c54 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007bf0:	4b47      	ldr	r3, [pc, #284]	; (8007d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bf6:	4a46      	ldr	r2, [pc, #280]	; (8007d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c00:	4b43      	ldr	r3, [pc, #268]	; (8007d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007c08:	4a41      	ldr	r2, [pc, #260]	; (8007d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007c10:	4b40      	ldr	r3, [pc, #256]	; (8007d14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2232      	movs	r2, #50	; 0x32
 8007c16:	fb02 f303 	mul.w	r3, r2, r3
 8007c1a:	4a3f      	ldr	r2, [pc, #252]	; (8007d18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c20:	0c9b      	lsrs	r3, r3, #18
 8007c22:	3301      	adds	r3, #1
 8007c24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c26:	e002      	b.n	8007c2e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c2e:	4b38      	ldr	r3, [pc, #224]	; (8007d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c3a:	d102      	bne.n	8007c42 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1f2      	bne.n	8007c28 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007c42:	4b33      	ldr	r3, [pc, #204]	; (8007d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c4e:	d158      	bne.n	8007d02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e057      	b.n	8007d04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007c54:	4b2e      	ldr	r3, [pc, #184]	; (8007d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c5a:	4a2d      	ldr	r2, [pc, #180]	; (8007d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007c64:	e04d      	b.n	8007d02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c6c:	d141      	bne.n	8007cf2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007c6e:	4b28      	ldr	r3, [pc, #160]	; (8007d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c7a:	d131      	bne.n	8007ce0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007c7c:	4b24      	ldr	r3, [pc, #144]	; (8007d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c82:	4a23      	ldr	r2, [pc, #140]	; (8007d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c8c:	4b20      	ldr	r3, [pc, #128]	; (8007d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007c94:	4a1e      	ldr	r2, [pc, #120]	; (8007d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007c9c:	4b1d      	ldr	r3, [pc, #116]	; (8007d14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2232      	movs	r2, #50	; 0x32
 8007ca2:	fb02 f303 	mul.w	r3, r2, r3
 8007ca6:	4a1c      	ldr	r2, [pc, #112]	; (8007d18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cac:	0c9b      	lsrs	r3, r3, #18
 8007cae:	3301      	adds	r3, #1
 8007cb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007cb2:	e002      	b.n	8007cba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007cba:	4b15      	ldr	r3, [pc, #84]	; (8007d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cc6:	d102      	bne.n	8007cce <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1f2      	bne.n	8007cb4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007cce:	4b10      	ldr	r3, [pc, #64]	; (8007d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cda:	d112      	bne.n	8007d02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e011      	b.n	8007d04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007ce0:	4b0b      	ldr	r3, [pc, #44]	; (8007d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ce6:	4a0a      	ldr	r2, [pc, #40]	; (8007d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007cf0:	e007      	b.n	8007d02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007cf2:	4b07      	ldr	r3, [pc, #28]	; (8007d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007cfa:	4a05      	ldr	r2, [pc, #20]	; (8007d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007d00:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3714      	adds	r7, #20
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr
 8007d10:	40007000 	.word	0x40007000
 8007d14:	20000000 	.word	0x20000000
 8007d18:	431bde83 	.word	0x431bde83

08007d1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b088      	sub	sp, #32
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d101      	bne.n	8007d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e306      	b.n	800833c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 0301 	and.w	r3, r3, #1
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d075      	beq.n	8007e26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d3a:	4b97      	ldr	r3, [pc, #604]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	f003 030c 	and.w	r3, r3, #12
 8007d42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007d44:	4b94      	ldr	r3, [pc, #592]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	f003 0303 	and.w	r3, r3, #3
 8007d4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	2b0c      	cmp	r3, #12
 8007d52:	d102      	bne.n	8007d5a <HAL_RCC_OscConfig+0x3e>
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	2b03      	cmp	r3, #3
 8007d58:	d002      	beq.n	8007d60 <HAL_RCC_OscConfig+0x44>
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	2b08      	cmp	r3, #8
 8007d5e:	d10b      	bne.n	8007d78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d60:	4b8d      	ldr	r3, [pc, #564]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d05b      	beq.n	8007e24 <HAL_RCC_OscConfig+0x108>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d157      	bne.n	8007e24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e2e1      	b.n	800833c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d80:	d106      	bne.n	8007d90 <HAL_RCC_OscConfig+0x74>
 8007d82:	4b85      	ldr	r3, [pc, #532]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a84      	ldr	r2, [pc, #528]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d8c:	6013      	str	r3, [r2, #0]
 8007d8e:	e01d      	b.n	8007dcc <HAL_RCC_OscConfig+0xb0>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d98:	d10c      	bne.n	8007db4 <HAL_RCC_OscConfig+0x98>
 8007d9a:	4b7f      	ldr	r3, [pc, #508]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a7e      	ldr	r2, [pc, #504]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007da4:	6013      	str	r3, [r2, #0]
 8007da6:	4b7c      	ldr	r3, [pc, #496]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a7b      	ldr	r2, [pc, #492]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007db0:	6013      	str	r3, [r2, #0]
 8007db2:	e00b      	b.n	8007dcc <HAL_RCC_OscConfig+0xb0>
 8007db4:	4b78      	ldr	r3, [pc, #480]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a77      	ldr	r2, [pc, #476]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dbe:	6013      	str	r3, [r2, #0]
 8007dc0:	4b75      	ldr	r3, [pc, #468]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a74      	ldr	r2, [pc, #464]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d013      	beq.n	8007dfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd4:	f7fb fcf0 	bl	80037b8 <HAL_GetTick>
 8007dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007dda:	e008      	b.n	8007dee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ddc:	f7fb fcec 	bl	80037b8 <HAL_GetTick>
 8007de0:	4602      	mov	r2, r0
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	2b64      	cmp	r3, #100	; 0x64
 8007de8:	d901      	bls.n	8007dee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e2a6      	b.n	800833c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007dee:	4b6a      	ldr	r3, [pc, #424]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d0f0      	beq.n	8007ddc <HAL_RCC_OscConfig+0xc0>
 8007dfa:	e014      	b.n	8007e26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dfc:	f7fb fcdc 	bl	80037b8 <HAL_GetTick>
 8007e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007e02:	e008      	b.n	8007e16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e04:	f7fb fcd8 	bl	80037b8 <HAL_GetTick>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	2b64      	cmp	r3, #100	; 0x64
 8007e10:	d901      	bls.n	8007e16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e292      	b.n	800833c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007e16:	4b60      	ldr	r3, [pc, #384]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1f0      	bne.n	8007e04 <HAL_RCC_OscConfig+0xe8>
 8007e22:	e000      	b.n	8007e26 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0302 	and.w	r3, r3, #2
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d075      	beq.n	8007f1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e32:	4b59      	ldr	r3, [pc, #356]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f003 030c 	and.w	r3, r3, #12
 8007e3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e3c:	4b56      	ldr	r3, [pc, #344]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	f003 0303 	and.w	r3, r3, #3
 8007e44:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	2b0c      	cmp	r3, #12
 8007e4a:	d102      	bne.n	8007e52 <HAL_RCC_OscConfig+0x136>
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d002      	beq.n	8007e58 <HAL_RCC_OscConfig+0x13c>
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	2b04      	cmp	r3, #4
 8007e56:	d11f      	bne.n	8007e98 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e58:	4b4f      	ldr	r3, [pc, #316]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d005      	beq.n	8007e70 <HAL_RCC_OscConfig+0x154>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d101      	bne.n	8007e70 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e265      	b.n	800833c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e70:	4b49      	ldr	r3, [pc, #292]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	061b      	lsls	r3, r3, #24
 8007e7e:	4946      	ldr	r1, [pc, #280]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007e80:	4313      	orrs	r3, r2
 8007e82:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007e84:	4b45      	ldr	r3, [pc, #276]	; (8007f9c <HAL_RCC_OscConfig+0x280>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7f9 ffaf 	bl	8001dec <HAL_InitTick>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d043      	beq.n	8007f1c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e251      	b.n	800833c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d023      	beq.n	8007ee8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ea0:	4b3d      	ldr	r3, [pc, #244]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a3c      	ldr	r2, [pc, #240]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eac:	f7fb fc84 	bl	80037b8 <HAL_GetTick>
 8007eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007eb2:	e008      	b.n	8007ec6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007eb4:	f7fb fc80 	bl	80037b8 <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d901      	bls.n	8007ec6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e23a      	b.n	800833c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ec6:	4b34      	ldr	r3, [pc, #208]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d0f0      	beq.n	8007eb4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ed2:	4b31      	ldr	r3, [pc, #196]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	061b      	lsls	r3, r3, #24
 8007ee0:	492d      	ldr	r1, [pc, #180]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	604b      	str	r3, [r1, #4]
 8007ee6:	e01a      	b.n	8007f1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ee8:	4b2b      	ldr	r3, [pc, #172]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a2a      	ldr	r2, [pc, #168]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007eee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ef4:	f7fb fc60 	bl	80037b8 <HAL_GetTick>
 8007ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007efa:	e008      	b.n	8007f0e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007efc:	f7fb fc5c 	bl	80037b8 <HAL_GetTick>
 8007f00:	4602      	mov	r2, r0
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d901      	bls.n	8007f0e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e216      	b.n	800833c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007f0e:	4b22      	ldr	r3, [pc, #136]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1f0      	bne.n	8007efc <HAL_RCC_OscConfig+0x1e0>
 8007f1a:	e000      	b.n	8007f1e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 0308 	and.w	r3, r3, #8
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d041      	beq.n	8007fae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	695b      	ldr	r3, [r3, #20]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d01c      	beq.n	8007f6c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f32:	4b19      	ldr	r3, [pc, #100]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f38:	4a17      	ldr	r2, [pc, #92]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007f3a:	f043 0301 	orr.w	r3, r3, #1
 8007f3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f42:	f7fb fc39 	bl	80037b8 <HAL_GetTick>
 8007f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f48:	e008      	b.n	8007f5c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f4a:	f7fb fc35 	bl	80037b8 <HAL_GetTick>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d901      	bls.n	8007f5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e1ef      	b.n	800833c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f5c:	4b0e      	ldr	r3, [pc, #56]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f62:	f003 0302 	and.w	r3, r3, #2
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d0ef      	beq.n	8007f4a <HAL_RCC_OscConfig+0x22e>
 8007f6a:	e020      	b.n	8007fae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f6c:	4b0a      	ldr	r3, [pc, #40]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f72:	4a09      	ldr	r2, [pc, #36]	; (8007f98 <HAL_RCC_OscConfig+0x27c>)
 8007f74:	f023 0301 	bic.w	r3, r3, #1
 8007f78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f7c:	f7fb fc1c 	bl	80037b8 <HAL_GetTick>
 8007f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007f82:	e00d      	b.n	8007fa0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f84:	f7fb fc18 	bl	80037b8 <HAL_GetTick>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d906      	bls.n	8007fa0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e1d2      	b.n	800833c <HAL_RCC_OscConfig+0x620>
 8007f96:	bf00      	nop
 8007f98:	40021000 	.word	0x40021000
 8007f9c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007fa0:	4b8c      	ldr	r3, [pc, #560]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 8007fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fa6:	f003 0302 	and.w	r3, r3, #2
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1ea      	bne.n	8007f84 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 0304 	and.w	r3, r3, #4
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f000 80a6 	beq.w	8008108 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007fc0:	4b84      	ldr	r3, [pc, #528]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 8007fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d101      	bne.n	8007fd0 <HAL_RCC_OscConfig+0x2b4>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e000      	b.n	8007fd2 <HAL_RCC_OscConfig+0x2b6>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00d      	beq.n	8007ff2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fd6:	4b7f      	ldr	r3, [pc, #508]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 8007fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fda:	4a7e      	ldr	r2, [pc, #504]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 8007fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fe0:	6593      	str	r3, [r2, #88]	; 0x58
 8007fe2:	4b7c      	ldr	r3, [pc, #496]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 8007fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ff2:	4b79      	ldr	r3, [pc, #484]	; (80081d8 <HAL_RCC_OscConfig+0x4bc>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d118      	bne.n	8008030 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ffe:	4b76      	ldr	r3, [pc, #472]	; (80081d8 <HAL_RCC_OscConfig+0x4bc>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a75      	ldr	r2, [pc, #468]	; (80081d8 <HAL_RCC_OscConfig+0x4bc>)
 8008004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800800a:	f7fb fbd5 	bl	80037b8 <HAL_GetTick>
 800800e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008010:	e008      	b.n	8008024 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008012:	f7fb fbd1 	bl	80037b8 <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	2b02      	cmp	r3, #2
 800801e:	d901      	bls.n	8008024 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e18b      	b.n	800833c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008024:	4b6c      	ldr	r3, [pc, #432]	; (80081d8 <HAL_RCC_OscConfig+0x4bc>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800802c:	2b00      	cmp	r3, #0
 800802e:	d0f0      	beq.n	8008012 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d108      	bne.n	800804a <HAL_RCC_OscConfig+0x32e>
 8008038:	4b66      	ldr	r3, [pc, #408]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 800803a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800803e:	4a65      	ldr	r2, [pc, #404]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 8008040:	f043 0301 	orr.w	r3, r3, #1
 8008044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008048:	e024      	b.n	8008094 <HAL_RCC_OscConfig+0x378>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	2b05      	cmp	r3, #5
 8008050:	d110      	bne.n	8008074 <HAL_RCC_OscConfig+0x358>
 8008052:	4b60      	ldr	r3, [pc, #384]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 8008054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008058:	4a5e      	ldr	r2, [pc, #376]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 800805a:	f043 0304 	orr.w	r3, r3, #4
 800805e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008062:	4b5c      	ldr	r3, [pc, #368]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 8008064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008068:	4a5a      	ldr	r2, [pc, #360]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 800806a:	f043 0301 	orr.w	r3, r3, #1
 800806e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008072:	e00f      	b.n	8008094 <HAL_RCC_OscConfig+0x378>
 8008074:	4b57      	ldr	r3, [pc, #348]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 8008076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800807a:	4a56      	ldr	r2, [pc, #344]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 800807c:	f023 0301 	bic.w	r3, r3, #1
 8008080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008084:	4b53      	ldr	r3, [pc, #332]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 8008086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800808a:	4a52      	ldr	r2, [pc, #328]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 800808c:	f023 0304 	bic.w	r3, r3, #4
 8008090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d016      	beq.n	80080ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800809c:	f7fb fb8c 	bl	80037b8 <HAL_GetTick>
 80080a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080a2:	e00a      	b.n	80080ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080a4:	f7fb fb88 	bl	80037b8 <HAL_GetTick>
 80080a8:	4602      	mov	r2, r0
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	1ad3      	subs	r3, r2, r3
 80080ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d901      	bls.n	80080ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80080b6:	2303      	movs	r3, #3
 80080b8:	e140      	b.n	800833c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080ba:	4b46      	ldr	r3, [pc, #280]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 80080bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080c0:	f003 0302 	and.w	r3, r3, #2
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d0ed      	beq.n	80080a4 <HAL_RCC_OscConfig+0x388>
 80080c8:	e015      	b.n	80080f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080ca:	f7fb fb75 	bl	80037b8 <HAL_GetTick>
 80080ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80080d0:	e00a      	b.n	80080e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080d2:	f7fb fb71 	bl	80037b8 <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d901      	bls.n	80080e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e129      	b.n	800833c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80080e8:	4b3a      	ldr	r3, [pc, #232]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 80080ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080ee:	f003 0302 	and.w	r3, r3, #2
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1ed      	bne.n	80080d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80080f6:	7ffb      	ldrb	r3, [r7, #31]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d105      	bne.n	8008108 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080fc:	4b35      	ldr	r3, [pc, #212]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 80080fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008100:	4a34      	ldr	r2, [pc, #208]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 8008102:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008106:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0320 	and.w	r3, r3, #32
 8008110:	2b00      	cmp	r3, #0
 8008112:	d03c      	beq.n	800818e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d01c      	beq.n	8008156 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800811c:	4b2d      	ldr	r3, [pc, #180]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 800811e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008122:	4a2c      	ldr	r2, [pc, #176]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 8008124:	f043 0301 	orr.w	r3, r3, #1
 8008128:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800812c:	f7fb fb44 	bl	80037b8 <HAL_GetTick>
 8008130:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008132:	e008      	b.n	8008146 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008134:	f7fb fb40 	bl	80037b8 <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	2b02      	cmp	r3, #2
 8008140:	d901      	bls.n	8008146 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	e0fa      	b.n	800833c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008146:	4b23      	ldr	r3, [pc, #140]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 8008148:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800814c:	f003 0302 	and.w	r3, r3, #2
 8008150:	2b00      	cmp	r3, #0
 8008152:	d0ef      	beq.n	8008134 <HAL_RCC_OscConfig+0x418>
 8008154:	e01b      	b.n	800818e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008156:	4b1f      	ldr	r3, [pc, #124]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 8008158:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800815c:	4a1d      	ldr	r2, [pc, #116]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 800815e:	f023 0301 	bic.w	r3, r3, #1
 8008162:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008166:	f7fb fb27 	bl	80037b8 <HAL_GetTick>
 800816a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800816c:	e008      	b.n	8008180 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800816e:	f7fb fb23 	bl	80037b8 <HAL_GetTick>
 8008172:	4602      	mov	r2, r0
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	2b02      	cmp	r3, #2
 800817a:	d901      	bls.n	8008180 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800817c:	2303      	movs	r3, #3
 800817e:	e0dd      	b.n	800833c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008180:	4b14      	ldr	r3, [pc, #80]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 8008182:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008186:	f003 0302 	and.w	r3, r3, #2
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1ef      	bne.n	800816e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	69db      	ldr	r3, [r3, #28]
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 80d1 	beq.w	800833a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008198:	4b0e      	ldr	r3, [pc, #56]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f003 030c 	and.w	r3, r3, #12
 80081a0:	2b0c      	cmp	r3, #12
 80081a2:	f000 808b 	beq.w	80082bc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	69db      	ldr	r3, [r3, #28]
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d15e      	bne.n	800826c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081ae:	4b09      	ldr	r3, [pc, #36]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a08      	ldr	r2, [pc, #32]	; (80081d4 <HAL_RCC_OscConfig+0x4b8>)
 80081b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ba:	f7fb fafd 	bl	80037b8 <HAL_GetTick>
 80081be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081c0:	e00c      	b.n	80081dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081c2:	f7fb faf9 	bl	80037b8 <HAL_GetTick>
 80081c6:	4602      	mov	r2, r0
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d905      	bls.n	80081dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e0b3      	b.n	800833c <HAL_RCC_OscConfig+0x620>
 80081d4:	40021000 	.word	0x40021000
 80081d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081dc:	4b59      	ldr	r3, [pc, #356]	; (8008344 <HAL_RCC_OscConfig+0x628>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1ec      	bne.n	80081c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80081e8:	4b56      	ldr	r3, [pc, #344]	; (8008344 <HAL_RCC_OscConfig+0x628>)
 80081ea:	68da      	ldr	r2, [r3, #12]
 80081ec:	4b56      	ldr	r3, [pc, #344]	; (8008348 <HAL_RCC_OscConfig+0x62c>)
 80081ee:	4013      	ands	r3, r2
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	6a11      	ldr	r1, [r2, #32]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80081f8:	3a01      	subs	r2, #1
 80081fa:	0112      	lsls	r2, r2, #4
 80081fc:	4311      	orrs	r1, r2
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008202:	0212      	lsls	r2, r2, #8
 8008204:	4311      	orrs	r1, r2
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800820a:	0852      	lsrs	r2, r2, #1
 800820c:	3a01      	subs	r2, #1
 800820e:	0552      	lsls	r2, r2, #21
 8008210:	4311      	orrs	r1, r2
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008216:	0852      	lsrs	r2, r2, #1
 8008218:	3a01      	subs	r2, #1
 800821a:	0652      	lsls	r2, r2, #25
 800821c:	4311      	orrs	r1, r2
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008222:	06d2      	lsls	r2, r2, #27
 8008224:	430a      	orrs	r2, r1
 8008226:	4947      	ldr	r1, [pc, #284]	; (8008344 <HAL_RCC_OscConfig+0x628>)
 8008228:	4313      	orrs	r3, r2
 800822a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800822c:	4b45      	ldr	r3, [pc, #276]	; (8008344 <HAL_RCC_OscConfig+0x628>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a44      	ldr	r2, [pc, #272]	; (8008344 <HAL_RCC_OscConfig+0x628>)
 8008232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008236:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008238:	4b42      	ldr	r3, [pc, #264]	; (8008344 <HAL_RCC_OscConfig+0x628>)
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	4a41      	ldr	r2, [pc, #260]	; (8008344 <HAL_RCC_OscConfig+0x628>)
 800823e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008242:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008244:	f7fb fab8 	bl	80037b8 <HAL_GetTick>
 8008248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800824a:	e008      	b.n	800825e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800824c:	f7fb fab4 	bl	80037b8 <HAL_GetTick>
 8008250:	4602      	mov	r2, r0
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	2b02      	cmp	r3, #2
 8008258:	d901      	bls.n	800825e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e06e      	b.n	800833c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800825e:	4b39      	ldr	r3, [pc, #228]	; (8008344 <HAL_RCC_OscConfig+0x628>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d0f0      	beq.n	800824c <HAL_RCC_OscConfig+0x530>
 800826a:	e066      	b.n	800833a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800826c:	4b35      	ldr	r3, [pc, #212]	; (8008344 <HAL_RCC_OscConfig+0x628>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a34      	ldr	r2, [pc, #208]	; (8008344 <HAL_RCC_OscConfig+0x628>)
 8008272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008276:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008278:	4b32      	ldr	r3, [pc, #200]	; (8008344 <HAL_RCC_OscConfig+0x628>)
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	4a31      	ldr	r2, [pc, #196]	; (8008344 <HAL_RCC_OscConfig+0x628>)
 800827e:	f023 0303 	bic.w	r3, r3, #3
 8008282:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008284:	4b2f      	ldr	r3, [pc, #188]	; (8008344 <HAL_RCC_OscConfig+0x628>)
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	4a2e      	ldr	r2, [pc, #184]	; (8008344 <HAL_RCC_OscConfig+0x628>)
 800828a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800828e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008292:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008294:	f7fb fa90 	bl	80037b8 <HAL_GetTick>
 8008298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800829a:	e008      	b.n	80082ae <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800829c:	f7fb fa8c 	bl	80037b8 <HAL_GetTick>
 80082a0:	4602      	mov	r2, r0
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	1ad3      	subs	r3, r2, r3
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d901      	bls.n	80082ae <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e046      	b.n	800833c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082ae:	4b25      	ldr	r3, [pc, #148]	; (8008344 <HAL_RCC_OscConfig+0x628>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1f0      	bne.n	800829c <HAL_RCC_OscConfig+0x580>
 80082ba:	e03e      	b.n	800833a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	69db      	ldr	r3, [r3, #28]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d101      	bne.n	80082c8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e039      	b.n	800833c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80082c8:	4b1e      	ldr	r3, [pc, #120]	; (8008344 <HAL_RCC_OscConfig+0x628>)
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	f003 0203 	and.w	r2, r3, #3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a1b      	ldr	r3, [r3, #32]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d12c      	bne.n	8008336 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e6:	3b01      	subs	r3, #1
 80082e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d123      	bne.n	8008336 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d11b      	bne.n	8008336 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008308:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800830a:	429a      	cmp	r2, r3
 800830c:	d113      	bne.n	8008336 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008318:	085b      	lsrs	r3, r3, #1
 800831a:	3b01      	subs	r3, #1
 800831c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800831e:	429a      	cmp	r2, r3
 8008320:	d109      	bne.n	8008336 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800832c:	085b      	lsrs	r3, r3, #1
 800832e:	3b01      	subs	r3, #1
 8008330:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008332:	429a      	cmp	r2, r3
 8008334:	d001      	beq.n	800833a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e000      	b.n	800833c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3720      	adds	r7, #32
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	40021000 	.word	0x40021000
 8008348:	019f800c 	.word	0x019f800c

0800834c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008356:	2300      	movs	r3, #0
 8008358:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d101      	bne.n	8008364 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e11e      	b.n	80085a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008364:	4b91      	ldr	r3, [pc, #580]	; (80085ac <HAL_RCC_ClockConfig+0x260>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 030f 	and.w	r3, r3, #15
 800836c:	683a      	ldr	r2, [r7, #0]
 800836e:	429a      	cmp	r2, r3
 8008370:	d910      	bls.n	8008394 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008372:	4b8e      	ldr	r3, [pc, #568]	; (80085ac <HAL_RCC_ClockConfig+0x260>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f023 020f 	bic.w	r2, r3, #15
 800837a:	498c      	ldr	r1, [pc, #560]	; (80085ac <HAL_RCC_ClockConfig+0x260>)
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	4313      	orrs	r3, r2
 8008380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008382:	4b8a      	ldr	r3, [pc, #552]	; (80085ac <HAL_RCC_ClockConfig+0x260>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 030f 	and.w	r3, r3, #15
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	429a      	cmp	r2, r3
 800838e:	d001      	beq.n	8008394 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e106      	b.n	80085a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0301 	and.w	r3, r3, #1
 800839c:	2b00      	cmp	r3, #0
 800839e:	d073      	beq.n	8008488 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	2b03      	cmp	r3, #3
 80083a6:	d129      	bne.n	80083fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083a8:	4b81      	ldr	r3, [pc, #516]	; (80085b0 <HAL_RCC_ClockConfig+0x264>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d101      	bne.n	80083b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	e0f4      	b.n	80085a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80083b8:	f000 f9ce 	bl	8008758 <RCC_GetSysClockFreqFromPLLSource>
 80083bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	4a7c      	ldr	r2, [pc, #496]	; (80085b4 <HAL_RCC_ClockConfig+0x268>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d93f      	bls.n	8008446 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80083c6:	4b7a      	ldr	r3, [pc, #488]	; (80085b0 <HAL_RCC_ClockConfig+0x264>)
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d009      	beq.n	80083e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d033      	beq.n	8008446 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d12f      	bne.n	8008446 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80083e6:	4b72      	ldr	r3, [pc, #456]	; (80085b0 <HAL_RCC_ClockConfig+0x264>)
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083ee:	4a70      	ldr	r2, [pc, #448]	; (80085b0 <HAL_RCC_ClockConfig+0x264>)
 80083f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80083f6:	2380      	movs	r3, #128	; 0x80
 80083f8:	617b      	str	r3, [r7, #20]
 80083fa:	e024      	b.n	8008446 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	2b02      	cmp	r3, #2
 8008402:	d107      	bne.n	8008414 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008404:	4b6a      	ldr	r3, [pc, #424]	; (80085b0 <HAL_RCC_ClockConfig+0x264>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d109      	bne.n	8008424 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e0c6      	b.n	80085a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008414:	4b66      	ldr	r3, [pc, #408]	; (80085b0 <HAL_RCC_ClockConfig+0x264>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800841c:	2b00      	cmp	r3, #0
 800841e:	d101      	bne.n	8008424 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e0be      	b.n	80085a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008424:	f000 f8ce 	bl	80085c4 <HAL_RCC_GetSysClockFreq>
 8008428:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	4a61      	ldr	r2, [pc, #388]	; (80085b4 <HAL_RCC_ClockConfig+0x268>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d909      	bls.n	8008446 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008432:	4b5f      	ldr	r3, [pc, #380]	; (80085b0 <HAL_RCC_ClockConfig+0x264>)
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800843a:	4a5d      	ldr	r2, [pc, #372]	; (80085b0 <HAL_RCC_ClockConfig+0x264>)
 800843c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008440:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008442:	2380      	movs	r3, #128	; 0x80
 8008444:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008446:	4b5a      	ldr	r3, [pc, #360]	; (80085b0 <HAL_RCC_ClockConfig+0x264>)
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f023 0203 	bic.w	r2, r3, #3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	4957      	ldr	r1, [pc, #348]	; (80085b0 <HAL_RCC_ClockConfig+0x264>)
 8008454:	4313      	orrs	r3, r2
 8008456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008458:	f7fb f9ae 	bl	80037b8 <HAL_GetTick>
 800845c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800845e:	e00a      	b.n	8008476 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008460:	f7fb f9aa 	bl	80037b8 <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	f241 3288 	movw	r2, #5000	; 0x1388
 800846e:	4293      	cmp	r3, r2
 8008470:	d901      	bls.n	8008476 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e095      	b.n	80085a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008476:	4b4e      	ldr	r3, [pc, #312]	; (80085b0 <HAL_RCC_ClockConfig+0x264>)
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	f003 020c 	and.w	r2, r3, #12
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	429a      	cmp	r2, r3
 8008486:	d1eb      	bne.n	8008460 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0302 	and.w	r3, r3, #2
 8008490:	2b00      	cmp	r3, #0
 8008492:	d023      	beq.n	80084dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0304 	and.w	r3, r3, #4
 800849c:	2b00      	cmp	r3, #0
 800849e:	d005      	beq.n	80084ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80084a0:	4b43      	ldr	r3, [pc, #268]	; (80085b0 <HAL_RCC_ClockConfig+0x264>)
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	4a42      	ldr	r2, [pc, #264]	; (80085b0 <HAL_RCC_ClockConfig+0x264>)
 80084a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80084aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0308 	and.w	r3, r3, #8
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d007      	beq.n	80084c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80084b8:	4b3d      	ldr	r3, [pc, #244]	; (80085b0 <HAL_RCC_ClockConfig+0x264>)
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80084c0:	4a3b      	ldr	r2, [pc, #236]	; (80085b0 <HAL_RCC_ClockConfig+0x264>)
 80084c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80084c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084c8:	4b39      	ldr	r3, [pc, #228]	; (80085b0 <HAL_RCC_ClockConfig+0x264>)
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	4936      	ldr	r1, [pc, #216]	; (80085b0 <HAL_RCC_ClockConfig+0x264>)
 80084d6:	4313      	orrs	r3, r2
 80084d8:	608b      	str	r3, [r1, #8]
 80084da:	e008      	b.n	80084ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	2b80      	cmp	r3, #128	; 0x80
 80084e0:	d105      	bne.n	80084ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80084e2:	4b33      	ldr	r3, [pc, #204]	; (80085b0 <HAL_RCC_ClockConfig+0x264>)
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	4a32      	ldr	r2, [pc, #200]	; (80085b0 <HAL_RCC_ClockConfig+0x264>)
 80084e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80084ee:	4b2f      	ldr	r3, [pc, #188]	; (80085ac <HAL_RCC_ClockConfig+0x260>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 030f 	and.w	r3, r3, #15
 80084f6:	683a      	ldr	r2, [r7, #0]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d21d      	bcs.n	8008538 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084fc:	4b2b      	ldr	r3, [pc, #172]	; (80085ac <HAL_RCC_ClockConfig+0x260>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f023 020f 	bic.w	r2, r3, #15
 8008504:	4929      	ldr	r1, [pc, #164]	; (80085ac <HAL_RCC_ClockConfig+0x260>)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	4313      	orrs	r3, r2
 800850a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800850c:	f7fb f954 	bl	80037b8 <HAL_GetTick>
 8008510:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008512:	e00a      	b.n	800852a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008514:	f7fb f950 	bl	80037b8 <HAL_GetTick>
 8008518:	4602      	mov	r2, r0
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	1ad3      	subs	r3, r2, r3
 800851e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008522:	4293      	cmp	r3, r2
 8008524:	d901      	bls.n	800852a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e03b      	b.n	80085a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800852a:	4b20      	ldr	r3, [pc, #128]	; (80085ac <HAL_RCC_ClockConfig+0x260>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 030f 	and.w	r3, r3, #15
 8008532:	683a      	ldr	r2, [r7, #0]
 8008534:	429a      	cmp	r2, r3
 8008536:	d1ed      	bne.n	8008514 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 0304 	and.w	r3, r3, #4
 8008540:	2b00      	cmp	r3, #0
 8008542:	d008      	beq.n	8008556 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008544:	4b1a      	ldr	r3, [pc, #104]	; (80085b0 <HAL_RCC_ClockConfig+0x264>)
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	4917      	ldr	r1, [pc, #92]	; (80085b0 <HAL_RCC_ClockConfig+0x264>)
 8008552:	4313      	orrs	r3, r2
 8008554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 0308 	and.w	r3, r3, #8
 800855e:	2b00      	cmp	r3, #0
 8008560:	d009      	beq.n	8008576 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008562:	4b13      	ldr	r3, [pc, #76]	; (80085b0 <HAL_RCC_ClockConfig+0x264>)
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	00db      	lsls	r3, r3, #3
 8008570:	490f      	ldr	r1, [pc, #60]	; (80085b0 <HAL_RCC_ClockConfig+0x264>)
 8008572:	4313      	orrs	r3, r2
 8008574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008576:	f000 f825 	bl	80085c4 <HAL_RCC_GetSysClockFreq>
 800857a:	4602      	mov	r2, r0
 800857c:	4b0c      	ldr	r3, [pc, #48]	; (80085b0 <HAL_RCC_ClockConfig+0x264>)
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	091b      	lsrs	r3, r3, #4
 8008582:	f003 030f 	and.w	r3, r3, #15
 8008586:	490c      	ldr	r1, [pc, #48]	; (80085b8 <HAL_RCC_ClockConfig+0x26c>)
 8008588:	5ccb      	ldrb	r3, [r1, r3]
 800858a:	f003 031f 	and.w	r3, r3, #31
 800858e:	fa22 f303 	lsr.w	r3, r2, r3
 8008592:	4a0a      	ldr	r2, [pc, #40]	; (80085bc <HAL_RCC_ClockConfig+0x270>)
 8008594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008596:	4b0a      	ldr	r3, [pc, #40]	; (80085c0 <HAL_RCC_ClockConfig+0x274>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4618      	mov	r0, r3
 800859c:	f7f9 fc26 	bl	8001dec <HAL_InitTick>
 80085a0:	4603      	mov	r3, r0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3718      	adds	r7, #24
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	40022000 	.word	0x40022000
 80085b0:	40021000 	.word	0x40021000
 80085b4:	04c4b400 	.word	0x04c4b400
 80085b8:	08015648 	.word	0x08015648
 80085bc:	20000000 	.word	0x20000000
 80085c0:	20000004 	.word	0x20000004

080085c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b087      	sub	sp, #28
 80085c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80085ca:	4b2c      	ldr	r3, [pc, #176]	; (800867c <HAL_RCC_GetSysClockFreq+0xb8>)
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f003 030c 	and.w	r3, r3, #12
 80085d2:	2b04      	cmp	r3, #4
 80085d4:	d102      	bne.n	80085dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80085d6:	4b2a      	ldr	r3, [pc, #168]	; (8008680 <HAL_RCC_GetSysClockFreq+0xbc>)
 80085d8:	613b      	str	r3, [r7, #16]
 80085da:	e047      	b.n	800866c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80085dc:	4b27      	ldr	r3, [pc, #156]	; (800867c <HAL_RCC_GetSysClockFreq+0xb8>)
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	f003 030c 	and.w	r3, r3, #12
 80085e4:	2b08      	cmp	r3, #8
 80085e6:	d102      	bne.n	80085ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80085e8:	4b25      	ldr	r3, [pc, #148]	; (8008680 <HAL_RCC_GetSysClockFreq+0xbc>)
 80085ea:	613b      	str	r3, [r7, #16]
 80085ec:	e03e      	b.n	800866c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80085ee:	4b23      	ldr	r3, [pc, #140]	; (800867c <HAL_RCC_GetSysClockFreq+0xb8>)
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	f003 030c 	and.w	r3, r3, #12
 80085f6:	2b0c      	cmp	r3, #12
 80085f8:	d136      	bne.n	8008668 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80085fa:	4b20      	ldr	r3, [pc, #128]	; (800867c <HAL_RCC_GetSysClockFreq+0xb8>)
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	f003 0303 	and.w	r3, r3, #3
 8008602:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008604:	4b1d      	ldr	r3, [pc, #116]	; (800867c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	091b      	lsrs	r3, r3, #4
 800860a:	f003 030f 	and.w	r3, r3, #15
 800860e:	3301      	adds	r3, #1
 8008610:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2b03      	cmp	r3, #3
 8008616:	d10c      	bne.n	8008632 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008618:	4a19      	ldr	r2, [pc, #100]	; (8008680 <HAL_RCC_GetSysClockFreq+0xbc>)
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008620:	4a16      	ldr	r2, [pc, #88]	; (800867c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008622:	68d2      	ldr	r2, [r2, #12]
 8008624:	0a12      	lsrs	r2, r2, #8
 8008626:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800862a:	fb02 f303 	mul.w	r3, r2, r3
 800862e:	617b      	str	r3, [r7, #20]
      break;
 8008630:	e00c      	b.n	800864c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008632:	4a13      	ldr	r2, [pc, #76]	; (8008680 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	fbb2 f3f3 	udiv	r3, r2, r3
 800863a:	4a10      	ldr	r2, [pc, #64]	; (800867c <HAL_RCC_GetSysClockFreq+0xb8>)
 800863c:	68d2      	ldr	r2, [r2, #12]
 800863e:	0a12      	lsrs	r2, r2, #8
 8008640:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008644:	fb02 f303 	mul.w	r3, r2, r3
 8008648:	617b      	str	r3, [r7, #20]
      break;
 800864a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800864c:	4b0b      	ldr	r3, [pc, #44]	; (800867c <HAL_RCC_GetSysClockFreq+0xb8>)
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	0e5b      	lsrs	r3, r3, #25
 8008652:	f003 0303 	and.w	r3, r3, #3
 8008656:	3301      	adds	r3, #1
 8008658:	005b      	lsls	r3, r3, #1
 800865a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	fbb2 f3f3 	udiv	r3, r2, r3
 8008664:	613b      	str	r3, [r7, #16]
 8008666:	e001      	b.n	800866c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008668:	2300      	movs	r3, #0
 800866a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800866c:	693b      	ldr	r3, [r7, #16]
}
 800866e:	4618      	mov	r0, r3
 8008670:	371c      	adds	r7, #28
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	40021000 	.word	0x40021000
 8008680:	00f42400 	.word	0x00f42400

08008684 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008684:	b480      	push	{r7}
 8008686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008688:	4b03      	ldr	r3, [pc, #12]	; (8008698 <HAL_RCC_GetHCLKFreq+0x14>)
 800868a:	681b      	ldr	r3, [r3, #0]
}
 800868c:	4618      	mov	r0, r3
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	20000000 	.word	0x20000000

0800869c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80086a0:	f7ff fff0 	bl	8008684 <HAL_RCC_GetHCLKFreq>
 80086a4:	4602      	mov	r2, r0
 80086a6:	4b06      	ldr	r3, [pc, #24]	; (80086c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	0a1b      	lsrs	r3, r3, #8
 80086ac:	f003 0307 	and.w	r3, r3, #7
 80086b0:	4904      	ldr	r1, [pc, #16]	; (80086c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80086b2:	5ccb      	ldrb	r3, [r1, r3]
 80086b4:	f003 031f 	and.w	r3, r3, #31
 80086b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086bc:	4618      	mov	r0, r3
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	40021000 	.word	0x40021000
 80086c4:	08015658 	.word	0x08015658

080086c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80086cc:	f7ff ffda 	bl	8008684 <HAL_RCC_GetHCLKFreq>
 80086d0:	4602      	mov	r2, r0
 80086d2:	4b06      	ldr	r3, [pc, #24]	; (80086ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	0adb      	lsrs	r3, r3, #11
 80086d8:	f003 0307 	and.w	r3, r3, #7
 80086dc:	4904      	ldr	r1, [pc, #16]	; (80086f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80086de:	5ccb      	ldrb	r3, [r1, r3]
 80086e0:	f003 031f 	and.w	r3, r3, #31
 80086e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	40021000 	.word	0x40021000
 80086f0:	08015658 	.word	0x08015658

080086f4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	220f      	movs	r2, #15
 8008702:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008704:	4b12      	ldr	r3, [pc, #72]	; (8008750 <HAL_RCC_GetClockConfig+0x5c>)
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f003 0203 	and.w	r2, r3, #3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8008710:	4b0f      	ldr	r3, [pc, #60]	; (8008750 <HAL_RCC_GetClockConfig+0x5c>)
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800871c:	4b0c      	ldr	r3, [pc, #48]	; (8008750 <HAL_RCC_GetClockConfig+0x5c>)
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8008728:	4b09      	ldr	r3, [pc, #36]	; (8008750 <HAL_RCC_GetClockConfig+0x5c>)
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	08db      	lsrs	r3, r3, #3
 800872e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008736:	4b07      	ldr	r3, [pc, #28]	; (8008754 <HAL_RCC_GetClockConfig+0x60>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 020f 	and.w	r2, r3, #15
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	601a      	str	r2, [r3, #0]
}
 8008742:	bf00      	nop
 8008744:	370c      	adds	r7, #12
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	40021000 	.word	0x40021000
 8008754:	40022000 	.word	0x40022000

08008758 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008758:	b480      	push	{r7}
 800875a:	b087      	sub	sp, #28
 800875c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800875e:	4b1e      	ldr	r3, [pc, #120]	; (80087d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	f003 0303 	and.w	r3, r3, #3
 8008766:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008768:	4b1b      	ldr	r3, [pc, #108]	; (80087d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	091b      	lsrs	r3, r3, #4
 800876e:	f003 030f 	and.w	r3, r3, #15
 8008772:	3301      	adds	r3, #1
 8008774:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	2b03      	cmp	r3, #3
 800877a:	d10c      	bne.n	8008796 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800877c:	4a17      	ldr	r2, [pc, #92]	; (80087dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	fbb2 f3f3 	udiv	r3, r2, r3
 8008784:	4a14      	ldr	r2, [pc, #80]	; (80087d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008786:	68d2      	ldr	r2, [r2, #12]
 8008788:	0a12      	lsrs	r2, r2, #8
 800878a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800878e:	fb02 f303 	mul.w	r3, r2, r3
 8008792:	617b      	str	r3, [r7, #20]
    break;
 8008794:	e00c      	b.n	80087b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008796:	4a11      	ldr	r2, [pc, #68]	; (80087dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	fbb2 f3f3 	udiv	r3, r2, r3
 800879e:	4a0e      	ldr	r2, [pc, #56]	; (80087d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80087a0:	68d2      	ldr	r2, [r2, #12]
 80087a2:	0a12      	lsrs	r2, r2, #8
 80087a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80087a8:	fb02 f303 	mul.w	r3, r2, r3
 80087ac:	617b      	str	r3, [r7, #20]
    break;
 80087ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80087b0:	4b09      	ldr	r3, [pc, #36]	; (80087d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	0e5b      	lsrs	r3, r3, #25
 80087b6:	f003 0303 	and.w	r3, r3, #3
 80087ba:	3301      	adds	r3, #1
 80087bc:	005b      	lsls	r3, r3, #1
 80087be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80087c0:	697a      	ldr	r2, [r7, #20]
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80087ca:	687b      	ldr	r3, [r7, #4]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	371c      	adds	r7, #28
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr
 80087d8:	40021000 	.word	0x40021000
 80087dc:	00f42400 	.word	0x00f42400

080087e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80087e8:	2300      	movs	r3, #0
 80087ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80087ec:	2300      	movs	r3, #0
 80087ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f000 8098 	beq.w	800892e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087fe:	2300      	movs	r3, #0
 8008800:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008802:	4b43      	ldr	r3, [pc, #268]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800880a:	2b00      	cmp	r3, #0
 800880c:	d10d      	bne.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800880e:	4b40      	ldr	r3, [pc, #256]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008812:	4a3f      	ldr	r2, [pc, #252]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008818:	6593      	str	r3, [r2, #88]	; 0x58
 800881a:	4b3d      	ldr	r3, [pc, #244]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800881c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800881e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008822:	60bb      	str	r3, [r7, #8]
 8008824:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008826:	2301      	movs	r3, #1
 8008828:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800882a:	4b3a      	ldr	r3, [pc, #232]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a39      	ldr	r2, [pc, #228]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008834:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008836:	f7fa ffbf 	bl	80037b8 <HAL_GetTick>
 800883a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800883c:	e009      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800883e:	f7fa ffbb 	bl	80037b8 <HAL_GetTick>
 8008842:	4602      	mov	r2, r0
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	2b02      	cmp	r3, #2
 800884a:	d902      	bls.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800884c:	2303      	movs	r3, #3
 800884e:	74fb      	strb	r3, [r7, #19]
        break;
 8008850:	e005      	b.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008852:	4b30      	ldr	r3, [pc, #192]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800885a:	2b00      	cmp	r3, #0
 800885c:	d0ef      	beq.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800885e:	7cfb      	ldrb	r3, [r7, #19]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d159      	bne.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008864:	4b2a      	ldr	r3, [pc, #168]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800886a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800886e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d01e      	beq.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800887a:	697a      	ldr	r2, [r7, #20]
 800887c:	429a      	cmp	r2, r3
 800887e:	d019      	beq.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008880:	4b23      	ldr	r3, [pc, #140]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800888a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800888c:	4b20      	ldr	r3, [pc, #128]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800888e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008892:	4a1f      	ldr	r2, [pc, #124]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800889c:	4b1c      	ldr	r3, [pc, #112]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800889e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088a2:	4a1b      	ldr	r2, [pc, #108]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80088ac:	4a18      	ldr	r2, [pc, #96]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	f003 0301 	and.w	r3, r3, #1
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d016      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088be:	f7fa ff7b 	bl	80037b8 <HAL_GetTick>
 80088c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088c4:	e00b      	b.n	80088de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088c6:	f7fa ff77 	bl	80037b8 <HAL_GetTick>
 80088ca:	4602      	mov	r2, r0
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d902      	bls.n	80088de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	74fb      	strb	r3, [r7, #19]
            break;
 80088dc:	e006      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088de:	4b0c      	ldr	r3, [pc, #48]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088e4:	f003 0302 	and.w	r3, r3, #2
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d0ec      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80088ec:	7cfb      	ldrb	r3, [r7, #19]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10b      	bne.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80088f2:	4b07      	ldr	r3, [pc, #28]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008900:	4903      	ldr	r1, [pc, #12]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008902:	4313      	orrs	r3, r2
 8008904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008908:	e008      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800890a:	7cfb      	ldrb	r3, [r7, #19]
 800890c:	74bb      	strb	r3, [r7, #18]
 800890e:	e005      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008910:	40021000 	.word	0x40021000
 8008914:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008918:	7cfb      	ldrb	r3, [r7, #19]
 800891a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800891c:	7c7b      	ldrb	r3, [r7, #17]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d105      	bne.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008922:	4ba7      	ldr	r3, [pc, #668]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008926:	4aa6      	ldr	r2, [pc, #664]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800892c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00a      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800893a:	4ba1      	ldr	r3, [pc, #644]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800893c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008940:	f023 0203 	bic.w	r2, r3, #3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	499d      	ldr	r1, [pc, #628]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800894a:	4313      	orrs	r3, r2
 800894c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0302 	and.w	r3, r3, #2
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00a      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800895c:	4b98      	ldr	r3, [pc, #608]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800895e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008962:	f023 020c 	bic.w	r2, r3, #12
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	4995      	ldr	r1, [pc, #596]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800896c:	4313      	orrs	r3, r2
 800896e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 0304 	and.w	r3, r3, #4
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00a      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800897e:	4b90      	ldr	r3, [pc, #576]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008984:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	498c      	ldr	r1, [pc, #560]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800898e:	4313      	orrs	r3, r2
 8008990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0308 	and.w	r3, r3, #8
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00a      	beq.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80089a0:	4b87      	ldr	r3, [pc, #540]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	4984      	ldr	r1, [pc, #528]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089b0:	4313      	orrs	r3, r2
 80089b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 0310 	and.w	r3, r3, #16
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00a      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80089c2:	4b7f      	ldr	r3, [pc, #508]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	695b      	ldr	r3, [r3, #20]
 80089d0:	497b      	ldr	r1, [pc, #492]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089d2:	4313      	orrs	r3, r2
 80089d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0320 	and.w	r3, r3, #32
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00a      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80089e4:	4b76      	ldr	r3, [pc, #472]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	4973      	ldr	r1, [pc, #460]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089f4:	4313      	orrs	r3, r2
 80089f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00a      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008a06:	4b6e      	ldr	r3, [pc, #440]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	69db      	ldr	r3, [r3, #28]
 8008a14:	496a      	ldr	r1, [pc, #424]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a16:	4313      	orrs	r3, r2
 8008a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00a      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008a28:	4b65      	ldr	r3, [pc, #404]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	4962      	ldr	r1, [pc, #392]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00a      	beq.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008a4a:	4b5d      	ldr	r3, [pc, #372]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a58:	4959      	ldr	r1, [pc, #356]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00a      	beq.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008a6c:	4b54      	ldr	r3, [pc, #336]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a72:	f023 0203 	bic.w	r2, r3, #3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7a:	4951      	ldr	r1, [pc, #324]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00a      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008a8e:	4b4c      	ldr	r3, [pc, #304]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9c:	4948      	ldr	r1, [pc, #288]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d015      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ab0:	4b43      	ldr	r3, [pc, #268]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ab6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008abe:	4940      	ldr	r1, [pc, #256]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ace:	d105      	bne.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ad0:	4b3b      	ldr	r3, [pc, #236]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	4a3a      	ldr	r2, [pc, #232]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ada:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d015      	beq.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008ae8:	4b35      	ldr	r3, [pc, #212]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af6:	4932      	ldr	r1, [pc, #200]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008af8:	4313      	orrs	r3, r2
 8008afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b06:	d105      	bne.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b08:	4b2d      	ldr	r3, [pc, #180]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	4a2c      	ldr	r2, [pc, #176]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b12:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d015      	beq.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008b20:	4b27      	ldr	r3, [pc, #156]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b26:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2e:	4924      	ldr	r1, [pc, #144]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b30:	4313      	orrs	r3, r2
 8008b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b3e:	d105      	bne.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b40:	4b1f      	ldr	r3, [pc, #124]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	4a1e      	ldr	r2, [pc, #120]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b4a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d015      	beq.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b58:	4b19      	ldr	r3, [pc, #100]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b66:	4916      	ldr	r1, [pc, #88]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b76:	d105      	bne.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b78:	4b11      	ldr	r3, [pc, #68]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	4a10      	ldr	r2, [pc, #64]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b82:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d019      	beq.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b90:	4b0b      	ldr	r3, [pc, #44]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9e:	4908      	ldr	r1, [pc, #32]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008baa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bae:	d109      	bne.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bb0:	4b03      	ldr	r3, [pc, #12]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	4a02      	ldr	r2, [pc, #8]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bba:	60d3      	str	r3, [r2, #12]
 8008bbc:	e002      	b.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008bbe:	bf00      	nop
 8008bc0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d015      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008bd0:	4b29      	ldr	r3, [pc, #164]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bde:	4926      	ldr	r1, [pc, #152]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008be0:	4313      	orrs	r3, r2
 8008be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bee:	d105      	bne.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008bf0:	4b21      	ldr	r3, [pc, #132]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	4a20      	ldr	r2, [pc, #128]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bfa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d015      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008c08:	4b1b      	ldr	r3, [pc, #108]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c0e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c16:	4918      	ldr	r1, [pc, #96]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c26:	d105      	bne.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008c28:	4b13      	ldr	r3, [pc, #76]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	4a12      	ldr	r2, [pc, #72]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c32:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d015      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008c40:	4b0d      	ldr	r3, [pc, #52]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008c46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c4e:	490a      	ldr	r1, [pc, #40]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c50:	4313      	orrs	r3, r2
 8008c52:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c5e:	d105      	bne.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c60:	4b05      	ldr	r3, [pc, #20]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	4a04      	ldr	r2, [pc, #16]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c6a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008c6c:	7cbb      	ldrb	r3, [r7, #18]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3718      	adds	r7, #24
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	40021000 	.word	0x40021000

08008c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d101      	bne.n	8008c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e049      	b.n	8008d22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d106      	bne.n	8008ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f7f9 fd02 	bl	80026ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2202      	movs	r2, #2
 8008cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	4619      	mov	r1, r3
 8008cba:	4610      	mov	r0, r2
 8008cbc:	f001 f824 	bl	8009d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
	...

08008d2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d001      	beq.n	8008d44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	e054      	b.n	8008dee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2202      	movs	r2, #2
 8008d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68da      	ldr	r2, [r3, #12]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f042 0201 	orr.w	r2, r2, #1
 8008d5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a26      	ldr	r2, [pc, #152]	; (8008dfc <HAL_TIM_Base_Start_IT+0xd0>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d022      	beq.n	8008dac <HAL_TIM_Base_Start_IT+0x80>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d6e:	d01d      	beq.n	8008dac <HAL_TIM_Base_Start_IT+0x80>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a22      	ldr	r2, [pc, #136]	; (8008e00 <HAL_TIM_Base_Start_IT+0xd4>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d018      	beq.n	8008dac <HAL_TIM_Base_Start_IT+0x80>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a21      	ldr	r2, [pc, #132]	; (8008e04 <HAL_TIM_Base_Start_IT+0xd8>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d013      	beq.n	8008dac <HAL_TIM_Base_Start_IT+0x80>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a1f      	ldr	r2, [pc, #124]	; (8008e08 <HAL_TIM_Base_Start_IT+0xdc>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d00e      	beq.n	8008dac <HAL_TIM_Base_Start_IT+0x80>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a1e      	ldr	r2, [pc, #120]	; (8008e0c <HAL_TIM_Base_Start_IT+0xe0>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d009      	beq.n	8008dac <HAL_TIM_Base_Start_IT+0x80>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a1c      	ldr	r2, [pc, #112]	; (8008e10 <HAL_TIM_Base_Start_IT+0xe4>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d004      	beq.n	8008dac <HAL_TIM_Base_Start_IT+0x80>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a1b      	ldr	r2, [pc, #108]	; (8008e14 <HAL_TIM_Base_Start_IT+0xe8>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d115      	bne.n	8008dd8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	689a      	ldr	r2, [r3, #8]
 8008db2:	4b19      	ldr	r3, [pc, #100]	; (8008e18 <HAL_TIM_Base_Start_IT+0xec>)
 8008db4:	4013      	ands	r3, r2
 8008db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2b06      	cmp	r3, #6
 8008dbc:	d015      	beq.n	8008dea <HAL_TIM_Base_Start_IT+0xbe>
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dc4:	d011      	beq.n	8008dea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f042 0201 	orr.w	r2, r2, #1
 8008dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dd6:	e008      	b.n	8008dea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f042 0201 	orr.w	r2, r2, #1
 8008de6:	601a      	str	r2, [r3, #0]
 8008de8:	e000      	b.n	8008dec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3714      	adds	r7, #20
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	40012c00 	.word	0x40012c00
 8008e00:	40000400 	.word	0x40000400
 8008e04:	40000800 	.word	0x40000800
 8008e08:	40000c00 	.word	0x40000c00
 8008e0c:	40013400 	.word	0x40013400
 8008e10:	40014000 	.word	0x40014000
 8008e14:	40015000 	.word	0x40015000
 8008e18:	00010007 	.word	0x00010007

08008e1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d101      	bne.n	8008e2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e049      	b.n	8008ec2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d106      	bne.n	8008e48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 f841 	bl	8008eca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2202      	movs	r2, #2
 8008e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	3304      	adds	r3, #4
 8008e58:	4619      	mov	r1, r3
 8008e5a:	4610      	mov	r0, r2
 8008e5c:	f000 ff54 	bl	8009d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008eca:	b480      	push	{r7}
 8008ecc:	b083      	sub	sp, #12
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008ed2:	bf00      	nop
 8008ed4:	370c      	adds	r7, #12
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
	...

08008ee0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d109      	bne.n	8008f04 <HAL_TIM_PWM_Start+0x24>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	bf14      	ite	ne
 8008efc:	2301      	movne	r3, #1
 8008efe:	2300      	moveq	r3, #0
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	e03c      	b.n	8008f7e <HAL_TIM_PWM_Start+0x9e>
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	2b04      	cmp	r3, #4
 8008f08:	d109      	bne.n	8008f1e <HAL_TIM_PWM_Start+0x3e>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	bf14      	ite	ne
 8008f16:	2301      	movne	r3, #1
 8008f18:	2300      	moveq	r3, #0
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	e02f      	b.n	8008f7e <HAL_TIM_PWM_Start+0x9e>
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	2b08      	cmp	r3, #8
 8008f22:	d109      	bne.n	8008f38 <HAL_TIM_PWM_Start+0x58>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	bf14      	ite	ne
 8008f30:	2301      	movne	r3, #1
 8008f32:	2300      	moveq	r3, #0
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	e022      	b.n	8008f7e <HAL_TIM_PWM_Start+0x9e>
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	2b0c      	cmp	r3, #12
 8008f3c:	d109      	bne.n	8008f52 <HAL_TIM_PWM_Start+0x72>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	bf14      	ite	ne
 8008f4a:	2301      	movne	r3, #1
 8008f4c:	2300      	moveq	r3, #0
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	e015      	b.n	8008f7e <HAL_TIM_PWM_Start+0x9e>
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	2b10      	cmp	r3, #16
 8008f56:	d109      	bne.n	8008f6c <HAL_TIM_PWM_Start+0x8c>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	bf14      	ite	ne
 8008f64:	2301      	movne	r3, #1
 8008f66:	2300      	moveq	r3, #0
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	e008      	b.n	8008f7e <HAL_TIM_PWM_Start+0x9e>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	bf14      	ite	ne
 8008f78:	2301      	movne	r3, #1
 8008f7a:	2300      	moveq	r3, #0
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d001      	beq.n	8008f86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	e0a6      	b.n	80090d4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d104      	bne.n	8008f96 <HAL_TIM_PWM_Start+0xb6>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2202      	movs	r2, #2
 8008f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f94:	e023      	b.n	8008fde <HAL_TIM_PWM_Start+0xfe>
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	2b04      	cmp	r3, #4
 8008f9a:	d104      	bne.n	8008fa6 <HAL_TIM_PWM_Start+0xc6>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fa4:	e01b      	b.n	8008fde <HAL_TIM_PWM_Start+0xfe>
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	2b08      	cmp	r3, #8
 8008faa:	d104      	bne.n	8008fb6 <HAL_TIM_PWM_Start+0xd6>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2202      	movs	r2, #2
 8008fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fb4:	e013      	b.n	8008fde <HAL_TIM_PWM_Start+0xfe>
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	2b0c      	cmp	r3, #12
 8008fba:	d104      	bne.n	8008fc6 <HAL_TIM_PWM_Start+0xe6>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2202      	movs	r2, #2
 8008fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008fc4:	e00b      	b.n	8008fde <HAL_TIM_PWM_Start+0xfe>
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	2b10      	cmp	r3, #16
 8008fca:	d104      	bne.n	8008fd6 <HAL_TIM_PWM_Start+0xf6>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2202      	movs	r2, #2
 8008fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fd4:	e003      	b.n	8008fde <HAL_TIM_PWM_Start+0xfe>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2202      	movs	r2, #2
 8008fda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f001 fc26 	bl	800a838 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a3a      	ldr	r2, [pc, #232]	; (80090dc <HAL_TIM_PWM_Start+0x1fc>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d018      	beq.n	8009028 <HAL_TIM_PWM_Start+0x148>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a39      	ldr	r2, [pc, #228]	; (80090e0 <HAL_TIM_PWM_Start+0x200>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d013      	beq.n	8009028 <HAL_TIM_PWM_Start+0x148>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a37      	ldr	r2, [pc, #220]	; (80090e4 <HAL_TIM_PWM_Start+0x204>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d00e      	beq.n	8009028 <HAL_TIM_PWM_Start+0x148>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a36      	ldr	r2, [pc, #216]	; (80090e8 <HAL_TIM_PWM_Start+0x208>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d009      	beq.n	8009028 <HAL_TIM_PWM_Start+0x148>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a34      	ldr	r2, [pc, #208]	; (80090ec <HAL_TIM_PWM_Start+0x20c>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d004      	beq.n	8009028 <HAL_TIM_PWM_Start+0x148>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a33      	ldr	r2, [pc, #204]	; (80090f0 <HAL_TIM_PWM_Start+0x210>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d101      	bne.n	800902c <HAL_TIM_PWM_Start+0x14c>
 8009028:	2301      	movs	r3, #1
 800902a:	e000      	b.n	800902e <HAL_TIM_PWM_Start+0x14e>
 800902c:	2300      	movs	r3, #0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d007      	beq.n	8009042 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009040:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a25      	ldr	r2, [pc, #148]	; (80090dc <HAL_TIM_PWM_Start+0x1fc>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d022      	beq.n	8009092 <HAL_TIM_PWM_Start+0x1b2>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009054:	d01d      	beq.n	8009092 <HAL_TIM_PWM_Start+0x1b2>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a26      	ldr	r2, [pc, #152]	; (80090f4 <HAL_TIM_PWM_Start+0x214>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d018      	beq.n	8009092 <HAL_TIM_PWM_Start+0x1b2>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a24      	ldr	r2, [pc, #144]	; (80090f8 <HAL_TIM_PWM_Start+0x218>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d013      	beq.n	8009092 <HAL_TIM_PWM_Start+0x1b2>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a23      	ldr	r2, [pc, #140]	; (80090fc <HAL_TIM_PWM_Start+0x21c>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d00e      	beq.n	8009092 <HAL_TIM_PWM_Start+0x1b2>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a19      	ldr	r2, [pc, #100]	; (80090e0 <HAL_TIM_PWM_Start+0x200>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d009      	beq.n	8009092 <HAL_TIM_PWM_Start+0x1b2>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a18      	ldr	r2, [pc, #96]	; (80090e4 <HAL_TIM_PWM_Start+0x204>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d004      	beq.n	8009092 <HAL_TIM_PWM_Start+0x1b2>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a18      	ldr	r2, [pc, #96]	; (80090f0 <HAL_TIM_PWM_Start+0x210>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d115      	bne.n	80090be <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	689a      	ldr	r2, [r3, #8]
 8009098:	4b19      	ldr	r3, [pc, #100]	; (8009100 <HAL_TIM_PWM_Start+0x220>)
 800909a:	4013      	ands	r3, r2
 800909c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2b06      	cmp	r3, #6
 80090a2:	d015      	beq.n	80090d0 <HAL_TIM_PWM_Start+0x1f0>
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090aa:	d011      	beq.n	80090d0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f042 0201 	orr.w	r2, r2, #1
 80090ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090bc:	e008      	b.n	80090d0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f042 0201 	orr.w	r2, r2, #1
 80090cc:	601a      	str	r2, [r3, #0]
 80090ce:	e000      	b.n	80090d2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	40012c00 	.word	0x40012c00
 80090e0:	40013400 	.word	0x40013400
 80090e4:	40014000 	.word	0x40014000
 80090e8:	40014400 	.word	0x40014400
 80090ec:	40014800 	.word	0x40014800
 80090f0:	40015000 	.word	0x40015000
 80090f4:	40000400 	.word	0x40000400
 80090f8:	40000800 	.word	0x40000800
 80090fc:	40000c00 	.word	0x40000c00
 8009100:	00010007 	.word	0x00010007

08009104 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d101      	bne.n	8009116 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	e049      	b.n	80091aa <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800911c:	b2db      	uxtb	r3, r3
 800911e:	2b00      	cmp	r3, #0
 8009120:	d106      	bne.n	8009130 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f841 	bl	80091b2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2202      	movs	r2, #2
 8009134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	3304      	adds	r3, #4
 8009140:	4619      	mov	r1, r3
 8009142:	4610      	mov	r0, r2
 8009144:	f000 fde0 	bl	8009d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b083      	sub	sp, #12
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80091ba:	bf00      	nop
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr

080091c6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b086      	sub	sp, #24
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d101      	bne.n	80091da <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	e097      	b.n	800930a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d106      	bne.n	80091f4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f7f9 fb2a 	bl	8002848 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2202      	movs	r2, #2
 80091f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	6812      	ldr	r2, [r2, #0]
 8009206:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800920a:	f023 0307 	bic.w	r3, r3, #7
 800920e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	3304      	adds	r3, #4
 8009218:	4619      	mov	r1, r3
 800921a:	4610      	mov	r0, r2
 800921c:	f000 fd74 	bl	8009d08 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6a1b      	ldr	r3, [r3, #32]
 8009236:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	697a      	ldr	r2, [r7, #20]
 800923e:	4313      	orrs	r3, r2
 8009240:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009248:	f023 0303 	bic.w	r3, r3, #3
 800924c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	689a      	ldr	r2, [r3, #8]
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	021b      	lsls	r3, r3, #8
 8009258:	4313      	orrs	r3, r2
 800925a:	693a      	ldr	r2, [r7, #16]
 800925c:	4313      	orrs	r3, r2
 800925e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009266:	f023 030c 	bic.w	r3, r3, #12
 800926a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	68da      	ldr	r2, [r3, #12]
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	69db      	ldr	r3, [r3, #28]
 8009280:	021b      	lsls	r3, r3, #8
 8009282:	4313      	orrs	r3, r2
 8009284:	693a      	ldr	r2, [r7, #16]
 8009286:	4313      	orrs	r3, r2
 8009288:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	011a      	lsls	r2, r3, #4
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	6a1b      	ldr	r3, [r3, #32]
 8009294:	031b      	lsls	r3, r3, #12
 8009296:	4313      	orrs	r3, r2
 8009298:	693a      	ldr	r2, [r7, #16]
 800929a:	4313      	orrs	r3, r2
 800929c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80092a4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80092ac:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	685a      	ldr	r2, [r3, #4]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	695b      	ldr	r3, [r3, #20]
 80092b6:	011b      	lsls	r3, r3, #4
 80092b8:	4313      	orrs	r3, r2
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	4313      	orrs	r3, r2
 80092be:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	697a      	ldr	r2, [r7, #20]
 80092c6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	693a      	ldr	r2, [r7, #16]
 80092ce:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	68fa      	ldr	r2, [r7, #12]
 80092d6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3718      	adds	r7, #24
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b084      	sub	sp, #16
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009322:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800932a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009332:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800933a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d110      	bne.n	8009364 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009342:	7bfb      	ldrb	r3, [r7, #15]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d102      	bne.n	800934e <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009348:	7b7b      	ldrb	r3, [r7, #13]
 800934a:	2b01      	cmp	r3, #1
 800934c:	d001      	beq.n	8009352 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e069      	b.n	8009426 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2202      	movs	r2, #2
 8009356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2202      	movs	r2, #2
 800935e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009362:	e031      	b.n	80093c8 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	2b04      	cmp	r3, #4
 8009368:	d110      	bne.n	800938c <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800936a:	7bbb      	ldrb	r3, [r7, #14]
 800936c:	2b01      	cmp	r3, #1
 800936e:	d102      	bne.n	8009376 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009370:	7b3b      	ldrb	r3, [r7, #12]
 8009372:	2b01      	cmp	r3, #1
 8009374:	d001      	beq.n	800937a <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009376:	2301      	movs	r3, #1
 8009378:	e055      	b.n	8009426 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2202      	movs	r2, #2
 800937e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2202      	movs	r2, #2
 8009386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800938a:	e01d      	b.n	80093c8 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800938c:	7bfb      	ldrb	r3, [r7, #15]
 800938e:	2b01      	cmp	r3, #1
 8009390:	d108      	bne.n	80093a4 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009392:	7bbb      	ldrb	r3, [r7, #14]
 8009394:	2b01      	cmp	r3, #1
 8009396:	d105      	bne.n	80093a4 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009398:	7b7b      	ldrb	r3, [r7, #13]
 800939a:	2b01      	cmp	r3, #1
 800939c:	d102      	bne.n	80093a4 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800939e:	7b3b      	ldrb	r3, [r7, #12]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d001      	beq.n	80093a8 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	e03e      	b.n	8009426 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2202      	movs	r2, #2
 80093ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2202      	movs	r2, #2
 80093b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2202      	movs	r2, #2
 80093bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2202      	movs	r2, #2
 80093c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d003      	beq.n	80093d6 <HAL_TIM_Encoder_Start+0xc4>
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	2b04      	cmp	r3, #4
 80093d2:	d008      	beq.n	80093e6 <HAL_TIM_Encoder_Start+0xd4>
 80093d4:	e00f      	b.n	80093f6 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2201      	movs	r2, #1
 80093dc:	2100      	movs	r1, #0
 80093de:	4618      	mov	r0, r3
 80093e0:	f001 fa2a 	bl	800a838 <TIM_CCxChannelCmd>
      break;
 80093e4:	e016      	b.n	8009414 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2201      	movs	r2, #1
 80093ec:	2104      	movs	r1, #4
 80093ee:	4618      	mov	r0, r3
 80093f0:	f001 fa22 	bl	800a838 <TIM_CCxChannelCmd>
      break;
 80093f4:	e00e      	b.n	8009414 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2201      	movs	r2, #1
 80093fc:	2100      	movs	r1, #0
 80093fe:	4618      	mov	r0, r3
 8009400:	f001 fa1a 	bl	800a838 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2201      	movs	r2, #1
 800940a:	2104      	movs	r1, #4
 800940c:	4618      	mov	r0, r3
 800940e:	f001 fa13 	bl	800a838 <TIM_CCxChannelCmd>
      break;
 8009412:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f042 0201 	orr.w	r2, r2, #1
 8009422:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b082      	sub	sp, #8
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	f003 0302 	and.w	r3, r3, #2
 8009440:	2b02      	cmp	r3, #2
 8009442:	d122      	bne.n	800948a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	f003 0302 	and.w	r3, r3, #2
 800944e:	2b02      	cmp	r3, #2
 8009450:	d11b      	bne.n	800948a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f06f 0202 	mvn.w	r2, #2
 800945a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	699b      	ldr	r3, [r3, #24]
 8009468:	f003 0303 	and.w	r3, r3, #3
 800946c:	2b00      	cmp	r3, #0
 800946e:	d003      	beq.n	8009478 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 fc2b 	bl	8009ccc <HAL_TIM_IC_CaptureCallback>
 8009476:	e005      	b.n	8009484 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 fc1d 	bl	8009cb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fc2e 	bl	8009ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	691b      	ldr	r3, [r3, #16]
 8009490:	f003 0304 	and.w	r3, r3, #4
 8009494:	2b04      	cmp	r3, #4
 8009496:	d122      	bne.n	80094de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	f003 0304 	and.w	r3, r3, #4
 80094a2:	2b04      	cmp	r3, #4
 80094a4:	d11b      	bne.n	80094de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f06f 0204 	mvn.w	r2, #4
 80094ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2202      	movs	r2, #2
 80094b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	699b      	ldr	r3, [r3, #24]
 80094bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d003      	beq.n	80094cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fc01 	bl	8009ccc <HAL_TIM_IC_CaptureCallback>
 80094ca:	e005      	b.n	80094d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 fbf3 	bl	8009cb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 fc04 	bl	8009ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	691b      	ldr	r3, [r3, #16]
 80094e4:	f003 0308 	and.w	r3, r3, #8
 80094e8:	2b08      	cmp	r3, #8
 80094ea:	d122      	bne.n	8009532 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	f003 0308 	and.w	r3, r3, #8
 80094f6:	2b08      	cmp	r3, #8
 80094f8:	d11b      	bne.n	8009532 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f06f 0208 	mvn.w	r2, #8
 8009502:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2204      	movs	r2, #4
 8009508:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	69db      	ldr	r3, [r3, #28]
 8009510:	f003 0303 	and.w	r3, r3, #3
 8009514:	2b00      	cmp	r3, #0
 8009516:	d003      	beq.n	8009520 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fbd7 	bl	8009ccc <HAL_TIM_IC_CaptureCallback>
 800951e:	e005      	b.n	800952c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 fbc9 	bl	8009cb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 fbda 	bl	8009ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	691b      	ldr	r3, [r3, #16]
 8009538:	f003 0310 	and.w	r3, r3, #16
 800953c:	2b10      	cmp	r3, #16
 800953e:	d122      	bne.n	8009586 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	f003 0310 	and.w	r3, r3, #16
 800954a:	2b10      	cmp	r3, #16
 800954c:	d11b      	bne.n	8009586 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f06f 0210 	mvn.w	r2, #16
 8009556:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2208      	movs	r2, #8
 800955c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	69db      	ldr	r3, [r3, #28]
 8009564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 fbad 	bl	8009ccc <HAL_TIM_IC_CaptureCallback>
 8009572:	e005      	b.n	8009580 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 fb9f 	bl	8009cb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fbb0 	bl	8009ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	f003 0301 	and.w	r3, r3, #1
 8009590:	2b01      	cmp	r3, #1
 8009592:	d10e      	bne.n	80095b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	f003 0301 	and.w	r3, r3, #1
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d107      	bne.n	80095b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f06f 0201 	mvn.w	r2, #1
 80095aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f7f8 fbdd 	bl	8001d6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095bc:	2b80      	cmp	r3, #128	; 0x80
 80095be:	d10e      	bne.n	80095de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ca:	2b80      	cmp	r3, #128	; 0x80
 80095cc:	d107      	bne.n	80095de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80095d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f001 fb5d 	bl	800ac98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095ec:	d10e      	bne.n	800960c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095f8:	2b80      	cmp	r3, #128	; 0x80
 80095fa:	d107      	bne.n	800960c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f001 fb50 	bl	800acac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009616:	2b40      	cmp	r3, #64	; 0x40
 8009618:	d10e      	bne.n	8009638 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009624:	2b40      	cmp	r3, #64	; 0x40
 8009626:	d107      	bne.n	8009638 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 fb5e 	bl	8009cf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	691b      	ldr	r3, [r3, #16]
 800963e:	f003 0320 	and.w	r3, r3, #32
 8009642:	2b20      	cmp	r3, #32
 8009644:	d10e      	bne.n	8009664 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	f003 0320 	and.w	r3, r3, #32
 8009650:	2b20      	cmp	r3, #32
 8009652:	d107      	bne.n	8009664 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f06f 0220 	mvn.w	r2, #32
 800965c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f001 fb10 	bl	800ac84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800966e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009672:	d10f      	bne.n	8009694 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800967e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009682:	d107      	bne.n	8009694 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800968c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f001 fb16 	bl	800acc0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800969e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096a2:	d10f      	bne.n	80096c4 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80096ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096b2:	d107      	bne.n	80096c4 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80096bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f001 fb08 	bl	800acd4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096d2:	d10f      	bne.n	80096f4 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096e2:	d107      	bne.n	80096f4 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80096ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f001 fafa 	bl	800ace8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	691b      	ldr	r3, [r3, #16]
 80096fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009702:	d10f      	bne.n	8009724 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800970e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009712:	d107      	bne.n	8009724 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800971c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f001 faec 	bl	800acfc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009724:	bf00      	nop
 8009726:	3708      	adds	r7, #8
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009738:	2300      	movs	r3, #0
 800973a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009742:	2b01      	cmp	r3, #1
 8009744:	d101      	bne.n	800974a <HAL_TIM_IC_ConfigChannel+0x1e>
 8009746:	2302      	movs	r3, #2
 8009748:	e088      	b.n	800985c <HAL_TIM_IC_ConfigChannel+0x130>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d11b      	bne.n	8009790 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6818      	ldr	r0, [r3, #0]
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	6819      	ldr	r1, [r3, #0]
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	685a      	ldr	r2, [r3, #4]
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	f000 fea0 	bl	800a4ac <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	699a      	ldr	r2, [r3, #24]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f022 020c 	bic.w	r2, r2, #12
 800977a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	6999      	ldr	r1, [r3, #24]
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	689a      	ldr	r2, [r3, #8]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	430a      	orrs	r2, r1
 800978c:	619a      	str	r2, [r3, #24]
 800978e:	e060      	b.n	8009852 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b04      	cmp	r3, #4
 8009794:	d11c      	bne.n	80097d0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6818      	ldr	r0, [r3, #0]
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	6819      	ldr	r1, [r3, #0]
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	685a      	ldr	r2, [r3, #4]
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	f000 ff24 	bl	800a5f2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	699a      	ldr	r2, [r3, #24]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80097b8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	6999      	ldr	r1, [r3, #24]
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	021a      	lsls	r2, r3, #8
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	430a      	orrs	r2, r1
 80097cc:	619a      	str	r2, [r3, #24]
 80097ce:	e040      	b.n	8009852 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2b08      	cmp	r3, #8
 80097d4:	d11b      	bne.n	800980e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6818      	ldr	r0, [r3, #0]
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	6819      	ldr	r1, [r3, #0]
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	685a      	ldr	r2, [r3, #4]
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	f000 ff71 	bl	800a6cc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	69da      	ldr	r2, [r3, #28]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f022 020c 	bic.w	r2, r2, #12
 80097f8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	69d9      	ldr	r1, [r3, #28]
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	689a      	ldr	r2, [r3, #8]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	430a      	orrs	r2, r1
 800980a:	61da      	str	r2, [r3, #28]
 800980c:	e021      	b.n	8009852 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2b0c      	cmp	r3, #12
 8009812:	d11c      	bne.n	800984e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6818      	ldr	r0, [r3, #0]
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	6819      	ldr	r1, [r3, #0]
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	685a      	ldr	r2, [r3, #4]
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	f000 ff8e 	bl	800a744 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	69da      	ldr	r2, [r3, #28]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009836:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	69d9      	ldr	r1, [r3, #28]
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	021a      	lsls	r2, r3, #8
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	430a      	orrs	r2, r1
 800984a:	61da      	str	r2, [r3, #28]
 800984c:	e001      	b.n	8009852 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2200      	movs	r2, #0
 8009856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800985a:	7dfb      	ldrb	r3, [r7, #23]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3718      	adds	r7, #24
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b086      	sub	sp, #24
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009870:	2300      	movs	r3, #0
 8009872:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800987a:	2b01      	cmp	r3, #1
 800987c:	d101      	bne.n	8009882 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800987e:	2302      	movs	r3, #2
 8009880:	e0ff      	b.n	8009a82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2201      	movs	r2, #1
 8009886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2b14      	cmp	r3, #20
 800988e:	f200 80f0 	bhi.w	8009a72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009892:	a201      	add	r2, pc, #4	; (adr r2, 8009898 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009898:	080098ed 	.word	0x080098ed
 800989c:	08009a73 	.word	0x08009a73
 80098a0:	08009a73 	.word	0x08009a73
 80098a4:	08009a73 	.word	0x08009a73
 80098a8:	0800992d 	.word	0x0800992d
 80098ac:	08009a73 	.word	0x08009a73
 80098b0:	08009a73 	.word	0x08009a73
 80098b4:	08009a73 	.word	0x08009a73
 80098b8:	0800996f 	.word	0x0800996f
 80098bc:	08009a73 	.word	0x08009a73
 80098c0:	08009a73 	.word	0x08009a73
 80098c4:	08009a73 	.word	0x08009a73
 80098c8:	080099af 	.word	0x080099af
 80098cc:	08009a73 	.word	0x08009a73
 80098d0:	08009a73 	.word	0x08009a73
 80098d4:	08009a73 	.word	0x08009a73
 80098d8:	080099f1 	.word	0x080099f1
 80098dc:	08009a73 	.word	0x08009a73
 80098e0:	08009a73 	.word	0x08009a73
 80098e4:	08009a73 	.word	0x08009a73
 80098e8:	08009a31 	.word	0x08009a31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68b9      	ldr	r1, [r7, #8]
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 fab0 	bl	8009e58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	699a      	ldr	r2, [r3, #24]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f042 0208 	orr.w	r2, r2, #8
 8009906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	699a      	ldr	r2, [r3, #24]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f022 0204 	bic.w	r2, r2, #4
 8009916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	6999      	ldr	r1, [r3, #24]
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	691a      	ldr	r2, [r3, #16]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	430a      	orrs	r2, r1
 8009928:	619a      	str	r2, [r3, #24]
      break;
 800992a:	e0a5      	b.n	8009a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68b9      	ldr	r1, [r7, #8]
 8009932:	4618      	mov	r0, r3
 8009934:	f000 fb2a 	bl	8009f8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	699a      	ldr	r2, [r3, #24]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	699a      	ldr	r2, [r3, #24]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6999      	ldr	r1, [r3, #24]
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	021a      	lsls	r2, r3, #8
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	430a      	orrs	r2, r1
 800996a:	619a      	str	r2, [r3, #24]
      break;
 800996c:	e084      	b.n	8009a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	68b9      	ldr	r1, [r7, #8]
 8009974:	4618      	mov	r0, r3
 8009976:	f000 fb9d 	bl	800a0b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	69da      	ldr	r2, [r3, #28]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f042 0208 	orr.w	r2, r2, #8
 8009988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	69da      	ldr	r2, [r3, #28]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f022 0204 	bic.w	r2, r2, #4
 8009998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	69d9      	ldr	r1, [r3, #28]
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	691a      	ldr	r2, [r3, #16]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	430a      	orrs	r2, r1
 80099aa:	61da      	str	r2, [r3, #28]
      break;
 80099ac:	e064      	b.n	8009a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	68b9      	ldr	r1, [r7, #8]
 80099b4:	4618      	mov	r0, r3
 80099b6:	f000 fc0f 	bl	800a1d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	69da      	ldr	r2, [r3, #28]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	69da      	ldr	r2, [r3, #28]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	69d9      	ldr	r1, [r3, #28]
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	021a      	lsls	r2, r3, #8
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	430a      	orrs	r2, r1
 80099ec:	61da      	str	r2, [r3, #28]
      break;
 80099ee:	e043      	b.n	8009a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	68b9      	ldr	r1, [r7, #8]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f000 fc82 	bl	800a300 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f042 0208 	orr.w	r2, r2, #8
 8009a0a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f022 0204 	bic.w	r2, r2, #4
 8009a1a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	691a      	ldr	r2, [r3, #16]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	430a      	orrs	r2, r1
 8009a2c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009a2e:	e023      	b.n	8009a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68b9      	ldr	r1, [r7, #8]
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 fccc 	bl	800a3d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a4a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a5a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	021a      	lsls	r2, r3, #8
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	430a      	orrs	r2, r1
 8009a6e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009a70:	e002      	b.n	8009a78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	75fb      	strb	r3, [r7, #23]
      break;
 8009a76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3718      	adds	r7, #24
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop

08009a8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d101      	bne.n	8009aa8 <HAL_TIM_ConfigClockSource+0x1c>
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	e0f6      	b.n	8009c96 <HAL_TIM_ConfigClockSource+0x20a>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2202      	movs	r2, #2
 8009ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009ac6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ad2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a6f      	ldr	r2, [pc, #444]	; (8009ca0 <HAL_TIM_ConfigClockSource+0x214>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	f000 80c1 	beq.w	8009c6a <HAL_TIM_ConfigClockSource+0x1de>
 8009ae8:	4a6d      	ldr	r2, [pc, #436]	; (8009ca0 <HAL_TIM_ConfigClockSource+0x214>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	f200 80c6 	bhi.w	8009c7c <HAL_TIM_ConfigClockSource+0x1f0>
 8009af0:	4a6c      	ldr	r2, [pc, #432]	; (8009ca4 <HAL_TIM_ConfigClockSource+0x218>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	f000 80b9 	beq.w	8009c6a <HAL_TIM_ConfigClockSource+0x1de>
 8009af8:	4a6a      	ldr	r2, [pc, #424]	; (8009ca4 <HAL_TIM_ConfigClockSource+0x218>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	f200 80be 	bhi.w	8009c7c <HAL_TIM_ConfigClockSource+0x1f0>
 8009b00:	4a69      	ldr	r2, [pc, #420]	; (8009ca8 <HAL_TIM_ConfigClockSource+0x21c>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	f000 80b1 	beq.w	8009c6a <HAL_TIM_ConfigClockSource+0x1de>
 8009b08:	4a67      	ldr	r2, [pc, #412]	; (8009ca8 <HAL_TIM_ConfigClockSource+0x21c>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	f200 80b6 	bhi.w	8009c7c <HAL_TIM_ConfigClockSource+0x1f0>
 8009b10:	4a66      	ldr	r2, [pc, #408]	; (8009cac <HAL_TIM_ConfigClockSource+0x220>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	f000 80a9 	beq.w	8009c6a <HAL_TIM_ConfigClockSource+0x1de>
 8009b18:	4a64      	ldr	r2, [pc, #400]	; (8009cac <HAL_TIM_ConfigClockSource+0x220>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	f200 80ae 	bhi.w	8009c7c <HAL_TIM_ConfigClockSource+0x1f0>
 8009b20:	4a63      	ldr	r2, [pc, #396]	; (8009cb0 <HAL_TIM_ConfigClockSource+0x224>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	f000 80a1 	beq.w	8009c6a <HAL_TIM_ConfigClockSource+0x1de>
 8009b28:	4a61      	ldr	r2, [pc, #388]	; (8009cb0 <HAL_TIM_ConfigClockSource+0x224>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	f200 80a6 	bhi.w	8009c7c <HAL_TIM_ConfigClockSource+0x1f0>
 8009b30:	4a60      	ldr	r2, [pc, #384]	; (8009cb4 <HAL_TIM_ConfigClockSource+0x228>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	f000 8099 	beq.w	8009c6a <HAL_TIM_ConfigClockSource+0x1de>
 8009b38:	4a5e      	ldr	r2, [pc, #376]	; (8009cb4 <HAL_TIM_ConfigClockSource+0x228>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	f200 809e 	bhi.w	8009c7c <HAL_TIM_ConfigClockSource+0x1f0>
 8009b40:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009b44:	f000 8091 	beq.w	8009c6a <HAL_TIM_ConfigClockSource+0x1de>
 8009b48:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009b4c:	f200 8096 	bhi.w	8009c7c <HAL_TIM_ConfigClockSource+0x1f0>
 8009b50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b54:	f000 8089 	beq.w	8009c6a <HAL_TIM_ConfigClockSource+0x1de>
 8009b58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b5c:	f200 808e 	bhi.w	8009c7c <HAL_TIM_ConfigClockSource+0x1f0>
 8009b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b64:	d03e      	beq.n	8009be4 <HAL_TIM_ConfigClockSource+0x158>
 8009b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b6a:	f200 8087 	bhi.w	8009c7c <HAL_TIM_ConfigClockSource+0x1f0>
 8009b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b72:	f000 8086 	beq.w	8009c82 <HAL_TIM_ConfigClockSource+0x1f6>
 8009b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b7a:	d87f      	bhi.n	8009c7c <HAL_TIM_ConfigClockSource+0x1f0>
 8009b7c:	2b70      	cmp	r3, #112	; 0x70
 8009b7e:	d01a      	beq.n	8009bb6 <HAL_TIM_ConfigClockSource+0x12a>
 8009b80:	2b70      	cmp	r3, #112	; 0x70
 8009b82:	d87b      	bhi.n	8009c7c <HAL_TIM_ConfigClockSource+0x1f0>
 8009b84:	2b60      	cmp	r3, #96	; 0x60
 8009b86:	d050      	beq.n	8009c2a <HAL_TIM_ConfigClockSource+0x19e>
 8009b88:	2b60      	cmp	r3, #96	; 0x60
 8009b8a:	d877      	bhi.n	8009c7c <HAL_TIM_ConfigClockSource+0x1f0>
 8009b8c:	2b50      	cmp	r3, #80	; 0x50
 8009b8e:	d03c      	beq.n	8009c0a <HAL_TIM_ConfigClockSource+0x17e>
 8009b90:	2b50      	cmp	r3, #80	; 0x50
 8009b92:	d873      	bhi.n	8009c7c <HAL_TIM_ConfigClockSource+0x1f0>
 8009b94:	2b40      	cmp	r3, #64	; 0x40
 8009b96:	d058      	beq.n	8009c4a <HAL_TIM_ConfigClockSource+0x1be>
 8009b98:	2b40      	cmp	r3, #64	; 0x40
 8009b9a:	d86f      	bhi.n	8009c7c <HAL_TIM_ConfigClockSource+0x1f0>
 8009b9c:	2b30      	cmp	r3, #48	; 0x30
 8009b9e:	d064      	beq.n	8009c6a <HAL_TIM_ConfigClockSource+0x1de>
 8009ba0:	2b30      	cmp	r3, #48	; 0x30
 8009ba2:	d86b      	bhi.n	8009c7c <HAL_TIM_ConfigClockSource+0x1f0>
 8009ba4:	2b20      	cmp	r3, #32
 8009ba6:	d060      	beq.n	8009c6a <HAL_TIM_ConfigClockSource+0x1de>
 8009ba8:	2b20      	cmp	r3, #32
 8009baa:	d867      	bhi.n	8009c7c <HAL_TIM_ConfigClockSource+0x1f0>
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d05c      	beq.n	8009c6a <HAL_TIM_ConfigClockSource+0x1de>
 8009bb0:	2b10      	cmp	r3, #16
 8009bb2:	d05a      	beq.n	8009c6a <HAL_TIM_ConfigClockSource+0x1de>
 8009bb4:	e062      	b.n	8009c7c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6818      	ldr	r0, [r3, #0]
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	6899      	ldr	r1, [r3, #8]
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	685a      	ldr	r2, [r3, #4]
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	f000 fe17 	bl	800a7f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009bd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68ba      	ldr	r2, [r7, #8]
 8009be0:	609a      	str	r2, [r3, #8]
      break;
 8009be2:	e04f      	b.n	8009c84 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6818      	ldr	r0, [r3, #0]
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	6899      	ldr	r1, [r3, #8]
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	685a      	ldr	r2, [r3, #4]
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	f000 fe00 	bl	800a7f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	689a      	ldr	r2, [r3, #8]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c06:	609a      	str	r2, [r3, #8]
      break;
 8009c08:	e03c      	b.n	8009c84 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6818      	ldr	r0, [r3, #0]
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	6859      	ldr	r1, [r3, #4]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	461a      	mov	r2, r3
 8009c18:	f000 fcbc 	bl	800a594 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2150      	movs	r1, #80	; 0x50
 8009c22:	4618      	mov	r0, r3
 8009c24:	f000 fdcb 	bl	800a7be <TIM_ITRx_SetConfig>
      break;
 8009c28:	e02c      	b.n	8009c84 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6818      	ldr	r0, [r3, #0]
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	6859      	ldr	r1, [r3, #4]
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	461a      	mov	r2, r3
 8009c38:	f000 fd18 	bl	800a66c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2160      	movs	r1, #96	; 0x60
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 fdbb 	bl	800a7be <TIM_ITRx_SetConfig>
      break;
 8009c48:	e01c      	b.n	8009c84 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6818      	ldr	r0, [r3, #0]
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	6859      	ldr	r1, [r3, #4]
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	461a      	mov	r2, r3
 8009c58:	f000 fc9c 	bl	800a594 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2140      	movs	r1, #64	; 0x40
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 fdab 	bl	800a7be <TIM_ITRx_SetConfig>
      break;
 8009c68:	e00c      	b.n	8009c84 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4619      	mov	r1, r3
 8009c74:	4610      	mov	r0, r2
 8009c76:	f000 fda2 	bl	800a7be <TIM_ITRx_SetConfig>
      break;
 8009c7a:	e003      	b.n	8009c84 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8009c80:	e000      	b.n	8009c84 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009c82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3710      	adds	r7, #16
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	00100070 	.word	0x00100070
 8009ca4:	00100060 	.word	0x00100060
 8009ca8:	00100050 	.word	0x00100050
 8009cac:	00100040 	.word	0x00100040
 8009cb0:	00100030 	.word	0x00100030
 8009cb4:	00100020 	.word	0x00100020

08009cb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009cd4:	bf00      	nop
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ce8:	bf00      	nop
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009cfc:	bf00      	nop
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a46      	ldr	r2, [pc, #280]	; (8009e34 <TIM_Base_SetConfig+0x12c>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d017      	beq.n	8009d50 <TIM_Base_SetConfig+0x48>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d26:	d013      	beq.n	8009d50 <TIM_Base_SetConfig+0x48>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a43      	ldr	r2, [pc, #268]	; (8009e38 <TIM_Base_SetConfig+0x130>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d00f      	beq.n	8009d50 <TIM_Base_SetConfig+0x48>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a42      	ldr	r2, [pc, #264]	; (8009e3c <TIM_Base_SetConfig+0x134>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d00b      	beq.n	8009d50 <TIM_Base_SetConfig+0x48>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a41      	ldr	r2, [pc, #260]	; (8009e40 <TIM_Base_SetConfig+0x138>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d007      	beq.n	8009d50 <TIM_Base_SetConfig+0x48>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a40      	ldr	r2, [pc, #256]	; (8009e44 <TIM_Base_SetConfig+0x13c>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d003      	beq.n	8009d50 <TIM_Base_SetConfig+0x48>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a3f      	ldr	r2, [pc, #252]	; (8009e48 <TIM_Base_SetConfig+0x140>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d108      	bne.n	8009d62 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4a33      	ldr	r2, [pc, #204]	; (8009e34 <TIM_Base_SetConfig+0x12c>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d023      	beq.n	8009db2 <TIM_Base_SetConfig+0xaa>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d70:	d01f      	beq.n	8009db2 <TIM_Base_SetConfig+0xaa>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4a30      	ldr	r2, [pc, #192]	; (8009e38 <TIM_Base_SetConfig+0x130>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d01b      	beq.n	8009db2 <TIM_Base_SetConfig+0xaa>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4a2f      	ldr	r2, [pc, #188]	; (8009e3c <TIM_Base_SetConfig+0x134>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d017      	beq.n	8009db2 <TIM_Base_SetConfig+0xaa>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	4a2e      	ldr	r2, [pc, #184]	; (8009e40 <TIM_Base_SetConfig+0x138>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d013      	beq.n	8009db2 <TIM_Base_SetConfig+0xaa>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4a2d      	ldr	r2, [pc, #180]	; (8009e44 <TIM_Base_SetConfig+0x13c>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d00f      	beq.n	8009db2 <TIM_Base_SetConfig+0xaa>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4a2d      	ldr	r2, [pc, #180]	; (8009e4c <TIM_Base_SetConfig+0x144>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d00b      	beq.n	8009db2 <TIM_Base_SetConfig+0xaa>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4a2c      	ldr	r2, [pc, #176]	; (8009e50 <TIM_Base_SetConfig+0x148>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d007      	beq.n	8009db2 <TIM_Base_SetConfig+0xaa>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a2b      	ldr	r2, [pc, #172]	; (8009e54 <TIM_Base_SetConfig+0x14c>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d003      	beq.n	8009db2 <TIM_Base_SetConfig+0xaa>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4a26      	ldr	r2, [pc, #152]	; (8009e48 <TIM_Base_SetConfig+0x140>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d108      	bne.n	8009dc4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	68fa      	ldr	r2, [r7, #12]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	695b      	ldr	r3, [r3, #20]
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	689a      	ldr	r2, [r3, #8]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a12      	ldr	r2, [pc, #72]	; (8009e34 <TIM_Base_SetConfig+0x12c>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d013      	beq.n	8009e18 <TIM_Base_SetConfig+0x110>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a14      	ldr	r2, [pc, #80]	; (8009e44 <TIM_Base_SetConfig+0x13c>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d00f      	beq.n	8009e18 <TIM_Base_SetConfig+0x110>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a14      	ldr	r2, [pc, #80]	; (8009e4c <TIM_Base_SetConfig+0x144>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d00b      	beq.n	8009e18 <TIM_Base_SetConfig+0x110>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a13      	ldr	r2, [pc, #76]	; (8009e50 <TIM_Base_SetConfig+0x148>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d007      	beq.n	8009e18 <TIM_Base_SetConfig+0x110>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a12      	ldr	r2, [pc, #72]	; (8009e54 <TIM_Base_SetConfig+0x14c>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d003      	beq.n	8009e18 <TIM_Base_SetConfig+0x110>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a0d      	ldr	r2, [pc, #52]	; (8009e48 <TIM_Base_SetConfig+0x140>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d103      	bne.n	8009e20 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	691a      	ldr	r2, [r3, #16]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2201      	movs	r2, #1
 8009e24:	615a      	str	r2, [r3, #20]
}
 8009e26:	bf00      	nop
 8009e28:	3714      	adds	r7, #20
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	40012c00 	.word	0x40012c00
 8009e38:	40000400 	.word	0x40000400
 8009e3c:	40000800 	.word	0x40000800
 8009e40:	40000c00 	.word	0x40000c00
 8009e44:	40013400 	.word	0x40013400
 8009e48:	40015000 	.word	0x40015000
 8009e4c:	40014000 	.word	0x40014000
 8009e50:	40014400 	.word	0x40014400
 8009e54:	40014800 	.word	0x40014800

08009e58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b087      	sub	sp, #28
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6a1b      	ldr	r3, [r3, #32]
 8009e66:	f023 0201 	bic.w	r2, r3, #1
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a1b      	ldr	r3, [r3, #32]
 8009e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f023 0303 	bic.w	r3, r3, #3
 8009e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	f023 0302 	bic.w	r3, r3, #2
 8009ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	697a      	ldr	r2, [r7, #20]
 8009eac:	4313      	orrs	r3, r2
 8009eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a30      	ldr	r2, [pc, #192]	; (8009f74 <TIM_OC1_SetConfig+0x11c>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d013      	beq.n	8009ee0 <TIM_OC1_SetConfig+0x88>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4a2f      	ldr	r2, [pc, #188]	; (8009f78 <TIM_OC1_SetConfig+0x120>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d00f      	beq.n	8009ee0 <TIM_OC1_SetConfig+0x88>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4a2e      	ldr	r2, [pc, #184]	; (8009f7c <TIM_OC1_SetConfig+0x124>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d00b      	beq.n	8009ee0 <TIM_OC1_SetConfig+0x88>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	4a2d      	ldr	r2, [pc, #180]	; (8009f80 <TIM_OC1_SetConfig+0x128>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d007      	beq.n	8009ee0 <TIM_OC1_SetConfig+0x88>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a2c      	ldr	r2, [pc, #176]	; (8009f84 <TIM_OC1_SetConfig+0x12c>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d003      	beq.n	8009ee0 <TIM_OC1_SetConfig+0x88>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a2b      	ldr	r2, [pc, #172]	; (8009f88 <TIM_OC1_SetConfig+0x130>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d10c      	bne.n	8009efa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	f023 0308 	bic.w	r3, r3, #8
 8009ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	697a      	ldr	r2, [r7, #20]
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	f023 0304 	bic.w	r3, r3, #4
 8009ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4a1d      	ldr	r2, [pc, #116]	; (8009f74 <TIM_OC1_SetConfig+0x11c>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d013      	beq.n	8009f2a <TIM_OC1_SetConfig+0xd2>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4a1c      	ldr	r2, [pc, #112]	; (8009f78 <TIM_OC1_SetConfig+0x120>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d00f      	beq.n	8009f2a <TIM_OC1_SetConfig+0xd2>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4a1b      	ldr	r2, [pc, #108]	; (8009f7c <TIM_OC1_SetConfig+0x124>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d00b      	beq.n	8009f2a <TIM_OC1_SetConfig+0xd2>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4a1a      	ldr	r2, [pc, #104]	; (8009f80 <TIM_OC1_SetConfig+0x128>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d007      	beq.n	8009f2a <TIM_OC1_SetConfig+0xd2>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4a19      	ldr	r2, [pc, #100]	; (8009f84 <TIM_OC1_SetConfig+0x12c>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d003      	beq.n	8009f2a <TIM_OC1_SetConfig+0xd2>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	4a18      	ldr	r2, [pc, #96]	; (8009f88 <TIM_OC1_SetConfig+0x130>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d111      	bne.n	8009f4e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	695b      	ldr	r3, [r3, #20]
 8009f3e:	693a      	ldr	r2, [r7, #16]
 8009f40:	4313      	orrs	r3, r2
 8009f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	699b      	ldr	r3, [r3, #24]
 8009f48:	693a      	ldr	r2, [r7, #16]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	693a      	ldr	r2, [r7, #16]
 8009f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	68fa      	ldr	r2, [r7, #12]
 8009f58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	685a      	ldr	r2, [r3, #4]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	697a      	ldr	r2, [r7, #20]
 8009f66:	621a      	str	r2, [r3, #32]
}
 8009f68:	bf00      	nop
 8009f6a:	371c      	adds	r7, #28
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr
 8009f74:	40012c00 	.word	0x40012c00
 8009f78:	40013400 	.word	0x40013400
 8009f7c:	40014000 	.word	0x40014000
 8009f80:	40014400 	.word	0x40014400
 8009f84:	40014800 	.word	0x40014800
 8009f88:	40015000 	.word	0x40015000

08009f8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b087      	sub	sp, #28
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a1b      	ldr	r3, [r3, #32]
 8009f9a:	f023 0210 	bic.w	r2, r3, #16
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	699b      	ldr	r3, [r3, #24]
 8009fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	021b      	lsls	r3, r3, #8
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	f023 0320 	bic.w	r3, r3, #32
 8009fda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	011b      	lsls	r3, r3, #4
 8009fe2:	697a      	ldr	r2, [r7, #20]
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	4a2c      	ldr	r2, [pc, #176]	; (800a09c <TIM_OC2_SetConfig+0x110>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d007      	beq.n	800a000 <TIM_OC2_SetConfig+0x74>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4a2b      	ldr	r2, [pc, #172]	; (800a0a0 <TIM_OC2_SetConfig+0x114>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d003      	beq.n	800a000 <TIM_OC2_SetConfig+0x74>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	4a2a      	ldr	r2, [pc, #168]	; (800a0a4 <TIM_OC2_SetConfig+0x118>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d10d      	bne.n	800a01c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	011b      	lsls	r3, r3, #4
 800a00e:	697a      	ldr	r2, [r7, #20]
 800a010:	4313      	orrs	r3, r2
 800a012:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a01a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a1f      	ldr	r2, [pc, #124]	; (800a09c <TIM_OC2_SetConfig+0x110>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d013      	beq.n	800a04c <TIM_OC2_SetConfig+0xc0>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a1e      	ldr	r2, [pc, #120]	; (800a0a0 <TIM_OC2_SetConfig+0x114>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d00f      	beq.n	800a04c <TIM_OC2_SetConfig+0xc0>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4a1e      	ldr	r2, [pc, #120]	; (800a0a8 <TIM_OC2_SetConfig+0x11c>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d00b      	beq.n	800a04c <TIM_OC2_SetConfig+0xc0>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4a1d      	ldr	r2, [pc, #116]	; (800a0ac <TIM_OC2_SetConfig+0x120>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d007      	beq.n	800a04c <TIM_OC2_SetConfig+0xc0>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	4a1c      	ldr	r2, [pc, #112]	; (800a0b0 <TIM_OC2_SetConfig+0x124>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d003      	beq.n	800a04c <TIM_OC2_SetConfig+0xc0>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	4a17      	ldr	r2, [pc, #92]	; (800a0a4 <TIM_OC2_SetConfig+0x118>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d113      	bne.n	800a074 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a052:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a05a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	695b      	ldr	r3, [r3, #20]
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	693a      	ldr	r2, [r7, #16]
 800a064:	4313      	orrs	r3, r2
 800a066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	699b      	ldr	r3, [r3, #24]
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	693a      	ldr	r2, [r7, #16]
 800a070:	4313      	orrs	r3, r2
 800a072:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	693a      	ldr	r2, [r7, #16]
 800a078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	68fa      	ldr	r2, [r7, #12]
 800a07e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	685a      	ldr	r2, [r3, #4]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	697a      	ldr	r2, [r7, #20]
 800a08c:	621a      	str	r2, [r3, #32]
}
 800a08e:	bf00      	nop
 800a090:	371c      	adds	r7, #28
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	40012c00 	.word	0x40012c00
 800a0a0:	40013400 	.word	0x40013400
 800a0a4:	40015000 	.word	0x40015000
 800a0a8:	40014000 	.word	0x40014000
 800a0ac:	40014400 	.word	0x40014400
 800a0b0:	40014800 	.word	0x40014800

0800a0b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b087      	sub	sp, #28
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a1b      	ldr	r3, [r3, #32]
 800a0c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a1b      	ldr	r3, [r3, #32]
 800a0ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	69db      	ldr	r3, [r3, #28]
 800a0da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f023 0303 	bic.w	r3, r3, #3
 800a0ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	021b      	lsls	r3, r3, #8
 800a108:	697a      	ldr	r2, [r7, #20]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4a2b      	ldr	r2, [pc, #172]	; (800a1c0 <TIM_OC3_SetConfig+0x10c>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d007      	beq.n	800a126 <TIM_OC3_SetConfig+0x72>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4a2a      	ldr	r2, [pc, #168]	; (800a1c4 <TIM_OC3_SetConfig+0x110>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d003      	beq.n	800a126 <TIM_OC3_SetConfig+0x72>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a29      	ldr	r2, [pc, #164]	; (800a1c8 <TIM_OC3_SetConfig+0x114>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d10d      	bne.n	800a142 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a12c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	021b      	lsls	r3, r3, #8
 800a134:	697a      	ldr	r2, [r7, #20]
 800a136:	4313      	orrs	r3, r2
 800a138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a1e      	ldr	r2, [pc, #120]	; (800a1c0 <TIM_OC3_SetConfig+0x10c>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d013      	beq.n	800a172 <TIM_OC3_SetConfig+0xbe>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4a1d      	ldr	r2, [pc, #116]	; (800a1c4 <TIM_OC3_SetConfig+0x110>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d00f      	beq.n	800a172 <TIM_OC3_SetConfig+0xbe>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	4a1d      	ldr	r2, [pc, #116]	; (800a1cc <TIM_OC3_SetConfig+0x118>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d00b      	beq.n	800a172 <TIM_OC3_SetConfig+0xbe>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4a1c      	ldr	r2, [pc, #112]	; (800a1d0 <TIM_OC3_SetConfig+0x11c>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d007      	beq.n	800a172 <TIM_OC3_SetConfig+0xbe>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4a1b      	ldr	r2, [pc, #108]	; (800a1d4 <TIM_OC3_SetConfig+0x120>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d003      	beq.n	800a172 <TIM_OC3_SetConfig+0xbe>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4a16      	ldr	r2, [pc, #88]	; (800a1c8 <TIM_OC3_SetConfig+0x114>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d113      	bne.n	800a19a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	695b      	ldr	r3, [r3, #20]
 800a186:	011b      	lsls	r3, r3, #4
 800a188:	693a      	ldr	r2, [r7, #16]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	699b      	ldr	r3, [r3, #24]
 800a192:	011b      	lsls	r3, r3, #4
 800a194:	693a      	ldr	r2, [r7, #16]
 800a196:	4313      	orrs	r3, r2
 800a198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	693a      	ldr	r2, [r7, #16]
 800a19e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	68fa      	ldr	r2, [r7, #12]
 800a1a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	685a      	ldr	r2, [r3, #4]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	697a      	ldr	r2, [r7, #20]
 800a1b2:	621a      	str	r2, [r3, #32]
}
 800a1b4:	bf00      	nop
 800a1b6:	371c      	adds	r7, #28
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr
 800a1c0:	40012c00 	.word	0x40012c00
 800a1c4:	40013400 	.word	0x40013400
 800a1c8:	40015000 	.word	0x40015000
 800a1cc:	40014000 	.word	0x40014000
 800a1d0:	40014400 	.word	0x40014400
 800a1d4:	40014800 	.word	0x40014800

0800a1d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b087      	sub	sp, #28
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a1b      	ldr	r3, [r3, #32]
 800a1e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6a1b      	ldr	r3, [r3, #32]
 800a1f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	69db      	ldr	r3, [r3, #28]
 800a1fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a20a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	021b      	lsls	r3, r3, #8
 800a21a:	68fa      	ldr	r2, [r7, #12]
 800a21c:	4313      	orrs	r3, r2
 800a21e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	031b      	lsls	r3, r3, #12
 800a22e:	697a      	ldr	r2, [r7, #20]
 800a230:	4313      	orrs	r3, r2
 800a232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a2c      	ldr	r2, [pc, #176]	; (800a2e8 <TIM_OC4_SetConfig+0x110>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d007      	beq.n	800a24c <TIM_OC4_SetConfig+0x74>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4a2b      	ldr	r2, [pc, #172]	; (800a2ec <TIM_OC4_SetConfig+0x114>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d003      	beq.n	800a24c <TIM_OC4_SetConfig+0x74>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	4a2a      	ldr	r2, [pc, #168]	; (800a2f0 <TIM_OC4_SetConfig+0x118>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d10d      	bne.n	800a268 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	031b      	lsls	r3, r3, #12
 800a25a:	697a      	ldr	r2, [r7, #20]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a266:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4a1f      	ldr	r2, [pc, #124]	; (800a2e8 <TIM_OC4_SetConfig+0x110>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d013      	beq.n	800a298 <TIM_OC4_SetConfig+0xc0>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	4a1e      	ldr	r2, [pc, #120]	; (800a2ec <TIM_OC4_SetConfig+0x114>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d00f      	beq.n	800a298 <TIM_OC4_SetConfig+0xc0>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	4a1e      	ldr	r2, [pc, #120]	; (800a2f4 <TIM_OC4_SetConfig+0x11c>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d00b      	beq.n	800a298 <TIM_OC4_SetConfig+0xc0>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	4a1d      	ldr	r2, [pc, #116]	; (800a2f8 <TIM_OC4_SetConfig+0x120>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d007      	beq.n	800a298 <TIM_OC4_SetConfig+0xc0>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	4a1c      	ldr	r2, [pc, #112]	; (800a2fc <TIM_OC4_SetConfig+0x124>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d003      	beq.n	800a298 <TIM_OC4_SetConfig+0xc0>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	4a17      	ldr	r2, [pc, #92]	; (800a2f0 <TIM_OC4_SetConfig+0x118>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d113      	bne.n	800a2c0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a29e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a2a6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	695b      	ldr	r3, [r3, #20]
 800a2ac:	019b      	lsls	r3, r3, #6
 800a2ae:	693a      	ldr	r2, [r7, #16]
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	699b      	ldr	r3, [r3, #24]
 800a2b8:	019b      	lsls	r3, r3, #6
 800a2ba:	693a      	ldr	r2, [r7, #16]
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	693a      	ldr	r2, [r7, #16]
 800a2c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	685a      	ldr	r2, [r3, #4]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	697a      	ldr	r2, [r7, #20]
 800a2d8:	621a      	str	r2, [r3, #32]
}
 800a2da:	bf00      	nop
 800a2dc:	371c      	adds	r7, #28
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop
 800a2e8:	40012c00 	.word	0x40012c00
 800a2ec:	40013400 	.word	0x40013400
 800a2f0:	40015000 	.word	0x40015000
 800a2f4:	40014000 	.word	0x40014000
 800a2f8:	40014400 	.word	0x40014400
 800a2fc:	40014800 	.word	0x40014800

0800a300 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a300:	b480      	push	{r7}
 800a302:	b087      	sub	sp, #28
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6a1b      	ldr	r3, [r3, #32]
 800a30e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6a1b      	ldr	r3, [r3, #32]
 800a31a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a32e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a344:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	041b      	lsls	r3, r3, #16
 800a34c:	693a      	ldr	r2, [r7, #16]
 800a34e:	4313      	orrs	r3, r2
 800a350:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	4a19      	ldr	r2, [pc, #100]	; (800a3bc <TIM_OC5_SetConfig+0xbc>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d013      	beq.n	800a382 <TIM_OC5_SetConfig+0x82>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4a18      	ldr	r2, [pc, #96]	; (800a3c0 <TIM_OC5_SetConfig+0xc0>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d00f      	beq.n	800a382 <TIM_OC5_SetConfig+0x82>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	4a17      	ldr	r2, [pc, #92]	; (800a3c4 <TIM_OC5_SetConfig+0xc4>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d00b      	beq.n	800a382 <TIM_OC5_SetConfig+0x82>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4a16      	ldr	r2, [pc, #88]	; (800a3c8 <TIM_OC5_SetConfig+0xc8>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d007      	beq.n	800a382 <TIM_OC5_SetConfig+0x82>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	4a15      	ldr	r2, [pc, #84]	; (800a3cc <TIM_OC5_SetConfig+0xcc>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d003      	beq.n	800a382 <TIM_OC5_SetConfig+0x82>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	4a14      	ldr	r2, [pc, #80]	; (800a3d0 <TIM_OC5_SetConfig+0xd0>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d109      	bne.n	800a396 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a388:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	695b      	ldr	r3, [r3, #20]
 800a38e:	021b      	lsls	r3, r3, #8
 800a390:	697a      	ldr	r2, [r7, #20]
 800a392:	4313      	orrs	r3, r2
 800a394:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	697a      	ldr	r2, [r7, #20]
 800a39a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	68fa      	ldr	r2, [r7, #12]
 800a3a0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	685a      	ldr	r2, [r3, #4]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	693a      	ldr	r2, [r7, #16]
 800a3ae:	621a      	str	r2, [r3, #32]
}
 800a3b0:	bf00      	nop
 800a3b2:	371c      	adds	r7, #28
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	40012c00 	.word	0x40012c00
 800a3c0:	40013400 	.word	0x40013400
 800a3c4:	40014000 	.word	0x40014000
 800a3c8:	40014400 	.word	0x40014400
 800a3cc:	40014800 	.word	0x40014800
 800a3d0:	40015000 	.word	0x40015000

0800a3d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b087      	sub	sp, #28
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a1b      	ldr	r3, [r3, #32]
 800a3e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a1b      	ldr	r3, [r3, #32]
 800a3ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	021b      	lsls	r3, r3, #8
 800a40e:	68fa      	ldr	r2, [r7, #12]
 800a410:	4313      	orrs	r3, r2
 800a412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a41a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	051b      	lsls	r3, r3, #20
 800a422:	693a      	ldr	r2, [r7, #16]
 800a424:	4313      	orrs	r3, r2
 800a426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	4a1a      	ldr	r2, [pc, #104]	; (800a494 <TIM_OC6_SetConfig+0xc0>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d013      	beq.n	800a458 <TIM_OC6_SetConfig+0x84>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	4a19      	ldr	r2, [pc, #100]	; (800a498 <TIM_OC6_SetConfig+0xc4>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d00f      	beq.n	800a458 <TIM_OC6_SetConfig+0x84>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	4a18      	ldr	r2, [pc, #96]	; (800a49c <TIM_OC6_SetConfig+0xc8>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d00b      	beq.n	800a458 <TIM_OC6_SetConfig+0x84>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	4a17      	ldr	r2, [pc, #92]	; (800a4a0 <TIM_OC6_SetConfig+0xcc>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d007      	beq.n	800a458 <TIM_OC6_SetConfig+0x84>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	4a16      	ldr	r2, [pc, #88]	; (800a4a4 <TIM_OC6_SetConfig+0xd0>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d003      	beq.n	800a458 <TIM_OC6_SetConfig+0x84>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	4a15      	ldr	r2, [pc, #84]	; (800a4a8 <TIM_OC6_SetConfig+0xd4>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d109      	bne.n	800a46c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a45e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	695b      	ldr	r3, [r3, #20]
 800a464:	029b      	lsls	r3, r3, #10
 800a466:	697a      	ldr	r2, [r7, #20]
 800a468:	4313      	orrs	r3, r2
 800a46a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	697a      	ldr	r2, [r7, #20]
 800a470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	68fa      	ldr	r2, [r7, #12]
 800a476:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	693a      	ldr	r2, [r7, #16]
 800a484:	621a      	str	r2, [r3, #32]
}
 800a486:	bf00      	nop
 800a488:	371c      	adds	r7, #28
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	40012c00 	.word	0x40012c00
 800a498:	40013400 	.word	0x40013400
 800a49c:	40014000 	.word	0x40014000
 800a4a0:	40014400 	.word	0x40014400
 800a4a4:	40014800 	.word	0x40014800
 800a4a8:	40015000 	.word	0x40015000

0800a4ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b087      	sub	sp, #28
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	607a      	str	r2, [r7, #4]
 800a4b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6a1b      	ldr	r3, [r3, #32]
 800a4be:	f023 0201 	bic.w	r2, r3, #1
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	699b      	ldr	r3, [r3, #24]
 800a4ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6a1b      	ldr	r3, [r3, #32]
 800a4d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	4a28      	ldr	r2, [pc, #160]	; (800a578 <TIM_TI1_SetConfig+0xcc>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d01b      	beq.n	800a512 <TIM_TI1_SetConfig+0x66>
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4e0:	d017      	beq.n	800a512 <TIM_TI1_SetConfig+0x66>
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	4a25      	ldr	r2, [pc, #148]	; (800a57c <TIM_TI1_SetConfig+0xd0>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d013      	beq.n	800a512 <TIM_TI1_SetConfig+0x66>
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	4a24      	ldr	r2, [pc, #144]	; (800a580 <TIM_TI1_SetConfig+0xd4>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d00f      	beq.n	800a512 <TIM_TI1_SetConfig+0x66>
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	4a23      	ldr	r2, [pc, #140]	; (800a584 <TIM_TI1_SetConfig+0xd8>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d00b      	beq.n	800a512 <TIM_TI1_SetConfig+0x66>
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	4a22      	ldr	r2, [pc, #136]	; (800a588 <TIM_TI1_SetConfig+0xdc>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d007      	beq.n	800a512 <TIM_TI1_SetConfig+0x66>
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	4a21      	ldr	r2, [pc, #132]	; (800a58c <TIM_TI1_SetConfig+0xe0>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d003      	beq.n	800a512 <TIM_TI1_SetConfig+0x66>
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	4a20      	ldr	r2, [pc, #128]	; (800a590 <TIM_TI1_SetConfig+0xe4>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d101      	bne.n	800a516 <TIM_TI1_SetConfig+0x6a>
 800a512:	2301      	movs	r3, #1
 800a514:	e000      	b.n	800a518 <TIM_TI1_SetConfig+0x6c>
 800a516:	2300      	movs	r3, #0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d008      	beq.n	800a52e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	f023 0303 	bic.w	r3, r3, #3
 800a522:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a524:	697a      	ldr	r2, [r7, #20]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4313      	orrs	r3, r2
 800a52a:	617b      	str	r3, [r7, #20]
 800a52c:	e003      	b.n	800a536 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	f043 0301 	orr.w	r3, r3, #1
 800a534:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a53c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	011b      	lsls	r3, r3, #4
 800a542:	b2db      	uxtb	r3, r3
 800a544:	697a      	ldr	r2, [r7, #20]
 800a546:	4313      	orrs	r3, r2
 800a548:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	f023 030a 	bic.w	r3, r3, #10
 800a550:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	f003 030a 	and.w	r3, r3, #10
 800a558:	693a      	ldr	r2, [r7, #16]
 800a55a:	4313      	orrs	r3, r2
 800a55c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	697a      	ldr	r2, [r7, #20]
 800a562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	693a      	ldr	r2, [r7, #16]
 800a568:	621a      	str	r2, [r3, #32]
}
 800a56a:	bf00      	nop
 800a56c:	371c      	adds	r7, #28
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	40012c00 	.word	0x40012c00
 800a57c:	40000400 	.word	0x40000400
 800a580:	40000800 	.word	0x40000800
 800a584:	40000c00 	.word	0x40000c00
 800a588:	40013400 	.word	0x40013400
 800a58c:	40014000 	.word	0x40014000
 800a590:	40015000 	.word	0x40015000

0800a594 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a594:	b480      	push	{r7}
 800a596:	b087      	sub	sp, #28
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6a1b      	ldr	r3, [r3, #32]
 800a5a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	f023 0201 	bic.w	r2, r3, #1
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	011b      	lsls	r3, r3, #4
 800a5c4:	693a      	ldr	r2, [r7, #16]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	f023 030a 	bic.w	r3, r3, #10
 800a5d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5d2:	697a      	ldr	r2, [r7, #20]
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	693a      	ldr	r2, [r7, #16]
 800a5de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	697a      	ldr	r2, [r7, #20]
 800a5e4:	621a      	str	r2, [r3, #32]
}
 800a5e6:	bf00      	nop
 800a5e8:	371c      	adds	r7, #28
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr

0800a5f2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a5f2:	b480      	push	{r7}
 800a5f4:	b087      	sub	sp, #28
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	60f8      	str	r0, [r7, #12]
 800a5fa:	60b9      	str	r1, [r7, #8]
 800a5fc:	607a      	str	r2, [r7, #4]
 800a5fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	6a1b      	ldr	r3, [r3, #32]
 800a604:	f023 0210 	bic.w	r2, r3, #16
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	699b      	ldr	r3, [r3, #24]
 800a610:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	6a1b      	ldr	r3, [r3, #32]
 800a616:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a61e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	021b      	lsls	r3, r3, #8
 800a624:	697a      	ldr	r2, [r7, #20]
 800a626:	4313      	orrs	r3, r2
 800a628:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a630:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	031b      	lsls	r3, r3, #12
 800a636:	b29b      	uxth	r3, r3
 800a638:	697a      	ldr	r2, [r7, #20]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a644:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	011b      	lsls	r3, r3, #4
 800a64a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a64e:	693a      	ldr	r2, [r7, #16]
 800a650:	4313      	orrs	r3, r2
 800a652:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	697a      	ldr	r2, [r7, #20]
 800a658:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	693a      	ldr	r2, [r7, #16]
 800a65e:	621a      	str	r2, [r3, #32]
}
 800a660:	bf00      	nop
 800a662:	371c      	adds	r7, #28
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b087      	sub	sp, #28
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6a1b      	ldr	r3, [r3, #32]
 800a67c:	f023 0210 	bic.w	r2, r3, #16
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	699b      	ldr	r3, [r3, #24]
 800a688:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6a1b      	ldr	r3, [r3, #32]
 800a68e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a696:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	031b      	lsls	r3, r3, #12
 800a69c:	697a      	ldr	r2, [r7, #20]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a6a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	011b      	lsls	r3, r3, #4
 800a6ae:	693a      	ldr	r2, [r7, #16]
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	697a      	ldr	r2, [r7, #20]
 800a6b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	693a      	ldr	r2, [r7, #16]
 800a6be:	621a      	str	r2, [r3, #32]
}
 800a6c0:	bf00      	nop
 800a6c2:	371c      	adds	r7, #28
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b087      	sub	sp, #28
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
 800a6d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	6a1b      	ldr	r3, [r3, #32]
 800a6de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	69db      	ldr	r3, [r3, #28]
 800a6ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6a1b      	ldr	r3, [r3, #32]
 800a6f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	f023 0303 	bic.w	r3, r3, #3
 800a6f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a6fa:	697a      	ldr	r2, [r7, #20]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a708:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	011b      	lsls	r3, r3, #4
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	697a      	ldr	r2, [r7, #20]
 800a712:	4313      	orrs	r3, r2
 800a714:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a71c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	021b      	lsls	r3, r3, #8
 800a722:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a726:	693a      	ldr	r2, [r7, #16]
 800a728:	4313      	orrs	r3, r2
 800a72a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	697a      	ldr	r2, [r7, #20]
 800a730:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	693a      	ldr	r2, [r7, #16]
 800a736:	621a      	str	r2, [r3, #32]
}
 800a738:	bf00      	nop
 800a73a:	371c      	adds	r7, #28
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a744:	b480      	push	{r7}
 800a746:	b087      	sub	sp, #28
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	607a      	str	r2, [r7, #4]
 800a750:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6a1b      	ldr	r3, [r3, #32]
 800a756:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	69db      	ldr	r3, [r3, #28]
 800a762:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6a1b      	ldr	r3, [r3, #32]
 800a768:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a770:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	021b      	lsls	r3, r3, #8
 800a776:	697a      	ldr	r2, [r7, #20]
 800a778:	4313      	orrs	r3, r2
 800a77a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a782:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	031b      	lsls	r3, r3, #12
 800a788:	b29b      	uxth	r3, r3
 800a78a:	697a      	ldr	r2, [r7, #20]
 800a78c:	4313      	orrs	r3, r2
 800a78e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a796:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	031b      	lsls	r3, r3, #12
 800a79c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a7a0:	693a      	ldr	r2, [r7, #16]
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	697a      	ldr	r2, [r7, #20]
 800a7aa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	693a      	ldr	r2, [r7, #16]
 800a7b0:	621a      	str	r2, [r3, #32]
}
 800a7b2:	bf00      	nop
 800a7b4:	371c      	adds	r7, #28
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a7be:	b480      	push	{r7}
 800a7c0:	b085      	sub	sp, #20
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
 800a7c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a7d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	f043 0307 	orr.w	r3, r3, #7
 800a7e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	609a      	str	r2, [r3, #8]
}
 800a7ec:	bf00      	nop
 800a7ee:	3714      	adds	r7, #20
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b087      	sub	sp, #28
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	607a      	str	r2, [r7, #4]
 800a804:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a812:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	021a      	lsls	r2, r3, #8
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	431a      	orrs	r2, r3
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	4313      	orrs	r3, r2
 800a820:	697a      	ldr	r2, [r7, #20]
 800a822:	4313      	orrs	r3, r2
 800a824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	697a      	ldr	r2, [r7, #20]
 800a82a:	609a      	str	r2, [r3, #8]
}
 800a82c:	bf00      	nop
 800a82e:	371c      	adds	r7, #28
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a838:	b480      	push	{r7}
 800a83a:	b087      	sub	sp, #28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	f003 031f 	and.w	r3, r3, #31
 800a84a:	2201      	movs	r2, #1
 800a84c:	fa02 f303 	lsl.w	r3, r2, r3
 800a850:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	6a1a      	ldr	r2, [r3, #32]
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	43db      	mvns	r3, r3
 800a85a:	401a      	ands	r2, r3
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6a1a      	ldr	r2, [r3, #32]
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	f003 031f 	and.w	r3, r3, #31
 800a86a:	6879      	ldr	r1, [r7, #4]
 800a86c:	fa01 f303 	lsl.w	r3, r1, r3
 800a870:	431a      	orrs	r2, r3
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	621a      	str	r2, [r3, #32]
}
 800a876:	bf00      	nop
 800a878:	371c      	adds	r7, #28
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr

0800a882 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 800a882:	b580      	push	{r7, lr}
 800a884:	b08a      	sub	sp, #40	; 0x28
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
 800a88a:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d101      	bne.n	800a896 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	e0a0      	b.n	800a9d8 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d106      	bne.n	800a8b0 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 f898 	bl	800a9e0 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2202      	movs	r2, #2
 800a8b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	3304      	adds	r3, #4
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	4610      	mov	r0, r2
 800a8c4:	f7ff fa20 	bl	8009d08 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6818      	ldr	r0, [r3, #0]
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	6819      	ldr	r1, [r3, #0]
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	2203      	movs	r2, #3
 800a8d6:	f7ff fde9 	bl	800a4ac <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	699a      	ldr	r2, [r3, #24]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f022 020c 	bic.w	r2, r2, #12
 800a8e8:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	6999      	ldr	r1, [r3, #24]
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	685a      	ldr	r2, [r3, #4]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	430a      	orrs	r2, r1
 800a8fa:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	685a      	ldr	r2, [r3, #4]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a90a:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	6812      	ldr	r2, [r2, #0]
 800a916:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a91a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a91e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	689a      	ldr	r2, [r3, #8]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a92e:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	6812      	ldr	r2, [r2, #0]
 800a93a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a93e:	f023 0307 	bic.w	r3, r3, #7
 800a942:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	689a      	ldr	r2, [r3, #8]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f042 0204 	orr.w	r2, r2, #4
 800a952:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800a954:	2300      	movs	r3, #0
 800a956:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a958:	2300      	movs	r3, #0
 800a95a:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800a95c:	2370      	movs	r3, #112	; 0x70
 800a95e:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a960:	2300      	movs	r3, #0
 800a962:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a964:	2300      	movs	r3, #0
 800a966:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a968:	2300      	movs	r3, #0
 800a96a:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f107 020c 	add.w	r2, r7, #12
 800a97a:	4611      	mov	r1, r2
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7ff fb05 	bl	8009f8c <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	6812      	ldr	r2, [r2, #0]
 800a98c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a994:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	685a      	ldr	r2, [r3, #4]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800a9a4:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a9d6:	2300      	movs	r3, #0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3728      	adds	r7, #40	; 0x28
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 800a9e8:	bf00      	nop
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d101      	bne.n	800aa0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa08:	2302      	movs	r3, #2
 800aa0a:	e074      	b.n	800aaf6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2202      	movs	r2, #2
 800aa18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a34      	ldr	r2, [pc, #208]	; (800ab04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d009      	beq.n	800aa4a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a33      	ldr	r2, [pc, #204]	; (800ab08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d004      	beq.n	800aa4a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a31      	ldr	r2, [pc, #196]	; (800ab0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d108      	bne.n	800aa5c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aa50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	68fa      	ldr	r2, [r7, #12]
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800aa62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	68fa      	ldr	r2, [r7, #12]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	68fa      	ldr	r2, [r7, #12]
 800aa78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a21      	ldr	r2, [pc, #132]	; (800ab04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d022      	beq.n	800aaca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa8c:	d01d      	beq.n	800aaca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	4a1f      	ldr	r2, [pc, #124]	; (800ab10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d018      	beq.n	800aaca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a1d      	ldr	r2, [pc, #116]	; (800ab14 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d013      	beq.n	800aaca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a1c      	ldr	r2, [pc, #112]	; (800ab18 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d00e      	beq.n	800aaca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a15      	ldr	r2, [pc, #84]	; (800ab08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d009      	beq.n	800aaca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a18      	ldr	r2, [pc, #96]	; (800ab1c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d004      	beq.n	800aaca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a11      	ldr	r2, [pc, #68]	; (800ab0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d10c      	bne.n	800aae4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aad0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	68ba      	ldr	r2, [r7, #8]
 800aad8:	4313      	orrs	r3, r2
 800aada:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	40012c00 	.word	0x40012c00
 800ab08:	40013400 	.word	0x40013400
 800ab0c:	40015000 	.word	0x40015000
 800ab10:	40000400 	.word	0x40000400
 800ab14:	40000800 	.word	0x40000800
 800ab18:	40000c00 	.word	0x40000c00
 800ab1c:	40014000 	.word	0x40014000

0800ab20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d101      	bne.n	800ab3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ab38:	2302      	movs	r3, #2
 800ab3a:	e096      	b.n	800ac6a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	689b      	ldr	r3, [r3, #8]
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	695b      	ldr	r3, [r3, #20]
 800ab94:	4313      	orrs	r3, r2
 800ab96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba2:	4313      	orrs	r3, r2
 800aba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	699b      	ldr	r3, [r3, #24]
 800abb0:	041b      	lsls	r3, r3, #16
 800abb2:	4313      	orrs	r3, r2
 800abb4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a2f      	ldr	r2, [pc, #188]	; (800ac78 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d009      	beq.n	800abd4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a2d      	ldr	r2, [pc, #180]	; (800ac7c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d004      	beq.n	800abd4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a2c      	ldr	r2, [pc, #176]	; (800ac80 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d106      	bne.n	800abe2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	69db      	ldr	r3, [r3, #28]
 800abde:	4313      	orrs	r3, r2
 800abe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a24      	ldr	r2, [pc, #144]	; (800ac78 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d009      	beq.n	800ac00 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a22      	ldr	r2, [pc, #136]	; (800ac7c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d004      	beq.n	800ac00 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a21      	ldr	r2, [pc, #132]	; (800ac80 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d12b      	bne.n	800ac58 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac0a:	051b      	lsls	r3, r3, #20
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	6a1b      	ldr	r3, [r3, #32]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a11      	ldr	r2, [pc, #68]	; (800ac78 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d009      	beq.n	800ac4a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4a10      	ldr	r2, [pc, #64]	; (800ac7c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d004      	beq.n	800ac4a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a0e      	ldr	r2, [pc, #56]	; (800ac80 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d106      	bne.n	800ac58 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac54:	4313      	orrs	r3, r2
 800ac56:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2200      	movs	r2, #0
 800ac64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac68:	2300      	movs	r3, #0
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3714      	adds	r7, #20
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr
 800ac76:	bf00      	nop
 800ac78:	40012c00 	.word	0x40012c00
 800ac7c:	40013400 	.word	0x40013400
 800ac80:	40015000 	.word	0x40015000

0800ac84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac8c:	bf00      	nop
 800ac8e:	370c      	adds	r7, #12
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aca0:	bf00      	nop
 800aca2:	370c      	adds	r7, #12
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800acac:	b480      	push	{r7}
 800acae:	b083      	sub	sp, #12
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800acb4:	bf00      	nop
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800acc8:	bf00      	nop
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800acdc:	bf00      	nop
 800acde:	370c      	adds	r7, #12
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800acf0:	bf00      	nop
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ad04:	bf00      	nop
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d101      	bne.n	800ad22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e042      	b.n	800ada8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d106      	bne.n	800ad3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f7f7 febd 	bl	8002ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2224      	movs	r2, #36	; 0x24
 800ad3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f022 0201 	bic.w	r2, r2, #1
 800ad50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 f8c2 	bl	800aedc <UART_SetConfig>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d101      	bne.n	800ad62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e022      	b.n	800ada8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d002      	beq.n	800ad70 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 fbb2 	bl	800b4d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	685a      	ldr	r2, [r3, #4]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	689a      	ldr	r2, [r3, #8]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f042 0201 	orr.w	r2, r2, #1
 800ad9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 fc39 	bl	800b618 <UART_CheckIdleState>
 800ada6:	4603      	mov	r3, r0
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3708      	adds	r7, #8
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b08a      	sub	sp, #40	; 0x28
 800adb4:	af02      	add	r7, sp, #8
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	603b      	str	r3, [r7, #0]
 800adbc:	4613      	mov	r3, r2
 800adbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adc6:	2b20      	cmp	r3, #32
 800adc8:	f040 8083 	bne.w	800aed2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d002      	beq.n	800add8 <HAL_UART_Transmit+0x28>
 800add2:	88fb      	ldrh	r3, [r7, #6]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d101      	bne.n	800addc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	e07b      	b.n	800aed4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d101      	bne.n	800adea <HAL_UART_Transmit+0x3a>
 800ade6:	2302      	movs	r3, #2
 800ade8:	e074      	b.n	800aed4 <HAL_UART_Transmit+0x124>
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2201      	movs	r2, #1
 800adee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2200      	movs	r2, #0
 800adf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2221      	movs	r2, #33	; 0x21
 800adfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ae02:	f7f8 fcd9 	bl	80037b8 <HAL_GetTick>
 800ae06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	88fa      	ldrh	r2, [r7, #6]
 800ae0c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	88fa      	ldrh	r2, [r7, #6]
 800ae14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae20:	d108      	bne.n	800ae34 <HAL_UART_Transmit+0x84>
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	691b      	ldr	r3, [r3, #16]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d104      	bne.n	800ae34 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	61bb      	str	r3, [r7, #24]
 800ae32:	e003      	b.n	800ae3c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ae44:	e02c      	b.n	800aea0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	9300      	str	r3, [sp, #0]
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	2180      	movs	r1, #128	; 0x80
 800ae50:	68f8      	ldr	r0, [r7, #12]
 800ae52:	f000 fc2c 	bl	800b6ae <UART_WaitOnFlagUntilTimeout>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d001      	beq.n	800ae60 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ae5c:	2303      	movs	r3, #3
 800ae5e:	e039      	b.n	800aed4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d10b      	bne.n	800ae7e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ae66:	69bb      	ldr	r3, [r7, #24]
 800ae68:	881b      	ldrh	r3, [r3, #0]
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae74:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	3302      	adds	r3, #2
 800ae7a:	61bb      	str	r3, [r7, #24]
 800ae7c:	e007      	b.n	800ae8e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	781a      	ldrb	r2, [r3, #0]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	3b01      	subs	r3, #1
 800ae98:	b29a      	uxth	r2, r3
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1cc      	bne.n	800ae46 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	2140      	movs	r1, #64	; 0x40
 800aeb6:	68f8      	ldr	r0, [r7, #12]
 800aeb8:	f000 fbf9 	bl	800b6ae <UART_WaitOnFlagUntilTimeout>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d001      	beq.n	800aec6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800aec2:	2303      	movs	r3, #3
 800aec4:	e006      	b.n	800aed4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2220      	movs	r2, #32
 800aeca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800aece:	2300      	movs	r3, #0
 800aed0:	e000      	b.n	800aed4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800aed2:	2302      	movs	r3, #2
  }
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3720      	adds	r7, #32
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aedc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aee0:	b08c      	sub	sp, #48	; 0x30
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aee6:	2300      	movs	r3, #0
 800aee8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	689a      	ldr	r2, [r3, #8]
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	691b      	ldr	r3, [r3, #16]
 800aef4:	431a      	orrs	r2, r3
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	695b      	ldr	r3, [r3, #20]
 800aefa:	431a      	orrs	r2, r3
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	69db      	ldr	r3, [r3, #28]
 800af00:	4313      	orrs	r3, r2
 800af02:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	4baa      	ldr	r3, [pc, #680]	; (800b1b4 <UART_SetConfig+0x2d8>)
 800af0c:	4013      	ands	r3, r2
 800af0e:	697a      	ldr	r2, [r7, #20]
 800af10:	6812      	ldr	r2, [r2, #0]
 800af12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af14:	430b      	orrs	r3, r1
 800af16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	68da      	ldr	r2, [r3, #12]
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	430a      	orrs	r2, r1
 800af2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	699b      	ldr	r3, [r3, #24]
 800af32:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a9f      	ldr	r2, [pc, #636]	; (800b1b8 <UART_SetConfig+0x2dc>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d004      	beq.n	800af48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	6a1b      	ldr	r3, [r3, #32]
 800af42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af44:	4313      	orrs	r3, r2
 800af46:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800af52:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800af56:	697a      	ldr	r2, [r7, #20]
 800af58:	6812      	ldr	r2, [r2, #0]
 800af5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af5c:	430b      	orrs	r3, r1
 800af5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af66:	f023 010f 	bic.w	r1, r3, #15
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	430a      	orrs	r2, r1
 800af74:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a90      	ldr	r2, [pc, #576]	; (800b1bc <UART_SetConfig+0x2e0>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d125      	bne.n	800afcc <UART_SetConfig+0xf0>
 800af80:	4b8f      	ldr	r3, [pc, #572]	; (800b1c0 <UART_SetConfig+0x2e4>)
 800af82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af86:	f003 0303 	and.w	r3, r3, #3
 800af8a:	2b03      	cmp	r3, #3
 800af8c:	d81a      	bhi.n	800afc4 <UART_SetConfig+0xe8>
 800af8e:	a201      	add	r2, pc, #4	; (adr r2, 800af94 <UART_SetConfig+0xb8>)
 800af90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af94:	0800afa5 	.word	0x0800afa5
 800af98:	0800afb5 	.word	0x0800afb5
 800af9c:	0800afad 	.word	0x0800afad
 800afa0:	0800afbd 	.word	0x0800afbd
 800afa4:	2301      	movs	r3, #1
 800afa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afaa:	e116      	b.n	800b1da <UART_SetConfig+0x2fe>
 800afac:	2302      	movs	r3, #2
 800afae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afb2:	e112      	b.n	800b1da <UART_SetConfig+0x2fe>
 800afb4:	2304      	movs	r3, #4
 800afb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afba:	e10e      	b.n	800b1da <UART_SetConfig+0x2fe>
 800afbc:	2308      	movs	r3, #8
 800afbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afc2:	e10a      	b.n	800b1da <UART_SetConfig+0x2fe>
 800afc4:	2310      	movs	r3, #16
 800afc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afca:	e106      	b.n	800b1da <UART_SetConfig+0x2fe>
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a7c      	ldr	r2, [pc, #496]	; (800b1c4 <UART_SetConfig+0x2e8>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d138      	bne.n	800b048 <UART_SetConfig+0x16c>
 800afd6:	4b7a      	ldr	r3, [pc, #488]	; (800b1c0 <UART_SetConfig+0x2e4>)
 800afd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afdc:	f003 030c 	and.w	r3, r3, #12
 800afe0:	2b0c      	cmp	r3, #12
 800afe2:	d82d      	bhi.n	800b040 <UART_SetConfig+0x164>
 800afe4:	a201      	add	r2, pc, #4	; (adr r2, 800afec <UART_SetConfig+0x110>)
 800afe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afea:	bf00      	nop
 800afec:	0800b021 	.word	0x0800b021
 800aff0:	0800b041 	.word	0x0800b041
 800aff4:	0800b041 	.word	0x0800b041
 800aff8:	0800b041 	.word	0x0800b041
 800affc:	0800b031 	.word	0x0800b031
 800b000:	0800b041 	.word	0x0800b041
 800b004:	0800b041 	.word	0x0800b041
 800b008:	0800b041 	.word	0x0800b041
 800b00c:	0800b029 	.word	0x0800b029
 800b010:	0800b041 	.word	0x0800b041
 800b014:	0800b041 	.word	0x0800b041
 800b018:	0800b041 	.word	0x0800b041
 800b01c:	0800b039 	.word	0x0800b039
 800b020:	2300      	movs	r3, #0
 800b022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b026:	e0d8      	b.n	800b1da <UART_SetConfig+0x2fe>
 800b028:	2302      	movs	r3, #2
 800b02a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b02e:	e0d4      	b.n	800b1da <UART_SetConfig+0x2fe>
 800b030:	2304      	movs	r3, #4
 800b032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b036:	e0d0      	b.n	800b1da <UART_SetConfig+0x2fe>
 800b038:	2308      	movs	r3, #8
 800b03a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b03e:	e0cc      	b.n	800b1da <UART_SetConfig+0x2fe>
 800b040:	2310      	movs	r3, #16
 800b042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b046:	e0c8      	b.n	800b1da <UART_SetConfig+0x2fe>
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a5e      	ldr	r2, [pc, #376]	; (800b1c8 <UART_SetConfig+0x2ec>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d125      	bne.n	800b09e <UART_SetConfig+0x1c2>
 800b052:	4b5b      	ldr	r3, [pc, #364]	; (800b1c0 <UART_SetConfig+0x2e4>)
 800b054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b058:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b05c:	2b30      	cmp	r3, #48	; 0x30
 800b05e:	d016      	beq.n	800b08e <UART_SetConfig+0x1b2>
 800b060:	2b30      	cmp	r3, #48	; 0x30
 800b062:	d818      	bhi.n	800b096 <UART_SetConfig+0x1ba>
 800b064:	2b20      	cmp	r3, #32
 800b066:	d00a      	beq.n	800b07e <UART_SetConfig+0x1a2>
 800b068:	2b20      	cmp	r3, #32
 800b06a:	d814      	bhi.n	800b096 <UART_SetConfig+0x1ba>
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d002      	beq.n	800b076 <UART_SetConfig+0x19a>
 800b070:	2b10      	cmp	r3, #16
 800b072:	d008      	beq.n	800b086 <UART_SetConfig+0x1aa>
 800b074:	e00f      	b.n	800b096 <UART_SetConfig+0x1ba>
 800b076:	2300      	movs	r3, #0
 800b078:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b07c:	e0ad      	b.n	800b1da <UART_SetConfig+0x2fe>
 800b07e:	2302      	movs	r3, #2
 800b080:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b084:	e0a9      	b.n	800b1da <UART_SetConfig+0x2fe>
 800b086:	2304      	movs	r3, #4
 800b088:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b08c:	e0a5      	b.n	800b1da <UART_SetConfig+0x2fe>
 800b08e:	2308      	movs	r3, #8
 800b090:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b094:	e0a1      	b.n	800b1da <UART_SetConfig+0x2fe>
 800b096:	2310      	movs	r3, #16
 800b098:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b09c:	e09d      	b.n	800b1da <UART_SetConfig+0x2fe>
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a4a      	ldr	r2, [pc, #296]	; (800b1cc <UART_SetConfig+0x2f0>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d125      	bne.n	800b0f4 <UART_SetConfig+0x218>
 800b0a8:	4b45      	ldr	r3, [pc, #276]	; (800b1c0 <UART_SetConfig+0x2e4>)
 800b0aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b0b2:	2bc0      	cmp	r3, #192	; 0xc0
 800b0b4:	d016      	beq.n	800b0e4 <UART_SetConfig+0x208>
 800b0b6:	2bc0      	cmp	r3, #192	; 0xc0
 800b0b8:	d818      	bhi.n	800b0ec <UART_SetConfig+0x210>
 800b0ba:	2b80      	cmp	r3, #128	; 0x80
 800b0bc:	d00a      	beq.n	800b0d4 <UART_SetConfig+0x1f8>
 800b0be:	2b80      	cmp	r3, #128	; 0x80
 800b0c0:	d814      	bhi.n	800b0ec <UART_SetConfig+0x210>
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d002      	beq.n	800b0cc <UART_SetConfig+0x1f0>
 800b0c6:	2b40      	cmp	r3, #64	; 0x40
 800b0c8:	d008      	beq.n	800b0dc <UART_SetConfig+0x200>
 800b0ca:	e00f      	b.n	800b0ec <UART_SetConfig+0x210>
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0d2:	e082      	b.n	800b1da <UART_SetConfig+0x2fe>
 800b0d4:	2302      	movs	r3, #2
 800b0d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0da:	e07e      	b.n	800b1da <UART_SetConfig+0x2fe>
 800b0dc:	2304      	movs	r3, #4
 800b0de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0e2:	e07a      	b.n	800b1da <UART_SetConfig+0x2fe>
 800b0e4:	2308      	movs	r3, #8
 800b0e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0ea:	e076      	b.n	800b1da <UART_SetConfig+0x2fe>
 800b0ec:	2310      	movs	r3, #16
 800b0ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0f2:	e072      	b.n	800b1da <UART_SetConfig+0x2fe>
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4a35      	ldr	r2, [pc, #212]	; (800b1d0 <UART_SetConfig+0x2f4>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d12a      	bne.n	800b154 <UART_SetConfig+0x278>
 800b0fe:	4b30      	ldr	r3, [pc, #192]	; (800b1c0 <UART_SetConfig+0x2e4>)
 800b100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b108:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b10c:	d01a      	beq.n	800b144 <UART_SetConfig+0x268>
 800b10e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b112:	d81b      	bhi.n	800b14c <UART_SetConfig+0x270>
 800b114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b118:	d00c      	beq.n	800b134 <UART_SetConfig+0x258>
 800b11a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b11e:	d815      	bhi.n	800b14c <UART_SetConfig+0x270>
 800b120:	2b00      	cmp	r3, #0
 800b122:	d003      	beq.n	800b12c <UART_SetConfig+0x250>
 800b124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b128:	d008      	beq.n	800b13c <UART_SetConfig+0x260>
 800b12a:	e00f      	b.n	800b14c <UART_SetConfig+0x270>
 800b12c:	2300      	movs	r3, #0
 800b12e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b132:	e052      	b.n	800b1da <UART_SetConfig+0x2fe>
 800b134:	2302      	movs	r3, #2
 800b136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b13a:	e04e      	b.n	800b1da <UART_SetConfig+0x2fe>
 800b13c:	2304      	movs	r3, #4
 800b13e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b142:	e04a      	b.n	800b1da <UART_SetConfig+0x2fe>
 800b144:	2308      	movs	r3, #8
 800b146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b14a:	e046      	b.n	800b1da <UART_SetConfig+0x2fe>
 800b14c:	2310      	movs	r3, #16
 800b14e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b152:	e042      	b.n	800b1da <UART_SetConfig+0x2fe>
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a17      	ldr	r2, [pc, #92]	; (800b1b8 <UART_SetConfig+0x2dc>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d13a      	bne.n	800b1d4 <UART_SetConfig+0x2f8>
 800b15e:	4b18      	ldr	r3, [pc, #96]	; (800b1c0 <UART_SetConfig+0x2e4>)
 800b160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b164:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b168:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b16c:	d01a      	beq.n	800b1a4 <UART_SetConfig+0x2c8>
 800b16e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b172:	d81b      	bhi.n	800b1ac <UART_SetConfig+0x2d0>
 800b174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b178:	d00c      	beq.n	800b194 <UART_SetConfig+0x2b8>
 800b17a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b17e:	d815      	bhi.n	800b1ac <UART_SetConfig+0x2d0>
 800b180:	2b00      	cmp	r3, #0
 800b182:	d003      	beq.n	800b18c <UART_SetConfig+0x2b0>
 800b184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b188:	d008      	beq.n	800b19c <UART_SetConfig+0x2c0>
 800b18a:	e00f      	b.n	800b1ac <UART_SetConfig+0x2d0>
 800b18c:	2300      	movs	r3, #0
 800b18e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b192:	e022      	b.n	800b1da <UART_SetConfig+0x2fe>
 800b194:	2302      	movs	r3, #2
 800b196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b19a:	e01e      	b.n	800b1da <UART_SetConfig+0x2fe>
 800b19c:	2304      	movs	r3, #4
 800b19e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b1a2:	e01a      	b.n	800b1da <UART_SetConfig+0x2fe>
 800b1a4:	2308      	movs	r3, #8
 800b1a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b1aa:	e016      	b.n	800b1da <UART_SetConfig+0x2fe>
 800b1ac:	2310      	movs	r3, #16
 800b1ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b1b2:	e012      	b.n	800b1da <UART_SetConfig+0x2fe>
 800b1b4:	cfff69f3 	.word	0xcfff69f3
 800b1b8:	40008000 	.word	0x40008000
 800b1bc:	40013800 	.word	0x40013800
 800b1c0:	40021000 	.word	0x40021000
 800b1c4:	40004400 	.word	0x40004400
 800b1c8:	40004800 	.word	0x40004800
 800b1cc:	40004c00 	.word	0x40004c00
 800b1d0:	40005000 	.word	0x40005000
 800b1d4:	2310      	movs	r3, #16
 800b1d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4aae      	ldr	r2, [pc, #696]	; (800b498 <UART_SetConfig+0x5bc>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	f040 8097 	bne.w	800b314 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b1e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b1ea:	2b08      	cmp	r3, #8
 800b1ec:	d823      	bhi.n	800b236 <UART_SetConfig+0x35a>
 800b1ee:	a201      	add	r2, pc, #4	; (adr r2, 800b1f4 <UART_SetConfig+0x318>)
 800b1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f4:	0800b219 	.word	0x0800b219
 800b1f8:	0800b237 	.word	0x0800b237
 800b1fc:	0800b221 	.word	0x0800b221
 800b200:	0800b237 	.word	0x0800b237
 800b204:	0800b227 	.word	0x0800b227
 800b208:	0800b237 	.word	0x0800b237
 800b20c:	0800b237 	.word	0x0800b237
 800b210:	0800b237 	.word	0x0800b237
 800b214:	0800b22f 	.word	0x0800b22f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b218:	f7fd fa40 	bl	800869c <HAL_RCC_GetPCLK1Freq>
 800b21c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b21e:	e010      	b.n	800b242 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b220:	4b9e      	ldr	r3, [pc, #632]	; (800b49c <UART_SetConfig+0x5c0>)
 800b222:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b224:	e00d      	b.n	800b242 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b226:	f7fd f9cd 	bl	80085c4 <HAL_RCC_GetSysClockFreq>
 800b22a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b22c:	e009      	b.n	800b242 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b22e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b232:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b234:	e005      	b.n	800b242 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b236:	2300      	movs	r3, #0
 800b238:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b23a:	2301      	movs	r3, #1
 800b23c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b240:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b244:	2b00      	cmp	r3, #0
 800b246:	f000 8130 	beq.w	800b4aa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b24e:	4a94      	ldr	r2, [pc, #592]	; (800b4a0 <UART_SetConfig+0x5c4>)
 800b250:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b254:	461a      	mov	r2, r3
 800b256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b258:	fbb3 f3f2 	udiv	r3, r3, r2
 800b25c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	685a      	ldr	r2, [r3, #4]
 800b262:	4613      	mov	r3, r2
 800b264:	005b      	lsls	r3, r3, #1
 800b266:	4413      	add	r3, r2
 800b268:	69ba      	ldr	r2, [r7, #24]
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d305      	bcc.n	800b27a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b274:	69ba      	ldr	r2, [r7, #24]
 800b276:	429a      	cmp	r2, r3
 800b278:	d903      	bls.n	800b282 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b27a:	2301      	movs	r3, #1
 800b27c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b280:	e113      	b.n	800b4aa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b284:	2200      	movs	r2, #0
 800b286:	60bb      	str	r3, [r7, #8]
 800b288:	60fa      	str	r2, [r7, #12]
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28e:	4a84      	ldr	r2, [pc, #528]	; (800b4a0 <UART_SetConfig+0x5c4>)
 800b290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b294:	b29b      	uxth	r3, r3
 800b296:	2200      	movs	r2, #0
 800b298:	603b      	str	r3, [r7, #0]
 800b29a:	607a      	str	r2, [r7, #4]
 800b29c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b2a4:	f7f5 fcf8 	bl	8000c98 <__aeabi_uldivmod>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	4610      	mov	r0, r2
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	f04f 0200 	mov.w	r2, #0
 800b2b4:	f04f 0300 	mov.w	r3, #0
 800b2b8:	020b      	lsls	r3, r1, #8
 800b2ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b2be:	0202      	lsls	r2, r0, #8
 800b2c0:	6979      	ldr	r1, [r7, #20]
 800b2c2:	6849      	ldr	r1, [r1, #4]
 800b2c4:	0849      	lsrs	r1, r1, #1
 800b2c6:	2000      	movs	r0, #0
 800b2c8:	460c      	mov	r4, r1
 800b2ca:	4605      	mov	r5, r0
 800b2cc:	eb12 0804 	adds.w	r8, r2, r4
 800b2d0:	eb43 0905 	adc.w	r9, r3, r5
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	469a      	mov	sl, r3
 800b2dc:	4693      	mov	fp, r2
 800b2de:	4652      	mov	r2, sl
 800b2e0:	465b      	mov	r3, fp
 800b2e2:	4640      	mov	r0, r8
 800b2e4:	4649      	mov	r1, r9
 800b2e6:	f7f5 fcd7 	bl	8000c98 <__aeabi_uldivmod>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	4613      	mov	r3, r2
 800b2f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b2f2:	6a3b      	ldr	r3, [r7, #32]
 800b2f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2f8:	d308      	bcc.n	800b30c <UART_SetConfig+0x430>
 800b2fa:	6a3b      	ldr	r3, [r7, #32]
 800b2fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b300:	d204      	bcs.n	800b30c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	6a3a      	ldr	r2, [r7, #32]
 800b308:	60da      	str	r2, [r3, #12]
 800b30a:	e0ce      	b.n	800b4aa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b30c:	2301      	movs	r3, #1
 800b30e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b312:	e0ca      	b.n	800b4aa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	69db      	ldr	r3, [r3, #28]
 800b318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b31c:	d166      	bne.n	800b3ec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b31e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b322:	2b08      	cmp	r3, #8
 800b324:	d827      	bhi.n	800b376 <UART_SetConfig+0x49a>
 800b326:	a201      	add	r2, pc, #4	; (adr r2, 800b32c <UART_SetConfig+0x450>)
 800b328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b32c:	0800b351 	.word	0x0800b351
 800b330:	0800b359 	.word	0x0800b359
 800b334:	0800b361 	.word	0x0800b361
 800b338:	0800b377 	.word	0x0800b377
 800b33c:	0800b367 	.word	0x0800b367
 800b340:	0800b377 	.word	0x0800b377
 800b344:	0800b377 	.word	0x0800b377
 800b348:	0800b377 	.word	0x0800b377
 800b34c:	0800b36f 	.word	0x0800b36f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b350:	f7fd f9a4 	bl	800869c <HAL_RCC_GetPCLK1Freq>
 800b354:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b356:	e014      	b.n	800b382 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b358:	f7fd f9b6 	bl	80086c8 <HAL_RCC_GetPCLK2Freq>
 800b35c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b35e:	e010      	b.n	800b382 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b360:	4b4e      	ldr	r3, [pc, #312]	; (800b49c <UART_SetConfig+0x5c0>)
 800b362:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b364:	e00d      	b.n	800b382 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b366:	f7fd f92d 	bl	80085c4 <HAL_RCC_GetSysClockFreq>
 800b36a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b36c:	e009      	b.n	800b382 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b36e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b372:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b374:	e005      	b.n	800b382 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b376:	2300      	movs	r3, #0
 800b378:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b37a:	2301      	movs	r3, #1
 800b37c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b380:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b384:	2b00      	cmp	r3, #0
 800b386:	f000 8090 	beq.w	800b4aa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b38e:	4a44      	ldr	r2, [pc, #272]	; (800b4a0 <UART_SetConfig+0x5c4>)
 800b390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b394:	461a      	mov	r2, r3
 800b396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b398:	fbb3 f3f2 	udiv	r3, r3, r2
 800b39c:	005a      	lsls	r2, r3, #1
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	085b      	lsrs	r3, r3, #1
 800b3a4:	441a      	add	r2, r3
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3b0:	6a3b      	ldr	r3, [r7, #32]
 800b3b2:	2b0f      	cmp	r3, #15
 800b3b4:	d916      	bls.n	800b3e4 <UART_SetConfig+0x508>
 800b3b6:	6a3b      	ldr	r3, [r7, #32]
 800b3b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3bc:	d212      	bcs.n	800b3e4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b3be:	6a3b      	ldr	r3, [r7, #32]
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	f023 030f 	bic.w	r3, r3, #15
 800b3c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b3c8:	6a3b      	ldr	r3, [r7, #32]
 800b3ca:	085b      	lsrs	r3, r3, #1
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	f003 0307 	and.w	r3, r3, #7
 800b3d2:	b29a      	uxth	r2, r3
 800b3d4:	8bfb      	ldrh	r3, [r7, #30]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	8bfa      	ldrh	r2, [r7, #30]
 800b3e0:	60da      	str	r2, [r3, #12]
 800b3e2:	e062      	b.n	800b4aa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b3ea:	e05e      	b.n	800b4aa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b3ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b3f0:	2b08      	cmp	r3, #8
 800b3f2:	d828      	bhi.n	800b446 <UART_SetConfig+0x56a>
 800b3f4:	a201      	add	r2, pc, #4	; (adr r2, 800b3fc <UART_SetConfig+0x520>)
 800b3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3fa:	bf00      	nop
 800b3fc:	0800b421 	.word	0x0800b421
 800b400:	0800b429 	.word	0x0800b429
 800b404:	0800b431 	.word	0x0800b431
 800b408:	0800b447 	.word	0x0800b447
 800b40c:	0800b437 	.word	0x0800b437
 800b410:	0800b447 	.word	0x0800b447
 800b414:	0800b447 	.word	0x0800b447
 800b418:	0800b447 	.word	0x0800b447
 800b41c:	0800b43f 	.word	0x0800b43f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b420:	f7fd f93c 	bl	800869c <HAL_RCC_GetPCLK1Freq>
 800b424:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b426:	e014      	b.n	800b452 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b428:	f7fd f94e 	bl	80086c8 <HAL_RCC_GetPCLK2Freq>
 800b42c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b42e:	e010      	b.n	800b452 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b430:	4b1a      	ldr	r3, [pc, #104]	; (800b49c <UART_SetConfig+0x5c0>)
 800b432:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b434:	e00d      	b.n	800b452 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b436:	f7fd f8c5 	bl	80085c4 <HAL_RCC_GetSysClockFreq>
 800b43a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b43c:	e009      	b.n	800b452 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b43e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b442:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b444:	e005      	b.n	800b452 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b446:	2300      	movs	r3, #0
 800b448:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b44a:	2301      	movs	r3, #1
 800b44c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b450:	bf00      	nop
    }

    if (pclk != 0U)
 800b452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b454:	2b00      	cmp	r3, #0
 800b456:	d028      	beq.n	800b4aa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45c:	4a10      	ldr	r2, [pc, #64]	; (800b4a0 <UART_SetConfig+0x5c4>)
 800b45e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b462:	461a      	mov	r2, r3
 800b464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b466:	fbb3 f2f2 	udiv	r2, r3, r2
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	085b      	lsrs	r3, r3, #1
 800b470:	441a      	add	r2, r3
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	fbb2 f3f3 	udiv	r3, r2, r3
 800b47a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b47c:	6a3b      	ldr	r3, [r7, #32]
 800b47e:	2b0f      	cmp	r3, #15
 800b480:	d910      	bls.n	800b4a4 <UART_SetConfig+0x5c8>
 800b482:	6a3b      	ldr	r3, [r7, #32]
 800b484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b488:	d20c      	bcs.n	800b4a4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b48a:	6a3b      	ldr	r3, [r7, #32]
 800b48c:	b29a      	uxth	r2, r3
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	60da      	str	r2, [r3, #12]
 800b494:	e009      	b.n	800b4aa <UART_SetConfig+0x5ce>
 800b496:	bf00      	nop
 800b498:	40008000 	.word	0x40008000
 800b49c:	00f42400 	.word	0x00f42400
 800b4a0:	08015660 	.word	0x08015660
      }
      else
      {
        ret = HAL_ERROR;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b4c6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3730      	adds	r7, #48	; 0x30
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b4d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b083      	sub	sp, #12
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4e0:	f003 0301 	and.w	r3, r3, #1
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d00a      	beq.n	800b4fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	430a      	orrs	r2, r1
 800b4fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b502:	f003 0302 	and.w	r3, r3, #2
 800b506:	2b00      	cmp	r3, #0
 800b508:	d00a      	beq.n	800b520 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	430a      	orrs	r2, r1
 800b51e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b524:	f003 0304 	and.w	r3, r3, #4
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00a      	beq.n	800b542 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	430a      	orrs	r2, r1
 800b540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b546:	f003 0308 	and.w	r3, r3, #8
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d00a      	beq.n	800b564 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	430a      	orrs	r2, r1
 800b562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b568:	f003 0310 	and.w	r3, r3, #16
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00a      	beq.n	800b586 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	689b      	ldr	r3, [r3, #8]
 800b576:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	430a      	orrs	r2, r1
 800b584:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b58a:	f003 0320 	and.w	r3, r3, #32
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d00a      	beq.n	800b5a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	689b      	ldr	r3, [r3, #8]
 800b598:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	430a      	orrs	r2, r1
 800b5a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d01a      	beq.n	800b5ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	430a      	orrs	r2, r1
 800b5c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5d2:	d10a      	bne.n	800b5ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	430a      	orrs	r2, r1
 800b5e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d00a      	beq.n	800b60c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	430a      	orrs	r2, r1
 800b60a:	605a      	str	r2, [r3, #4]
  }
}
 800b60c:	bf00      	nop
 800b60e:	370c      	adds	r7, #12
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b086      	sub	sp, #24
 800b61c:	af02      	add	r7, sp, #8
 800b61e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2200      	movs	r2, #0
 800b624:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b628:	f7f8 f8c6 	bl	80037b8 <HAL_GetTick>
 800b62c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f003 0308 	and.w	r3, r3, #8
 800b638:	2b08      	cmp	r3, #8
 800b63a:	d10e      	bne.n	800b65a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b63c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2200      	movs	r2, #0
 800b646:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 f82f 	bl	800b6ae <UART_WaitOnFlagUntilTimeout>
 800b650:	4603      	mov	r3, r0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d001      	beq.n	800b65a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b656:	2303      	movs	r3, #3
 800b658:	e025      	b.n	800b6a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f003 0304 	and.w	r3, r3, #4
 800b664:	2b04      	cmp	r3, #4
 800b666:	d10e      	bne.n	800b686 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b668:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2200      	movs	r2, #0
 800b672:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 f819 	bl	800b6ae <UART_WaitOnFlagUntilTimeout>
 800b67c:	4603      	mov	r3, r0
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d001      	beq.n	800b686 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b682:	2303      	movs	r3, #3
 800b684:	e00f      	b.n	800b6a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2220      	movs	r2, #32
 800b68a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2220      	movs	r2, #32
 800b692:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2200      	movs	r2, #0
 800b69a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	b09c      	sub	sp, #112	; 0x70
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	60f8      	str	r0, [r7, #12]
 800b6b6:	60b9      	str	r1, [r7, #8]
 800b6b8:	603b      	str	r3, [r7, #0]
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6be:	e0a9      	b.n	800b814 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b6c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6c6:	f000 80a5 	beq.w	800b814 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6ca:	f7f8 f875 	bl	80037b8 <HAL_GetTick>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	1ad3      	subs	r3, r2, r3
 800b6d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d302      	bcc.n	800b6e0 <UART_WaitOnFlagUntilTimeout+0x32>
 800b6da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d140      	bne.n	800b762 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6e8:	e853 3f00 	ldrex	r3, [r3]
 800b6ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b6ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b6f4:	667b      	str	r3, [r7, #100]	; 0x64
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b700:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b702:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b704:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b706:	e841 2300 	strex	r3, r2, [r1]
 800b70a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b70c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d1e6      	bne.n	800b6e0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	3308      	adds	r3, #8
 800b718:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b71a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b71c:	e853 3f00 	ldrex	r3, [r3]
 800b720:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b724:	f023 0301 	bic.w	r3, r3, #1
 800b728:	663b      	str	r3, [r7, #96]	; 0x60
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	3308      	adds	r3, #8
 800b730:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b732:	64ba      	str	r2, [r7, #72]	; 0x48
 800b734:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b736:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b738:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b73a:	e841 2300 	strex	r3, r2, [r1]
 800b73e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b742:	2b00      	cmp	r3, #0
 800b744:	d1e5      	bne.n	800b712 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2220      	movs	r2, #32
 800b74a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2220      	movs	r2, #32
 800b752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2200      	movs	r2, #0
 800b75a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b75e:	2303      	movs	r3, #3
 800b760:	e069      	b.n	800b836 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f003 0304 	and.w	r3, r3, #4
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d051      	beq.n	800b814 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	69db      	ldr	r3, [r3, #28]
 800b776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b77a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b77e:	d149      	bne.n	800b814 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b788:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b792:	e853 3f00 	ldrex	r3, [r3]
 800b796:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b79e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7a8:	637b      	str	r3, [r7, #52]	; 0x34
 800b7aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b7ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7b0:	e841 2300 	strex	r3, r2, [r1]
 800b7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d1e6      	bne.n	800b78a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	3308      	adds	r3, #8
 800b7c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	e853 3f00 	ldrex	r3, [r3]
 800b7ca:	613b      	str	r3, [r7, #16]
   return(result);
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	f023 0301 	bic.w	r3, r3, #1
 800b7d2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	3308      	adds	r3, #8
 800b7da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b7dc:	623a      	str	r2, [r7, #32]
 800b7de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e0:	69f9      	ldr	r1, [r7, #28]
 800b7e2:	6a3a      	ldr	r2, [r7, #32]
 800b7e4:	e841 2300 	strex	r3, r2, [r1]
 800b7e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d1e5      	bne.n	800b7bc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2220      	movs	r2, #32
 800b7f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2220      	movs	r2, #32
 800b7fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2220      	movs	r2, #32
 800b804:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2200      	movs	r2, #0
 800b80c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b810:	2303      	movs	r3, #3
 800b812:	e010      	b.n	800b836 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	69da      	ldr	r2, [r3, #28]
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	4013      	ands	r3, r2
 800b81e:	68ba      	ldr	r2, [r7, #8]
 800b820:	429a      	cmp	r2, r3
 800b822:	bf0c      	ite	eq
 800b824:	2301      	moveq	r3, #1
 800b826:	2300      	movne	r3, #0
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	461a      	mov	r2, r3
 800b82c:	79fb      	ldrb	r3, [r7, #7]
 800b82e:	429a      	cmp	r2, r3
 800b830:	f43f af46 	beq.w	800b6c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3770      	adds	r7, #112	; 0x70
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b83e:	b480      	push	{r7}
 800b840:	b085      	sub	sp, #20
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d101      	bne.n	800b854 <HAL_UARTEx_DisableFifoMode+0x16>
 800b850:	2302      	movs	r3, #2
 800b852:	e027      	b.n	800b8a4 <HAL_UARTEx_DisableFifoMode+0x66>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2201      	movs	r2, #1
 800b858:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2224      	movs	r2, #36	; 0x24
 800b860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f022 0201 	bic.w	r2, r2, #1
 800b87a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b882:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2200      	movs	r2, #0
 800b888:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	68fa      	ldr	r2, [r7, #12]
 800b890:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2220      	movs	r2, #32
 800b896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2200      	movs	r2, #0
 800b89e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b8a2:	2300      	movs	r3, #0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3714      	adds	r7, #20
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d101      	bne.n	800b8c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b8c4:	2302      	movs	r3, #2
 800b8c6:	e02d      	b.n	800b924 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2224      	movs	r2, #36	; 0x24
 800b8d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f022 0201 	bic.w	r2, r2, #1
 800b8ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	683a      	ldr	r2, [r7, #0]
 800b900:	430a      	orrs	r2, r1
 800b902:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 f84f 	bl	800b9a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	68fa      	ldr	r2, [r7, #12]
 800b910:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2220      	movs	r2, #32
 800b916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2200      	movs	r2, #0
 800b91e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b922:	2300      	movs	r3, #0
}
 800b924:	4618      	mov	r0, r3
 800b926:	3710      	adds	r7, #16
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d101      	bne.n	800b944 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b940:	2302      	movs	r3, #2
 800b942:	e02d      	b.n	800b9a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2201      	movs	r2, #1
 800b948:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2224      	movs	r2, #36	; 0x24
 800b950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f022 0201 	bic.w	r2, r2, #1
 800b96a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	689b      	ldr	r3, [r3, #8]
 800b972:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	683a      	ldr	r2, [r7, #0]
 800b97c:	430a      	orrs	r2, r1
 800b97e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 f811 	bl	800b9a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	68fa      	ldr	r2, [r7, #12]
 800b98c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2220      	movs	r2, #32
 800b992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2200      	movs	r2, #0
 800b99a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3710      	adds	r7, #16
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b085      	sub	sp, #20
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d108      	bne.n	800b9ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b9c8:	e031      	b.n	800ba2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b9ca:	2308      	movs	r3, #8
 800b9cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b9ce:	2308      	movs	r3, #8
 800b9d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	689b      	ldr	r3, [r3, #8]
 800b9d8:	0e5b      	lsrs	r3, r3, #25
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	f003 0307 	and.w	r3, r3, #7
 800b9e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	689b      	ldr	r3, [r3, #8]
 800b9e8:	0f5b      	lsrs	r3, r3, #29
 800b9ea:	b2db      	uxtb	r3, r3
 800b9ec:	f003 0307 	and.w	r3, r3, #7
 800b9f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b9f2:	7bbb      	ldrb	r3, [r7, #14]
 800b9f4:	7b3a      	ldrb	r2, [r7, #12]
 800b9f6:	4911      	ldr	r1, [pc, #68]	; (800ba3c <UARTEx_SetNbDataToProcess+0x94>)
 800b9f8:	5c8a      	ldrb	r2, [r1, r2]
 800b9fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b9fe:	7b3a      	ldrb	r2, [r7, #12]
 800ba00:	490f      	ldr	r1, [pc, #60]	; (800ba40 <UARTEx_SetNbDataToProcess+0x98>)
 800ba02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba04:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba08:	b29a      	uxth	r2, r3
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba10:	7bfb      	ldrb	r3, [r7, #15]
 800ba12:	7b7a      	ldrb	r2, [r7, #13]
 800ba14:	4909      	ldr	r1, [pc, #36]	; (800ba3c <UARTEx_SetNbDataToProcess+0x94>)
 800ba16:	5c8a      	ldrb	r2, [r1, r2]
 800ba18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ba1c:	7b7a      	ldrb	r2, [r7, #13]
 800ba1e:	4908      	ldr	r1, [pc, #32]	; (800ba40 <UARTEx_SetNbDataToProcess+0x98>)
 800ba20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba22:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba26:	b29a      	uxth	r2, r3
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ba2e:	bf00      	nop
 800ba30:	3714      	adds	r7, #20
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop
 800ba3c:	08015678 	.word	0x08015678
 800ba40:	08015680 	.word	0x08015680

0800ba44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b085      	sub	sp, #20
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ba54:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800ba58:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	b29a      	uxth	r2, r3
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3714      	adds	r7, #20
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr

0800ba72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800ba72:	b480      	push	{r7}
 800ba74:	b085      	sub	sp, #20
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ba7a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800ba7e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ba86:	b29a      	uxth	r2, r3
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	43db      	mvns	r3, r3
 800ba8e:	b29b      	uxth	r3, r3
 800ba90:	4013      	ands	r3, r2
 800ba92:	b29a      	uxth	r2, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ba9a:	2300      	movs	r3, #0
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3714      	adds	r7, #20
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800baa8:	b084      	sub	sp, #16
 800baaa:	b480      	push	{r7}
 800baac:	b083      	sub	sp, #12
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
 800bab2:	f107 0014 	add.w	r0, r7, #20
 800bab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2201      	movs	r2, #1
 800babe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2200      	movs	r2, #0
 800bace:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800bada:	2300      	movs	r3, #0
}
 800badc:	4618      	mov	r0, r3
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	b004      	add	sp, #16
 800bae8:	4770      	bx	lr
	...

0800baec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800baec:	b480      	push	{r7}
 800baee:	b09d      	sub	sp, #116	; 0x74
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800baf6:	2300      	movs	r3, #0
 800baf8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	4413      	add	r3, r2
 800bb06:	881b      	ldrh	r3, [r3, #0]
 800bb08:	b29b      	uxth	r3, r3
 800bb0a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800bb0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb12:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	78db      	ldrb	r3, [r3, #3]
 800bb1a:	2b03      	cmp	r3, #3
 800bb1c:	d81f      	bhi.n	800bb5e <USB_ActivateEndpoint+0x72>
 800bb1e:	a201      	add	r2, pc, #4	; (adr r2, 800bb24 <USB_ActivateEndpoint+0x38>)
 800bb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb24:	0800bb35 	.word	0x0800bb35
 800bb28:	0800bb51 	.word	0x0800bb51
 800bb2c:	0800bb67 	.word	0x0800bb67
 800bb30:	0800bb43 	.word	0x0800bb43
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bb34:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bb38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bb3c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800bb40:	e012      	b.n	800bb68 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bb42:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bb46:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800bb4a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800bb4e:	e00b      	b.n	800bb68 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800bb50:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bb54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bb58:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800bb5c:	e004      	b.n	800bb68 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800bb64:	e000      	b.n	800bb68 <USB_ActivateEndpoint+0x7c>
      break;
 800bb66:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	009b      	lsls	r3, r3, #2
 800bb70:	441a      	add	r2, r3
 800bb72:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bb76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	4413      	add	r3, r2
 800bb94:	881b      	ldrh	r3, [r3, #0]
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	b21b      	sxth	r3, r3
 800bb9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bba2:	b21a      	sxth	r2, r3
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	b21b      	sxth	r3, r3
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	b21b      	sxth	r3, r3
 800bbae:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	441a      	add	r2, r3
 800bbbc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800bbc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	7b1b      	ldrb	r3, [r3, #12]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	f040 8149 	bne.w	800be70 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	785b      	ldrb	r3, [r3, #1]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	f000 8084 	beq.w	800bcf0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	61bb      	str	r3, [r7, #24]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	69bb      	ldr	r3, [r7, #24]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	61bb      	str	r3, [r7, #24]
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	00da      	lsls	r2, r3, #3
 800bc02:	69bb      	ldr	r3, [r7, #24]
 800bc04:	4413      	add	r3, r2
 800bc06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc0a:	617b      	str	r3, [r7, #20]
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	88db      	ldrh	r3, [r3, #6]
 800bc10:	085b      	lsrs	r3, r3, #1
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	005b      	lsls	r3, r3, #1
 800bc16:	b29a      	uxth	r2, r3
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	4413      	add	r3, r2
 800bc26:	881b      	ldrh	r3, [r3, #0]
 800bc28:	827b      	strh	r3, [r7, #18]
 800bc2a:	8a7b      	ldrh	r3, [r7, #18]
 800bc2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d01b      	beq.n	800bc6c <USB_ActivateEndpoint+0x180>
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	781b      	ldrb	r3, [r3, #0]
 800bc3a:	009b      	lsls	r3, r3, #2
 800bc3c:	4413      	add	r3, r2
 800bc3e:	881b      	ldrh	r3, [r3, #0]
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc4a:	823b      	strh	r3, [r7, #16]
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	441a      	add	r2, r3
 800bc56:	8a3b      	ldrh	r3, [r7, #16]
 800bc58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	78db      	ldrb	r3, [r3, #3]
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d020      	beq.n	800bcb6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	4413      	add	r3, r2
 800bc7e:	881b      	ldrh	r3, [r3, #0]
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc8a:	81bb      	strh	r3, [r7, #12]
 800bc8c:	89bb      	ldrh	r3, [r7, #12]
 800bc8e:	f083 0320 	eor.w	r3, r3, #32
 800bc92:	81bb      	strh	r3, [r7, #12]
 800bc94:	687a      	ldr	r2, [r7, #4]
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	441a      	add	r2, r3
 800bc9e:	89bb      	ldrh	r3, [r7, #12]
 800bca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bcac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	8013      	strh	r3, [r2, #0]
 800bcb4:	e2a6      	b.n	800c204 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bcb6:	687a      	ldr	r2, [r7, #4]
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	009b      	lsls	r3, r3, #2
 800bcbe:	4413      	add	r3, r2
 800bcc0:	881b      	ldrh	r3, [r3, #0]
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bccc:	81fb      	strh	r3, [r7, #14]
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	441a      	add	r2, r3
 800bcd8:	89fb      	ldrh	r3, [r7, #14]
 800bcda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bcde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	8013      	strh	r3, [r2, #0]
 800bcee:	e289      	b.n	800c204 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	633b      	str	r3, [r7, #48]	; 0x30
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd00:	4413      	add	r3, r2
 800bd02:	633b      	str	r3, [r7, #48]	; 0x30
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	00da      	lsls	r2, r3, #3
 800bd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0c:	4413      	add	r3, r2
 800bd0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bd12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	88db      	ldrh	r3, [r3, #6]
 800bd18:	085b      	lsrs	r3, r3, #1
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	005b      	lsls	r3, r3, #1
 800bd1e:	b29a      	uxth	r2, r3
 800bd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd22:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	461a      	mov	r2, r3
 800bd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd34:	4413      	add	r3, r2
 800bd36:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	00da      	lsls	r2, r3, #3
 800bd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd40:	4413      	add	r3, r2
 800bd42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bd46:	627b      	str	r3, [r7, #36]	; 0x24
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	691b      	ldr	r3, [r3, #16]
 800bd4c:	2b3e      	cmp	r3, #62	; 0x3e
 800bd4e:	d918      	bls.n	800bd82 <USB_ActivateEndpoint+0x296>
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	691b      	ldr	r3, [r3, #16]
 800bd54:	095b      	lsrs	r3, r3, #5
 800bd56:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	691b      	ldr	r3, [r3, #16]
 800bd5c:	f003 031f 	and.w	r3, r3, #31
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d102      	bne.n	800bd6a <USB_ActivateEndpoint+0x27e>
 800bd64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd66:	3b01      	subs	r3, #1
 800bd68:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	029b      	lsls	r3, r3, #10
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd7a:	b29a      	uxth	r2, r3
 800bd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7e:	801a      	strh	r2, [r3, #0]
 800bd80:	e029      	b.n	800bdd6 <USB_ActivateEndpoint+0x2ea>
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	691b      	ldr	r3, [r3, #16]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d112      	bne.n	800bdb0 <USB_ActivateEndpoint+0x2c4>
 800bd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8c:	881b      	ldrh	r3, [r3, #0]
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bd94:	b29a      	uxth	r2, r3
 800bd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd98:	801a      	strh	r2, [r3, #0]
 800bd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9c:	881b      	ldrh	r3, [r3, #0]
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bda4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bda8:	b29a      	uxth	r2, r3
 800bdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdac:	801a      	strh	r2, [r3, #0]
 800bdae:	e012      	b.n	800bdd6 <USB_ActivateEndpoint+0x2ea>
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	691b      	ldr	r3, [r3, #16]
 800bdb4:	085b      	lsrs	r3, r3, #1
 800bdb6:	66bb      	str	r3, [r7, #104]	; 0x68
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	691b      	ldr	r3, [r3, #16]
 800bdbc:	f003 0301 	and.w	r3, r3, #1
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d002      	beq.n	800bdca <USB_ActivateEndpoint+0x2de>
 800bdc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	66bb      	str	r3, [r7, #104]	; 0x68
 800bdca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	029b      	lsls	r3, r3, #10
 800bdd0:	b29a      	uxth	r2, r3
 800bdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	009b      	lsls	r3, r3, #2
 800bdde:	4413      	add	r3, r2
 800bde0:	881b      	ldrh	r3, [r3, #0]
 800bde2:	847b      	strh	r3, [r7, #34]	; 0x22
 800bde4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bde6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d01b      	beq.n	800be26 <USB_ActivateEndpoint+0x33a>
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	009b      	lsls	r3, r3, #2
 800bdf6:	4413      	add	r3, r2
 800bdf8:	881b      	ldrh	r3, [r3, #0]
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be04:	843b      	strh	r3, [r7, #32]
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	009b      	lsls	r3, r3, #2
 800be0e:	441a      	add	r2, r3
 800be10:	8c3b      	ldrh	r3, [r7, #32]
 800be12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800be1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be22:	b29b      	uxth	r3, r3
 800be24:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800be26:	687a      	ldr	r2, [r7, #4]
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	009b      	lsls	r3, r3, #2
 800be2e:	4413      	add	r3, r2
 800be30:	881b      	ldrh	r3, [r3, #0]
 800be32:	b29b      	uxth	r3, r3
 800be34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be3c:	83fb      	strh	r3, [r7, #30]
 800be3e:	8bfb      	ldrh	r3, [r7, #30]
 800be40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800be44:	83fb      	strh	r3, [r7, #30]
 800be46:	8bfb      	ldrh	r3, [r7, #30]
 800be48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800be4c:	83fb      	strh	r3, [r7, #30]
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	441a      	add	r2, r3
 800be58:	8bfb      	ldrh	r3, [r7, #30]
 800be5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	8013      	strh	r3, [r2, #0]
 800be6e:	e1c9      	b.n	800c204 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	78db      	ldrb	r3, [r3, #3]
 800be74:	2b02      	cmp	r3, #2
 800be76:	d11e      	bne.n	800beb6 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	4413      	add	r3, r2
 800be82:	881b      	ldrh	r3, [r3, #0]
 800be84:	b29b      	uxth	r3, r3
 800be86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be8e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	441a      	add	r2, r3
 800be9c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800bea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bea8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800beac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	8013      	strh	r3, [r2, #0]
 800beb4:	e01d      	b.n	800bef2 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	4413      	add	r3, r2
 800bec0:	881b      	ldrh	r3, [r3, #0]
 800bec2:	b29b      	uxth	r3, r3
 800bec4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800bec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800becc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	441a      	add	r2, r3
 800beda:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800bede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800beea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800beee:	b29b      	uxth	r3, r3
 800bef0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800befc:	b29b      	uxth	r3, r3
 800befe:	461a      	mov	r2, r3
 800bf00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf02:	4413      	add	r3, r2
 800bf04:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	00da      	lsls	r2, r3, #3
 800bf0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf0e:	4413      	add	r3, r2
 800bf10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf14:	65bb      	str	r3, [r7, #88]	; 0x58
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	891b      	ldrh	r3, [r3, #8]
 800bf1a:	085b      	lsrs	r3, r3, #1
 800bf1c:	b29b      	uxth	r3, r3
 800bf1e:	005b      	lsls	r3, r3, #1
 800bf20:	b29a      	uxth	r2, r3
 800bf22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf24:	801a      	strh	r2, [r3, #0]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	657b      	str	r3, [r7, #84]	; 0x54
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf30:	b29b      	uxth	r3, r3
 800bf32:	461a      	mov	r2, r3
 800bf34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf36:	4413      	add	r3, r2
 800bf38:	657b      	str	r3, [r7, #84]	; 0x54
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	00da      	lsls	r2, r3, #3
 800bf40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf42:	4413      	add	r3, r2
 800bf44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bf48:	653b      	str	r3, [r7, #80]	; 0x50
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	895b      	ldrh	r3, [r3, #10]
 800bf4e:	085b      	lsrs	r3, r3, #1
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	005b      	lsls	r3, r3, #1
 800bf54:	b29a      	uxth	r2, r3
 800bf56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf58:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	785b      	ldrb	r3, [r3, #1]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	f040 8093 	bne.w	800c08a <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	4413      	add	r3, r2
 800bf6e:	881b      	ldrh	r3, [r3, #0]
 800bf70:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800bf74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bf78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d01b      	beq.n	800bfb8 <USB_ActivateEndpoint+0x4cc>
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	4413      	add	r3, r2
 800bf8a:	881b      	ldrh	r3, [r3, #0]
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf96:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800bf98:	687a      	ldr	r2, [r7, #4]
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	009b      	lsls	r3, r3, #2
 800bfa0:	441a      	add	r2, r3
 800bfa2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bfa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bfa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bfac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bfb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bfb8:	687a      	ldr	r2, [r7, #4]
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	4413      	add	r3, r2
 800bfc2:	881b      	ldrh	r3, [r3, #0]
 800bfc4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800bfc6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bfc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d01b      	beq.n	800c008 <USB_ActivateEndpoint+0x51c>
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	009b      	lsls	r3, r3, #2
 800bfd8:	4413      	add	r3, r2
 800bfda:	881b      	ldrh	r3, [r3, #0]
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bfe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfe6:	877b      	strh	r3, [r7, #58]	; 0x3a
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	441a      	add	r2, r3
 800bff2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c000:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c004:	b29b      	uxth	r3, r3
 800c006:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	4413      	add	r3, r2
 800c012:	881b      	ldrh	r3, [r3, #0]
 800c014:	b29b      	uxth	r3, r3
 800c016:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c01a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c01e:	873b      	strh	r3, [r7, #56]	; 0x38
 800c020:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c022:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c026:	873b      	strh	r3, [r7, #56]	; 0x38
 800c028:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c02a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c02e:	873b      	strh	r3, [r7, #56]	; 0x38
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	441a      	add	r2, r3
 800c03a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c03c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c040:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	4413      	add	r3, r2
 800c05a:	881b      	ldrh	r3, [r3, #0]
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c066:	86fb      	strh	r3, [r7, #54]	; 0x36
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	009b      	lsls	r3, r3, #2
 800c070:	441a      	add	r2, r3
 800c072:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c07c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c084:	b29b      	uxth	r3, r3
 800c086:	8013      	strh	r3, [r2, #0]
 800c088:	e0bc      	b.n	800c204 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	009b      	lsls	r3, r3, #2
 800c092:	4413      	add	r3, r2
 800c094:	881b      	ldrh	r3, [r3, #0]
 800c096:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800c09a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c09e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d01d      	beq.n	800c0e2 <USB_ActivateEndpoint+0x5f6>
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	009b      	lsls	r3, r3, #2
 800c0ae:	4413      	add	r3, r2
 800c0b0:	881b      	ldrh	r3, [r3, #0]
 800c0b2:	b29b      	uxth	r3, r3
 800c0b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0bc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	441a      	add	r2, r3
 800c0ca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c0ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c0da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	4413      	add	r3, r2
 800c0ec:	881b      	ldrh	r3, [r3, #0]
 800c0ee:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c0f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c0f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d01d      	beq.n	800c13a <USB_ActivateEndpoint+0x64e>
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	4413      	add	r3, r2
 800c108:	881b      	ldrh	r3, [r3, #0]
 800c10a:	b29b      	uxth	r3, r3
 800c10c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c114:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	441a      	add	r2, r3
 800c122:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c12a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c12e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c132:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c136:	b29b      	uxth	r3, r3
 800c138:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	78db      	ldrb	r3, [r3, #3]
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d024      	beq.n	800c18c <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	009b      	lsls	r3, r3, #2
 800c14a:	4413      	add	r3, r2
 800c14c:	881b      	ldrh	r3, [r3, #0]
 800c14e:	b29b      	uxth	r3, r3
 800c150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c154:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c158:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c15c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c160:	f083 0320 	eor.w	r3, r3, #32
 800c164:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	441a      	add	r2, r3
 800c172:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c17a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c17e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c186:	b29b      	uxth	r3, r3
 800c188:	8013      	strh	r3, [r2, #0]
 800c18a:	e01d      	b.n	800c1c8 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c18c:	687a      	ldr	r2, [r7, #4]
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	4413      	add	r3, r2
 800c196:	881b      	ldrh	r3, [r3, #0]
 800c198:	b29b      	uxth	r3, r3
 800c19a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c19e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	441a      	add	r2, r3
 800c1b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c1b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c1b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c1bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c1c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c1c8:	687a      	ldr	r2, [r7, #4]
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	4413      	add	r3, r2
 800c1d2:	881b      	ldrh	r3, [r3, #0]
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c1da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	441a      	add	r2, r3
 800c1ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c1f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c1f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c1f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c1fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c200:	b29b      	uxth	r3, r3
 800c202:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c204:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3774      	adds	r7, #116	; 0x74
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr

0800c214 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c214:	b480      	push	{r7}
 800c216:	b08d      	sub	sp, #52	; 0x34
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	7b1b      	ldrb	r3, [r3, #12]
 800c222:	2b00      	cmp	r3, #0
 800c224:	f040 808e 	bne.w	800c344 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	785b      	ldrb	r3, [r3, #1]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d044      	beq.n	800c2ba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	781b      	ldrb	r3, [r3, #0]
 800c236:	009b      	lsls	r3, r3, #2
 800c238:	4413      	add	r3, r2
 800c23a:	881b      	ldrh	r3, [r3, #0]
 800c23c:	81bb      	strh	r3, [r7, #12]
 800c23e:	89bb      	ldrh	r3, [r7, #12]
 800c240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c244:	2b00      	cmp	r3, #0
 800c246:	d01b      	beq.n	800c280 <USB_DeactivateEndpoint+0x6c>
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	4413      	add	r3, r2
 800c252:	881b      	ldrh	r3, [r3, #0]
 800c254:	b29b      	uxth	r3, r3
 800c256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c25a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c25e:	817b      	strh	r3, [r7, #10]
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	009b      	lsls	r3, r3, #2
 800c268:	441a      	add	r2, r3
 800c26a:	897b      	ldrh	r3, [r7, #10]
 800c26c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c278:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c27c:	b29b      	uxth	r3, r3
 800c27e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	4413      	add	r3, r2
 800c28a:	881b      	ldrh	r3, [r3, #0]
 800c28c:	b29b      	uxth	r3, r3
 800c28e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c296:	813b      	strh	r3, [r7, #8]
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	009b      	lsls	r3, r3, #2
 800c2a0:	441a      	add	r2, r3
 800c2a2:	893b      	ldrh	r3, [r7, #8]
 800c2a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c2a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c2ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	8013      	strh	r3, [r2, #0]
 800c2b8:	e192      	b.n	800c5e0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	4413      	add	r3, r2
 800c2c4:	881b      	ldrh	r3, [r3, #0]
 800c2c6:	827b      	strh	r3, [r7, #18]
 800c2c8:	8a7b      	ldrh	r3, [r7, #18]
 800c2ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d01b      	beq.n	800c30a <USB_DeactivateEndpoint+0xf6>
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	4413      	add	r3, r2
 800c2dc:	881b      	ldrh	r3, [r3, #0]
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c2e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2e8:	823b      	strh	r3, [r7, #16]
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	009b      	lsls	r3, r3, #2
 800c2f2:	441a      	add	r2, r3
 800c2f4:	8a3b      	ldrh	r3, [r7, #16]
 800c2f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c2fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c2fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c306:	b29b      	uxth	r3, r3
 800c308:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	4413      	add	r3, r2
 800c314:	881b      	ldrh	r3, [r3, #0]
 800c316:	b29b      	uxth	r3, r3
 800c318:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c31c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c320:	81fb      	strh	r3, [r7, #14]
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	441a      	add	r2, r3
 800c32c:	89fb      	ldrh	r3, [r7, #14]
 800c32e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c33a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c33e:	b29b      	uxth	r3, r3
 800c340:	8013      	strh	r3, [r2, #0]
 800c342:	e14d      	b.n	800c5e0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	785b      	ldrb	r3, [r3, #1]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	f040 80a5 	bne.w	800c498 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	4413      	add	r3, r2
 800c358:	881b      	ldrh	r3, [r3, #0]
 800c35a:	843b      	strh	r3, [r7, #32]
 800c35c:	8c3b      	ldrh	r3, [r7, #32]
 800c35e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c362:	2b00      	cmp	r3, #0
 800c364:	d01b      	beq.n	800c39e <USB_DeactivateEndpoint+0x18a>
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	009b      	lsls	r3, r3, #2
 800c36e:	4413      	add	r3, r2
 800c370:	881b      	ldrh	r3, [r3, #0]
 800c372:	b29b      	uxth	r3, r3
 800c374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c37c:	83fb      	strh	r3, [r7, #30]
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	441a      	add	r2, r3
 800c388:	8bfb      	ldrh	r3, [r7, #30]
 800c38a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c38e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c392:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	4413      	add	r3, r2
 800c3a8:	881b      	ldrh	r3, [r3, #0]
 800c3aa:	83bb      	strh	r3, [r7, #28]
 800c3ac:	8bbb      	ldrh	r3, [r7, #28]
 800c3ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d01b      	beq.n	800c3ee <USB_DeactivateEndpoint+0x1da>
 800c3b6:	687a      	ldr	r2, [r7, #4]
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	009b      	lsls	r3, r3, #2
 800c3be:	4413      	add	r3, r2
 800c3c0:	881b      	ldrh	r3, [r3, #0]
 800c3c2:	b29b      	uxth	r3, r3
 800c3c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3cc:	837b      	strh	r3, [r7, #26]
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	009b      	lsls	r3, r3, #2
 800c3d6:	441a      	add	r2, r3
 800c3d8:	8b7b      	ldrh	r3, [r7, #26]
 800c3da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c3de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c3e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	781b      	ldrb	r3, [r3, #0]
 800c3f4:	009b      	lsls	r3, r3, #2
 800c3f6:	4413      	add	r3, r2
 800c3f8:	881b      	ldrh	r3, [r3, #0]
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c404:	833b      	strh	r3, [r7, #24]
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	441a      	add	r2, r3
 800c410:	8b3b      	ldrh	r3, [r7, #24]
 800c412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c41a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c41e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c422:	b29b      	uxth	r3, r3
 800c424:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	009b      	lsls	r3, r3, #2
 800c42e:	4413      	add	r3, r2
 800c430:	881b      	ldrh	r3, [r3, #0]
 800c432:	b29b      	uxth	r3, r3
 800c434:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c43c:	82fb      	strh	r3, [r7, #22]
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	009b      	lsls	r3, r3, #2
 800c446:	441a      	add	r2, r3
 800c448:	8afb      	ldrh	r3, [r7, #22]
 800c44a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c44e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	4413      	add	r3, r2
 800c468:	881b      	ldrh	r3, [r3, #0]
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c474:	82bb      	strh	r3, [r7, #20]
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	441a      	add	r2, r3
 800c480:	8abb      	ldrh	r3, [r7, #20]
 800c482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c48a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c48e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c492:	b29b      	uxth	r3, r3
 800c494:	8013      	strh	r3, [r2, #0]
 800c496:	e0a3      	b.n	800c5e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	4413      	add	r3, r2
 800c4a2:	881b      	ldrh	r3, [r3, #0]
 800c4a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c4a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c4a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d01b      	beq.n	800c4e8 <USB_DeactivateEndpoint+0x2d4>
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	4413      	add	r3, r2
 800c4ba:	881b      	ldrh	r3, [r3, #0]
 800c4bc:	b29b      	uxth	r3, r3
 800c4be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	441a      	add	r2, r3
 800c4d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c4d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c4d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c4e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	009b      	lsls	r3, r3, #2
 800c4f0:	4413      	add	r3, r2
 800c4f2:	881b      	ldrh	r3, [r3, #0]
 800c4f4:	857b      	strh	r3, [r7, #42]	; 0x2a
 800c4f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c4f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d01b      	beq.n	800c538 <USB_DeactivateEndpoint+0x324>
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	4413      	add	r3, r2
 800c50a:	881b      	ldrh	r3, [r3, #0]
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c516:	853b      	strh	r3, [r7, #40]	; 0x28
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	009b      	lsls	r3, r3, #2
 800c520:	441a      	add	r2, r3
 800c522:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c52c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c530:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c534:	b29b      	uxth	r3, r3
 800c536:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	4413      	add	r3, r2
 800c542:	881b      	ldrh	r3, [r3, #0]
 800c544:	b29b      	uxth	r3, r3
 800c546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c54a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c54e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	009b      	lsls	r3, r3, #2
 800c558:	441a      	add	r2, r3
 800c55a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c55c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c564:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c56c:	b29b      	uxth	r3, r3
 800c56e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	009b      	lsls	r3, r3, #2
 800c578:	4413      	add	r3, r2
 800c57a:	881b      	ldrh	r3, [r3, #0]
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c586:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	009b      	lsls	r3, r3, #2
 800c590:	441a      	add	r2, r3
 800c592:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c59c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	4413      	add	r3, r2
 800c5b2:	881b      	ldrh	r3, [r3, #0]
 800c5b4:	b29b      	uxth	r3, r3
 800c5b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c5ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5be:	847b      	strh	r3, [r7, #34]	; 0x22
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	009b      	lsls	r3, r3, #2
 800c5c8:	441a      	add	r2, r3
 800c5ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c5cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c5e0:	2300      	movs	r3, #0
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3734      	adds	r7, #52	; 0x34
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr

0800c5ee <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c5ee:	b580      	push	{r7, lr}
 800c5f0:	b0c2      	sub	sp, #264	; 0x108
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5fc:	6018      	str	r0, [r3, #0]
 800c5fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c606:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c60c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	785b      	ldrb	r3, [r3, #1]
 800c614:	2b01      	cmp	r3, #1
 800c616:	f040 867b 	bne.w	800d310 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c61a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c61e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	699a      	ldr	r2, [r3, #24]
 800c626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c62a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	691b      	ldr	r3, [r3, #16]
 800c632:	429a      	cmp	r2, r3
 800c634:	d908      	bls.n	800c648 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800c636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c63a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	691b      	ldr	r3, [r3, #16]
 800c642:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c646:	e007      	b.n	800c658 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800c648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c64c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	699b      	ldr	r3, [r3, #24]
 800c654:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c65c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	7b1b      	ldrb	r3, [r3, #12]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d13a      	bne.n	800c6de <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c66c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	6959      	ldr	r1, [r3, #20]
 800c674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	88da      	ldrh	r2, [r3, #6]
 800c680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c684:	b29b      	uxth	r3, r3
 800c686:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c68a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c68e:	6800      	ldr	r0, [r0, #0]
 800c690:	f001 fc1d 	bl	800dece <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c698:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	613b      	str	r3, [r7, #16]
 800c6a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	4413      	add	r3, r2
 800c6b6:	613b      	str	r3, [r7, #16]
 800c6b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	00da      	lsls	r2, r3, #3
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	4413      	add	r3, r2
 800c6ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c6ce:	60fb      	str	r3, [r7, #12]
 800c6d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6d4:	b29a      	uxth	r2, r3
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	801a      	strh	r2, [r3, #0]
 800c6da:	f000 bde3 	b.w	800d2a4 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c6de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	78db      	ldrb	r3, [r3, #3]
 800c6ea:	2b02      	cmp	r3, #2
 800c6ec:	f040 843a 	bne.w	800cf64 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c6f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	6a1a      	ldr	r2, [r3, #32]
 800c6fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	691b      	ldr	r3, [r3, #16]
 800c708:	429a      	cmp	r2, r3
 800c70a:	f240 83b7 	bls.w	800ce7c <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c70e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c712:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c716:	681a      	ldr	r2, [r3, #0]
 800c718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c71c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	4413      	add	r3, r2
 800c728:	881b      	ldrh	r3, [r3, #0]
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c734:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800c738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c73c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c740:	681a      	ldr	r2, [r3, #0]
 800c742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	009b      	lsls	r3, r3, #2
 800c750:	441a      	add	r2, r3
 800c752:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c756:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c75a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c75e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800c762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c766:	b29b      	uxth	r3, r3
 800c768:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c76a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c76e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	6a1a      	ldr	r2, [r3, #32]
 800c776:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c77a:	1ad2      	subs	r2, r2, r3
 800c77c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c78c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c790:	681a      	ldr	r2, [r3, #0]
 800c792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	781b      	ldrb	r3, [r3, #0]
 800c79e:	009b      	lsls	r3, r3, #2
 800c7a0:	4413      	add	r3, r2
 800c7a2:	881b      	ldrh	r3, [r3, #0]
 800c7a4:	b29b      	uxth	r3, r3
 800c7a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	f000 81b3 	beq.w	800cb16 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c7b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	633b      	str	r3, [r7, #48]	; 0x30
 800c7bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	785b      	ldrb	r3, [r3, #1]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d16d      	bne.n	800c8a8 <USB_EPStartXfer+0x2ba>
 800c7cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c7d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ec:	4413      	add	r3, r2
 800c7ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800c7f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	00da      	lsls	r2, r3, #3
 800c7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c800:	4413      	add	r3, r2
 800c802:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c806:	627b      	str	r3, [r7, #36]	; 0x24
 800c808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c80c:	2b3e      	cmp	r3, #62	; 0x3e
 800c80e:	d91c      	bls.n	800c84a <USB_EPStartXfer+0x25c>
 800c810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c814:	095b      	lsrs	r3, r3, #5
 800c816:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c81a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c81e:	f003 031f 	and.w	r3, r3, #31
 800c822:	2b00      	cmp	r3, #0
 800c824:	d104      	bne.n	800c830 <USB_EPStartXfer+0x242>
 800c826:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c82a:	3b01      	subs	r3, #1
 800c82c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c830:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c834:	b29b      	uxth	r3, r3
 800c836:	029b      	lsls	r3, r3, #10
 800c838:	b29b      	uxth	r3, r3
 800c83a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c83e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c842:	b29a      	uxth	r2, r3
 800c844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c846:	801a      	strh	r2, [r3, #0]
 800c848:	e053      	b.n	800c8f2 <USB_EPStartXfer+0x304>
 800c84a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d112      	bne.n	800c878 <USB_EPStartXfer+0x28a>
 800c852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c854:	881b      	ldrh	r3, [r3, #0]
 800c856:	b29b      	uxth	r3, r3
 800c858:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c85c:	b29a      	uxth	r2, r3
 800c85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c860:	801a      	strh	r2, [r3, #0]
 800c862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c864:	881b      	ldrh	r3, [r3, #0]
 800c866:	b29b      	uxth	r3, r3
 800c868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c86c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c870:	b29a      	uxth	r2, r3
 800c872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c874:	801a      	strh	r2, [r3, #0]
 800c876:	e03c      	b.n	800c8f2 <USB_EPStartXfer+0x304>
 800c878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c87c:	085b      	lsrs	r3, r3, #1
 800c87e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c886:	f003 0301 	and.w	r3, r3, #1
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d004      	beq.n	800c898 <USB_EPStartXfer+0x2aa>
 800c88e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c892:	3301      	adds	r3, #1
 800c894:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c898:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	029b      	lsls	r3, r3, #10
 800c8a0:	b29a      	uxth	r2, r3
 800c8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a4:	801a      	strh	r2, [r3, #0]
 800c8a6:	e024      	b.n	800c8f2 <USB_EPStartXfer+0x304>
 800c8a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	785b      	ldrb	r3, [r3, #1]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d11c      	bne.n	800c8f2 <USB_EPStartXfer+0x304>
 800c8b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8cc:	4413      	add	r3, r2
 800c8ce:	633b      	str	r3, [r7, #48]	; 0x30
 800c8d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	00da      	lsls	r2, r3, #3
 800c8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e0:	4413      	add	r3, r2
 800c8e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c8e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8ec:	b29a      	uxth	r2, r3
 800c8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c8f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	895b      	ldrh	r3, [r3, #10]
 800c8fe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	6959      	ldr	r1, [r3, #20]
 800c90e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c912:	b29b      	uxth	r3, r3
 800c914:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c918:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c91c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c920:	6800      	ldr	r0, [r0, #0]
 800c922:	f001 fad4 	bl	800dece <USB_WritePMA>
            ep->xfer_buff += len;
 800c926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c92a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	695a      	ldr	r2, [r3, #20]
 800c932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c936:	441a      	add	r2, r3
 800c938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c93c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	6a1a      	ldr	r2, [r3, #32]
 800c950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	691b      	ldr	r3, [r3, #16]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d90f      	bls.n	800c980 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800c960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	6a1a      	ldr	r2, [r3, #32]
 800c96c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c970:	1ad2      	subs	r2, r2, r3
 800c972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	621a      	str	r2, [r3, #32]
 800c97e:	e00e      	b.n	800c99e <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800c980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	6a1b      	ldr	r3, [r3, #32]
 800c98c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800c990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	2200      	movs	r2, #0
 800c99c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c99e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	785b      	ldrb	r3, [r3, #1]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d16d      	bne.n	800ca8a <USB_EPStartXfer+0x49c>
 800c9ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	61bb      	str	r3, [r7, #24]
 800c9ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	69bb      	ldr	r3, [r7, #24]
 800c9ce:	4413      	add	r3, r2
 800c9d0:	61bb      	str	r3, [r7, #24]
 800c9d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	00da      	lsls	r2, r3, #3
 800c9e0:	69bb      	ldr	r3, [r7, #24]
 800c9e2:	4413      	add	r3, r2
 800c9e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c9e8:	617b      	str	r3, [r7, #20]
 800c9ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9ee:	2b3e      	cmp	r3, #62	; 0x3e
 800c9f0:	d91c      	bls.n	800ca2c <USB_EPStartXfer+0x43e>
 800c9f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9f6:	095b      	lsrs	r3, r3, #5
 800c9f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c9fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca00:	f003 031f 	and.w	r3, r3, #31
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d104      	bne.n	800ca12 <USB_EPStartXfer+0x424>
 800ca08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca0c:	3b01      	subs	r3, #1
 800ca0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ca12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	029b      	lsls	r3, r3, #10
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca24:	b29a      	uxth	r2, r3
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	801a      	strh	r2, [r3, #0]
 800ca2a:	e059      	b.n	800cae0 <USB_EPStartXfer+0x4f2>
 800ca2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d112      	bne.n	800ca5a <USB_EPStartXfer+0x46c>
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	881b      	ldrh	r3, [r3, #0]
 800ca38:	b29b      	uxth	r3, r3
 800ca3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ca3e:	b29a      	uxth	r2, r3
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	801a      	strh	r2, [r3, #0]
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	881b      	ldrh	r3, [r3, #0]
 800ca48:	b29b      	uxth	r3, r3
 800ca4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca52:	b29a      	uxth	r2, r3
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	801a      	strh	r2, [r3, #0]
 800ca58:	e042      	b.n	800cae0 <USB_EPStartXfer+0x4f2>
 800ca5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca5e:	085b      	lsrs	r3, r3, #1
 800ca60:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ca64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca68:	f003 0301 	and.w	r3, r3, #1
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d004      	beq.n	800ca7a <USB_EPStartXfer+0x48c>
 800ca70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca74:	3301      	adds	r3, #1
 800ca76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ca7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca7e:	b29b      	uxth	r3, r3
 800ca80:	029b      	lsls	r3, r3, #10
 800ca82:	b29a      	uxth	r2, r3
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	801a      	strh	r2, [r3, #0]
 800ca88:	e02a      	b.n	800cae0 <USB_EPStartXfer+0x4f2>
 800ca8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	785b      	ldrb	r3, [r3, #1]
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	d122      	bne.n	800cae0 <USB_EPStartXfer+0x4f2>
 800ca9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	623b      	str	r3, [r7, #32]
 800caa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800caaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cab4:	b29b      	uxth	r3, r3
 800cab6:	461a      	mov	r2, r3
 800cab8:	6a3b      	ldr	r3, [r7, #32]
 800caba:	4413      	add	r3, r2
 800cabc:	623b      	str	r3, [r7, #32]
 800cabe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	00da      	lsls	r2, r3, #3
 800cacc:	6a3b      	ldr	r3, [r7, #32]
 800cace:	4413      	add	r3, r2
 800cad0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cad4:	61fb      	str	r3, [r7, #28]
 800cad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cada:	b29a      	uxth	r2, r3
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	891b      	ldrh	r3, [r3, #8]
 800caec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800caf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800caf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	6959      	ldr	r1, [r3, #20]
 800cafc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cb06:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cb0a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800cb0e:	6800      	ldr	r0, [r0, #0]
 800cb10:	f001 f9dd 	bl	800dece <USB_WritePMA>
 800cb14:	e3c6      	b.n	800d2a4 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cb16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	785b      	ldrb	r3, [r3, #1]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d16d      	bne.n	800cc02 <USB_EPStartXfer+0x614>
 800cb26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	461a      	mov	r2, r3
 800cb44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb46:	4413      	add	r3, r2
 800cb48:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	00da      	lsls	r2, r3, #3
 800cb58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb5a:	4413      	add	r3, r2
 800cb5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cb60:	647b      	str	r3, [r7, #68]	; 0x44
 800cb62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb66:	2b3e      	cmp	r3, #62	; 0x3e
 800cb68:	d91c      	bls.n	800cba4 <USB_EPStartXfer+0x5b6>
 800cb6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb6e:	095b      	lsrs	r3, r3, #5
 800cb70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cb74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb78:	f003 031f 	and.w	r3, r3, #31
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d104      	bne.n	800cb8a <USB_EPStartXfer+0x59c>
 800cb80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cb84:	3b01      	subs	r3, #1
 800cb86:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cb8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cb8e:	b29b      	uxth	r3, r3
 800cb90:	029b      	lsls	r3, r3, #10
 800cb92:	b29b      	uxth	r3, r3
 800cb94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb9c:	b29a      	uxth	r2, r3
 800cb9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cba0:	801a      	strh	r2, [r3, #0]
 800cba2:	e059      	b.n	800cc58 <USB_EPStartXfer+0x66a>
 800cba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d112      	bne.n	800cbd2 <USB_EPStartXfer+0x5e4>
 800cbac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbae:	881b      	ldrh	r3, [r3, #0]
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cbb6:	b29a      	uxth	r2, r3
 800cbb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbba:	801a      	strh	r2, [r3, #0]
 800cbbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbbe:	881b      	ldrh	r3, [r3, #0]
 800cbc0:	b29b      	uxth	r3, r3
 800cbc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cbc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbca:	b29a      	uxth	r2, r3
 800cbcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbce:	801a      	strh	r2, [r3, #0]
 800cbd0:	e042      	b.n	800cc58 <USB_EPStartXfer+0x66a>
 800cbd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbd6:	085b      	lsrs	r3, r3, #1
 800cbd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cbdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbe0:	f003 0301 	and.w	r3, r3, #1
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d004      	beq.n	800cbf2 <USB_EPStartXfer+0x604>
 800cbe8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cbec:	3301      	adds	r3, #1
 800cbee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cbf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cbf6:	b29b      	uxth	r3, r3
 800cbf8:	029b      	lsls	r3, r3, #10
 800cbfa:	b29a      	uxth	r2, r3
 800cbfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbfe:	801a      	strh	r2, [r3, #0]
 800cc00:	e02a      	b.n	800cc58 <USB_EPStartXfer+0x66a>
 800cc02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	785b      	ldrb	r3, [r3, #1]
 800cc0e:	2b01      	cmp	r3, #1
 800cc10:	d122      	bne.n	800cc58 <USB_EPStartXfer+0x66a>
 800cc12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	653b      	str	r3, [r7, #80]	; 0x50
 800cc1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc2c:	b29b      	uxth	r3, r3
 800cc2e:	461a      	mov	r2, r3
 800cc30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc32:	4413      	add	r3, r2
 800cc34:	653b      	str	r3, [r7, #80]	; 0x50
 800cc36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	781b      	ldrb	r3, [r3, #0]
 800cc42:	00da      	lsls	r2, r3, #3
 800cc44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc46:	4413      	add	r3, r2
 800cc48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cc4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc52:	b29a      	uxth	r2, r3
 800cc54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc56:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cc58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	891b      	ldrh	r3, [r3, #8]
 800cc64:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cc68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	6959      	ldr	r1, [r3, #20]
 800cc74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cc7e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cc82:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800cc86:	6800      	ldr	r0, [r0, #0]
 800cc88:	f001 f921 	bl	800dece <USB_WritePMA>
            ep->xfer_buff += len;
 800cc8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	695a      	ldr	r2, [r3, #20]
 800cc98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc9c:	441a      	add	r2, r3
 800cc9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ccaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	6a1a      	ldr	r2, [r3, #32]
 800ccb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	691b      	ldr	r3, [r3, #16]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d90f      	bls.n	800cce6 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800ccc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	6a1a      	ldr	r2, [r3, #32]
 800ccd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccd6:	1ad2      	subs	r2, r2, r3
 800ccd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	621a      	str	r2, [r3, #32]
 800cce4:	e00e      	b.n	800cd04 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800cce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	6a1b      	ldr	r3, [r3, #32]
 800ccf2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800ccf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	2200      	movs	r2, #0
 800cd02:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cd04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	643b      	str	r3, [r7, #64]	; 0x40
 800cd10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	785b      	ldrb	r3, [r3, #1]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d16d      	bne.n	800cdfc <USB_EPStartXfer+0x80e>
 800cd20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	461a      	mov	r2, r3
 800cd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd40:	4413      	add	r3, r2
 800cd42:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	00da      	lsls	r2, r3, #3
 800cd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd54:	4413      	add	r3, r2
 800cd56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cd5a:	637b      	str	r3, [r7, #52]	; 0x34
 800cd5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd60:	2b3e      	cmp	r3, #62	; 0x3e
 800cd62:	d91c      	bls.n	800cd9e <USB_EPStartXfer+0x7b0>
 800cd64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd68:	095b      	lsrs	r3, r3, #5
 800cd6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cd6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd72:	f003 031f 	and.w	r3, r3, #31
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d104      	bne.n	800cd84 <USB_EPStartXfer+0x796>
 800cd7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd7e:	3b01      	subs	r3, #1
 800cd80:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cd84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	029b      	lsls	r3, r3, #10
 800cd8c:	b29b      	uxth	r3, r3
 800cd8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd96:	b29a      	uxth	r2, r3
 800cd98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd9a:	801a      	strh	r2, [r3, #0]
 800cd9c:	e053      	b.n	800ce46 <USB_EPStartXfer+0x858>
 800cd9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d112      	bne.n	800cdcc <USB_EPStartXfer+0x7de>
 800cda6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cda8:	881b      	ldrh	r3, [r3, #0]
 800cdaa:	b29b      	uxth	r3, r3
 800cdac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cdb0:	b29a      	uxth	r2, r3
 800cdb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdb4:	801a      	strh	r2, [r3, #0]
 800cdb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdb8:	881b      	ldrh	r3, [r3, #0]
 800cdba:	b29b      	uxth	r3, r3
 800cdbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdc4:	b29a      	uxth	r2, r3
 800cdc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdc8:	801a      	strh	r2, [r3, #0]
 800cdca:	e03c      	b.n	800ce46 <USB_EPStartXfer+0x858>
 800cdcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdd0:	085b      	lsrs	r3, r3, #1
 800cdd2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cdd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdda:	f003 0301 	and.w	r3, r3, #1
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d004      	beq.n	800cdec <USB_EPStartXfer+0x7fe>
 800cde2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cde6:	3301      	adds	r3, #1
 800cde8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cdec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdf0:	b29b      	uxth	r3, r3
 800cdf2:	029b      	lsls	r3, r3, #10
 800cdf4:	b29a      	uxth	r2, r3
 800cdf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdf8:	801a      	strh	r2, [r3, #0]
 800cdfa:	e024      	b.n	800ce46 <USB_EPStartXfer+0x858>
 800cdfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	785b      	ldrb	r3, [r3, #1]
 800ce08:	2b01      	cmp	r3, #1
 800ce0a:	d11c      	bne.n	800ce46 <USB_EPStartXfer+0x858>
 800ce0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce1a:	b29b      	uxth	r3, r3
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce20:	4413      	add	r3, r2
 800ce22:	643b      	str	r3, [r7, #64]	; 0x40
 800ce24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	00da      	lsls	r2, r3, #3
 800ce32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce34:	4413      	add	r3, r2
 800ce36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ce3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce40:	b29a      	uxth	r2, r3
 800ce42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ce46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	895b      	ldrh	r3, [r3, #10]
 800ce52:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ce56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	6959      	ldr	r1, [r3, #20]
 800ce62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce66:	b29b      	uxth	r3, r3
 800ce68:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ce6c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ce70:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ce74:	6800      	ldr	r0, [r0, #0]
 800ce76:	f001 f82a 	bl	800dece <USB_WritePMA>
 800ce7a:	e213      	b.n	800d2a4 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ce7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	6a1b      	ldr	r3, [r3, #32]
 800ce88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ce8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce94:	681a      	ldr	r2, [r3, #0]
 800ce96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	4413      	add	r3, r2
 800cea6:	881b      	ldrh	r3, [r3, #0]
 800cea8:	b29b      	uxth	r3, r3
 800ceaa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ceae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ceb2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ceb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ceba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cebe:	681a      	ldr	r2, [r3, #0]
 800cec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	441a      	add	r2, r3
 800ced0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ced4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ced8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cedc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cee4:	b29b      	uxth	r3, r3
 800cee6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ceec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cef8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf02:	b29b      	uxth	r3, r3
 800cf04:	461a      	mov	r2, r3
 800cf06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf08:	4413      	add	r3, r2
 800cf0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	00da      	lsls	r2, r3, #3
 800cf1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf1c:	4413      	add	r3, r2
 800cf1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cf22:	65bb      	str	r3, [r7, #88]	; 0x58
 800cf24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf28:	b29a      	uxth	r2, r3
 800cf2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf2c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cf2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	891b      	ldrh	r3, [r3, #8]
 800cf3a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cf3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	6959      	ldr	r1, [r3, #20]
 800cf4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf4e:	b29b      	uxth	r3, r3
 800cf50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cf54:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cf58:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800cf5c:	6800      	ldr	r0, [r0, #0]
 800cf5e:	f000 ffb6 	bl	800dece <USB_WritePMA>
 800cf62:	e19f      	b.n	800d2a4 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800cf64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	6a1a      	ldr	r2, [r3, #32]
 800cf70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf74:	1ad2      	subs	r2, r2, r3
 800cf76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cf82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	009b      	lsls	r3, r3, #2
 800cf9a:	4413      	add	r3, r2
 800cf9c:	881b      	ldrh	r3, [r3, #0]
 800cf9e:	b29b      	uxth	r3, r3
 800cfa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	f000 80bc 	beq.w	800d122 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cfaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	673b      	str	r3, [r7, #112]	; 0x70
 800cfb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	785b      	ldrb	r3, [r3, #1]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d16d      	bne.n	800d0a2 <USB_EPStartXfer+0xab4>
 800cfc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	66bb      	str	r3, [r7, #104]	; 0x68
 800cfd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cfe6:	4413      	add	r3, r2
 800cfe8:	66bb      	str	r3, [r7, #104]	; 0x68
 800cfea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	00da      	lsls	r2, r3, #3
 800cff8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cffa:	4413      	add	r3, r2
 800cffc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d000:	667b      	str	r3, [r7, #100]	; 0x64
 800d002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d006:	2b3e      	cmp	r3, #62	; 0x3e
 800d008:	d91c      	bls.n	800d044 <USB_EPStartXfer+0xa56>
 800d00a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d00e:	095b      	lsrs	r3, r3, #5
 800d010:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d018:	f003 031f 	and.w	r3, r3, #31
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d104      	bne.n	800d02a <USB_EPStartXfer+0xa3c>
 800d020:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d024:	3b01      	subs	r3, #1
 800d026:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d02a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d02e:	b29b      	uxth	r3, r3
 800d030:	029b      	lsls	r3, r3, #10
 800d032:	b29b      	uxth	r3, r3
 800d034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d03c:	b29a      	uxth	r2, r3
 800d03e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d040:	801a      	strh	r2, [r3, #0]
 800d042:	e053      	b.n	800d0ec <USB_EPStartXfer+0xafe>
 800d044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d112      	bne.n	800d072 <USB_EPStartXfer+0xa84>
 800d04c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d04e:	881b      	ldrh	r3, [r3, #0]
 800d050:	b29b      	uxth	r3, r3
 800d052:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d056:	b29a      	uxth	r2, r3
 800d058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d05a:	801a      	strh	r2, [r3, #0]
 800d05c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d05e:	881b      	ldrh	r3, [r3, #0]
 800d060:	b29b      	uxth	r3, r3
 800d062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d06a:	b29a      	uxth	r2, r3
 800d06c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d06e:	801a      	strh	r2, [r3, #0]
 800d070:	e03c      	b.n	800d0ec <USB_EPStartXfer+0xafe>
 800d072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d076:	085b      	lsrs	r3, r3, #1
 800d078:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d080:	f003 0301 	and.w	r3, r3, #1
 800d084:	2b00      	cmp	r3, #0
 800d086:	d004      	beq.n	800d092 <USB_EPStartXfer+0xaa4>
 800d088:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d08c:	3301      	adds	r3, #1
 800d08e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d092:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d096:	b29b      	uxth	r3, r3
 800d098:	029b      	lsls	r3, r3, #10
 800d09a:	b29a      	uxth	r2, r3
 800d09c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d09e:	801a      	strh	r2, [r3, #0]
 800d0a0:	e024      	b.n	800d0ec <USB_EPStartXfer+0xafe>
 800d0a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	785b      	ldrb	r3, [r3, #1]
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d11c      	bne.n	800d0ec <USB_EPStartXfer+0xafe>
 800d0b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d0c0:	b29b      	uxth	r3, r3
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d0c6:	4413      	add	r3, r2
 800d0c8:	673b      	str	r3, [r7, #112]	; 0x70
 800d0ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	00da      	lsls	r2, r3, #3
 800d0d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d0da:	4413      	add	r3, r2
 800d0dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d0e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d0e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0e6:	b29a      	uxth	r2, r3
 800d0e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d0ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	895b      	ldrh	r3, [r3, #10]
 800d0f8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d0fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d100:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	6959      	ldr	r1, [r3, #20]
 800d108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d112:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d116:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d11a:	6800      	ldr	r0, [r0, #0]
 800d11c:	f000 fed7 	bl	800dece <USB_WritePMA>
 800d120:	e0c0      	b.n	800d2a4 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	785b      	ldrb	r3, [r3, #1]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d16d      	bne.n	800d20e <USB_EPStartXfer+0xc20>
 800d132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d136:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d13e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d142:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d14c:	b29b      	uxth	r3, r3
 800d14e:	461a      	mov	r2, r3
 800d150:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d152:	4413      	add	r3, r2
 800d154:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d15a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	00da      	lsls	r2, r3, #3
 800d164:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d166:	4413      	add	r3, r2
 800d168:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d16c:	67bb      	str	r3, [r7, #120]	; 0x78
 800d16e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d172:	2b3e      	cmp	r3, #62	; 0x3e
 800d174:	d91c      	bls.n	800d1b0 <USB_EPStartXfer+0xbc2>
 800d176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d17a:	095b      	lsrs	r3, r3, #5
 800d17c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d184:	f003 031f 	and.w	r3, r3, #31
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d104      	bne.n	800d196 <USB_EPStartXfer+0xba8>
 800d18c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d190:	3b01      	subs	r3, #1
 800d192:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d196:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d19a:	b29b      	uxth	r3, r3
 800d19c:	029b      	lsls	r3, r3, #10
 800d19e:	b29b      	uxth	r3, r3
 800d1a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1a8:	b29a      	uxth	r2, r3
 800d1aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1ac:	801a      	strh	r2, [r3, #0]
 800d1ae:	e05f      	b.n	800d270 <USB_EPStartXfer+0xc82>
 800d1b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d112      	bne.n	800d1de <USB_EPStartXfer+0xbf0>
 800d1b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1ba:	881b      	ldrh	r3, [r3, #0]
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d1c2:	b29a      	uxth	r2, r3
 800d1c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1c6:	801a      	strh	r2, [r3, #0]
 800d1c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1ca:	881b      	ldrh	r3, [r3, #0]
 800d1cc:	b29b      	uxth	r3, r3
 800d1ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1d6:	b29a      	uxth	r2, r3
 800d1d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1da:	801a      	strh	r2, [r3, #0]
 800d1dc:	e048      	b.n	800d270 <USB_EPStartXfer+0xc82>
 800d1de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1e2:	085b      	lsrs	r3, r3, #1
 800d1e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d1e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1ec:	f003 0301 	and.w	r3, r3, #1
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d004      	beq.n	800d1fe <USB_EPStartXfer+0xc10>
 800d1f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d1fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d202:	b29b      	uxth	r3, r3
 800d204:	029b      	lsls	r3, r3, #10
 800d206:	b29a      	uxth	r2, r3
 800d208:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d20a:	801a      	strh	r2, [r3, #0]
 800d20c:	e030      	b.n	800d270 <USB_EPStartXfer+0xc82>
 800d20e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	785b      	ldrb	r3, [r3, #1]
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d128      	bne.n	800d270 <USB_EPStartXfer+0xc82>
 800d21e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d222:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d22c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d230:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	461a      	mov	r2, r3
 800d23e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d242:	4413      	add	r3, r2
 800d244:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d24c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	00da      	lsls	r2, r3, #3
 800d256:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d25a:	4413      	add	r3, r2
 800d25c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d260:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d268:	b29a      	uxth	r2, r3
 800d26a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d26e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	891b      	ldrh	r3, [r3, #8]
 800d27c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	6959      	ldr	r1, [r3, #20]
 800d28c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d290:	b29b      	uxth	r3, r3
 800d292:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d296:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d29a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d29e:	6800      	ldr	r0, [r0, #0]
 800d2a0:	f000 fe15 	bl	800dece <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d2a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	4413      	add	r3, r2
 800d2be:	881b      	ldrh	r3, [r3, #0]
 800d2c0:	b29b      	uxth	r3, r3
 800d2c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d2c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2ca:	817b      	strh	r3, [r7, #10]
 800d2cc:	897b      	ldrh	r3, [r7, #10]
 800d2ce:	f083 0310 	eor.w	r3, r3, #16
 800d2d2:	817b      	strh	r3, [r7, #10]
 800d2d4:	897b      	ldrh	r3, [r7, #10]
 800d2d6:	f083 0320 	eor.w	r3, r3, #32
 800d2da:	817b      	strh	r3, [r7, #10]
 800d2dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d2e4:	681a      	ldr	r2, [r3, #0]
 800d2e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	009b      	lsls	r3, r3, #2
 800d2f4:	441a      	add	r2, r3
 800d2f6:	897b      	ldrh	r3, [r7, #10]
 800d2f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d2fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d308:	b29b      	uxth	r3, r3
 800d30a:	8013      	strh	r3, [r2, #0]
 800d30c:	f000 bc9f 	b.w	800dc4e <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	7b1b      	ldrb	r3, [r3, #12]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	f040 80ae 	bne.w	800d47e <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	699a      	ldr	r2, [r3, #24]
 800d32e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	691b      	ldr	r3, [r3, #16]
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d917      	bls.n	800d36e <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800d33e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	691b      	ldr	r3, [r3, #16]
 800d34a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800d34e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	699a      	ldr	r2, [r3, #24]
 800d35a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d35e:	1ad2      	subs	r2, r2, r3
 800d360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	619a      	str	r2, [r3, #24]
 800d36c:	e00e      	b.n	800d38c <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800d36e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	699b      	ldr	r3, [r3, #24]
 800d37a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800d37e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d382:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	2200      	movs	r2, #0
 800d38a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d38c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d390:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d39a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d39e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d3a8:	b29b      	uxth	r3, r3
 800d3aa:	461a      	mov	r2, r3
 800d3ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d3b0:	4413      	add	r3, r2
 800d3b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d3b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	781b      	ldrb	r3, [r3, #0]
 800d3c2:	00da      	lsls	r2, r3, #3
 800d3c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d3c8:	4413      	add	r3, r2
 800d3ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d3ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d3d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3d6:	2b3e      	cmp	r3, #62	; 0x3e
 800d3d8:	d91d      	bls.n	800d416 <USB_EPStartXfer+0xe28>
 800d3da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3de:	095b      	lsrs	r3, r3, #5
 800d3e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3e8:	f003 031f 	and.w	r3, r3, #31
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d104      	bne.n	800d3fa <USB_EPStartXfer+0xe0c>
 800d3f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d3f4:	3b01      	subs	r3, #1
 800d3f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d3fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d3fe:	b29b      	uxth	r3, r3
 800d400:	029b      	lsls	r3, r3, #10
 800d402:	b29b      	uxth	r3, r3
 800d404:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d408:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d40c:	b29a      	uxth	r2, r3
 800d40e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d412:	801a      	strh	r2, [r3, #0]
 800d414:	e3e1      	b.n	800dbda <USB_EPStartXfer+0x15ec>
 800d416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d116      	bne.n	800d44c <USB_EPStartXfer+0xe5e>
 800d41e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d422:	881b      	ldrh	r3, [r3, #0]
 800d424:	b29b      	uxth	r3, r3
 800d426:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d42a:	b29a      	uxth	r2, r3
 800d42c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d430:	801a      	strh	r2, [r3, #0]
 800d432:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d436:	881b      	ldrh	r3, [r3, #0]
 800d438:	b29b      	uxth	r3, r3
 800d43a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d43e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d442:	b29a      	uxth	r2, r3
 800d444:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d448:	801a      	strh	r2, [r3, #0]
 800d44a:	e3c6      	b.n	800dbda <USB_EPStartXfer+0x15ec>
 800d44c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d450:	085b      	lsrs	r3, r3, #1
 800d452:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d45a:	f003 0301 	and.w	r3, r3, #1
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d004      	beq.n	800d46c <USB_EPStartXfer+0xe7e>
 800d462:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d466:	3301      	adds	r3, #1
 800d468:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d46c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d470:	b29b      	uxth	r3, r3
 800d472:	029b      	lsls	r3, r3, #10
 800d474:	b29a      	uxth	r2, r3
 800d476:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d47a:	801a      	strh	r2, [r3, #0]
 800d47c:	e3ad      	b.n	800dbda <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d47e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	78db      	ldrb	r3, [r3, #3]
 800d48a:	2b02      	cmp	r3, #2
 800d48c:	f040 8200 	bne.w	800d890 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	785b      	ldrb	r3, [r3, #1]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	f040 8091 	bne.w	800d5c4 <USB_EPStartXfer+0xfd6>
 800d4a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d4b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d4c6:	4413      	add	r3, r2
 800d4c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d4cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	00da      	lsls	r2, r3, #3
 800d4da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d4de:	4413      	add	r3, r2
 800d4e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d4e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d4e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	691b      	ldr	r3, [r3, #16]
 800d4f4:	2b3e      	cmp	r3, #62	; 0x3e
 800d4f6:	d925      	bls.n	800d544 <USB_EPStartXfer+0xf56>
 800d4f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	691b      	ldr	r3, [r3, #16]
 800d504:	095b      	lsrs	r3, r3, #5
 800d506:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d50a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d50e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	691b      	ldr	r3, [r3, #16]
 800d516:	f003 031f 	and.w	r3, r3, #31
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d104      	bne.n	800d528 <USB_EPStartXfer+0xf3a>
 800d51e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d522:	3b01      	subs	r3, #1
 800d524:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	029b      	lsls	r3, r3, #10
 800d530:	b29b      	uxth	r3, r3
 800d532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d53a:	b29a      	uxth	r2, r3
 800d53c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d540:	801a      	strh	r2, [r3, #0]
 800d542:	e074      	b.n	800d62e <USB_EPStartXfer+0x1040>
 800d544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	691b      	ldr	r3, [r3, #16]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d116      	bne.n	800d582 <USB_EPStartXfer+0xf94>
 800d554:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d558:	881b      	ldrh	r3, [r3, #0]
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d560:	b29a      	uxth	r2, r3
 800d562:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d566:	801a      	strh	r2, [r3, #0]
 800d568:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d56c:	881b      	ldrh	r3, [r3, #0]
 800d56e:	b29b      	uxth	r3, r3
 800d570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d578:	b29a      	uxth	r2, r3
 800d57a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d57e:	801a      	strh	r2, [r3, #0]
 800d580:	e055      	b.n	800d62e <USB_EPStartXfer+0x1040>
 800d582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	691b      	ldr	r3, [r3, #16]
 800d58e:	085b      	lsrs	r3, r3, #1
 800d590:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	691b      	ldr	r3, [r3, #16]
 800d5a0:	f003 0301 	and.w	r3, r3, #1
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d004      	beq.n	800d5b2 <USB_EPStartXfer+0xfc4>
 800d5a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d5b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5b6:	b29b      	uxth	r3, r3
 800d5b8:	029b      	lsls	r3, r3, #10
 800d5ba:	b29a      	uxth	r2, r3
 800d5bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d5c0:	801a      	strh	r2, [r3, #0]
 800d5c2:	e034      	b.n	800d62e <USB_EPStartXfer+0x1040>
 800d5c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	785b      	ldrb	r3, [r3, #1]
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	d12c      	bne.n	800d62e <USB_EPStartXfer+0x1040>
 800d5d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d5e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	461a      	mov	r2, r3
 800d5f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d5f8:	4413      	add	r3, r2
 800d5fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d5fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	00da      	lsls	r2, r3, #3
 800d60c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d610:	4413      	add	r3, r2
 800d612:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d616:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d61a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d61e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	691b      	ldr	r3, [r3, #16]
 800d626:	b29a      	uxth	r2, r3
 800d628:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d62c:	801a      	strh	r2, [r3, #0]
 800d62e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d63c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	785b      	ldrb	r3, [r3, #1]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	f040 8091 	bne.w	800d770 <USB_EPStartXfer+0x1182>
 800d64e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d652:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d65c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d660:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d66a:	b29b      	uxth	r3, r3
 800d66c:	461a      	mov	r2, r3
 800d66e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d672:	4413      	add	r3, r2
 800d674:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d67c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	00da      	lsls	r2, r3, #3
 800d686:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d68a:	4413      	add	r3, r2
 800d68c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d690:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	691b      	ldr	r3, [r3, #16]
 800d6a0:	2b3e      	cmp	r3, #62	; 0x3e
 800d6a2:	d925      	bls.n	800d6f0 <USB_EPStartXfer+0x1102>
 800d6a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	691b      	ldr	r3, [r3, #16]
 800d6b0:	095b      	lsrs	r3, r3, #5
 800d6b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d6b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	691b      	ldr	r3, [r3, #16]
 800d6c2:	f003 031f 	and.w	r3, r3, #31
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d104      	bne.n	800d6d4 <USB_EPStartXfer+0x10e6>
 800d6ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6ce:	3b01      	subs	r3, #1
 800d6d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d6d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	029b      	lsls	r3, r3, #10
 800d6dc:	b29b      	uxth	r3, r3
 800d6de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6e6:	b29a      	uxth	r2, r3
 800d6e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d6ec:	801a      	strh	r2, [r3, #0]
 800d6ee:	e06d      	b.n	800d7cc <USB_EPStartXfer+0x11de>
 800d6f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	691b      	ldr	r3, [r3, #16]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d116      	bne.n	800d72e <USB_EPStartXfer+0x1140>
 800d700:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d704:	881b      	ldrh	r3, [r3, #0]
 800d706:	b29b      	uxth	r3, r3
 800d708:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d70c:	b29a      	uxth	r2, r3
 800d70e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d712:	801a      	strh	r2, [r3, #0]
 800d714:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d718:	881b      	ldrh	r3, [r3, #0]
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d724:	b29a      	uxth	r2, r3
 800d726:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d72a:	801a      	strh	r2, [r3, #0]
 800d72c:	e04e      	b.n	800d7cc <USB_EPStartXfer+0x11de>
 800d72e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	691b      	ldr	r3, [r3, #16]
 800d73a:	085b      	lsrs	r3, r3, #1
 800d73c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	691b      	ldr	r3, [r3, #16]
 800d74c:	f003 0301 	and.w	r3, r3, #1
 800d750:	2b00      	cmp	r3, #0
 800d752:	d004      	beq.n	800d75e <USB_EPStartXfer+0x1170>
 800d754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d758:	3301      	adds	r3, #1
 800d75a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d75e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d762:	b29b      	uxth	r3, r3
 800d764:	029b      	lsls	r3, r3, #10
 800d766:	b29a      	uxth	r2, r3
 800d768:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d76c:	801a      	strh	r2, [r3, #0]
 800d76e:	e02d      	b.n	800d7cc <USB_EPStartXfer+0x11de>
 800d770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	785b      	ldrb	r3, [r3, #1]
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	d125      	bne.n	800d7cc <USB_EPStartXfer+0x11de>
 800d780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d784:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d78e:	b29b      	uxth	r3, r3
 800d790:	461a      	mov	r2, r3
 800d792:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d796:	4413      	add	r3, r2
 800d798:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d79c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	00da      	lsls	r2, r3, #3
 800d7aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d7ae:	4413      	add	r3, r2
 800d7b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d7b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d7b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	691b      	ldr	r3, [r3, #16]
 800d7c4:	b29a      	uxth	r2, r3
 800d7c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d7ca:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d7cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	69db      	ldr	r3, [r3, #28]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	f000 81fe 	beq.w	800dbda <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d7de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d7e6:	681a      	ldr	r2, [r3, #0]
 800d7e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	781b      	ldrb	r3, [r3, #0]
 800d7f4:	009b      	lsls	r3, r3, #2
 800d7f6:	4413      	add	r3, r2
 800d7f8:	881b      	ldrh	r3, [r3, #0]
 800d7fa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d7fe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d806:	2b00      	cmp	r3, #0
 800d808:	d005      	beq.n	800d816 <USB_EPStartXfer+0x1228>
 800d80a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d80e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d812:	2b00      	cmp	r3, #0
 800d814:	d10d      	bne.n	800d832 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d816:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d81a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d81e:	2b00      	cmp	r3, #0
 800d820:	f040 81db 	bne.w	800dbda <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d824:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	f040 81d4 	bne.w	800dbda <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d836:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d83a:	681a      	ldr	r2, [r3, #0]
 800d83c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	009b      	lsls	r3, r3, #2
 800d84a:	4413      	add	r3, r2
 800d84c:	881b      	ldrh	r3, [r3, #0]
 800d84e:	b29b      	uxth	r3, r3
 800d850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d858:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800d85c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d860:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d864:	681a      	ldr	r2, [r3, #0]
 800d866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d86a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	781b      	ldrb	r3, [r3, #0]
 800d872:	009b      	lsls	r3, r3, #2
 800d874:	441a      	add	r2, r3
 800d876:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800d87a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d87e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d886:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d88a:	b29b      	uxth	r3, r3
 800d88c:	8013      	strh	r3, [r2, #0]
 800d88e:	e1a4      	b.n	800dbda <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	78db      	ldrb	r3, [r3, #3]
 800d89c:	2b01      	cmp	r3, #1
 800d89e:	f040 819a 	bne.w	800dbd6 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d8a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	699a      	ldr	r2, [r3, #24]
 800d8ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	691b      	ldr	r3, [r3, #16]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d917      	bls.n	800d8ee <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800d8be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	691b      	ldr	r3, [r3, #16]
 800d8ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800d8ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	699a      	ldr	r2, [r3, #24]
 800d8da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8de:	1ad2      	subs	r2, r2, r3
 800d8e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	619a      	str	r2, [r3, #24]
 800d8ec:	e00e      	b.n	800d90c <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800d8ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	699b      	ldr	r3, [r3, #24]
 800d8fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800d8fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	2200      	movs	r2, #0
 800d90a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d90c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	785b      	ldrb	r3, [r3, #1]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d178      	bne.n	800da0e <USB_EPStartXfer+0x1420>
 800d91c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d920:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d92a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d92e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d938:	b29b      	uxth	r3, r3
 800d93a:	461a      	mov	r2, r3
 800d93c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d940:	4413      	add	r3, r2
 800d942:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d94a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	781b      	ldrb	r3, [r3, #0]
 800d952:	00da      	lsls	r2, r3, #3
 800d954:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d958:	4413      	add	r3, r2
 800d95a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d95e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d962:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d966:	2b3e      	cmp	r3, #62	; 0x3e
 800d968:	d91d      	bls.n	800d9a6 <USB_EPStartXfer+0x13b8>
 800d96a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d96e:	095b      	lsrs	r3, r3, #5
 800d970:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d978:	f003 031f 	and.w	r3, r3, #31
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d104      	bne.n	800d98a <USB_EPStartXfer+0x139c>
 800d980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d984:	3b01      	subs	r3, #1
 800d986:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d98a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d98e:	b29b      	uxth	r3, r3
 800d990:	029b      	lsls	r3, r3, #10
 800d992:	b29b      	uxth	r3, r3
 800d994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d99c:	b29a      	uxth	r2, r3
 800d99e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d9a2:	801a      	strh	r2, [r3, #0]
 800d9a4:	e064      	b.n	800da70 <USB_EPStartXfer+0x1482>
 800d9a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d116      	bne.n	800d9dc <USB_EPStartXfer+0x13ee>
 800d9ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d9b2:	881b      	ldrh	r3, [r3, #0]
 800d9b4:	b29b      	uxth	r3, r3
 800d9b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d9ba:	b29a      	uxth	r2, r3
 800d9bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d9c0:	801a      	strh	r2, [r3, #0]
 800d9c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d9c6:	881b      	ldrh	r3, [r3, #0]
 800d9c8:	b29b      	uxth	r3, r3
 800d9ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9d2:	b29a      	uxth	r2, r3
 800d9d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d9d8:	801a      	strh	r2, [r3, #0]
 800d9da:	e049      	b.n	800da70 <USB_EPStartXfer+0x1482>
 800d9dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9e0:	085b      	lsrs	r3, r3, #1
 800d9e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d9e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9ea:	f003 0301 	and.w	r3, r3, #1
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d004      	beq.n	800d9fc <USB_EPStartXfer+0x140e>
 800d9f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d9fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da00:	b29b      	uxth	r3, r3
 800da02:	029b      	lsls	r3, r3, #10
 800da04:	b29a      	uxth	r2, r3
 800da06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800da0a:	801a      	strh	r2, [r3, #0]
 800da0c:	e030      	b.n	800da70 <USB_EPStartXfer+0x1482>
 800da0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	785b      	ldrb	r3, [r3, #1]
 800da1a:	2b01      	cmp	r3, #1
 800da1c:	d128      	bne.n	800da70 <USB_EPStartXfer+0x1482>
 800da1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800da2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	461a      	mov	r2, r3
 800da3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800da42:	4413      	add	r3, r2
 800da44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800da48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	00da      	lsls	r2, r3, #3
 800da56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800da5a:	4413      	add	r3, r2
 800da5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800da60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800da64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da68:	b29a      	uxth	r2, r3
 800da6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800da6e:	801a      	strh	r2, [r3, #0]
 800da70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800da7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	785b      	ldrb	r3, [r3, #1]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d178      	bne.n	800db80 <USB_EPStartXfer+0x1592>
 800da8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800da9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800daaa:	b29b      	uxth	r3, r3
 800daac:	461a      	mov	r2, r3
 800daae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800dab2:	4413      	add	r3, r2
 800dab4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800dab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dabc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	00da      	lsls	r2, r3, #3
 800dac6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800daca:	4413      	add	r3, r2
 800dacc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800dad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dad8:	2b3e      	cmp	r3, #62	; 0x3e
 800dada:	d91d      	bls.n	800db18 <USB_EPStartXfer+0x152a>
 800dadc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dae0:	095b      	lsrs	r3, r3, #5
 800dae2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800dae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800daea:	f003 031f 	and.w	r3, r3, #31
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d104      	bne.n	800dafc <USB_EPStartXfer+0x150e>
 800daf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800daf6:	3b01      	subs	r3, #1
 800daf8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800dafc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800db00:	b29b      	uxth	r3, r3
 800db02:	029b      	lsls	r3, r3, #10
 800db04:	b29b      	uxth	r3, r3
 800db06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db0e:	b29a      	uxth	r2, r3
 800db10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800db14:	801a      	strh	r2, [r3, #0]
 800db16:	e060      	b.n	800dbda <USB_EPStartXfer+0x15ec>
 800db18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d116      	bne.n	800db4e <USB_EPStartXfer+0x1560>
 800db20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800db24:	881b      	ldrh	r3, [r3, #0]
 800db26:	b29b      	uxth	r3, r3
 800db28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800db2c:	b29a      	uxth	r2, r3
 800db2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800db32:	801a      	strh	r2, [r3, #0]
 800db34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800db38:	881b      	ldrh	r3, [r3, #0]
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db44:	b29a      	uxth	r2, r3
 800db46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800db4a:	801a      	strh	r2, [r3, #0]
 800db4c:	e045      	b.n	800dbda <USB_EPStartXfer+0x15ec>
 800db4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db52:	085b      	lsrs	r3, r3, #1
 800db54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800db58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db5c:	f003 0301 	and.w	r3, r3, #1
 800db60:	2b00      	cmp	r3, #0
 800db62:	d004      	beq.n	800db6e <USB_EPStartXfer+0x1580>
 800db64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800db68:	3301      	adds	r3, #1
 800db6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800db6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800db72:	b29b      	uxth	r3, r3
 800db74:	029b      	lsls	r3, r3, #10
 800db76:	b29a      	uxth	r2, r3
 800db78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800db7c:	801a      	strh	r2, [r3, #0]
 800db7e:	e02c      	b.n	800dbda <USB_EPStartXfer+0x15ec>
 800db80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	785b      	ldrb	r3, [r3, #1]
 800db8c:	2b01      	cmp	r3, #1
 800db8e:	d124      	bne.n	800dbda <USB_EPStartXfer+0x15ec>
 800db90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800db9e:	b29b      	uxth	r3, r3
 800dba0:	461a      	mov	r2, r3
 800dba2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800dba6:	4413      	add	r3, r2
 800dba8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dbac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	00da      	lsls	r2, r3, #3
 800dbba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800dbbe:	4413      	add	r3, r2
 800dbc0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800dbc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dbc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dbcc:	b29a      	uxth	r2, r3
 800dbce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dbd2:	801a      	strh	r2, [r3, #0]
 800dbd4:	e001      	b.n	800dbda <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	e03a      	b.n	800dc50 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dbda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	4413      	add	r3, r2
 800dbf4:	881b      	ldrh	r3, [r3, #0]
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dbfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc00:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800dc04:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800dc08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800dc0c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800dc10:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800dc14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800dc18:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800dc1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dc24:	681a      	ldr	r2, [r3, #0]
 800dc26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	781b      	ldrb	r3, [r3, #0]
 800dc32:	009b      	lsls	r3, r3, #2
 800dc34:	441a      	add	r2, r3
 800dc36:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800dc3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc4a:	b29b      	uxth	r3, r3
 800dc4c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800dc4e:	2300      	movs	r3, #0
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}

0800dc5a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800dc5a:	b480      	push	{r7}
 800dc5c:	b085      	sub	sp, #20
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	6078      	str	r0, [r7, #4]
 800dc62:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	785b      	ldrb	r3, [r3, #1]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d020      	beq.n	800dcae <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800dc6c:	687a      	ldr	r2, [r7, #4]
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	009b      	lsls	r3, r3, #2
 800dc74:	4413      	add	r3, r2
 800dc76:	881b      	ldrh	r3, [r3, #0]
 800dc78:	b29b      	uxth	r3, r3
 800dc7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc82:	81bb      	strh	r3, [r7, #12]
 800dc84:	89bb      	ldrh	r3, [r7, #12]
 800dc86:	f083 0310 	eor.w	r3, r3, #16
 800dc8a:	81bb      	strh	r3, [r7, #12]
 800dc8c:	687a      	ldr	r2, [r7, #4]
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	781b      	ldrb	r3, [r3, #0]
 800dc92:	009b      	lsls	r3, r3, #2
 800dc94:	441a      	add	r2, r3
 800dc96:	89bb      	ldrh	r3, [r7, #12]
 800dc98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	8013      	strh	r3, [r2, #0]
 800dcac:	e01f      	b.n	800dcee <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	009b      	lsls	r3, r3, #2
 800dcb6:	4413      	add	r3, r2
 800dcb8:	881b      	ldrh	r3, [r3, #0]
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dcc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcc4:	81fb      	strh	r3, [r7, #14]
 800dcc6:	89fb      	ldrh	r3, [r7, #14]
 800dcc8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800dccc:	81fb      	strh	r3, [r7, #14]
 800dcce:	687a      	ldr	r2, [r7, #4]
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	009b      	lsls	r3, r3, #2
 800dcd6:	441a      	add	r2, r3
 800dcd8:	89fb      	ldrh	r3, [r7, #14]
 800dcda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dcde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800dcee:	2300      	movs	r3, #0
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3714      	adds	r7, #20
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr

0800dcfc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b087      	sub	sp, #28
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	7b1b      	ldrb	r3, [r3, #12]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	f040 809d 	bne.w	800de4a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	785b      	ldrb	r3, [r3, #1]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d04c      	beq.n	800ddb2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dd18:	687a      	ldr	r2, [r7, #4]
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	009b      	lsls	r3, r3, #2
 800dd20:	4413      	add	r3, r2
 800dd22:	881b      	ldrh	r3, [r3, #0]
 800dd24:	823b      	strh	r3, [r7, #16]
 800dd26:	8a3b      	ldrh	r3, [r7, #16]
 800dd28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d01b      	beq.n	800dd68 <USB_EPClearStall+0x6c>
 800dd30:	687a      	ldr	r2, [r7, #4]
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	009b      	lsls	r3, r3, #2
 800dd38:	4413      	add	r3, r2
 800dd3a:	881b      	ldrh	r3, [r3, #0]
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dd42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd46:	81fb      	strh	r3, [r7, #14]
 800dd48:	687a      	ldr	r2, [r7, #4]
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	009b      	lsls	r3, r3, #2
 800dd50:	441a      	add	r2, r3
 800dd52:	89fb      	ldrh	r3, [r7, #14]
 800dd54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	78db      	ldrb	r3, [r3, #3]
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	d06c      	beq.n	800de4a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800dd70:	687a      	ldr	r2, [r7, #4]
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	781b      	ldrb	r3, [r3, #0]
 800dd76:	009b      	lsls	r3, r3, #2
 800dd78:	4413      	add	r3, r2
 800dd7a:	881b      	ldrh	r3, [r3, #0]
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dd82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd86:	81bb      	strh	r3, [r7, #12]
 800dd88:	89bb      	ldrh	r3, [r7, #12]
 800dd8a:	f083 0320 	eor.w	r3, r3, #32
 800dd8e:	81bb      	strh	r3, [r7, #12]
 800dd90:	687a      	ldr	r2, [r7, #4]
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	009b      	lsls	r3, r3, #2
 800dd98:	441a      	add	r2, r3
 800dd9a:	89bb      	ldrh	r3, [r7, #12]
 800dd9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dda0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dda4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dda8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddac:	b29b      	uxth	r3, r3
 800ddae:	8013      	strh	r3, [r2, #0]
 800ddb0:	e04b      	b.n	800de4a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ddb2:	687a      	ldr	r2, [r7, #4]
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	009b      	lsls	r3, r3, #2
 800ddba:	4413      	add	r3, r2
 800ddbc:	881b      	ldrh	r3, [r3, #0]
 800ddbe:	82fb      	strh	r3, [r7, #22]
 800ddc0:	8afb      	ldrh	r3, [r7, #22]
 800ddc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d01b      	beq.n	800de02 <USB_EPClearStall+0x106>
 800ddca:	687a      	ldr	r2, [r7, #4]
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	781b      	ldrb	r3, [r3, #0]
 800ddd0:	009b      	lsls	r3, r3, #2
 800ddd2:	4413      	add	r3, r2
 800ddd4:	881b      	ldrh	r3, [r3, #0]
 800ddd6:	b29b      	uxth	r3, r3
 800ddd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dde0:	82bb      	strh	r3, [r7, #20]
 800dde2:	687a      	ldr	r2, [r7, #4]
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	009b      	lsls	r3, r3, #2
 800ddea:	441a      	add	r2, r3
 800ddec:	8abb      	ldrh	r3, [r7, #20]
 800ddee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ddf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ddf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ddfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddfe:	b29b      	uxth	r3, r3
 800de00:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800de02:	687a      	ldr	r2, [r7, #4]
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	009b      	lsls	r3, r3, #2
 800de0a:	4413      	add	r3, r2
 800de0c:	881b      	ldrh	r3, [r3, #0]
 800de0e:	b29b      	uxth	r3, r3
 800de10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800de14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de18:	827b      	strh	r3, [r7, #18]
 800de1a:	8a7b      	ldrh	r3, [r7, #18]
 800de1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800de20:	827b      	strh	r3, [r7, #18]
 800de22:	8a7b      	ldrh	r3, [r7, #18]
 800de24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800de28:	827b      	strh	r3, [r7, #18]
 800de2a:	687a      	ldr	r2, [r7, #4]
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	009b      	lsls	r3, r3, #2
 800de32:	441a      	add	r2, r3
 800de34:	8a7b      	ldrh	r3, [r7, #18]
 800de36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de46:	b29b      	uxth	r3, r3
 800de48:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800de4a:	2300      	movs	r3, #0
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	371c      	adds	r7, #28
 800de50:	46bd      	mov	sp, r7
 800de52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de56:	4770      	bx	lr

0800de58 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800de58:	b480      	push	{r7}
 800de5a:	b083      	sub	sp, #12
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
 800de60:	460b      	mov	r3, r1
 800de62:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800de64:	78fb      	ldrb	r3, [r7, #3]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d103      	bne.n	800de72 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2280      	movs	r2, #128	; 0x80
 800de6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800de72:	2300      	movs	r3, #0
}
 800de74:	4618      	mov	r0, r3
 800de76:	370c      	adds	r7, #12
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr

0800de80 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800de80:	b480      	push	{r7}
 800de82:	b083      	sub	sp, #12
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800de8e:	b29b      	uxth	r3, r3
 800de90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de98:	b29a      	uxth	r2, r3
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800dea0:	2300      	movs	r3, #0
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	370c      	adds	r7, #12
 800dea6:	46bd      	mov	sp, r7
 800dea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deac:	4770      	bx	lr

0800deae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800deae:	b480      	push	{r7}
 800deb0:	b085      	sub	sp, #20
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800debc:	b29b      	uxth	r3, r3
 800debe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800dec0:	68fb      	ldr	r3, [r7, #12]
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3714      	adds	r7, #20
 800dec6:	46bd      	mov	sp, r7
 800dec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800decc:	4770      	bx	lr

0800dece <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800dece:	b480      	push	{r7}
 800ded0:	b08d      	sub	sp, #52	; 0x34
 800ded2:	af00      	add	r7, sp, #0
 800ded4:	60f8      	str	r0, [r7, #12]
 800ded6:	60b9      	str	r1, [r7, #8]
 800ded8:	4611      	mov	r1, r2
 800deda:	461a      	mov	r2, r3
 800dedc:	460b      	mov	r3, r1
 800dede:	80fb      	strh	r3, [r7, #6]
 800dee0:	4613      	mov	r3, r2
 800dee2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800dee4:	88bb      	ldrh	r3, [r7, #4]
 800dee6:	3301      	adds	r3, #1
 800dee8:	085b      	lsrs	r3, r3, #1
 800deea:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800def4:	88fa      	ldrh	r2, [r7, #6]
 800def6:	69fb      	ldr	r3, [r7, #28]
 800def8:	4413      	add	r3, r2
 800defa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800defe:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800df00:	6a3b      	ldr	r3, [r7, #32]
 800df02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df04:	e01b      	b.n	800df3e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800df06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800df0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0e:	3301      	adds	r3, #1
 800df10:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800df12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	b29b      	uxth	r3, r3
 800df18:	021b      	lsls	r3, r3, #8
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	461a      	mov	r2, r3
 800df1e:	69bb      	ldr	r3, [r7, #24]
 800df20:	4313      	orrs	r3, r2
 800df22:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	b29a      	uxth	r2, r3
 800df28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800df2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2e:	3302      	adds	r3, #2
 800df30:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800df32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df34:	3301      	adds	r3, #1
 800df36:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800df38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df3a:	3b01      	subs	r3, #1
 800df3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df40:	2b00      	cmp	r3, #0
 800df42:	d1e0      	bne.n	800df06 <USB_WritePMA+0x38>
  }
}
 800df44:	bf00      	nop
 800df46:	bf00      	nop
 800df48:	3734      	adds	r7, #52	; 0x34
 800df4a:	46bd      	mov	sp, r7
 800df4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df50:	4770      	bx	lr

0800df52 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800df52:	b480      	push	{r7}
 800df54:	b08b      	sub	sp, #44	; 0x2c
 800df56:	af00      	add	r7, sp, #0
 800df58:	60f8      	str	r0, [r7, #12]
 800df5a:	60b9      	str	r1, [r7, #8]
 800df5c:	4611      	mov	r1, r2
 800df5e:	461a      	mov	r2, r3
 800df60:	460b      	mov	r3, r1
 800df62:	80fb      	strh	r3, [r7, #6]
 800df64:	4613      	mov	r3, r2
 800df66:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800df68:	88bb      	ldrh	r3, [r7, #4]
 800df6a:	085b      	lsrs	r3, r3, #1
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800df78:	88fa      	ldrh	r2, [r7, #6]
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	4413      	add	r3, r2
 800df7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800df82:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800df84:	69bb      	ldr	r3, [r7, #24]
 800df86:	627b      	str	r3, [r7, #36]	; 0x24
 800df88:	e018      	b.n	800dfbc <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800df8a:	6a3b      	ldr	r3, [r7, #32]
 800df8c:	881b      	ldrh	r3, [r3, #0]
 800df8e:	b29b      	uxth	r3, r3
 800df90:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800df92:	6a3b      	ldr	r3, [r7, #32]
 800df94:	3302      	adds	r3, #2
 800df96:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800df98:	693b      	ldr	r3, [r7, #16]
 800df9a:	b2da      	uxtb	r2, r3
 800df9c:	69fb      	ldr	r3, [r7, #28]
 800df9e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800dfa0:	69fb      	ldr	r3, [r7, #28]
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	0a1b      	lsrs	r3, r3, #8
 800dfaa:	b2da      	uxtb	r2, r3
 800dfac:	69fb      	ldr	r3, [r7, #28]
 800dfae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800dfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb8:	3b01      	subs	r3, #1
 800dfba:	627b      	str	r3, [r7, #36]	; 0x24
 800dfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d1e3      	bne.n	800df8a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800dfc2:	88bb      	ldrh	r3, [r7, #4]
 800dfc4:	f003 0301 	and.w	r3, r3, #1
 800dfc8:	b29b      	uxth	r3, r3
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d007      	beq.n	800dfde <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800dfce:	6a3b      	ldr	r3, [r7, #32]
 800dfd0:	881b      	ldrh	r3, [r3, #0]
 800dfd2:	b29b      	uxth	r3, r3
 800dfd4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	b2da      	uxtb	r2, r3
 800dfda:	69fb      	ldr	r3, [r7, #28]
 800dfdc:	701a      	strb	r2, [r3, #0]
  }
}
 800dfde:	bf00      	nop
 800dfe0:	372c      	adds	r7, #44	; 0x2c
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe8:	4770      	bx	lr

0800dfea <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dfea:	b580      	push	{r7, lr}
 800dfec:	b084      	sub	sp, #16
 800dfee:	af00      	add	r7, sp, #0
 800dff0:	6078      	str	r0, [r7, #4]
 800dff2:	460b      	mov	r3, r1
 800dff4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dff6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800dffa:	f004 fb03 	bl	8012604 <USBD_static_malloc>
 800dffe:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d105      	bne.n	800e012 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2200      	movs	r2, #0
 800e00a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e00e:	2302      	movs	r3, #2
 800e010:	e066      	b.n	800e0e0 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	68fa      	ldr	r2, [r7, #12]
 800e016:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	7c1b      	ldrb	r3, [r3, #16]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d119      	bne.n	800e056 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e022:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e026:	2202      	movs	r2, #2
 800e028:	2181      	movs	r1, #129	; 0x81
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f004 f98f 	bl	801234e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2201      	movs	r2, #1
 800e034:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e036:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e03a:	2202      	movs	r2, #2
 800e03c:	2101      	movs	r1, #1
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f004 f985 	bl	801234e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2201      	movs	r2, #1
 800e048:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2210      	movs	r2, #16
 800e050:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e054:	e016      	b.n	800e084 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e056:	2340      	movs	r3, #64	; 0x40
 800e058:	2202      	movs	r2, #2
 800e05a:	2181      	movs	r1, #129	; 0x81
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f004 f976 	bl	801234e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2201      	movs	r2, #1
 800e066:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e068:	2340      	movs	r3, #64	; 0x40
 800e06a:	2202      	movs	r2, #2
 800e06c:	2101      	movs	r1, #1
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f004 f96d 	bl	801234e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2201      	movs	r2, #1
 800e078:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2210      	movs	r2, #16
 800e080:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e084:	2308      	movs	r3, #8
 800e086:	2203      	movs	r2, #3
 800e088:	2182      	movs	r1, #130	; 0x82
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f004 f95f 	bl	801234e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2201      	movs	r2, #1
 800e094:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	7c1b      	ldrb	r3, [r3, #16]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d109      	bne.n	800e0ce <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e0c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e0c4:	2101      	movs	r1, #1
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f004 fa31 	bl	801252e <USBD_LL_PrepareReceive>
 800e0cc:	e007      	b.n	800e0de <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e0d4:	2340      	movs	r3, #64	; 0x40
 800e0d6:	2101      	movs	r1, #1
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f004 fa28 	bl	801252e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e0de:	2300      	movs	r3, #0
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3710      	adds	r7, #16
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}

0800e0e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b082      	sub	sp, #8
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e0f4:	2181      	movs	r1, #129	; 0x81
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f004 f94f 	bl	801239a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2200      	movs	r2, #0
 800e100:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e102:	2101      	movs	r1, #1
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f004 f948 	bl	801239a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2200      	movs	r2, #0
 800e10e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e112:	2182      	movs	r1, #130	; 0x82
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f004 f940 	bl	801239a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2200      	movs	r2, #0
 800e11e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2200      	movs	r2, #0
 800e126:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e130:	2b00      	cmp	r3, #0
 800e132:	d00e      	beq.n	800e152 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e13a:	685b      	ldr	r3, [r3, #4]
 800e13c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e144:	4618      	mov	r0, r3
 800e146:	f004 fa6b 	bl	8012620 <USBD_static_free>
    pdev->pClassData = NULL;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2200      	movs	r2, #0
 800e14e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e152:	2300      	movs	r3, #0
}
 800e154:	4618      	mov	r0, r3
 800e156:	3708      	adds	r7, #8
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b086      	sub	sp, #24
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e16c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e16e:	2300      	movs	r3, #0
 800e170:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e172:	2300      	movs	r3, #0
 800e174:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e176:	2300      	movs	r3, #0
 800e178:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d101      	bne.n	800e184 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e180:	2303      	movs	r3, #3
 800e182:	e0af      	b.n	800e2e4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	781b      	ldrb	r3, [r3, #0]
 800e188:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d03f      	beq.n	800e210 <USBD_CDC_Setup+0xb4>
 800e190:	2b20      	cmp	r3, #32
 800e192:	f040 809f 	bne.w	800e2d4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	88db      	ldrh	r3, [r3, #6]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d02e      	beq.n	800e1fc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	781b      	ldrb	r3, [r3, #0]
 800e1a2:	b25b      	sxtb	r3, r3
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	da16      	bge.n	800e1d6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1ae:	689b      	ldr	r3, [r3, #8]
 800e1b0:	683a      	ldr	r2, [r7, #0]
 800e1b2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e1b4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e1b6:	683a      	ldr	r2, [r7, #0]
 800e1b8:	88d2      	ldrh	r2, [r2, #6]
 800e1ba:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	88db      	ldrh	r3, [r3, #6]
 800e1c0:	2b07      	cmp	r3, #7
 800e1c2:	bf28      	it	cs
 800e1c4:	2307      	movcs	r3, #7
 800e1c6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	89fa      	ldrh	r2, [r7, #14]
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f001 fa9f 	bl	800f712 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e1d4:	e085      	b.n	800e2e2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	785a      	ldrb	r2, [r3, #1]
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	88db      	ldrh	r3, [r3, #6]
 800e1e4:	b2da      	uxtb	r2, r3
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e1ec:	6939      	ldr	r1, [r7, #16]
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	88db      	ldrh	r3, [r3, #6]
 800e1f2:	461a      	mov	r2, r3
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	f001 fab8 	bl	800f76a <USBD_CtlPrepareRx>
      break;
 800e1fa:	e072      	b.n	800e2e2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e202:	689b      	ldr	r3, [r3, #8]
 800e204:	683a      	ldr	r2, [r7, #0]
 800e206:	7850      	ldrb	r0, [r2, #1]
 800e208:	2200      	movs	r2, #0
 800e20a:	6839      	ldr	r1, [r7, #0]
 800e20c:	4798      	blx	r3
      break;
 800e20e:	e068      	b.n	800e2e2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	785b      	ldrb	r3, [r3, #1]
 800e214:	2b0b      	cmp	r3, #11
 800e216:	d852      	bhi.n	800e2be <USBD_CDC_Setup+0x162>
 800e218:	a201      	add	r2, pc, #4	; (adr r2, 800e220 <USBD_CDC_Setup+0xc4>)
 800e21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e21e:	bf00      	nop
 800e220:	0800e251 	.word	0x0800e251
 800e224:	0800e2cd 	.word	0x0800e2cd
 800e228:	0800e2bf 	.word	0x0800e2bf
 800e22c:	0800e2bf 	.word	0x0800e2bf
 800e230:	0800e2bf 	.word	0x0800e2bf
 800e234:	0800e2bf 	.word	0x0800e2bf
 800e238:	0800e2bf 	.word	0x0800e2bf
 800e23c:	0800e2bf 	.word	0x0800e2bf
 800e240:	0800e2bf 	.word	0x0800e2bf
 800e244:	0800e2bf 	.word	0x0800e2bf
 800e248:	0800e27b 	.word	0x0800e27b
 800e24c:	0800e2a5 	.word	0x0800e2a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e256:	b2db      	uxtb	r3, r3
 800e258:	2b03      	cmp	r3, #3
 800e25a:	d107      	bne.n	800e26c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e25c:	f107 030a 	add.w	r3, r7, #10
 800e260:	2202      	movs	r2, #2
 800e262:	4619      	mov	r1, r3
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f001 fa54 	bl	800f712 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e26a:	e032      	b.n	800e2d2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e26c:	6839      	ldr	r1, [r7, #0]
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f001 f9de 	bl	800f630 <USBD_CtlError>
            ret = USBD_FAIL;
 800e274:	2303      	movs	r3, #3
 800e276:	75fb      	strb	r3, [r7, #23]
          break;
 800e278:	e02b      	b.n	800e2d2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e280:	b2db      	uxtb	r3, r3
 800e282:	2b03      	cmp	r3, #3
 800e284:	d107      	bne.n	800e296 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e286:	f107 030d 	add.w	r3, r7, #13
 800e28a:	2201      	movs	r2, #1
 800e28c:	4619      	mov	r1, r3
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f001 fa3f 	bl	800f712 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e294:	e01d      	b.n	800e2d2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e296:	6839      	ldr	r1, [r7, #0]
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f001 f9c9 	bl	800f630 <USBD_CtlError>
            ret = USBD_FAIL;
 800e29e:	2303      	movs	r3, #3
 800e2a0:	75fb      	strb	r3, [r7, #23]
          break;
 800e2a2:	e016      	b.n	800e2d2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2aa:	b2db      	uxtb	r3, r3
 800e2ac:	2b03      	cmp	r3, #3
 800e2ae:	d00f      	beq.n	800e2d0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e2b0:	6839      	ldr	r1, [r7, #0]
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f001 f9bc 	bl	800f630 <USBD_CtlError>
            ret = USBD_FAIL;
 800e2b8:	2303      	movs	r3, #3
 800e2ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e2bc:	e008      	b.n	800e2d0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e2be:	6839      	ldr	r1, [r7, #0]
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f001 f9b5 	bl	800f630 <USBD_CtlError>
          ret = USBD_FAIL;
 800e2c6:	2303      	movs	r3, #3
 800e2c8:	75fb      	strb	r3, [r7, #23]
          break;
 800e2ca:	e002      	b.n	800e2d2 <USBD_CDC_Setup+0x176>
          break;
 800e2cc:	bf00      	nop
 800e2ce:	e008      	b.n	800e2e2 <USBD_CDC_Setup+0x186>
          break;
 800e2d0:	bf00      	nop
      }
      break;
 800e2d2:	e006      	b.n	800e2e2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e2d4:	6839      	ldr	r1, [r7, #0]
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f001 f9aa 	bl	800f630 <USBD_CtlError>
      ret = USBD_FAIL;
 800e2dc:	2303      	movs	r3, #3
 800e2de:	75fb      	strb	r3, [r7, #23]
      break;
 800e2e0:	bf00      	nop
  }

  return (uint8_t)ret;
 800e2e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3718      	adds	r7, #24
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}

0800e2ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b084      	sub	sp, #16
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e2fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e306:	2b00      	cmp	r3, #0
 800e308:	d101      	bne.n	800e30e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e30a:	2303      	movs	r3, #3
 800e30c:	e04f      	b.n	800e3ae <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e314:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e316:	78fa      	ldrb	r2, [r7, #3]
 800e318:	6879      	ldr	r1, [r7, #4]
 800e31a:	4613      	mov	r3, r2
 800e31c:	009b      	lsls	r3, r3, #2
 800e31e:	4413      	add	r3, r2
 800e320:	009b      	lsls	r3, r3, #2
 800e322:	440b      	add	r3, r1
 800e324:	3318      	adds	r3, #24
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d029      	beq.n	800e380 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e32c:	78fa      	ldrb	r2, [r7, #3]
 800e32e:	6879      	ldr	r1, [r7, #4]
 800e330:	4613      	mov	r3, r2
 800e332:	009b      	lsls	r3, r3, #2
 800e334:	4413      	add	r3, r2
 800e336:	009b      	lsls	r3, r3, #2
 800e338:	440b      	add	r3, r1
 800e33a:	3318      	adds	r3, #24
 800e33c:	681a      	ldr	r2, [r3, #0]
 800e33e:	78f9      	ldrb	r1, [r7, #3]
 800e340:	68f8      	ldr	r0, [r7, #12]
 800e342:	460b      	mov	r3, r1
 800e344:	009b      	lsls	r3, r3, #2
 800e346:	440b      	add	r3, r1
 800e348:	00db      	lsls	r3, r3, #3
 800e34a:	4403      	add	r3, r0
 800e34c:	3338      	adds	r3, #56	; 0x38
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	fbb2 f1f3 	udiv	r1, r2, r3
 800e354:	fb01 f303 	mul.w	r3, r1, r3
 800e358:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d110      	bne.n	800e380 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e35e:	78fa      	ldrb	r2, [r7, #3]
 800e360:	6879      	ldr	r1, [r7, #4]
 800e362:	4613      	mov	r3, r2
 800e364:	009b      	lsls	r3, r3, #2
 800e366:	4413      	add	r3, r2
 800e368:	009b      	lsls	r3, r3, #2
 800e36a:	440b      	add	r3, r1
 800e36c:	3318      	adds	r3, #24
 800e36e:	2200      	movs	r2, #0
 800e370:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e372:	78f9      	ldrb	r1, [r7, #3]
 800e374:	2300      	movs	r3, #0
 800e376:	2200      	movs	r2, #0
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f004 f8b7 	bl	80124ec <USBD_LL_Transmit>
 800e37e:	e015      	b.n	800e3ac <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	2200      	movs	r2, #0
 800e384:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e38e:	691b      	ldr	r3, [r3, #16]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d00b      	beq.n	800e3ac <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e39a:	691b      	ldr	r3, [r3, #16]
 800e39c:	68ba      	ldr	r2, [r7, #8]
 800e39e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e3a2:	68ba      	ldr	r2, [r7, #8]
 800e3a4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e3a8:	78fa      	ldrb	r2, [r7, #3]
 800e3aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e3ac:	2300      	movs	r3, #0
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3710      	adds	r7, #16
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}

0800e3b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e3b6:	b580      	push	{r7, lr}
 800e3b8:	b084      	sub	sp, #16
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	6078      	str	r0, [r7, #4]
 800e3be:	460b      	mov	r3, r1
 800e3c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d101      	bne.n	800e3d8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e3d4:	2303      	movs	r3, #3
 800e3d6:	e015      	b.n	800e404 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e3d8:	78fb      	ldrb	r3, [r7, #3]
 800e3da:	4619      	mov	r1, r3
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f004 f8c7 	bl	8012570 <USBD_LL_GetRxDataSize>
 800e3e2:	4602      	mov	r2, r0
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3f0:	68db      	ldr	r3, [r3, #12]
 800e3f2:	68fa      	ldr	r2, [r7, #12]
 800e3f4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e3f8:	68fa      	ldr	r2, [r7, #12]
 800e3fa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e3fe:	4611      	mov	r1, r2
 800e400:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e402:	2300      	movs	r3, #0
}
 800e404:	4618      	mov	r0, r3
 800e406:	3710      	adds	r7, #16
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}

0800e40c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b084      	sub	sp, #16
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e41a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d101      	bne.n	800e426 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e422:	2303      	movs	r3, #3
 800e424:	e01b      	b.n	800e45e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d015      	beq.n	800e45c <USBD_CDC_EP0_RxReady+0x50>
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e436:	2bff      	cmp	r3, #255	; 0xff
 800e438:	d010      	beq.n	800e45c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e440:	689b      	ldr	r3, [r3, #8]
 800e442:	68fa      	ldr	r2, [r7, #12]
 800e444:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e448:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e44a:	68fa      	ldr	r2, [r7, #12]
 800e44c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e450:	b292      	uxth	r2, r2
 800e452:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	22ff      	movs	r2, #255	; 0xff
 800e458:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e45c:	2300      	movs	r3, #0
}
 800e45e:	4618      	mov	r0, r3
 800e460:	3710      	adds	r7, #16
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
	...

0800e468 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e468:	b480      	push	{r7}
 800e46a:	b083      	sub	sp, #12
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2243      	movs	r2, #67	; 0x43
 800e474:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e476:	4b03      	ldr	r3, [pc, #12]	; (800e484 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e478:	4618      	mov	r0, r3
 800e47a:	370c      	adds	r7, #12
 800e47c:	46bd      	mov	sp, r7
 800e47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e482:	4770      	bx	lr
 800e484:	20000094 	.word	0x20000094

0800e488 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e488:	b480      	push	{r7}
 800e48a:	b083      	sub	sp, #12
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2243      	movs	r2, #67	; 0x43
 800e494:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e496:	4b03      	ldr	r3, [pc, #12]	; (800e4a4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e498:	4618      	mov	r0, r3
 800e49a:	370c      	adds	r7, #12
 800e49c:	46bd      	mov	sp, r7
 800e49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a2:	4770      	bx	lr
 800e4a4:	20000050 	.word	0x20000050

0800e4a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e4a8:	b480      	push	{r7}
 800e4aa:	b083      	sub	sp, #12
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2243      	movs	r2, #67	; 0x43
 800e4b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e4b6:	4b03      	ldr	r3, [pc, #12]	; (800e4c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	370c      	adds	r7, #12
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr
 800e4c4:	200000d8 	.word	0x200000d8

0800e4c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b083      	sub	sp, #12
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	220a      	movs	r2, #10
 800e4d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e4d6:	4b03      	ldr	r3, [pc, #12]	; (800e4e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	370c      	adds	r7, #12
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr
 800e4e4:	2000000c 	.word	0x2000000c

0800e4e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e4e8:	b480      	push	{r7}
 800e4ea:	b083      	sub	sp, #12
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d101      	bne.n	800e4fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e4f8:	2303      	movs	r3, #3
 800e4fa:	e004      	b.n	800e506 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	683a      	ldr	r2, [r7, #0]
 800e500:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e504:	2300      	movs	r3, #0
}
 800e506:	4618      	mov	r0, r3
 800e508:	370c      	adds	r7, #12
 800e50a:	46bd      	mov	sp, r7
 800e50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e510:	4770      	bx	lr

0800e512 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e512:	b480      	push	{r7}
 800e514:	b087      	sub	sp, #28
 800e516:	af00      	add	r7, sp, #0
 800e518:	60f8      	str	r0, [r7, #12]
 800e51a:	60b9      	str	r1, [r7, #8]
 800e51c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e524:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d101      	bne.n	800e530 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e52c:	2303      	movs	r3, #3
 800e52e:	e008      	b.n	800e542 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	68ba      	ldr	r2, [r7, #8]
 800e534:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	687a      	ldr	r2, [r7, #4]
 800e53c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e540:	2300      	movs	r3, #0
}
 800e542:	4618      	mov	r0, r3
 800e544:	371c      	adds	r7, #28
 800e546:	46bd      	mov	sp, r7
 800e548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54c:	4770      	bx	lr

0800e54e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e54e:	b480      	push	{r7}
 800e550:	b085      	sub	sp, #20
 800e552:	af00      	add	r7, sp, #0
 800e554:	6078      	str	r0, [r7, #4]
 800e556:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e55e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d101      	bne.n	800e56a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800e566:	2303      	movs	r3, #3
 800e568:	e004      	b.n	800e574 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	683a      	ldr	r2, [r7, #0]
 800e56e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e572:	2300      	movs	r3, #0
}
 800e574:	4618      	mov	r0, r3
 800e576:	3714      	adds	r7, #20
 800e578:	46bd      	mov	sp, r7
 800e57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57e:	4770      	bx	lr

0800e580 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b084      	sub	sp, #16
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e58e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e596:	2b00      	cmp	r3, #0
 800e598:	d101      	bne.n	800e59e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e59a:	2303      	movs	r3, #3
 800e59c:	e016      	b.n	800e5cc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	7c1b      	ldrb	r3, [r3, #16]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d109      	bne.n	800e5ba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e5ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e5b0:	2101      	movs	r1, #1
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f003 ffbb 	bl	801252e <USBD_LL_PrepareReceive>
 800e5b8:	e007      	b.n	800e5ca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e5c0:	2340      	movs	r3, #64	; 0x40
 800e5c2:	2101      	movs	r1, #1
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f003 ffb2 	bl	801252e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e5ca:	2300      	movs	r3, #0
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3710      	adds	r7, #16
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}

0800e5d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b086      	sub	sp, #24
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	60f8      	str	r0, [r7, #12]
 800e5dc:	60b9      	str	r1, [r7, #8]
 800e5de:	4613      	mov	r3, r2
 800e5e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d101      	bne.n	800e5ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e5e8:	2303      	movs	r3, #3
 800e5ea:	e01f      	b.n	800e62c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	2200      	movs	r2, #0
 800e600:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e604:	68bb      	ldr	r3, [r7, #8]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d003      	beq.n	800e612 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	68ba      	ldr	r2, [r7, #8]
 800e60e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2201      	movs	r2, #1
 800e616:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	79fa      	ldrb	r2, [r7, #7]
 800e61e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e620:	68f8      	ldr	r0, [r7, #12]
 800e622:	f003 fe19 	bl	8012258 <USBD_LL_Init>
 800e626:	4603      	mov	r3, r0
 800e628:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e62a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	3718      	adds	r7, #24
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b084      	sub	sp, #16
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e63e:	2300      	movs	r3, #0
 800e640:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d101      	bne.n	800e64c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e648:	2303      	movs	r3, #3
 800e64a:	e016      	b.n	800e67a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	683a      	ldr	r2, [r7, #0]
 800e650:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d00b      	beq.n	800e678 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e668:	f107 020e 	add.w	r2, r7, #14
 800e66c:	4610      	mov	r0, r2
 800e66e:	4798      	blx	r3
 800e670:	4602      	mov	r2, r0
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e678:	2300      	movs	r3, #0
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	3710      	adds	r7, #16
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}

0800e682 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e682:	b580      	push	{r7, lr}
 800e684:	b082      	sub	sp, #8
 800e686:	af00      	add	r7, sp, #0
 800e688:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f003 fe44 	bl	8012318 <USBD_LL_Start>
 800e690:	4603      	mov	r3, r0
}
 800e692:	4618      	mov	r0, r3
 800e694:	3708      	adds	r7, #8
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}

0800e69a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e69a:	b480      	push	{r7}
 800e69c:	b083      	sub	sp, #12
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e6a2:	2300      	movs	r3, #0
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	370c      	adds	r7, #12
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ae:	4770      	bx	lr

0800e6b0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b084      	sub	sp, #16
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
 800e6b8:	460b      	mov	r3, r1
 800e6ba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e6bc:	2303      	movs	r3, #3
 800e6be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d009      	beq.n	800e6de <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	78fa      	ldrb	r2, [r7, #3]
 800e6d4:	4611      	mov	r1, r2
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	4798      	blx	r3
 800e6da:	4603      	mov	r3, r0
 800e6dc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e6de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	3710      	adds	r7, #16
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}

0800e6e8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b082      	sub	sp, #8
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
 800e6f0:	460b      	mov	r3, r1
 800e6f2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d007      	beq.n	800e70e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e704:	685b      	ldr	r3, [r3, #4]
 800e706:	78fa      	ldrb	r2, [r7, #3]
 800e708:	4611      	mov	r1, r2
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	4798      	blx	r3
  }

  return USBD_OK;
 800e70e:	2300      	movs	r3, #0
}
 800e710:	4618      	mov	r0, r3
 800e712:	3708      	adds	r7, #8
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}

0800e718 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b084      	sub	sp, #16
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e728:	6839      	ldr	r1, [r7, #0]
 800e72a:	4618      	mov	r0, r3
 800e72c:	f000 ff46 	bl	800f5bc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2201      	movs	r2, #1
 800e734:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e73e:	461a      	mov	r2, r3
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e74c:	f003 031f 	and.w	r3, r3, #31
 800e750:	2b02      	cmp	r3, #2
 800e752:	d01a      	beq.n	800e78a <USBD_LL_SetupStage+0x72>
 800e754:	2b02      	cmp	r3, #2
 800e756:	d822      	bhi.n	800e79e <USBD_LL_SetupStage+0x86>
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d002      	beq.n	800e762 <USBD_LL_SetupStage+0x4a>
 800e75c:	2b01      	cmp	r3, #1
 800e75e:	d00a      	beq.n	800e776 <USBD_LL_SetupStage+0x5e>
 800e760:	e01d      	b.n	800e79e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e768:	4619      	mov	r1, r3
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f000 f9ee 	bl	800eb4c <USBD_StdDevReq>
 800e770:	4603      	mov	r3, r0
 800e772:	73fb      	strb	r3, [r7, #15]
      break;
 800e774:	e020      	b.n	800e7b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e77c:	4619      	mov	r1, r3
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f000 fa52 	bl	800ec28 <USBD_StdItfReq>
 800e784:	4603      	mov	r3, r0
 800e786:	73fb      	strb	r3, [r7, #15]
      break;
 800e788:	e016      	b.n	800e7b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e790:	4619      	mov	r1, r3
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f000 fa91 	bl	800ecba <USBD_StdEPReq>
 800e798:	4603      	mov	r3, r0
 800e79a:	73fb      	strb	r3, [r7, #15]
      break;
 800e79c:	e00c      	b.n	800e7b8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e7a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e7a8:	b2db      	uxtb	r3, r3
 800e7aa:	4619      	mov	r1, r3
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f003 fe13 	bl	80123d8 <USBD_LL_StallEP>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	73fb      	strb	r3, [r7, #15]
      break;
 800e7b6:	bf00      	nop
  }

  return ret;
 800e7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3710      	adds	r7, #16
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}

0800e7c2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e7c2:	b580      	push	{r7, lr}
 800e7c4:	b086      	sub	sp, #24
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	60f8      	str	r0, [r7, #12]
 800e7ca:	460b      	mov	r3, r1
 800e7cc:	607a      	str	r2, [r7, #4]
 800e7ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e7d0:	7afb      	ldrb	r3, [r7, #11]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d138      	bne.n	800e848 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e7dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e7e4:	2b03      	cmp	r3, #3
 800e7e6:	d14a      	bne.n	800e87e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	689a      	ldr	r2, [r3, #8]
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	68db      	ldr	r3, [r3, #12]
 800e7f0:	429a      	cmp	r2, r3
 800e7f2:	d913      	bls.n	800e81c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	689a      	ldr	r2, [r3, #8]
 800e7f8:	693b      	ldr	r3, [r7, #16]
 800e7fa:	68db      	ldr	r3, [r3, #12]
 800e7fc:	1ad2      	subs	r2, r2, r3
 800e7fe:	693b      	ldr	r3, [r7, #16]
 800e800:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e802:	693b      	ldr	r3, [r7, #16]
 800e804:	68da      	ldr	r2, [r3, #12]
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	689b      	ldr	r3, [r3, #8]
 800e80a:	4293      	cmp	r3, r2
 800e80c:	bf28      	it	cs
 800e80e:	4613      	movcs	r3, r2
 800e810:	461a      	mov	r2, r3
 800e812:	6879      	ldr	r1, [r7, #4]
 800e814:	68f8      	ldr	r0, [r7, #12]
 800e816:	f000 ffc5 	bl	800f7a4 <USBD_CtlContinueRx>
 800e81a:	e030      	b.n	800e87e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e822:	b2db      	uxtb	r3, r3
 800e824:	2b03      	cmp	r3, #3
 800e826:	d10b      	bne.n	800e840 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e82e:	691b      	ldr	r3, [r3, #16]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d005      	beq.n	800e840 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e83a:	691b      	ldr	r3, [r3, #16]
 800e83c:	68f8      	ldr	r0, [r7, #12]
 800e83e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e840:	68f8      	ldr	r0, [r7, #12]
 800e842:	f000 ffc0 	bl	800f7c6 <USBD_CtlSendStatus>
 800e846:	e01a      	b.n	800e87e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e84e:	b2db      	uxtb	r3, r3
 800e850:	2b03      	cmp	r3, #3
 800e852:	d114      	bne.n	800e87e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e85a:	699b      	ldr	r3, [r3, #24]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d00e      	beq.n	800e87e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e866:	699b      	ldr	r3, [r3, #24]
 800e868:	7afa      	ldrb	r2, [r7, #11]
 800e86a:	4611      	mov	r1, r2
 800e86c:	68f8      	ldr	r0, [r7, #12]
 800e86e:	4798      	blx	r3
 800e870:	4603      	mov	r3, r0
 800e872:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e874:	7dfb      	ldrb	r3, [r7, #23]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d001      	beq.n	800e87e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800e87a:	7dfb      	ldrb	r3, [r7, #23]
 800e87c:	e000      	b.n	800e880 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800e87e:	2300      	movs	r3, #0
}
 800e880:	4618      	mov	r0, r3
 800e882:	3718      	adds	r7, #24
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}

0800e888 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b086      	sub	sp, #24
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	60f8      	str	r0, [r7, #12]
 800e890:	460b      	mov	r3, r1
 800e892:	607a      	str	r2, [r7, #4]
 800e894:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e896:	7afb      	ldrb	r3, [r7, #11]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d16b      	bne.n	800e974 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	3314      	adds	r3, #20
 800e8a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e8a8:	2b02      	cmp	r3, #2
 800e8aa:	d156      	bne.n	800e95a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	689a      	ldr	r2, [r3, #8]
 800e8b0:	693b      	ldr	r3, [r7, #16]
 800e8b2:	68db      	ldr	r3, [r3, #12]
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d914      	bls.n	800e8e2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	689a      	ldr	r2, [r3, #8]
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	68db      	ldr	r3, [r3, #12]
 800e8c0:	1ad2      	subs	r2, r2, r3
 800e8c2:	693b      	ldr	r3, [r7, #16]
 800e8c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e8c6:	693b      	ldr	r3, [r7, #16]
 800e8c8:	689b      	ldr	r3, [r3, #8]
 800e8ca:	461a      	mov	r2, r3
 800e8cc:	6879      	ldr	r1, [r7, #4]
 800e8ce:	68f8      	ldr	r0, [r7, #12]
 800e8d0:	f000 ff3a 	bl	800f748 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	2100      	movs	r1, #0
 800e8da:	68f8      	ldr	r0, [r7, #12]
 800e8dc:	f003 fe27 	bl	801252e <USBD_LL_PrepareReceive>
 800e8e0:	e03b      	b.n	800e95a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	68da      	ldr	r2, [r3, #12]
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	689b      	ldr	r3, [r3, #8]
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d11c      	bne.n	800e928 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	685a      	ldr	r2, [r3, #4]
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d316      	bcc.n	800e928 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e8fa:	693b      	ldr	r3, [r7, #16]
 800e8fc:	685a      	ldr	r2, [r3, #4]
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e904:	429a      	cmp	r2, r3
 800e906:	d20f      	bcs.n	800e928 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e908:	2200      	movs	r2, #0
 800e90a:	2100      	movs	r1, #0
 800e90c:	68f8      	ldr	r0, [r7, #12]
 800e90e:	f000 ff1b 	bl	800f748 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	2200      	movs	r2, #0
 800e916:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e91a:	2300      	movs	r3, #0
 800e91c:	2200      	movs	r2, #0
 800e91e:	2100      	movs	r1, #0
 800e920:	68f8      	ldr	r0, [r7, #12]
 800e922:	f003 fe04 	bl	801252e <USBD_LL_PrepareReceive>
 800e926:	e018      	b.n	800e95a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e92e:	b2db      	uxtb	r3, r3
 800e930:	2b03      	cmp	r3, #3
 800e932:	d10b      	bne.n	800e94c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e93a:	68db      	ldr	r3, [r3, #12]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d005      	beq.n	800e94c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e946:	68db      	ldr	r3, [r3, #12]
 800e948:	68f8      	ldr	r0, [r7, #12]
 800e94a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e94c:	2180      	movs	r1, #128	; 0x80
 800e94e:	68f8      	ldr	r0, [r7, #12]
 800e950:	f003 fd42 	bl	80123d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e954:	68f8      	ldr	r0, [r7, #12]
 800e956:	f000 ff49 	bl	800f7ec <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e960:	2b01      	cmp	r3, #1
 800e962:	d122      	bne.n	800e9aa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e964:	68f8      	ldr	r0, [r7, #12]
 800e966:	f7ff fe98 	bl	800e69a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	2200      	movs	r2, #0
 800e96e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e972:	e01a      	b.n	800e9aa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e97a:	b2db      	uxtb	r3, r3
 800e97c:	2b03      	cmp	r3, #3
 800e97e:	d114      	bne.n	800e9aa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e986:	695b      	ldr	r3, [r3, #20]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d00e      	beq.n	800e9aa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e992:	695b      	ldr	r3, [r3, #20]
 800e994:	7afa      	ldrb	r2, [r7, #11]
 800e996:	4611      	mov	r1, r2
 800e998:	68f8      	ldr	r0, [r7, #12]
 800e99a:	4798      	blx	r3
 800e99c:	4603      	mov	r3, r0
 800e99e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e9a0:	7dfb      	ldrb	r3, [r7, #23]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d001      	beq.n	800e9aa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e9a6:	7dfb      	ldrb	r3, [r7, #23]
 800e9a8:	e000      	b.n	800e9ac <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e9aa:	2300      	movs	r3, #0
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3718      	adds	r7, #24
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b082      	sub	sp, #8
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2201      	movs	r2, #1
 800e9c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d101      	bne.n	800e9e8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e9e4:	2303      	movs	r3, #3
 800e9e6:	e02f      	b.n	800ea48 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d00f      	beq.n	800ea12 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9f8:	685b      	ldr	r3, [r3, #4]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d009      	beq.n	800ea12 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	687a      	ldr	r2, [r7, #4]
 800ea08:	6852      	ldr	r2, [r2, #4]
 800ea0a:	b2d2      	uxtb	r2, r2
 800ea0c:	4611      	mov	r1, r2
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ea12:	2340      	movs	r3, #64	; 0x40
 800ea14:	2200      	movs	r2, #0
 800ea16:	2100      	movs	r1, #0
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f003 fc98 	bl	801234e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2201      	movs	r2, #1
 800ea22:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2240      	movs	r2, #64	; 0x40
 800ea2a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ea2e:	2340      	movs	r3, #64	; 0x40
 800ea30:	2200      	movs	r2, #0
 800ea32:	2180      	movs	r1, #128	; 0x80
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f003 fc8a 	bl	801234e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2240      	movs	r2, #64	; 0x40
 800ea44:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ea46:	2300      	movs	r3, #0
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	3708      	adds	r7, #8
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}

0800ea50 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b083      	sub	sp, #12
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
 800ea58:	460b      	mov	r3, r1
 800ea5a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	78fa      	ldrb	r2, [r7, #3]
 800ea60:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ea62:	2300      	movs	r3, #0
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	370c      	adds	r7, #12
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6e:	4770      	bx	lr

0800ea70 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ea70:	b480      	push	{r7}
 800ea72:	b083      	sub	sp, #12
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea7e:	b2da      	uxtb	r2, r3
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2204      	movs	r2, #4
 800ea8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ea8e:	2300      	movs	r3, #0
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	370c      	adds	r7, #12
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr

0800ea9c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	b083      	sub	sp, #12
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eaaa:	b2db      	uxtb	r3, r3
 800eaac:	2b04      	cmp	r3, #4
 800eaae:	d106      	bne.n	800eabe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800eab6:	b2da      	uxtb	r2, r3
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800eabe:	2300      	movs	r3, #0
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	370c      	adds	r7, #12
 800eac4:	46bd      	mov	sp, r7
 800eac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaca:	4770      	bx	lr

0800eacc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b082      	sub	sp, #8
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d101      	bne.n	800eae2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800eade:	2303      	movs	r3, #3
 800eae0:	e012      	b.n	800eb08 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eae8:	b2db      	uxtb	r3, r3
 800eaea:	2b03      	cmp	r3, #3
 800eaec:	d10b      	bne.n	800eb06 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eaf4:	69db      	ldr	r3, [r3, #28]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d005      	beq.n	800eb06 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb00:	69db      	ldr	r3, [r3, #28]
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eb06:	2300      	movs	r3, #0
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3708      	adds	r7, #8
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}

0800eb10 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800eb10:	b480      	push	{r7}
 800eb12:	b087      	sub	sp, #28
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	781b      	ldrb	r3, [r3, #0]
 800eb20:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	3301      	adds	r3, #1
 800eb26:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800eb28:	697b      	ldr	r3, [r7, #20]
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800eb2e:	8a3b      	ldrh	r3, [r7, #16]
 800eb30:	021b      	lsls	r3, r3, #8
 800eb32:	b21a      	sxth	r2, r3
 800eb34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eb38:	4313      	orrs	r3, r2
 800eb3a:	b21b      	sxth	r3, r3
 800eb3c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800eb3e:	89fb      	ldrh	r3, [r7, #14]
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	371c      	adds	r7, #28
 800eb44:	46bd      	mov	sp, r7
 800eb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4a:	4770      	bx	lr

0800eb4c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b084      	sub	sp, #16
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb56:	2300      	movs	r3, #0
 800eb58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	781b      	ldrb	r3, [r3, #0]
 800eb5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb62:	2b40      	cmp	r3, #64	; 0x40
 800eb64:	d005      	beq.n	800eb72 <USBD_StdDevReq+0x26>
 800eb66:	2b40      	cmp	r3, #64	; 0x40
 800eb68:	d853      	bhi.n	800ec12 <USBD_StdDevReq+0xc6>
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d00b      	beq.n	800eb86 <USBD_StdDevReq+0x3a>
 800eb6e:	2b20      	cmp	r3, #32
 800eb70:	d14f      	bne.n	800ec12 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb78:	689b      	ldr	r3, [r3, #8]
 800eb7a:	6839      	ldr	r1, [r7, #0]
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	4798      	blx	r3
 800eb80:	4603      	mov	r3, r0
 800eb82:	73fb      	strb	r3, [r7, #15]
      break;
 800eb84:	e04a      	b.n	800ec1c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	785b      	ldrb	r3, [r3, #1]
 800eb8a:	2b09      	cmp	r3, #9
 800eb8c:	d83b      	bhi.n	800ec06 <USBD_StdDevReq+0xba>
 800eb8e:	a201      	add	r2, pc, #4	; (adr r2, 800eb94 <USBD_StdDevReq+0x48>)
 800eb90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb94:	0800ebe9 	.word	0x0800ebe9
 800eb98:	0800ebfd 	.word	0x0800ebfd
 800eb9c:	0800ec07 	.word	0x0800ec07
 800eba0:	0800ebf3 	.word	0x0800ebf3
 800eba4:	0800ec07 	.word	0x0800ec07
 800eba8:	0800ebc7 	.word	0x0800ebc7
 800ebac:	0800ebbd 	.word	0x0800ebbd
 800ebb0:	0800ec07 	.word	0x0800ec07
 800ebb4:	0800ebdf 	.word	0x0800ebdf
 800ebb8:	0800ebd1 	.word	0x0800ebd1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ebbc:	6839      	ldr	r1, [r7, #0]
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f000 f9de 	bl	800ef80 <USBD_GetDescriptor>
          break;
 800ebc4:	e024      	b.n	800ec10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ebc6:	6839      	ldr	r1, [r7, #0]
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f000 fb6d 	bl	800f2a8 <USBD_SetAddress>
          break;
 800ebce:	e01f      	b.n	800ec10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ebd0:	6839      	ldr	r1, [r7, #0]
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f000 fbac 	bl	800f330 <USBD_SetConfig>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	73fb      	strb	r3, [r7, #15]
          break;
 800ebdc:	e018      	b.n	800ec10 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ebde:	6839      	ldr	r1, [r7, #0]
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f000 fc4b 	bl	800f47c <USBD_GetConfig>
          break;
 800ebe6:	e013      	b.n	800ec10 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ebe8:	6839      	ldr	r1, [r7, #0]
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f000 fc7c 	bl	800f4e8 <USBD_GetStatus>
          break;
 800ebf0:	e00e      	b.n	800ec10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ebf2:	6839      	ldr	r1, [r7, #0]
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f000 fcab 	bl	800f550 <USBD_SetFeature>
          break;
 800ebfa:	e009      	b.n	800ec10 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ebfc:	6839      	ldr	r1, [r7, #0]
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f000 fcba 	bl	800f578 <USBD_ClrFeature>
          break;
 800ec04:	e004      	b.n	800ec10 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ec06:	6839      	ldr	r1, [r7, #0]
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f000 fd11 	bl	800f630 <USBD_CtlError>
          break;
 800ec0e:	bf00      	nop
      }
      break;
 800ec10:	e004      	b.n	800ec1c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ec12:	6839      	ldr	r1, [r7, #0]
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f000 fd0b 	bl	800f630 <USBD_CtlError>
      break;
 800ec1a:	bf00      	nop
  }

  return ret;
 800ec1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3710      	adds	r7, #16
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	bf00      	nop

0800ec28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b084      	sub	sp, #16
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec32:	2300      	movs	r3, #0
 800ec34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	781b      	ldrb	r3, [r3, #0]
 800ec3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ec3e:	2b40      	cmp	r3, #64	; 0x40
 800ec40:	d005      	beq.n	800ec4e <USBD_StdItfReq+0x26>
 800ec42:	2b40      	cmp	r3, #64	; 0x40
 800ec44:	d82f      	bhi.n	800eca6 <USBD_StdItfReq+0x7e>
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d001      	beq.n	800ec4e <USBD_StdItfReq+0x26>
 800ec4a:	2b20      	cmp	r3, #32
 800ec4c:	d12b      	bne.n	800eca6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec54:	b2db      	uxtb	r3, r3
 800ec56:	3b01      	subs	r3, #1
 800ec58:	2b02      	cmp	r3, #2
 800ec5a:	d81d      	bhi.n	800ec98 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	889b      	ldrh	r3, [r3, #4]
 800ec60:	b2db      	uxtb	r3, r3
 800ec62:	2b01      	cmp	r3, #1
 800ec64:	d813      	bhi.n	800ec8e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec6c:	689b      	ldr	r3, [r3, #8]
 800ec6e:	6839      	ldr	r1, [r7, #0]
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	4798      	blx	r3
 800ec74:	4603      	mov	r3, r0
 800ec76:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	88db      	ldrh	r3, [r3, #6]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d110      	bne.n	800eca2 <USBD_StdItfReq+0x7a>
 800ec80:	7bfb      	ldrb	r3, [r7, #15]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d10d      	bne.n	800eca2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f000 fd9d 	bl	800f7c6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ec8c:	e009      	b.n	800eca2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ec8e:	6839      	ldr	r1, [r7, #0]
 800ec90:	6878      	ldr	r0, [r7, #4]
 800ec92:	f000 fccd 	bl	800f630 <USBD_CtlError>
          break;
 800ec96:	e004      	b.n	800eca2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ec98:	6839      	ldr	r1, [r7, #0]
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f000 fcc8 	bl	800f630 <USBD_CtlError>
          break;
 800eca0:	e000      	b.n	800eca4 <USBD_StdItfReq+0x7c>
          break;
 800eca2:	bf00      	nop
      }
      break;
 800eca4:	e004      	b.n	800ecb0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800eca6:	6839      	ldr	r1, [r7, #0]
 800eca8:	6878      	ldr	r0, [r7, #4]
 800ecaa:	f000 fcc1 	bl	800f630 <USBD_CtlError>
      break;
 800ecae:	bf00      	nop
  }

  return ret;
 800ecb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3710      	adds	r7, #16
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}

0800ecba <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecba:	b580      	push	{r7, lr}
 800ecbc:	b084      	sub	sp, #16
 800ecbe:	af00      	add	r7, sp, #0
 800ecc0:	6078      	str	r0, [r7, #4]
 800ecc2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	889b      	ldrh	r3, [r3, #4]
 800eccc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	781b      	ldrb	r3, [r3, #0]
 800ecd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ecd6:	2b40      	cmp	r3, #64	; 0x40
 800ecd8:	d007      	beq.n	800ecea <USBD_StdEPReq+0x30>
 800ecda:	2b40      	cmp	r3, #64	; 0x40
 800ecdc:	f200 8145 	bhi.w	800ef6a <USBD_StdEPReq+0x2b0>
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d00c      	beq.n	800ecfe <USBD_StdEPReq+0x44>
 800ece4:	2b20      	cmp	r3, #32
 800ece6:	f040 8140 	bne.w	800ef6a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecf0:	689b      	ldr	r3, [r3, #8]
 800ecf2:	6839      	ldr	r1, [r7, #0]
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	4798      	blx	r3
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	73fb      	strb	r3, [r7, #15]
      break;
 800ecfc:	e13a      	b.n	800ef74 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	785b      	ldrb	r3, [r3, #1]
 800ed02:	2b03      	cmp	r3, #3
 800ed04:	d007      	beq.n	800ed16 <USBD_StdEPReq+0x5c>
 800ed06:	2b03      	cmp	r3, #3
 800ed08:	f300 8129 	bgt.w	800ef5e <USBD_StdEPReq+0x2a4>
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d07f      	beq.n	800ee10 <USBD_StdEPReq+0x156>
 800ed10:	2b01      	cmp	r3, #1
 800ed12:	d03c      	beq.n	800ed8e <USBD_StdEPReq+0xd4>
 800ed14:	e123      	b.n	800ef5e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed1c:	b2db      	uxtb	r3, r3
 800ed1e:	2b02      	cmp	r3, #2
 800ed20:	d002      	beq.n	800ed28 <USBD_StdEPReq+0x6e>
 800ed22:	2b03      	cmp	r3, #3
 800ed24:	d016      	beq.n	800ed54 <USBD_StdEPReq+0x9a>
 800ed26:	e02c      	b.n	800ed82 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ed28:	7bbb      	ldrb	r3, [r7, #14]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d00d      	beq.n	800ed4a <USBD_StdEPReq+0x90>
 800ed2e:	7bbb      	ldrb	r3, [r7, #14]
 800ed30:	2b80      	cmp	r3, #128	; 0x80
 800ed32:	d00a      	beq.n	800ed4a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ed34:	7bbb      	ldrb	r3, [r7, #14]
 800ed36:	4619      	mov	r1, r3
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f003 fb4d 	bl	80123d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed3e:	2180      	movs	r1, #128	; 0x80
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f003 fb49 	bl	80123d8 <USBD_LL_StallEP>
 800ed46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ed48:	e020      	b.n	800ed8c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ed4a:	6839      	ldr	r1, [r7, #0]
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f000 fc6f 	bl	800f630 <USBD_CtlError>
              break;
 800ed52:	e01b      	b.n	800ed8c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	885b      	ldrh	r3, [r3, #2]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d10e      	bne.n	800ed7a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ed5c:	7bbb      	ldrb	r3, [r7, #14]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d00b      	beq.n	800ed7a <USBD_StdEPReq+0xc0>
 800ed62:	7bbb      	ldrb	r3, [r7, #14]
 800ed64:	2b80      	cmp	r3, #128	; 0x80
 800ed66:	d008      	beq.n	800ed7a <USBD_StdEPReq+0xc0>
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	88db      	ldrh	r3, [r3, #6]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d104      	bne.n	800ed7a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ed70:	7bbb      	ldrb	r3, [r7, #14]
 800ed72:	4619      	mov	r1, r3
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f003 fb2f 	bl	80123d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f000 fd23 	bl	800f7c6 <USBD_CtlSendStatus>

              break;
 800ed80:	e004      	b.n	800ed8c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ed82:	6839      	ldr	r1, [r7, #0]
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f000 fc53 	bl	800f630 <USBD_CtlError>
              break;
 800ed8a:	bf00      	nop
          }
          break;
 800ed8c:	e0ec      	b.n	800ef68 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed94:	b2db      	uxtb	r3, r3
 800ed96:	2b02      	cmp	r3, #2
 800ed98:	d002      	beq.n	800eda0 <USBD_StdEPReq+0xe6>
 800ed9a:	2b03      	cmp	r3, #3
 800ed9c:	d016      	beq.n	800edcc <USBD_StdEPReq+0x112>
 800ed9e:	e030      	b.n	800ee02 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eda0:	7bbb      	ldrb	r3, [r7, #14]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d00d      	beq.n	800edc2 <USBD_StdEPReq+0x108>
 800eda6:	7bbb      	ldrb	r3, [r7, #14]
 800eda8:	2b80      	cmp	r3, #128	; 0x80
 800edaa:	d00a      	beq.n	800edc2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800edac:	7bbb      	ldrb	r3, [r7, #14]
 800edae:	4619      	mov	r1, r3
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f003 fb11 	bl	80123d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800edb6:	2180      	movs	r1, #128	; 0x80
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f003 fb0d 	bl	80123d8 <USBD_LL_StallEP>
 800edbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800edc0:	e025      	b.n	800ee0e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800edc2:	6839      	ldr	r1, [r7, #0]
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f000 fc33 	bl	800f630 <USBD_CtlError>
              break;
 800edca:	e020      	b.n	800ee0e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	885b      	ldrh	r3, [r3, #2]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d11b      	bne.n	800ee0c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800edd4:	7bbb      	ldrb	r3, [r7, #14]
 800edd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d004      	beq.n	800ede8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800edde:	7bbb      	ldrb	r3, [r7, #14]
 800ede0:	4619      	mov	r1, r3
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f003 fb17 	bl	8012416 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f000 fcec 	bl	800f7c6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edf4:	689b      	ldr	r3, [r3, #8]
 800edf6:	6839      	ldr	r1, [r7, #0]
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	4798      	blx	r3
 800edfc:	4603      	mov	r3, r0
 800edfe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ee00:	e004      	b.n	800ee0c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ee02:	6839      	ldr	r1, [r7, #0]
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f000 fc13 	bl	800f630 <USBD_CtlError>
              break;
 800ee0a:	e000      	b.n	800ee0e <USBD_StdEPReq+0x154>
              break;
 800ee0c:	bf00      	nop
          }
          break;
 800ee0e:	e0ab      	b.n	800ef68 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee16:	b2db      	uxtb	r3, r3
 800ee18:	2b02      	cmp	r3, #2
 800ee1a:	d002      	beq.n	800ee22 <USBD_StdEPReq+0x168>
 800ee1c:	2b03      	cmp	r3, #3
 800ee1e:	d032      	beq.n	800ee86 <USBD_StdEPReq+0x1cc>
 800ee20:	e097      	b.n	800ef52 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee22:	7bbb      	ldrb	r3, [r7, #14]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d007      	beq.n	800ee38 <USBD_StdEPReq+0x17e>
 800ee28:	7bbb      	ldrb	r3, [r7, #14]
 800ee2a:	2b80      	cmp	r3, #128	; 0x80
 800ee2c:	d004      	beq.n	800ee38 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ee2e:	6839      	ldr	r1, [r7, #0]
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f000 fbfd 	bl	800f630 <USBD_CtlError>
                break;
 800ee36:	e091      	b.n	800ef5c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	da0b      	bge.n	800ee58 <USBD_StdEPReq+0x19e>
 800ee40:	7bbb      	ldrb	r3, [r7, #14]
 800ee42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ee46:	4613      	mov	r3, r2
 800ee48:	009b      	lsls	r3, r3, #2
 800ee4a:	4413      	add	r3, r2
 800ee4c:	009b      	lsls	r3, r3, #2
 800ee4e:	3310      	adds	r3, #16
 800ee50:	687a      	ldr	r2, [r7, #4]
 800ee52:	4413      	add	r3, r2
 800ee54:	3304      	adds	r3, #4
 800ee56:	e00b      	b.n	800ee70 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ee58:	7bbb      	ldrb	r3, [r7, #14]
 800ee5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee5e:	4613      	mov	r3, r2
 800ee60:	009b      	lsls	r3, r3, #2
 800ee62:	4413      	add	r3, r2
 800ee64:	009b      	lsls	r3, r3, #2
 800ee66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ee6a:	687a      	ldr	r2, [r7, #4]
 800ee6c:	4413      	add	r3, r2
 800ee6e:	3304      	adds	r3, #4
 800ee70:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	2200      	movs	r2, #0
 800ee76:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ee78:	68bb      	ldr	r3, [r7, #8]
 800ee7a:	2202      	movs	r2, #2
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f000 fc47 	bl	800f712 <USBD_CtlSendData>
              break;
 800ee84:	e06a      	b.n	800ef5c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ee86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	da11      	bge.n	800eeb2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ee8e:	7bbb      	ldrb	r3, [r7, #14]
 800ee90:	f003 020f 	and.w	r2, r3, #15
 800ee94:	6879      	ldr	r1, [r7, #4]
 800ee96:	4613      	mov	r3, r2
 800ee98:	009b      	lsls	r3, r3, #2
 800ee9a:	4413      	add	r3, r2
 800ee9c:	009b      	lsls	r3, r3, #2
 800ee9e:	440b      	add	r3, r1
 800eea0:	3324      	adds	r3, #36	; 0x24
 800eea2:	881b      	ldrh	r3, [r3, #0]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d117      	bne.n	800eed8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800eea8:	6839      	ldr	r1, [r7, #0]
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f000 fbc0 	bl	800f630 <USBD_CtlError>
                  break;
 800eeb0:	e054      	b.n	800ef5c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800eeb2:	7bbb      	ldrb	r3, [r7, #14]
 800eeb4:	f003 020f 	and.w	r2, r3, #15
 800eeb8:	6879      	ldr	r1, [r7, #4]
 800eeba:	4613      	mov	r3, r2
 800eebc:	009b      	lsls	r3, r3, #2
 800eebe:	4413      	add	r3, r2
 800eec0:	009b      	lsls	r3, r3, #2
 800eec2:	440b      	add	r3, r1
 800eec4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800eec8:	881b      	ldrh	r3, [r3, #0]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d104      	bne.n	800eed8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800eece:	6839      	ldr	r1, [r7, #0]
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f000 fbad 	bl	800f630 <USBD_CtlError>
                  break;
 800eed6:	e041      	b.n	800ef5c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eed8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	da0b      	bge.n	800eef8 <USBD_StdEPReq+0x23e>
 800eee0:	7bbb      	ldrb	r3, [r7, #14]
 800eee2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eee6:	4613      	mov	r3, r2
 800eee8:	009b      	lsls	r3, r3, #2
 800eeea:	4413      	add	r3, r2
 800eeec:	009b      	lsls	r3, r3, #2
 800eeee:	3310      	adds	r3, #16
 800eef0:	687a      	ldr	r2, [r7, #4]
 800eef2:	4413      	add	r3, r2
 800eef4:	3304      	adds	r3, #4
 800eef6:	e00b      	b.n	800ef10 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800eef8:	7bbb      	ldrb	r3, [r7, #14]
 800eefa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eefe:	4613      	mov	r3, r2
 800ef00:	009b      	lsls	r3, r3, #2
 800ef02:	4413      	add	r3, r2
 800ef04:	009b      	lsls	r3, r3, #2
 800ef06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ef0a:	687a      	ldr	r2, [r7, #4]
 800ef0c:	4413      	add	r3, r2
 800ef0e:	3304      	adds	r3, #4
 800ef10:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ef12:	7bbb      	ldrb	r3, [r7, #14]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d002      	beq.n	800ef1e <USBD_StdEPReq+0x264>
 800ef18:	7bbb      	ldrb	r3, [r7, #14]
 800ef1a:	2b80      	cmp	r3, #128	; 0x80
 800ef1c:	d103      	bne.n	800ef26 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	2200      	movs	r2, #0
 800ef22:	601a      	str	r2, [r3, #0]
 800ef24:	e00e      	b.n	800ef44 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ef26:	7bbb      	ldrb	r3, [r7, #14]
 800ef28:	4619      	mov	r1, r3
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	f003 fa92 	bl	8012454 <USBD_LL_IsStallEP>
 800ef30:	4603      	mov	r3, r0
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d003      	beq.n	800ef3e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	2201      	movs	r2, #1
 800ef3a:	601a      	str	r2, [r3, #0]
 800ef3c:	e002      	b.n	800ef44 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	2200      	movs	r2, #0
 800ef42:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	2202      	movs	r2, #2
 800ef48:	4619      	mov	r1, r3
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f000 fbe1 	bl	800f712 <USBD_CtlSendData>
              break;
 800ef50:	e004      	b.n	800ef5c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ef52:	6839      	ldr	r1, [r7, #0]
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f000 fb6b 	bl	800f630 <USBD_CtlError>
              break;
 800ef5a:	bf00      	nop
          }
          break;
 800ef5c:	e004      	b.n	800ef68 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ef5e:	6839      	ldr	r1, [r7, #0]
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	f000 fb65 	bl	800f630 <USBD_CtlError>
          break;
 800ef66:	bf00      	nop
      }
      break;
 800ef68:	e004      	b.n	800ef74 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ef6a:	6839      	ldr	r1, [r7, #0]
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f000 fb5f 	bl	800f630 <USBD_CtlError>
      break;
 800ef72:	bf00      	nop
  }

  return ret;
 800ef74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef76:	4618      	mov	r0, r3
 800ef78:	3710      	adds	r7, #16
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd80      	pop	{r7, pc}
	...

0800ef80 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b084      	sub	sp, #16
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
 800ef88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ef92:	2300      	movs	r3, #0
 800ef94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	885b      	ldrh	r3, [r3, #2]
 800ef9a:	0a1b      	lsrs	r3, r3, #8
 800ef9c:	b29b      	uxth	r3, r3
 800ef9e:	3b01      	subs	r3, #1
 800efa0:	2b0e      	cmp	r3, #14
 800efa2:	f200 8152 	bhi.w	800f24a <USBD_GetDescriptor+0x2ca>
 800efa6:	a201      	add	r2, pc, #4	; (adr r2, 800efac <USBD_GetDescriptor+0x2c>)
 800efa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efac:	0800f01d 	.word	0x0800f01d
 800efb0:	0800f035 	.word	0x0800f035
 800efb4:	0800f075 	.word	0x0800f075
 800efb8:	0800f24b 	.word	0x0800f24b
 800efbc:	0800f24b 	.word	0x0800f24b
 800efc0:	0800f1eb 	.word	0x0800f1eb
 800efc4:	0800f217 	.word	0x0800f217
 800efc8:	0800f24b 	.word	0x0800f24b
 800efcc:	0800f24b 	.word	0x0800f24b
 800efd0:	0800f24b 	.word	0x0800f24b
 800efd4:	0800f24b 	.word	0x0800f24b
 800efd8:	0800f24b 	.word	0x0800f24b
 800efdc:	0800f24b 	.word	0x0800f24b
 800efe0:	0800f24b 	.word	0x0800f24b
 800efe4:	0800efe9 	.word	0x0800efe9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efee:	69db      	ldr	r3, [r3, #28]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d00b      	beq.n	800f00c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800effa:	69db      	ldr	r3, [r3, #28]
 800effc:	687a      	ldr	r2, [r7, #4]
 800effe:	7c12      	ldrb	r2, [r2, #16]
 800f000:	f107 0108 	add.w	r1, r7, #8
 800f004:	4610      	mov	r0, r2
 800f006:	4798      	blx	r3
 800f008:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f00a:	e126      	b.n	800f25a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f00c:	6839      	ldr	r1, [r7, #0]
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f000 fb0e 	bl	800f630 <USBD_CtlError>
        err++;
 800f014:	7afb      	ldrb	r3, [r7, #11]
 800f016:	3301      	adds	r3, #1
 800f018:	72fb      	strb	r3, [r7, #11]
      break;
 800f01a:	e11e      	b.n	800f25a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	687a      	ldr	r2, [r7, #4]
 800f026:	7c12      	ldrb	r2, [r2, #16]
 800f028:	f107 0108 	add.w	r1, r7, #8
 800f02c:	4610      	mov	r0, r2
 800f02e:	4798      	blx	r3
 800f030:	60f8      	str	r0, [r7, #12]
      break;
 800f032:	e112      	b.n	800f25a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	7c1b      	ldrb	r3, [r3, #16]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d10d      	bne.n	800f058 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f044:	f107 0208 	add.w	r2, r7, #8
 800f048:	4610      	mov	r0, r2
 800f04a:	4798      	blx	r3
 800f04c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	3301      	adds	r3, #1
 800f052:	2202      	movs	r2, #2
 800f054:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f056:	e100      	b.n	800f25a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f060:	f107 0208 	add.w	r2, r7, #8
 800f064:	4610      	mov	r0, r2
 800f066:	4798      	blx	r3
 800f068:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	3301      	adds	r3, #1
 800f06e:	2202      	movs	r2, #2
 800f070:	701a      	strb	r2, [r3, #0]
      break;
 800f072:	e0f2      	b.n	800f25a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	885b      	ldrh	r3, [r3, #2]
 800f078:	b2db      	uxtb	r3, r3
 800f07a:	2b05      	cmp	r3, #5
 800f07c:	f200 80ac 	bhi.w	800f1d8 <USBD_GetDescriptor+0x258>
 800f080:	a201      	add	r2, pc, #4	; (adr r2, 800f088 <USBD_GetDescriptor+0x108>)
 800f082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f086:	bf00      	nop
 800f088:	0800f0a1 	.word	0x0800f0a1
 800f08c:	0800f0d5 	.word	0x0800f0d5
 800f090:	0800f109 	.word	0x0800f109
 800f094:	0800f13d 	.word	0x0800f13d
 800f098:	0800f171 	.word	0x0800f171
 800f09c:	0800f1a5 	.word	0x0800f1a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0a6:	685b      	ldr	r3, [r3, #4]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d00b      	beq.n	800f0c4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0b2:	685b      	ldr	r3, [r3, #4]
 800f0b4:	687a      	ldr	r2, [r7, #4]
 800f0b6:	7c12      	ldrb	r2, [r2, #16]
 800f0b8:	f107 0108 	add.w	r1, r7, #8
 800f0bc:	4610      	mov	r0, r2
 800f0be:	4798      	blx	r3
 800f0c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f0c2:	e091      	b.n	800f1e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f0c4:	6839      	ldr	r1, [r7, #0]
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f000 fab2 	bl	800f630 <USBD_CtlError>
            err++;
 800f0cc:	7afb      	ldrb	r3, [r7, #11]
 800f0ce:	3301      	adds	r3, #1
 800f0d0:	72fb      	strb	r3, [r7, #11]
          break;
 800f0d2:	e089      	b.n	800f1e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0da:	689b      	ldr	r3, [r3, #8]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d00b      	beq.n	800f0f8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0e6:	689b      	ldr	r3, [r3, #8]
 800f0e8:	687a      	ldr	r2, [r7, #4]
 800f0ea:	7c12      	ldrb	r2, [r2, #16]
 800f0ec:	f107 0108 	add.w	r1, r7, #8
 800f0f0:	4610      	mov	r0, r2
 800f0f2:	4798      	blx	r3
 800f0f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f0f6:	e077      	b.n	800f1e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f0f8:	6839      	ldr	r1, [r7, #0]
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f000 fa98 	bl	800f630 <USBD_CtlError>
            err++;
 800f100:	7afb      	ldrb	r3, [r7, #11]
 800f102:	3301      	adds	r3, #1
 800f104:	72fb      	strb	r3, [r7, #11]
          break;
 800f106:	e06f      	b.n	800f1e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f10e:	68db      	ldr	r3, [r3, #12]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d00b      	beq.n	800f12c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f11a:	68db      	ldr	r3, [r3, #12]
 800f11c:	687a      	ldr	r2, [r7, #4]
 800f11e:	7c12      	ldrb	r2, [r2, #16]
 800f120:	f107 0108 	add.w	r1, r7, #8
 800f124:	4610      	mov	r0, r2
 800f126:	4798      	blx	r3
 800f128:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f12a:	e05d      	b.n	800f1e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f12c:	6839      	ldr	r1, [r7, #0]
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f000 fa7e 	bl	800f630 <USBD_CtlError>
            err++;
 800f134:	7afb      	ldrb	r3, [r7, #11]
 800f136:	3301      	adds	r3, #1
 800f138:	72fb      	strb	r3, [r7, #11]
          break;
 800f13a:	e055      	b.n	800f1e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f142:	691b      	ldr	r3, [r3, #16]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d00b      	beq.n	800f160 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f14e:	691b      	ldr	r3, [r3, #16]
 800f150:	687a      	ldr	r2, [r7, #4]
 800f152:	7c12      	ldrb	r2, [r2, #16]
 800f154:	f107 0108 	add.w	r1, r7, #8
 800f158:	4610      	mov	r0, r2
 800f15a:	4798      	blx	r3
 800f15c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f15e:	e043      	b.n	800f1e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f160:	6839      	ldr	r1, [r7, #0]
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f000 fa64 	bl	800f630 <USBD_CtlError>
            err++;
 800f168:	7afb      	ldrb	r3, [r7, #11]
 800f16a:	3301      	adds	r3, #1
 800f16c:	72fb      	strb	r3, [r7, #11]
          break;
 800f16e:	e03b      	b.n	800f1e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f176:	695b      	ldr	r3, [r3, #20]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d00b      	beq.n	800f194 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f182:	695b      	ldr	r3, [r3, #20]
 800f184:	687a      	ldr	r2, [r7, #4]
 800f186:	7c12      	ldrb	r2, [r2, #16]
 800f188:	f107 0108 	add.w	r1, r7, #8
 800f18c:	4610      	mov	r0, r2
 800f18e:	4798      	blx	r3
 800f190:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f192:	e029      	b.n	800f1e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f194:	6839      	ldr	r1, [r7, #0]
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f000 fa4a 	bl	800f630 <USBD_CtlError>
            err++;
 800f19c:	7afb      	ldrb	r3, [r7, #11]
 800f19e:	3301      	adds	r3, #1
 800f1a0:	72fb      	strb	r3, [r7, #11]
          break;
 800f1a2:	e021      	b.n	800f1e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1aa:	699b      	ldr	r3, [r3, #24]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d00b      	beq.n	800f1c8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1b6:	699b      	ldr	r3, [r3, #24]
 800f1b8:	687a      	ldr	r2, [r7, #4]
 800f1ba:	7c12      	ldrb	r2, [r2, #16]
 800f1bc:	f107 0108 	add.w	r1, r7, #8
 800f1c0:	4610      	mov	r0, r2
 800f1c2:	4798      	blx	r3
 800f1c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f1c6:	e00f      	b.n	800f1e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f1c8:	6839      	ldr	r1, [r7, #0]
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f000 fa30 	bl	800f630 <USBD_CtlError>
            err++;
 800f1d0:	7afb      	ldrb	r3, [r7, #11]
 800f1d2:	3301      	adds	r3, #1
 800f1d4:	72fb      	strb	r3, [r7, #11]
          break;
 800f1d6:	e007      	b.n	800f1e8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f1d8:	6839      	ldr	r1, [r7, #0]
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f000 fa28 	bl	800f630 <USBD_CtlError>
          err++;
 800f1e0:	7afb      	ldrb	r3, [r7, #11]
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f1e6:	bf00      	nop
      }
      break;
 800f1e8:	e037      	b.n	800f25a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	7c1b      	ldrb	r3, [r3, #16]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d109      	bne.n	800f206 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1fa:	f107 0208 	add.w	r2, r7, #8
 800f1fe:	4610      	mov	r0, r2
 800f200:	4798      	blx	r3
 800f202:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f204:	e029      	b.n	800f25a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f206:	6839      	ldr	r1, [r7, #0]
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	f000 fa11 	bl	800f630 <USBD_CtlError>
        err++;
 800f20e:	7afb      	ldrb	r3, [r7, #11]
 800f210:	3301      	adds	r3, #1
 800f212:	72fb      	strb	r3, [r7, #11]
      break;
 800f214:	e021      	b.n	800f25a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	7c1b      	ldrb	r3, [r3, #16]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d10d      	bne.n	800f23a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f226:	f107 0208 	add.w	r2, r7, #8
 800f22a:	4610      	mov	r0, r2
 800f22c:	4798      	blx	r3
 800f22e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	3301      	adds	r3, #1
 800f234:	2207      	movs	r2, #7
 800f236:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f238:	e00f      	b.n	800f25a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f23a:	6839      	ldr	r1, [r7, #0]
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f000 f9f7 	bl	800f630 <USBD_CtlError>
        err++;
 800f242:	7afb      	ldrb	r3, [r7, #11]
 800f244:	3301      	adds	r3, #1
 800f246:	72fb      	strb	r3, [r7, #11]
      break;
 800f248:	e007      	b.n	800f25a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f24a:	6839      	ldr	r1, [r7, #0]
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f000 f9ef 	bl	800f630 <USBD_CtlError>
      err++;
 800f252:	7afb      	ldrb	r3, [r7, #11]
 800f254:	3301      	adds	r3, #1
 800f256:	72fb      	strb	r3, [r7, #11]
      break;
 800f258:	bf00      	nop
  }

  if (err != 0U)
 800f25a:	7afb      	ldrb	r3, [r7, #11]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d11e      	bne.n	800f29e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	88db      	ldrh	r3, [r3, #6]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d016      	beq.n	800f296 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f268:	893b      	ldrh	r3, [r7, #8]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d00e      	beq.n	800f28c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	88da      	ldrh	r2, [r3, #6]
 800f272:	893b      	ldrh	r3, [r7, #8]
 800f274:	4293      	cmp	r3, r2
 800f276:	bf28      	it	cs
 800f278:	4613      	movcs	r3, r2
 800f27a:	b29b      	uxth	r3, r3
 800f27c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f27e:	893b      	ldrh	r3, [r7, #8]
 800f280:	461a      	mov	r2, r3
 800f282:	68f9      	ldr	r1, [r7, #12]
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f000 fa44 	bl	800f712 <USBD_CtlSendData>
 800f28a:	e009      	b.n	800f2a0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f28c:	6839      	ldr	r1, [r7, #0]
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f000 f9ce 	bl	800f630 <USBD_CtlError>
 800f294:	e004      	b.n	800f2a0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f000 fa95 	bl	800f7c6 <USBD_CtlSendStatus>
 800f29c:	e000      	b.n	800f2a0 <USBD_GetDescriptor+0x320>
    return;
 800f29e:	bf00      	nop
  }
}
 800f2a0:	3710      	adds	r7, #16
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}
 800f2a6:	bf00      	nop

0800f2a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b084      	sub	sp, #16
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
 800f2b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	889b      	ldrh	r3, [r3, #4]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d131      	bne.n	800f31e <USBD_SetAddress+0x76>
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	88db      	ldrh	r3, [r3, #6]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d12d      	bne.n	800f31e <USBD_SetAddress+0x76>
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	885b      	ldrh	r3, [r3, #2]
 800f2c6:	2b7f      	cmp	r3, #127	; 0x7f
 800f2c8:	d829      	bhi.n	800f31e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	885b      	ldrh	r3, [r3, #2]
 800f2ce:	b2db      	uxtb	r3, r3
 800f2d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2dc:	b2db      	uxtb	r3, r3
 800f2de:	2b03      	cmp	r3, #3
 800f2e0:	d104      	bne.n	800f2ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f2e2:	6839      	ldr	r1, [r7, #0]
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f000 f9a3 	bl	800f630 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2ea:	e01d      	b.n	800f328 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	7bfa      	ldrb	r2, [r7, #15]
 800f2f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f2f4:	7bfb      	ldrb	r3, [r7, #15]
 800f2f6:	4619      	mov	r1, r3
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f003 f8d8 	bl	80124ae <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f000 fa61 	bl	800f7c6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f304:	7bfb      	ldrb	r3, [r7, #15]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d004      	beq.n	800f314 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2202      	movs	r2, #2
 800f30e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f312:	e009      	b.n	800f328 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2201      	movs	r2, #1
 800f318:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f31c:	e004      	b.n	800f328 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f31e:	6839      	ldr	r1, [r7, #0]
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f000 f985 	bl	800f630 <USBD_CtlError>
  }
}
 800f326:	bf00      	nop
 800f328:	bf00      	nop
 800f32a:	3710      	adds	r7, #16
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}

0800f330 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b084      	sub	sp, #16
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f33a:	2300      	movs	r3, #0
 800f33c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	885b      	ldrh	r3, [r3, #2]
 800f342:	b2da      	uxtb	r2, r3
 800f344:	4b4c      	ldr	r3, [pc, #304]	; (800f478 <USBD_SetConfig+0x148>)
 800f346:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f348:	4b4b      	ldr	r3, [pc, #300]	; (800f478 <USBD_SetConfig+0x148>)
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	2b01      	cmp	r3, #1
 800f34e:	d905      	bls.n	800f35c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f350:	6839      	ldr	r1, [r7, #0]
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f000 f96c 	bl	800f630 <USBD_CtlError>
    return USBD_FAIL;
 800f358:	2303      	movs	r3, #3
 800f35a:	e088      	b.n	800f46e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f362:	b2db      	uxtb	r3, r3
 800f364:	2b02      	cmp	r3, #2
 800f366:	d002      	beq.n	800f36e <USBD_SetConfig+0x3e>
 800f368:	2b03      	cmp	r3, #3
 800f36a:	d025      	beq.n	800f3b8 <USBD_SetConfig+0x88>
 800f36c:	e071      	b.n	800f452 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f36e:	4b42      	ldr	r3, [pc, #264]	; (800f478 <USBD_SetConfig+0x148>)
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d01c      	beq.n	800f3b0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f376:	4b40      	ldr	r3, [pc, #256]	; (800f478 <USBD_SetConfig+0x148>)
 800f378:	781b      	ldrb	r3, [r3, #0]
 800f37a:	461a      	mov	r2, r3
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f380:	4b3d      	ldr	r3, [pc, #244]	; (800f478 <USBD_SetConfig+0x148>)
 800f382:	781b      	ldrb	r3, [r3, #0]
 800f384:	4619      	mov	r1, r3
 800f386:	6878      	ldr	r0, [r7, #4]
 800f388:	f7ff f992 	bl	800e6b0 <USBD_SetClassConfig>
 800f38c:	4603      	mov	r3, r0
 800f38e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f390:	7bfb      	ldrb	r3, [r7, #15]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d004      	beq.n	800f3a0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f396:	6839      	ldr	r1, [r7, #0]
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f000 f949 	bl	800f630 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f39e:	e065      	b.n	800f46c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f000 fa10 	bl	800f7c6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2203      	movs	r2, #3
 800f3aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f3ae:	e05d      	b.n	800f46c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f000 fa08 	bl	800f7c6 <USBD_CtlSendStatus>
      break;
 800f3b6:	e059      	b.n	800f46c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f3b8:	4b2f      	ldr	r3, [pc, #188]	; (800f478 <USBD_SetConfig+0x148>)
 800f3ba:	781b      	ldrb	r3, [r3, #0]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d112      	bne.n	800f3e6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	2202      	movs	r2, #2
 800f3c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f3c8:	4b2b      	ldr	r3, [pc, #172]	; (800f478 <USBD_SetConfig+0x148>)
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	461a      	mov	r2, r3
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f3d2:	4b29      	ldr	r3, [pc, #164]	; (800f478 <USBD_SetConfig+0x148>)
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	4619      	mov	r1, r3
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f7ff f985 	bl	800e6e8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f000 f9f1 	bl	800f7c6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f3e4:	e042      	b.n	800f46c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f3e6:	4b24      	ldr	r3, [pc, #144]	; (800f478 <USBD_SetConfig+0x148>)
 800f3e8:	781b      	ldrb	r3, [r3, #0]
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	685b      	ldr	r3, [r3, #4]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d02a      	beq.n	800f44a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	685b      	ldr	r3, [r3, #4]
 800f3f8:	b2db      	uxtb	r3, r3
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f7ff f973 	bl	800e6e8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f402:	4b1d      	ldr	r3, [pc, #116]	; (800f478 <USBD_SetConfig+0x148>)
 800f404:	781b      	ldrb	r3, [r3, #0]
 800f406:	461a      	mov	r2, r3
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f40c:	4b1a      	ldr	r3, [pc, #104]	; (800f478 <USBD_SetConfig+0x148>)
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	4619      	mov	r1, r3
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f7ff f94c 	bl	800e6b0 <USBD_SetClassConfig>
 800f418:	4603      	mov	r3, r0
 800f41a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f41c:	7bfb      	ldrb	r3, [r7, #15]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d00f      	beq.n	800f442 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f422:	6839      	ldr	r1, [r7, #0]
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f000 f903 	bl	800f630 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	685b      	ldr	r3, [r3, #4]
 800f42e:	b2db      	uxtb	r3, r3
 800f430:	4619      	mov	r1, r3
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f7ff f958 	bl	800e6e8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2202      	movs	r2, #2
 800f43c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f440:	e014      	b.n	800f46c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f442:	6878      	ldr	r0, [r7, #4]
 800f444:	f000 f9bf 	bl	800f7c6 <USBD_CtlSendStatus>
      break;
 800f448:	e010      	b.n	800f46c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f000 f9bb 	bl	800f7c6 <USBD_CtlSendStatus>
      break;
 800f450:	e00c      	b.n	800f46c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f452:	6839      	ldr	r1, [r7, #0]
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f000 f8eb 	bl	800f630 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f45a:	4b07      	ldr	r3, [pc, #28]	; (800f478 <USBD_SetConfig+0x148>)
 800f45c:	781b      	ldrb	r3, [r3, #0]
 800f45e:	4619      	mov	r1, r3
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f7ff f941 	bl	800e6e8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f466:	2303      	movs	r3, #3
 800f468:	73fb      	strb	r3, [r7, #15]
      break;
 800f46a:	bf00      	nop
  }

  return ret;
 800f46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3710      	adds	r7, #16
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}
 800f476:	bf00      	nop
 800f478:	20000960 	.word	0x20000960

0800f47c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b082      	sub	sp, #8
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
 800f484:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	88db      	ldrh	r3, [r3, #6]
 800f48a:	2b01      	cmp	r3, #1
 800f48c:	d004      	beq.n	800f498 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f48e:	6839      	ldr	r1, [r7, #0]
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f000 f8cd 	bl	800f630 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f496:	e023      	b.n	800f4e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f49e:	b2db      	uxtb	r3, r3
 800f4a0:	2b02      	cmp	r3, #2
 800f4a2:	dc02      	bgt.n	800f4aa <USBD_GetConfig+0x2e>
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	dc03      	bgt.n	800f4b0 <USBD_GetConfig+0x34>
 800f4a8:	e015      	b.n	800f4d6 <USBD_GetConfig+0x5a>
 800f4aa:	2b03      	cmp	r3, #3
 800f4ac:	d00b      	beq.n	800f4c6 <USBD_GetConfig+0x4a>
 800f4ae:	e012      	b.n	800f4d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	3308      	adds	r3, #8
 800f4ba:	2201      	movs	r2, #1
 800f4bc:	4619      	mov	r1, r3
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f000 f927 	bl	800f712 <USBD_CtlSendData>
        break;
 800f4c4:	e00c      	b.n	800f4e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	3304      	adds	r3, #4
 800f4ca:	2201      	movs	r2, #1
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f000 f91f 	bl	800f712 <USBD_CtlSendData>
        break;
 800f4d4:	e004      	b.n	800f4e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f4d6:	6839      	ldr	r1, [r7, #0]
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f000 f8a9 	bl	800f630 <USBD_CtlError>
        break;
 800f4de:	bf00      	nop
}
 800f4e0:	bf00      	nop
 800f4e2:	3708      	adds	r7, #8
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}

0800f4e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b082      	sub	sp, #8
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4f8:	b2db      	uxtb	r3, r3
 800f4fa:	3b01      	subs	r3, #1
 800f4fc:	2b02      	cmp	r3, #2
 800f4fe:	d81e      	bhi.n	800f53e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	88db      	ldrh	r3, [r3, #6]
 800f504:	2b02      	cmp	r3, #2
 800f506:	d004      	beq.n	800f512 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f508:	6839      	ldr	r1, [r7, #0]
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f000 f890 	bl	800f630 <USBD_CtlError>
        break;
 800f510:	e01a      	b.n	800f548 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	2201      	movs	r2, #1
 800f516:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d005      	beq.n	800f52e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	68db      	ldr	r3, [r3, #12]
 800f526:	f043 0202 	orr.w	r2, r3, #2
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	330c      	adds	r3, #12
 800f532:	2202      	movs	r2, #2
 800f534:	4619      	mov	r1, r3
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f000 f8eb 	bl	800f712 <USBD_CtlSendData>
      break;
 800f53c:	e004      	b.n	800f548 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f53e:	6839      	ldr	r1, [r7, #0]
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f000 f875 	bl	800f630 <USBD_CtlError>
      break;
 800f546:	bf00      	nop
  }
}
 800f548:	bf00      	nop
 800f54a:	3708      	adds	r7, #8
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}

0800f550 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b082      	sub	sp, #8
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
 800f558:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	885b      	ldrh	r3, [r3, #2]
 800f55e:	2b01      	cmp	r3, #1
 800f560:	d106      	bne.n	800f570 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	2201      	movs	r2, #1
 800f566:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f000 f92b 	bl	800f7c6 <USBD_CtlSendStatus>
  }
}
 800f570:	bf00      	nop
 800f572:	3708      	adds	r7, #8
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}

0800f578 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
 800f580:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f588:	b2db      	uxtb	r3, r3
 800f58a:	3b01      	subs	r3, #1
 800f58c:	2b02      	cmp	r3, #2
 800f58e:	d80b      	bhi.n	800f5a8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	885b      	ldrh	r3, [r3, #2]
 800f594:	2b01      	cmp	r3, #1
 800f596:	d10c      	bne.n	800f5b2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2200      	movs	r2, #0
 800f59c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f000 f910 	bl	800f7c6 <USBD_CtlSendStatus>
      }
      break;
 800f5a6:	e004      	b.n	800f5b2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f5a8:	6839      	ldr	r1, [r7, #0]
 800f5aa:	6878      	ldr	r0, [r7, #4]
 800f5ac:	f000 f840 	bl	800f630 <USBD_CtlError>
      break;
 800f5b0:	e000      	b.n	800f5b4 <USBD_ClrFeature+0x3c>
      break;
 800f5b2:	bf00      	nop
  }
}
 800f5b4:	bf00      	nop
 800f5b6:	3708      	adds	r7, #8
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}

0800f5bc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b084      	sub	sp, #16
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	781a      	ldrb	r2, [r3, #0]
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	3301      	adds	r3, #1
 800f5d6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	781a      	ldrb	r2, [r3, #0]
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	3301      	adds	r3, #1
 800f5e4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f5e6:	68f8      	ldr	r0, [r7, #12]
 800f5e8:	f7ff fa92 	bl	800eb10 <SWAPBYTE>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	461a      	mov	r2, r3
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	3301      	adds	r3, #1
 800f5f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	3301      	adds	r3, #1
 800f5fe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f600:	68f8      	ldr	r0, [r7, #12]
 800f602:	f7ff fa85 	bl	800eb10 <SWAPBYTE>
 800f606:	4603      	mov	r3, r0
 800f608:	461a      	mov	r2, r3
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	3301      	adds	r3, #1
 800f612:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	3301      	adds	r3, #1
 800f618:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f61a:	68f8      	ldr	r0, [r7, #12]
 800f61c:	f7ff fa78 	bl	800eb10 <SWAPBYTE>
 800f620:	4603      	mov	r3, r0
 800f622:	461a      	mov	r2, r3
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	80da      	strh	r2, [r3, #6]
}
 800f628:	bf00      	nop
 800f62a:	3710      	adds	r7, #16
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}

0800f630 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b082      	sub	sp, #8
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
 800f638:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f63a:	2180      	movs	r1, #128	; 0x80
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f002 fecb 	bl	80123d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f642:	2100      	movs	r1, #0
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f002 fec7 	bl	80123d8 <USBD_LL_StallEP>
}
 800f64a:	bf00      	nop
 800f64c:	3708      	adds	r7, #8
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd80      	pop	{r7, pc}

0800f652 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f652:	b580      	push	{r7, lr}
 800f654:	b086      	sub	sp, #24
 800f656:	af00      	add	r7, sp, #0
 800f658:	60f8      	str	r0, [r7, #12]
 800f65a:	60b9      	str	r1, [r7, #8]
 800f65c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f65e:	2300      	movs	r3, #0
 800f660:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d036      	beq.n	800f6d6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f66c:	6938      	ldr	r0, [r7, #16]
 800f66e:	f000 f836 	bl	800f6de <USBD_GetLen>
 800f672:	4603      	mov	r3, r0
 800f674:	3301      	adds	r3, #1
 800f676:	b29b      	uxth	r3, r3
 800f678:	005b      	lsls	r3, r3, #1
 800f67a:	b29a      	uxth	r2, r3
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f680:	7dfb      	ldrb	r3, [r7, #23]
 800f682:	68ba      	ldr	r2, [r7, #8]
 800f684:	4413      	add	r3, r2
 800f686:	687a      	ldr	r2, [r7, #4]
 800f688:	7812      	ldrb	r2, [r2, #0]
 800f68a:	701a      	strb	r2, [r3, #0]
  idx++;
 800f68c:	7dfb      	ldrb	r3, [r7, #23]
 800f68e:	3301      	adds	r3, #1
 800f690:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f692:	7dfb      	ldrb	r3, [r7, #23]
 800f694:	68ba      	ldr	r2, [r7, #8]
 800f696:	4413      	add	r3, r2
 800f698:	2203      	movs	r2, #3
 800f69a:	701a      	strb	r2, [r3, #0]
  idx++;
 800f69c:	7dfb      	ldrb	r3, [r7, #23]
 800f69e:	3301      	adds	r3, #1
 800f6a0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f6a2:	e013      	b.n	800f6cc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f6a4:	7dfb      	ldrb	r3, [r7, #23]
 800f6a6:	68ba      	ldr	r2, [r7, #8]
 800f6a8:	4413      	add	r3, r2
 800f6aa:	693a      	ldr	r2, [r7, #16]
 800f6ac:	7812      	ldrb	r2, [r2, #0]
 800f6ae:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f6b0:	693b      	ldr	r3, [r7, #16]
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	613b      	str	r3, [r7, #16]
    idx++;
 800f6b6:	7dfb      	ldrb	r3, [r7, #23]
 800f6b8:	3301      	adds	r3, #1
 800f6ba:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f6bc:	7dfb      	ldrb	r3, [r7, #23]
 800f6be:	68ba      	ldr	r2, [r7, #8]
 800f6c0:	4413      	add	r3, r2
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	701a      	strb	r2, [r3, #0]
    idx++;
 800f6c6:	7dfb      	ldrb	r3, [r7, #23]
 800f6c8:	3301      	adds	r3, #1
 800f6ca:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f6cc:	693b      	ldr	r3, [r7, #16]
 800f6ce:	781b      	ldrb	r3, [r3, #0]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d1e7      	bne.n	800f6a4 <USBD_GetString+0x52>
 800f6d4:	e000      	b.n	800f6d8 <USBD_GetString+0x86>
    return;
 800f6d6:	bf00      	nop
  }
}
 800f6d8:	3718      	adds	r7, #24
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}

0800f6de <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f6de:	b480      	push	{r7}
 800f6e0:	b085      	sub	sp, #20
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f6ee:	e005      	b.n	800f6fc <USBD_GetLen+0x1e>
  {
    len++;
 800f6f0:	7bfb      	ldrb	r3, [r7, #15]
 800f6f2:	3301      	adds	r3, #1
 800f6f4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	3301      	adds	r3, #1
 800f6fa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	781b      	ldrb	r3, [r3, #0]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d1f5      	bne.n	800f6f0 <USBD_GetLen+0x12>
  }

  return len;
 800f704:	7bfb      	ldrb	r3, [r7, #15]
}
 800f706:	4618      	mov	r0, r3
 800f708:	3714      	adds	r7, #20
 800f70a:	46bd      	mov	sp, r7
 800f70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f710:	4770      	bx	lr

0800f712 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f712:	b580      	push	{r7, lr}
 800f714:	b084      	sub	sp, #16
 800f716:	af00      	add	r7, sp, #0
 800f718:	60f8      	str	r0, [r7, #12]
 800f71a:	60b9      	str	r1, [r7, #8]
 800f71c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	2202      	movs	r2, #2
 800f722:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	687a      	ldr	r2, [r7, #4]
 800f72a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	687a      	ldr	r2, [r7, #4]
 800f730:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	68ba      	ldr	r2, [r7, #8]
 800f736:	2100      	movs	r1, #0
 800f738:	68f8      	ldr	r0, [r7, #12]
 800f73a:	f002 fed7 	bl	80124ec <USBD_LL_Transmit>

  return USBD_OK;
 800f73e:	2300      	movs	r3, #0
}
 800f740:	4618      	mov	r0, r3
 800f742:	3710      	adds	r7, #16
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}

0800f748 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b084      	sub	sp, #16
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	60f8      	str	r0, [r7, #12]
 800f750:	60b9      	str	r1, [r7, #8]
 800f752:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	68ba      	ldr	r2, [r7, #8]
 800f758:	2100      	movs	r1, #0
 800f75a:	68f8      	ldr	r0, [r7, #12]
 800f75c:	f002 fec6 	bl	80124ec <USBD_LL_Transmit>

  return USBD_OK;
 800f760:	2300      	movs	r3, #0
}
 800f762:	4618      	mov	r0, r3
 800f764:	3710      	adds	r7, #16
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}

0800f76a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f76a:	b580      	push	{r7, lr}
 800f76c:	b084      	sub	sp, #16
 800f76e:	af00      	add	r7, sp, #0
 800f770:	60f8      	str	r0, [r7, #12]
 800f772:	60b9      	str	r1, [r7, #8]
 800f774:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	2203      	movs	r2, #3
 800f77a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	687a      	ldr	r2, [r7, #4]
 800f782:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	687a      	ldr	r2, [r7, #4]
 800f78a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	68ba      	ldr	r2, [r7, #8]
 800f792:	2100      	movs	r1, #0
 800f794:	68f8      	ldr	r0, [r7, #12]
 800f796:	f002 feca 	bl	801252e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f79a:	2300      	movs	r3, #0
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3710      	adds	r7, #16
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}

0800f7a4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	60f8      	str	r0, [r7, #12]
 800f7ac:	60b9      	str	r1, [r7, #8]
 800f7ae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	68ba      	ldr	r2, [r7, #8]
 800f7b4:	2100      	movs	r1, #0
 800f7b6:	68f8      	ldr	r0, [r7, #12]
 800f7b8:	f002 feb9 	bl	801252e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f7bc:	2300      	movs	r3, #0
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3710      	adds	r7, #16
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}

0800f7c6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f7c6:	b580      	push	{r7, lr}
 800f7c8:	b082      	sub	sp, #8
 800f7ca:	af00      	add	r7, sp, #0
 800f7cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2204      	movs	r2, #4
 800f7d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	2200      	movs	r2, #0
 800f7da:	2100      	movs	r1, #0
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f002 fe85 	bl	80124ec <USBD_LL_Transmit>

  return USBD_OK;
 800f7e2:	2300      	movs	r3, #0
}
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	3708      	adds	r7, #8
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}

0800f7ec <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b082      	sub	sp, #8
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2205      	movs	r2, #5
 800f7f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	2200      	movs	r2, #0
 800f800:	2100      	movs	r1, #0
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f002 fe93 	bl	801252e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f808:	2300      	movs	r3, #0
}
 800f80a:	4618      	mov	r0, r3
 800f80c:	3708      	adds	r7, #8
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd80      	pop	{r7, pc}

0800f812 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f812:	b480      	push	{r7}
 800f814:	b085      	sub	sp, #20
 800f816:	af00      	add	r7, sp, #0
 800f818:	4603      	mov	r3, r0
 800f81a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f81c:	2300      	movs	r3, #0
 800f81e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f820:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f824:	2b84      	cmp	r3, #132	; 0x84
 800f826:	d005      	beq.n	800f834 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f828:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	4413      	add	r3, r2
 800f830:	3303      	adds	r3, #3
 800f832:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f834:	68fb      	ldr	r3, [r7, #12]
}
 800f836:	4618      	mov	r0, r3
 800f838:	3714      	adds	r7, #20
 800f83a:	46bd      	mov	sp, r7
 800f83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f840:	4770      	bx	lr

0800f842 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f842:	b580      	push	{r7, lr}
 800f844:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f846:	f001 f80f 	bl	8010868 <vTaskStartScheduler>
  
  return osOK;
 800f84a:	2300      	movs	r3, #0
}
 800f84c:	4618      	mov	r0, r3
 800f84e:	bd80      	pop	{r7, pc}

0800f850 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f850:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f852:	b087      	sub	sp, #28
 800f854:	af02      	add	r7, sp, #8
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	685c      	ldr	r4, [r3, #4]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f866:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f86e:	4618      	mov	r0, r3
 800f870:	f7ff ffcf 	bl	800f812 <makeFreeRtosPriority>
 800f874:	4602      	mov	r2, r0
 800f876:	f107 030c 	add.w	r3, r7, #12
 800f87a:	9301      	str	r3, [sp, #4]
 800f87c:	9200      	str	r2, [sp, #0]
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	4632      	mov	r2, r6
 800f882:	4629      	mov	r1, r5
 800f884:	4620      	mov	r0, r4
 800f886:	f000 fe71 	bl	801056c <xTaskCreate>
 800f88a:	4603      	mov	r3, r0
 800f88c:	2b01      	cmp	r3, #1
 800f88e:	d001      	beq.n	800f894 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800f890:	2300      	movs	r3, #0
 800f892:	e000      	b.n	800f896 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800f894:	68fb      	ldr	r3, [r7, #12]
}
 800f896:	4618      	mov	r0, r3
 800f898:	3714      	adds	r7, #20
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f89e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f89e:	b580      	push	{r7, lr}
 800f8a0:	b084      	sub	sp, #16
 800f8a2:	af00      	add	r7, sp, #0
 800f8a4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d001      	beq.n	800f8b4 <osDelay+0x16>
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	e000      	b.n	800f8b6 <osDelay+0x18>
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f000 ffa2 	bl	8010800 <vTaskDelay>
  
  return osOK;
 800f8bc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f8be:	4618      	mov	r0, r3
 800f8c0:	3710      	adds	r7, #16
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}

0800f8c6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f8c6:	b480      	push	{r7}
 800f8c8:	b083      	sub	sp, #12
 800f8ca:	af00      	add	r7, sp, #0
 800f8cc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f103 0208 	add.w	r2, r3, #8
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f8de:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f103 0208 	add.w	r2, r3, #8
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	f103 0208 	add.w	r2, r3, #8
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f8fa:	bf00      	nop
 800f8fc:	370c      	adds	r7, #12
 800f8fe:	46bd      	mov	sp, r7
 800f900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f904:	4770      	bx	lr

0800f906 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f906:	b480      	push	{r7}
 800f908:	b083      	sub	sp, #12
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2200      	movs	r2, #0
 800f912:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f914:	bf00      	nop
 800f916:	370c      	adds	r7, #12
 800f918:	46bd      	mov	sp, r7
 800f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91e:	4770      	bx	lr

0800f920 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f920:	b480      	push	{r7}
 800f922:	b085      	sub	sp, #20
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	685b      	ldr	r3, [r3, #4]
 800f92e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	68fa      	ldr	r2, [r7, #12]
 800f934:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	689a      	ldr	r2, [r3, #8]
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	689b      	ldr	r3, [r3, #8]
 800f942:	683a      	ldr	r2, [r7, #0]
 800f944:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	683a      	ldr	r2, [r7, #0]
 800f94a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	687a      	ldr	r2, [r7, #4]
 800f950:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	1c5a      	adds	r2, r3, #1
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	601a      	str	r2, [r3, #0]
}
 800f95c:	bf00      	nop
 800f95e:	3714      	adds	r7, #20
 800f960:	46bd      	mov	sp, r7
 800f962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f966:	4770      	bx	lr

0800f968 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f968:	b480      	push	{r7}
 800f96a:	b085      	sub	sp, #20
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f97e:	d103      	bne.n	800f988 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	691b      	ldr	r3, [r3, #16]
 800f984:	60fb      	str	r3, [r7, #12]
 800f986:	e00c      	b.n	800f9a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	3308      	adds	r3, #8
 800f98c:	60fb      	str	r3, [r7, #12]
 800f98e:	e002      	b.n	800f996 <vListInsert+0x2e>
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	685b      	ldr	r3, [r3, #4]
 800f994:	60fb      	str	r3, [r7, #12]
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	685b      	ldr	r3, [r3, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	68ba      	ldr	r2, [r7, #8]
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d2f6      	bcs.n	800f990 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	685a      	ldr	r2, [r3, #4]
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	685b      	ldr	r3, [r3, #4]
 800f9ae:	683a      	ldr	r2, [r7, #0]
 800f9b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	68fa      	ldr	r2, [r7, #12]
 800f9b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	683a      	ldr	r2, [r7, #0]
 800f9bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	687a      	ldr	r2, [r7, #4]
 800f9c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	1c5a      	adds	r2, r3, #1
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	601a      	str	r2, [r3, #0]
}
 800f9ce:	bf00      	nop
 800f9d0:	3714      	adds	r7, #20
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d8:	4770      	bx	lr

0800f9da <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f9da:	b480      	push	{r7}
 800f9dc:	b085      	sub	sp, #20
 800f9de:	af00      	add	r7, sp, #0
 800f9e0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	691b      	ldr	r3, [r3, #16]
 800f9e6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	685b      	ldr	r3, [r3, #4]
 800f9ec:	687a      	ldr	r2, [r7, #4]
 800f9ee:	6892      	ldr	r2, [r2, #8]
 800f9f0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	689b      	ldr	r3, [r3, #8]
 800f9f6:	687a      	ldr	r2, [r7, #4]
 800f9f8:	6852      	ldr	r2, [r2, #4]
 800f9fa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	685b      	ldr	r3, [r3, #4]
 800fa00:	687a      	ldr	r2, [r7, #4]
 800fa02:	429a      	cmp	r2, r3
 800fa04:	d103      	bne.n	800fa0e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	689a      	ldr	r2, [r3, #8]
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	2200      	movs	r2, #0
 800fa12:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	1e5a      	subs	r2, r3, #1
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	681b      	ldr	r3, [r3, #0]
}
 800fa22:	4618      	mov	r0, r3
 800fa24:	3714      	adds	r7, #20
 800fa26:	46bd      	mov	sp, r7
 800fa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2c:	4770      	bx	lr
	...

0800fa30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b084      	sub	sp, #16
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d10a      	bne.n	800fa5a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fa44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa48:	f383 8811 	msr	BASEPRI, r3
 800fa4c:	f3bf 8f6f 	isb	sy
 800fa50:	f3bf 8f4f 	dsb	sy
 800fa54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fa56:	bf00      	nop
 800fa58:	e7fe      	b.n	800fa58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800fa5a:	f001 fe2b 	bl	80116b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	681a      	ldr	r2, [r3, #0]
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa66:	68f9      	ldr	r1, [r7, #12]
 800fa68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fa6a:	fb01 f303 	mul.w	r3, r1, r3
 800fa6e:	441a      	add	r2, r3
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	2200      	movs	r2, #0
 800fa78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	681a      	ldr	r2, [r3, #0]
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	681a      	ldr	r2, [r3, #0]
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa8a:	3b01      	subs	r3, #1
 800fa8c:	68f9      	ldr	r1, [r7, #12]
 800fa8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fa90:	fb01 f303 	mul.w	r3, r1, r3
 800fa94:	441a      	add	r2, r3
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	22ff      	movs	r2, #255	; 0xff
 800fa9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	22ff      	movs	r2, #255	; 0xff
 800faa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d114      	bne.n	800fada <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	691b      	ldr	r3, [r3, #16]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d01a      	beq.n	800faee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	3310      	adds	r3, #16
 800fabc:	4618      	mov	r0, r3
 800fabe:	f001 f90b 	bl	8010cd8 <xTaskRemoveFromEventList>
 800fac2:	4603      	mov	r3, r0
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d012      	beq.n	800faee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fac8:	4b0c      	ldr	r3, [pc, #48]	; (800fafc <xQueueGenericReset+0xcc>)
 800faca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800face:	601a      	str	r2, [r3, #0]
 800fad0:	f3bf 8f4f 	dsb	sy
 800fad4:	f3bf 8f6f 	isb	sy
 800fad8:	e009      	b.n	800faee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	3310      	adds	r3, #16
 800fade:	4618      	mov	r0, r3
 800fae0:	f7ff fef1 	bl	800f8c6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	3324      	adds	r3, #36	; 0x24
 800fae8:	4618      	mov	r0, r3
 800faea:	f7ff feec 	bl	800f8c6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800faee:	f001 fe11 	bl	8011714 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800faf2:	2301      	movs	r3, #1
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	3710      	adds	r7, #16
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}
 800fafc:	e000ed04 	.word	0xe000ed04

0800fb00 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b08a      	sub	sp, #40	; 0x28
 800fb04:	af02      	add	r7, sp, #8
 800fb06:	60f8      	str	r0, [r7, #12]
 800fb08:	60b9      	str	r1, [r7, #8]
 800fb0a:	4613      	mov	r3, r2
 800fb0c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d10a      	bne.n	800fb2a <xQueueGenericCreate+0x2a>
	__asm volatile
 800fb14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb18:	f383 8811 	msr	BASEPRI, r3
 800fb1c:	f3bf 8f6f 	isb	sy
 800fb20:	f3bf 8f4f 	dsb	sy
 800fb24:	613b      	str	r3, [r7, #16]
}
 800fb26:	bf00      	nop
 800fb28:	e7fe      	b.n	800fb28 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	68ba      	ldr	r2, [r7, #8]
 800fb2e:	fb02 f303 	mul.w	r3, r2, r3
 800fb32:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fb34:	69fb      	ldr	r3, [r7, #28]
 800fb36:	3348      	adds	r3, #72	; 0x48
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f001 fedd 	bl	80118f8 <pvPortMalloc>
 800fb3e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fb40:	69bb      	ldr	r3, [r7, #24]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d00d      	beq.n	800fb62 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fb46:	69bb      	ldr	r3, [r7, #24]
 800fb48:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	3348      	adds	r3, #72	; 0x48
 800fb4e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fb50:	79fa      	ldrb	r2, [r7, #7]
 800fb52:	69bb      	ldr	r3, [r7, #24]
 800fb54:	9300      	str	r3, [sp, #0]
 800fb56:	4613      	mov	r3, r2
 800fb58:	697a      	ldr	r2, [r7, #20]
 800fb5a:	68b9      	ldr	r1, [r7, #8]
 800fb5c:	68f8      	ldr	r0, [r7, #12]
 800fb5e:	f000 f805 	bl	800fb6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fb62:	69bb      	ldr	r3, [r7, #24]
	}
 800fb64:	4618      	mov	r0, r3
 800fb66:	3720      	adds	r7, #32
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}

0800fb6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b084      	sub	sp, #16
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	60f8      	str	r0, [r7, #12]
 800fb74:	60b9      	str	r1, [r7, #8]
 800fb76:	607a      	str	r2, [r7, #4]
 800fb78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fb7a:	68bb      	ldr	r3, [r7, #8]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d103      	bne.n	800fb88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fb80:	69bb      	ldr	r3, [r7, #24]
 800fb82:	69ba      	ldr	r2, [r7, #24]
 800fb84:	601a      	str	r2, [r3, #0]
 800fb86:	e002      	b.n	800fb8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fb88:	69bb      	ldr	r3, [r7, #24]
 800fb8a:	687a      	ldr	r2, [r7, #4]
 800fb8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fb8e:	69bb      	ldr	r3, [r7, #24]
 800fb90:	68fa      	ldr	r2, [r7, #12]
 800fb92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fb94:	69bb      	ldr	r3, [r7, #24]
 800fb96:	68ba      	ldr	r2, [r7, #8]
 800fb98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fb9a:	2101      	movs	r1, #1
 800fb9c:	69b8      	ldr	r0, [r7, #24]
 800fb9e:	f7ff ff47 	bl	800fa30 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fba2:	bf00      	nop
 800fba4:	3710      	adds	r7, #16
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}

0800fbaa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800fbaa:	b580      	push	{r7, lr}
 800fbac:	b082      	sub	sp, #8
 800fbae:	af00      	add	r7, sp, #0
 800fbb0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d00e      	beq.n	800fbd6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fbca:	2300      	movs	r3, #0
 800fbcc:	2200      	movs	r2, #0
 800fbce:	2100      	movs	r1, #0
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f000 f81d 	bl	800fc10 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800fbd6:	bf00      	nop
 800fbd8:	3708      	adds	r7, #8
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}

0800fbde <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800fbde:	b580      	push	{r7, lr}
 800fbe0:	b086      	sub	sp, #24
 800fbe2:	af00      	add	r7, sp, #0
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fbe8:	2301      	movs	r3, #1
 800fbea:	617b      	str	r3, [r7, #20]
 800fbec:	2300      	movs	r3, #0
 800fbee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800fbf0:	79fb      	ldrb	r3, [r7, #7]
 800fbf2:	461a      	mov	r2, r3
 800fbf4:	6939      	ldr	r1, [r7, #16]
 800fbf6:	6978      	ldr	r0, [r7, #20]
 800fbf8:	f7ff ff82 	bl	800fb00 <xQueueGenericCreate>
 800fbfc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fbfe:	68f8      	ldr	r0, [r7, #12]
 800fc00:	f7ff ffd3 	bl	800fbaa <prvInitialiseMutex>

		return xNewQueue;
 800fc04:	68fb      	ldr	r3, [r7, #12]
	}
 800fc06:	4618      	mov	r0, r3
 800fc08:	3718      	adds	r7, #24
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}
	...

0800fc10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b08e      	sub	sp, #56	; 0x38
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	60f8      	str	r0, [r7, #12]
 800fc18:	60b9      	str	r1, [r7, #8]
 800fc1a:	607a      	str	r2, [r7, #4]
 800fc1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fc1e:	2300      	movs	r3, #0
 800fc20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d10a      	bne.n	800fc42 <xQueueGenericSend+0x32>
	__asm volatile
 800fc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc30:	f383 8811 	msr	BASEPRI, r3
 800fc34:	f3bf 8f6f 	isb	sy
 800fc38:	f3bf 8f4f 	dsb	sy
 800fc3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fc3e:	bf00      	nop
 800fc40:	e7fe      	b.n	800fc40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc42:	68bb      	ldr	r3, [r7, #8]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d103      	bne.n	800fc50 <xQueueGenericSend+0x40>
 800fc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d101      	bne.n	800fc54 <xQueueGenericSend+0x44>
 800fc50:	2301      	movs	r3, #1
 800fc52:	e000      	b.n	800fc56 <xQueueGenericSend+0x46>
 800fc54:	2300      	movs	r3, #0
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d10a      	bne.n	800fc70 <xQueueGenericSend+0x60>
	__asm volatile
 800fc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc5e:	f383 8811 	msr	BASEPRI, r3
 800fc62:	f3bf 8f6f 	isb	sy
 800fc66:	f3bf 8f4f 	dsb	sy
 800fc6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fc6c:	bf00      	nop
 800fc6e:	e7fe      	b.n	800fc6e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fc70:	683b      	ldr	r3, [r7, #0]
 800fc72:	2b02      	cmp	r3, #2
 800fc74:	d103      	bne.n	800fc7e <xQueueGenericSend+0x6e>
 800fc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc7a:	2b01      	cmp	r3, #1
 800fc7c:	d101      	bne.n	800fc82 <xQueueGenericSend+0x72>
 800fc7e:	2301      	movs	r3, #1
 800fc80:	e000      	b.n	800fc84 <xQueueGenericSend+0x74>
 800fc82:	2300      	movs	r3, #0
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d10a      	bne.n	800fc9e <xQueueGenericSend+0x8e>
	__asm volatile
 800fc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc8c:	f383 8811 	msr	BASEPRI, r3
 800fc90:	f3bf 8f6f 	isb	sy
 800fc94:	f3bf 8f4f 	dsb	sy
 800fc98:	623b      	str	r3, [r7, #32]
}
 800fc9a:	bf00      	nop
 800fc9c:	e7fe      	b.n	800fc9c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fc9e:	f001 f9bd 	bl	801101c <xTaskGetSchedulerState>
 800fca2:	4603      	mov	r3, r0
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d102      	bne.n	800fcae <xQueueGenericSend+0x9e>
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d101      	bne.n	800fcb2 <xQueueGenericSend+0xa2>
 800fcae:	2301      	movs	r3, #1
 800fcb0:	e000      	b.n	800fcb4 <xQueueGenericSend+0xa4>
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d10a      	bne.n	800fcce <xQueueGenericSend+0xbe>
	__asm volatile
 800fcb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcbc:	f383 8811 	msr	BASEPRI, r3
 800fcc0:	f3bf 8f6f 	isb	sy
 800fcc4:	f3bf 8f4f 	dsb	sy
 800fcc8:	61fb      	str	r3, [r7, #28]
}
 800fcca:	bf00      	nop
 800fccc:	e7fe      	b.n	800fccc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fcce:	f001 fcf1 	bl	80116b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	d302      	bcc.n	800fce4 <xQueueGenericSend+0xd4>
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	2b02      	cmp	r3, #2
 800fce2:	d129      	bne.n	800fd38 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fce4:	683a      	ldr	r2, [r7, #0]
 800fce6:	68b9      	ldr	r1, [r7, #8]
 800fce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fcea:	f000 fb2f 	bl	801034c <prvCopyDataToQueue>
 800fcee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d010      	beq.n	800fd1a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcfa:	3324      	adds	r3, #36	; 0x24
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f000 ffeb 	bl	8010cd8 <xTaskRemoveFromEventList>
 800fd02:	4603      	mov	r3, r0
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d013      	beq.n	800fd30 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fd08:	4b3f      	ldr	r3, [pc, #252]	; (800fe08 <xQueueGenericSend+0x1f8>)
 800fd0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd0e:	601a      	str	r2, [r3, #0]
 800fd10:	f3bf 8f4f 	dsb	sy
 800fd14:	f3bf 8f6f 	isb	sy
 800fd18:	e00a      	b.n	800fd30 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d007      	beq.n	800fd30 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fd20:	4b39      	ldr	r3, [pc, #228]	; (800fe08 <xQueueGenericSend+0x1f8>)
 800fd22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd26:	601a      	str	r2, [r3, #0]
 800fd28:	f3bf 8f4f 	dsb	sy
 800fd2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fd30:	f001 fcf0 	bl	8011714 <vPortExitCritical>
				return pdPASS;
 800fd34:	2301      	movs	r3, #1
 800fd36:	e063      	b.n	800fe00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d103      	bne.n	800fd46 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fd3e:	f001 fce9 	bl	8011714 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fd42:	2300      	movs	r3, #0
 800fd44:	e05c      	b.n	800fe00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fd46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d106      	bne.n	800fd5a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fd4c:	f107 0314 	add.w	r3, r7, #20
 800fd50:	4618      	mov	r0, r3
 800fd52:	f001 f823 	bl	8010d9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fd56:	2301      	movs	r3, #1
 800fd58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fd5a:	f001 fcdb 	bl	8011714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fd5e:	f000 fdd3 	bl	8010908 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fd62:	f001 fca7 	bl	80116b4 <vPortEnterCritical>
 800fd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fd6c:	b25b      	sxtb	r3, r3
 800fd6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd72:	d103      	bne.n	800fd7c <xQueueGenericSend+0x16c>
 800fd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd76:	2200      	movs	r2, #0
 800fd78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fd82:	b25b      	sxtb	r3, r3
 800fd84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd88:	d103      	bne.n	800fd92 <xQueueGenericSend+0x182>
 800fd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fd92:	f001 fcbf 	bl	8011714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fd96:	1d3a      	adds	r2, r7, #4
 800fd98:	f107 0314 	add.w	r3, r7, #20
 800fd9c:	4611      	mov	r1, r2
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f001 f812 	bl	8010dc8 <xTaskCheckForTimeOut>
 800fda4:	4603      	mov	r3, r0
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d124      	bne.n	800fdf4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fdaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fdac:	f000 fbc6 	bl	801053c <prvIsQueueFull>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d018      	beq.n	800fde8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb8:	3310      	adds	r3, #16
 800fdba:	687a      	ldr	r2, [r7, #4]
 800fdbc:	4611      	mov	r1, r2
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f000 ff66 	bl	8010c90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fdc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fdc6:	f000 fb51 	bl	801046c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fdca:	f000 fdab 	bl	8010924 <xTaskResumeAll>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	f47f af7c 	bne.w	800fcce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800fdd6:	4b0c      	ldr	r3, [pc, #48]	; (800fe08 <xQueueGenericSend+0x1f8>)
 800fdd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fddc:	601a      	str	r2, [r3, #0]
 800fdde:	f3bf 8f4f 	dsb	sy
 800fde2:	f3bf 8f6f 	isb	sy
 800fde6:	e772      	b.n	800fcce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fde8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fdea:	f000 fb3f 	bl	801046c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fdee:	f000 fd99 	bl	8010924 <xTaskResumeAll>
 800fdf2:	e76c      	b.n	800fcce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fdf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fdf6:	f000 fb39 	bl	801046c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fdfa:	f000 fd93 	bl	8010924 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fdfe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	3738      	adds	r7, #56	; 0x38
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}
 800fe08:	e000ed04 	.word	0xe000ed04

0800fe0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b090      	sub	sp, #64	; 0x40
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	60f8      	str	r0, [r7, #12]
 800fe14:	60b9      	str	r1, [r7, #8]
 800fe16:	607a      	str	r2, [r7, #4]
 800fe18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800fe1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d10a      	bne.n	800fe3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800fe24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe28:	f383 8811 	msr	BASEPRI, r3
 800fe2c:	f3bf 8f6f 	isb	sy
 800fe30:	f3bf 8f4f 	dsb	sy
 800fe34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fe36:	bf00      	nop
 800fe38:	e7fe      	b.n	800fe38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fe3a:	68bb      	ldr	r3, [r7, #8]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d103      	bne.n	800fe48 <xQueueGenericSendFromISR+0x3c>
 800fe40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d101      	bne.n	800fe4c <xQueueGenericSendFromISR+0x40>
 800fe48:	2301      	movs	r3, #1
 800fe4a:	e000      	b.n	800fe4e <xQueueGenericSendFromISR+0x42>
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d10a      	bne.n	800fe68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800fe52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe56:	f383 8811 	msr	BASEPRI, r3
 800fe5a:	f3bf 8f6f 	isb	sy
 800fe5e:	f3bf 8f4f 	dsb	sy
 800fe62:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fe64:	bf00      	nop
 800fe66:	e7fe      	b.n	800fe66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	2b02      	cmp	r3, #2
 800fe6c:	d103      	bne.n	800fe76 <xQueueGenericSendFromISR+0x6a>
 800fe6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe72:	2b01      	cmp	r3, #1
 800fe74:	d101      	bne.n	800fe7a <xQueueGenericSendFromISR+0x6e>
 800fe76:	2301      	movs	r3, #1
 800fe78:	e000      	b.n	800fe7c <xQueueGenericSendFromISR+0x70>
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d10a      	bne.n	800fe96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800fe80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe84:	f383 8811 	msr	BASEPRI, r3
 800fe88:	f3bf 8f6f 	isb	sy
 800fe8c:	f3bf 8f4f 	dsb	sy
 800fe90:	623b      	str	r3, [r7, #32]
}
 800fe92:	bf00      	nop
 800fe94:	e7fe      	b.n	800fe94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fe96:	f001 fcef 	bl	8011878 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fe9a:	f3ef 8211 	mrs	r2, BASEPRI
 800fe9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fea2:	f383 8811 	msr	BASEPRI, r3
 800fea6:	f3bf 8f6f 	isb	sy
 800feaa:	f3bf 8f4f 	dsb	sy
 800feae:	61fa      	str	r2, [r7, #28]
 800feb0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800feb2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800feb4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800feb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800feba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800febc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800febe:	429a      	cmp	r2, r3
 800fec0:	d302      	bcc.n	800fec8 <xQueueGenericSendFromISR+0xbc>
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	2b02      	cmp	r3, #2
 800fec6:	d12f      	bne.n	800ff28 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fed6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fed8:	683a      	ldr	r2, [r7, #0]
 800feda:	68b9      	ldr	r1, [r7, #8]
 800fedc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fede:	f000 fa35 	bl	801034c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fee2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800fee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800feea:	d112      	bne.n	800ff12 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800feec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d016      	beq.n	800ff22 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef6:	3324      	adds	r3, #36	; 0x24
 800fef8:	4618      	mov	r0, r3
 800fefa:	f000 feed 	bl	8010cd8 <xTaskRemoveFromEventList>
 800fefe:	4603      	mov	r3, r0
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d00e      	beq.n	800ff22 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d00b      	beq.n	800ff22 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2201      	movs	r2, #1
 800ff0e:	601a      	str	r2, [r3, #0]
 800ff10:	e007      	b.n	800ff22 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ff12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ff16:	3301      	adds	r3, #1
 800ff18:	b2db      	uxtb	r3, r3
 800ff1a:	b25a      	sxtb	r2, r3
 800ff1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ff22:	2301      	movs	r3, #1
 800ff24:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ff26:	e001      	b.n	800ff2c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ff28:	2300      	movs	r3, #0
 800ff2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff2e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ff36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ff38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	3740      	adds	r7, #64	; 0x40
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
	...

0800ff44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b08c      	sub	sp, #48	; 0x30
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	60f8      	str	r0, [r7, #12]
 800ff4c:	60b9      	str	r1, [r7, #8]
 800ff4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ff50:	2300      	movs	r3, #0
 800ff52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ff58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d10a      	bne.n	800ff74 <xQueueReceive+0x30>
	__asm volatile
 800ff5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff62:	f383 8811 	msr	BASEPRI, r3
 800ff66:	f3bf 8f6f 	isb	sy
 800ff6a:	f3bf 8f4f 	dsb	sy
 800ff6e:	623b      	str	r3, [r7, #32]
}
 800ff70:	bf00      	nop
 800ff72:	e7fe      	b.n	800ff72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d103      	bne.n	800ff82 <xQueueReceive+0x3e>
 800ff7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d101      	bne.n	800ff86 <xQueueReceive+0x42>
 800ff82:	2301      	movs	r3, #1
 800ff84:	e000      	b.n	800ff88 <xQueueReceive+0x44>
 800ff86:	2300      	movs	r3, #0
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d10a      	bne.n	800ffa2 <xQueueReceive+0x5e>
	__asm volatile
 800ff8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff90:	f383 8811 	msr	BASEPRI, r3
 800ff94:	f3bf 8f6f 	isb	sy
 800ff98:	f3bf 8f4f 	dsb	sy
 800ff9c:	61fb      	str	r3, [r7, #28]
}
 800ff9e:	bf00      	nop
 800ffa0:	e7fe      	b.n	800ffa0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ffa2:	f001 f83b 	bl	801101c <xTaskGetSchedulerState>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d102      	bne.n	800ffb2 <xQueueReceive+0x6e>
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d101      	bne.n	800ffb6 <xQueueReceive+0x72>
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	e000      	b.n	800ffb8 <xQueueReceive+0x74>
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d10a      	bne.n	800ffd2 <xQueueReceive+0x8e>
	__asm volatile
 800ffbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffc0:	f383 8811 	msr	BASEPRI, r3
 800ffc4:	f3bf 8f6f 	isb	sy
 800ffc8:	f3bf 8f4f 	dsb	sy
 800ffcc:	61bb      	str	r3, [r7, #24]
}
 800ffce:	bf00      	nop
 800ffd0:	e7fe      	b.n	800ffd0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ffd2:	f001 fb6f 	bl	80116b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ffd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffda:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ffdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d01f      	beq.n	8010022 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ffe2:	68b9      	ldr	r1, [r7, #8]
 800ffe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ffe6:	f000 fa1b 	bl	8010420 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ffea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffec:	1e5a      	subs	r2, r3, #1
 800ffee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fff0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fff4:	691b      	ldr	r3, [r3, #16]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d00f      	beq.n	801001a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fffc:	3310      	adds	r3, #16
 800fffe:	4618      	mov	r0, r3
 8010000:	f000 fe6a 	bl	8010cd8 <xTaskRemoveFromEventList>
 8010004:	4603      	mov	r3, r0
 8010006:	2b00      	cmp	r3, #0
 8010008:	d007      	beq.n	801001a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801000a:	4b3d      	ldr	r3, [pc, #244]	; (8010100 <xQueueReceive+0x1bc>)
 801000c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010010:	601a      	str	r2, [r3, #0]
 8010012:	f3bf 8f4f 	dsb	sy
 8010016:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801001a:	f001 fb7b 	bl	8011714 <vPortExitCritical>
				return pdPASS;
 801001e:	2301      	movs	r3, #1
 8010020:	e069      	b.n	80100f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d103      	bne.n	8010030 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010028:	f001 fb74 	bl	8011714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801002c:	2300      	movs	r3, #0
 801002e:	e062      	b.n	80100f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010032:	2b00      	cmp	r3, #0
 8010034:	d106      	bne.n	8010044 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010036:	f107 0310 	add.w	r3, r7, #16
 801003a:	4618      	mov	r0, r3
 801003c:	f000 feae 	bl	8010d9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010040:	2301      	movs	r3, #1
 8010042:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010044:	f001 fb66 	bl	8011714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010048:	f000 fc5e 	bl	8010908 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801004c:	f001 fb32 	bl	80116b4 <vPortEnterCritical>
 8010050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010052:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010056:	b25b      	sxtb	r3, r3
 8010058:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801005c:	d103      	bne.n	8010066 <xQueueReceive+0x122>
 801005e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010060:	2200      	movs	r2, #0
 8010062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010068:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801006c:	b25b      	sxtb	r3, r3
 801006e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010072:	d103      	bne.n	801007c <xQueueReceive+0x138>
 8010074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010076:	2200      	movs	r2, #0
 8010078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801007c:	f001 fb4a 	bl	8011714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010080:	1d3a      	adds	r2, r7, #4
 8010082:	f107 0310 	add.w	r3, r7, #16
 8010086:	4611      	mov	r1, r2
 8010088:	4618      	mov	r0, r3
 801008a:	f000 fe9d 	bl	8010dc8 <xTaskCheckForTimeOut>
 801008e:	4603      	mov	r3, r0
 8010090:	2b00      	cmp	r3, #0
 8010092:	d123      	bne.n	80100dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010096:	f000 fa3b 	bl	8010510 <prvIsQueueEmpty>
 801009a:	4603      	mov	r3, r0
 801009c:	2b00      	cmp	r3, #0
 801009e:	d017      	beq.n	80100d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80100a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100a2:	3324      	adds	r3, #36	; 0x24
 80100a4:	687a      	ldr	r2, [r7, #4]
 80100a6:	4611      	mov	r1, r2
 80100a8:	4618      	mov	r0, r3
 80100aa:	f000 fdf1 	bl	8010c90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80100ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100b0:	f000 f9dc 	bl	801046c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80100b4:	f000 fc36 	bl	8010924 <xTaskResumeAll>
 80100b8:	4603      	mov	r3, r0
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d189      	bne.n	800ffd2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80100be:	4b10      	ldr	r3, [pc, #64]	; (8010100 <xQueueReceive+0x1bc>)
 80100c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100c4:	601a      	str	r2, [r3, #0]
 80100c6:	f3bf 8f4f 	dsb	sy
 80100ca:	f3bf 8f6f 	isb	sy
 80100ce:	e780      	b.n	800ffd2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80100d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100d2:	f000 f9cb 	bl	801046c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80100d6:	f000 fc25 	bl	8010924 <xTaskResumeAll>
 80100da:	e77a      	b.n	800ffd2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80100dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100de:	f000 f9c5 	bl	801046c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80100e2:	f000 fc1f 	bl	8010924 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80100e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100e8:	f000 fa12 	bl	8010510 <prvIsQueueEmpty>
 80100ec:	4603      	mov	r3, r0
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	f43f af6f 	beq.w	800ffd2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80100f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80100f6:	4618      	mov	r0, r3
 80100f8:	3730      	adds	r7, #48	; 0x30
 80100fa:	46bd      	mov	sp, r7
 80100fc:	bd80      	pop	{r7, pc}
 80100fe:	bf00      	nop
 8010100:	e000ed04 	.word	0xe000ed04

08010104 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b08e      	sub	sp, #56	; 0x38
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
 801010c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801010e:	2300      	movs	r3, #0
 8010110:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010116:	2300      	movs	r3, #0
 8010118:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801011a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801011c:	2b00      	cmp	r3, #0
 801011e:	d10a      	bne.n	8010136 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010124:	f383 8811 	msr	BASEPRI, r3
 8010128:	f3bf 8f6f 	isb	sy
 801012c:	f3bf 8f4f 	dsb	sy
 8010130:	623b      	str	r3, [r7, #32]
}
 8010132:	bf00      	nop
 8010134:	e7fe      	b.n	8010134 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801013a:	2b00      	cmp	r3, #0
 801013c:	d00a      	beq.n	8010154 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801013e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010142:	f383 8811 	msr	BASEPRI, r3
 8010146:	f3bf 8f6f 	isb	sy
 801014a:	f3bf 8f4f 	dsb	sy
 801014e:	61fb      	str	r3, [r7, #28]
}
 8010150:	bf00      	nop
 8010152:	e7fe      	b.n	8010152 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010154:	f000 ff62 	bl	801101c <xTaskGetSchedulerState>
 8010158:	4603      	mov	r3, r0
 801015a:	2b00      	cmp	r3, #0
 801015c:	d102      	bne.n	8010164 <xQueueSemaphoreTake+0x60>
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d101      	bne.n	8010168 <xQueueSemaphoreTake+0x64>
 8010164:	2301      	movs	r3, #1
 8010166:	e000      	b.n	801016a <xQueueSemaphoreTake+0x66>
 8010168:	2300      	movs	r3, #0
 801016a:	2b00      	cmp	r3, #0
 801016c:	d10a      	bne.n	8010184 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801016e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010172:	f383 8811 	msr	BASEPRI, r3
 8010176:	f3bf 8f6f 	isb	sy
 801017a:	f3bf 8f4f 	dsb	sy
 801017e:	61bb      	str	r3, [r7, #24]
}
 8010180:	bf00      	nop
 8010182:	e7fe      	b.n	8010182 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010184:	f001 fa96 	bl	80116b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801018a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801018c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801018e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010190:	2b00      	cmp	r3, #0
 8010192:	d024      	beq.n	80101de <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010196:	1e5a      	subs	r2, r3, #1
 8010198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801019a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801019c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d104      	bne.n	80101ae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80101a4:	f001 f8e2 	bl	801136c <pvTaskIncrementMutexHeldCount>
 80101a8:	4602      	mov	r2, r0
 80101aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80101ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101b0:	691b      	ldr	r3, [r3, #16]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d00f      	beq.n	80101d6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80101b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101b8:	3310      	adds	r3, #16
 80101ba:	4618      	mov	r0, r3
 80101bc:	f000 fd8c 	bl	8010cd8 <xTaskRemoveFromEventList>
 80101c0:	4603      	mov	r3, r0
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d007      	beq.n	80101d6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80101c6:	4b54      	ldr	r3, [pc, #336]	; (8010318 <xQueueSemaphoreTake+0x214>)
 80101c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101cc:	601a      	str	r2, [r3, #0]
 80101ce:	f3bf 8f4f 	dsb	sy
 80101d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80101d6:	f001 fa9d 	bl	8011714 <vPortExitCritical>
				return pdPASS;
 80101da:	2301      	movs	r3, #1
 80101dc:	e097      	b.n	801030e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d111      	bne.n	8010208 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80101e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d00a      	beq.n	8010200 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80101ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101ee:	f383 8811 	msr	BASEPRI, r3
 80101f2:	f3bf 8f6f 	isb	sy
 80101f6:	f3bf 8f4f 	dsb	sy
 80101fa:	617b      	str	r3, [r7, #20]
}
 80101fc:	bf00      	nop
 80101fe:	e7fe      	b.n	80101fe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010200:	f001 fa88 	bl	8011714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010204:	2300      	movs	r3, #0
 8010206:	e082      	b.n	801030e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801020a:	2b00      	cmp	r3, #0
 801020c:	d106      	bne.n	801021c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801020e:	f107 030c 	add.w	r3, r7, #12
 8010212:	4618      	mov	r0, r3
 8010214:	f000 fdc2 	bl	8010d9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010218:	2301      	movs	r3, #1
 801021a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801021c:	f001 fa7a 	bl	8011714 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010220:	f000 fb72 	bl	8010908 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010224:	f001 fa46 	bl	80116b4 <vPortEnterCritical>
 8010228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801022a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801022e:	b25b      	sxtb	r3, r3
 8010230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010234:	d103      	bne.n	801023e <xQueueSemaphoreTake+0x13a>
 8010236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010238:	2200      	movs	r2, #0
 801023a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801023e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010240:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010244:	b25b      	sxtb	r3, r3
 8010246:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801024a:	d103      	bne.n	8010254 <xQueueSemaphoreTake+0x150>
 801024c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801024e:	2200      	movs	r2, #0
 8010250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010254:	f001 fa5e 	bl	8011714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010258:	463a      	mov	r2, r7
 801025a:	f107 030c 	add.w	r3, r7, #12
 801025e:	4611      	mov	r1, r2
 8010260:	4618      	mov	r0, r3
 8010262:	f000 fdb1 	bl	8010dc8 <xTaskCheckForTimeOut>
 8010266:	4603      	mov	r3, r0
 8010268:	2b00      	cmp	r3, #0
 801026a:	d132      	bne.n	80102d2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801026c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801026e:	f000 f94f 	bl	8010510 <prvIsQueueEmpty>
 8010272:	4603      	mov	r3, r0
 8010274:	2b00      	cmp	r3, #0
 8010276:	d026      	beq.n	80102c6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d109      	bne.n	8010294 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8010280:	f001 fa18 	bl	80116b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010286:	689b      	ldr	r3, [r3, #8]
 8010288:	4618      	mov	r0, r3
 801028a:	f000 fee5 	bl	8011058 <xTaskPriorityInherit>
 801028e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010290:	f001 fa40 	bl	8011714 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010296:	3324      	adds	r3, #36	; 0x24
 8010298:	683a      	ldr	r2, [r7, #0]
 801029a:	4611      	mov	r1, r2
 801029c:	4618      	mov	r0, r3
 801029e:	f000 fcf7 	bl	8010c90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80102a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80102a4:	f000 f8e2 	bl	801046c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80102a8:	f000 fb3c 	bl	8010924 <xTaskResumeAll>
 80102ac:	4603      	mov	r3, r0
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	f47f af68 	bne.w	8010184 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80102b4:	4b18      	ldr	r3, [pc, #96]	; (8010318 <xQueueSemaphoreTake+0x214>)
 80102b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102ba:	601a      	str	r2, [r3, #0]
 80102bc:	f3bf 8f4f 	dsb	sy
 80102c0:	f3bf 8f6f 	isb	sy
 80102c4:	e75e      	b.n	8010184 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80102c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80102c8:	f000 f8d0 	bl	801046c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80102cc:	f000 fb2a 	bl	8010924 <xTaskResumeAll>
 80102d0:	e758      	b.n	8010184 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80102d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80102d4:	f000 f8ca 	bl	801046c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80102d8:	f000 fb24 	bl	8010924 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80102dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80102de:	f000 f917 	bl	8010510 <prvIsQueueEmpty>
 80102e2:	4603      	mov	r3, r0
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	f43f af4d 	beq.w	8010184 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80102ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d00d      	beq.n	801030c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80102f0:	f001 f9e0 	bl	80116b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80102f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80102f6:	f000 f811 	bl	801031c <prvGetDisinheritPriorityAfterTimeout>
 80102fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80102fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102fe:	689b      	ldr	r3, [r3, #8]
 8010300:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010302:	4618      	mov	r0, r3
 8010304:	f000 ffa4 	bl	8011250 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010308:	f001 fa04 	bl	8011714 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801030c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801030e:	4618      	mov	r0, r3
 8010310:	3738      	adds	r7, #56	; 0x38
 8010312:	46bd      	mov	sp, r7
 8010314:	bd80      	pop	{r7, pc}
 8010316:	bf00      	nop
 8010318:	e000ed04 	.word	0xe000ed04

0801031c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801031c:	b480      	push	{r7}
 801031e:	b085      	sub	sp, #20
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010328:	2b00      	cmp	r3, #0
 801032a:	d006      	beq.n	801033a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	f1c3 0320 	rsb	r3, r3, #32
 8010336:	60fb      	str	r3, [r7, #12]
 8010338:	e001      	b.n	801033e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801033a:	2300      	movs	r3, #0
 801033c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801033e:	68fb      	ldr	r3, [r7, #12]
	}
 8010340:	4618      	mov	r0, r3
 8010342:	3714      	adds	r7, #20
 8010344:	46bd      	mov	sp, r7
 8010346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034a:	4770      	bx	lr

0801034c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b086      	sub	sp, #24
 8010350:	af00      	add	r7, sp, #0
 8010352:	60f8      	str	r0, [r7, #12]
 8010354:	60b9      	str	r1, [r7, #8]
 8010356:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010358:	2300      	movs	r3, #0
 801035a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010360:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010366:	2b00      	cmp	r3, #0
 8010368:	d10d      	bne.n	8010386 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d14d      	bne.n	801040e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	689b      	ldr	r3, [r3, #8]
 8010376:	4618      	mov	r0, r3
 8010378:	f000 fee4 	bl	8011144 <xTaskPriorityDisinherit>
 801037c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	2200      	movs	r2, #0
 8010382:	609a      	str	r2, [r3, #8]
 8010384:	e043      	b.n	801040e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d119      	bne.n	80103c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	6858      	ldr	r0, [r3, #4]
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010394:	461a      	mov	r2, r3
 8010396:	68b9      	ldr	r1, [r7, #8]
 8010398:	f003 f8ae 	bl	80134f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	685a      	ldr	r2, [r3, #4]
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103a4:	441a      	add	r2, r3
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	685a      	ldr	r2, [r3, #4]
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	689b      	ldr	r3, [r3, #8]
 80103b2:	429a      	cmp	r2, r3
 80103b4:	d32b      	bcc.n	801040e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	681a      	ldr	r2, [r3, #0]
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	605a      	str	r2, [r3, #4]
 80103be:	e026      	b.n	801040e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	68d8      	ldr	r0, [r3, #12]
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103c8:	461a      	mov	r2, r3
 80103ca:	68b9      	ldr	r1, [r7, #8]
 80103cc:	f003 f894 	bl	80134f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	68da      	ldr	r2, [r3, #12]
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103d8:	425b      	negs	r3, r3
 80103da:	441a      	add	r2, r3
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	68da      	ldr	r2, [r3, #12]
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	429a      	cmp	r2, r3
 80103ea:	d207      	bcs.n	80103fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	689a      	ldr	r2, [r3, #8]
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103f4:	425b      	negs	r3, r3
 80103f6:	441a      	add	r2, r3
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2b02      	cmp	r3, #2
 8010400:	d105      	bne.n	801040e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d002      	beq.n	801040e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010408:	693b      	ldr	r3, [r7, #16]
 801040a:	3b01      	subs	r3, #1
 801040c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801040e:	693b      	ldr	r3, [r7, #16]
 8010410:	1c5a      	adds	r2, r3, #1
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010416:	697b      	ldr	r3, [r7, #20]
}
 8010418:	4618      	mov	r0, r3
 801041a:	3718      	adds	r7, #24
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}

08010420 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b082      	sub	sp, #8
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
 8010428:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801042e:	2b00      	cmp	r3, #0
 8010430:	d018      	beq.n	8010464 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	68da      	ldr	r2, [r3, #12]
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801043a:	441a      	add	r2, r3
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	68da      	ldr	r2, [r3, #12]
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	689b      	ldr	r3, [r3, #8]
 8010448:	429a      	cmp	r2, r3
 801044a:	d303      	bcc.n	8010454 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	681a      	ldr	r2, [r3, #0]
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	68d9      	ldr	r1, [r3, #12]
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801045c:	461a      	mov	r2, r3
 801045e:	6838      	ldr	r0, [r7, #0]
 8010460:	f003 f84a 	bl	80134f8 <memcpy>
	}
}
 8010464:	bf00      	nop
 8010466:	3708      	adds	r7, #8
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}

0801046c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b084      	sub	sp, #16
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010474:	f001 f91e 	bl	80116b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801047e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010480:	e011      	b.n	80104a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010486:	2b00      	cmp	r3, #0
 8010488:	d012      	beq.n	80104b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	3324      	adds	r3, #36	; 0x24
 801048e:	4618      	mov	r0, r3
 8010490:	f000 fc22 	bl	8010cd8 <xTaskRemoveFromEventList>
 8010494:	4603      	mov	r3, r0
 8010496:	2b00      	cmp	r3, #0
 8010498:	d001      	beq.n	801049e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801049a:	f000 fcf7 	bl	8010e8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801049e:	7bfb      	ldrb	r3, [r7, #15]
 80104a0:	3b01      	subs	r3, #1
 80104a2:	b2db      	uxtb	r3, r3
 80104a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80104a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	dce9      	bgt.n	8010482 <prvUnlockQueue+0x16>
 80104ae:	e000      	b.n	80104b2 <prvUnlockQueue+0x46>
					break;
 80104b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	22ff      	movs	r2, #255	; 0xff
 80104b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80104ba:	f001 f92b 	bl	8011714 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80104be:	f001 f8f9 	bl	80116b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80104c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80104ca:	e011      	b.n	80104f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	691b      	ldr	r3, [r3, #16]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d012      	beq.n	80104fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	3310      	adds	r3, #16
 80104d8:	4618      	mov	r0, r3
 80104da:	f000 fbfd 	bl	8010cd8 <xTaskRemoveFromEventList>
 80104de:	4603      	mov	r3, r0
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d001      	beq.n	80104e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80104e4:	f000 fcd2 	bl	8010e8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80104e8:	7bbb      	ldrb	r3, [r7, #14]
 80104ea:	3b01      	subs	r3, #1
 80104ec:	b2db      	uxtb	r3, r3
 80104ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80104f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	dce9      	bgt.n	80104cc <prvUnlockQueue+0x60>
 80104f8:	e000      	b.n	80104fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80104fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	22ff      	movs	r2, #255	; 0xff
 8010500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010504:	f001 f906 	bl	8011714 <vPortExitCritical>
}
 8010508:	bf00      	nop
 801050a:	3710      	adds	r7, #16
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}

08010510 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b084      	sub	sp, #16
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010518:	f001 f8cc 	bl	80116b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010520:	2b00      	cmp	r3, #0
 8010522:	d102      	bne.n	801052a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010524:	2301      	movs	r3, #1
 8010526:	60fb      	str	r3, [r7, #12]
 8010528:	e001      	b.n	801052e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801052a:	2300      	movs	r3, #0
 801052c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801052e:	f001 f8f1 	bl	8011714 <vPortExitCritical>

	return xReturn;
 8010532:	68fb      	ldr	r3, [r7, #12]
}
 8010534:	4618      	mov	r0, r3
 8010536:	3710      	adds	r7, #16
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}

0801053c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b084      	sub	sp, #16
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010544:	f001 f8b6 	bl	80116b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010550:	429a      	cmp	r2, r3
 8010552:	d102      	bne.n	801055a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010554:	2301      	movs	r3, #1
 8010556:	60fb      	str	r3, [r7, #12]
 8010558:	e001      	b.n	801055e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801055a:	2300      	movs	r3, #0
 801055c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801055e:	f001 f8d9 	bl	8011714 <vPortExitCritical>

	return xReturn;
 8010562:	68fb      	ldr	r3, [r7, #12]
}
 8010564:	4618      	mov	r0, r3
 8010566:	3710      	adds	r7, #16
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}

0801056c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801056c:	b580      	push	{r7, lr}
 801056e:	b08c      	sub	sp, #48	; 0x30
 8010570:	af04      	add	r7, sp, #16
 8010572:	60f8      	str	r0, [r7, #12]
 8010574:	60b9      	str	r1, [r7, #8]
 8010576:	603b      	str	r3, [r7, #0]
 8010578:	4613      	mov	r3, r2
 801057a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801057c:	88fb      	ldrh	r3, [r7, #6]
 801057e:	009b      	lsls	r3, r3, #2
 8010580:	4618      	mov	r0, r3
 8010582:	f001 f9b9 	bl	80118f8 <pvPortMalloc>
 8010586:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010588:	697b      	ldr	r3, [r7, #20]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d00e      	beq.n	80105ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801058e:	20a0      	movs	r0, #160	; 0xa0
 8010590:	f001 f9b2 	bl	80118f8 <pvPortMalloc>
 8010594:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010596:	69fb      	ldr	r3, [r7, #28]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d003      	beq.n	80105a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801059c:	69fb      	ldr	r3, [r7, #28]
 801059e:	697a      	ldr	r2, [r7, #20]
 80105a0:	631a      	str	r2, [r3, #48]	; 0x30
 80105a2:	e005      	b.n	80105b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80105a4:	6978      	ldr	r0, [r7, #20]
 80105a6:	f001 fa73 	bl	8011a90 <vPortFree>
 80105aa:	e001      	b.n	80105b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80105ac:	2300      	movs	r3, #0
 80105ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80105b0:	69fb      	ldr	r3, [r7, #28]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d013      	beq.n	80105de <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80105b6:	88fa      	ldrh	r2, [r7, #6]
 80105b8:	2300      	movs	r3, #0
 80105ba:	9303      	str	r3, [sp, #12]
 80105bc:	69fb      	ldr	r3, [r7, #28]
 80105be:	9302      	str	r3, [sp, #8]
 80105c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c2:	9301      	str	r3, [sp, #4]
 80105c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c6:	9300      	str	r3, [sp, #0]
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	68b9      	ldr	r1, [r7, #8]
 80105cc:	68f8      	ldr	r0, [r7, #12]
 80105ce:	f000 f80f 	bl	80105f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80105d2:	69f8      	ldr	r0, [r7, #28]
 80105d4:	f000 f8aa 	bl	801072c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80105d8:	2301      	movs	r3, #1
 80105da:	61bb      	str	r3, [r7, #24]
 80105dc:	e002      	b.n	80105e4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80105de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80105e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80105e4:	69bb      	ldr	r3, [r7, #24]
	}
 80105e6:	4618      	mov	r0, r3
 80105e8:	3720      	adds	r7, #32
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd80      	pop	{r7, pc}
	...

080105f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b088      	sub	sp, #32
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	60f8      	str	r0, [r7, #12]
 80105f8:	60b9      	str	r1, [r7, #8]
 80105fa:	607a      	str	r2, [r7, #4]
 80105fc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80105fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010608:	3b01      	subs	r3, #1
 801060a:	009b      	lsls	r3, r3, #2
 801060c:	4413      	add	r3, r2
 801060e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010610:	69bb      	ldr	r3, [r7, #24]
 8010612:	f023 0307 	bic.w	r3, r3, #7
 8010616:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010618:	69bb      	ldr	r3, [r7, #24]
 801061a:	f003 0307 	and.w	r3, r3, #7
 801061e:	2b00      	cmp	r3, #0
 8010620:	d00a      	beq.n	8010638 <prvInitialiseNewTask+0x48>
	__asm volatile
 8010622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010626:	f383 8811 	msr	BASEPRI, r3
 801062a:	f3bf 8f6f 	isb	sy
 801062e:	f3bf 8f4f 	dsb	sy
 8010632:	617b      	str	r3, [r7, #20]
}
 8010634:	bf00      	nop
 8010636:	e7fe      	b.n	8010636 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010638:	68bb      	ldr	r3, [r7, #8]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d01f      	beq.n	801067e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801063e:	2300      	movs	r3, #0
 8010640:	61fb      	str	r3, [r7, #28]
 8010642:	e012      	b.n	801066a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010644:	68ba      	ldr	r2, [r7, #8]
 8010646:	69fb      	ldr	r3, [r7, #28]
 8010648:	4413      	add	r3, r2
 801064a:	7819      	ldrb	r1, [r3, #0]
 801064c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801064e:	69fb      	ldr	r3, [r7, #28]
 8010650:	4413      	add	r3, r2
 8010652:	3334      	adds	r3, #52	; 0x34
 8010654:	460a      	mov	r2, r1
 8010656:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010658:	68ba      	ldr	r2, [r7, #8]
 801065a:	69fb      	ldr	r3, [r7, #28]
 801065c:	4413      	add	r3, r2
 801065e:	781b      	ldrb	r3, [r3, #0]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d006      	beq.n	8010672 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010664:	69fb      	ldr	r3, [r7, #28]
 8010666:	3301      	adds	r3, #1
 8010668:	61fb      	str	r3, [r7, #28]
 801066a:	69fb      	ldr	r3, [r7, #28]
 801066c:	2b0f      	cmp	r3, #15
 801066e:	d9e9      	bls.n	8010644 <prvInitialiseNewTask+0x54>
 8010670:	e000      	b.n	8010674 <prvInitialiseNewTask+0x84>
			{
				break;
 8010672:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010676:	2200      	movs	r2, #0
 8010678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801067c:	e003      	b.n	8010686 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801067e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010680:	2200      	movs	r2, #0
 8010682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010688:	2b1f      	cmp	r3, #31
 801068a:	d901      	bls.n	8010690 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801068c:	231f      	movs	r3, #31
 801068e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010694:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801069a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801069c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801069e:	2200      	movs	r2, #0
 80106a0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80106a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106a4:	3304      	adds	r3, #4
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7ff f92d 	bl	800f906 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80106ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106ae:	3318      	adds	r3, #24
 80106b0:	4618      	mov	r0, r3
 80106b2:	f7ff f928 	bl	800f906 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80106b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80106bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106be:	f1c3 0220 	rsb	r2, r3, #32
 80106c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80106c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80106cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106ce:	2200      	movs	r2, #0
 80106d0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80106d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106d6:	2200      	movs	r2, #0
 80106d8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80106dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106de:	334c      	adds	r3, #76	; 0x4c
 80106e0:	224c      	movs	r2, #76	; 0x4c
 80106e2:	2100      	movs	r1, #0
 80106e4:	4618      	mov	r0, r3
 80106e6:	f002 fe33 	bl	8013350 <memset>
 80106ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106ec:	4a0c      	ldr	r2, [pc, #48]	; (8010720 <prvInitialiseNewTask+0x130>)
 80106ee:	651a      	str	r2, [r3, #80]	; 0x50
 80106f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106f2:	4a0c      	ldr	r2, [pc, #48]	; (8010724 <prvInitialiseNewTask+0x134>)
 80106f4:	655a      	str	r2, [r3, #84]	; 0x54
 80106f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106f8:	4a0b      	ldr	r2, [pc, #44]	; (8010728 <prvInitialiseNewTask+0x138>)
 80106fa:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80106fc:	683a      	ldr	r2, [r7, #0]
 80106fe:	68f9      	ldr	r1, [r7, #12]
 8010700:	69b8      	ldr	r0, [r7, #24]
 8010702:	f000 fead 	bl	8011460 <pxPortInitialiseStack>
 8010706:	4602      	mov	r2, r0
 8010708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801070a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801070c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801070e:	2b00      	cmp	r3, #0
 8010710:	d002      	beq.n	8010718 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010716:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010718:	bf00      	nop
 801071a:	3720      	adds	r7, #32
 801071c:	46bd      	mov	sp, r7
 801071e:	bd80      	pop	{r7, pc}
 8010720:	20006690 	.word	0x20006690
 8010724:	200066f8 	.word	0x200066f8
 8010728:	20006760 	.word	0x20006760

0801072c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b082      	sub	sp, #8
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010734:	f000 ffbe 	bl	80116b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010738:	4b2a      	ldr	r3, [pc, #168]	; (80107e4 <prvAddNewTaskToReadyList+0xb8>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	3301      	adds	r3, #1
 801073e:	4a29      	ldr	r2, [pc, #164]	; (80107e4 <prvAddNewTaskToReadyList+0xb8>)
 8010740:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010742:	4b29      	ldr	r3, [pc, #164]	; (80107e8 <prvAddNewTaskToReadyList+0xbc>)
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d109      	bne.n	801075e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801074a:	4a27      	ldr	r2, [pc, #156]	; (80107e8 <prvAddNewTaskToReadyList+0xbc>)
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010750:	4b24      	ldr	r3, [pc, #144]	; (80107e4 <prvAddNewTaskToReadyList+0xb8>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	2b01      	cmp	r3, #1
 8010756:	d110      	bne.n	801077a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010758:	f000 fbbc 	bl	8010ed4 <prvInitialiseTaskLists>
 801075c:	e00d      	b.n	801077a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801075e:	4b23      	ldr	r3, [pc, #140]	; (80107ec <prvAddNewTaskToReadyList+0xc0>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d109      	bne.n	801077a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010766:	4b20      	ldr	r3, [pc, #128]	; (80107e8 <prvAddNewTaskToReadyList+0xbc>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010770:	429a      	cmp	r2, r3
 8010772:	d802      	bhi.n	801077a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010774:	4a1c      	ldr	r2, [pc, #112]	; (80107e8 <prvAddNewTaskToReadyList+0xbc>)
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801077a:	4b1d      	ldr	r3, [pc, #116]	; (80107f0 <prvAddNewTaskToReadyList+0xc4>)
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	3301      	adds	r3, #1
 8010780:	4a1b      	ldr	r2, [pc, #108]	; (80107f0 <prvAddNewTaskToReadyList+0xc4>)
 8010782:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010788:	2201      	movs	r2, #1
 801078a:	409a      	lsls	r2, r3
 801078c:	4b19      	ldr	r3, [pc, #100]	; (80107f4 <prvAddNewTaskToReadyList+0xc8>)
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	4313      	orrs	r3, r2
 8010792:	4a18      	ldr	r2, [pc, #96]	; (80107f4 <prvAddNewTaskToReadyList+0xc8>)
 8010794:	6013      	str	r3, [r2, #0]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801079a:	4613      	mov	r3, r2
 801079c:	009b      	lsls	r3, r3, #2
 801079e:	4413      	add	r3, r2
 80107a0:	009b      	lsls	r3, r3, #2
 80107a2:	4a15      	ldr	r2, [pc, #84]	; (80107f8 <prvAddNewTaskToReadyList+0xcc>)
 80107a4:	441a      	add	r2, r3
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	3304      	adds	r3, #4
 80107aa:	4619      	mov	r1, r3
 80107ac:	4610      	mov	r0, r2
 80107ae:	f7ff f8b7 	bl	800f920 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80107b2:	f000 ffaf 	bl	8011714 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80107b6:	4b0d      	ldr	r3, [pc, #52]	; (80107ec <prvAddNewTaskToReadyList+0xc0>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d00e      	beq.n	80107dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80107be:	4b0a      	ldr	r3, [pc, #40]	; (80107e8 <prvAddNewTaskToReadyList+0xbc>)
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107c8:	429a      	cmp	r2, r3
 80107ca:	d207      	bcs.n	80107dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80107cc:	4b0b      	ldr	r3, [pc, #44]	; (80107fc <prvAddNewTaskToReadyList+0xd0>)
 80107ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107d2:	601a      	str	r2, [r3, #0]
 80107d4:	f3bf 8f4f 	dsb	sy
 80107d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80107dc:	bf00      	nop
 80107de:	3708      	adds	r7, #8
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}
 80107e4:	20000c58 	.word	0x20000c58
 80107e8:	20000964 	.word	0x20000964
 80107ec:	20000c64 	.word	0x20000c64
 80107f0:	20000c74 	.word	0x20000c74
 80107f4:	20000c60 	.word	0x20000c60
 80107f8:	20000968 	.word	0x20000968
 80107fc:	e000ed04 	.word	0xe000ed04

08010800 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010800:	b580      	push	{r7, lr}
 8010802:	b084      	sub	sp, #16
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010808:	2300      	movs	r3, #0
 801080a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d017      	beq.n	8010842 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010812:	4b13      	ldr	r3, [pc, #76]	; (8010860 <vTaskDelay+0x60>)
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d00a      	beq.n	8010830 <vTaskDelay+0x30>
	__asm volatile
 801081a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801081e:	f383 8811 	msr	BASEPRI, r3
 8010822:	f3bf 8f6f 	isb	sy
 8010826:	f3bf 8f4f 	dsb	sy
 801082a:	60bb      	str	r3, [r7, #8]
}
 801082c:	bf00      	nop
 801082e:	e7fe      	b.n	801082e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010830:	f000 f86a 	bl	8010908 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010834:	2100      	movs	r1, #0
 8010836:	6878      	ldr	r0, [r7, #4]
 8010838:	f000 fdac 	bl	8011394 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801083c:	f000 f872 	bl	8010924 <xTaskResumeAll>
 8010840:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d107      	bne.n	8010858 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010848:	4b06      	ldr	r3, [pc, #24]	; (8010864 <vTaskDelay+0x64>)
 801084a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801084e:	601a      	str	r2, [r3, #0]
 8010850:	f3bf 8f4f 	dsb	sy
 8010854:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010858:	bf00      	nop
 801085a:	3710      	adds	r7, #16
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}
 8010860:	20000c80 	.word	0x20000c80
 8010864:	e000ed04 	.word	0xe000ed04

08010868 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b086      	sub	sp, #24
 801086c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 801086e:	4b1e      	ldr	r3, [pc, #120]	; (80108e8 <vTaskStartScheduler+0x80>)
 8010870:	9301      	str	r3, [sp, #4]
 8010872:	2300      	movs	r3, #0
 8010874:	9300      	str	r3, [sp, #0]
 8010876:	2300      	movs	r3, #0
 8010878:	2280      	movs	r2, #128	; 0x80
 801087a:	491c      	ldr	r1, [pc, #112]	; (80108ec <vTaskStartScheduler+0x84>)
 801087c:	481c      	ldr	r0, [pc, #112]	; (80108f0 <vTaskStartScheduler+0x88>)
 801087e:	f7ff fe75 	bl	801056c <xTaskCreate>
 8010882:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	2b01      	cmp	r3, #1
 8010888:	d11b      	bne.n	80108c2 <vTaskStartScheduler+0x5a>
	__asm volatile
 801088a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801088e:	f383 8811 	msr	BASEPRI, r3
 8010892:	f3bf 8f6f 	isb	sy
 8010896:	f3bf 8f4f 	dsb	sy
 801089a:	60bb      	str	r3, [r7, #8]
}
 801089c:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801089e:	4b15      	ldr	r3, [pc, #84]	; (80108f4 <vTaskStartScheduler+0x8c>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	334c      	adds	r3, #76	; 0x4c
 80108a4:	4a14      	ldr	r2, [pc, #80]	; (80108f8 <vTaskStartScheduler+0x90>)
 80108a6:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80108a8:	4b14      	ldr	r3, [pc, #80]	; (80108fc <vTaskStartScheduler+0x94>)
 80108aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80108ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80108b0:	4b13      	ldr	r3, [pc, #76]	; (8010900 <vTaskStartScheduler+0x98>)
 80108b2:	2201      	movs	r2, #1
 80108b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80108b6:	4b13      	ldr	r3, [pc, #76]	; (8010904 <vTaskStartScheduler+0x9c>)
 80108b8:	2200      	movs	r2, #0
 80108ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80108bc:	f000 fe58 	bl	8011570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80108c0:	e00e      	b.n	80108e0 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80108c8:	d10a      	bne.n	80108e0 <vTaskStartScheduler+0x78>
	__asm volatile
 80108ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108ce:	f383 8811 	msr	BASEPRI, r3
 80108d2:	f3bf 8f6f 	isb	sy
 80108d6:	f3bf 8f4f 	dsb	sy
 80108da:	607b      	str	r3, [r7, #4]
}
 80108dc:	bf00      	nop
 80108de:	e7fe      	b.n	80108de <vTaskStartScheduler+0x76>
}
 80108e0:	bf00      	nop
 80108e2:	3710      	adds	r7, #16
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}
 80108e8:	20000c7c 	.word	0x20000c7c
 80108ec:	080155f8 	.word	0x080155f8
 80108f0:	08010ea5 	.word	0x08010ea5
 80108f4:	20000964 	.word	0x20000964
 80108f8:	200001e0 	.word	0x200001e0
 80108fc:	20000c78 	.word	0x20000c78
 8010900:	20000c64 	.word	0x20000c64
 8010904:	20000c5c 	.word	0x20000c5c

08010908 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010908:	b480      	push	{r7}
 801090a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801090c:	4b04      	ldr	r3, [pc, #16]	; (8010920 <vTaskSuspendAll+0x18>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	3301      	adds	r3, #1
 8010912:	4a03      	ldr	r2, [pc, #12]	; (8010920 <vTaskSuspendAll+0x18>)
 8010914:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010916:	bf00      	nop
 8010918:	46bd      	mov	sp, r7
 801091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091e:	4770      	bx	lr
 8010920:	20000c80 	.word	0x20000c80

08010924 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b084      	sub	sp, #16
 8010928:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801092a:	2300      	movs	r3, #0
 801092c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801092e:	2300      	movs	r3, #0
 8010930:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010932:	4b41      	ldr	r3, [pc, #260]	; (8010a38 <xTaskResumeAll+0x114>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d10a      	bne.n	8010950 <xTaskResumeAll+0x2c>
	__asm volatile
 801093a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801093e:	f383 8811 	msr	BASEPRI, r3
 8010942:	f3bf 8f6f 	isb	sy
 8010946:	f3bf 8f4f 	dsb	sy
 801094a:	603b      	str	r3, [r7, #0]
}
 801094c:	bf00      	nop
 801094e:	e7fe      	b.n	801094e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010950:	f000 feb0 	bl	80116b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010954:	4b38      	ldr	r3, [pc, #224]	; (8010a38 <xTaskResumeAll+0x114>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	3b01      	subs	r3, #1
 801095a:	4a37      	ldr	r2, [pc, #220]	; (8010a38 <xTaskResumeAll+0x114>)
 801095c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801095e:	4b36      	ldr	r3, [pc, #216]	; (8010a38 <xTaskResumeAll+0x114>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d161      	bne.n	8010a2a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010966:	4b35      	ldr	r3, [pc, #212]	; (8010a3c <xTaskResumeAll+0x118>)
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d05d      	beq.n	8010a2a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801096e:	e02e      	b.n	80109ce <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010970:	4b33      	ldr	r3, [pc, #204]	; (8010a40 <xTaskResumeAll+0x11c>)
 8010972:	68db      	ldr	r3, [r3, #12]
 8010974:	68db      	ldr	r3, [r3, #12]
 8010976:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	3318      	adds	r3, #24
 801097c:	4618      	mov	r0, r3
 801097e:	f7ff f82c 	bl	800f9da <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	3304      	adds	r3, #4
 8010986:	4618      	mov	r0, r3
 8010988:	f7ff f827 	bl	800f9da <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010990:	2201      	movs	r2, #1
 8010992:	409a      	lsls	r2, r3
 8010994:	4b2b      	ldr	r3, [pc, #172]	; (8010a44 <xTaskResumeAll+0x120>)
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	4313      	orrs	r3, r2
 801099a:	4a2a      	ldr	r2, [pc, #168]	; (8010a44 <xTaskResumeAll+0x120>)
 801099c:	6013      	str	r3, [r2, #0]
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109a2:	4613      	mov	r3, r2
 80109a4:	009b      	lsls	r3, r3, #2
 80109a6:	4413      	add	r3, r2
 80109a8:	009b      	lsls	r3, r3, #2
 80109aa:	4a27      	ldr	r2, [pc, #156]	; (8010a48 <xTaskResumeAll+0x124>)
 80109ac:	441a      	add	r2, r3
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	3304      	adds	r3, #4
 80109b2:	4619      	mov	r1, r3
 80109b4:	4610      	mov	r0, r2
 80109b6:	f7fe ffb3 	bl	800f920 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109be:	4b23      	ldr	r3, [pc, #140]	; (8010a4c <xTaskResumeAll+0x128>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109c4:	429a      	cmp	r2, r3
 80109c6:	d302      	bcc.n	80109ce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80109c8:	4b21      	ldr	r3, [pc, #132]	; (8010a50 <xTaskResumeAll+0x12c>)
 80109ca:	2201      	movs	r2, #1
 80109cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80109ce:	4b1c      	ldr	r3, [pc, #112]	; (8010a40 <xTaskResumeAll+0x11c>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d1cc      	bne.n	8010970 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d001      	beq.n	80109e0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80109dc:	f000 fafe 	bl	8010fdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80109e0:	4b1c      	ldr	r3, [pc, #112]	; (8010a54 <xTaskResumeAll+0x130>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d010      	beq.n	8010a0e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80109ec:	f000 f836 	bl	8010a5c <xTaskIncrementTick>
 80109f0:	4603      	mov	r3, r0
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d002      	beq.n	80109fc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80109f6:	4b16      	ldr	r3, [pc, #88]	; (8010a50 <xTaskResumeAll+0x12c>)
 80109f8:	2201      	movs	r2, #1
 80109fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	3b01      	subs	r3, #1
 8010a00:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d1f1      	bne.n	80109ec <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8010a08:	4b12      	ldr	r3, [pc, #72]	; (8010a54 <xTaskResumeAll+0x130>)
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010a0e:	4b10      	ldr	r3, [pc, #64]	; (8010a50 <xTaskResumeAll+0x12c>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d009      	beq.n	8010a2a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010a16:	2301      	movs	r3, #1
 8010a18:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010a1a:	4b0f      	ldr	r3, [pc, #60]	; (8010a58 <xTaskResumeAll+0x134>)
 8010a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a20:	601a      	str	r2, [r3, #0]
 8010a22:	f3bf 8f4f 	dsb	sy
 8010a26:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010a2a:	f000 fe73 	bl	8011714 <vPortExitCritical>

	return xAlreadyYielded;
 8010a2e:	68bb      	ldr	r3, [r7, #8]
}
 8010a30:	4618      	mov	r0, r3
 8010a32:	3710      	adds	r7, #16
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}
 8010a38:	20000c80 	.word	0x20000c80
 8010a3c:	20000c58 	.word	0x20000c58
 8010a40:	20000c18 	.word	0x20000c18
 8010a44:	20000c60 	.word	0x20000c60
 8010a48:	20000968 	.word	0x20000968
 8010a4c:	20000964 	.word	0x20000964
 8010a50:	20000c6c 	.word	0x20000c6c
 8010a54:	20000c68 	.word	0x20000c68
 8010a58:	e000ed04 	.word	0xe000ed04

08010a5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b086      	sub	sp, #24
 8010a60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010a62:	2300      	movs	r3, #0
 8010a64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010a66:	4b4e      	ldr	r3, [pc, #312]	; (8010ba0 <xTaskIncrementTick+0x144>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	f040 808e 	bne.w	8010b8c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010a70:	4b4c      	ldr	r3, [pc, #304]	; (8010ba4 <xTaskIncrementTick+0x148>)
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	3301      	adds	r3, #1
 8010a76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010a78:	4a4a      	ldr	r2, [pc, #296]	; (8010ba4 <xTaskIncrementTick+0x148>)
 8010a7a:	693b      	ldr	r3, [r7, #16]
 8010a7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010a7e:	693b      	ldr	r3, [r7, #16]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d120      	bne.n	8010ac6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010a84:	4b48      	ldr	r3, [pc, #288]	; (8010ba8 <xTaskIncrementTick+0x14c>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d00a      	beq.n	8010aa4 <xTaskIncrementTick+0x48>
	__asm volatile
 8010a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a92:	f383 8811 	msr	BASEPRI, r3
 8010a96:	f3bf 8f6f 	isb	sy
 8010a9a:	f3bf 8f4f 	dsb	sy
 8010a9e:	603b      	str	r3, [r7, #0]
}
 8010aa0:	bf00      	nop
 8010aa2:	e7fe      	b.n	8010aa2 <xTaskIncrementTick+0x46>
 8010aa4:	4b40      	ldr	r3, [pc, #256]	; (8010ba8 <xTaskIncrementTick+0x14c>)
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	60fb      	str	r3, [r7, #12]
 8010aaa:	4b40      	ldr	r3, [pc, #256]	; (8010bac <xTaskIncrementTick+0x150>)
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	4a3e      	ldr	r2, [pc, #248]	; (8010ba8 <xTaskIncrementTick+0x14c>)
 8010ab0:	6013      	str	r3, [r2, #0]
 8010ab2:	4a3e      	ldr	r2, [pc, #248]	; (8010bac <xTaskIncrementTick+0x150>)
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	6013      	str	r3, [r2, #0]
 8010ab8:	4b3d      	ldr	r3, [pc, #244]	; (8010bb0 <xTaskIncrementTick+0x154>)
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	3301      	adds	r3, #1
 8010abe:	4a3c      	ldr	r2, [pc, #240]	; (8010bb0 <xTaskIncrementTick+0x154>)
 8010ac0:	6013      	str	r3, [r2, #0]
 8010ac2:	f000 fa8b 	bl	8010fdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010ac6:	4b3b      	ldr	r3, [pc, #236]	; (8010bb4 <xTaskIncrementTick+0x158>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	693a      	ldr	r2, [r7, #16]
 8010acc:	429a      	cmp	r2, r3
 8010ace:	d348      	bcc.n	8010b62 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010ad0:	4b35      	ldr	r3, [pc, #212]	; (8010ba8 <xTaskIncrementTick+0x14c>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d104      	bne.n	8010ae4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ada:	4b36      	ldr	r3, [pc, #216]	; (8010bb4 <xTaskIncrementTick+0x158>)
 8010adc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010ae0:	601a      	str	r2, [r3, #0]
					break;
 8010ae2:	e03e      	b.n	8010b62 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ae4:	4b30      	ldr	r3, [pc, #192]	; (8010ba8 <xTaskIncrementTick+0x14c>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	68db      	ldr	r3, [r3, #12]
 8010aea:	68db      	ldr	r3, [r3, #12]
 8010aec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010aee:	68bb      	ldr	r3, [r7, #8]
 8010af0:	685b      	ldr	r3, [r3, #4]
 8010af2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010af4:	693a      	ldr	r2, [r7, #16]
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	429a      	cmp	r2, r3
 8010afa:	d203      	bcs.n	8010b04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010afc:	4a2d      	ldr	r2, [pc, #180]	; (8010bb4 <xTaskIncrementTick+0x158>)
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010b02:	e02e      	b.n	8010b62 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	3304      	adds	r3, #4
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f7fe ff66 	bl	800f9da <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d004      	beq.n	8010b20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	3318      	adds	r3, #24
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	f7fe ff5d 	bl	800f9da <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010b20:	68bb      	ldr	r3, [r7, #8]
 8010b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b24:	2201      	movs	r2, #1
 8010b26:	409a      	lsls	r2, r3
 8010b28:	4b23      	ldr	r3, [pc, #140]	; (8010bb8 <xTaskIncrementTick+0x15c>)
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	4313      	orrs	r3, r2
 8010b2e:	4a22      	ldr	r2, [pc, #136]	; (8010bb8 <xTaskIncrementTick+0x15c>)
 8010b30:	6013      	str	r3, [r2, #0]
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b36:	4613      	mov	r3, r2
 8010b38:	009b      	lsls	r3, r3, #2
 8010b3a:	4413      	add	r3, r2
 8010b3c:	009b      	lsls	r3, r3, #2
 8010b3e:	4a1f      	ldr	r2, [pc, #124]	; (8010bbc <xTaskIncrementTick+0x160>)
 8010b40:	441a      	add	r2, r3
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	3304      	adds	r3, #4
 8010b46:	4619      	mov	r1, r3
 8010b48:	4610      	mov	r0, r2
 8010b4a:	f7fe fee9 	bl	800f920 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010b4e:	68bb      	ldr	r3, [r7, #8]
 8010b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b52:	4b1b      	ldr	r3, [pc, #108]	; (8010bc0 <xTaskIncrementTick+0x164>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b58:	429a      	cmp	r2, r3
 8010b5a:	d3b9      	bcc.n	8010ad0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010b60:	e7b6      	b.n	8010ad0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010b62:	4b17      	ldr	r3, [pc, #92]	; (8010bc0 <xTaskIncrementTick+0x164>)
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b68:	4914      	ldr	r1, [pc, #80]	; (8010bbc <xTaskIncrementTick+0x160>)
 8010b6a:	4613      	mov	r3, r2
 8010b6c:	009b      	lsls	r3, r3, #2
 8010b6e:	4413      	add	r3, r2
 8010b70:	009b      	lsls	r3, r3, #2
 8010b72:	440b      	add	r3, r1
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	2b01      	cmp	r3, #1
 8010b78:	d901      	bls.n	8010b7e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010b7e:	4b11      	ldr	r3, [pc, #68]	; (8010bc4 <xTaskIncrementTick+0x168>)
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d007      	beq.n	8010b96 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8010b86:	2301      	movs	r3, #1
 8010b88:	617b      	str	r3, [r7, #20]
 8010b8a:	e004      	b.n	8010b96 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010b8c:	4b0e      	ldr	r3, [pc, #56]	; (8010bc8 <xTaskIncrementTick+0x16c>)
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	3301      	adds	r3, #1
 8010b92:	4a0d      	ldr	r2, [pc, #52]	; (8010bc8 <xTaskIncrementTick+0x16c>)
 8010b94:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010b96:	697b      	ldr	r3, [r7, #20]
}
 8010b98:	4618      	mov	r0, r3
 8010b9a:	3718      	adds	r7, #24
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bd80      	pop	{r7, pc}
 8010ba0:	20000c80 	.word	0x20000c80
 8010ba4:	20000c5c 	.word	0x20000c5c
 8010ba8:	20000c10 	.word	0x20000c10
 8010bac:	20000c14 	.word	0x20000c14
 8010bb0:	20000c70 	.word	0x20000c70
 8010bb4:	20000c78 	.word	0x20000c78
 8010bb8:	20000c60 	.word	0x20000c60
 8010bbc:	20000968 	.word	0x20000968
 8010bc0:	20000964 	.word	0x20000964
 8010bc4:	20000c6c 	.word	0x20000c6c
 8010bc8:	20000c68 	.word	0x20000c68

08010bcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010bcc:	b480      	push	{r7}
 8010bce:	b087      	sub	sp, #28
 8010bd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010bd2:	4b29      	ldr	r3, [pc, #164]	; (8010c78 <vTaskSwitchContext+0xac>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d003      	beq.n	8010be2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010bda:	4b28      	ldr	r3, [pc, #160]	; (8010c7c <vTaskSwitchContext+0xb0>)
 8010bdc:	2201      	movs	r2, #1
 8010bde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010be0:	e044      	b.n	8010c6c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8010be2:	4b26      	ldr	r3, [pc, #152]	; (8010c7c <vTaskSwitchContext+0xb0>)
 8010be4:	2200      	movs	r2, #0
 8010be6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010be8:	4b25      	ldr	r3, [pc, #148]	; (8010c80 <vTaskSwitchContext+0xb4>)
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	fab3 f383 	clz	r3, r3
 8010bf4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010bf6:	7afb      	ldrb	r3, [r7, #11]
 8010bf8:	f1c3 031f 	rsb	r3, r3, #31
 8010bfc:	617b      	str	r3, [r7, #20]
 8010bfe:	4921      	ldr	r1, [pc, #132]	; (8010c84 <vTaskSwitchContext+0xb8>)
 8010c00:	697a      	ldr	r2, [r7, #20]
 8010c02:	4613      	mov	r3, r2
 8010c04:	009b      	lsls	r3, r3, #2
 8010c06:	4413      	add	r3, r2
 8010c08:	009b      	lsls	r3, r3, #2
 8010c0a:	440b      	add	r3, r1
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d10a      	bne.n	8010c28 <vTaskSwitchContext+0x5c>
	__asm volatile
 8010c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c16:	f383 8811 	msr	BASEPRI, r3
 8010c1a:	f3bf 8f6f 	isb	sy
 8010c1e:	f3bf 8f4f 	dsb	sy
 8010c22:	607b      	str	r3, [r7, #4]
}
 8010c24:	bf00      	nop
 8010c26:	e7fe      	b.n	8010c26 <vTaskSwitchContext+0x5a>
 8010c28:	697a      	ldr	r2, [r7, #20]
 8010c2a:	4613      	mov	r3, r2
 8010c2c:	009b      	lsls	r3, r3, #2
 8010c2e:	4413      	add	r3, r2
 8010c30:	009b      	lsls	r3, r3, #2
 8010c32:	4a14      	ldr	r2, [pc, #80]	; (8010c84 <vTaskSwitchContext+0xb8>)
 8010c34:	4413      	add	r3, r2
 8010c36:	613b      	str	r3, [r7, #16]
 8010c38:	693b      	ldr	r3, [r7, #16]
 8010c3a:	685b      	ldr	r3, [r3, #4]
 8010c3c:	685a      	ldr	r2, [r3, #4]
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	605a      	str	r2, [r3, #4]
 8010c42:	693b      	ldr	r3, [r7, #16]
 8010c44:	685a      	ldr	r2, [r3, #4]
 8010c46:	693b      	ldr	r3, [r7, #16]
 8010c48:	3308      	adds	r3, #8
 8010c4a:	429a      	cmp	r2, r3
 8010c4c:	d104      	bne.n	8010c58 <vTaskSwitchContext+0x8c>
 8010c4e:	693b      	ldr	r3, [r7, #16]
 8010c50:	685b      	ldr	r3, [r3, #4]
 8010c52:	685a      	ldr	r2, [r3, #4]
 8010c54:	693b      	ldr	r3, [r7, #16]
 8010c56:	605a      	str	r2, [r3, #4]
 8010c58:	693b      	ldr	r3, [r7, #16]
 8010c5a:	685b      	ldr	r3, [r3, #4]
 8010c5c:	68db      	ldr	r3, [r3, #12]
 8010c5e:	4a0a      	ldr	r2, [pc, #40]	; (8010c88 <vTaskSwitchContext+0xbc>)
 8010c60:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010c62:	4b09      	ldr	r3, [pc, #36]	; (8010c88 <vTaskSwitchContext+0xbc>)
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	334c      	adds	r3, #76	; 0x4c
 8010c68:	4a08      	ldr	r2, [pc, #32]	; (8010c8c <vTaskSwitchContext+0xc0>)
 8010c6a:	6013      	str	r3, [r2, #0]
}
 8010c6c:	bf00      	nop
 8010c6e:	371c      	adds	r7, #28
 8010c70:	46bd      	mov	sp, r7
 8010c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c76:	4770      	bx	lr
 8010c78:	20000c80 	.word	0x20000c80
 8010c7c:	20000c6c 	.word	0x20000c6c
 8010c80:	20000c60 	.word	0x20000c60
 8010c84:	20000968 	.word	0x20000968
 8010c88:	20000964 	.word	0x20000964
 8010c8c:	200001e0 	.word	0x200001e0

08010c90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b084      	sub	sp, #16
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
 8010c98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d10a      	bne.n	8010cb6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ca4:	f383 8811 	msr	BASEPRI, r3
 8010ca8:	f3bf 8f6f 	isb	sy
 8010cac:	f3bf 8f4f 	dsb	sy
 8010cb0:	60fb      	str	r3, [r7, #12]
}
 8010cb2:	bf00      	nop
 8010cb4:	e7fe      	b.n	8010cb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010cb6:	4b07      	ldr	r3, [pc, #28]	; (8010cd4 <vTaskPlaceOnEventList+0x44>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	3318      	adds	r3, #24
 8010cbc:	4619      	mov	r1, r3
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f7fe fe52 	bl	800f968 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010cc4:	2101      	movs	r1, #1
 8010cc6:	6838      	ldr	r0, [r7, #0]
 8010cc8:	f000 fb64 	bl	8011394 <prvAddCurrentTaskToDelayedList>
}
 8010ccc:	bf00      	nop
 8010cce:	3710      	adds	r7, #16
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}
 8010cd4:	20000964 	.word	0x20000964

08010cd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b086      	sub	sp, #24
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	68db      	ldr	r3, [r3, #12]
 8010ce4:	68db      	ldr	r3, [r3, #12]
 8010ce6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010ce8:	693b      	ldr	r3, [r7, #16]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d10a      	bne.n	8010d04 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cf2:	f383 8811 	msr	BASEPRI, r3
 8010cf6:	f3bf 8f6f 	isb	sy
 8010cfa:	f3bf 8f4f 	dsb	sy
 8010cfe:	60fb      	str	r3, [r7, #12]
}
 8010d00:	bf00      	nop
 8010d02:	e7fe      	b.n	8010d02 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010d04:	693b      	ldr	r3, [r7, #16]
 8010d06:	3318      	adds	r3, #24
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f7fe fe66 	bl	800f9da <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d0e:	4b1d      	ldr	r3, [pc, #116]	; (8010d84 <xTaskRemoveFromEventList+0xac>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d11c      	bne.n	8010d50 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010d16:	693b      	ldr	r3, [r7, #16]
 8010d18:	3304      	adds	r3, #4
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7fe fe5d 	bl	800f9da <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010d20:	693b      	ldr	r3, [r7, #16]
 8010d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d24:	2201      	movs	r2, #1
 8010d26:	409a      	lsls	r2, r3
 8010d28:	4b17      	ldr	r3, [pc, #92]	; (8010d88 <xTaskRemoveFromEventList+0xb0>)
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	4313      	orrs	r3, r2
 8010d2e:	4a16      	ldr	r2, [pc, #88]	; (8010d88 <xTaskRemoveFromEventList+0xb0>)
 8010d30:	6013      	str	r3, [r2, #0]
 8010d32:	693b      	ldr	r3, [r7, #16]
 8010d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d36:	4613      	mov	r3, r2
 8010d38:	009b      	lsls	r3, r3, #2
 8010d3a:	4413      	add	r3, r2
 8010d3c:	009b      	lsls	r3, r3, #2
 8010d3e:	4a13      	ldr	r2, [pc, #76]	; (8010d8c <xTaskRemoveFromEventList+0xb4>)
 8010d40:	441a      	add	r2, r3
 8010d42:	693b      	ldr	r3, [r7, #16]
 8010d44:	3304      	adds	r3, #4
 8010d46:	4619      	mov	r1, r3
 8010d48:	4610      	mov	r0, r2
 8010d4a:	f7fe fde9 	bl	800f920 <vListInsertEnd>
 8010d4e:	e005      	b.n	8010d5c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010d50:	693b      	ldr	r3, [r7, #16]
 8010d52:	3318      	adds	r3, #24
 8010d54:	4619      	mov	r1, r3
 8010d56:	480e      	ldr	r0, [pc, #56]	; (8010d90 <xTaskRemoveFromEventList+0xb8>)
 8010d58:	f7fe fde2 	bl	800f920 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010d5c:	693b      	ldr	r3, [r7, #16]
 8010d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d60:	4b0c      	ldr	r3, [pc, #48]	; (8010d94 <xTaskRemoveFromEventList+0xbc>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d905      	bls.n	8010d76 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010d6e:	4b0a      	ldr	r3, [pc, #40]	; (8010d98 <xTaskRemoveFromEventList+0xc0>)
 8010d70:	2201      	movs	r2, #1
 8010d72:	601a      	str	r2, [r3, #0]
 8010d74:	e001      	b.n	8010d7a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8010d76:	2300      	movs	r3, #0
 8010d78:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010d7a:	697b      	ldr	r3, [r7, #20]
}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3718      	adds	r7, #24
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}
 8010d84:	20000c80 	.word	0x20000c80
 8010d88:	20000c60 	.word	0x20000c60
 8010d8c:	20000968 	.word	0x20000968
 8010d90:	20000c18 	.word	0x20000c18
 8010d94:	20000964 	.word	0x20000964
 8010d98:	20000c6c 	.word	0x20000c6c

08010d9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010d9c:	b480      	push	{r7}
 8010d9e:	b083      	sub	sp, #12
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010da4:	4b06      	ldr	r3, [pc, #24]	; (8010dc0 <vTaskInternalSetTimeOutState+0x24>)
 8010da6:	681a      	ldr	r2, [r3, #0]
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010dac:	4b05      	ldr	r3, [pc, #20]	; (8010dc4 <vTaskInternalSetTimeOutState+0x28>)
 8010dae:	681a      	ldr	r2, [r3, #0]
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	605a      	str	r2, [r3, #4]
}
 8010db4:	bf00      	nop
 8010db6:	370c      	adds	r7, #12
 8010db8:	46bd      	mov	sp, r7
 8010dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbe:	4770      	bx	lr
 8010dc0:	20000c70 	.word	0x20000c70
 8010dc4:	20000c5c 	.word	0x20000c5c

08010dc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b088      	sub	sp, #32
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
 8010dd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d10a      	bne.n	8010dee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ddc:	f383 8811 	msr	BASEPRI, r3
 8010de0:	f3bf 8f6f 	isb	sy
 8010de4:	f3bf 8f4f 	dsb	sy
 8010de8:	613b      	str	r3, [r7, #16]
}
 8010dea:	bf00      	nop
 8010dec:	e7fe      	b.n	8010dec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010dee:	683b      	ldr	r3, [r7, #0]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d10a      	bne.n	8010e0a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010df8:	f383 8811 	msr	BASEPRI, r3
 8010dfc:	f3bf 8f6f 	isb	sy
 8010e00:	f3bf 8f4f 	dsb	sy
 8010e04:	60fb      	str	r3, [r7, #12]
}
 8010e06:	bf00      	nop
 8010e08:	e7fe      	b.n	8010e08 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010e0a:	f000 fc53 	bl	80116b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010e0e:	4b1d      	ldr	r3, [pc, #116]	; (8010e84 <xTaskCheckForTimeOut+0xbc>)
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	685b      	ldr	r3, [r3, #4]
 8010e18:	69ba      	ldr	r2, [r7, #24]
 8010e1a:	1ad3      	subs	r3, r2, r3
 8010e1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e26:	d102      	bne.n	8010e2e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010e28:	2300      	movs	r3, #0
 8010e2a:	61fb      	str	r3, [r7, #28]
 8010e2c:	e023      	b.n	8010e76 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681a      	ldr	r2, [r3, #0]
 8010e32:	4b15      	ldr	r3, [pc, #84]	; (8010e88 <xTaskCheckForTimeOut+0xc0>)
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	429a      	cmp	r2, r3
 8010e38:	d007      	beq.n	8010e4a <xTaskCheckForTimeOut+0x82>
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	685b      	ldr	r3, [r3, #4]
 8010e3e:	69ba      	ldr	r2, [r7, #24]
 8010e40:	429a      	cmp	r2, r3
 8010e42:	d302      	bcc.n	8010e4a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010e44:	2301      	movs	r3, #1
 8010e46:	61fb      	str	r3, [r7, #28]
 8010e48:	e015      	b.n	8010e76 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	697a      	ldr	r2, [r7, #20]
 8010e50:	429a      	cmp	r2, r3
 8010e52:	d20b      	bcs.n	8010e6c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	681a      	ldr	r2, [r3, #0]
 8010e58:	697b      	ldr	r3, [r7, #20]
 8010e5a:	1ad2      	subs	r2, r2, r3
 8010e5c:	683b      	ldr	r3, [r7, #0]
 8010e5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010e60:	6878      	ldr	r0, [r7, #4]
 8010e62:	f7ff ff9b 	bl	8010d9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010e66:	2300      	movs	r3, #0
 8010e68:	61fb      	str	r3, [r7, #28]
 8010e6a:	e004      	b.n	8010e76 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	2200      	movs	r2, #0
 8010e70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010e72:	2301      	movs	r3, #1
 8010e74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010e76:	f000 fc4d 	bl	8011714 <vPortExitCritical>

	return xReturn;
 8010e7a:	69fb      	ldr	r3, [r7, #28]
}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3720      	adds	r7, #32
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}
 8010e84:	20000c5c 	.word	0x20000c5c
 8010e88:	20000c70 	.word	0x20000c70

08010e8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010e8c:	b480      	push	{r7}
 8010e8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010e90:	4b03      	ldr	r3, [pc, #12]	; (8010ea0 <vTaskMissedYield+0x14>)
 8010e92:	2201      	movs	r2, #1
 8010e94:	601a      	str	r2, [r3, #0]
}
 8010e96:	bf00      	nop
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9e:	4770      	bx	lr
 8010ea0:	20000c6c 	.word	0x20000c6c

08010ea4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b082      	sub	sp, #8
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010eac:	f000 f852 	bl	8010f54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010eb0:	4b06      	ldr	r3, [pc, #24]	; (8010ecc <prvIdleTask+0x28>)
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	2b01      	cmp	r3, #1
 8010eb6:	d9f9      	bls.n	8010eac <prvIdleTask+0x8>
			{
				taskYIELD();
 8010eb8:	4b05      	ldr	r3, [pc, #20]	; (8010ed0 <prvIdleTask+0x2c>)
 8010eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ebe:	601a      	str	r2, [r3, #0]
 8010ec0:	f3bf 8f4f 	dsb	sy
 8010ec4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010ec8:	e7f0      	b.n	8010eac <prvIdleTask+0x8>
 8010eca:	bf00      	nop
 8010ecc:	20000968 	.word	0x20000968
 8010ed0:	e000ed04 	.word	0xe000ed04

08010ed4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b082      	sub	sp, #8
 8010ed8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010eda:	2300      	movs	r3, #0
 8010edc:	607b      	str	r3, [r7, #4]
 8010ede:	e00c      	b.n	8010efa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010ee0:	687a      	ldr	r2, [r7, #4]
 8010ee2:	4613      	mov	r3, r2
 8010ee4:	009b      	lsls	r3, r3, #2
 8010ee6:	4413      	add	r3, r2
 8010ee8:	009b      	lsls	r3, r3, #2
 8010eea:	4a12      	ldr	r2, [pc, #72]	; (8010f34 <prvInitialiseTaskLists+0x60>)
 8010eec:	4413      	add	r3, r2
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f7fe fce9 	bl	800f8c6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	3301      	adds	r3, #1
 8010ef8:	607b      	str	r3, [r7, #4]
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2b1f      	cmp	r3, #31
 8010efe:	d9ef      	bls.n	8010ee0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010f00:	480d      	ldr	r0, [pc, #52]	; (8010f38 <prvInitialiseTaskLists+0x64>)
 8010f02:	f7fe fce0 	bl	800f8c6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010f06:	480d      	ldr	r0, [pc, #52]	; (8010f3c <prvInitialiseTaskLists+0x68>)
 8010f08:	f7fe fcdd 	bl	800f8c6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010f0c:	480c      	ldr	r0, [pc, #48]	; (8010f40 <prvInitialiseTaskLists+0x6c>)
 8010f0e:	f7fe fcda 	bl	800f8c6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010f12:	480c      	ldr	r0, [pc, #48]	; (8010f44 <prvInitialiseTaskLists+0x70>)
 8010f14:	f7fe fcd7 	bl	800f8c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010f18:	480b      	ldr	r0, [pc, #44]	; (8010f48 <prvInitialiseTaskLists+0x74>)
 8010f1a:	f7fe fcd4 	bl	800f8c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010f1e:	4b0b      	ldr	r3, [pc, #44]	; (8010f4c <prvInitialiseTaskLists+0x78>)
 8010f20:	4a05      	ldr	r2, [pc, #20]	; (8010f38 <prvInitialiseTaskLists+0x64>)
 8010f22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010f24:	4b0a      	ldr	r3, [pc, #40]	; (8010f50 <prvInitialiseTaskLists+0x7c>)
 8010f26:	4a05      	ldr	r2, [pc, #20]	; (8010f3c <prvInitialiseTaskLists+0x68>)
 8010f28:	601a      	str	r2, [r3, #0]
}
 8010f2a:	bf00      	nop
 8010f2c:	3708      	adds	r7, #8
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}
 8010f32:	bf00      	nop
 8010f34:	20000968 	.word	0x20000968
 8010f38:	20000be8 	.word	0x20000be8
 8010f3c:	20000bfc 	.word	0x20000bfc
 8010f40:	20000c18 	.word	0x20000c18
 8010f44:	20000c2c 	.word	0x20000c2c
 8010f48:	20000c44 	.word	0x20000c44
 8010f4c:	20000c10 	.word	0x20000c10
 8010f50:	20000c14 	.word	0x20000c14

08010f54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b082      	sub	sp, #8
 8010f58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010f5a:	e019      	b.n	8010f90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010f5c:	f000 fbaa 	bl	80116b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f60:	4b10      	ldr	r3, [pc, #64]	; (8010fa4 <prvCheckTasksWaitingTermination+0x50>)
 8010f62:	68db      	ldr	r3, [r3, #12]
 8010f64:	68db      	ldr	r3, [r3, #12]
 8010f66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	3304      	adds	r3, #4
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f7fe fd34 	bl	800f9da <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010f72:	4b0d      	ldr	r3, [pc, #52]	; (8010fa8 <prvCheckTasksWaitingTermination+0x54>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	3b01      	subs	r3, #1
 8010f78:	4a0b      	ldr	r2, [pc, #44]	; (8010fa8 <prvCheckTasksWaitingTermination+0x54>)
 8010f7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010f7c:	4b0b      	ldr	r3, [pc, #44]	; (8010fac <prvCheckTasksWaitingTermination+0x58>)
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	3b01      	subs	r3, #1
 8010f82:	4a0a      	ldr	r2, [pc, #40]	; (8010fac <prvCheckTasksWaitingTermination+0x58>)
 8010f84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010f86:	f000 fbc5 	bl	8011714 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f000 f810 	bl	8010fb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010f90:	4b06      	ldr	r3, [pc, #24]	; (8010fac <prvCheckTasksWaitingTermination+0x58>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d1e1      	bne.n	8010f5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010f98:	bf00      	nop
 8010f9a:	bf00      	nop
 8010f9c:	3708      	adds	r7, #8
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bd80      	pop	{r7, pc}
 8010fa2:	bf00      	nop
 8010fa4:	20000c2c 	.word	0x20000c2c
 8010fa8:	20000c58 	.word	0x20000c58
 8010fac:	20000c40 	.word	0x20000c40

08010fb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b082      	sub	sp, #8
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	334c      	adds	r3, #76	; 0x4c
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	f002 f9e3 	bl	8013388 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f000 fd62 	bl	8011a90 <vPortFree>
			vPortFree( pxTCB );
 8010fcc:	6878      	ldr	r0, [r7, #4]
 8010fce:	f000 fd5f 	bl	8011a90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010fd2:	bf00      	nop
 8010fd4:	3708      	adds	r7, #8
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	bd80      	pop	{r7, pc}
	...

08010fdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010fdc:	b480      	push	{r7}
 8010fde:	b083      	sub	sp, #12
 8010fe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010fe2:	4b0c      	ldr	r3, [pc, #48]	; (8011014 <prvResetNextTaskUnblockTime+0x38>)
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d104      	bne.n	8010ff6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010fec:	4b0a      	ldr	r3, [pc, #40]	; (8011018 <prvResetNextTaskUnblockTime+0x3c>)
 8010fee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010ff2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010ff4:	e008      	b.n	8011008 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ff6:	4b07      	ldr	r3, [pc, #28]	; (8011014 <prvResetNextTaskUnblockTime+0x38>)
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	68db      	ldr	r3, [r3, #12]
 8010ffc:	68db      	ldr	r3, [r3, #12]
 8010ffe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	685b      	ldr	r3, [r3, #4]
 8011004:	4a04      	ldr	r2, [pc, #16]	; (8011018 <prvResetNextTaskUnblockTime+0x3c>)
 8011006:	6013      	str	r3, [r2, #0]
}
 8011008:	bf00      	nop
 801100a:	370c      	adds	r7, #12
 801100c:	46bd      	mov	sp, r7
 801100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011012:	4770      	bx	lr
 8011014:	20000c10 	.word	0x20000c10
 8011018:	20000c78 	.word	0x20000c78

0801101c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801101c:	b480      	push	{r7}
 801101e:	b083      	sub	sp, #12
 8011020:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011022:	4b0b      	ldr	r3, [pc, #44]	; (8011050 <xTaskGetSchedulerState+0x34>)
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d102      	bne.n	8011030 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801102a:	2301      	movs	r3, #1
 801102c:	607b      	str	r3, [r7, #4]
 801102e:	e008      	b.n	8011042 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011030:	4b08      	ldr	r3, [pc, #32]	; (8011054 <xTaskGetSchedulerState+0x38>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d102      	bne.n	801103e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011038:	2302      	movs	r3, #2
 801103a:	607b      	str	r3, [r7, #4]
 801103c:	e001      	b.n	8011042 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801103e:	2300      	movs	r3, #0
 8011040:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011042:	687b      	ldr	r3, [r7, #4]
	}
 8011044:	4618      	mov	r0, r3
 8011046:	370c      	adds	r7, #12
 8011048:	46bd      	mov	sp, r7
 801104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104e:	4770      	bx	lr
 8011050:	20000c64 	.word	0x20000c64
 8011054:	20000c80 	.word	0x20000c80

08011058 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011058:	b580      	push	{r7, lr}
 801105a:	b084      	sub	sp, #16
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011064:	2300      	movs	r3, #0
 8011066:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d05e      	beq.n	801112c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801106e:	68bb      	ldr	r3, [r7, #8]
 8011070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011072:	4b31      	ldr	r3, [pc, #196]	; (8011138 <xTaskPriorityInherit+0xe0>)
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011078:	429a      	cmp	r2, r3
 801107a:	d24e      	bcs.n	801111a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801107c:	68bb      	ldr	r3, [r7, #8]
 801107e:	699b      	ldr	r3, [r3, #24]
 8011080:	2b00      	cmp	r3, #0
 8011082:	db06      	blt.n	8011092 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011084:	4b2c      	ldr	r3, [pc, #176]	; (8011138 <xTaskPriorityInherit+0xe0>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801108a:	f1c3 0220 	rsb	r2, r3, #32
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	6959      	ldr	r1, [r3, #20]
 8011096:	68bb      	ldr	r3, [r7, #8]
 8011098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801109a:	4613      	mov	r3, r2
 801109c:	009b      	lsls	r3, r3, #2
 801109e:	4413      	add	r3, r2
 80110a0:	009b      	lsls	r3, r3, #2
 80110a2:	4a26      	ldr	r2, [pc, #152]	; (801113c <xTaskPriorityInherit+0xe4>)
 80110a4:	4413      	add	r3, r2
 80110a6:	4299      	cmp	r1, r3
 80110a8:	d12f      	bne.n	801110a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80110aa:	68bb      	ldr	r3, [r7, #8]
 80110ac:	3304      	adds	r3, #4
 80110ae:	4618      	mov	r0, r3
 80110b0:	f7fe fc93 	bl	800f9da <uxListRemove>
 80110b4:	4603      	mov	r3, r0
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d10a      	bne.n	80110d0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80110ba:	68bb      	ldr	r3, [r7, #8]
 80110bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110be:	2201      	movs	r2, #1
 80110c0:	fa02 f303 	lsl.w	r3, r2, r3
 80110c4:	43da      	mvns	r2, r3
 80110c6:	4b1e      	ldr	r3, [pc, #120]	; (8011140 <xTaskPriorityInherit+0xe8>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	4013      	ands	r3, r2
 80110cc:	4a1c      	ldr	r2, [pc, #112]	; (8011140 <xTaskPriorityInherit+0xe8>)
 80110ce:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80110d0:	4b19      	ldr	r3, [pc, #100]	; (8011138 <xTaskPriorityInherit+0xe0>)
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110d6:	68bb      	ldr	r3, [r7, #8]
 80110d8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80110da:	68bb      	ldr	r3, [r7, #8]
 80110dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110de:	2201      	movs	r2, #1
 80110e0:	409a      	lsls	r2, r3
 80110e2:	4b17      	ldr	r3, [pc, #92]	; (8011140 <xTaskPriorityInherit+0xe8>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	4313      	orrs	r3, r2
 80110e8:	4a15      	ldr	r2, [pc, #84]	; (8011140 <xTaskPriorityInherit+0xe8>)
 80110ea:	6013      	str	r3, [r2, #0]
 80110ec:	68bb      	ldr	r3, [r7, #8]
 80110ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110f0:	4613      	mov	r3, r2
 80110f2:	009b      	lsls	r3, r3, #2
 80110f4:	4413      	add	r3, r2
 80110f6:	009b      	lsls	r3, r3, #2
 80110f8:	4a10      	ldr	r2, [pc, #64]	; (801113c <xTaskPriorityInherit+0xe4>)
 80110fa:	441a      	add	r2, r3
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	3304      	adds	r3, #4
 8011100:	4619      	mov	r1, r3
 8011102:	4610      	mov	r0, r2
 8011104:	f7fe fc0c 	bl	800f920 <vListInsertEnd>
 8011108:	e004      	b.n	8011114 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801110a:	4b0b      	ldr	r3, [pc, #44]	; (8011138 <xTaskPriorityInherit+0xe0>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011114:	2301      	movs	r3, #1
 8011116:	60fb      	str	r3, [r7, #12]
 8011118:	e008      	b.n	801112c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801111a:	68bb      	ldr	r3, [r7, #8]
 801111c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801111e:	4b06      	ldr	r3, [pc, #24]	; (8011138 <xTaskPriorityInherit+0xe0>)
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011124:	429a      	cmp	r2, r3
 8011126:	d201      	bcs.n	801112c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011128:	2301      	movs	r3, #1
 801112a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801112c:	68fb      	ldr	r3, [r7, #12]
	}
 801112e:	4618      	mov	r0, r3
 8011130:	3710      	adds	r7, #16
 8011132:	46bd      	mov	sp, r7
 8011134:	bd80      	pop	{r7, pc}
 8011136:	bf00      	nop
 8011138:	20000964 	.word	0x20000964
 801113c:	20000968 	.word	0x20000968
 8011140:	20000c60 	.word	0x20000c60

08011144 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011144:	b580      	push	{r7, lr}
 8011146:	b086      	sub	sp, #24
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011150:	2300      	movs	r3, #0
 8011152:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d06e      	beq.n	8011238 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801115a:	4b3a      	ldr	r3, [pc, #232]	; (8011244 <xTaskPriorityDisinherit+0x100>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	693a      	ldr	r2, [r7, #16]
 8011160:	429a      	cmp	r2, r3
 8011162:	d00a      	beq.n	801117a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011168:	f383 8811 	msr	BASEPRI, r3
 801116c:	f3bf 8f6f 	isb	sy
 8011170:	f3bf 8f4f 	dsb	sy
 8011174:	60fb      	str	r3, [r7, #12]
}
 8011176:	bf00      	nop
 8011178:	e7fe      	b.n	8011178 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801117a:	693b      	ldr	r3, [r7, #16]
 801117c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801117e:	2b00      	cmp	r3, #0
 8011180:	d10a      	bne.n	8011198 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011186:	f383 8811 	msr	BASEPRI, r3
 801118a:	f3bf 8f6f 	isb	sy
 801118e:	f3bf 8f4f 	dsb	sy
 8011192:	60bb      	str	r3, [r7, #8]
}
 8011194:	bf00      	nop
 8011196:	e7fe      	b.n	8011196 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011198:	693b      	ldr	r3, [r7, #16]
 801119a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801119c:	1e5a      	subs	r2, r3, #1
 801119e:	693b      	ldr	r3, [r7, #16]
 80111a0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80111a2:	693b      	ldr	r3, [r7, #16]
 80111a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111a6:	693b      	ldr	r3, [r7, #16]
 80111a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111aa:	429a      	cmp	r2, r3
 80111ac:	d044      	beq.n	8011238 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80111ae:	693b      	ldr	r3, [r7, #16]
 80111b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d140      	bne.n	8011238 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80111b6:	693b      	ldr	r3, [r7, #16]
 80111b8:	3304      	adds	r3, #4
 80111ba:	4618      	mov	r0, r3
 80111bc:	f7fe fc0d 	bl	800f9da <uxListRemove>
 80111c0:	4603      	mov	r3, r0
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d115      	bne.n	80111f2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80111c6:	693b      	ldr	r3, [r7, #16]
 80111c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111ca:	491f      	ldr	r1, [pc, #124]	; (8011248 <xTaskPriorityDisinherit+0x104>)
 80111cc:	4613      	mov	r3, r2
 80111ce:	009b      	lsls	r3, r3, #2
 80111d0:	4413      	add	r3, r2
 80111d2:	009b      	lsls	r3, r3, #2
 80111d4:	440b      	add	r3, r1
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d10a      	bne.n	80111f2 <xTaskPriorityDisinherit+0xae>
 80111dc:	693b      	ldr	r3, [r7, #16]
 80111de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111e0:	2201      	movs	r2, #1
 80111e2:	fa02 f303 	lsl.w	r3, r2, r3
 80111e6:	43da      	mvns	r2, r3
 80111e8:	4b18      	ldr	r3, [pc, #96]	; (801124c <xTaskPriorityDisinherit+0x108>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	4013      	ands	r3, r2
 80111ee:	4a17      	ldr	r2, [pc, #92]	; (801124c <xTaskPriorityDisinherit+0x108>)
 80111f0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80111f2:	693b      	ldr	r3, [r7, #16]
 80111f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80111f6:	693b      	ldr	r3, [r7, #16]
 80111f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80111fa:	693b      	ldr	r3, [r7, #16]
 80111fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111fe:	f1c3 0220 	rsb	r2, r3, #32
 8011202:	693b      	ldr	r3, [r7, #16]
 8011204:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011206:	693b      	ldr	r3, [r7, #16]
 8011208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801120a:	2201      	movs	r2, #1
 801120c:	409a      	lsls	r2, r3
 801120e:	4b0f      	ldr	r3, [pc, #60]	; (801124c <xTaskPriorityDisinherit+0x108>)
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	4313      	orrs	r3, r2
 8011214:	4a0d      	ldr	r2, [pc, #52]	; (801124c <xTaskPriorityDisinherit+0x108>)
 8011216:	6013      	str	r3, [r2, #0]
 8011218:	693b      	ldr	r3, [r7, #16]
 801121a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801121c:	4613      	mov	r3, r2
 801121e:	009b      	lsls	r3, r3, #2
 8011220:	4413      	add	r3, r2
 8011222:	009b      	lsls	r3, r3, #2
 8011224:	4a08      	ldr	r2, [pc, #32]	; (8011248 <xTaskPriorityDisinherit+0x104>)
 8011226:	441a      	add	r2, r3
 8011228:	693b      	ldr	r3, [r7, #16]
 801122a:	3304      	adds	r3, #4
 801122c:	4619      	mov	r1, r3
 801122e:	4610      	mov	r0, r2
 8011230:	f7fe fb76 	bl	800f920 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011234:	2301      	movs	r3, #1
 8011236:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011238:	697b      	ldr	r3, [r7, #20]
	}
 801123a:	4618      	mov	r0, r3
 801123c:	3718      	adds	r7, #24
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}
 8011242:	bf00      	nop
 8011244:	20000964 	.word	0x20000964
 8011248:	20000968 	.word	0x20000968
 801124c:	20000c60 	.word	0x20000c60

08011250 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011250:	b580      	push	{r7, lr}
 8011252:	b088      	sub	sp, #32
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
 8011258:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801125e:	2301      	movs	r3, #1
 8011260:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d077      	beq.n	8011358 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011268:	69bb      	ldr	r3, [r7, #24]
 801126a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801126c:	2b00      	cmp	r3, #0
 801126e:	d10a      	bne.n	8011286 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011274:	f383 8811 	msr	BASEPRI, r3
 8011278:	f3bf 8f6f 	isb	sy
 801127c:	f3bf 8f4f 	dsb	sy
 8011280:	60fb      	str	r3, [r7, #12]
}
 8011282:	bf00      	nop
 8011284:	e7fe      	b.n	8011284 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011286:	69bb      	ldr	r3, [r7, #24]
 8011288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801128a:	683a      	ldr	r2, [r7, #0]
 801128c:	429a      	cmp	r2, r3
 801128e:	d902      	bls.n	8011296 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	61fb      	str	r3, [r7, #28]
 8011294:	e002      	b.n	801129c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011296:	69bb      	ldr	r3, [r7, #24]
 8011298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801129a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801129c:	69bb      	ldr	r3, [r7, #24]
 801129e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112a0:	69fa      	ldr	r2, [r7, #28]
 80112a2:	429a      	cmp	r2, r3
 80112a4:	d058      	beq.n	8011358 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80112a6:	69bb      	ldr	r3, [r7, #24]
 80112a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80112aa:	697a      	ldr	r2, [r7, #20]
 80112ac:	429a      	cmp	r2, r3
 80112ae:	d153      	bne.n	8011358 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80112b0:	4b2b      	ldr	r3, [pc, #172]	; (8011360 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	69ba      	ldr	r2, [r7, #24]
 80112b6:	429a      	cmp	r2, r3
 80112b8:	d10a      	bne.n	80112d0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80112ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112be:	f383 8811 	msr	BASEPRI, r3
 80112c2:	f3bf 8f6f 	isb	sy
 80112c6:	f3bf 8f4f 	dsb	sy
 80112ca:	60bb      	str	r3, [r7, #8]
}
 80112cc:	bf00      	nop
 80112ce:	e7fe      	b.n	80112ce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80112d0:	69bb      	ldr	r3, [r7, #24]
 80112d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112d4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80112d6:	69bb      	ldr	r3, [r7, #24]
 80112d8:	69fa      	ldr	r2, [r7, #28]
 80112da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80112dc:	69bb      	ldr	r3, [r7, #24]
 80112de:	699b      	ldr	r3, [r3, #24]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	db04      	blt.n	80112ee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112e4:	69fb      	ldr	r3, [r7, #28]
 80112e6:	f1c3 0220 	rsb	r2, r3, #32
 80112ea:	69bb      	ldr	r3, [r7, #24]
 80112ec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80112ee:	69bb      	ldr	r3, [r7, #24]
 80112f0:	6959      	ldr	r1, [r3, #20]
 80112f2:	693a      	ldr	r2, [r7, #16]
 80112f4:	4613      	mov	r3, r2
 80112f6:	009b      	lsls	r3, r3, #2
 80112f8:	4413      	add	r3, r2
 80112fa:	009b      	lsls	r3, r3, #2
 80112fc:	4a19      	ldr	r2, [pc, #100]	; (8011364 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80112fe:	4413      	add	r3, r2
 8011300:	4299      	cmp	r1, r3
 8011302:	d129      	bne.n	8011358 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011304:	69bb      	ldr	r3, [r7, #24]
 8011306:	3304      	adds	r3, #4
 8011308:	4618      	mov	r0, r3
 801130a:	f7fe fb66 	bl	800f9da <uxListRemove>
 801130e:	4603      	mov	r3, r0
 8011310:	2b00      	cmp	r3, #0
 8011312:	d10a      	bne.n	801132a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8011314:	69bb      	ldr	r3, [r7, #24]
 8011316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011318:	2201      	movs	r2, #1
 801131a:	fa02 f303 	lsl.w	r3, r2, r3
 801131e:	43da      	mvns	r2, r3
 8011320:	4b11      	ldr	r3, [pc, #68]	; (8011368 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	4013      	ands	r3, r2
 8011326:	4a10      	ldr	r2, [pc, #64]	; (8011368 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011328:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801132a:	69bb      	ldr	r3, [r7, #24]
 801132c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801132e:	2201      	movs	r2, #1
 8011330:	409a      	lsls	r2, r3
 8011332:	4b0d      	ldr	r3, [pc, #52]	; (8011368 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	4313      	orrs	r3, r2
 8011338:	4a0b      	ldr	r2, [pc, #44]	; (8011368 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801133a:	6013      	str	r3, [r2, #0]
 801133c:	69bb      	ldr	r3, [r7, #24]
 801133e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011340:	4613      	mov	r3, r2
 8011342:	009b      	lsls	r3, r3, #2
 8011344:	4413      	add	r3, r2
 8011346:	009b      	lsls	r3, r3, #2
 8011348:	4a06      	ldr	r2, [pc, #24]	; (8011364 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801134a:	441a      	add	r2, r3
 801134c:	69bb      	ldr	r3, [r7, #24]
 801134e:	3304      	adds	r3, #4
 8011350:	4619      	mov	r1, r3
 8011352:	4610      	mov	r0, r2
 8011354:	f7fe fae4 	bl	800f920 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011358:	bf00      	nop
 801135a:	3720      	adds	r7, #32
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}
 8011360:	20000964 	.word	0x20000964
 8011364:	20000968 	.word	0x20000968
 8011368:	20000c60 	.word	0x20000c60

0801136c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801136c:	b480      	push	{r7}
 801136e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011370:	4b07      	ldr	r3, [pc, #28]	; (8011390 <pvTaskIncrementMutexHeldCount+0x24>)
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d004      	beq.n	8011382 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011378:	4b05      	ldr	r3, [pc, #20]	; (8011390 <pvTaskIncrementMutexHeldCount+0x24>)
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801137e:	3201      	adds	r2, #1
 8011380:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8011382:	4b03      	ldr	r3, [pc, #12]	; (8011390 <pvTaskIncrementMutexHeldCount+0x24>)
 8011384:	681b      	ldr	r3, [r3, #0]
	}
 8011386:	4618      	mov	r0, r3
 8011388:	46bd      	mov	sp, r7
 801138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138e:	4770      	bx	lr
 8011390:	20000964 	.word	0x20000964

08011394 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b084      	sub	sp, #16
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
 801139c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801139e:	4b29      	ldr	r3, [pc, #164]	; (8011444 <prvAddCurrentTaskToDelayedList+0xb0>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80113a4:	4b28      	ldr	r3, [pc, #160]	; (8011448 <prvAddCurrentTaskToDelayedList+0xb4>)
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	3304      	adds	r3, #4
 80113aa:	4618      	mov	r0, r3
 80113ac:	f7fe fb15 	bl	800f9da <uxListRemove>
 80113b0:	4603      	mov	r3, r0
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d10b      	bne.n	80113ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80113b6:	4b24      	ldr	r3, [pc, #144]	; (8011448 <prvAddCurrentTaskToDelayedList+0xb4>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113bc:	2201      	movs	r2, #1
 80113be:	fa02 f303 	lsl.w	r3, r2, r3
 80113c2:	43da      	mvns	r2, r3
 80113c4:	4b21      	ldr	r3, [pc, #132]	; (801144c <prvAddCurrentTaskToDelayedList+0xb8>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	4013      	ands	r3, r2
 80113ca:	4a20      	ldr	r2, [pc, #128]	; (801144c <prvAddCurrentTaskToDelayedList+0xb8>)
 80113cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80113d4:	d10a      	bne.n	80113ec <prvAddCurrentTaskToDelayedList+0x58>
 80113d6:	683b      	ldr	r3, [r7, #0]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d007      	beq.n	80113ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80113dc:	4b1a      	ldr	r3, [pc, #104]	; (8011448 <prvAddCurrentTaskToDelayedList+0xb4>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	3304      	adds	r3, #4
 80113e2:	4619      	mov	r1, r3
 80113e4:	481a      	ldr	r0, [pc, #104]	; (8011450 <prvAddCurrentTaskToDelayedList+0xbc>)
 80113e6:	f7fe fa9b 	bl	800f920 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80113ea:	e026      	b.n	801143a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80113ec:	68fa      	ldr	r2, [r7, #12]
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	4413      	add	r3, r2
 80113f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80113f4:	4b14      	ldr	r3, [pc, #80]	; (8011448 <prvAddCurrentTaskToDelayedList+0xb4>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	68ba      	ldr	r2, [r7, #8]
 80113fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80113fc:	68ba      	ldr	r2, [r7, #8]
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	429a      	cmp	r2, r3
 8011402:	d209      	bcs.n	8011418 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011404:	4b13      	ldr	r3, [pc, #76]	; (8011454 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011406:	681a      	ldr	r2, [r3, #0]
 8011408:	4b0f      	ldr	r3, [pc, #60]	; (8011448 <prvAddCurrentTaskToDelayedList+0xb4>)
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	3304      	adds	r3, #4
 801140e:	4619      	mov	r1, r3
 8011410:	4610      	mov	r0, r2
 8011412:	f7fe faa9 	bl	800f968 <vListInsert>
}
 8011416:	e010      	b.n	801143a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011418:	4b0f      	ldr	r3, [pc, #60]	; (8011458 <prvAddCurrentTaskToDelayedList+0xc4>)
 801141a:	681a      	ldr	r2, [r3, #0]
 801141c:	4b0a      	ldr	r3, [pc, #40]	; (8011448 <prvAddCurrentTaskToDelayedList+0xb4>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	3304      	adds	r3, #4
 8011422:	4619      	mov	r1, r3
 8011424:	4610      	mov	r0, r2
 8011426:	f7fe fa9f 	bl	800f968 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801142a:	4b0c      	ldr	r3, [pc, #48]	; (801145c <prvAddCurrentTaskToDelayedList+0xc8>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	68ba      	ldr	r2, [r7, #8]
 8011430:	429a      	cmp	r2, r3
 8011432:	d202      	bcs.n	801143a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011434:	4a09      	ldr	r2, [pc, #36]	; (801145c <prvAddCurrentTaskToDelayedList+0xc8>)
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	6013      	str	r3, [r2, #0]
}
 801143a:	bf00      	nop
 801143c:	3710      	adds	r7, #16
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}
 8011442:	bf00      	nop
 8011444:	20000c5c 	.word	0x20000c5c
 8011448:	20000964 	.word	0x20000964
 801144c:	20000c60 	.word	0x20000c60
 8011450:	20000c44 	.word	0x20000c44
 8011454:	20000c14 	.word	0x20000c14
 8011458:	20000c10 	.word	0x20000c10
 801145c:	20000c78 	.word	0x20000c78

08011460 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011460:	b480      	push	{r7}
 8011462:	b085      	sub	sp, #20
 8011464:	af00      	add	r7, sp, #0
 8011466:	60f8      	str	r0, [r7, #12]
 8011468:	60b9      	str	r1, [r7, #8]
 801146a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	3b04      	subs	r3, #4
 8011470:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011478:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	3b04      	subs	r3, #4
 801147e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011480:	68bb      	ldr	r3, [r7, #8]
 8011482:	f023 0201 	bic.w	r2, r3, #1
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	3b04      	subs	r3, #4
 801148e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011490:	4a0c      	ldr	r2, [pc, #48]	; (80114c4 <pxPortInitialiseStack+0x64>)
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	3b14      	subs	r3, #20
 801149a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801149c:	687a      	ldr	r2, [r7, #4]
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	3b04      	subs	r3, #4
 80114a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	f06f 0202 	mvn.w	r2, #2
 80114ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	3b20      	subs	r3, #32
 80114b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80114b6:	68fb      	ldr	r3, [r7, #12]
}
 80114b8:	4618      	mov	r0, r3
 80114ba:	3714      	adds	r7, #20
 80114bc:	46bd      	mov	sp, r7
 80114be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c2:	4770      	bx	lr
 80114c4:	080114c9 	.word	0x080114c9

080114c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80114c8:	b480      	push	{r7}
 80114ca:	b085      	sub	sp, #20
 80114cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80114ce:	2300      	movs	r3, #0
 80114d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80114d2:	4b12      	ldr	r3, [pc, #72]	; (801151c <prvTaskExitError+0x54>)
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80114da:	d00a      	beq.n	80114f2 <prvTaskExitError+0x2a>
	__asm volatile
 80114dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114e0:	f383 8811 	msr	BASEPRI, r3
 80114e4:	f3bf 8f6f 	isb	sy
 80114e8:	f3bf 8f4f 	dsb	sy
 80114ec:	60fb      	str	r3, [r7, #12]
}
 80114ee:	bf00      	nop
 80114f0:	e7fe      	b.n	80114f0 <prvTaskExitError+0x28>
	__asm volatile
 80114f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114f6:	f383 8811 	msr	BASEPRI, r3
 80114fa:	f3bf 8f6f 	isb	sy
 80114fe:	f3bf 8f4f 	dsb	sy
 8011502:	60bb      	str	r3, [r7, #8]
}
 8011504:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011506:	bf00      	nop
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d0fc      	beq.n	8011508 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801150e:	bf00      	nop
 8011510:	bf00      	nop
 8011512:	3714      	adds	r7, #20
 8011514:	46bd      	mov	sp, r7
 8011516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151a:	4770      	bx	lr
 801151c:	2000011c 	.word	0x2000011c

08011520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011520:	4b07      	ldr	r3, [pc, #28]	; (8011540 <pxCurrentTCBConst2>)
 8011522:	6819      	ldr	r1, [r3, #0]
 8011524:	6808      	ldr	r0, [r1, #0]
 8011526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801152a:	f380 8809 	msr	PSP, r0
 801152e:	f3bf 8f6f 	isb	sy
 8011532:	f04f 0000 	mov.w	r0, #0
 8011536:	f380 8811 	msr	BASEPRI, r0
 801153a:	4770      	bx	lr
 801153c:	f3af 8000 	nop.w

08011540 <pxCurrentTCBConst2>:
 8011540:	20000964 	.word	0x20000964
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011544:	bf00      	nop
 8011546:	bf00      	nop

08011548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011548:	4808      	ldr	r0, [pc, #32]	; (801156c <prvPortStartFirstTask+0x24>)
 801154a:	6800      	ldr	r0, [r0, #0]
 801154c:	6800      	ldr	r0, [r0, #0]
 801154e:	f380 8808 	msr	MSP, r0
 8011552:	f04f 0000 	mov.w	r0, #0
 8011556:	f380 8814 	msr	CONTROL, r0
 801155a:	b662      	cpsie	i
 801155c:	b661      	cpsie	f
 801155e:	f3bf 8f4f 	dsb	sy
 8011562:	f3bf 8f6f 	isb	sy
 8011566:	df00      	svc	0
 8011568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801156a:	bf00      	nop
 801156c:	e000ed08 	.word	0xe000ed08

08011570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b086      	sub	sp, #24
 8011574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011576:	4b46      	ldr	r3, [pc, #280]	; (8011690 <xPortStartScheduler+0x120>)
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	4a46      	ldr	r2, [pc, #280]	; (8011694 <xPortStartScheduler+0x124>)
 801157c:	4293      	cmp	r3, r2
 801157e:	d10a      	bne.n	8011596 <xPortStartScheduler+0x26>
	__asm volatile
 8011580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011584:	f383 8811 	msr	BASEPRI, r3
 8011588:	f3bf 8f6f 	isb	sy
 801158c:	f3bf 8f4f 	dsb	sy
 8011590:	613b      	str	r3, [r7, #16]
}
 8011592:	bf00      	nop
 8011594:	e7fe      	b.n	8011594 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011596:	4b3e      	ldr	r3, [pc, #248]	; (8011690 <xPortStartScheduler+0x120>)
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	4a3f      	ldr	r2, [pc, #252]	; (8011698 <xPortStartScheduler+0x128>)
 801159c:	4293      	cmp	r3, r2
 801159e:	d10a      	bne.n	80115b6 <xPortStartScheduler+0x46>
	__asm volatile
 80115a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115a4:	f383 8811 	msr	BASEPRI, r3
 80115a8:	f3bf 8f6f 	isb	sy
 80115ac:	f3bf 8f4f 	dsb	sy
 80115b0:	60fb      	str	r3, [r7, #12]
}
 80115b2:	bf00      	nop
 80115b4:	e7fe      	b.n	80115b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80115b6:	4b39      	ldr	r3, [pc, #228]	; (801169c <xPortStartScheduler+0x12c>)
 80115b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80115ba:	697b      	ldr	r3, [r7, #20]
 80115bc:	781b      	ldrb	r3, [r3, #0]
 80115be:	b2db      	uxtb	r3, r3
 80115c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80115c2:	697b      	ldr	r3, [r7, #20]
 80115c4:	22ff      	movs	r2, #255	; 0xff
 80115c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80115c8:	697b      	ldr	r3, [r7, #20]
 80115ca:	781b      	ldrb	r3, [r3, #0]
 80115cc:	b2db      	uxtb	r3, r3
 80115ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80115d0:	78fb      	ldrb	r3, [r7, #3]
 80115d2:	b2db      	uxtb	r3, r3
 80115d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80115d8:	b2da      	uxtb	r2, r3
 80115da:	4b31      	ldr	r3, [pc, #196]	; (80116a0 <xPortStartScheduler+0x130>)
 80115dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80115de:	4b31      	ldr	r3, [pc, #196]	; (80116a4 <xPortStartScheduler+0x134>)
 80115e0:	2207      	movs	r2, #7
 80115e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80115e4:	e009      	b.n	80115fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80115e6:	4b2f      	ldr	r3, [pc, #188]	; (80116a4 <xPortStartScheduler+0x134>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	3b01      	subs	r3, #1
 80115ec:	4a2d      	ldr	r2, [pc, #180]	; (80116a4 <xPortStartScheduler+0x134>)
 80115ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80115f0:	78fb      	ldrb	r3, [r7, #3]
 80115f2:	b2db      	uxtb	r3, r3
 80115f4:	005b      	lsls	r3, r3, #1
 80115f6:	b2db      	uxtb	r3, r3
 80115f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80115fa:	78fb      	ldrb	r3, [r7, #3]
 80115fc:	b2db      	uxtb	r3, r3
 80115fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011602:	2b80      	cmp	r3, #128	; 0x80
 8011604:	d0ef      	beq.n	80115e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011606:	4b27      	ldr	r3, [pc, #156]	; (80116a4 <xPortStartScheduler+0x134>)
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	f1c3 0307 	rsb	r3, r3, #7
 801160e:	2b04      	cmp	r3, #4
 8011610:	d00a      	beq.n	8011628 <xPortStartScheduler+0xb8>
	__asm volatile
 8011612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011616:	f383 8811 	msr	BASEPRI, r3
 801161a:	f3bf 8f6f 	isb	sy
 801161e:	f3bf 8f4f 	dsb	sy
 8011622:	60bb      	str	r3, [r7, #8]
}
 8011624:	bf00      	nop
 8011626:	e7fe      	b.n	8011626 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011628:	4b1e      	ldr	r3, [pc, #120]	; (80116a4 <xPortStartScheduler+0x134>)
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	021b      	lsls	r3, r3, #8
 801162e:	4a1d      	ldr	r2, [pc, #116]	; (80116a4 <xPortStartScheduler+0x134>)
 8011630:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011632:	4b1c      	ldr	r3, [pc, #112]	; (80116a4 <xPortStartScheduler+0x134>)
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801163a:	4a1a      	ldr	r2, [pc, #104]	; (80116a4 <xPortStartScheduler+0x134>)
 801163c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	b2da      	uxtb	r2, r3
 8011642:	697b      	ldr	r3, [r7, #20]
 8011644:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011646:	4b18      	ldr	r3, [pc, #96]	; (80116a8 <xPortStartScheduler+0x138>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	4a17      	ldr	r2, [pc, #92]	; (80116a8 <xPortStartScheduler+0x138>)
 801164c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011650:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011652:	4b15      	ldr	r3, [pc, #84]	; (80116a8 <xPortStartScheduler+0x138>)
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	4a14      	ldr	r2, [pc, #80]	; (80116a8 <xPortStartScheduler+0x138>)
 8011658:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801165c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801165e:	f000 f8dd 	bl	801181c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011662:	4b12      	ldr	r3, [pc, #72]	; (80116ac <xPortStartScheduler+0x13c>)
 8011664:	2200      	movs	r2, #0
 8011666:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011668:	f000 f8fc 	bl	8011864 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801166c:	4b10      	ldr	r3, [pc, #64]	; (80116b0 <xPortStartScheduler+0x140>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	4a0f      	ldr	r2, [pc, #60]	; (80116b0 <xPortStartScheduler+0x140>)
 8011672:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011676:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011678:	f7ff ff66 	bl	8011548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801167c:	f7ff faa6 	bl	8010bcc <vTaskSwitchContext>
	prvTaskExitError();
 8011680:	f7ff ff22 	bl	80114c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011684:	2300      	movs	r3, #0
}
 8011686:	4618      	mov	r0, r3
 8011688:	3718      	adds	r7, #24
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}
 801168e:	bf00      	nop
 8011690:	e000ed00 	.word	0xe000ed00
 8011694:	410fc271 	.word	0x410fc271
 8011698:	410fc270 	.word	0x410fc270
 801169c:	e000e400 	.word	0xe000e400
 80116a0:	20000c84 	.word	0x20000c84
 80116a4:	20000c88 	.word	0x20000c88
 80116a8:	e000ed20 	.word	0xe000ed20
 80116ac:	2000011c 	.word	0x2000011c
 80116b0:	e000ef34 	.word	0xe000ef34

080116b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80116b4:	b480      	push	{r7}
 80116b6:	b083      	sub	sp, #12
 80116b8:	af00      	add	r7, sp, #0
	__asm volatile
 80116ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116be:	f383 8811 	msr	BASEPRI, r3
 80116c2:	f3bf 8f6f 	isb	sy
 80116c6:	f3bf 8f4f 	dsb	sy
 80116ca:	607b      	str	r3, [r7, #4]
}
 80116cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80116ce:	4b0f      	ldr	r3, [pc, #60]	; (801170c <vPortEnterCritical+0x58>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	3301      	adds	r3, #1
 80116d4:	4a0d      	ldr	r2, [pc, #52]	; (801170c <vPortEnterCritical+0x58>)
 80116d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80116d8:	4b0c      	ldr	r3, [pc, #48]	; (801170c <vPortEnterCritical+0x58>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	2b01      	cmp	r3, #1
 80116de:	d10f      	bne.n	8011700 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80116e0:	4b0b      	ldr	r3, [pc, #44]	; (8011710 <vPortEnterCritical+0x5c>)
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	b2db      	uxtb	r3, r3
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d00a      	beq.n	8011700 <vPortEnterCritical+0x4c>
	__asm volatile
 80116ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116ee:	f383 8811 	msr	BASEPRI, r3
 80116f2:	f3bf 8f6f 	isb	sy
 80116f6:	f3bf 8f4f 	dsb	sy
 80116fa:	603b      	str	r3, [r7, #0]
}
 80116fc:	bf00      	nop
 80116fe:	e7fe      	b.n	80116fe <vPortEnterCritical+0x4a>
	}
}
 8011700:	bf00      	nop
 8011702:	370c      	adds	r7, #12
 8011704:	46bd      	mov	sp, r7
 8011706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170a:	4770      	bx	lr
 801170c:	2000011c 	.word	0x2000011c
 8011710:	e000ed04 	.word	0xe000ed04

08011714 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011714:	b480      	push	{r7}
 8011716:	b083      	sub	sp, #12
 8011718:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801171a:	4b12      	ldr	r3, [pc, #72]	; (8011764 <vPortExitCritical+0x50>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d10a      	bne.n	8011738 <vPortExitCritical+0x24>
	__asm volatile
 8011722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011726:	f383 8811 	msr	BASEPRI, r3
 801172a:	f3bf 8f6f 	isb	sy
 801172e:	f3bf 8f4f 	dsb	sy
 8011732:	607b      	str	r3, [r7, #4]
}
 8011734:	bf00      	nop
 8011736:	e7fe      	b.n	8011736 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011738:	4b0a      	ldr	r3, [pc, #40]	; (8011764 <vPortExitCritical+0x50>)
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	3b01      	subs	r3, #1
 801173e:	4a09      	ldr	r2, [pc, #36]	; (8011764 <vPortExitCritical+0x50>)
 8011740:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011742:	4b08      	ldr	r3, [pc, #32]	; (8011764 <vPortExitCritical+0x50>)
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d105      	bne.n	8011756 <vPortExitCritical+0x42>
 801174a:	2300      	movs	r3, #0
 801174c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	f383 8811 	msr	BASEPRI, r3
}
 8011754:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011756:	bf00      	nop
 8011758:	370c      	adds	r7, #12
 801175a:	46bd      	mov	sp, r7
 801175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011760:	4770      	bx	lr
 8011762:	bf00      	nop
 8011764:	2000011c 	.word	0x2000011c
	...

08011770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011770:	f3ef 8009 	mrs	r0, PSP
 8011774:	f3bf 8f6f 	isb	sy
 8011778:	4b15      	ldr	r3, [pc, #84]	; (80117d0 <pxCurrentTCBConst>)
 801177a:	681a      	ldr	r2, [r3, #0]
 801177c:	f01e 0f10 	tst.w	lr, #16
 8011780:	bf08      	it	eq
 8011782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801178a:	6010      	str	r0, [r2, #0]
 801178c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011790:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011794:	f380 8811 	msr	BASEPRI, r0
 8011798:	f3bf 8f4f 	dsb	sy
 801179c:	f3bf 8f6f 	isb	sy
 80117a0:	f7ff fa14 	bl	8010bcc <vTaskSwitchContext>
 80117a4:	f04f 0000 	mov.w	r0, #0
 80117a8:	f380 8811 	msr	BASEPRI, r0
 80117ac:	bc09      	pop	{r0, r3}
 80117ae:	6819      	ldr	r1, [r3, #0]
 80117b0:	6808      	ldr	r0, [r1, #0]
 80117b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117b6:	f01e 0f10 	tst.w	lr, #16
 80117ba:	bf08      	it	eq
 80117bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80117c0:	f380 8809 	msr	PSP, r0
 80117c4:	f3bf 8f6f 	isb	sy
 80117c8:	4770      	bx	lr
 80117ca:	bf00      	nop
 80117cc:	f3af 8000 	nop.w

080117d0 <pxCurrentTCBConst>:
 80117d0:	20000964 	.word	0x20000964
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80117d4:	bf00      	nop
 80117d6:	bf00      	nop

080117d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b082      	sub	sp, #8
 80117dc:	af00      	add	r7, sp, #0
	__asm volatile
 80117de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117e2:	f383 8811 	msr	BASEPRI, r3
 80117e6:	f3bf 8f6f 	isb	sy
 80117ea:	f3bf 8f4f 	dsb	sy
 80117ee:	607b      	str	r3, [r7, #4]
}
 80117f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80117f2:	f7ff f933 	bl	8010a5c <xTaskIncrementTick>
 80117f6:	4603      	mov	r3, r0
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d003      	beq.n	8011804 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80117fc:	4b06      	ldr	r3, [pc, #24]	; (8011818 <SysTick_Handler+0x40>)
 80117fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011802:	601a      	str	r2, [r3, #0]
 8011804:	2300      	movs	r3, #0
 8011806:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	f383 8811 	msr	BASEPRI, r3
}
 801180e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011810:	bf00      	nop
 8011812:	3708      	adds	r7, #8
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}
 8011818:	e000ed04 	.word	0xe000ed04

0801181c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801181c:	b480      	push	{r7}
 801181e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011820:	4b0b      	ldr	r3, [pc, #44]	; (8011850 <vPortSetupTimerInterrupt+0x34>)
 8011822:	2200      	movs	r2, #0
 8011824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011826:	4b0b      	ldr	r3, [pc, #44]	; (8011854 <vPortSetupTimerInterrupt+0x38>)
 8011828:	2200      	movs	r2, #0
 801182a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801182c:	4b0a      	ldr	r3, [pc, #40]	; (8011858 <vPortSetupTimerInterrupt+0x3c>)
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	4a0a      	ldr	r2, [pc, #40]	; (801185c <vPortSetupTimerInterrupt+0x40>)
 8011832:	fba2 2303 	umull	r2, r3, r2, r3
 8011836:	099b      	lsrs	r3, r3, #6
 8011838:	4a09      	ldr	r2, [pc, #36]	; (8011860 <vPortSetupTimerInterrupt+0x44>)
 801183a:	3b01      	subs	r3, #1
 801183c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801183e:	4b04      	ldr	r3, [pc, #16]	; (8011850 <vPortSetupTimerInterrupt+0x34>)
 8011840:	2207      	movs	r2, #7
 8011842:	601a      	str	r2, [r3, #0]
}
 8011844:	bf00      	nop
 8011846:	46bd      	mov	sp, r7
 8011848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184c:	4770      	bx	lr
 801184e:	bf00      	nop
 8011850:	e000e010 	.word	0xe000e010
 8011854:	e000e018 	.word	0xe000e018
 8011858:	20000000 	.word	0x20000000
 801185c:	10624dd3 	.word	0x10624dd3
 8011860:	e000e014 	.word	0xe000e014

08011864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011864:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011874 <vPortEnableVFP+0x10>
 8011868:	6801      	ldr	r1, [r0, #0]
 801186a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801186e:	6001      	str	r1, [r0, #0]
 8011870:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011872:	bf00      	nop
 8011874:	e000ed88 	.word	0xe000ed88

08011878 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011878:	b480      	push	{r7}
 801187a:	b085      	sub	sp, #20
 801187c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801187e:	f3ef 8305 	mrs	r3, IPSR
 8011882:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	2b0f      	cmp	r3, #15
 8011888:	d914      	bls.n	80118b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801188a:	4a17      	ldr	r2, [pc, #92]	; (80118e8 <vPortValidateInterruptPriority+0x70>)
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	4413      	add	r3, r2
 8011890:	781b      	ldrb	r3, [r3, #0]
 8011892:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011894:	4b15      	ldr	r3, [pc, #84]	; (80118ec <vPortValidateInterruptPriority+0x74>)
 8011896:	781b      	ldrb	r3, [r3, #0]
 8011898:	7afa      	ldrb	r2, [r7, #11]
 801189a:	429a      	cmp	r2, r3
 801189c:	d20a      	bcs.n	80118b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801189e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a2:	f383 8811 	msr	BASEPRI, r3
 80118a6:	f3bf 8f6f 	isb	sy
 80118aa:	f3bf 8f4f 	dsb	sy
 80118ae:	607b      	str	r3, [r7, #4]
}
 80118b0:	bf00      	nop
 80118b2:	e7fe      	b.n	80118b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80118b4:	4b0e      	ldr	r3, [pc, #56]	; (80118f0 <vPortValidateInterruptPriority+0x78>)
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80118bc:	4b0d      	ldr	r3, [pc, #52]	; (80118f4 <vPortValidateInterruptPriority+0x7c>)
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	429a      	cmp	r2, r3
 80118c2:	d90a      	bls.n	80118da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80118c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118c8:	f383 8811 	msr	BASEPRI, r3
 80118cc:	f3bf 8f6f 	isb	sy
 80118d0:	f3bf 8f4f 	dsb	sy
 80118d4:	603b      	str	r3, [r7, #0]
}
 80118d6:	bf00      	nop
 80118d8:	e7fe      	b.n	80118d8 <vPortValidateInterruptPriority+0x60>
	}
 80118da:	bf00      	nop
 80118dc:	3714      	adds	r7, #20
 80118de:	46bd      	mov	sp, r7
 80118e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e4:	4770      	bx	lr
 80118e6:	bf00      	nop
 80118e8:	e000e3f0 	.word	0xe000e3f0
 80118ec:	20000c84 	.word	0x20000c84
 80118f0:	e000ed0c 	.word	0xe000ed0c
 80118f4:	20000c88 	.word	0x20000c88

080118f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b08a      	sub	sp, #40	; 0x28
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011900:	2300      	movs	r3, #0
 8011902:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011904:	f7ff f800 	bl	8010908 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011908:	4b5b      	ldr	r3, [pc, #364]	; (8011a78 <pvPortMalloc+0x180>)
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d101      	bne.n	8011914 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011910:	f000 f920 	bl	8011b54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011914:	4b59      	ldr	r3, [pc, #356]	; (8011a7c <pvPortMalloc+0x184>)
 8011916:	681a      	ldr	r2, [r3, #0]
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	4013      	ands	r3, r2
 801191c:	2b00      	cmp	r3, #0
 801191e:	f040 8093 	bne.w	8011a48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d01d      	beq.n	8011964 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011928:	2208      	movs	r2, #8
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	4413      	add	r3, r2
 801192e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	f003 0307 	and.w	r3, r3, #7
 8011936:	2b00      	cmp	r3, #0
 8011938:	d014      	beq.n	8011964 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f023 0307 	bic.w	r3, r3, #7
 8011940:	3308      	adds	r3, #8
 8011942:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	f003 0307 	and.w	r3, r3, #7
 801194a:	2b00      	cmp	r3, #0
 801194c:	d00a      	beq.n	8011964 <pvPortMalloc+0x6c>
	__asm volatile
 801194e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011952:	f383 8811 	msr	BASEPRI, r3
 8011956:	f3bf 8f6f 	isb	sy
 801195a:	f3bf 8f4f 	dsb	sy
 801195e:	617b      	str	r3, [r7, #20]
}
 8011960:	bf00      	nop
 8011962:	e7fe      	b.n	8011962 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d06e      	beq.n	8011a48 <pvPortMalloc+0x150>
 801196a:	4b45      	ldr	r3, [pc, #276]	; (8011a80 <pvPortMalloc+0x188>)
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	687a      	ldr	r2, [r7, #4]
 8011970:	429a      	cmp	r2, r3
 8011972:	d869      	bhi.n	8011a48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011974:	4b43      	ldr	r3, [pc, #268]	; (8011a84 <pvPortMalloc+0x18c>)
 8011976:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011978:	4b42      	ldr	r3, [pc, #264]	; (8011a84 <pvPortMalloc+0x18c>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801197e:	e004      	b.n	801198a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011982:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801198c:	685b      	ldr	r3, [r3, #4]
 801198e:	687a      	ldr	r2, [r7, #4]
 8011990:	429a      	cmp	r2, r3
 8011992:	d903      	bls.n	801199c <pvPortMalloc+0xa4>
 8011994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d1f1      	bne.n	8011980 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801199c:	4b36      	ldr	r3, [pc, #216]	; (8011a78 <pvPortMalloc+0x180>)
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80119a2:	429a      	cmp	r2, r3
 80119a4:	d050      	beq.n	8011a48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80119a6:	6a3b      	ldr	r3, [r7, #32]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	2208      	movs	r2, #8
 80119ac:	4413      	add	r3, r2
 80119ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80119b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b2:	681a      	ldr	r2, [r3, #0]
 80119b4:	6a3b      	ldr	r3, [r7, #32]
 80119b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80119b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ba:	685a      	ldr	r2, [r3, #4]
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	1ad2      	subs	r2, r2, r3
 80119c0:	2308      	movs	r3, #8
 80119c2:	005b      	lsls	r3, r3, #1
 80119c4:	429a      	cmp	r2, r3
 80119c6:	d91f      	bls.n	8011a08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80119c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	4413      	add	r3, r2
 80119ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80119d0:	69bb      	ldr	r3, [r7, #24]
 80119d2:	f003 0307 	and.w	r3, r3, #7
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d00a      	beq.n	80119f0 <pvPortMalloc+0xf8>
	__asm volatile
 80119da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119de:	f383 8811 	msr	BASEPRI, r3
 80119e2:	f3bf 8f6f 	isb	sy
 80119e6:	f3bf 8f4f 	dsb	sy
 80119ea:	613b      	str	r3, [r7, #16]
}
 80119ec:	bf00      	nop
 80119ee:	e7fe      	b.n	80119ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80119f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119f2:	685a      	ldr	r2, [r3, #4]
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	1ad2      	subs	r2, r2, r3
 80119f8:	69bb      	ldr	r3, [r7, #24]
 80119fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80119fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119fe:	687a      	ldr	r2, [r7, #4]
 8011a00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011a02:	69b8      	ldr	r0, [r7, #24]
 8011a04:	f000 f908 	bl	8011c18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011a08:	4b1d      	ldr	r3, [pc, #116]	; (8011a80 <pvPortMalloc+0x188>)
 8011a0a:	681a      	ldr	r2, [r3, #0]
 8011a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a0e:	685b      	ldr	r3, [r3, #4]
 8011a10:	1ad3      	subs	r3, r2, r3
 8011a12:	4a1b      	ldr	r2, [pc, #108]	; (8011a80 <pvPortMalloc+0x188>)
 8011a14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011a16:	4b1a      	ldr	r3, [pc, #104]	; (8011a80 <pvPortMalloc+0x188>)
 8011a18:	681a      	ldr	r2, [r3, #0]
 8011a1a:	4b1b      	ldr	r3, [pc, #108]	; (8011a88 <pvPortMalloc+0x190>)
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	429a      	cmp	r2, r3
 8011a20:	d203      	bcs.n	8011a2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011a22:	4b17      	ldr	r3, [pc, #92]	; (8011a80 <pvPortMalloc+0x188>)
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	4a18      	ldr	r2, [pc, #96]	; (8011a88 <pvPortMalloc+0x190>)
 8011a28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a2c:	685a      	ldr	r2, [r3, #4]
 8011a2e:	4b13      	ldr	r3, [pc, #76]	; (8011a7c <pvPortMalloc+0x184>)
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	431a      	orrs	r2, r3
 8011a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011a3e:	4b13      	ldr	r3, [pc, #76]	; (8011a8c <pvPortMalloc+0x194>)
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	3301      	adds	r3, #1
 8011a44:	4a11      	ldr	r2, [pc, #68]	; (8011a8c <pvPortMalloc+0x194>)
 8011a46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011a48:	f7fe ff6c 	bl	8010924 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a4c:	69fb      	ldr	r3, [r7, #28]
 8011a4e:	f003 0307 	and.w	r3, r3, #7
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d00a      	beq.n	8011a6c <pvPortMalloc+0x174>
	__asm volatile
 8011a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a5a:	f383 8811 	msr	BASEPRI, r3
 8011a5e:	f3bf 8f6f 	isb	sy
 8011a62:	f3bf 8f4f 	dsb	sy
 8011a66:	60fb      	str	r3, [r7, #12]
}
 8011a68:	bf00      	nop
 8011a6a:	e7fe      	b.n	8011a6a <pvPortMalloc+0x172>
	return pvReturn;
 8011a6c:	69fb      	ldr	r3, [r7, #28]
}
 8011a6e:	4618      	mov	r0, r3
 8011a70:	3728      	adds	r7, #40	; 0x28
 8011a72:	46bd      	mov	sp, r7
 8011a74:	bd80      	pop	{r7, pc}
 8011a76:	bf00      	nop
 8011a78:	20004c94 	.word	0x20004c94
 8011a7c:	20004ca8 	.word	0x20004ca8
 8011a80:	20004c98 	.word	0x20004c98
 8011a84:	20004c8c 	.word	0x20004c8c
 8011a88:	20004c9c 	.word	0x20004c9c
 8011a8c:	20004ca0 	.word	0x20004ca0

08011a90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b086      	sub	sp, #24
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d04d      	beq.n	8011b3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011aa2:	2308      	movs	r3, #8
 8011aa4:	425b      	negs	r3, r3
 8011aa6:	697a      	ldr	r2, [r7, #20]
 8011aa8:	4413      	add	r3, r2
 8011aaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011aac:	697b      	ldr	r3, [r7, #20]
 8011aae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011ab0:	693b      	ldr	r3, [r7, #16]
 8011ab2:	685a      	ldr	r2, [r3, #4]
 8011ab4:	4b24      	ldr	r3, [pc, #144]	; (8011b48 <vPortFree+0xb8>)
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	4013      	ands	r3, r2
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d10a      	bne.n	8011ad4 <vPortFree+0x44>
	__asm volatile
 8011abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ac2:	f383 8811 	msr	BASEPRI, r3
 8011ac6:	f3bf 8f6f 	isb	sy
 8011aca:	f3bf 8f4f 	dsb	sy
 8011ace:	60fb      	str	r3, [r7, #12]
}
 8011ad0:	bf00      	nop
 8011ad2:	e7fe      	b.n	8011ad2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011ad4:	693b      	ldr	r3, [r7, #16]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d00a      	beq.n	8011af2 <vPortFree+0x62>
	__asm volatile
 8011adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ae0:	f383 8811 	msr	BASEPRI, r3
 8011ae4:	f3bf 8f6f 	isb	sy
 8011ae8:	f3bf 8f4f 	dsb	sy
 8011aec:	60bb      	str	r3, [r7, #8]
}
 8011aee:	bf00      	nop
 8011af0:	e7fe      	b.n	8011af0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011af2:	693b      	ldr	r3, [r7, #16]
 8011af4:	685a      	ldr	r2, [r3, #4]
 8011af6:	4b14      	ldr	r3, [pc, #80]	; (8011b48 <vPortFree+0xb8>)
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	4013      	ands	r3, r2
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d01e      	beq.n	8011b3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011b00:	693b      	ldr	r3, [r7, #16]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d11a      	bne.n	8011b3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011b08:	693b      	ldr	r3, [r7, #16]
 8011b0a:	685a      	ldr	r2, [r3, #4]
 8011b0c:	4b0e      	ldr	r3, [pc, #56]	; (8011b48 <vPortFree+0xb8>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	43db      	mvns	r3, r3
 8011b12:	401a      	ands	r2, r3
 8011b14:	693b      	ldr	r3, [r7, #16]
 8011b16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011b18:	f7fe fef6 	bl	8010908 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011b1c:	693b      	ldr	r3, [r7, #16]
 8011b1e:	685a      	ldr	r2, [r3, #4]
 8011b20:	4b0a      	ldr	r3, [pc, #40]	; (8011b4c <vPortFree+0xbc>)
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	4413      	add	r3, r2
 8011b26:	4a09      	ldr	r2, [pc, #36]	; (8011b4c <vPortFree+0xbc>)
 8011b28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011b2a:	6938      	ldr	r0, [r7, #16]
 8011b2c:	f000 f874 	bl	8011c18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011b30:	4b07      	ldr	r3, [pc, #28]	; (8011b50 <vPortFree+0xc0>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	3301      	adds	r3, #1
 8011b36:	4a06      	ldr	r2, [pc, #24]	; (8011b50 <vPortFree+0xc0>)
 8011b38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011b3a:	f7fe fef3 	bl	8010924 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011b3e:	bf00      	nop
 8011b40:	3718      	adds	r7, #24
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}
 8011b46:	bf00      	nop
 8011b48:	20004ca8 	.word	0x20004ca8
 8011b4c:	20004c98 	.word	0x20004c98
 8011b50:	20004ca4 	.word	0x20004ca4

08011b54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011b54:	b480      	push	{r7}
 8011b56:	b085      	sub	sp, #20
 8011b58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011b5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011b5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011b60:	4b27      	ldr	r3, [pc, #156]	; (8011c00 <prvHeapInit+0xac>)
 8011b62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	f003 0307 	and.w	r3, r3, #7
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d00c      	beq.n	8011b88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	3307      	adds	r3, #7
 8011b72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	f023 0307 	bic.w	r3, r3, #7
 8011b7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011b7c:	68ba      	ldr	r2, [r7, #8]
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	1ad3      	subs	r3, r2, r3
 8011b82:	4a1f      	ldr	r2, [pc, #124]	; (8011c00 <prvHeapInit+0xac>)
 8011b84:	4413      	add	r3, r2
 8011b86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011b8c:	4a1d      	ldr	r2, [pc, #116]	; (8011c04 <prvHeapInit+0xb0>)
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011b92:	4b1c      	ldr	r3, [pc, #112]	; (8011c04 <prvHeapInit+0xb0>)
 8011b94:	2200      	movs	r2, #0
 8011b96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	68ba      	ldr	r2, [r7, #8]
 8011b9c:	4413      	add	r3, r2
 8011b9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011ba0:	2208      	movs	r2, #8
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	1a9b      	subs	r3, r3, r2
 8011ba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	f023 0307 	bic.w	r3, r3, #7
 8011bae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	4a15      	ldr	r2, [pc, #84]	; (8011c08 <prvHeapInit+0xb4>)
 8011bb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011bb6:	4b14      	ldr	r3, [pc, #80]	; (8011c08 <prvHeapInit+0xb4>)
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	2200      	movs	r2, #0
 8011bbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011bbe:	4b12      	ldr	r3, [pc, #72]	; (8011c08 <prvHeapInit+0xb4>)
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	68fa      	ldr	r2, [r7, #12]
 8011bce:	1ad2      	subs	r2, r2, r3
 8011bd0:	683b      	ldr	r3, [r7, #0]
 8011bd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011bd4:	4b0c      	ldr	r3, [pc, #48]	; (8011c08 <prvHeapInit+0xb4>)
 8011bd6:	681a      	ldr	r2, [r3, #0]
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	685b      	ldr	r3, [r3, #4]
 8011be0:	4a0a      	ldr	r2, [pc, #40]	; (8011c0c <prvHeapInit+0xb8>)
 8011be2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	685b      	ldr	r3, [r3, #4]
 8011be8:	4a09      	ldr	r2, [pc, #36]	; (8011c10 <prvHeapInit+0xbc>)
 8011bea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011bec:	4b09      	ldr	r3, [pc, #36]	; (8011c14 <prvHeapInit+0xc0>)
 8011bee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011bf2:	601a      	str	r2, [r3, #0]
}
 8011bf4:	bf00      	nop
 8011bf6:	3714      	adds	r7, #20
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfe:	4770      	bx	lr
 8011c00:	20000c8c 	.word	0x20000c8c
 8011c04:	20004c8c 	.word	0x20004c8c
 8011c08:	20004c94 	.word	0x20004c94
 8011c0c:	20004c9c 	.word	0x20004c9c
 8011c10:	20004c98 	.word	0x20004c98
 8011c14:	20004ca8 	.word	0x20004ca8

08011c18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011c18:	b480      	push	{r7}
 8011c1a:	b085      	sub	sp, #20
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011c20:	4b28      	ldr	r3, [pc, #160]	; (8011cc4 <prvInsertBlockIntoFreeList+0xac>)
 8011c22:	60fb      	str	r3, [r7, #12]
 8011c24:	e002      	b.n	8011c2c <prvInsertBlockIntoFreeList+0x14>
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	60fb      	str	r3, [r7, #12]
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	687a      	ldr	r2, [r7, #4]
 8011c32:	429a      	cmp	r2, r3
 8011c34:	d8f7      	bhi.n	8011c26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	685b      	ldr	r3, [r3, #4]
 8011c3e:	68ba      	ldr	r2, [r7, #8]
 8011c40:	4413      	add	r3, r2
 8011c42:	687a      	ldr	r2, [r7, #4]
 8011c44:	429a      	cmp	r2, r3
 8011c46:	d108      	bne.n	8011c5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	685a      	ldr	r2, [r3, #4]
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	685b      	ldr	r3, [r3, #4]
 8011c50:	441a      	add	r2, r3
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	68ba      	ldr	r2, [r7, #8]
 8011c64:	441a      	add	r2, r3
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	429a      	cmp	r2, r3
 8011c6c:	d118      	bne.n	8011ca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	681a      	ldr	r2, [r3, #0]
 8011c72:	4b15      	ldr	r3, [pc, #84]	; (8011cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	429a      	cmp	r2, r3
 8011c78:	d00d      	beq.n	8011c96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	685a      	ldr	r2, [r3, #4]
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	685b      	ldr	r3, [r3, #4]
 8011c84:	441a      	add	r2, r3
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	681a      	ldr	r2, [r3, #0]
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	601a      	str	r2, [r3, #0]
 8011c94:	e008      	b.n	8011ca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011c96:	4b0c      	ldr	r3, [pc, #48]	; (8011cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8011c98:	681a      	ldr	r2, [r3, #0]
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	601a      	str	r2, [r3, #0]
 8011c9e:	e003      	b.n	8011ca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	681a      	ldr	r2, [r3, #0]
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011ca8:	68fa      	ldr	r2, [r7, #12]
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	429a      	cmp	r2, r3
 8011cae:	d002      	beq.n	8011cb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	687a      	ldr	r2, [r7, #4]
 8011cb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011cb6:	bf00      	nop
 8011cb8:	3714      	adds	r7, #20
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc0:	4770      	bx	lr
 8011cc2:	bf00      	nop
 8011cc4:	20004c8c 	.word	0x20004c8c
 8011cc8:	20004c94 	.word	0x20004c94

08011ccc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	4912      	ldr	r1, [pc, #72]	; (8011d1c <MX_USB_Device_Init+0x50>)
 8011cd4:	4812      	ldr	r0, [pc, #72]	; (8011d20 <MX_USB_Device_Init+0x54>)
 8011cd6:	f7fc fc7d 	bl	800e5d4 <USBD_Init>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d001      	beq.n	8011ce4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8011ce0:	f7f0 f856 	bl	8001d90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8011ce4:	490f      	ldr	r1, [pc, #60]	; (8011d24 <MX_USB_Device_Init+0x58>)
 8011ce6:	480e      	ldr	r0, [pc, #56]	; (8011d20 <MX_USB_Device_Init+0x54>)
 8011ce8:	f7fc fca4 	bl	800e634 <USBD_RegisterClass>
 8011cec:	4603      	mov	r3, r0
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d001      	beq.n	8011cf6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8011cf2:	f7f0 f84d 	bl	8001d90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8011cf6:	490c      	ldr	r1, [pc, #48]	; (8011d28 <MX_USB_Device_Init+0x5c>)
 8011cf8:	4809      	ldr	r0, [pc, #36]	; (8011d20 <MX_USB_Device_Init+0x54>)
 8011cfa:	f7fc fbf5 	bl	800e4e8 <USBD_CDC_RegisterInterface>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d001      	beq.n	8011d08 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8011d04:	f7f0 f844 	bl	8001d90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8011d08:	4805      	ldr	r0, [pc, #20]	; (8011d20 <MX_USB_Device_Init+0x54>)
 8011d0a:	f7fc fcba 	bl	800e682 <USBD_Start>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d001      	beq.n	8011d18 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8011d14:	f7f0 f83c 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8011d18:	bf00      	nop
 8011d1a:	bd80      	pop	{r7, pc}
 8011d1c:	20000134 	.word	0x20000134
 8011d20:	20004cac 	.word	0x20004cac
 8011d24:	20000018 	.word	0x20000018
 8011d28:	20000120 	.word	0x20000120

08011d2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011d30:	2200      	movs	r2, #0
 8011d32:	4905      	ldr	r1, [pc, #20]	; (8011d48 <CDC_Init_FS+0x1c>)
 8011d34:	4805      	ldr	r0, [pc, #20]	; (8011d4c <CDC_Init_FS+0x20>)
 8011d36:	f7fc fbec 	bl	800e512 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011d3a:	4905      	ldr	r1, [pc, #20]	; (8011d50 <CDC_Init_FS+0x24>)
 8011d3c:	4803      	ldr	r0, [pc, #12]	; (8011d4c <CDC_Init_FS+0x20>)
 8011d3e:	f7fc fc06 	bl	800e54e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011d42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011d44:	4618      	mov	r0, r3
 8011d46:	bd80      	pop	{r7, pc}
 8011d48:	2000577c 	.word	0x2000577c
 8011d4c:	20004cac 	.word	0x20004cac
 8011d50:	20004f7c 	.word	0x20004f7c

08011d54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011d54:	b480      	push	{r7}
 8011d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011d58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d62:	4770      	bx	lr

08011d64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011d64:	b480      	push	{r7}
 8011d66:	b083      	sub	sp, #12
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	6039      	str	r1, [r7, #0]
 8011d6e:	71fb      	strb	r3, [r7, #7]
 8011d70:	4613      	mov	r3, r2
 8011d72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011d74:	79fb      	ldrb	r3, [r7, #7]
 8011d76:	2b23      	cmp	r3, #35	; 0x23
 8011d78:	d84a      	bhi.n	8011e10 <CDC_Control_FS+0xac>
 8011d7a:	a201      	add	r2, pc, #4	; (adr r2, 8011d80 <CDC_Control_FS+0x1c>)
 8011d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d80:	08011e11 	.word	0x08011e11
 8011d84:	08011e11 	.word	0x08011e11
 8011d88:	08011e11 	.word	0x08011e11
 8011d8c:	08011e11 	.word	0x08011e11
 8011d90:	08011e11 	.word	0x08011e11
 8011d94:	08011e11 	.word	0x08011e11
 8011d98:	08011e11 	.word	0x08011e11
 8011d9c:	08011e11 	.word	0x08011e11
 8011da0:	08011e11 	.word	0x08011e11
 8011da4:	08011e11 	.word	0x08011e11
 8011da8:	08011e11 	.word	0x08011e11
 8011dac:	08011e11 	.word	0x08011e11
 8011db0:	08011e11 	.word	0x08011e11
 8011db4:	08011e11 	.word	0x08011e11
 8011db8:	08011e11 	.word	0x08011e11
 8011dbc:	08011e11 	.word	0x08011e11
 8011dc0:	08011e11 	.word	0x08011e11
 8011dc4:	08011e11 	.word	0x08011e11
 8011dc8:	08011e11 	.word	0x08011e11
 8011dcc:	08011e11 	.word	0x08011e11
 8011dd0:	08011e11 	.word	0x08011e11
 8011dd4:	08011e11 	.word	0x08011e11
 8011dd8:	08011e11 	.word	0x08011e11
 8011ddc:	08011e11 	.word	0x08011e11
 8011de0:	08011e11 	.word	0x08011e11
 8011de4:	08011e11 	.word	0x08011e11
 8011de8:	08011e11 	.word	0x08011e11
 8011dec:	08011e11 	.word	0x08011e11
 8011df0:	08011e11 	.word	0x08011e11
 8011df4:	08011e11 	.word	0x08011e11
 8011df8:	08011e11 	.word	0x08011e11
 8011dfc:	08011e11 	.word	0x08011e11
 8011e00:	08011e11 	.word	0x08011e11
 8011e04:	08011e11 	.word	0x08011e11
 8011e08:	08011e11 	.word	0x08011e11
 8011e0c:	08011e11 	.word	0x08011e11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011e10:	bf00      	nop
  }

  return (USBD_OK);
 8011e12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011e14:	4618      	mov	r0, r3
 8011e16:	370c      	adds	r7, #12
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1e:	4770      	bx	lr

08011e20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b082      	sub	sp, #8
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
 8011e28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011e2a:	6879      	ldr	r1, [r7, #4]
 8011e2c:	4805      	ldr	r0, [pc, #20]	; (8011e44 <CDC_Receive_FS+0x24>)
 8011e2e:	f7fc fb8e 	bl	800e54e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011e32:	4804      	ldr	r0, [pc, #16]	; (8011e44 <CDC_Receive_FS+0x24>)
 8011e34:	f7fc fba4 	bl	800e580 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011e38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	3708      	adds	r7, #8
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	bd80      	pop	{r7, pc}
 8011e42:	bf00      	nop
 8011e44:	20004cac 	.word	0x20004cac

08011e48 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011e48:	b480      	push	{r7}
 8011e4a:	b087      	sub	sp, #28
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	60f8      	str	r0, [r7, #12]
 8011e50:	60b9      	str	r1, [r7, #8]
 8011e52:	4613      	mov	r3, r2
 8011e54:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011e56:	2300      	movs	r3, #0
 8011e58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011e5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	371c      	adds	r7, #28
 8011e62:	46bd      	mov	sp, r7
 8011e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e68:	4770      	bx	lr
	...

08011e6c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e6c:	b480      	push	{r7}
 8011e6e:	b083      	sub	sp, #12
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	4603      	mov	r3, r0
 8011e74:	6039      	str	r1, [r7, #0]
 8011e76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	2212      	movs	r2, #18
 8011e7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8011e7e:	4b03      	ldr	r3, [pc, #12]	; (8011e8c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8011e80:	4618      	mov	r0, r3
 8011e82:	370c      	adds	r7, #12
 8011e84:	46bd      	mov	sp, r7
 8011e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8a:	4770      	bx	lr
 8011e8c:	20000154 	.word	0x20000154

08011e90 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e90:	b480      	push	{r7}
 8011e92:	b083      	sub	sp, #12
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	4603      	mov	r3, r0
 8011e98:	6039      	str	r1, [r7, #0]
 8011e9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011e9c:	683b      	ldr	r3, [r7, #0]
 8011e9e:	2204      	movs	r2, #4
 8011ea0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011ea2:	4b03      	ldr	r3, [pc, #12]	; (8011eb0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	370c      	adds	r7, #12
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eae:	4770      	bx	lr
 8011eb0:	20000168 	.word	0x20000168

08011eb4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b082      	sub	sp, #8
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	4603      	mov	r3, r0
 8011ebc:	6039      	str	r1, [r7, #0]
 8011ebe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011ec0:	79fb      	ldrb	r3, [r7, #7]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d105      	bne.n	8011ed2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011ec6:	683a      	ldr	r2, [r7, #0]
 8011ec8:	4907      	ldr	r1, [pc, #28]	; (8011ee8 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011eca:	4808      	ldr	r0, [pc, #32]	; (8011eec <USBD_CDC_ProductStrDescriptor+0x38>)
 8011ecc:	f7fd fbc1 	bl	800f652 <USBD_GetString>
 8011ed0:	e004      	b.n	8011edc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011ed2:	683a      	ldr	r2, [r7, #0]
 8011ed4:	4904      	ldr	r1, [pc, #16]	; (8011ee8 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011ed6:	4805      	ldr	r0, [pc, #20]	; (8011eec <USBD_CDC_ProductStrDescriptor+0x38>)
 8011ed8:	f7fd fbbb 	bl	800f652 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011edc:	4b02      	ldr	r3, [pc, #8]	; (8011ee8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8011ede:	4618      	mov	r0, r3
 8011ee0:	3708      	adds	r7, #8
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bd80      	pop	{r7, pc}
 8011ee6:	bf00      	nop
 8011ee8:	20005f7c 	.word	0x20005f7c
 8011eec:	08015600 	.word	0x08015600

08011ef0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b082      	sub	sp, #8
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	6039      	str	r1, [r7, #0]
 8011efa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011efc:	683a      	ldr	r2, [r7, #0]
 8011efe:	4904      	ldr	r1, [pc, #16]	; (8011f10 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8011f00:	4804      	ldr	r0, [pc, #16]	; (8011f14 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8011f02:	f7fd fba6 	bl	800f652 <USBD_GetString>
  return USBD_StrDesc;
 8011f06:	4b02      	ldr	r3, [pc, #8]	; (8011f10 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8011f08:	4618      	mov	r0, r3
 8011f0a:	3708      	adds	r7, #8
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}
 8011f10:	20005f7c 	.word	0x20005f7c
 8011f14:	08015618 	.word	0x08015618

08011f18 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b082      	sub	sp, #8
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	4603      	mov	r3, r0
 8011f20:	6039      	str	r1, [r7, #0]
 8011f22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	221a      	movs	r2, #26
 8011f28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011f2a:	f000 f843 	bl	8011fb4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8011f2e:	4b02      	ldr	r3, [pc, #8]	; (8011f38 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8011f30:	4618      	mov	r0, r3
 8011f32:	3708      	adds	r7, #8
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bd80      	pop	{r7, pc}
 8011f38:	2000016c 	.word	0x2000016c

08011f3c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b082      	sub	sp, #8
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	4603      	mov	r3, r0
 8011f44:	6039      	str	r1, [r7, #0]
 8011f46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011f48:	79fb      	ldrb	r3, [r7, #7]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d105      	bne.n	8011f5a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8011f4e:	683a      	ldr	r2, [r7, #0]
 8011f50:	4907      	ldr	r1, [pc, #28]	; (8011f70 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011f52:	4808      	ldr	r0, [pc, #32]	; (8011f74 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011f54:	f7fd fb7d 	bl	800f652 <USBD_GetString>
 8011f58:	e004      	b.n	8011f64 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8011f5a:	683a      	ldr	r2, [r7, #0]
 8011f5c:	4904      	ldr	r1, [pc, #16]	; (8011f70 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011f5e:	4805      	ldr	r0, [pc, #20]	; (8011f74 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011f60:	f7fd fb77 	bl	800f652 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011f64:	4b02      	ldr	r3, [pc, #8]	; (8011f70 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8011f66:	4618      	mov	r0, r3
 8011f68:	3708      	adds	r7, #8
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	bd80      	pop	{r7, pc}
 8011f6e:	bf00      	nop
 8011f70:	20005f7c 	.word	0x20005f7c
 8011f74:	0801562c 	.word	0x0801562c

08011f78 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b082      	sub	sp, #8
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	4603      	mov	r3, r0
 8011f80:	6039      	str	r1, [r7, #0]
 8011f82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011f84:	79fb      	ldrb	r3, [r7, #7]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d105      	bne.n	8011f96 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011f8a:	683a      	ldr	r2, [r7, #0]
 8011f8c:	4907      	ldr	r1, [pc, #28]	; (8011fac <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8011f8e:	4808      	ldr	r0, [pc, #32]	; (8011fb0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011f90:	f7fd fb5f 	bl	800f652 <USBD_GetString>
 8011f94:	e004      	b.n	8011fa0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011f96:	683a      	ldr	r2, [r7, #0]
 8011f98:	4904      	ldr	r1, [pc, #16]	; (8011fac <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8011f9a:	4805      	ldr	r0, [pc, #20]	; (8011fb0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011f9c:	f7fd fb59 	bl	800f652 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011fa0:	4b02      	ldr	r3, [pc, #8]	; (8011fac <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	3708      	adds	r7, #8
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}
 8011faa:	bf00      	nop
 8011fac:	20005f7c 	.word	0x20005f7c
 8011fb0:	08015638 	.word	0x08015638

08011fb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b084      	sub	sp, #16
 8011fb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011fba:	4b0f      	ldr	r3, [pc, #60]	; (8011ff8 <Get_SerialNum+0x44>)
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011fc0:	4b0e      	ldr	r3, [pc, #56]	; (8011ffc <Get_SerialNum+0x48>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011fc6:	4b0e      	ldr	r3, [pc, #56]	; (8012000 <Get_SerialNum+0x4c>)
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011fcc:	68fa      	ldr	r2, [r7, #12]
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	4413      	add	r3, r2
 8011fd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d009      	beq.n	8011fee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011fda:	2208      	movs	r2, #8
 8011fdc:	4909      	ldr	r1, [pc, #36]	; (8012004 <Get_SerialNum+0x50>)
 8011fde:	68f8      	ldr	r0, [r7, #12]
 8011fe0:	f000 f814 	bl	801200c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011fe4:	2204      	movs	r2, #4
 8011fe6:	4908      	ldr	r1, [pc, #32]	; (8012008 <Get_SerialNum+0x54>)
 8011fe8:	68b8      	ldr	r0, [r7, #8]
 8011fea:	f000 f80f 	bl	801200c <IntToUnicode>
  }
}
 8011fee:	bf00      	nop
 8011ff0:	3710      	adds	r7, #16
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	bd80      	pop	{r7, pc}
 8011ff6:	bf00      	nop
 8011ff8:	1fff7590 	.word	0x1fff7590
 8011ffc:	1fff7594 	.word	0x1fff7594
 8012000:	1fff7598 	.word	0x1fff7598
 8012004:	2000016e 	.word	0x2000016e
 8012008:	2000017e 	.word	0x2000017e

0801200c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801200c:	b480      	push	{r7}
 801200e:	b087      	sub	sp, #28
 8012010:	af00      	add	r7, sp, #0
 8012012:	60f8      	str	r0, [r7, #12]
 8012014:	60b9      	str	r1, [r7, #8]
 8012016:	4613      	mov	r3, r2
 8012018:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801201a:	2300      	movs	r3, #0
 801201c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801201e:	2300      	movs	r3, #0
 8012020:	75fb      	strb	r3, [r7, #23]
 8012022:	e027      	b.n	8012074 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	0f1b      	lsrs	r3, r3, #28
 8012028:	2b09      	cmp	r3, #9
 801202a:	d80b      	bhi.n	8012044 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	0f1b      	lsrs	r3, r3, #28
 8012030:	b2da      	uxtb	r2, r3
 8012032:	7dfb      	ldrb	r3, [r7, #23]
 8012034:	005b      	lsls	r3, r3, #1
 8012036:	4619      	mov	r1, r3
 8012038:	68bb      	ldr	r3, [r7, #8]
 801203a:	440b      	add	r3, r1
 801203c:	3230      	adds	r2, #48	; 0x30
 801203e:	b2d2      	uxtb	r2, r2
 8012040:	701a      	strb	r2, [r3, #0]
 8012042:	e00a      	b.n	801205a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	0f1b      	lsrs	r3, r3, #28
 8012048:	b2da      	uxtb	r2, r3
 801204a:	7dfb      	ldrb	r3, [r7, #23]
 801204c:	005b      	lsls	r3, r3, #1
 801204e:	4619      	mov	r1, r3
 8012050:	68bb      	ldr	r3, [r7, #8]
 8012052:	440b      	add	r3, r1
 8012054:	3237      	adds	r2, #55	; 0x37
 8012056:	b2d2      	uxtb	r2, r2
 8012058:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	011b      	lsls	r3, r3, #4
 801205e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012060:	7dfb      	ldrb	r3, [r7, #23]
 8012062:	005b      	lsls	r3, r3, #1
 8012064:	3301      	adds	r3, #1
 8012066:	68ba      	ldr	r2, [r7, #8]
 8012068:	4413      	add	r3, r2
 801206a:	2200      	movs	r2, #0
 801206c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801206e:	7dfb      	ldrb	r3, [r7, #23]
 8012070:	3301      	adds	r3, #1
 8012072:	75fb      	strb	r3, [r7, #23]
 8012074:	7dfa      	ldrb	r2, [r7, #23]
 8012076:	79fb      	ldrb	r3, [r7, #7]
 8012078:	429a      	cmp	r2, r3
 801207a:	d3d3      	bcc.n	8012024 <IntToUnicode+0x18>
  }
}
 801207c:	bf00      	nop
 801207e:	bf00      	nop
 8012080:	371c      	adds	r7, #28
 8012082:	46bd      	mov	sp, r7
 8012084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012088:	4770      	bx	lr
	...

0801208c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b098      	sub	sp, #96	; 0x60
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012094:	f107 030c 	add.w	r3, r7, #12
 8012098:	2254      	movs	r2, #84	; 0x54
 801209a:	2100      	movs	r1, #0
 801209c:	4618      	mov	r0, r3
 801209e:	f001 f957 	bl	8013350 <memset>
  if(pcdHandle->Instance==USB)
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	4a15      	ldr	r2, [pc, #84]	; (80120fc <HAL_PCD_MspInit+0x70>)
 80120a8:	4293      	cmp	r3, r2
 80120aa:	d122      	bne.n	80120f2 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80120ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80120b0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80120b2:	2300      	movs	r3, #0
 80120b4:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80120b6:	f107 030c 	add.w	r3, r7, #12
 80120ba:	4618      	mov	r0, r3
 80120bc:	f7f6 fb90 	bl	80087e0 <HAL_RCCEx_PeriphCLKConfig>
 80120c0:	4603      	mov	r3, r0
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d001      	beq.n	80120ca <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80120c6:	f7ef fe63 	bl	8001d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80120ca:	4b0d      	ldr	r3, [pc, #52]	; (8012100 <HAL_PCD_MspInit+0x74>)
 80120cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120ce:	4a0c      	ldr	r2, [pc, #48]	; (8012100 <HAL_PCD_MspInit+0x74>)
 80120d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80120d4:	6593      	str	r3, [r2, #88]	; 0x58
 80120d6:	4b0a      	ldr	r3, [pc, #40]	; (8012100 <HAL_PCD_MspInit+0x74>)
 80120d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80120de:	60bb      	str	r3, [r7, #8]
 80120e0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 80120e2:	2200      	movs	r2, #0
 80120e4:	2105      	movs	r1, #5
 80120e6:	2014      	movs	r0, #20
 80120e8:	f7f3 f838 	bl	800515c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80120ec:	2014      	movs	r0, #20
 80120ee:	f7f3 f84f 	bl	8005190 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80120f2:	bf00      	nop
 80120f4:	3760      	adds	r7, #96	; 0x60
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd80      	pop	{r7, pc}
 80120fa:	bf00      	nop
 80120fc:	40005c00 	.word	0x40005c00
 8012100:	40021000 	.word	0x40021000

08012104 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b082      	sub	sp, #8
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8012118:	4619      	mov	r1, r3
 801211a:	4610      	mov	r0, r2
 801211c:	f7fc fafc 	bl	800e718 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8012120:	bf00      	nop
 8012122:	3708      	adds	r7, #8
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}

08012128 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b082      	sub	sp, #8
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
 8012130:	460b      	mov	r3, r1
 8012132:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 801213a:	78fa      	ldrb	r2, [r7, #3]
 801213c:	6879      	ldr	r1, [r7, #4]
 801213e:	4613      	mov	r3, r2
 8012140:	009b      	lsls	r3, r3, #2
 8012142:	4413      	add	r3, r2
 8012144:	00db      	lsls	r3, r3, #3
 8012146:	440b      	add	r3, r1
 8012148:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801214c:	681a      	ldr	r2, [r3, #0]
 801214e:	78fb      	ldrb	r3, [r7, #3]
 8012150:	4619      	mov	r1, r3
 8012152:	f7fc fb36 	bl	800e7c2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8012156:	bf00      	nop
 8012158:	3708      	adds	r7, #8
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}

0801215e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801215e:	b580      	push	{r7, lr}
 8012160:	b082      	sub	sp, #8
 8012162:	af00      	add	r7, sp, #0
 8012164:	6078      	str	r0, [r7, #4]
 8012166:	460b      	mov	r3, r1
 8012168:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8012170:	78fa      	ldrb	r2, [r7, #3]
 8012172:	6879      	ldr	r1, [r7, #4]
 8012174:	4613      	mov	r3, r2
 8012176:	009b      	lsls	r3, r3, #2
 8012178:	4413      	add	r3, r2
 801217a:	00db      	lsls	r3, r3, #3
 801217c:	440b      	add	r3, r1
 801217e:	333c      	adds	r3, #60	; 0x3c
 8012180:	681a      	ldr	r2, [r3, #0]
 8012182:	78fb      	ldrb	r3, [r7, #3]
 8012184:	4619      	mov	r1, r3
 8012186:	f7fc fb7f 	bl	800e888 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801218a:	bf00      	nop
 801218c:	3708      	adds	r7, #8
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}

08012192 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012192:	b580      	push	{r7, lr}
 8012194:	b082      	sub	sp, #8
 8012196:	af00      	add	r7, sp, #0
 8012198:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80121a0:	4618      	mov	r0, r3
 80121a2:	f7fc fc93 	bl	800eacc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80121a6:	bf00      	nop
 80121a8:	3708      	adds	r7, #8
 80121aa:	46bd      	mov	sp, r7
 80121ac:	bd80      	pop	{r7, pc}

080121ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121ae:	b580      	push	{r7, lr}
 80121b0:	b084      	sub	sp, #16
 80121b2:	af00      	add	r7, sp, #0
 80121b4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80121b6:	2301      	movs	r3, #1
 80121b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	689b      	ldr	r3, [r3, #8]
 80121be:	2b02      	cmp	r3, #2
 80121c0:	d001      	beq.n	80121c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80121c2:	f7ef fde5 	bl	8001d90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80121cc:	7bfa      	ldrb	r2, [r7, #15]
 80121ce:	4611      	mov	r1, r2
 80121d0:	4618      	mov	r0, r3
 80121d2:	f7fc fc3d 	bl	800ea50 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80121dc:	4618      	mov	r0, r3
 80121de:	f7fc fbe9 	bl	800e9b4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80121e2:	bf00      	nop
 80121e4:	3710      	adds	r7, #16
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}
	...

080121ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b082      	sub	sp, #8
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80121fa:	4618      	mov	r0, r3
 80121fc:	f7fc fc38 	bl	800ea70 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	699b      	ldr	r3, [r3, #24]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d005      	beq.n	8012214 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012208:	4b04      	ldr	r3, [pc, #16]	; (801221c <HAL_PCD_SuspendCallback+0x30>)
 801220a:	691b      	ldr	r3, [r3, #16]
 801220c:	4a03      	ldr	r2, [pc, #12]	; (801221c <HAL_PCD_SuspendCallback+0x30>)
 801220e:	f043 0306 	orr.w	r3, r3, #6
 8012212:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8012214:	bf00      	nop
 8012216:	3708      	adds	r7, #8
 8012218:	46bd      	mov	sp, r7
 801221a:	bd80      	pop	{r7, pc}
 801221c:	e000ed00 	.word	0xe000ed00

08012220 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b082      	sub	sp, #8
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	699b      	ldr	r3, [r3, #24]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d007      	beq.n	8012240 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012230:	4b08      	ldr	r3, [pc, #32]	; (8012254 <HAL_PCD_ResumeCallback+0x34>)
 8012232:	691b      	ldr	r3, [r3, #16]
 8012234:	4a07      	ldr	r2, [pc, #28]	; (8012254 <HAL_PCD_ResumeCallback+0x34>)
 8012236:	f023 0306 	bic.w	r3, r3, #6
 801223a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801223c:	f000 f9fa 	bl	8012634 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8012246:	4618      	mov	r0, r3
 8012248:	f7fc fc28 	bl	800ea9c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801224c:	bf00      	nop
 801224e:	3708      	adds	r7, #8
 8012250:	46bd      	mov	sp, r7
 8012252:	bd80      	pop	{r7, pc}
 8012254:	e000ed00 	.word	0xe000ed00

08012258 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b082      	sub	sp, #8
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8012260:	4a2b      	ldr	r2, [pc, #172]	; (8012310 <USBD_LL_Init+0xb8>)
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	4a29      	ldr	r2, [pc, #164]	; (8012310 <USBD_LL_Init+0xb8>)
 801226c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8012270:	4b27      	ldr	r3, [pc, #156]	; (8012310 <USBD_LL_Init+0xb8>)
 8012272:	4a28      	ldr	r2, [pc, #160]	; (8012314 <USBD_LL_Init+0xbc>)
 8012274:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8012276:	4b26      	ldr	r3, [pc, #152]	; (8012310 <USBD_LL_Init+0xb8>)
 8012278:	2208      	movs	r2, #8
 801227a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801227c:	4b24      	ldr	r3, [pc, #144]	; (8012310 <USBD_LL_Init+0xb8>)
 801227e:	2202      	movs	r2, #2
 8012280:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012282:	4b23      	ldr	r3, [pc, #140]	; (8012310 <USBD_LL_Init+0xb8>)
 8012284:	2202      	movs	r2, #2
 8012286:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8012288:	4b21      	ldr	r3, [pc, #132]	; (8012310 <USBD_LL_Init+0xb8>)
 801228a:	2200      	movs	r2, #0
 801228c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801228e:	4b20      	ldr	r3, [pc, #128]	; (8012310 <USBD_LL_Init+0xb8>)
 8012290:	2200      	movs	r2, #0
 8012292:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8012294:	4b1e      	ldr	r3, [pc, #120]	; (8012310 <USBD_LL_Init+0xb8>)
 8012296:	2200      	movs	r2, #0
 8012298:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801229a:	4b1d      	ldr	r3, [pc, #116]	; (8012310 <USBD_LL_Init+0xb8>)
 801229c:	2200      	movs	r2, #0
 801229e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80122a0:	481b      	ldr	r0, [pc, #108]	; (8012310 <USBD_LL_Init+0xb8>)
 80122a2:	f7f3 ff63 	bl	800616c <HAL_PCD_Init>
 80122a6:	4603      	mov	r3, r0
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d001      	beq.n	80122b0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80122ac:	f7ef fd70 	bl	8001d90 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80122b6:	2318      	movs	r3, #24
 80122b8:	2200      	movs	r2, #0
 80122ba:	2100      	movs	r1, #0
 80122bc:	f7f5 fc1c 	bl	8007af8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80122c6:	2358      	movs	r3, #88	; 0x58
 80122c8:	2200      	movs	r2, #0
 80122ca:	2180      	movs	r1, #128	; 0x80
 80122cc:	f7f5 fc14 	bl	8007af8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80122d6:	23c0      	movs	r3, #192	; 0xc0
 80122d8:	2200      	movs	r2, #0
 80122da:	2181      	movs	r1, #129	; 0x81
 80122dc:	f7f5 fc0c 	bl	8007af8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80122e6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80122ea:	2200      	movs	r2, #0
 80122ec:	2101      	movs	r1, #1
 80122ee:	f7f5 fc03 	bl	8007af8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80122f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80122fc:	2200      	movs	r2, #0
 80122fe:	2182      	movs	r1, #130	; 0x82
 8012300:	f7f5 fbfa 	bl	8007af8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8012304:	2300      	movs	r3, #0
}
 8012306:	4618      	mov	r0, r3
 8012308:	3708      	adds	r7, #8
 801230a:	46bd      	mov	sp, r7
 801230c:	bd80      	pop	{r7, pc}
 801230e:	bf00      	nop
 8012310:	2000617c 	.word	0x2000617c
 8012314:	40005c00 	.word	0x40005c00

08012318 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b084      	sub	sp, #16
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012320:	2300      	movs	r3, #0
 8012322:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012324:	2300      	movs	r3, #0
 8012326:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801232e:	4618      	mov	r0, r3
 8012330:	f7f4 f801 	bl	8006336 <HAL_PCD_Start>
 8012334:	4603      	mov	r3, r0
 8012336:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012338:	7bfb      	ldrb	r3, [r7, #15]
 801233a:	4618      	mov	r0, r3
 801233c:	f000 f980 	bl	8012640 <USBD_Get_USB_Status>
 8012340:	4603      	mov	r3, r0
 8012342:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012344:	7bbb      	ldrb	r3, [r7, #14]
}
 8012346:	4618      	mov	r0, r3
 8012348:	3710      	adds	r7, #16
 801234a:	46bd      	mov	sp, r7
 801234c:	bd80      	pop	{r7, pc}

0801234e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801234e:	b580      	push	{r7, lr}
 8012350:	b084      	sub	sp, #16
 8012352:	af00      	add	r7, sp, #0
 8012354:	6078      	str	r0, [r7, #4]
 8012356:	4608      	mov	r0, r1
 8012358:	4611      	mov	r1, r2
 801235a:	461a      	mov	r2, r3
 801235c:	4603      	mov	r3, r0
 801235e:	70fb      	strb	r3, [r7, #3]
 8012360:	460b      	mov	r3, r1
 8012362:	70bb      	strb	r3, [r7, #2]
 8012364:	4613      	mov	r3, r2
 8012366:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012368:	2300      	movs	r3, #0
 801236a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801236c:	2300      	movs	r3, #0
 801236e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012376:	78bb      	ldrb	r3, [r7, #2]
 8012378:	883a      	ldrh	r2, [r7, #0]
 801237a:	78f9      	ldrb	r1, [r7, #3]
 801237c:	f7f4 f949 	bl	8006612 <HAL_PCD_EP_Open>
 8012380:	4603      	mov	r3, r0
 8012382:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012384:	7bfb      	ldrb	r3, [r7, #15]
 8012386:	4618      	mov	r0, r3
 8012388:	f000 f95a 	bl	8012640 <USBD_Get_USB_Status>
 801238c:	4603      	mov	r3, r0
 801238e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012390:	7bbb      	ldrb	r3, [r7, #14]
}
 8012392:	4618      	mov	r0, r3
 8012394:	3710      	adds	r7, #16
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}

0801239a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801239a:	b580      	push	{r7, lr}
 801239c:	b084      	sub	sp, #16
 801239e:	af00      	add	r7, sp, #0
 80123a0:	6078      	str	r0, [r7, #4]
 80123a2:	460b      	mov	r3, r1
 80123a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123a6:	2300      	movs	r3, #0
 80123a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123aa:	2300      	movs	r3, #0
 80123ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80123b4:	78fa      	ldrb	r2, [r7, #3]
 80123b6:	4611      	mov	r1, r2
 80123b8:	4618      	mov	r0, r3
 80123ba:	f7f4 f990 	bl	80066de <HAL_PCD_EP_Close>
 80123be:	4603      	mov	r3, r0
 80123c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80123c2:	7bfb      	ldrb	r3, [r7, #15]
 80123c4:	4618      	mov	r0, r3
 80123c6:	f000 f93b 	bl	8012640 <USBD_Get_USB_Status>
 80123ca:	4603      	mov	r3, r0
 80123cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80123ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80123d0:	4618      	mov	r0, r3
 80123d2:	3710      	adds	r7, #16
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}

080123d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b084      	sub	sp, #16
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
 80123e0:	460b      	mov	r3, r1
 80123e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123e4:	2300      	movs	r3, #0
 80123e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123e8:	2300      	movs	r3, #0
 80123ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80123f2:	78fa      	ldrb	r2, [r7, #3]
 80123f4:	4611      	mov	r1, r2
 80123f6:	4618      	mov	r0, r3
 80123f8:	f7f4 fa51 	bl	800689e <HAL_PCD_EP_SetStall>
 80123fc:	4603      	mov	r3, r0
 80123fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012400:	7bfb      	ldrb	r3, [r7, #15]
 8012402:	4618      	mov	r0, r3
 8012404:	f000 f91c 	bl	8012640 <USBD_Get_USB_Status>
 8012408:	4603      	mov	r3, r0
 801240a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801240c:	7bbb      	ldrb	r3, [r7, #14]
}
 801240e:	4618      	mov	r0, r3
 8012410:	3710      	adds	r7, #16
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}

08012416 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012416:	b580      	push	{r7, lr}
 8012418:	b084      	sub	sp, #16
 801241a:	af00      	add	r7, sp, #0
 801241c:	6078      	str	r0, [r7, #4]
 801241e:	460b      	mov	r3, r1
 8012420:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012422:	2300      	movs	r3, #0
 8012424:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012426:	2300      	movs	r3, #0
 8012428:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012430:	78fa      	ldrb	r2, [r7, #3]
 8012432:	4611      	mov	r1, r2
 8012434:	4618      	mov	r0, r3
 8012436:	f7f4 fa84 	bl	8006942 <HAL_PCD_EP_ClrStall>
 801243a:	4603      	mov	r3, r0
 801243c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801243e:	7bfb      	ldrb	r3, [r7, #15]
 8012440:	4618      	mov	r0, r3
 8012442:	f000 f8fd 	bl	8012640 <USBD_Get_USB_Status>
 8012446:	4603      	mov	r3, r0
 8012448:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801244a:	7bbb      	ldrb	r3, [r7, #14]
}
 801244c:	4618      	mov	r0, r3
 801244e:	3710      	adds	r7, #16
 8012450:	46bd      	mov	sp, r7
 8012452:	bd80      	pop	{r7, pc}

08012454 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012454:	b480      	push	{r7}
 8012456:	b085      	sub	sp, #20
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
 801245c:	460b      	mov	r3, r1
 801245e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012466:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012468:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801246c:	2b00      	cmp	r3, #0
 801246e:	da0c      	bge.n	801248a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012470:	78fb      	ldrb	r3, [r7, #3]
 8012472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012476:	68f9      	ldr	r1, [r7, #12]
 8012478:	1c5a      	adds	r2, r3, #1
 801247a:	4613      	mov	r3, r2
 801247c:	009b      	lsls	r3, r3, #2
 801247e:	4413      	add	r3, r2
 8012480:	00db      	lsls	r3, r3, #3
 8012482:	440b      	add	r3, r1
 8012484:	3302      	adds	r3, #2
 8012486:	781b      	ldrb	r3, [r3, #0]
 8012488:	e00b      	b.n	80124a2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801248a:	78fb      	ldrb	r3, [r7, #3]
 801248c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012490:	68f9      	ldr	r1, [r7, #12]
 8012492:	4613      	mov	r3, r2
 8012494:	009b      	lsls	r3, r3, #2
 8012496:	4413      	add	r3, r2
 8012498:	00db      	lsls	r3, r3, #3
 801249a:	440b      	add	r3, r1
 801249c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80124a0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80124a2:	4618      	mov	r0, r3
 80124a4:	3714      	adds	r7, #20
 80124a6:	46bd      	mov	sp, r7
 80124a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ac:	4770      	bx	lr

080124ae <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80124ae:	b580      	push	{r7, lr}
 80124b0:	b084      	sub	sp, #16
 80124b2:	af00      	add	r7, sp, #0
 80124b4:	6078      	str	r0, [r7, #4]
 80124b6:	460b      	mov	r3, r1
 80124b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124ba:	2300      	movs	r3, #0
 80124bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80124be:	2300      	movs	r3, #0
 80124c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80124c8:	78fa      	ldrb	r2, [r7, #3]
 80124ca:	4611      	mov	r1, r2
 80124cc:	4618      	mov	r0, r3
 80124ce:	f7f4 f87b 	bl	80065c8 <HAL_PCD_SetAddress>
 80124d2:	4603      	mov	r3, r0
 80124d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80124d6:	7bfb      	ldrb	r3, [r7, #15]
 80124d8:	4618      	mov	r0, r3
 80124da:	f000 f8b1 	bl	8012640 <USBD_Get_USB_Status>
 80124de:	4603      	mov	r3, r0
 80124e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80124e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80124e4:	4618      	mov	r0, r3
 80124e6:	3710      	adds	r7, #16
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd80      	pop	{r7, pc}

080124ec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b086      	sub	sp, #24
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	60f8      	str	r0, [r7, #12]
 80124f4:	607a      	str	r2, [r7, #4]
 80124f6:	603b      	str	r3, [r7, #0]
 80124f8:	460b      	mov	r3, r1
 80124fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124fc:	2300      	movs	r3, #0
 80124fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012500:	2300      	movs	r3, #0
 8012502:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801250a:	7af9      	ldrb	r1, [r7, #11]
 801250c:	683b      	ldr	r3, [r7, #0]
 801250e:	687a      	ldr	r2, [r7, #4]
 8012510:	f7f4 f982 	bl	8006818 <HAL_PCD_EP_Transmit>
 8012514:	4603      	mov	r3, r0
 8012516:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012518:	7dfb      	ldrb	r3, [r7, #23]
 801251a:	4618      	mov	r0, r3
 801251c:	f000 f890 	bl	8012640 <USBD_Get_USB_Status>
 8012520:	4603      	mov	r3, r0
 8012522:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012524:	7dbb      	ldrb	r3, [r7, #22]
}
 8012526:	4618      	mov	r0, r3
 8012528:	3718      	adds	r7, #24
 801252a:	46bd      	mov	sp, r7
 801252c:	bd80      	pop	{r7, pc}

0801252e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801252e:	b580      	push	{r7, lr}
 8012530:	b086      	sub	sp, #24
 8012532:	af00      	add	r7, sp, #0
 8012534:	60f8      	str	r0, [r7, #12]
 8012536:	607a      	str	r2, [r7, #4]
 8012538:	603b      	str	r3, [r7, #0]
 801253a:	460b      	mov	r3, r1
 801253c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801253e:	2300      	movs	r3, #0
 8012540:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012542:	2300      	movs	r3, #0
 8012544:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801254c:	7af9      	ldrb	r1, [r7, #11]
 801254e:	683b      	ldr	r3, [r7, #0]
 8012550:	687a      	ldr	r2, [r7, #4]
 8012552:	f7f4 f90c 	bl	800676e <HAL_PCD_EP_Receive>
 8012556:	4603      	mov	r3, r0
 8012558:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801255a:	7dfb      	ldrb	r3, [r7, #23]
 801255c:	4618      	mov	r0, r3
 801255e:	f000 f86f 	bl	8012640 <USBD_Get_USB_Status>
 8012562:	4603      	mov	r3, r0
 8012564:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012566:	7dbb      	ldrb	r3, [r7, #22]
}
 8012568:	4618      	mov	r0, r3
 801256a:	3718      	adds	r7, #24
 801256c:	46bd      	mov	sp, r7
 801256e:	bd80      	pop	{r7, pc}

08012570 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b082      	sub	sp, #8
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]
 8012578:	460b      	mov	r3, r1
 801257a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012582:	78fa      	ldrb	r2, [r7, #3]
 8012584:	4611      	mov	r1, r2
 8012586:	4618      	mov	r0, r3
 8012588:	f7f4 f92e 	bl	80067e8 <HAL_PCD_EP_GetRxCount>
 801258c:	4603      	mov	r3, r0
}
 801258e:	4618      	mov	r0, r3
 8012590:	3708      	adds	r7, #8
 8012592:	46bd      	mov	sp, r7
 8012594:	bd80      	pop	{r7, pc}
	...

08012598 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b082      	sub	sp, #8
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
 80125a0:	460b      	mov	r3, r1
 80125a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80125a4:	78fb      	ldrb	r3, [r7, #3]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d002      	beq.n	80125b0 <HAL_PCDEx_LPM_Callback+0x18>
 80125aa:	2b01      	cmp	r3, #1
 80125ac:	d013      	beq.n	80125d6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80125ae:	e023      	b.n	80125f8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	699b      	ldr	r3, [r3, #24]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d007      	beq.n	80125c8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80125b8:	f000 f83c 	bl	8012634 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80125bc:	4b10      	ldr	r3, [pc, #64]	; (8012600 <HAL_PCDEx_LPM_Callback+0x68>)
 80125be:	691b      	ldr	r3, [r3, #16]
 80125c0:	4a0f      	ldr	r2, [pc, #60]	; (8012600 <HAL_PCDEx_LPM_Callback+0x68>)
 80125c2:	f023 0306 	bic.w	r3, r3, #6
 80125c6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80125ce:	4618      	mov	r0, r3
 80125d0:	f7fc fa64 	bl	800ea9c <USBD_LL_Resume>
    break;
 80125d4:	e010      	b.n	80125f8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80125dc:	4618      	mov	r0, r3
 80125de:	f7fc fa47 	bl	800ea70 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	699b      	ldr	r3, [r3, #24]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d005      	beq.n	80125f6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80125ea:	4b05      	ldr	r3, [pc, #20]	; (8012600 <HAL_PCDEx_LPM_Callback+0x68>)
 80125ec:	691b      	ldr	r3, [r3, #16]
 80125ee:	4a04      	ldr	r2, [pc, #16]	; (8012600 <HAL_PCDEx_LPM_Callback+0x68>)
 80125f0:	f043 0306 	orr.w	r3, r3, #6
 80125f4:	6113      	str	r3, [r2, #16]
    break;
 80125f6:	bf00      	nop
}
 80125f8:	bf00      	nop
 80125fa:	3708      	adds	r7, #8
 80125fc:	46bd      	mov	sp, r7
 80125fe:	bd80      	pop	{r7, pc}
 8012600:	e000ed00 	.word	0xe000ed00

08012604 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012604:	b480      	push	{r7}
 8012606:	b083      	sub	sp, #12
 8012608:	af00      	add	r7, sp, #0
 801260a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801260c:	4b03      	ldr	r3, [pc, #12]	; (801261c <USBD_static_malloc+0x18>)
}
 801260e:	4618      	mov	r0, r3
 8012610:	370c      	adds	r7, #12
 8012612:	46bd      	mov	sp, r7
 8012614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012618:	4770      	bx	lr
 801261a:	bf00      	nop
 801261c:	20006470 	.word	0x20006470

08012620 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012620:	b480      	push	{r7}
 8012622:	b083      	sub	sp, #12
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]

}
 8012628:	bf00      	nop
 801262a:	370c      	adds	r7, #12
 801262c:	46bd      	mov	sp, r7
 801262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012632:	4770      	bx	lr

08012634 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8012638:	f7ef fb3a 	bl	8001cb0 <SystemClock_Config>
}
 801263c:	bf00      	nop
 801263e:	bd80      	pop	{r7, pc}

08012640 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012640:	b480      	push	{r7}
 8012642:	b085      	sub	sp, #20
 8012644:	af00      	add	r7, sp, #0
 8012646:	4603      	mov	r3, r0
 8012648:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801264a:	2300      	movs	r3, #0
 801264c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801264e:	79fb      	ldrb	r3, [r7, #7]
 8012650:	2b03      	cmp	r3, #3
 8012652:	d817      	bhi.n	8012684 <USBD_Get_USB_Status+0x44>
 8012654:	a201      	add	r2, pc, #4	; (adr r2, 801265c <USBD_Get_USB_Status+0x1c>)
 8012656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801265a:	bf00      	nop
 801265c:	0801266d 	.word	0x0801266d
 8012660:	08012673 	.word	0x08012673
 8012664:	08012679 	.word	0x08012679
 8012668:	0801267f 	.word	0x0801267f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801266c:	2300      	movs	r3, #0
 801266e:	73fb      	strb	r3, [r7, #15]
    break;
 8012670:	e00b      	b.n	801268a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012672:	2303      	movs	r3, #3
 8012674:	73fb      	strb	r3, [r7, #15]
    break;
 8012676:	e008      	b.n	801268a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012678:	2301      	movs	r3, #1
 801267a:	73fb      	strb	r3, [r7, #15]
    break;
 801267c:	e005      	b.n	801268a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801267e:	2303      	movs	r3, #3
 8012680:	73fb      	strb	r3, [r7, #15]
    break;
 8012682:	e002      	b.n	801268a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012684:	2303      	movs	r3, #3
 8012686:	73fb      	strb	r3, [r7, #15]
    break;
 8012688:	bf00      	nop
  }
  return usb_status;
 801268a:	7bfb      	ldrb	r3, [r7, #15]
}
 801268c:	4618      	mov	r0, r3
 801268e:	3714      	adds	r7, #20
 8012690:	46bd      	mov	sp, r7
 8012692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012696:	4770      	bx	lr

08012698 <__cvt>:
 8012698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801269c:	ec55 4b10 	vmov	r4, r5, d0
 80126a0:	2d00      	cmp	r5, #0
 80126a2:	460e      	mov	r6, r1
 80126a4:	4619      	mov	r1, r3
 80126a6:	462b      	mov	r3, r5
 80126a8:	bfbb      	ittet	lt
 80126aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80126ae:	461d      	movlt	r5, r3
 80126b0:	2300      	movge	r3, #0
 80126b2:	232d      	movlt	r3, #45	; 0x2d
 80126b4:	700b      	strb	r3, [r1, #0]
 80126b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80126b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80126bc:	4691      	mov	r9, r2
 80126be:	f023 0820 	bic.w	r8, r3, #32
 80126c2:	bfbc      	itt	lt
 80126c4:	4622      	movlt	r2, r4
 80126c6:	4614      	movlt	r4, r2
 80126c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80126cc:	d005      	beq.n	80126da <__cvt+0x42>
 80126ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80126d2:	d100      	bne.n	80126d6 <__cvt+0x3e>
 80126d4:	3601      	adds	r6, #1
 80126d6:	2102      	movs	r1, #2
 80126d8:	e000      	b.n	80126dc <__cvt+0x44>
 80126da:	2103      	movs	r1, #3
 80126dc:	ab03      	add	r3, sp, #12
 80126de:	9301      	str	r3, [sp, #4]
 80126e0:	ab02      	add	r3, sp, #8
 80126e2:	9300      	str	r3, [sp, #0]
 80126e4:	ec45 4b10 	vmov	d0, r4, r5
 80126e8:	4653      	mov	r3, sl
 80126ea:	4632      	mov	r2, r6
 80126ec:	f000 ff9c 	bl	8013628 <_dtoa_r>
 80126f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80126f4:	4607      	mov	r7, r0
 80126f6:	d102      	bne.n	80126fe <__cvt+0x66>
 80126f8:	f019 0f01 	tst.w	r9, #1
 80126fc:	d022      	beq.n	8012744 <__cvt+0xac>
 80126fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012702:	eb07 0906 	add.w	r9, r7, r6
 8012706:	d110      	bne.n	801272a <__cvt+0x92>
 8012708:	783b      	ldrb	r3, [r7, #0]
 801270a:	2b30      	cmp	r3, #48	; 0x30
 801270c:	d10a      	bne.n	8012724 <__cvt+0x8c>
 801270e:	2200      	movs	r2, #0
 8012710:	2300      	movs	r3, #0
 8012712:	4620      	mov	r0, r4
 8012714:	4629      	mov	r1, r5
 8012716:	f7ee f9ff 	bl	8000b18 <__aeabi_dcmpeq>
 801271a:	b918      	cbnz	r0, 8012724 <__cvt+0x8c>
 801271c:	f1c6 0601 	rsb	r6, r6, #1
 8012720:	f8ca 6000 	str.w	r6, [sl]
 8012724:	f8da 3000 	ldr.w	r3, [sl]
 8012728:	4499      	add	r9, r3
 801272a:	2200      	movs	r2, #0
 801272c:	2300      	movs	r3, #0
 801272e:	4620      	mov	r0, r4
 8012730:	4629      	mov	r1, r5
 8012732:	f7ee f9f1 	bl	8000b18 <__aeabi_dcmpeq>
 8012736:	b108      	cbz	r0, 801273c <__cvt+0xa4>
 8012738:	f8cd 900c 	str.w	r9, [sp, #12]
 801273c:	2230      	movs	r2, #48	; 0x30
 801273e:	9b03      	ldr	r3, [sp, #12]
 8012740:	454b      	cmp	r3, r9
 8012742:	d307      	bcc.n	8012754 <__cvt+0xbc>
 8012744:	9b03      	ldr	r3, [sp, #12]
 8012746:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012748:	1bdb      	subs	r3, r3, r7
 801274a:	4638      	mov	r0, r7
 801274c:	6013      	str	r3, [r2, #0]
 801274e:	b004      	add	sp, #16
 8012750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012754:	1c59      	adds	r1, r3, #1
 8012756:	9103      	str	r1, [sp, #12]
 8012758:	701a      	strb	r2, [r3, #0]
 801275a:	e7f0      	b.n	801273e <__cvt+0xa6>

0801275c <__exponent>:
 801275c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801275e:	4603      	mov	r3, r0
 8012760:	2900      	cmp	r1, #0
 8012762:	bfb8      	it	lt
 8012764:	4249      	neglt	r1, r1
 8012766:	f803 2b02 	strb.w	r2, [r3], #2
 801276a:	bfb4      	ite	lt
 801276c:	222d      	movlt	r2, #45	; 0x2d
 801276e:	222b      	movge	r2, #43	; 0x2b
 8012770:	2909      	cmp	r1, #9
 8012772:	7042      	strb	r2, [r0, #1]
 8012774:	dd2a      	ble.n	80127cc <__exponent+0x70>
 8012776:	f10d 0207 	add.w	r2, sp, #7
 801277a:	4617      	mov	r7, r2
 801277c:	260a      	movs	r6, #10
 801277e:	4694      	mov	ip, r2
 8012780:	fb91 f5f6 	sdiv	r5, r1, r6
 8012784:	fb06 1415 	mls	r4, r6, r5, r1
 8012788:	3430      	adds	r4, #48	; 0x30
 801278a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801278e:	460c      	mov	r4, r1
 8012790:	2c63      	cmp	r4, #99	; 0x63
 8012792:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8012796:	4629      	mov	r1, r5
 8012798:	dcf1      	bgt.n	801277e <__exponent+0x22>
 801279a:	3130      	adds	r1, #48	; 0x30
 801279c:	f1ac 0402 	sub.w	r4, ip, #2
 80127a0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80127a4:	1c41      	adds	r1, r0, #1
 80127a6:	4622      	mov	r2, r4
 80127a8:	42ba      	cmp	r2, r7
 80127aa:	d30a      	bcc.n	80127c2 <__exponent+0x66>
 80127ac:	f10d 0209 	add.w	r2, sp, #9
 80127b0:	eba2 020c 	sub.w	r2, r2, ip
 80127b4:	42bc      	cmp	r4, r7
 80127b6:	bf88      	it	hi
 80127b8:	2200      	movhi	r2, #0
 80127ba:	4413      	add	r3, r2
 80127bc:	1a18      	subs	r0, r3, r0
 80127be:	b003      	add	sp, #12
 80127c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127c2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80127c6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80127ca:	e7ed      	b.n	80127a8 <__exponent+0x4c>
 80127cc:	2330      	movs	r3, #48	; 0x30
 80127ce:	3130      	adds	r1, #48	; 0x30
 80127d0:	7083      	strb	r3, [r0, #2]
 80127d2:	70c1      	strb	r1, [r0, #3]
 80127d4:	1d03      	adds	r3, r0, #4
 80127d6:	e7f1      	b.n	80127bc <__exponent+0x60>

080127d8 <_printf_float>:
 80127d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127dc:	ed2d 8b02 	vpush	{d8}
 80127e0:	b08d      	sub	sp, #52	; 0x34
 80127e2:	460c      	mov	r4, r1
 80127e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80127e8:	4616      	mov	r6, r2
 80127ea:	461f      	mov	r7, r3
 80127ec:	4605      	mov	r5, r0
 80127ee:	f000 fdb7 	bl	8013360 <_localeconv_r>
 80127f2:	f8d0 a000 	ldr.w	sl, [r0]
 80127f6:	4650      	mov	r0, sl
 80127f8:	f7ed fd62 	bl	80002c0 <strlen>
 80127fc:	2300      	movs	r3, #0
 80127fe:	930a      	str	r3, [sp, #40]	; 0x28
 8012800:	6823      	ldr	r3, [r4, #0]
 8012802:	9305      	str	r3, [sp, #20]
 8012804:	f8d8 3000 	ldr.w	r3, [r8]
 8012808:	f894 b018 	ldrb.w	fp, [r4, #24]
 801280c:	3307      	adds	r3, #7
 801280e:	f023 0307 	bic.w	r3, r3, #7
 8012812:	f103 0208 	add.w	r2, r3, #8
 8012816:	f8c8 2000 	str.w	r2, [r8]
 801281a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801281e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012822:	9307      	str	r3, [sp, #28]
 8012824:	f8cd 8018 	str.w	r8, [sp, #24]
 8012828:	ee08 0a10 	vmov	s16, r0
 801282c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8012830:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012834:	4b9e      	ldr	r3, [pc, #632]	; (8012ab0 <_printf_float+0x2d8>)
 8012836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801283a:	f7ee f99f 	bl	8000b7c <__aeabi_dcmpun>
 801283e:	bb88      	cbnz	r0, 80128a4 <_printf_float+0xcc>
 8012840:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012844:	4b9a      	ldr	r3, [pc, #616]	; (8012ab0 <_printf_float+0x2d8>)
 8012846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801284a:	f7ee f979 	bl	8000b40 <__aeabi_dcmple>
 801284e:	bb48      	cbnz	r0, 80128a4 <_printf_float+0xcc>
 8012850:	2200      	movs	r2, #0
 8012852:	2300      	movs	r3, #0
 8012854:	4640      	mov	r0, r8
 8012856:	4649      	mov	r1, r9
 8012858:	f7ee f968 	bl	8000b2c <__aeabi_dcmplt>
 801285c:	b110      	cbz	r0, 8012864 <_printf_float+0x8c>
 801285e:	232d      	movs	r3, #45	; 0x2d
 8012860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012864:	4a93      	ldr	r2, [pc, #588]	; (8012ab4 <_printf_float+0x2dc>)
 8012866:	4b94      	ldr	r3, [pc, #592]	; (8012ab8 <_printf_float+0x2e0>)
 8012868:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801286c:	bf94      	ite	ls
 801286e:	4690      	movls	r8, r2
 8012870:	4698      	movhi	r8, r3
 8012872:	2303      	movs	r3, #3
 8012874:	6123      	str	r3, [r4, #16]
 8012876:	9b05      	ldr	r3, [sp, #20]
 8012878:	f023 0304 	bic.w	r3, r3, #4
 801287c:	6023      	str	r3, [r4, #0]
 801287e:	f04f 0900 	mov.w	r9, #0
 8012882:	9700      	str	r7, [sp, #0]
 8012884:	4633      	mov	r3, r6
 8012886:	aa0b      	add	r2, sp, #44	; 0x2c
 8012888:	4621      	mov	r1, r4
 801288a:	4628      	mov	r0, r5
 801288c:	f000 f9da 	bl	8012c44 <_printf_common>
 8012890:	3001      	adds	r0, #1
 8012892:	f040 8090 	bne.w	80129b6 <_printf_float+0x1de>
 8012896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801289a:	b00d      	add	sp, #52	; 0x34
 801289c:	ecbd 8b02 	vpop	{d8}
 80128a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128a4:	4642      	mov	r2, r8
 80128a6:	464b      	mov	r3, r9
 80128a8:	4640      	mov	r0, r8
 80128aa:	4649      	mov	r1, r9
 80128ac:	f7ee f966 	bl	8000b7c <__aeabi_dcmpun>
 80128b0:	b140      	cbz	r0, 80128c4 <_printf_float+0xec>
 80128b2:	464b      	mov	r3, r9
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	bfbc      	itt	lt
 80128b8:	232d      	movlt	r3, #45	; 0x2d
 80128ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80128be:	4a7f      	ldr	r2, [pc, #508]	; (8012abc <_printf_float+0x2e4>)
 80128c0:	4b7f      	ldr	r3, [pc, #508]	; (8012ac0 <_printf_float+0x2e8>)
 80128c2:	e7d1      	b.n	8012868 <_printf_float+0x90>
 80128c4:	6863      	ldr	r3, [r4, #4]
 80128c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80128ca:	9206      	str	r2, [sp, #24]
 80128cc:	1c5a      	adds	r2, r3, #1
 80128ce:	d13f      	bne.n	8012950 <_printf_float+0x178>
 80128d0:	2306      	movs	r3, #6
 80128d2:	6063      	str	r3, [r4, #4]
 80128d4:	9b05      	ldr	r3, [sp, #20]
 80128d6:	6861      	ldr	r1, [r4, #4]
 80128d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80128dc:	2300      	movs	r3, #0
 80128de:	9303      	str	r3, [sp, #12]
 80128e0:	ab0a      	add	r3, sp, #40	; 0x28
 80128e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80128e6:	ab09      	add	r3, sp, #36	; 0x24
 80128e8:	ec49 8b10 	vmov	d0, r8, r9
 80128ec:	9300      	str	r3, [sp, #0]
 80128ee:	6022      	str	r2, [r4, #0]
 80128f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80128f4:	4628      	mov	r0, r5
 80128f6:	f7ff fecf 	bl	8012698 <__cvt>
 80128fa:	9b06      	ldr	r3, [sp, #24]
 80128fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80128fe:	2b47      	cmp	r3, #71	; 0x47
 8012900:	4680      	mov	r8, r0
 8012902:	d108      	bne.n	8012916 <_printf_float+0x13e>
 8012904:	1cc8      	adds	r0, r1, #3
 8012906:	db02      	blt.n	801290e <_printf_float+0x136>
 8012908:	6863      	ldr	r3, [r4, #4]
 801290a:	4299      	cmp	r1, r3
 801290c:	dd41      	ble.n	8012992 <_printf_float+0x1ba>
 801290e:	f1ab 0302 	sub.w	r3, fp, #2
 8012912:	fa5f fb83 	uxtb.w	fp, r3
 8012916:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801291a:	d820      	bhi.n	801295e <_printf_float+0x186>
 801291c:	3901      	subs	r1, #1
 801291e:	465a      	mov	r2, fp
 8012920:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012924:	9109      	str	r1, [sp, #36]	; 0x24
 8012926:	f7ff ff19 	bl	801275c <__exponent>
 801292a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801292c:	1813      	adds	r3, r2, r0
 801292e:	2a01      	cmp	r2, #1
 8012930:	4681      	mov	r9, r0
 8012932:	6123      	str	r3, [r4, #16]
 8012934:	dc02      	bgt.n	801293c <_printf_float+0x164>
 8012936:	6822      	ldr	r2, [r4, #0]
 8012938:	07d2      	lsls	r2, r2, #31
 801293a:	d501      	bpl.n	8012940 <_printf_float+0x168>
 801293c:	3301      	adds	r3, #1
 801293e:	6123      	str	r3, [r4, #16]
 8012940:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012944:	2b00      	cmp	r3, #0
 8012946:	d09c      	beq.n	8012882 <_printf_float+0xaa>
 8012948:	232d      	movs	r3, #45	; 0x2d
 801294a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801294e:	e798      	b.n	8012882 <_printf_float+0xaa>
 8012950:	9a06      	ldr	r2, [sp, #24]
 8012952:	2a47      	cmp	r2, #71	; 0x47
 8012954:	d1be      	bne.n	80128d4 <_printf_float+0xfc>
 8012956:	2b00      	cmp	r3, #0
 8012958:	d1bc      	bne.n	80128d4 <_printf_float+0xfc>
 801295a:	2301      	movs	r3, #1
 801295c:	e7b9      	b.n	80128d2 <_printf_float+0xfa>
 801295e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012962:	d118      	bne.n	8012996 <_printf_float+0x1be>
 8012964:	2900      	cmp	r1, #0
 8012966:	6863      	ldr	r3, [r4, #4]
 8012968:	dd0b      	ble.n	8012982 <_printf_float+0x1aa>
 801296a:	6121      	str	r1, [r4, #16]
 801296c:	b913      	cbnz	r3, 8012974 <_printf_float+0x19c>
 801296e:	6822      	ldr	r2, [r4, #0]
 8012970:	07d0      	lsls	r0, r2, #31
 8012972:	d502      	bpl.n	801297a <_printf_float+0x1a2>
 8012974:	3301      	adds	r3, #1
 8012976:	440b      	add	r3, r1
 8012978:	6123      	str	r3, [r4, #16]
 801297a:	65a1      	str	r1, [r4, #88]	; 0x58
 801297c:	f04f 0900 	mov.w	r9, #0
 8012980:	e7de      	b.n	8012940 <_printf_float+0x168>
 8012982:	b913      	cbnz	r3, 801298a <_printf_float+0x1b2>
 8012984:	6822      	ldr	r2, [r4, #0]
 8012986:	07d2      	lsls	r2, r2, #31
 8012988:	d501      	bpl.n	801298e <_printf_float+0x1b6>
 801298a:	3302      	adds	r3, #2
 801298c:	e7f4      	b.n	8012978 <_printf_float+0x1a0>
 801298e:	2301      	movs	r3, #1
 8012990:	e7f2      	b.n	8012978 <_printf_float+0x1a0>
 8012992:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012998:	4299      	cmp	r1, r3
 801299a:	db05      	blt.n	80129a8 <_printf_float+0x1d0>
 801299c:	6823      	ldr	r3, [r4, #0]
 801299e:	6121      	str	r1, [r4, #16]
 80129a0:	07d8      	lsls	r0, r3, #31
 80129a2:	d5ea      	bpl.n	801297a <_printf_float+0x1a2>
 80129a4:	1c4b      	adds	r3, r1, #1
 80129a6:	e7e7      	b.n	8012978 <_printf_float+0x1a0>
 80129a8:	2900      	cmp	r1, #0
 80129aa:	bfd4      	ite	le
 80129ac:	f1c1 0202 	rsble	r2, r1, #2
 80129b0:	2201      	movgt	r2, #1
 80129b2:	4413      	add	r3, r2
 80129b4:	e7e0      	b.n	8012978 <_printf_float+0x1a0>
 80129b6:	6823      	ldr	r3, [r4, #0]
 80129b8:	055a      	lsls	r2, r3, #21
 80129ba:	d407      	bmi.n	80129cc <_printf_float+0x1f4>
 80129bc:	6923      	ldr	r3, [r4, #16]
 80129be:	4642      	mov	r2, r8
 80129c0:	4631      	mov	r1, r6
 80129c2:	4628      	mov	r0, r5
 80129c4:	47b8      	blx	r7
 80129c6:	3001      	adds	r0, #1
 80129c8:	d12c      	bne.n	8012a24 <_printf_float+0x24c>
 80129ca:	e764      	b.n	8012896 <_printf_float+0xbe>
 80129cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80129d0:	f240 80e0 	bls.w	8012b94 <_printf_float+0x3bc>
 80129d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80129d8:	2200      	movs	r2, #0
 80129da:	2300      	movs	r3, #0
 80129dc:	f7ee f89c 	bl	8000b18 <__aeabi_dcmpeq>
 80129e0:	2800      	cmp	r0, #0
 80129e2:	d034      	beq.n	8012a4e <_printf_float+0x276>
 80129e4:	4a37      	ldr	r2, [pc, #220]	; (8012ac4 <_printf_float+0x2ec>)
 80129e6:	2301      	movs	r3, #1
 80129e8:	4631      	mov	r1, r6
 80129ea:	4628      	mov	r0, r5
 80129ec:	47b8      	blx	r7
 80129ee:	3001      	adds	r0, #1
 80129f0:	f43f af51 	beq.w	8012896 <_printf_float+0xbe>
 80129f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80129f8:	429a      	cmp	r2, r3
 80129fa:	db02      	blt.n	8012a02 <_printf_float+0x22a>
 80129fc:	6823      	ldr	r3, [r4, #0]
 80129fe:	07d8      	lsls	r0, r3, #31
 8012a00:	d510      	bpl.n	8012a24 <_printf_float+0x24c>
 8012a02:	ee18 3a10 	vmov	r3, s16
 8012a06:	4652      	mov	r2, sl
 8012a08:	4631      	mov	r1, r6
 8012a0a:	4628      	mov	r0, r5
 8012a0c:	47b8      	blx	r7
 8012a0e:	3001      	adds	r0, #1
 8012a10:	f43f af41 	beq.w	8012896 <_printf_float+0xbe>
 8012a14:	f04f 0800 	mov.w	r8, #0
 8012a18:	f104 091a 	add.w	r9, r4, #26
 8012a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a1e:	3b01      	subs	r3, #1
 8012a20:	4543      	cmp	r3, r8
 8012a22:	dc09      	bgt.n	8012a38 <_printf_float+0x260>
 8012a24:	6823      	ldr	r3, [r4, #0]
 8012a26:	079b      	lsls	r3, r3, #30
 8012a28:	f100 8107 	bmi.w	8012c3a <_printf_float+0x462>
 8012a2c:	68e0      	ldr	r0, [r4, #12]
 8012a2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a30:	4298      	cmp	r0, r3
 8012a32:	bfb8      	it	lt
 8012a34:	4618      	movlt	r0, r3
 8012a36:	e730      	b.n	801289a <_printf_float+0xc2>
 8012a38:	2301      	movs	r3, #1
 8012a3a:	464a      	mov	r2, r9
 8012a3c:	4631      	mov	r1, r6
 8012a3e:	4628      	mov	r0, r5
 8012a40:	47b8      	blx	r7
 8012a42:	3001      	adds	r0, #1
 8012a44:	f43f af27 	beq.w	8012896 <_printf_float+0xbe>
 8012a48:	f108 0801 	add.w	r8, r8, #1
 8012a4c:	e7e6      	b.n	8012a1c <_printf_float+0x244>
 8012a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	dc39      	bgt.n	8012ac8 <_printf_float+0x2f0>
 8012a54:	4a1b      	ldr	r2, [pc, #108]	; (8012ac4 <_printf_float+0x2ec>)
 8012a56:	2301      	movs	r3, #1
 8012a58:	4631      	mov	r1, r6
 8012a5a:	4628      	mov	r0, r5
 8012a5c:	47b8      	blx	r7
 8012a5e:	3001      	adds	r0, #1
 8012a60:	f43f af19 	beq.w	8012896 <_printf_float+0xbe>
 8012a64:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012a68:	4313      	orrs	r3, r2
 8012a6a:	d102      	bne.n	8012a72 <_printf_float+0x29a>
 8012a6c:	6823      	ldr	r3, [r4, #0]
 8012a6e:	07d9      	lsls	r1, r3, #31
 8012a70:	d5d8      	bpl.n	8012a24 <_printf_float+0x24c>
 8012a72:	ee18 3a10 	vmov	r3, s16
 8012a76:	4652      	mov	r2, sl
 8012a78:	4631      	mov	r1, r6
 8012a7a:	4628      	mov	r0, r5
 8012a7c:	47b8      	blx	r7
 8012a7e:	3001      	adds	r0, #1
 8012a80:	f43f af09 	beq.w	8012896 <_printf_float+0xbe>
 8012a84:	f04f 0900 	mov.w	r9, #0
 8012a88:	f104 0a1a 	add.w	sl, r4, #26
 8012a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a8e:	425b      	negs	r3, r3
 8012a90:	454b      	cmp	r3, r9
 8012a92:	dc01      	bgt.n	8012a98 <_printf_float+0x2c0>
 8012a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a96:	e792      	b.n	80129be <_printf_float+0x1e6>
 8012a98:	2301      	movs	r3, #1
 8012a9a:	4652      	mov	r2, sl
 8012a9c:	4631      	mov	r1, r6
 8012a9e:	4628      	mov	r0, r5
 8012aa0:	47b8      	blx	r7
 8012aa2:	3001      	adds	r0, #1
 8012aa4:	f43f aef7 	beq.w	8012896 <_printf_float+0xbe>
 8012aa8:	f109 0901 	add.w	r9, r9, #1
 8012aac:	e7ee      	b.n	8012a8c <_printf_float+0x2b4>
 8012aae:	bf00      	nop
 8012ab0:	7fefffff 	.word	0x7fefffff
 8012ab4:	08015688 	.word	0x08015688
 8012ab8:	0801568c 	.word	0x0801568c
 8012abc:	08015690 	.word	0x08015690
 8012ac0:	08015694 	.word	0x08015694
 8012ac4:	08015698 	.word	0x08015698
 8012ac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012aca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012acc:	429a      	cmp	r2, r3
 8012ace:	bfa8      	it	ge
 8012ad0:	461a      	movge	r2, r3
 8012ad2:	2a00      	cmp	r2, #0
 8012ad4:	4691      	mov	r9, r2
 8012ad6:	dc37      	bgt.n	8012b48 <_printf_float+0x370>
 8012ad8:	f04f 0b00 	mov.w	fp, #0
 8012adc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012ae0:	f104 021a 	add.w	r2, r4, #26
 8012ae4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012ae6:	9305      	str	r3, [sp, #20]
 8012ae8:	eba3 0309 	sub.w	r3, r3, r9
 8012aec:	455b      	cmp	r3, fp
 8012aee:	dc33      	bgt.n	8012b58 <_printf_float+0x380>
 8012af0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012af4:	429a      	cmp	r2, r3
 8012af6:	db3b      	blt.n	8012b70 <_printf_float+0x398>
 8012af8:	6823      	ldr	r3, [r4, #0]
 8012afa:	07da      	lsls	r2, r3, #31
 8012afc:	d438      	bmi.n	8012b70 <_printf_float+0x398>
 8012afe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012b02:	eba2 0903 	sub.w	r9, r2, r3
 8012b06:	9b05      	ldr	r3, [sp, #20]
 8012b08:	1ad2      	subs	r2, r2, r3
 8012b0a:	4591      	cmp	r9, r2
 8012b0c:	bfa8      	it	ge
 8012b0e:	4691      	movge	r9, r2
 8012b10:	f1b9 0f00 	cmp.w	r9, #0
 8012b14:	dc35      	bgt.n	8012b82 <_printf_float+0x3aa>
 8012b16:	f04f 0800 	mov.w	r8, #0
 8012b1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012b1e:	f104 0a1a 	add.w	sl, r4, #26
 8012b22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012b26:	1a9b      	subs	r3, r3, r2
 8012b28:	eba3 0309 	sub.w	r3, r3, r9
 8012b2c:	4543      	cmp	r3, r8
 8012b2e:	f77f af79 	ble.w	8012a24 <_printf_float+0x24c>
 8012b32:	2301      	movs	r3, #1
 8012b34:	4652      	mov	r2, sl
 8012b36:	4631      	mov	r1, r6
 8012b38:	4628      	mov	r0, r5
 8012b3a:	47b8      	blx	r7
 8012b3c:	3001      	adds	r0, #1
 8012b3e:	f43f aeaa 	beq.w	8012896 <_printf_float+0xbe>
 8012b42:	f108 0801 	add.w	r8, r8, #1
 8012b46:	e7ec      	b.n	8012b22 <_printf_float+0x34a>
 8012b48:	4613      	mov	r3, r2
 8012b4a:	4631      	mov	r1, r6
 8012b4c:	4642      	mov	r2, r8
 8012b4e:	4628      	mov	r0, r5
 8012b50:	47b8      	blx	r7
 8012b52:	3001      	adds	r0, #1
 8012b54:	d1c0      	bne.n	8012ad8 <_printf_float+0x300>
 8012b56:	e69e      	b.n	8012896 <_printf_float+0xbe>
 8012b58:	2301      	movs	r3, #1
 8012b5a:	4631      	mov	r1, r6
 8012b5c:	4628      	mov	r0, r5
 8012b5e:	9205      	str	r2, [sp, #20]
 8012b60:	47b8      	blx	r7
 8012b62:	3001      	adds	r0, #1
 8012b64:	f43f ae97 	beq.w	8012896 <_printf_float+0xbe>
 8012b68:	9a05      	ldr	r2, [sp, #20]
 8012b6a:	f10b 0b01 	add.w	fp, fp, #1
 8012b6e:	e7b9      	b.n	8012ae4 <_printf_float+0x30c>
 8012b70:	ee18 3a10 	vmov	r3, s16
 8012b74:	4652      	mov	r2, sl
 8012b76:	4631      	mov	r1, r6
 8012b78:	4628      	mov	r0, r5
 8012b7a:	47b8      	blx	r7
 8012b7c:	3001      	adds	r0, #1
 8012b7e:	d1be      	bne.n	8012afe <_printf_float+0x326>
 8012b80:	e689      	b.n	8012896 <_printf_float+0xbe>
 8012b82:	9a05      	ldr	r2, [sp, #20]
 8012b84:	464b      	mov	r3, r9
 8012b86:	4442      	add	r2, r8
 8012b88:	4631      	mov	r1, r6
 8012b8a:	4628      	mov	r0, r5
 8012b8c:	47b8      	blx	r7
 8012b8e:	3001      	adds	r0, #1
 8012b90:	d1c1      	bne.n	8012b16 <_printf_float+0x33e>
 8012b92:	e680      	b.n	8012896 <_printf_float+0xbe>
 8012b94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b96:	2a01      	cmp	r2, #1
 8012b98:	dc01      	bgt.n	8012b9e <_printf_float+0x3c6>
 8012b9a:	07db      	lsls	r3, r3, #31
 8012b9c:	d53a      	bpl.n	8012c14 <_printf_float+0x43c>
 8012b9e:	2301      	movs	r3, #1
 8012ba0:	4642      	mov	r2, r8
 8012ba2:	4631      	mov	r1, r6
 8012ba4:	4628      	mov	r0, r5
 8012ba6:	47b8      	blx	r7
 8012ba8:	3001      	adds	r0, #1
 8012baa:	f43f ae74 	beq.w	8012896 <_printf_float+0xbe>
 8012bae:	ee18 3a10 	vmov	r3, s16
 8012bb2:	4652      	mov	r2, sl
 8012bb4:	4631      	mov	r1, r6
 8012bb6:	4628      	mov	r0, r5
 8012bb8:	47b8      	blx	r7
 8012bba:	3001      	adds	r0, #1
 8012bbc:	f43f ae6b 	beq.w	8012896 <_printf_float+0xbe>
 8012bc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8012bcc:	f7ed ffa4 	bl	8000b18 <__aeabi_dcmpeq>
 8012bd0:	b9d8      	cbnz	r0, 8012c0a <_printf_float+0x432>
 8012bd2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8012bd6:	f108 0201 	add.w	r2, r8, #1
 8012bda:	4631      	mov	r1, r6
 8012bdc:	4628      	mov	r0, r5
 8012bde:	47b8      	blx	r7
 8012be0:	3001      	adds	r0, #1
 8012be2:	d10e      	bne.n	8012c02 <_printf_float+0x42a>
 8012be4:	e657      	b.n	8012896 <_printf_float+0xbe>
 8012be6:	2301      	movs	r3, #1
 8012be8:	4652      	mov	r2, sl
 8012bea:	4631      	mov	r1, r6
 8012bec:	4628      	mov	r0, r5
 8012bee:	47b8      	blx	r7
 8012bf0:	3001      	adds	r0, #1
 8012bf2:	f43f ae50 	beq.w	8012896 <_printf_float+0xbe>
 8012bf6:	f108 0801 	add.w	r8, r8, #1
 8012bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bfc:	3b01      	subs	r3, #1
 8012bfe:	4543      	cmp	r3, r8
 8012c00:	dcf1      	bgt.n	8012be6 <_printf_float+0x40e>
 8012c02:	464b      	mov	r3, r9
 8012c04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012c08:	e6da      	b.n	80129c0 <_printf_float+0x1e8>
 8012c0a:	f04f 0800 	mov.w	r8, #0
 8012c0e:	f104 0a1a 	add.w	sl, r4, #26
 8012c12:	e7f2      	b.n	8012bfa <_printf_float+0x422>
 8012c14:	2301      	movs	r3, #1
 8012c16:	4642      	mov	r2, r8
 8012c18:	e7df      	b.n	8012bda <_printf_float+0x402>
 8012c1a:	2301      	movs	r3, #1
 8012c1c:	464a      	mov	r2, r9
 8012c1e:	4631      	mov	r1, r6
 8012c20:	4628      	mov	r0, r5
 8012c22:	47b8      	blx	r7
 8012c24:	3001      	adds	r0, #1
 8012c26:	f43f ae36 	beq.w	8012896 <_printf_float+0xbe>
 8012c2a:	f108 0801 	add.w	r8, r8, #1
 8012c2e:	68e3      	ldr	r3, [r4, #12]
 8012c30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012c32:	1a5b      	subs	r3, r3, r1
 8012c34:	4543      	cmp	r3, r8
 8012c36:	dcf0      	bgt.n	8012c1a <_printf_float+0x442>
 8012c38:	e6f8      	b.n	8012a2c <_printf_float+0x254>
 8012c3a:	f04f 0800 	mov.w	r8, #0
 8012c3e:	f104 0919 	add.w	r9, r4, #25
 8012c42:	e7f4      	b.n	8012c2e <_printf_float+0x456>

08012c44 <_printf_common>:
 8012c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c48:	4616      	mov	r6, r2
 8012c4a:	4699      	mov	r9, r3
 8012c4c:	688a      	ldr	r2, [r1, #8]
 8012c4e:	690b      	ldr	r3, [r1, #16]
 8012c50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012c54:	4293      	cmp	r3, r2
 8012c56:	bfb8      	it	lt
 8012c58:	4613      	movlt	r3, r2
 8012c5a:	6033      	str	r3, [r6, #0]
 8012c5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012c60:	4607      	mov	r7, r0
 8012c62:	460c      	mov	r4, r1
 8012c64:	b10a      	cbz	r2, 8012c6a <_printf_common+0x26>
 8012c66:	3301      	adds	r3, #1
 8012c68:	6033      	str	r3, [r6, #0]
 8012c6a:	6823      	ldr	r3, [r4, #0]
 8012c6c:	0699      	lsls	r1, r3, #26
 8012c6e:	bf42      	ittt	mi
 8012c70:	6833      	ldrmi	r3, [r6, #0]
 8012c72:	3302      	addmi	r3, #2
 8012c74:	6033      	strmi	r3, [r6, #0]
 8012c76:	6825      	ldr	r5, [r4, #0]
 8012c78:	f015 0506 	ands.w	r5, r5, #6
 8012c7c:	d106      	bne.n	8012c8c <_printf_common+0x48>
 8012c7e:	f104 0a19 	add.w	sl, r4, #25
 8012c82:	68e3      	ldr	r3, [r4, #12]
 8012c84:	6832      	ldr	r2, [r6, #0]
 8012c86:	1a9b      	subs	r3, r3, r2
 8012c88:	42ab      	cmp	r3, r5
 8012c8a:	dc26      	bgt.n	8012cda <_printf_common+0x96>
 8012c8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012c90:	1e13      	subs	r3, r2, #0
 8012c92:	6822      	ldr	r2, [r4, #0]
 8012c94:	bf18      	it	ne
 8012c96:	2301      	movne	r3, #1
 8012c98:	0692      	lsls	r2, r2, #26
 8012c9a:	d42b      	bmi.n	8012cf4 <_printf_common+0xb0>
 8012c9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012ca0:	4649      	mov	r1, r9
 8012ca2:	4638      	mov	r0, r7
 8012ca4:	47c0      	blx	r8
 8012ca6:	3001      	adds	r0, #1
 8012ca8:	d01e      	beq.n	8012ce8 <_printf_common+0xa4>
 8012caa:	6823      	ldr	r3, [r4, #0]
 8012cac:	6922      	ldr	r2, [r4, #16]
 8012cae:	f003 0306 	and.w	r3, r3, #6
 8012cb2:	2b04      	cmp	r3, #4
 8012cb4:	bf02      	ittt	eq
 8012cb6:	68e5      	ldreq	r5, [r4, #12]
 8012cb8:	6833      	ldreq	r3, [r6, #0]
 8012cba:	1aed      	subeq	r5, r5, r3
 8012cbc:	68a3      	ldr	r3, [r4, #8]
 8012cbe:	bf0c      	ite	eq
 8012cc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012cc4:	2500      	movne	r5, #0
 8012cc6:	4293      	cmp	r3, r2
 8012cc8:	bfc4      	itt	gt
 8012cca:	1a9b      	subgt	r3, r3, r2
 8012ccc:	18ed      	addgt	r5, r5, r3
 8012cce:	2600      	movs	r6, #0
 8012cd0:	341a      	adds	r4, #26
 8012cd2:	42b5      	cmp	r5, r6
 8012cd4:	d11a      	bne.n	8012d0c <_printf_common+0xc8>
 8012cd6:	2000      	movs	r0, #0
 8012cd8:	e008      	b.n	8012cec <_printf_common+0xa8>
 8012cda:	2301      	movs	r3, #1
 8012cdc:	4652      	mov	r2, sl
 8012cde:	4649      	mov	r1, r9
 8012ce0:	4638      	mov	r0, r7
 8012ce2:	47c0      	blx	r8
 8012ce4:	3001      	adds	r0, #1
 8012ce6:	d103      	bne.n	8012cf0 <_printf_common+0xac>
 8012ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cf0:	3501      	adds	r5, #1
 8012cf2:	e7c6      	b.n	8012c82 <_printf_common+0x3e>
 8012cf4:	18e1      	adds	r1, r4, r3
 8012cf6:	1c5a      	adds	r2, r3, #1
 8012cf8:	2030      	movs	r0, #48	; 0x30
 8012cfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012cfe:	4422      	add	r2, r4
 8012d00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012d04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012d08:	3302      	adds	r3, #2
 8012d0a:	e7c7      	b.n	8012c9c <_printf_common+0x58>
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	4622      	mov	r2, r4
 8012d10:	4649      	mov	r1, r9
 8012d12:	4638      	mov	r0, r7
 8012d14:	47c0      	blx	r8
 8012d16:	3001      	adds	r0, #1
 8012d18:	d0e6      	beq.n	8012ce8 <_printf_common+0xa4>
 8012d1a:	3601      	adds	r6, #1
 8012d1c:	e7d9      	b.n	8012cd2 <_printf_common+0x8e>
	...

08012d20 <_printf_i>:
 8012d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012d24:	7e0f      	ldrb	r7, [r1, #24]
 8012d26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012d28:	2f78      	cmp	r7, #120	; 0x78
 8012d2a:	4691      	mov	r9, r2
 8012d2c:	4680      	mov	r8, r0
 8012d2e:	460c      	mov	r4, r1
 8012d30:	469a      	mov	sl, r3
 8012d32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012d36:	d807      	bhi.n	8012d48 <_printf_i+0x28>
 8012d38:	2f62      	cmp	r7, #98	; 0x62
 8012d3a:	d80a      	bhi.n	8012d52 <_printf_i+0x32>
 8012d3c:	2f00      	cmp	r7, #0
 8012d3e:	f000 80d4 	beq.w	8012eea <_printf_i+0x1ca>
 8012d42:	2f58      	cmp	r7, #88	; 0x58
 8012d44:	f000 80c0 	beq.w	8012ec8 <_printf_i+0x1a8>
 8012d48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012d4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012d50:	e03a      	b.n	8012dc8 <_printf_i+0xa8>
 8012d52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012d56:	2b15      	cmp	r3, #21
 8012d58:	d8f6      	bhi.n	8012d48 <_printf_i+0x28>
 8012d5a:	a101      	add	r1, pc, #4	; (adr r1, 8012d60 <_printf_i+0x40>)
 8012d5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012d60:	08012db9 	.word	0x08012db9
 8012d64:	08012dcd 	.word	0x08012dcd
 8012d68:	08012d49 	.word	0x08012d49
 8012d6c:	08012d49 	.word	0x08012d49
 8012d70:	08012d49 	.word	0x08012d49
 8012d74:	08012d49 	.word	0x08012d49
 8012d78:	08012dcd 	.word	0x08012dcd
 8012d7c:	08012d49 	.word	0x08012d49
 8012d80:	08012d49 	.word	0x08012d49
 8012d84:	08012d49 	.word	0x08012d49
 8012d88:	08012d49 	.word	0x08012d49
 8012d8c:	08012ed1 	.word	0x08012ed1
 8012d90:	08012df9 	.word	0x08012df9
 8012d94:	08012e8b 	.word	0x08012e8b
 8012d98:	08012d49 	.word	0x08012d49
 8012d9c:	08012d49 	.word	0x08012d49
 8012da0:	08012ef3 	.word	0x08012ef3
 8012da4:	08012d49 	.word	0x08012d49
 8012da8:	08012df9 	.word	0x08012df9
 8012dac:	08012d49 	.word	0x08012d49
 8012db0:	08012d49 	.word	0x08012d49
 8012db4:	08012e93 	.word	0x08012e93
 8012db8:	682b      	ldr	r3, [r5, #0]
 8012dba:	1d1a      	adds	r2, r3, #4
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	602a      	str	r2, [r5, #0]
 8012dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012dc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012dc8:	2301      	movs	r3, #1
 8012dca:	e09f      	b.n	8012f0c <_printf_i+0x1ec>
 8012dcc:	6820      	ldr	r0, [r4, #0]
 8012dce:	682b      	ldr	r3, [r5, #0]
 8012dd0:	0607      	lsls	r7, r0, #24
 8012dd2:	f103 0104 	add.w	r1, r3, #4
 8012dd6:	6029      	str	r1, [r5, #0]
 8012dd8:	d501      	bpl.n	8012dde <_printf_i+0xbe>
 8012dda:	681e      	ldr	r6, [r3, #0]
 8012ddc:	e003      	b.n	8012de6 <_printf_i+0xc6>
 8012dde:	0646      	lsls	r6, r0, #25
 8012de0:	d5fb      	bpl.n	8012dda <_printf_i+0xba>
 8012de2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012de6:	2e00      	cmp	r6, #0
 8012de8:	da03      	bge.n	8012df2 <_printf_i+0xd2>
 8012dea:	232d      	movs	r3, #45	; 0x2d
 8012dec:	4276      	negs	r6, r6
 8012dee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012df2:	485a      	ldr	r0, [pc, #360]	; (8012f5c <_printf_i+0x23c>)
 8012df4:	230a      	movs	r3, #10
 8012df6:	e012      	b.n	8012e1e <_printf_i+0xfe>
 8012df8:	682b      	ldr	r3, [r5, #0]
 8012dfa:	6820      	ldr	r0, [r4, #0]
 8012dfc:	1d19      	adds	r1, r3, #4
 8012dfe:	6029      	str	r1, [r5, #0]
 8012e00:	0605      	lsls	r5, r0, #24
 8012e02:	d501      	bpl.n	8012e08 <_printf_i+0xe8>
 8012e04:	681e      	ldr	r6, [r3, #0]
 8012e06:	e002      	b.n	8012e0e <_printf_i+0xee>
 8012e08:	0641      	lsls	r1, r0, #25
 8012e0a:	d5fb      	bpl.n	8012e04 <_printf_i+0xe4>
 8012e0c:	881e      	ldrh	r6, [r3, #0]
 8012e0e:	4853      	ldr	r0, [pc, #332]	; (8012f5c <_printf_i+0x23c>)
 8012e10:	2f6f      	cmp	r7, #111	; 0x6f
 8012e12:	bf0c      	ite	eq
 8012e14:	2308      	moveq	r3, #8
 8012e16:	230a      	movne	r3, #10
 8012e18:	2100      	movs	r1, #0
 8012e1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012e1e:	6865      	ldr	r5, [r4, #4]
 8012e20:	60a5      	str	r5, [r4, #8]
 8012e22:	2d00      	cmp	r5, #0
 8012e24:	bfa2      	ittt	ge
 8012e26:	6821      	ldrge	r1, [r4, #0]
 8012e28:	f021 0104 	bicge.w	r1, r1, #4
 8012e2c:	6021      	strge	r1, [r4, #0]
 8012e2e:	b90e      	cbnz	r6, 8012e34 <_printf_i+0x114>
 8012e30:	2d00      	cmp	r5, #0
 8012e32:	d04b      	beq.n	8012ecc <_printf_i+0x1ac>
 8012e34:	4615      	mov	r5, r2
 8012e36:	fbb6 f1f3 	udiv	r1, r6, r3
 8012e3a:	fb03 6711 	mls	r7, r3, r1, r6
 8012e3e:	5dc7      	ldrb	r7, [r0, r7]
 8012e40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012e44:	4637      	mov	r7, r6
 8012e46:	42bb      	cmp	r3, r7
 8012e48:	460e      	mov	r6, r1
 8012e4a:	d9f4      	bls.n	8012e36 <_printf_i+0x116>
 8012e4c:	2b08      	cmp	r3, #8
 8012e4e:	d10b      	bne.n	8012e68 <_printf_i+0x148>
 8012e50:	6823      	ldr	r3, [r4, #0]
 8012e52:	07de      	lsls	r6, r3, #31
 8012e54:	d508      	bpl.n	8012e68 <_printf_i+0x148>
 8012e56:	6923      	ldr	r3, [r4, #16]
 8012e58:	6861      	ldr	r1, [r4, #4]
 8012e5a:	4299      	cmp	r1, r3
 8012e5c:	bfde      	ittt	le
 8012e5e:	2330      	movle	r3, #48	; 0x30
 8012e60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012e64:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012e68:	1b52      	subs	r2, r2, r5
 8012e6a:	6122      	str	r2, [r4, #16]
 8012e6c:	f8cd a000 	str.w	sl, [sp]
 8012e70:	464b      	mov	r3, r9
 8012e72:	aa03      	add	r2, sp, #12
 8012e74:	4621      	mov	r1, r4
 8012e76:	4640      	mov	r0, r8
 8012e78:	f7ff fee4 	bl	8012c44 <_printf_common>
 8012e7c:	3001      	adds	r0, #1
 8012e7e:	d14a      	bne.n	8012f16 <_printf_i+0x1f6>
 8012e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e84:	b004      	add	sp, #16
 8012e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e8a:	6823      	ldr	r3, [r4, #0]
 8012e8c:	f043 0320 	orr.w	r3, r3, #32
 8012e90:	6023      	str	r3, [r4, #0]
 8012e92:	4833      	ldr	r0, [pc, #204]	; (8012f60 <_printf_i+0x240>)
 8012e94:	2778      	movs	r7, #120	; 0x78
 8012e96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012e9a:	6823      	ldr	r3, [r4, #0]
 8012e9c:	6829      	ldr	r1, [r5, #0]
 8012e9e:	061f      	lsls	r7, r3, #24
 8012ea0:	f851 6b04 	ldr.w	r6, [r1], #4
 8012ea4:	d402      	bmi.n	8012eac <_printf_i+0x18c>
 8012ea6:	065f      	lsls	r7, r3, #25
 8012ea8:	bf48      	it	mi
 8012eaa:	b2b6      	uxthmi	r6, r6
 8012eac:	07df      	lsls	r7, r3, #31
 8012eae:	bf48      	it	mi
 8012eb0:	f043 0320 	orrmi.w	r3, r3, #32
 8012eb4:	6029      	str	r1, [r5, #0]
 8012eb6:	bf48      	it	mi
 8012eb8:	6023      	strmi	r3, [r4, #0]
 8012eba:	b91e      	cbnz	r6, 8012ec4 <_printf_i+0x1a4>
 8012ebc:	6823      	ldr	r3, [r4, #0]
 8012ebe:	f023 0320 	bic.w	r3, r3, #32
 8012ec2:	6023      	str	r3, [r4, #0]
 8012ec4:	2310      	movs	r3, #16
 8012ec6:	e7a7      	b.n	8012e18 <_printf_i+0xf8>
 8012ec8:	4824      	ldr	r0, [pc, #144]	; (8012f5c <_printf_i+0x23c>)
 8012eca:	e7e4      	b.n	8012e96 <_printf_i+0x176>
 8012ecc:	4615      	mov	r5, r2
 8012ece:	e7bd      	b.n	8012e4c <_printf_i+0x12c>
 8012ed0:	682b      	ldr	r3, [r5, #0]
 8012ed2:	6826      	ldr	r6, [r4, #0]
 8012ed4:	6961      	ldr	r1, [r4, #20]
 8012ed6:	1d18      	adds	r0, r3, #4
 8012ed8:	6028      	str	r0, [r5, #0]
 8012eda:	0635      	lsls	r5, r6, #24
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	d501      	bpl.n	8012ee4 <_printf_i+0x1c4>
 8012ee0:	6019      	str	r1, [r3, #0]
 8012ee2:	e002      	b.n	8012eea <_printf_i+0x1ca>
 8012ee4:	0670      	lsls	r0, r6, #25
 8012ee6:	d5fb      	bpl.n	8012ee0 <_printf_i+0x1c0>
 8012ee8:	8019      	strh	r1, [r3, #0]
 8012eea:	2300      	movs	r3, #0
 8012eec:	6123      	str	r3, [r4, #16]
 8012eee:	4615      	mov	r5, r2
 8012ef0:	e7bc      	b.n	8012e6c <_printf_i+0x14c>
 8012ef2:	682b      	ldr	r3, [r5, #0]
 8012ef4:	1d1a      	adds	r2, r3, #4
 8012ef6:	602a      	str	r2, [r5, #0]
 8012ef8:	681d      	ldr	r5, [r3, #0]
 8012efa:	6862      	ldr	r2, [r4, #4]
 8012efc:	2100      	movs	r1, #0
 8012efe:	4628      	mov	r0, r5
 8012f00:	f7ed f98e 	bl	8000220 <memchr>
 8012f04:	b108      	cbz	r0, 8012f0a <_printf_i+0x1ea>
 8012f06:	1b40      	subs	r0, r0, r5
 8012f08:	6060      	str	r0, [r4, #4]
 8012f0a:	6863      	ldr	r3, [r4, #4]
 8012f0c:	6123      	str	r3, [r4, #16]
 8012f0e:	2300      	movs	r3, #0
 8012f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f14:	e7aa      	b.n	8012e6c <_printf_i+0x14c>
 8012f16:	6923      	ldr	r3, [r4, #16]
 8012f18:	462a      	mov	r2, r5
 8012f1a:	4649      	mov	r1, r9
 8012f1c:	4640      	mov	r0, r8
 8012f1e:	47d0      	blx	sl
 8012f20:	3001      	adds	r0, #1
 8012f22:	d0ad      	beq.n	8012e80 <_printf_i+0x160>
 8012f24:	6823      	ldr	r3, [r4, #0]
 8012f26:	079b      	lsls	r3, r3, #30
 8012f28:	d413      	bmi.n	8012f52 <_printf_i+0x232>
 8012f2a:	68e0      	ldr	r0, [r4, #12]
 8012f2c:	9b03      	ldr	r3, [sp, #12]
 8012f2e:	4298      	cmp	r0, r3
 8012f30:	bfb8      	it	lt
 8012f32:	4618      	movlt	r0, r3
 8012f34:	e7a6      	b.n	8012e84 <_printf_i+0x164>
 8012f36:	2301      	movs	r3, #1
 8012f38:	4632      	mov	r2, r6
 8012f3a:	4649      	mov	r1, r9
 8012f3c:	4640      	mov	r0, r8
 8012f3e:	47d0      	blx	sl
 8012f40:	3001      	adds	r0, #1
 8012f42:	d09d      	beq.n	8012e80 <_printf_i+0x160>
 8012f44:	3501      	adds	r5, #1
 8012f46:	68e3      	ldr	r3, [r4, #12]
 8012f48:	9903      	ldr	r1, [sp, #12]
 8012f4a:	1a5b      	subs	r3, r3, r1
 8012f4c:	42ab      	cmp	r3, r5
 8012f4e:	dcf2      	bgt.n	8012f36 <_printf_i+0x216>
 8012f50:	e7eb      	b.n	8012f2a <_printf_i+0x20a>
 8012f52:	2500      	movs	r5, #0
 8012f54:	f104 0619 	add.w	r6, r4, #25
 8012f58:	e7f5      	b.n	8012f46 <_printf_i+0x226>
 8012f5a:	bf00      	nop
 8012f5c:	0801569a 	.word	0x0801569a
 8012f60:	080156ab 	.word	0x080156ab

08012f64 <std>:
 8012f64:	2300      	movs	r3, #0
 8012f66:	b510      	push	{r4, lr}
 8012f68:	4604      	mov	r4, r0
 8012f6a:	e9c0 3300 	strd	r3, r3, [r0]
 8012f6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012f72:	6083      	str	r3, [r0, #8]
 8012f74:	8181      	strh	r1, [r0, #12]
 8012f76:	6643      	str	r3, [r0, #100]	; 0x64
 8012f78:	81c2      	strh	r2, [r0, #14]
 8012f7a:	6183      	str	r3, [r0, #24]
 8012f7c:	4619      	mov	r1, r3
 8012f7e:	2208      	movs	r2, #8
 8012f80:	305c      	adds	r0, #92	; 0x5c
 8012f82:	f000 f9e5 	bl	8013350 <memset>
 8012f86:	4b05      	ldr	r3, [pc, #20]	; (8012f9c <std+0x38>)
 8012f88:	6263      	str	r3, [r4, #36]	; 0x24
 8012f8a:	4b05      	ldr	r3, [pc, #20]	; (8012fa0 <std+0x3c>)
 8012f8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8012f8e:	4b05      	ldr	r3, [pc, #20]	; (8012fa4 <std+0x40>)
 8012f90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012f92:	4b05      	ldr	r3, [pc, #20]	; (8012fa8 <std+0x44>)
 8012f94:	6224      	str	r4, [r4, #32]
 8012f96:	6323      	str	r3, [r4, #48]	; 0x30
 8012f98:	bd10      	pop	{r4, pc}
 8012f9a:	bf00      	nop
 8012f9c:	080131a1 	.word	0x080131a1
 8012fa0:	080131c3 	.word	0x080131c3
 8012fa4:	080131fb 	.word	0x080131fb
 8012fa8:	0801321f 	.word	0x0801321f

08012fac <stdio_exit_handler>:
 8012fac:	4a02      	ldr	r2, [pc, #8]	; (8012fb8 <stdio_exit_handler+0xc>)
 8012fae:	4903      	ldr	r1, [pc, #12]	; (8012fbc <stdio_exit_handler+0x10>)
 8012fb0:	4803      	ldr	r0, [pc, #12]	; (8012fc0 <stdio_exit_handler+0x14>)
 8012fb2:	f000 b869 	b.w	8013088 <_fwalk_sglue>
 8012fb6:	bf00      	nop
 8012fb8:	20000188 	.word	0x20000188
 8012fbc:	08014e99 	.word	0x08014e99
 8012fc0:	20000194 	.word	0x20000194

08012fc4 <cleanup_stdio>:
 8012fc4:	6841      	ldr	r1, [r0, #4]
 8012fc6:	4b0c      	ldr	r3, [pc, #48]	; (8012ff8 <cleanup_stdio+0x34>)
 8012fc8:	4299      	cmp	r1, r3
 8012fca:	b510      	push	{r4, lr}
 8012fcc:	4604      	mov	r4, r0
 8012fce:	d001      	beq.n	8012fd4 <cleanup_stdio+0x10>
 8012fd0:	f001 ff62 	bl	8014e98 <_fflush_r>
 8012fd4:	68a1      	ldr	r1, [r4, #8]
 8012fd6:	4b09      	ldr	r3, [pc, #36]	; (8012ffc <cleanup_stdio+0x38>)
 8012fd8:	4299      	cmp	r1, r3
 8012fda:	d002      	beq.n	8012fe2 <cleanup_stdio+0x1e>
 8012fdc:	4620      	mov	r0, r4
 8012fde:	f001 ff5b 	bl	8014e98 <_fflush_r>
 8012fe2:	68e1      	ldr	r1, [r4, #12]
 8012fe4:	4b06      	ldr	r3, [pc, #24]	; (8013000 <cleanup_stdio+0x3c>)
 8012fe6:	4299      	cmp	r1, r3
 8012fe8:	d004      	beq.n	8012ff4 <cleanup_stdio+0x30>
 8012fea:	4620      	mov	r0, r4
 8012fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ff0:	f001 bf52 	b.w	8014e98 <_fflush_r>
 8012ff4:	bd10      	pop	{r4, pc}
 8012ff6:	bf00      	nop
 8012ff8:	20006690 	.word	0x20006690
 8012ffc:	200066f8 	.word	0x200066f8
 8013000:	20006760 	.word	0x20006760

08013004 <global_stdio_init.part.0>:
 8013004:	b510      	push	{r4, lr}
 8013006:	4b0b      	ldr	r3, [pc, #44]	; (8013034 <global_stdio_init.part.0+0x30>)
 8013008:	4c0b      	ldr	r4, [pc, #44]	; (8013038 <global_stdio_init.part.0+0x34>)
 801300a:	4a0c      	ldr	r2, [pc, #48]	; (801303c <global_stdio_init.part.0+0x38>)
 801300c:	601a      	str	r2, [r3, #0]
 801300e:	4620      	mov	r0, r4
 8013010:	2200      	movs	r2, #0
 8013012:	2104      	movs	r1, #4
 8013014:	f7ff ffa6 	bl	8012f64 <std>
 8013018:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801301c:	2201      	movs	r2, #1
 801301e:	2109      	movs	r1, #9
 8013020:	f7ff ffa0 	bl	8012f64 <std>
 8013024:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8013028:	2202      	movs	r2, #2
 801302a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801302e:	2112      	movs	r1, #18
 8013030:	f7ff bf98 	b.w	8012f64 <std>
 8013034:	200067c8 	.word	0x200067c8
 8013038:	20006690 	.word	0x20006690
 801303c:	08012fad 	.word	0x08012fad

08013040 <__sfp_lock_acquire>:
 8013040:	4801      	ldr	r0, [pc, #4]	; (8013048 <__sfp_lock_acquire+0x8>)
 8013042:	f000 ba57 	b.w	80134f4 <__retarget_lock_acquire_recursive>
 8013046:	bf00      	nop
 8013048:	200067d1 	.word	0x200067d1

0801304c <__sfp_lock_release>:
 801304c:	4801      	ldr	r0, [pc, #4]	; (8013054 <__sfp_lock_release+0x8>)
 801304e:	f000 ba52 	b.w	80134f6 <__retarget_lock_release_recursive>
 8013052:	bf00      	nop
 8013054:	200067d1 	.word	0x200067d1

08013058 <__sinit>:
 8013058:	b510      	push	{r4, lr}
 801305a:	4604      	mov	r4, r0
 801305c:	f7ff fff0 	bl	8013040 <__sfp_lock_acquire>
 8013060:	6a23      	ldr	r3, [r4, #32]
 8013062:	b11b      	cbz	r3, 801306c <__sinit+0x14>
 8013064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013068:	f7ff bff0 	b.w	801304c <__sfp_lock_release>
 801306c:	4b04      	ldr	r3, [pc, #16]	; (8013080 <__sinit+0x28>)
 801306e:	6223      	str	r3, [r4, #32]
 8013070:	4b04      	ldr	r3, [pc, #16]	; (8013084 <__sinit+0x2c>)
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d1f5      	bne.n	8013064 <__sinit+0xc>
 8013078:	f7ff ffc4 	bl	8013004 <global_stdio_init.part.0>
 801307c:	e7f2      	b.n	8013064 <__sinit+0xc>
 801307e:	bf00      	nop
 8013080:	08012fc5 	.word	0x08012fc5
 8013084:	200067c8 	.word	0x200067c8

08013088 <_fwalk_sglue>:
 8013088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801308c:	4607      	mov	r7, r0
 801308e:	4688      	mov	r8, r1
 8013090:	4614      	mov	r4, r2
 8013092:	2600      	movs	r6, #0
 8013094:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013098:	f1b9 0901 	subs.w	r9, r9, #1
 801309c:	d505      	bpl.n	80130aa <_fwalk_sglue+0x22>
 801309e:	6824      	ldr	r4, [r4, #0]
 80130a0:	2c00      	cmp	r4, #0
 80130a2:	d1f7      	bne.n	8013094 <_fwalk_sglue+0xc>
 80130a4:	4630      	mov	r0, r6
 80130a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130aa:	89ab      	ldrh	r3, [r5, #12]
 80130ac:	2b01      	cmp	r3, #1
 80130ae:	d907      	bls.n	80130c0 <_fwalk_sglue+0x38>
 80130b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80130b4:	3301      	adds	r3, #1
 80130b6:	d003      	beq.n	80130c0 <_fwalk_sglue+0x38>
 80130b8:	4629      	mov	r1, r5
 80130ba:	4638      	mov	r0, r7
 80130bc:	47c0      	blx	r8
 80130be:	4306      	orrs	r6, r0
 80130c0:	3568      	adds	r5, #104	; 0x68
 80130c2:	e7e9      	b.n	8013098 <_fwalk_sglue+0x10>

080130c4 <iprintf>:
 80130c4:	b40f      	push	{r0, r1, r2, r3}
 80130c6:	b507      	push	{r0, r1, r2, lr}
 80130c8:	4906      	ldr	r1, [pc, #24]	; (80130e4 <iprintf+0x20>)
 80130ca:	ab04      	add	r3, sp, #16
 80130cc:	6808      	ldr	r0, [r1, #0]
 80130ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80130d2:	6881      	ldr	r1, [r0, #8]
 80130d4:	9301      	str	r3, [sp, #4]
 80130d6:	f001 fd3f 	bl	8014b58 <_vfiprintf_r>
 80130da:	b003      	add	sp, #12
 80130dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80130e0:	b004      	add	sp, #16
 80130e2:	4770      	bx	lr
 80130e4:	200001e0 	.word	0x200001e0

080130e8 <_puts_r>:
 80130e8:	6a03      	ldr	r3, [r0, #32]
 80130ea:	b570      	push	{r4, r5, r6, lr}
 80130ec:	6884      	ldr	r4, [r0, #8]
 80130ee:	4605      	mov	r5, r0
 80130f0:	460e      	mov	r6, r1
 80130f2:	b90b      	cbnz	r3, 80130f8 <_puts_r+0x10>
 80130f4:	f7ff ffb0 	bl	8013058 <__sinit>
 80130f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80130fa:	07db      	lsls	r3, r3, #31
 80130fc:	d405      	bmi.n	801310a <_puts_r+0x22>
 80130fe:	89a3      	ldrh	r3, [r4, #12]
 8013100:	0598      	lsls	r0, r3, #22
 8013102:	d402      	bmi.n	801310a <_puts_r+0x22>
 8013104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013106:	f000 f9f5 	bl	80134f4 <__retarget_lock_acquire_recursive>
 801310a:	89a3      	ldrh	r3, [r4, #12]
 801310c:	0719      	lsls	r1, r3, #28
 801310e:	d513      	bpl.n	8013138 <_puts_r+0x50>
 8013110:	6923      	ldr	r3, [r4, #16]
 8013112:	b18b      	cbz	r3, 8013138 <_puts_r+0x50>
 8013114:	3e01      	subs	r6, #1
 8013116:	68a3      	ldr	r3, [r4, #8]
 8013118:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801311c:	3b01      	subs	r3, #1
 801311e:	60a3      	str	r3, [r4, #8]
 8013120:	b9e9      	cbnz	r1, 801315e <_puts_r+0x76>
 8013122:	2b00      	cmp	r3, #0
 8013124:	da2e      	bge.n	8013184 <_puts_r+0x9c>
 8013126:	4622      	mov	r2, r4
 8013128:	210a      	movs	r1, #10
 801312a:	4628      	mov	r0, r5
 801312c:	f000 f87b 	bl	8013226 <__swbuf_r>
 8013130:	3001      	adds	r0, #1
 8013132:	d007      	beq.n	8013144 <_puts_r+0x5c>
 8013134:	250a      	movs	r5, #10
 8013136:	e007      	b.n	8013148 <_puts_r+0x60>
 8013138:	4621      	mov	r1, r4
 801313a:	4628      	mov	r0, r5
 801313c:	f000 f8b0 	bl	80132a0 <__swsetup_r>
 8013140:	2800      	cmp	r0, #0
 8013142:	d0e7      	beq.n	8013114 <_puts_r+0x2c>
 8013144:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8013148:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801314a:	07da      	lsls	r2, r3, #31
 801314c:	d405      	bmi.n	801315a <_puts_r+0x72>
 801314e:	89a3      	ldrh	r3, [r4, #12]
 8013150:	059b      	lsls	r3, r3, #22
 8013152:	d402      	bmi.n	801315a <_puts_r+0x72>
 8013154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013156:	f000 f9ce 	bl	80134f6 <__retarget_lock_release_recursive>
 801315a:	4628      	mov	r0, r5
 801315c:	bd70      	pop	{r4, r5, r6, pc}
 801315e:	2b00      	cmp	r3, #0
 8013160:	da04      	bge.n	801316c <_puts_r+0x84>
 8013162:	69a2      	ldr	r2, [r4, #24]
 8013164:	429a      	cmp	r2, r3
 8013166:	dc06      	bgt.n	8013176 <_puts_r+0x8e>
 8013168:	290a      	cmp	r1, #10
 801316a:	d004      	beq.n	8013176 <_puts_r+0x8e>
 801316c:	6823      	ldr	r3, [r4, #0]
 801316e:	1c5a      	adds	r2, r3, #1
 8013170:	6022      	str	r2, [r4, #0]
 8013172:	7019      	strb	r1, [r3, #0]
 8013174:	e7cf      	b.n	8013116 <_puts_r+0x2e>
 8013176:	4622      	mov	r2, r4
 8013178:	4628      	mov	r0, r5
 801317a:	f000 f854 	bl	8013226 <__swbuf_r>
 801317e:	3001      	adds	r0, #1
 8013180:	d1c9      	bne.n	8013116 <_puts_r+0x2e>
 8013182:	e7df      	b.n	8013144 <_puts_r+0x5c>
 8013184:	6823      	ldr	r3, [r4, #0]
 8013186:	250a      	movs	r5, #10
 8013188:	1c5a      	adds	r2, r3, #1
 801318a:	6022      	str	r2, [r4, #0]
 801318c:	701d      	strb	r5, [r3, #0]
 801318e:	e7db      	b.n	8013148 <_puts_r+0x60>

08013190 <puts>:
 8013190:	4b02      	ldr	r3, [pc, #8]	; (801319c <puts+0xc>)
 8013192:	4601      	mov	r1, r0
 8013194:	6818      	ldr	r0, [r3, #0]
 8013196:	f7ff bfa7 	b.w	80130e8 <_puts_r>
 801319a:	bf00      	nop
 801319c:	200001e0 	.word	0x200001e0

080131a0 <__sread>:
 80131a0:	b510      	push	{r4, lr}
 80131a2:	460c      	mov	r4, r1
 80131a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131a8:	f000 f956 	bl	8013458 <_read_r>
 80131ac:	2800      	cmp	r0, #0
 80131ae:	bfab      	itete	ge
 80131b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80131b2:	89a3      	ldrhlt	r3, [r4, #12]
 80131b4:	181b      	addge	r3, r3, r0
 80131b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80131ba:	bfac      	ite	ge
 80131bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80131be:	81a3      	strhlt	r3, [r4, #12]
 80131c0:	bd10      	pop	{r4, pc}

080131c2 <__swrite>:
 80131c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131c6:	461f      	mov	r7, r3
 80131c8:	898b      	ldrh	r3, [r1, #12]
 80131ca:	05db      	lsls	r3, r3, #23
 80131cc:	4605      	mov	r5, r0
 80131ce:	460c      	mov	r4, r1
 80131d0:	4616      	mov	r6, r2
 80131d2:	d505      	bpl.n	80131e0 <__swrite+0x1e>
 80131d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131d8:	2302      	movs	r3, #2
 80131da:	2200      	movs	r2, #0
 80131dc:	f000 f92a 	bl	8013434 <_lseek_r>
 80131e0:	89a3      	ldrh	r3, [r4, #12]
 80131e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80131e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80131ea:	81a3      	strh	r3, [r4, #12]
 80131ec:	4632      	mov	r2, r6
 80131ee:	463b      	mov	r3, r7
 80131f0:	4628      	mov	r0, r5
 80131f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131f6:	f000 b941 	b.w	801347c <_write_r>

080131fa <__sseek>:
 80131fa:	b510      	push	{r4, lr}
 80131fc:	460c      	mov	r4, r1
 80131fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013202:	f000 f917 	bl	8013434 <_lseek_r>
 8013206:	1c43      	adds	r3, r0, #1
 8013208:	89a3      	ldrh	r3, [r4, #12]
 801320a:	bf15      	itete	ne
 801320c:	6560      	strne	r0, [r4, #84]	; 0x54
 801320e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013212:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013216:	81a3      	strheq	r3, [r4, #12]
 8013218:	bf18      	it	ne
 801321a:	81a3      	strhne	r3, [r4, #12]
 801321c:	bd10      	pop	{r4, pc}

0801321e <__sclose>:
 801321e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013222:	f000 b8a1 	b.w	8013368 <_close_r>

08013226 <__swbuf_r>:
 8013226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013228:	460e      	mov	r6, r1
 801322a:	4614      	mov	r4, r2
 801322c:	4605      	mov	r5, r0
 801322e:	b118      	cbz	r0, 8013238 <__swbuf_r+0x12>
 8013230:	6a03      	ldr	r3, [r0, #32]
 8013232:	b90b      	cbnz	r3, 8013238 <__swbuf_r+0x12>
 8013234:	f7ff ff10 	bl	8013058 <__sinit>
 8013238:	69a3      	ldr	r3, [r4, #24]
 801323a:	60a3      	str	r3, [r4, #8]
 801323c:	89a3      	ldrh	r3, [r4, #12]
 801323e:	071a      	lsls	r2, r3, #28
 8013240:	d525      	bpl.n	801328e <__swbuf_r+0x68>
 8013242:	6923      	ldr	r3, [r4, #16]
 8013244:	b31b      	cbz	r3, 801328e <__swbuf_r+0x68>
 8013246:	6823      	ldr	r3, [r4, #0]
 8013248:	6922      	ldr	r2, [r4, #16]
 801324a:	1a98      	subs	r0, r3, r2
 801324c:	6963      	ldr	r3, [r4, #20]
 801324e:	b2f6      	uxtb	r6, r6
 8013250:	4283      	cmp	r3, r0
 8013252:	4637      	mov	r7, r6
 8013254:	dc04      	bgt.n	8013260 <__swbuf_r+0x3a>
 8013256:	4621      	mov	r1, r4
 8013258:	4628      	mov	r0, r5
 801325a:	f001 fe1d 	bl	8014e98 <_fflush_r>
 801325e:	b9e0      	cbnz	r0, 801329a <__swbuf_r+0x74>
 8013260:	68a3      	ldr	r3, [r4, #8]
 8013262:	3b01      	subs	r3, #1
 8013264:	60a3      	str	r3, [r4, #8]
 8013266:	6823      	ldr	r3, [r4, #0]
 8013268:	1c5a      	adds	r2, r3, #1
 801326a:	6022      	str	r2, [r4, #0]
 801326c:	701e      	strb	r6, [r3, #0]
 801326e:	6962      	ldr	r2, [r4, #20]
 8013270:	1c43      	adds	r3, r0, #1
 8013272:	429a      	cmp	r2, r3
 8013274:	d004      	beq.n	8013280 <__swbuf_r+0x5a>
 8013276:	89a3      	ldrh	r3, [r4, #12]
 8013278:	07db      	lsls	r3, r3, #31
 801327a:	d506      	bpl.n	801328a <__swbuf_r+0x64>
 801327c:	2e0a      	cmp	r6, #10
 801327e:	d104      	bne.n	801328a <__swbuf_r+0x64>
 8013280:	4621      	mov	r1, r4
 8013282:	4628      	mov	r0, r5
 8013284:	f001 fe08 	bl	8014e98 <_fflush_r>
 8013288:	b938      	cbnz	r0, 801329a <__swbuf_r+0x74>
 801328a:	4638      	mov	r0, r7
 801328c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801328e:	4621      	mov	r1, r4
 8013290:	4628      	mov	r0, r5
 8013292:	f000 f805 	bl	80132a0 <__swsetup_r>
 8013296:	2800      	cmp	r0, #0
 8013298:	d0d5      	beq.n	8013246 <__swbuf_r+0x20>
 801329a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801329e:	e7f4      	b.n	801328a <__swbuf_r+0x64>

080132a0 <__swsetup_r>:
 80132a0:	b538      	push	{r3, r4, r5, lr}
 80132a2:	4b2a      	ldr	r3, [pc, #168]	; (801334c <__swsetup_r+0xac>)
 80132a4:	4605      	mov	r5, r0
 80132a6:	6818      	ldr	r0, [r3, #0]
 80132a8:	460c      	mov	r4, r1
 80132aa:	b118      	cbz	r0, 80132b4 <__swsetup_r+0x14>
 80132ac:	6a03      	ldr	r3, [r0, #32]
 80132ae:	b90b      	cbnz	r3, 80132b4 <__swsetup_r+0x14>
 80132b0:	f7ff fed2 	bl	8013058 <__sinit>
 80132b4:	89a3      	ldrh	r3, [r4, #12]
 80132b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80132ba:	0718      	lsls	r0, r3, #28
 80132bc:	d422      	bmi.n	8013304 <__swsetup_r+0x64>
 80132be:	06d9      	lsls	r1, r3, #27
 80132c0:	d407      	bmi.n	80132d2 <__swsetup_r+0x32>
 80132c2:	2309      	movs	r3, #9
 80132c4:	602b      	str	r3, [r5, #0]
 80132c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80132ca:	81a3      	strh	r3, [r4, #12]
 80132cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80132d0:	e034      	b.n	801333c <__swsetup_r+0x9c>
 80132d2:	0758      	lsls	r0, r3, #29
 80132d4:	d512      	bpl.n	80132fc <__swsetup_r+0x5c>
 80132d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80132d8:	b141      	cbz	r1, 80132ec <__swsetup_r+0x4c>
 80132da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80132de:	4299      	cmp	r1, r3
 80132e0:	d002      	beq.n	80132e8 <__swsetup_r+0x48>
 80132e2:	4628      	mov	r0, r5
 80132e4:	f000 ff92 	bl	801420c <_free_r>
 80132e8:	2300      	movs	r3, #0
 80132ea:	6363      	str	r3, [r4, #52]	; 0x34
 80132ec:	89a3      	ldrh	r3, [r4, #12]
 80132ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80132f2:	81a3      	strh	r3, [r4, #12]
 80132f4:	2300      	movs	r3, #0
 80132f6:	6063      	str	r3, [r4, #4]
 80132f8:	6923      	ldr	r3, [r4, #16]
 80132fa:	6023      	str	r3, [r4, #0]
 80132fc:	89a3      	ldrh	r3, [r4, #12]
 80132fe:	f043 0308 	orr.w	r3, r3, #8
 8013302:	81a3      	strh	r3, [r4, #12]
 8013304:	6923      	ldr	r3, [r4, #16]
 8013306:	b94b      	cbnz	r3, 801331c <__swsetup_r+0x7c>
 8013308:	89a3      	ldrh	r3, [r4, #12]
 801330a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801330e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013312:	d003      	beq.n	801331c <__swsetup_r+0x7c>
 8013314:	4621      	mov	r1, r4
 8013316:	4628      	mov	r0, r5
 8013318:	f001 fe0c 	bl	8014f34 <__smakebuf_r>
 801331c:	89a0      	ldrh	r0, [r4, #12]
 801331e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013322:	f010 0301 	ands.w	r3, r0, #1
 8013326:	d00a      	beq.n	801333e <__swsetup_r+0x9e>
 8013328:	2300      	movs	r3, #0
 801332a:	60a3      	str	r3, [r4, #8]
 801332c:	6963      	ldr	r3, [r4, #20]
 801332e:	425b      	negs	r3, r3
 8013330:	61a3      	str	r3, [r4, #24]
 8013332:	6923      	ldr	r3, [r4, #16]
 8013334:	b943      	cbnz	r3, 8013348 <__swsetup_r+0xa8>
 8013336:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801333a:	d1c4      	bne.n	80132c6 <__swsetup_r+0x26>
 801333c:	bd38      	pop	{r3, r4, r5, pc}
 801333e:	0781      	lsls	r1, r0, #30
 8013340:	bf58      	it	pl
 8013342:	6963      	ldrpl	r3, [r4, #20]
 8013344:	60a3      	str	r3, [r4, #8]
 8013346:	e7f4      	b.n	8013332 <__swsetup_r+0x92>
 8013348:	2000      	movs	r0, #0
 801334a:	e7f7      	b.n	801333c <__swsetup_r+0x9c>
 801334c:	200001e0 	.word	0x200001e0

08013350 <memset>:
 8013350:	4402      	add	r2, r0
 8013352:	4603      	mov	r3, r0
 8013354:	4293      	cmp	r3, r2
 8013356:	d100      	bne.n	801335a <memset+0xa>
 8013358:	4770      	bx	lr
 801335a:	f803 1b01 	strb.w	r1, [r3], #1
 801335e:	e7f9      	b.n	8013354 <memset+0x4>

08013360 <_localeconv_r>:
 8013360:	4800      	ldr	r0, [pc, #0]	; (8013364 <_localeconv_r+0x4>)
 8013362:	4770      	bx	lr
 8013364:	200002d4 	.word	0x200002d4

08013368 <_close_r>:
 8013368:	b538      	push	{r3, r4, r5, lr}
 801336a:	4d06      	ldr	r5, [pc, #24]	; (8013384 <_close_r+0x1c>)
 801336c:	2300      	movs	r3, #0
 801336e:	4604      	mov	r4, r0
 8013370:	4608      	mov	r0, r1
 8013372:	602b      	str	r3, [r5, #0]
 8013374:	f7ee fe4f 	bl	8002016 <_close>
 8013378:	1c43      	adds	r3, r0, #1
 801337a:	d102      	bne.n	8013382 <_close_r+0x1a>
 801337c:	682b      	ldr	r3, [r5, #0]
 801337e:	b103      	cbz	r3, 8013382 <_close_r+0x1a>
 8013380:	6023      	str	r3, [r4, #0]
 8013382:	bd38      	pop	{r3, r4, r5, pc}
 8013384:	200067cc 	.word	0x200067cc

08013388 <_reclaim_reent>:
 8013388:	4b29      	ldr	r3, [pc, #164]	; (8013430 <_reclaim_reent+0xa8>)
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	4283      	cmp	r3, r0
 801338e:	b570      	push	{r4, r5, r6, lr}
 8013390:	4604      	mov	r4, r0
 8013392:	d04b      	beq.n	801342c <_reclaim_reent+0xa4>
 8013394:	69c3      	ldr	r3, [r0, #28]
 8013396:	b143      	cbz	r3, 80133aa <_reclaim_reent+0x22>
 8013398:	68db      	ldr	r3, [r3, #12]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d144      	bne.n	8013428 <_reclaim_reent+0xa0>
 801339e:	69e3      	ldr	r3, [r4, #28]
 80133a0:	6819      	ldr	r1, [r3, #0]
 80133a2:	b111      	cbz	r1, 80133aa <_reclaim_reent+0x22>
 80133a4:	4620      	mov	r0, r4
 80133a6:	f000 ff31 	bl	801420c <_free_r>
 80133aa:	6961      	ldr	r1, [r4, #20]
 80133ac:	b111      	cbz	r1, 80133b4 <_reclaim_reent+0x2c>
 80133ae:	4620      	mov	r0, r4
 80133b0:	f000 ff2c 	bl	801420c <_free_r>
 80133b4:	69e1      	ldr	r1, [r4, #28]
 80133b6:	b111      	cbz	r1, 80133be <_reclaim_reent+0x36>
 80133b8:	4620      	mov	r0, r4
 80133ba:	f000 ff27 	bl	801420c <_free_r>
 80133be:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80133c0:	b111      	cbz	r1, 80133c8 <_reclaim_reent+0x40>
 80133c2:	4620      	mov	r0, r4
 80133c4:	f000 ff22 	bl	801420c <_free_r>
 80133c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80133ca:	b111      	cbz	r1, 80133d2 <_reclaim_reent+0x4a>
 80133cc:	4620      	mov	r0, r4
 80133ce:	f000 ff1d 	bl	801420c <_free_r>
 80133d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80133d4:	b111      	cbz	r1, 80133dc <_reclaim_reent+0x54>
 80133d6:	4620      	mov	r0, r4
 80133d8:	f000 ff18 	bl	801420c <_free_r>
 80133dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80133de:	b111      	cbz	r1, 80133e6 <_reclaim_reent+0x5e>
 80133e0:	4620      	mov	r0, r4
 80133e2:	f000 ff13 	bl	801420c <_free_r>
 80133e6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80133e8:	b111      	cbz	r1, 80133f0 <_reclaim_reent+0x68>
 80133ea:	4620      	mov	r0, r4
 80133ec:	f000 ff0e 	bl	801420c <_free_r>
 80133f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80133f2:	b111      	cbz	r1, 80133fa <_reclaim_reent+0x72>
 80133f4:	4620      	mov	r0, r4
 80133f6:	f000 ff09 	bl	801420c <_free_r>
 80133fa:	6a23      	ldr	r3, [r4, #32]
 80133fc:	b1b3      	cbz	r3, 801342c <_reclaim_reent+0xa4>
 80133fe:	4620      	mov	r0, r4
 8013400:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013404:	4718      	bx	r3
 8013406:	5949      	ldr	r1, [r1, r5]
 8013408:	b941      	cbnz	r1, 801341c <_reclaim_reent+0x94>
 801340a:	3504      	adds	r5, #4
 801340c:	69e3      	ldr	r3, [r4, #28]
 801340e:	2d80      	cmp	r5, #128	; 0x80
 8013410:	68d9      	ldr	r1, [r3, #12]
 8013412:	d1f8      	bne.n	8013406 <_reclaim_reent+0x7e>
 8013414:	4620      	mov	r0, r4
 8013416:	f000 fef9 	bl	801420c <_free_r>
 801341a:	e7c0      	b.n	801339e <_reclaim_reent+0x16>
 801341c:	680e      	ldr	r6, [r1, #0]
 801341e:	4620      	mov	r0, r4
 8013420:	f000 fef4 	bl	801420c <_free_r>
 8013424:	4631      	mov	r1, r6
 8013426:	e7ef      	b.n	8013408 <_reclaim_reent+0x80>
 8013428:	2500      	movs	r5, #0
 801342a:	e7ef      	b.n	801340c <_reclaim_reent+0x84>
 801342c:	bd70      	pop	{r4, r5, r6, pc}
 801342e:	bf00      	nop
 8013430:	200001e0 	.word	0x200001e0

08013434 <_lseek_r>:
 8013434:	b538      	push	{r3, r4, r5, lr}
 8013436:	4d07      	ldr	r5, [pc, #28]	; (8013454 <_lseek_r+0x20>)
 8013438:	4604      	mov	r4, r0
 801343a:	4608      	mov	r0, r1
 801343c:	4611      	mov	r1, r2
 801343e:	2200      	movs	r2, #0
 8013440:	602a      	str	r2, [r5, #0]
 8013442:	461a      	mov	r2, r3
 8013444:	f7ee fe0e 	bl	8002064 <_lseek>
 8013448:	1c43      	adds	r3, r0, #1
 801344a:	d102      	bne.n	8013452 <_lseek_r+0x1e>
 801344c:	682b      	ldr	r3, [r5, #0]
 801344e:	b103      	cbz	r3, 8013452 <_lseek_r+0x1e>
 8013450:	6023      	str	r3, [r4, #0]
 8013452:	bd38      	pop	{r3, r4, r5, pc}
 8013454:	200067cc 	.word	0x200067cc

08013458 <_read_r>:
 8013458:	b538      	push	{r3, r4, r5, lr}
 801345a:	4d07      	ldr	r5, [pc, #28]	; (8013478 <_read_r+0x20>)
 801345c:	4604      	mov	r4, r0
 801345e:	4608      	mov	r0, r1
 8013460:	4611      	mov	r1, r2
 8013462:	2200      	movs	r2, #0
 8013464:	602a      	str	r2, [r5, #0]
 8013466:	461a      	mov	r2, r3
 8013468:	f7ee fd9c 	bl	8001fa4 <_read>
 801346c:	1c43      	adds	r3, r0, #1
 801346e:	d102      	bne.n	8013476 <_read_r+0x1e>
 8013470:	682b      	ldr	r3, [r5, #0]
 8013472:	b103      	cbz	r3, 8013476 <_read_r+0x1e>
 8013474:	6023      	str	r3, [r4, #0]
 8013476:	bd38      	pop	{r3, r4, r5, pc}
 8013478:	200067cc 	.word	0x200067cc

0801347c <_write_r>:
 801347c:	b538      	push	{r3, r4, r5, lr}
 801347e:	4d07      	ldr	r5, [pc, #28]	; (801349c <_write_r+0x20>)
 8013480:	4604      	mov	r4, r0
 8013482:	4608      	mov	r0, r1
 8013484:	4611      	mov	r1, r2
 8013486:	2200      	movs	r2, #0
 8013488:	602a      	str	r2, [r5, #0]
 801348a:	461a      	mov	r2, r3
 801348c:	f7ee fda7 	bl	8001fde <_write>
 8013490:	1c43      	adds	r3, r0, #1
 8013492:	d102      	bne.n	801349a <_write_r+0x1e>
 8013494:	682b      	ldr	r3, [r5, #0]
 8013496:	b103      	cbz	r3, 801349a <_write_r+0x1e>
 8013498:	6023      	str	r3, [r4, #0]
 801349a:	bd38      	pop	{r3, r4, r5, pc}
 801349c:	200067cc 	.word	0x200067cc

080134a0 <__errno>:
 80134a0:	4b01      	ldr	r3, [pc, #4]	; (80134a8 <__errno+0x8>)
 80134a2:	6818      	ldr	r0, [r3, #0]
 80134a4:	4770      	bx	lr
 80134a6:	bf00      	nop
 80134a8:	200001e0 	.word	0x200001e0

080134ac <__libc_init_array>:
 80134ac:	b570      	push	{r4, r5, r6, lr}
 80134ae:	4d0d      	ldr	r5, [pc, #52]	; (80134e4 <__libc_init_array+0x38>)
 80134b0:	4c0d      	ldr	r4, [pc, #52]	; (80134e8 <__libc_init_array+0x3c>)
 80134b2:	1b64      	subs	r4, r4, r5
 80134b4:	10a4      	asrs	r4, r4, #2
 80134b6:	2600      	movs	r6, #0
 80134b8:	42a6      	cmp	r6, r4
 80134ba:	d109      	bne.n	80134d0 <__libc_init_array+0x24>
 80134bc:	4d0b      	ldr	r5, [pc, #44]	; (80134ec <__libc_init_array+0x40>)
 80134be:	4c0c      	ldr	r4, [pc, #48]	; (80134f0 <__libc_init_array+0x44>)
 80134c0:	f001 fe58 	bl	8015174 <_init>
 80134c4:	1b64      	subs	r4, r4, r5
 80134c6:	10a4      	asrs	r4, r4, #2
 80134c8:	2600      	movs	r6, #0
 80134ca:	42a6      	cmp	r6, r4
 80134cc:	d105      	bne.n	80134da <__libc_init_array+0x2e>
 80134ce:	bd70      	pop	{r4, r5, r6, pc}
 80134d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80134d4:	4798      	blx	r3
 80134d6:	3601      	adds	r6, #1
 80134d8:	e7ee      	b.n	80134b8 <__libc_init_array+0xc>
 80134da:	f855 3b04 	ldr.w	r3, [r5], #4
 80134de:	4798      	blx	r3
 80134e0:	3601      	adds	r6, #1
 80134e2:	e7f2      	b.n	80134ca <__libc_init_array+0x1e>
 80134e4:	08015a04 	.word	0x08015a04
 80134e8:	08015a04 	.word	0x08015a04
 80134ec:	08015a04 	.word	0x08015a04
 80134f0:	08015a08 	.word	0x08015a08

080134f4 <__retarget_lock_acquire_recursive>:
 80134f4:	4770      	bx	lr

080134f6 <__retarget_lock_release_recursive>:
 80134f6:	4770      	bx	lr

080134f8 <memcpy>:
 80134f8:	440a      	add	r2, r1
 80134fa:	4291      	cmp	r1, r2
 80134fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013500:	d100      	bne.n	8013504 <memcpy+0xc>
 8013502:	4770      	bx	lr
 8013504:	b510      	push	{r4, lr}
 8013506:	f811 4b01 	ldrb.w	r4, [r1], #1
 801350a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801350e:	4291      	cmp	r1, r2
 8013510:	d1f9      	bne.n	8013506 <memcpy+0xe>
 8013512:	bd10      	pop	{r4, pc}

08013514 <quorem>:
 8013514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013518:	6903      	ldr	r3, [r0, #16]
 801351a:	690c      	ldr	r4, [r1, #16]
 801351c:	42a3      	cmp	r3, r4
 801351e:	4607      	mov	r7, r0
 8013520:	db7e      	blt.n	8013620 <quorem+0x10c>
 8013522:	3c01      	subs	r4, #1
 8013524:	f101 0814 	add.w	r8, r1, #20
 8013528:	f100 0514 	add.w	r5, r0, #20
 801352c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013530:	9301      	str	r3, [sp, #4]
 8013532:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013536:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801353a:	3301      	adds	r3, #1
 801353c:	429a      	cmp	r2, r3
 801353e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013542:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013546:	fbb2 f6f3 	udiv	r6, r2, r3
 801354a:	d331      	bcc.n	80135b0 <quorem+0x9c>
 801354c:	f04f 0e00 	mov.w	lr, #0
 8013550:	4640      	mov	r0, r8
 8013552:	46ac      	mov	ip, r5
 8013554:	46f2      	mov	sl, lr
 8013556:	f850 2b04 	ldr.w	r2, [r0], #4
 801355a:	b293      	uxth	r3, r2
 801355c:	fb06 e303 	mla	r3, r6, r3, lr
 8013560:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013564:	0c1a      	lsrs	r2, r3, #16
 8013566:	b29b      	uxth	r3, r3
 8013568:	ebaa 0303 	sub.w	r3, sl, r3
 801356c:	f8dc a000 	ldr.w	sl, [ip]
 8013570:	fa13 f38a 	uxtah	r3, r3, sl
 8013574:	fb06 220e 	mla	r2, r6, lr, r2
 8013578:	9300      	str	r3, [sp, #0]
 801357a:	9b00      	ldr	r3, [sp, #0]
 801357c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013580:	b292      	uxth	r2, r2
 8013582:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013586:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801358a:	f8bd 3000 	ldrh.w	r3, [sp]
 801358e:	4581      	cmp	r9, r0
 8013590:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013594:	f84c 3b04 	str.w	r3, [ip], #4
 8013598:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801359c:	d2db      	bcs.n	8013556 <quorem+0x42>
 801359e:	f855 300b 	ldr.w	r3, [r5, fp]
 80135a2:	b92b      	cbnz	r3, 80135b0 <quorem+0x9c>
 80135a4:	9b01      	ldr	r3, [sp, #4]
 80135a6:	3b04      	subs	r3, #4
 80135a8:	429d      	cmp	r5, r3
 80135aa:	461a      	mov	r2, r3
 80135ac:	d32c      	bcc.n	8013608 <quorem+0xf4>
 80135ae:	613c      	str	r4, [r7, #16]
 80135b0:	4638      	mov	r0, r7
 80135b2:	f001 f9a7 	bl	8014904 <__mcmp>
 80135b6:	2800      	cmp	r0, #0
 80135b8:	db22      	blt.n	8013600 <quorem+0xec>
 80135ba:	3601      	adds	r6, #1
 80135bc:	4629      	mov	r1, r5
 80135be:	2000      	movs	r0, #0
 80135c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80135c4:	f8d1 c000 	ldr.w	ip, [r1]
 80135c8:	b293      	uxth	r3, r2
 80135ca:	1ac3      	subs	r3, r0, r3
 80135cc:	0c12      	lsrs	r2, r2, #16
 80135ce:	fa13 f38c 	uxtah	r3, r3, ip
 80135d2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80135d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80135da:	b29b      	uxth	r3, r3
 80135dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80135e0:	45c1      	cmp	r9, r8
 80135e2:	f841 3b04 	str.w	r3, [r1], #4
 80135e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80135ea:	d2e9      	bcs.n	80135c0 <quorem+0xac>
 80135ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80135f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80135f4:	b922      	cbnz	r2, 8013600 <quorem+0xec>
 80135f6:	3b04      	subs	r3, #4
 80135f8:	429d      	cmp	r5, r3
 80135fa:	461a      	mov	r2, r3
 80135fc:	d30a      	bcc.n	8013614 <quorem+0x100>
 80135fe:	613c      	str	r4, [r7, #16]
 8013600:	4630      	mov	r0, r6
 8013602:	b003      	add	sp, #12
 8013604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013608:	6812      	ldr	r2, [r2, #0]
 801360a:	3b04      	subs	r3, #4
 801360c:	2a00      	cmp	r2, #0
 801360e:	d1ce      	bne.n	80135ae <quorem+0x9a>
 8013610:	3c01      	subs	r4, #1
 8013612:	e7c9      	b.n	80135a8 <quorem+0x94>
 8013614:	6812      	ldr	r2, [r2, #0]
 8013616:	3b04      	subs	r3, #4
 8013618:	2a00      	cmp	r2, #0
 801361a:	d1f0      	bne.n	80135fe <quorem+0xea>
 801361c:	3c01      	subs	r4, #1
 801361e:	e7eb      	b.n	80135f8 <quorem+0xe4>
 8013620:	2000      	movs	r0, #0
 8013622:	e7ee      	b.n	8013602 <quorem+0xee>
 8013624:	0000      	movs	r0, r0
	...

08013628 <_dtoa_r>:
 8013628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801362c:	ed2d 8b04 	vpush	{d8-d9}
 8013630:	69c5      	ldr	r5, [r0, #28]
 8013632:	b093      	sub	sp, #76	; 0x4c
 8013634:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013638:	ec57 6b10 	vmov	r6, r7, d0
 801363c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013640:	9107      	str	r1, [sp, #28]
 8013642:	4604      	mov	r4, r0
 8013644:	920a      	str	r2, [sp, #40]	; 0x28
 8013646:	930d      	str	r3, [sp, #52]	; 0x34
 8013648:	b975      	cbnz	r5, 8013668 <_dtoa_r+0x40>
 801364a:	2010      	movs	r0, #16
 801364c:	f000 fe2a 	bl	80142a4 <malloc>
 8013650:	4602      	mov	r2, r0
 8013652:	61e0      	str	r0, [r4, #28]
 8013654:	b920      	cbnz	r0, 8013660 <_dtoa_r+0x38>
 8013656:	4bae      	ldr	r3, [pc, #696]	; (8013910 <_dtoa_r+0x2e8>)
 8013658:	21ef      	movs	r1, #239	; 0xef
 801365a:	48ae      	ldr	r0, [pc, #696]	; (8013914 <_dtoa_r+0x2ec>)
 801365c:	f001 fcd8 	bl	8015010 <__assert_func>
 8013660:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013664:	6005      	str	r5, [r0, #0]
 8013666:	60c5      	str	r5, [r0, #12]
 8013668:	69e3      	ldr	r3, [r4, #28]
 801366a:	6819      	ldr	r1, [r3, #0]
 801366c:	b151      	cbz	r1, 8013684 <_dtoa_r+0x5c>
 801366e:	685a      	ldr	r2, [r3, #4]
 8013670:	604a      	str	r2, [r1, #4]
 8013672:	2301      	movs	r3, #1
 8013674:	4093      	lsls	r3, r2
 8013676:	608b      	str	r3, [r1, #8]
 8013678:	4620      	mov	r0, r4
 801367a:	f000 ff07 	bl	801448c <_Bfree>
 801367e:	69e3      	ldr	r3, [r4, #28]
 8013680:	2200      	movs	r2, #0
 8013682:	601a      	str	r2, [r3, #0]
 8013684:	1e3b      	subs	r3, r7, #0
 8013686:	bfbb      	ittet	lt
 8013688:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801368c:	9303      	strlt	r3, [sp, #12]
 801368e:	2300      	movge	r3, #0
 8013690:	2201      	movlt	r2, #1
 8013692:	bfac      	ite	ge
 8013694:	f8c8 3000 	strge.w	r3, [r8]
 8013698:	f8c8 2000 	strlt.w	r2, [r8]
 801369c:	4b9e      	ldr	r3, [pc, #632]	; (8013918 <_dtoa_r+0x2f0>)
 801369e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80136a2:	ea33 0308 	bics.w	r3, r3, r8
 80136a6:	d11b      	bne.n	80136e0 <_dtoa_r+0xb8>
 80136a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80136aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80136ae:	6013      	str	r3, [r2, #0]
 80136b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80136b4:	4333      	orrs	r3, r6
 80136b6:	f000 8593 	beq.w	80141e0 <_dtoa_r+0xbb8>
 80136ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80136bc:	b963      	cbnz	r3, 80136d8 <_dtoa_r+0xb0>
 80136be:	4b97      	ldr	r3, [pc, #604]	; (801391c <_dtoa_r+0x2f4>)
 80136c0:	e027      	b.n	8013712 <_dtoa_r+0xea>
 80136c2:	4b97      	ldr	r3, [pc, #604]	; (8013920 <_dtoa_r+0x2f8>)
 80136c4:	9300      	str	r3, [sp, #0]
 80136c6:	3308      	adds	r3, #8
 80136c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80136ca:	6013      	str	r3, [r2, #0]
 80136cc:	9800      	ldr	r0, [sp, #0]
 80136ce:	b013      	add	sp, #76	; 0x4c
 80136d0:	ecbd 8b04 	vpop	{d8-d9}
 80136d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136d8:	4b90      	ldr	r3, [pc, #576]	; (801391c <_dtoa_r+0x2f4>)
 80136da:	9300      	str	r3, [sp, #0]
 80136dc:	3303      	adds	r3, #3
 80136de:	e7f3      	b.n	80136c8 <_dtoa_r+0xa0>
 80136e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80136e4:	2200      	movs	r2, #0
 80136e6:	ec51 0b17 	vmov	r0, r1, d7
 80136ea:	eeb0 8a47 	vmov.f32	s16, s14
 80136ee:	eef0 8a67 	vmov.f32	s17, s15
 80136f2:	2300      	movs	r3, #0
 80136f4:	f7ed fa10 	bl	8000b18 <__aeabi_dcmpeq>
 80136f8:	4681      	mov	r9, r0
 80136fa:	b160      	cbz	r0, 8013716 <_dtoa_r+0xee>
 80136fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80136fe:	2301      	movs	r3, #1
 8013700:	6013      	str	r3, [r2, #0]
 8013702:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013704:	2b00      	cmp	r3, #0
 8013706:	f000 8568 	beq.w	80141da <_dtoa_r+0xbb2>
 801370a:	4b86      	ldr	r3, [pc, #536]	; (8013924 <_dtoa_r+0x2fc>)
 801370c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801370e:	6013      	str	r3, [r2, #0]
 8013710:	3b01      	subs	r3, #1
 8013712:	9300      	str	r3, [sp, #0]
 8013714:	e7da      	b.n	80136cc <_dtoa_r+0xa4>
 8013716:	aa10      	add	r2, sp, #64	; 0x40
 8013718:	a911      	add	r1, sp, #68	; 0x44
 801371a:	4620      	mov	r0, r4
 801371c:	eeb0 0a48 	vmov.f32	s0, s16
 8013720:	eef0 0a68 	vmov.f32	s1, s17
 8013724:	f001 f994 	bl	8014a50 <__d2b>
 8013728:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801372c:	4682      	mov	sl, r0
 801372e:	2d00      	cmp	r5, #0
 8013730:	d07f      	beq.n	8013832 <_dtoa_r+0x20a>
 8013732:	ee18 3a90 	vmov	r3, s17
 8013736:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801373a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801373e:	ec51 0b18 	vmov	r0, r1, d8
 8013742:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013746:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801374a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801374e:	4619      	mov	r1, r3
 8013750:	2200      	movs	r2, #0
 8013752:	4b75      	ldr	r3, [pc, #468]	; (8013928 <_dtoa_r+0x300>)
 8013754:	f7ec fdc0 	bl	80002d8 <__aeabi_dsub>
 8013758:	a367      	add	r3, pc, #412	; (adr r3, 80138f8 <_dtoa_r+0x2d0>)
 801375a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801375e:	f7ec ff73 	bl	8000648 <__aeabi_dmul>
 8013762:	a367      	add	r3, pc, #412	; (adr r3, 8013900 <_dtoa_r+0x2d8>)
 8013764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013768:	f7ec fdb8 	bl	80002dc <__adddf3>
 801376c:	4606      	mov	r6, r0
 801376e:	4628      	mov	r0, r5
 8013770:	460f      	mov	r7, r1
 8013772:	f7ec feff 	bl	8000574 <__aeabi_i2d>
 8013776:	a364      	add	r3, pc, #400	; (adr r3, 8013908 <_dtoa_r+0x2e0>)
 8013778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801377c:	f7ec ff64 	bl	8000648 <__aeabi_dmul>
 8013780:	4602      	mov	r2, r0
 8013782:	460b      	mov	r3, r1
 8013784:	4630      	mov	r0, r6
 8013786:	4639      	mov	r1, r7
 8013788:	f7ec fda8 	bl	80002dc <__adddf3>
 801378c:	4606      	mov	r6, r0
 801378e:	460f      	mov	r7, r1
 8013790:	f7ed fa0a 	bl	8000ba8 <__aeabi_d2iz>
 8013794:	2200      	movs	r2, #0
 8013796:	4683      	mov	fp, r0
 8013798:	2300      	movs	r3, #0
 801379a:	4630      	mov	r0, r6
 801379c:	4639      	mov	r1, r7
 801379e:	f7ed f9c5 	bl	8000b2c <__aeabi_dcmplt>
 80137a2:	b148      	cbz	r0, 80137b8 <_dtoa_r+0x190>
 80137a4:	4658      	mov	r0, fp
 80137a6:	f7ec fee5 	bl	8000574 <__aeabi_i2d>
 80137aa:	4632      	mov	r2, r6
 80137ac:	463b      	mov	r3, r7
 80137ae:	f7ed f9b3 	bl	8000b18 <__aeabi_dcmpeq>
 80137b2:	b908      	cbnz	r0, 80137b8 <_dtoa_r+0x190>
 80137b4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80137b8:	f1bb 0f16 	cmp.w	fp, #22
 80137bc:	d857      	bhi.n	801386e <_dtoa_r+0x246>
 80137be:	4b5b      	ldr	r3, [pc, #364]	; (801392c <_dtoa_r+0x304>)
 80137c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80137c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137c8:	ec51 0b18 	vmov	r0, r1, d8
 80137cc:	f7ed f9ae 	bl	8000b2c <__aeabi_dcmplt>
 80137d0:	2800      	cmp	r0, #0
 80137d2:	d04e      	beq.n	8013872 <_dtoa_r+0x24a>
 80137d4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80137d8:	2300      	movs	r3, #0
 80137da:	930c      	str	r3, [sp, #48]	; 0x30
 80137dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80137de:	1b5b      	subs	r3, r3, r5
 80137e0:	1e5a      	subs	r2, r3, #1
 80137e2:	bf45      	ittet	mi
 80137e4:	f1c3 0301 	rsbmi	r3, r3, #1
 80137e8:	9305      	strmi	r3, [sp, #20]
 80137ea:	2300      	movpl	r3, #0
 80137ec:	2300      	movmi	r3, #0
 80137ee:	9206      	str	r2, [sp, #24]
 80137f0:	bf54      	ite	pl
 80137f2:	9305      	strpl	r3, [sp, #20]
 80137f4:	9306      	strmi	r3, [sp, #24]
 80137f6:	f1bb 0f00 	cmp.w	fp, #0
 80137fa:	db3c      	blt.n	8013876 <_dtoa_r+0x24e>
 80137fc:	9b06      	ldr	r3, [sp, #24]
 80137fe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8013802:	445b      	add	r3, fp
 8013804:	9306      	str	r3, [sp, #24]
 8013806:	2300      	movs	r3, #0
 8013808:	9308      	str	r3, [sp, #32]
 801380a:	9b07      	ldr	r3, [sp, #28]
 801380c:	2b09      	cmp	r3, #9
 801380e:	d868      	bhi.n	80138e2 <_dtoa_r+0x2ba>
 8013810:	2b05      	cmp	r3, #5
 8013812:	bfc4      	itt	gt
 8013814:	3b04      	subgt	r3, #4
 8013816:	9307      	strgt	r3, [sp, #28]
 8013818:	9b07      	ldr	r3, [sp, #28]
 801381a:	f1a3 0302 	sub.w	r3, r3, #2
 801381e:	bfcc      	ite	gt
 8013820:	2500      	movgt	r5, #0
 8013822:	2501      	movle	r5, #1
 8013824:	2b03      	cmp	r3, #3
 8013826:	f200 8085 	bhi.w	8013934 <_dtoa_r+0x30c>
 801382a:	e8df f003 	tbb	[pc, r3]
 801382e:	3b2e      	.short	0x3b2e
 8013830:	5839      	.short	0x5839
 8013832:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8013836:	441d      	add	r5, r3
 8013838:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801383c:	2b20      	cmp	r3, #32
 801383e:	bfc1      	itttt	gt
 8013840:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013844:	fa08 f803 	lslgt.w	r8, r8, r3
 8013848:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801384c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8013850:	bfd6      	itet	le
 8013852:	f1c3 0320 	rsble	r3, r3, #32
 8013856:	ea48 0003 	orrgt.w	r0, r8, r3
 801385a:	fa06 f003 	lslle.w	r0, r6, r3
 801385e:	f7ec fe79 	bl	8000554 <__aeabi_ui2d>
 8013862:	2201      	movs	r2, #1
 8013864:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8013868:	3d01      	subs	r5, #1
 801386a:	920e      	str	r2, [sp, #56]	; 0x38
 801386c:	e76f      	b.n	801374e <_dtoa_r+0x126>
 801386e:	2301      	movs	r3, #1
 8013870:	e7b3      	b.n	80137da <_dtoa_r+0x1b2>
 8013872:	900c      	str	r0, [sp, #48]	; 0x30
 8013874:	e7b2      	b.n	80137dc <_dtoa_r+0x1b4>
 8013876:	9b05      	ldr	r3, [sp, #20]
 8013878:	eba3 030b 	sub.w	r3, r3, fp
 801387c:	9305      	str	r3, [sp, #20]
 801387e:	f1cb 0300 	rsb	r3, fp, #0
 8013882:	9308      	str	r3, [sp, #32]
 8013884:	2300      	movs	r3, #0
 8013886:	930b      	str	r3, [sp, #44]	; 0x2c
 8013888:	e7bf      	b.n	801380a <_dtoa_r+0x1e2>
 801388a:	2300      	movs	r3, #0
 801388c:	9309      	str	r3, [sp, #36]	; 0x24
 801388e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013890:	2b00      	cmp	r3, #0
 8013892:	dc52      	bgt.n	801393a <_dtoa_r+0x312>
 8013894:	2301      	movs	r3, #1
 8013896:	9301      	str	r3, [sp, #4]
 8013898:	9304      	str	r3, [sp, #16]
 801389a:	461a      	mov	r2, r3
 801389c:	920a      	str	r2, [sp, #40]	; 0x28
 801389e:	e00b      	b.n	80138b8 <_dtoa_r+0x290>
 80138a0:	2301      	movs	r3, #1
 80138a2:	e7f3      	b.n	801388c <_dtoa_r+0x264>
 80138a4:	2300      	movs	r3, #0
 80138a6:	9309      	str	r3, [sp, #36]	; 0x24
 80138a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138aa:	445b      	add	r3, fp
 80138ac:	9301      	str	r3, [sp, #4]
 80138ae:	3301      	adds	r3, #1
 80138b0:	2b01      	cmp	r3, #1
 80138b2:	9304      	str	r3, [sp, #16]
 80138b4:	bfb8      	it	lt
 80138b6:	2301      	movlt	r3, #1
 80138b8:	69e0      	ldr	r0, [r4, #28]
 80138ba:	2100      	movs	r1, #0
 80138bc:	2204      	movs	r2, #4
 80138be:	f102 0614 	add.w	r6, r2, #20
 80138c2:	429e      	cmp	r6, r3
 80138c4:	d93d      	bls.n	8013942 <_dtoa_r+0x31a>
 80138c6:	6041      	str	r1, [r0, #4]
 80138c8:	4620      	mov	r0, r4
 80138ca:	f000 fd9f 	bl	801440c <_Balloc>
 80138ce:	9000      	str	r0, [sp, #0]
 80138d0:	2800      	cmp	r0, #0
 80138d2:	d139      	bne.n	8013948 <_dtoa_r+0x320>
 80138d4:	4b16      	ldr	r3, [pc, #88]	; (8013930 <_dtoa_r+0x308>)
 80138d6:	4602      	mov	r2, r0
 80138d8:	f240 11af 	movw	r1, #431	; 0x1af
 80138dc:	e6bd      	b.n	801365a <_dtoa_r+0x32>
 80138de:	2301      	movs	r3, #1
 80138e0:	e7e1      	b.n	80138a6 <_dtoa_r+0x27e>
 80138e2:	2501      	movs	r5, #1
 80138e4:	2300      	movs	r3, #0
 80138e6:	9307      	str	r3, [sp, #28]
 80138e8:	9509      	str	r5, [sp, #36]	; 0x24
 80138ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80138ee:	9301      	str	r3, [sp, #4]
 80138f0:	9304      	str	r3, [sp, #16]
 80138f2:	2200      	movs	r2, #0
 80138f4:	2312      	movs	r3, #18
 80138f6:	e7d1      	b.n	801389c <_dtoa_r+0x274>
 80138f8:	636f4361 	.word	0x636f4361
 80138fc:	3fd287a7 	.word	0x3fd287a7
 8013900:	8b60c8b3 	.word	0x8b60c8b3
 8013904:	3fc68a28 	.word	0x3fc68a28
 8013908:	509f79fb 	.word	0x509f79fb
 801390c:	3fd34413 	.word	0x3fd34413
 8013910:	080156c9 	.word	0x080156c9
 8013914:	080156e0 	.word	0x080156e0
 8013918:	7ff00000 	.word	0x7ff00000
 801391c:	080156c5 	.word	0x080156c5
 8013920:	080156bc 	.word	0x080156bc
 8013924:	08015699 	.word	0x08015699
 8013928:	3ff80000 	.word	0x3ff80000
 801392c:	080157d0 	.word	0x080157d0
 8013930:	08015738 	.word	0x08015738
 8013934:	2301      	movs	r3, #1
 8013936:	9309      	str	r3, [sp, #36]	; 0x24
 8013938:	e7d7      	b.n	80138ea <_dtoa_r+0x2c2>
 801393a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801393c:	9301      	str	r3, [sp, #4]
 801393e:	9304      	str	r3, [sp, #16]
 8013940:	e7ba      	b.n	80138b8 <_dtoa_r+0x290>
 8013942:	3101      	adds	r1, #1
 8013944:	0052      	lsls	r2, r2, #1
 8013946:	e7ba      	b.n	80138be <_dtoa_r+0x296>
 8013948:	69e3      	ldr	r3, [r4, #28]
 801394a:	9a00      	ldr	r2, [sp, #0]
 801394c:	601a      	str	r2, [r3, #0]
 801394e:	9b04      	ldr	r3, [sp, #16]
 8013950:	2b0e      	cmp	r3, #14
 8013952:	f200 80a8 	bhi.w	8013aa6 <_dtoa_r+0x47e>
 8013956:	2d00      	cmp	r5, #0
 8013958:	f000 80a5 	beq.w	8013aa6 <_dtoa_r+0x47e>
 801395c:	f1bb 0f00 	cmp.w	fp, #0
 8013960:	dd38      	ble.n	80139d4 <_dtoa_r+0x3ac>
 8013962:	4bc0      	ldr	r3, [pc, #768]	; (8013c64 <_dtoa_r+0x63c>)
 8013964:	f00b 020f 	and.w	r2, fp, #15
 8013968:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801396c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013970:	e9d3 6700 	ldrd	r6, r7, [r3]
 8013974:	ea4f 182b 	mov.w	r8, fp, asr #4
 8013978:	d019      	beq.n	80139ae <_dtoa_r+0x386>
 801397a:	4bbb      	ldr	r3, [pc, #748]	; (8013c68 <_dtoa_r+0x640>)
 801397c:	ec51 0b18 	vmov	r0, r1, d8
 8013980:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013984:	f7ec ff8a 	bl	800089c <__aeabi_ddiv>
 8013988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801398c:	f008 080f 	and.w	r8, r8, #15
 8013990:	2503      	movs	r5, #3
 8013992:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8013c68 <_dtoa_r+0x640>
 8013996:	f1b8 0f00 	cmp.w	r8, #0
 801399a:	d10a      	bne.n	80139b2 <_dtoa_r+0x38a>
 801399c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80139a0:	4632      	mov	r2, r6
 80139a2:	463b      	mov	r3, r7
 80139a4:	f7ec ff7a 	bl	800089c <__aeabi_ddiv>
 80139a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80139ac:	e02b      	b.n	8013a06 <_dtoa_r+0x3de>
 80139ae:	2502      	movs	r5, #2
 80139b0:	e7ef      	b.n	8013992 <_dtoa_r+0x36a>
 80139b2:	f018 0f01 	tst.w	r8, #1
 80139b6:	d008      	beq.n	80139ca <_dtoa_r+0x3a2>
 80139b8:	4630      	mov	r0, r6
 80139ba:	4639      	mov	r1, r7
 80139bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80139c0:	f7ec fe42 	bl	8000648 <__aeabi_dmul>
 80139c4:	3501      	adds	r5, #1
 80139c6:	4606      	mov	r6, r0
 80139c8:	460f      	mov	r7, r1
 80139ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80139ce:	f109 0908 	add.w	r9, r9, #8
 80139d2:	e7e0      	b.n	8013996 <_dtoa_r+0x36e>
 80139d4:	f000 809f 	beq.w	8013b16 <_dtoa_r+0x4ee>
 80139d8:	f1cb 0600 	rsb	r6, fp, #0
 80139dc:	4ba1      	ldr	r3, [pc, #644]	; (8013c64 <_dtoa_r+0x63c>)
 80139de:	4fa2      	ldr	r7, [pc, #648]	; (8013c68 <_dtoa_r+0x640>)
 80139e0:	f006 020f 	and.w	r2, r6, #15
 80139e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80139e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ec:	ec51 0b18 	vmov	r0, r1, d8
 80139f0:	f7ec fe2a 	bl	8000648 <__aeabi_dmul>
 80139f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80139f8:	1136      	asrs	r6, r6, #4
 80139fa:	2300      	movs	r3, #0
 80139fc:	2502      	movs	r5, #2
 80139fe:	2e00      	cmp	r6, #0
 8013a00:	d17e      	bne.n	8013b00 <_dtoa_r+0x4d8>
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d1d0      	bne.n	80139a8 <_dtoa_r+0x380>
 8013a06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a08:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	f000 8084 	beq.w	8013b1a <_dtoa_r+0x4f2>
 8013a12:	4b96      	ldr	r3, [pc, #600]	; (8013c6c <_dtoa_r+0x644>)
 8013a14:	2200      	movs	r2, #0
 8013a16:	4640      	mov	r0, r8
 8013a18:	4649      	mov	r1, r9
 8013a1a:	f7ed f887 	bl	8000b2c <__aeabi_dcmplt>
 8013a1e:	2800      	cmp	r0, #0
 8013a20:	d07b      	beq.n	8013b1a <_dtoa_r+0x4f2>
 8013a22:	9b04      	ldr	r3, [sp, #16]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d078      	beq.n	8013b1a <_dtoa_r+0x4f2>
 8013a28:	9b01      	ldr	r3, [sp, #4]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	dd39      	ble.n	8013aa2 <_dtoa_r+0x47a>
 8013a2e:	4b90      	ldr	r3, [pc, #576]	; (8013c70 <_dtoa_r+0x648>)
 8013a30:	2200      	movs	r2, #0
 8013a32:	4640      	mov	r0, r8
 8013a34:	4649      	mov	r1, r9
 8013a36:	f7ec fe07 	bl	8000648 <__aeabi_dmul>
 8013a3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a3e:	9e01      	ldr	r6, [sp, #4]
 8013a40:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8013a44:	3501      	adds	r5, #1
 8013a46:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013a4a:	4628      	mov	r0, r5
 8013a4c:	f7ec fd92 	bl	8000574 <__aeabi_i2d>
 8013a50:	4642      	mov	r2, r8
 8013a52:	464b      	mov	r3, r9
 8013a54:	f7ec fdf8 	bl	8000648 <__aeabi_dmul>
 8013a58:	4b86      	ldr	r3, [pc, #536]	; (8013c74 <_dtoa_r+0x64c>)
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	f7ec fc3e 	bl	80002dc <__adddf3>
 8013a60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013a64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a68:	9303      	str	r3, [sp, #12]
 8013a6a:	2e00      	cmp	r6, #0
 8013a6c:	d158      	bne.n	8013b20 <_dtoa_r+0x4f8>
 8013a6e:	4b82      	ldr	r3, [pc, #520]	; (8013c78 <_dtoa_r+0x650>)
 8013a70:	2200      	movs	r2, #0
 8013a72:	4640      	mov	r0, r8
 8013a74:	4649      	mov	r1, r9
 8013a76:	f7ec fc2f 	bl	80002d8 <__aeabi_dsub>
 8013a7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013a7e:	4680      	mov	r8, r0
 8013a80:	4689      	mov	r9, r1
 8013a82:	f7ed f871 	bl	8000b68 <__aeabi_dcmpgt>
 8013a86:	2800      	cmp	r0, #0
 8013a88:	f040 8296 	bne.w	8013fb8 <_dtoa_r+0x990>
 8013a8c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013a90:	4640      	mov	r0, r8
 8013a92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013a96:	4649      	mov	r1, r9
 8013a98:	f7ed f848 	bl	8000b2c <__aeabi_dcmplt>
 8013a9c:	2800      	cmp	r0, #0
 8013a9e:	f040 8289 	bne.w	8013fb4 <_dtoa_r+0x98c>
 8013aa2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013aa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	f2c0 814e 	blt.w	8013d4a <_dtoa_r+0x722>
 8013aae:	f1bb 0f0e 	cmp.w	fp, #14
 8013ab2:	f300 814a 	bgt.w	8013d4a <_dtoa_r+0x722>
 8013ab6:	4b6b      	ldr	r3, [pc, #428]	; (8013c64 <_dtoa_r+0x63c>)
 8013ab8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013abc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	f280 80dc 	bge.w	8013c80 <_dtoa_r+0x658>
 8013ac8:	9b04      	ldr	r3, [sp, #16]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	f300 80d8 	bgt.w	8013c80 <_dtoa_r+0x658>
 8013ad0:	f040 826f 	bne.w	8013fb2 <_dtoa_r+0x98a>
 8013ad4:	4b68      	ldr	r3, [pc, #416]	; (8013c78 <_dtoa_r+0x650>)
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	4640      	mov	r0, r8
 8013ada:	4649      	mov	r1, r9
 8013adc:	f7ec fdb4 	bl	8000648 <__aeabi_dmul>
 8013ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013ae4:	f7ed f836 	bl	8000b54 <__aeabi_dcmpge>
 8013ae8:	9e04      	ldr	r6, [sp, #16]
 8013aea:	4637      	mov	r7, r6
 8013aec:	2800      	cmp	r0, #0
 8013aee:	f040 8245 	bne.w	8013f7c <_dtoa_r+0x954>
 8013af2:	9d00      	ldr	r5, [sp, #0]
 8013af4:	2331      	movs	r3, #49	; 0x31
 8013af6:	f805 3b01 	strb.w	r3, [r5], #1
 8013afa:	f10b 0b01 	add.w	fp, fp, #1
 8013afe:	e241      	b.n	8013f84 <_dtoa_r+0x95c>
 8013b00:	07f2      	lsls	r2, r6, #31
 8013b02:	d505      	bpl.n	8013b10 <_dtoa_r+0x4e8>
 8013b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013b08:	f7ec fd9e 	bl	8000648 <__aeabi_dmul>
 8013b0c:	3501      	adds	r5, #1
 8013b0e:	2301      	movs	r3, #1
 8013b10:	1076      	asrs	r6, r6, #1
 8013b12:	3708      	adds	r7, #8
 8013b14:	e773      	b.n	80139fe <_dtoa_r+0x3d6>
 8013b16:	2502      	movs	r5, #2
 8013b18:	e775      	b.n	8013a06 <_dtoa_r+0x3de>
 8013b1a:	9e04      	ldr	r6, [sp, #16]
 8013b1c:	465f      	mov	r7, fp
 8013b1e:	e792      	b.n	8013a46 <_dtoa_r+0x41e>
 8013b20:	9900      	ldr	r1, [sp, #0]
 8013b22:	4b50      	ldr	r3, [pc, #320]	; (8013c64 <_dtoa_r+0x63c>)
 8013b24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013b28:	4431      	add	r1, r6
 8013b2a:	9102      	str	r1, [sp, #8]
 8013b2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013b2e:	eeb0 9a47 	vmov.f32	s18, s14
 8013b32:	eef0 9a67 	vmov.f32	s19, s15
 8013b36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013b3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013b3e:	2900      	cmp	r1, #0
 8013b40:	d044      	beq.n	8013bcc <_dtoa_r+0x5a4>
 8013b42:	494e      	ldr	r1, [pc, #312]	; (8013c7c <_dtoa_r+0x654>)
 8013b44:	2000      	movs	r0, #0
 8013b46:	f7ec fea9 	bl	800089c <__aeabi_ddiv>
 8013b4a:	ec53 2b19 	vmov	r2, r3, d9
 8013b4e:	f7ec fbc3 	bl	80002d8 <__aeabi_dsub>
 8013b52:	9d00      	ldr	r5, [sp, #0]
 8013b54:	ec41 0b19 	vmov	d9, r0, r1
 8013b58:	4649      	mov	r1, r9
 8013b5a:	4640      	mov	r0, r8
 8013b5c:	f7ed f824 	bl	8000ba8 <__aeabi_d2iz>
 8013b60:	4606      	mov	r6, r0
 8013b62:	f7ec fd07 	bl	8000574 <__aeabi_i2d>
 8013b66:	4602      	mov	r2, r0
 8013b68:	460b      	mov	r3, r1
 8013b6a:	4640      	mov	r0, r8
 8013b6c:	4649      	mov	r1, r9
 8013b6e:	f7ec fbb3 	bl	80002d8 <__aeabi_dsub>
 8013b72:	3630      	adds	r6, #48	; 0x30
 8013b74:	f805 6b01 	strb.w	r6, [r5], #1
 8013b78:	ec53 2b19 	vmov	r2, r3, d9
 8013b7c:	4680      	mov	r8, r0
 8013b7e:	4689      	mov	r9, r1
 8013b80:	f7ec ffd4 	bl	8000b2c <__aeabi_dcmplt>
 8013b84:	2800      	cmp	r0, #0
 8013b86:	d164      	bne.n	8013c52 <_dtoa_r+0x62a>
 8013b88:	4642      	mov	r2, r8
 8013b8a:	464b      	mov	r3, r9
 8013b8c:	4937      	ldr	r1, [pc, #220]	; (8013c6c <_dtoa_r+0x644>)
 8013b8e:	2000      	movs	r0, #0
 8013b90:	f7ec fba2 	bl	80002d8 <__aeabi_dsub>
 8013b94:	ec53 2b19 	vmov	r2, r3, d9
 8013b98:	f7ec ffc8 	bl	8000b2c <__aeabi_dcmplt>
 8013b9c:	2800      	cmp	r0, #0
 8013b9e:	f040 80b6 	bne.w	8013d0e <_dtoa_r+0x6e6>
 8013ba2:	9b02      	ldr	r3, [sp, #8]
 8013ba4:	429d      	cmp	r5, r3
 8013ba6:	f43f af7c 	beq.w	8013aa2 <_dtoa_r+0x47a>
 8013baa:	4b31      	ldr	r3, [pc, #196]	; (8013c70 <_dtoa_r+0x648>)
 8013bac:	ec51 0b19 	vmov	r0, r1, d9
 8013bb0:	2200      	movs	r2, #0
 8013bb2:	f7ec fd49 	bl	8000648 <__aeabi_dmul>
 8013bb6:	4b2e      	ldr	r3, [pc, #184]	; (8013c70 <_dtoa_r+0x648>)
 8013bb8:	ec41 0b19 	vmov	d9, r0, r1
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	4640      	mov	r0, r8
 8013bc0:	4649      	mov	r1, r9
 8013bc2:	f7ec fd41 	bl	8000648 <__aeabi_dmul>
 8013bc6:	4680      	mov	r8, r0
 8013bc8:	4689      	mov	r9, r1
 8013bca:	e7c5      	b.n	8013b58 <_dtoa_r+0x530>
 8013bcc:	ec51 0b17 	vmov	r0, r1, d7
 8013bd0:	f7ec fd3a 	bl	8000648 <__aeabi_dmul>
 8013bd4:	9b02      	ldr	r3, [sp, #8]
 8013bd6:	9d00      	ldr	r5, [sp, #0]
 8013bd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8013bda:	ec41 0b19 	vmov	d9, r0, r1
 8013bde:	4649      	mov	r1, r9
 8013be0:	4640      	mov	r0, r8
 8013be2:	f7ec ffe1 	bl	8000ba8 <__aeabi_d2iz>
 8013be6:	4606      	mov	r6, r0
 8013be8:	f7ec fcc4 	bl	8000574 <__aeabi_i2d>
 8013bec:	3630      	adds	r6, #48	; 0x30
 8013bee:	4602      	mov	r2, r0
 8013bf0:	460b      	mov	r3, r1
 8013bf2:	4640      	mov	r0, r8
 8013bf4:	4649      	mov	r1, r9
 8013bf6:	f7ec fb6f 	bl	80002d8 <__aeabi_dsub>
 8013bfa:	f805 6b01 	strb.w	r6, [r5], #1
 8013bfe:	9b02      	ldr	r3, [sp, #8]
 8013c00:	429d      	cmp	r5, r3
 8013c02:	4680      	mov	r8, r0
 8013c04:	4689      	mov	r9, r1
 8013c06:	f04f 0200 	mov.w	r2, #0
 8013c0a:	d124      	bne.n	8013c56 <_dtoa_r+0x62e>
 8013c0c:	4b1b      	ldr	r3, [pc, #108]	; (8013c7c <_dtoa_r+0x654>)
 8013c0e:	ec51 0b19 	vmov	r0, r1, d9
 8013c12:	f7ec fb63 	bl	80002dc <__adddf3>
 8013c16:	4602      	mov	r2, r0
 8013c18:	460b      	mov	r3, r1
 8013c1a:	4640      	mov	r0, r8
 8013c1c:	4649      	mov	r1, r9
 8013c1e:	f7ec ffa3 	bl	8000b68 <__aeabi_dcmpgt>
 8013c22:	2800      	cmp	r0, #0
 8013c24:	d173      	bne.n	8013d0e <_dtoa_r+0x6e6>
 8013c26:	ec53 2b19 	vmov	r2, r3, d9
 8013c2a:	4914      	ldr	r1, [pc, #80]	; (8013c7c <_dtoa_r+0x654>)
 8013c2c:	2000      	movs	r0, #0
 8013c2e:	f7ec fb53 	bl	80002d8 <__aeabi_dsub>
 8013c32:	4602      	mov	r2, r0
 8013c34:	460b      	mov	r3, r1
 8013c36:	4640      	mov	r0, r8
 8013c38:	4649      	mov	r1, r9
 8013c3a:	f7ec ff77 	bl	8000b2c <__aeabi_dcmplt>
 8013c3e:	2800      	cmp	r0, #0
 8013c40:	f43f af2f 	beq.w	8013aa2 <_dtoa_r+0x47a>
 8013c44:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013c46:	1e6b      	subs	r3, r5, #1
 8013c48:	930f      	str	r3, [sp, #60]	; 0x3c
 8013c4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013c4e:	2b30      	cmp	r3, #48	; 0x30
 8013c50:	d0f8      	beq.n	8013c44 <_dtoa_r+0x61c>
 8013c52:	46bb      	mov	fp, r7
 8013c54:	e04a      	b.n	8013cec <_dtoa_r+0x6c4>
 8013c56:	4b06      	ldr	r3, [pc, #24]	; (8013c70 <_dtoa_r+0x648>)
 8013c58:	f7ec fcf6 	bl	8000648 <__aeabi_dmul>
 8013c5c:	4680      	mov	r8, r0
 8013c5e:	4689      	mov	r9, r1
 8013c60:	e7bd      	b.n	8013bde <_dtoa_r+0x5b6>
 8013c62:	bf00      	nop
 8013c64:	080157d0 	.word	0x080157d0
 8013c68:	080157a8 	.word	0x080157a8
 8013c6c:	3ff00000 	.word	0x3ff00000
 8013c70:	40240000 	.word	0x40240000
 8013c74:	401c0000 	.word	0x401c0000
 8013c78:	40140000 	.word	0x40140000
 8013c7c:	3fe00000 	.word	0x3fe00000
 8013c80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013c84:	9d00      	ldr	r5, [sp, #0]
 8013c86:	4642      	mov	r2, r8
 8013c88:	464b      	mov	r3, r9
 8013c8a:	4630      	mov	r0, r6
 8013c8c:	4639      	mov	r1, r7
 8013c8e:	f7ec fe05 	bl	800089c <__aeabi_ddiv>
 8013c92:	f7ec ff89 	bl	8000ba8 <__aeabi_d2iz>
 8013c96:	9001      	str	r0, [sp, #4]
 8013c98:	f7ec fc6c 	bl	8000574 <__aeabi_i2d>
 8013c9c:	4642      	mov	r2, r8
 8013c9e:	464b      	mov	r3, r9
 8013ca0:	f7ec fcd2 	bl	8000648 <__aeabi_dmul>
 8013ca4:	4602      	mov	r2, r0
 8013ca6:	460b      	mov	r3, r1
 8013ca8:	4630      	mov	r0, r6
 8013caa:	4639      	mov	r1, r7
 8013cac:	f7ec fb14 	bl	80002d8 <__aeabi_dsub>
 8013cb0:	9e01      	ldr	r6, [sp, #4]
 8013cb2:	9f04      	ldr	r7, [sp, #16]
 8013cb4:	3630      	adds	r6, #48	; 0x30
 8013cb6:	f805 6b01 	strb.w	r6, [r5], #1
 8013cba:	9e00      	ldr	r6, [sp, #0]
 8013cbc:	1bae      	subs	r6, r5, r6
 8013cbe:	42b7      	cmp	r7, r6
 8013cc0:	4602      	mov	r2, r0
 8013cc2:	460b      	mov	r3, r1
 8013cc4:	d134      	bne.n	8013d30 <_dtoa_r+0x708>
 8013cc6:	f7ec fb09 	bl	80002dc <__adddf3>
 8013cca:	4642      	mov	r2, r8
 8013ccc:	464b      	mov	r3, r9
 8013cce:	4606      	mov	r6, r0
 8013cd0:	460f      	mov	r7, r1
 8013cd2:	f7ec ff49 	bl	8000b68 <__aeabi_dcmpgt>
 8013cd6:	b9c8      	cbnz	r0, 8013d0c <_dtoa_r+0x6e4>
 8013cd8:	4642      	mov	r2, r8
 8013cda:	464b      	mov	r3, r9
 8013cdc:	4630      	mov	r0, r6
 8013cde:	4639      	mov	r1, r7
 8013ce0:	f7ec ff1a 	bl	8000b18 <__aeabi_dcmpeq>
 8013ce4:	b110      	cbz	r0, 8013cec <_dtoa_r+0x6c4>
 8013ce6:	9b01      	ldr	r3, [sp, #4]
 8013ce8:	07db      	lsls	r3, r3, #31
 8013cea:	d40f      	bmi.n	8013d0c <_dtoa_r+0x6e4>
 8013cec:	4651      	mov	r1, sl
 8013cee:	4620      	mov	r0, r4
 8013cf0:	f000 fbcc 	bl	801448c <_Bfree>
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013cf8:	702b      	strb	r3, [r5, #0]
 8013cfa:	f10b 0301 	add.w	r3, fp, #1
 8013cfe:	6013      	str	r3, [r2, #0]
 8013d00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	f43f ace2 	beq.w	80136cc <_dtoa_r+0xa4>
 8013d08:	601d      	str	r5, [r3, #0]
 8013d0a:	e4df      	b.n	80136cc <_dtoa_r+0xa4>
 8013d0c:	465f      	mov	r7, fp
 8013d0e:	462b      	mov	r3, r5
 8013d10:	461d      	mov	r5, r3
 8013d12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013d16:	2a39      	cmp	r2, #57	; 0x39
 8013d18:	d106      	bne.n	8013d28 <_dtoa_r+0x700>
 8013d1a:	9a00      	ldr	r2, [sp, #0]
 8013d1c:	429a      	cmp	r2, r3
 8013d1e:	d1f7      	bne.n	8013d10 <_dtoa_r+0x6e8>
 8013d20:	9900      	ldr	r1, [sp, #0]
 8013d22:	2230      	movs	r2, #48	; 0x30
 8013d24:	3701      	adds	r7, #1
 8013d26:	700a      	strb	r2, [r1, #0]
 8013d28:	781a      	ldrb	r2, [r3, #0]
 8013d2a:	3201      	adds	r2, #1
 8013d2c:	701a      	strb	r2, [r3, #0]
 8013d2e:	e790      	b.n	8013c52 <_dtoa_r+0x62a>
 8013d30:	4ba3      	ldr	r3, [pc, #652]	; (8013fc0 <_dtoa_r+0x998>)
 8013d32:	2200      	movs	r2, #0
 8013d34:	f7ec fc88 	bl	8000648 <__aeabi_dmul>
 8013d38:	2200      	movs	r2, #0
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	4606      	mov	r6, r0
 8013d3e:	460f      	mov	r7, r1
 8013d40:	f7ec feea 	bl	8000b18 <__aeabi_dcmpeq>
 8013d44:	2800      	cmp	r0, #0
 8013d46:	d09e      	beq.n	8013c86 <_dtoa_r+0x65e>
 8013d48:	e7d0      	b.n	8013cec <_dtoa_r+0x6c4>
 8013d4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d4c:	2a00      	cmp	r2, #0
 8013d4e:	f000 80ca 	beq.w	8013ee6 <_dtoa_r+0x8be>
 8013d52:	9a07      	ldr	r2, [sp, #28]
 8013d54:	2a01      	cmp	r2, #1
 8013d56:	f300 80ad 	bgt.w	8013eb4 <_dtoa_r+0x88c>
 8013d5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013d5c:	2a00      	cmp	r2, #0
 8013d5e:	f000 80a5 	beq.w	8013eac <_dtoa_r+0x884>
 8013d62:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013d66:	9e08      	ldr	r6, [sp, #32]
 8013d68:	9d05      	ldr	r5, [sp, #20]
 8013d6a:	9a05      	ldr	r2, [sp, #20]
 8013d6c:	441a      	add	r2, r3
 8013d6e:	9205      	str	r2, [sp, #20]
 8013d70:	9a06      	ldr	r2, [sp, #24]
 8013d72:	2101      	movs	r1, #1
 8013d74:	441a      	add	r2, r3
 8013d76:	4620      	mov	r0, r4
 8013d78:	9206      	str	r2, [sp, #24]
 8013d7a:	f000 fc3d 	bl	80145f8 <__i2b>
 8013d7e:	4607      	mov	r7, r0
 8013d80:	b165      	cbz	r5, 8013d9c <_dtoa_r+0x774>
 8013d82:	9b06      	ldr	r3, [sp, #24]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	dd09      	ble.n	8013d9c <_dtoa_r+0x774>
 8013d88:	42ab      	cmp	r3, r5
 8013d8a:	9a05      	ldr	r2, [sp, #20]
 8013d8c:	bfa8      	it	ge
 8013d8e:	462b      	movge	r3, r5
 8013d90:	1ad2      	subs	r2, r2, r3
 8013d92:	9205      	str	r2, [sp, #20]
 8013d94:	9a06      	ldr	r2, [sp, #24]
 8013d96:	1aed      	subs	r5, r5, r3
 8013d98:	1ad3      	subs	r3, r2, r3
 8013d9a:	9306      	str	r3, [sp, #24]
 8013d9c:	9b08      	ldr	r3, [sp, #32]
 8013d9e:	b1f3      	cbz	r3, 8013dde <_dtoa_r+0x7b6>
 8013da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	f000 80a3 	beq.w	8013eee <_dtoa_r+0x8c6>
 8013da8:	2e00      	cmp	r6, #0
 8013daa:	dd10      	ble.n	8013dce <_dtoa_r+0x7a6>
 8013dac:	4639      	mov	r1, r7
 8013dae:	4632      	mov	r2, r6
 8013db0:	4620      	mov	r0, r4
 8013db2:	f000 fce1 	bl	8014778 <__pow5mult>
 8013db6:	4652      	mov	r2, sl
 8013db8:	4601      	mov	r1, r0
 8013dba:	4607      	mov	r7, r0
 8013dbc:	4620      	mov	r0, r4
 8013dbe:	f000 fc31 	bl	8014624 <__multiply>
 8013dc2:	4651      	mov	r1, sl
 8013dc4:	4680      	mov	r8, r0
 8013dc6:	4620      	mov	r0, r4
 8013dc8:	f000 fb60 	bl	801448c <_Bfree>
 8013dcc:	46c2      	mov	sl, r8
 8013dce:	9b08      	ldr	r3, [sp, #32]
 8013dd0:	1b9a      	subs	r2, r3, r6
 8013dd2:	d004      	beq.n	8013dde <_dtoa_r+0x7b6>
 8013dd4:	4651      	mov	r1, sl
 8013dd6:	4620      	mov	r0, r4
 8013dd8:	f000 fcce 	bl	8014778 <__pow5mult>
 8013ddc:	4682      	mov	sl, r0
 8013dde:	2101      	movs	r1, #1
 8013de0:	4620      	mov	r0, r4
 8013de2:	f000 fc09 	bl	80145f8 <__i2b>
 8013de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	4606      	mov	r6, r0
 8013dec:	f340 8081 	ble.w	8013ef2 <_dtoa_r+0x8ca>
 8013df0:	461a      	mov	r2, r3
 8013df2:	4601      	mov	r1, r0
 8013df4:	4620      	mov	r0, r4
 8013df6:	f000 fcbf 	bl	8014778 <__pow5mult>
 8013dfa:	9b07      	ldr	r3, [sp, #28]
 8013dfc:	2b01      	cmp	r3, #1
 8013dfe:	4606      	mov	r6, r0
 8013e00:	dd7a      	ble.n	8013ef8 <_dtoa_r+0x8d0>
 8013e02:	f04f 0800 	mov.w	r8, #0
 8013e06:	6933      	ldr	r3, [r6, #16]
 8013e08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013e0c:	6918      	ldr	r0, [r3, #16]
 8013e0e:	f000 fba5 	bl	801455c <__hi0bits>
 8013e12:	f1c0 0020 	rsb	r0, r0, #32
 8013e16:	9b06      	ldr	r3, [sp, #24]
 8013e18:	4418      	add	r0, r3
 8013e1a:	f010 001f 	ands.w	r0, r0, #31
 8013e1e:	f000 8094 	beq.w	8013f4a <_dtoa_r+0x922>
 8013e22:	f1c0 0320 	rsb	r3, r0, #32
 8013e26:	2b04      	cmp	r3, #4
 8013e28:	f340 8085 	ble.w	8013f36 <_dtoa_r+0x90e>
 8013e2c:	9b05      	ldr	r3, [sp, #20]
 8013e2e:	f1c0 001c 	rsb	r0, r0, #28
 8013e32:	4403      	add	r3, r0
 8013e34:	9305      	str	r3, [sp, #20]
 8013e36:	9b06      	ldr	r3, [sp, #24]
 8013e38:	4403      	add	r3, r0
 8013e3a:	4405      	add	r5, r0
 8013e3c:	9306      	str	r3, [sp, #24]
 8013e3e:	9b05      	ldr	r3, [sp, #20]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	dd05      	ble.n	8013e50 <_dtoa_r+0x828>
 8013e44:	4651      	mov	r1, sl
 8013e46:	461a      	mov	r2, r3
 8013e48:	4620      	mov	r0, r4
 8013e4a:	f000 fcef 	bl	801482c <__lshift>
 8013e4e:	4682      	mov	sl, r0
 8013e50:	9b06      	ldr	r3, [sp, #24]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	dd05      	ble.n	8013e62 <_dtoa_r+0x83a>
 8013e56:	4631      	mov	r1, r6
 8013e58:	461a      	mov	r2, r3
 8013e5a:	4620      	mov	r0, r4
 8013e5c:	f000 fce6 	bl	801482c <__lshift>
 8013e60:	4606      	mov	r6, r0
 8013e62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d072      	beq.n	8013f4e <_dtoa_r+0x926>
 8013e68:	4631      	mov	r1, r6
 8013e6a:	4650      	mov	r0, sl
 8013e6c:	f000 fd4a 	bl	8014904 <__mcmp>
 8013e70:	2800      	cmp	r0, #0
 8013e72:	da6c      	bge.n	8013f4e <_dtoa_r+0x926>
 8013e74:	2300      	movs	r3, #0
 8013e76:	4651      	mov	r1, sl
 8013e78:	220a      	movs	r2, #10
 8013e7a:	4620      	mov	r0, r4
 8013e7c:	f000 fb28 	bl	80144d0 <__multadd>
 8013e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e82:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013e86:	4682      	mov	sl, r0
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	f000 81b0 	beq.w	80141ee <_dtoa_r+0xbc6>
 8013e8e:	2300      	movs	r3, #0
 8013e90:	4639      	mov	r1, r7
 8013e92:	220a      	movs	r2, #10
 8013e94:	4620      	mov	r0, r4
 8013e96:	f000 fb1b 	bl	80144d0 <__multadd>
 8013e9a:	9b01      	ldr	r3, [sp, #4]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	4607      	mov	r7, r0
 8013ea0:	f300 8096 	bgt.w	8013fd0 <_dtoa_r+0x9a8>
 8013ea4:	9b07      	ldr	r3, [sp, #28]
 8013ea6:	2b02      	cmp	r3, #2
 8013ea8:	dc59      	bgt.n	8013f5e <_dtoa_r+0x936>
 8013eaa:	e091      	b.n	8013fd0 <_dtoa_r+0x9a8>
 8013eac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013eae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013eb2:	e758      	b.n	8013d66 <_dtoa_r+0x73e>
 8013eb4:	9b04      	ldr	r3, [sp, #16]
 8013eb6:	1e5e      	subs	r6, r3, #1
 8013eb8:	9b08      	ldr	r3, [sp, #32]
 8013eba:	42b3      	cmp	r3, r6
 8013ebc:	bfbf      	itttt	lt
 8013ebe:	9b08      	ldrlt	r3, [sp, #32]
 8013ec0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8013ec2:	9608      	strlt	r6, [sp, #32]
 8013ec4:	1af3      	sublt	r3, r6, r3
 8013ec6:	bfb4      	ite	lt
 8013ec8:	18d2      	addlt	r2, r2, r3
 8013eca:	1b9e      	subge	r6, r3, r6
 8013ecc:	9b04      	ldr	r3, [sp, #16]
 8013ece:	bfbc      	itt	lt
 8013ed0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8013ed2:	2600      	movlt	r6, #0
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	bfb7      	itett	lt
 8013ed8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8013edc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8013ee0:	1a9d      	sublt	r5, r3, r2
 8013ee2:	2300      	movlt	r3, #0
 8013ee4:	e741      	b.n	8013d6a <_dtoa_r+0x742>
 8013ee6:	9e08      	ldr	r6, [sp, #32]
 8013ee8:	9d05      	ldr	r5, [sp, #20]
 8013eea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013eec:	e748      	b.n	8013d80 <_dtoa_r+0x758>
 8013eee:	9a08      	ldr	r2, [sp, #32]
 8013ef0:	e770      	b.n	8013dd4 <_dtoa_r+0x7ac>
 8013ef2:	9b07      	ldr	r3, [sp, #28]
 8013ef4:	2b01      	cmp	r3, #1
 8013ef6:	dc19      	bgt.n	8013f2c <_dtoa_r+0x904>
 8013ef8:	9b02      	ldr	r3, [sp, #8]
 8013efa:	b9bb      	cbnz	r3, 8013f2c <_dtoa_r+0x904>
 8013efc:	9b03      	ldr	r3, [sp, #12]
 8013efe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013f02:	b99b      	cbnz	r3, 8013f2c <_dtoa_r+0x904>
 8013f04:	9b03      	ldr	r3, [sp, #12]
 8013f06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013f0a:	0d1b      	lsrs	r3, r3, #20
 8013f0c:	051b      	lsls	r3, r3, #20
 8013f0e:	b183      	cbz	r3, 8013f32 <_dtoa_r+0x90a>
 8013f10:	9b05      	ldr	r3, [sp, #20]
 8013f12:	3301      	adds	r3, #1
 8013f14:	9305      	str	r3, [sp, #20]
 8013f16:	9b06      	ldr	r3, [sp, #24]
 8013f18:	3301      	adds	r3, #1
 8013f1a:	9306      	str	r3, [sp, #24]
 8013f1c:	f04f 0801 	mov.w	r8, #1
 8013f20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	f47f af6f 	bne.w	8013e06 <_dtoa_r+0x7de>
 8013f28:	2001      	movs	r0, #1
 8013f2a:	e774      	b.n	8013e16 <_dtoa_r+0x7ee>
 8013f2c:	f04f 0800 	mov.w	r8, #0
 8013f30:	e7f6      	b.n	8013f20 <_dtoa_r+0x8f8>
 8013f32:	4698      	mov	r8, r3
 8013f34:	e7f4      	b.n	8013f20 <_dtoa_r+0x8f8>
 8013f36:	d082      	beq.n	8013e3e <_dtoa_r+0x816>
 8013f38:	9a05      	ldr	r2, [sp, #20]
 8013f3a:	331c      	adds	r3, #28
 8013f3c:	441a      	add	r2, r3
 8013f3e:	9205      	str	r2, [sp, #20]
 8013f40:	9a06      	ldr	r2, [sp, #24]
 8013f42:	441a      	add	r2, r3
 8013f44:	441d      	add	r5, r3
 8013f46:	9206      	str	r2, [sp, #24]
 8013f48:	e779      	b.n	8013e3e <_dtoa_r+0x816>
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	e7f4      	b.n	8013f38 <_dtoa_r+0x910>
 8013f4e:	9b04      	ldr	r3, [sp, #16]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	dc37      	bgt.n	8013fc4 <_dtoa_r+0x99c>
 8013f54:	9b07      	ldr	r3, [sp, #28]
 8013f56:	2b02      	cmp	r3, #2
 8013f58:	dd34      	ble.n	8013fc4 <_dtoa_r+0x99c>
 8013f5a:	9b04      	ldr	r3, [sp, #16]
 8013f5c:	9301      	str	r3, [sp, #4]
 8013f5e:	9b01      	ldr	r3, [sp, #4]
 8013f60:	b963      	cbnz	r3, 8013f7c <_dtoa_r+0x954>
 8013f62:	4631      	mov	r1, r6
 8013f64:	2205      	movs	r2, #5
 8013f66:	4620      	mov	r0, r4
 8013f68:	f000 fab2 	bl	80144d0 <__multadd>
 8013f6c:	4601      	mov	r1, r0
 8013f6e:	4606      	mov	r6, r0
 8013f70:	4650      	mov	r0, sl
 8013f72:	f000 fcc7 	bl	8014904 <__mcmp>
 8013f76:	2800      	cmp	r0, #0
 8013f78:	f73f adbb 	bgt.w	8013af2 <_dtoa_r+0x4ca>
 8013f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f7e:	9d00      	ldr	r5, [sp, #0]
 8013f80:	ea6f 0b03 	mvn.w	fp, r3
 8013f84:	f04f 0800 	mov.w	r8, #0
 8013f88:	4631      	mov	r1, r6
 8013f8a:	4620      	mov	r0, r4
 8013f8c:	f000 fa7e 	bl	801448c <_Bfree>
 8013f90:	2f00      	cmp	r7, #0
 8013f92:	f43f aeab 	beq.w	8013cec <_dtoa_r+0x6c4>
 8013f96:	f1b8 0f00 	cmp.w	r8, #0
 8013f9a:	d005      	beq.n	8013fa8 <_dtoa_r+0x980>
 8013f9c:	45b8      	cmp	r8, r7
 8013f9e:	d003      	beq.n	8013fa8 <_dtoa_r+0x980>
 8013fa0:	4641      	mov	r1, r8
 8013fa2:	4620      	mov	r0, r4
 8013fa4:	f000 fa72 	bl	801448c <_Bfree>
 8013fa8:	4639      	mov	r1, r7
 8013faa:	4620      	mov	r0, r4
 8013fac:	f000 fa6e 	bl	801448c <_Bfree>
 8013fb0:	e69c      	b.n	8013cec <_dtoa_r+0x6c4>
 8013fb2:	2600      	movs	r6, #0
 8013fb4:	4637      	mov	r7, r6
 8013fb6:	e7e1      	b.n	8013f7c <_dtoa_r+0x954>
 8013fb8:	46bb      	mov	fp, r7
 8013fba:	4637      	mov	r7, r6
 8013fbc:	e599      	b.n	8013af2 <_dtoa_r+0x4ca>
 8013fbe:	bf00      	nop
 8013fc0:	40240000 	.word	0x40240000
 8013fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	f000 80c8 	beq.w	801415c <_dtoa_r+0xb34>
 8013fcc:	9b04      	ldr	r3, [sp, #16]
 8013fce:	9301      	str	r3, [sp, #4]
 8013fd0:	2d00      	cmp	r5, #0
 8013fd2:	dd05      	ble.n	8013fe0 <_dtoa_r+0x9b8>
 8013fd4:	4639      	mov	r1, r7
 8013fd6:	462a      	mov	r2, r5
 8013fd8:	4620      	mov	r0, r4
 8013fda:	f000 fc27 	bl	801482c <__lshift>
 8013fde:	4607      	mov	r7, r0
 8013fe0:	f1b8 0f00 	cmp.w	r8, #0
 8013fe4:	d05b      	beq.n	801409e <_dtoa_r+0xa76>
 8013fe6:	6879      	ldr	r1, [r7, #4]
 8013fe8:	4620      	mov	r0, r4
 8013fea:	f000 fa0f 	bl	801440c <_Balloc>
 8013fee:	4605      	mov	r5, r0
 8013ff0:	b928      	cbnz	r0, 8013ffe <_dtoa_r+0x9d6>
 8013ff2:	4b83      	ldr	r3, [pc, #524]	; (8014200 <_dtoa_r+0xbd8>)
 8013ff4:	4602      	mov	r2, r0
 8013ff6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8013ffa:	f7ff bb2e 	b.w	801365a <_dtoa_r+0x32>
 8013ffe:	693a      	ldr	r2, [r7, #16]
 8014000:	3202      	adds	r2, #2
 8014002:	0092      	lsls	r2, r2, #2
 8014004:	f107 010c 	add.w	r1, r7, #12
 8014008:	300c      	adds	r0, #12
 801400a:	f7ff fa75 	bl	80134f8 <memcpy>
 801400e:	2201      	movs	r2, #1
 8014010:	4629      	mov	r1, r5
 8014012:	4620      	mov	r0, r4
 8014014:	f000 fc0a 	bl	801482c <__lshift>
 8014018:	9b00      	ldr	r3, [sp, #0]
 801401a:	3301      	adds	r3, #1
 801401c:	9304      	str	r3, [sp, #16]
 801401e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014022:	4413      	add	r3, r2
 8014024:	9308      	str	r3, [sp, #32]
 8014026:	9b02      	ldr	r3, [sp, #8]
 8014028:	f003 0301 	and.w	r3, r3, #1
 801402c:	46b8      	mov	r8, r7
 801402e:	9306      	str	r3, [sp, #24]
 8014030:	4607      	mov	r7, r0
 8014032:	9b04      	ldr	r3, [sp, #16]
 8014034:	4631      	mov	r1, r6
 8014036:	3b01      	subs	r3, #1
 8014038:	4650      	mov	r0, sl
 801403a:	9301      	str	r3, [sp, #4]
 801403c:	f7ff fa6a 	bl	8013514 <quorem>
 8014040:	4641      	mov	r1, r8
 8014042:	9002      	str	r0, [sp, #8]
 8014044:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8014048:	4650      	mov	r0, sl
 801404a:	f000 fc5b 	bl	8014904 <__mcmp>
 801404e:	463a      	mov	r2, r7
 8014050:	9005      	str	r0, [sp, #20]
 8014052:	4631      	mov	r1, r6
 8014054:	4620      	mov	r0, r4
 8014056:	f000 fc71 	bl	801493c <__mdiff>
 801405a:	68c2      	ldr	r2, [r0, #12]
 801405c:	4605      	mov	r5, r0
 801405e:	bb02      	cbnz	r2, 80140a2 <_dtoa_r+0xa7a>
 8014060:	4601      	mov	r1, r0
 8014062:	4650      	mov	r0, sl
 8014064:	f000 fc4e 	bl	8014904 <__mcmp>
 8014068:	4602      	mov	r2, r0
 801406a:	4629      	mov	r1, r5
 801406c:	4620      	mov	r0, r4
 801406e:	9209      	str	r2, [sp, #36]	; 0x24
 8014070:	f000 fa0c 	bl	801448c <_Bfree>
 8014074:	9b07      	ldr	r3, [sp, #28]
 8014076:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014078:	9d04      	ldr	r5, [sp, #16]
 801407a:	ea43 0102 	orr.w	r1, r3, r2
 801407e:	9b06      	ldr	r3, [sp, #24]
 8014080:	4319      	orrs	r1, r3
 8014082:	d110      	bne.n	80140a6 <_dtoa_r+0xa7e>
 8014084:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014088:	d029      	beq.n	80140de <_dtoa_r+0xab6>
 801408a:	9b05      	ldr	r3, [sp, #20]
 801408c:	2b00      	cmp	r3, #0
 801408e:	dd02      	ble.n	8014096 <_dtoa_r+0xa6e>
 8014090:	9b02      	ldr	r3, [sp, #8]
 8014092:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8014096:	9b01      	ldr	r3, [sp, #4]
 8014098:	f883 9000 	strb.w	r9, [r3]
 801409c:	e774      	b.n	8013f88 <_dtoa_r+0x960>
 801409e:	4638      	mov	r0, r7
 80140a0:	e7ba      	b.n	8014018 <_dtoa_r+0x9f0>
 80140a2:	2201      	movs	r2, #1
 80140a4:	e7e1      	b.n	801406a <_dtoa_r+0xa42>
 80140a6:	9b05      	ldr	r3, [sp, #20]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	db04      	blt.n	80140b6 <_dtoa_r+0xa8e>
 80140ac:	9907      	ldr	r1, [sp, #28]
 80140ae:	430b      	orrs	r3, r1
 80140b0:	9906      	ldr	r1, [sp, #24]
 80140b2:	430b      	orrs	r3, r1
 80140b4:	d120      	bne.n	80140f8 <_dtoa_r+0xad0>
 80140b6:	2a00      	cmp	r2, #0
 80140b8:	dded      	ble.n	8014096 <_dtoa_r+0xa6e>
 80140ba:	4651      	mov	r1, sl
 80140bc:	2201      	movs	r2, #1
 80140be:	4620      	mov	r0, r4
 80140c0:	f000 fbb4 	bl	801482c <__lshift>
 80140c4:	4631      	mov	r1, r6
 80140c6:	4682      	mov	sl, r0
 80140c8:	f000 fc1c 	bl	8014904 <__mcmp>
 80140cc:	2800      	cmp	r0, #0
 80140ce:	dc03      	bgt.n	80140d8 <_dtoa_r+0xab0>
 80140d0:	d1e1      	bne.n	8014096 <_dtoa_r+0xa6e>
 80140d2:	f019 0f01 	tst.w	r9, #1
 80140d6:	d0de      	beq.n	8014096 <_dtoa_r+0xa6e>
 80140d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80140dc:	d1d8      	bne.n	8014090 <_dtoa_r+0xa68>
 80140de:	9a01      	ldr	r2, [sp, #4]
 80140e0:	2339      	movs	r3, #57	; 0x39
 80140e2:	7013      	strb	r3, [r2, #0]
 80140e4:	462b      	mov	r3, r5
 80140e6:	461d      	mov	r5, r3
 80140e8:	3b01      	subs	r3, #1
 80140ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80140ee:	2a39      	cmp	r2, #57	; 0x39
 80140f0:	d06c      	beq.n	80141cc <_dtoa_r+0xba4>
 80140f2:	3201      	adds	r2, #1
 80140f4:	701a      	strb	r2, [r3, #0]
 80140f6:	e747      	b.n	8013f88 <_dtoa_r+0x960>
 80140f8:	2a00      	cmp	r2, #0
 80140fa:	dd07      	ble.n	801410c <_dtoa_r+0xae4>
 80140fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014100:	d0ed      	beq.n	80140de <_dtoa_r+0xab6>
 8014102:	9a01      	ldr	r2, [sp, #4]
 8014104:	f109 0301 	add.w	r3, r9, #1
 8014108:	7013      	strb	r3, [r2, #0]
 801410a:	e73d      	b.n	8013f88 <_dtoa_r+0x960>
 801410c:	9b04      	ldr	r3, [sp, #16]
 801410e:	9a08      	ldr	r2, [sp, #32]
 8014110:	f803 9c01 	strb.w	r9, [r3, #-1]
 8014114:	4293      	cmp	r3, r2
 8014116:	d043      	beq.n	80141a0 <_dtoa_r+0xb78>
 8014118:	4651      	mov	r1, sl
 801411a:	2300      	movs	r3, #0
 801411c:	220a      	movs	r2, #10
 801411e:	4620      	mov	r0, r4
 8014120:	f000 f9d6 	bl	80144d0 <__multadd>
 8014124:	45b8      	cmp	r8, r7
 8014126:	4682      	mov	sl, r0
 8014128:	f04f 0300 	mov.w	r3, #0
 801412c:	f04f 020a 	mov.w	r2, #10
 8014130:	4641      	mov	r1, r8
 8014132:	4620      	mov	r0, r4
 8014134:	d107      	bne.n	8014146 <_dtoa_r+0xb1e>
 8014136:	f000 f9cb 	bl	80144d0 <__multadd>
 801413a:	4680      	mov	r8, r0
 801413c:	4607      	mov	r7, r0
 801413e:	9b04      	ldr	r3, [sp, #16]
 8014140:	3301      	adds	r3, #1
 8014142:	9304      	str	r3, [sp, #16]
 8014144:	e775      	b.n	8014032 <_dtoa_r+0xa0a>
 8014146:	f000 f9c3 	bl	80144d0 <__multadd>
 801414a:	4639      	mov	r1, r7
 801414c:	4680      	mov	r8, r0
 801414e:	2300      	movs	r3, #0
 8014150:	220a      	movs	r2, #10
 8014152:	4620      	mov	r0, r4
 8014154:	f000 f9bc 	bl	80144d0 <__multadd>
 8014158:	4607      	mov	r7, r0
 801415a:	e7f0      	b.n	801413e <_dtoa_r+0xb16>
 801415c:	9b04      	ldr	r3, [sp, #16]
 801415e:	9301      	str	r3, [sp, #4]
 8014160:	9d00      	ldr	r5, [sp, #0]
 8014162:	4631      	mov	r1, r6
 8014164:	4650      	mov	r0, sl
 8014166:	f7ff f9d5 	bl	8013514 <quorem>
 801416a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801416e:	9b00      	ldr	r3, [sp, #0]
 8014170:	f805 9b01 	strb.w	r9, [r5], #1
 8014174:	1aea      	subs	r2, r5, r3
 8014176:	9b01      	ldr	r3, [sp, #4]
 8014178:	4293      	cmp	r3, r2
 801417a:	dd07      	ble.n	801418c <_dtoa_r+0xb64>
 801417c:	4651      	mov	r1, sl
 801417e:	2300      	movs	r3, #0
 8014180:	220a      	movs	r2, #10
 8014182:	4620      	mov	r0, r4
 8014184:	f000 f9a4 	bl	80144d0 <__multadd>
 8014188:	4682      	mov	sl, r0
 801418a:	e7ea      	b.n	8014162 <_dtoa_r+0xb3a>
 801418c:	9b01      	ldr	r3, [sp, #4]
 801418e:	2b00      	cmp	r3, #0
 8014190:	bfc8      	it	gt
 8014192:	461d      	movgt	r5, r3
 8014194:	9b00      	ldr	r3, [sp, #0]
 8014196:	bfd8      	it	le
 8014198:	2501      	movle	r5, #1
 801419a:	441d      	add	r5, r3
 801419c:	f04f 0800 	mov.w	r8, #0
 80141a0:	4651      	mov	r1, sl
 80141a2:	2201      	movs	r2, #1
 80141a4:	4620      	mov	r0, r4
 80141a6:	f000 fb41 	bl	801482c <__lshift>
 80141aa:	4631      	mov	r1, r6
 80141ac:	4682      	mov	sl, r0
 80141ae:	f000 fba9 	bl	8014904 <__mcmp>
 80141b2:	2800      	cmp	r0, #0
 80141b4:	dc96      	bgt.n	80140e4 <_dtoa_r+0xabc>
 80141b6:	d102      	bne.n	80141be <_dtoa_r+0xb96>
 80141b8:	f019 0f01 	tst.w	r9, #1
 80141bc:	d192      	bne.n	80140e4 <_dtoa_r+0xabc>
 80141be:	462b      	mov	r3, r5
 80141c0:	461d      	mov	r5, r3
 80141c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80141c6:	2a30      	cmp	r2, #48	; 0x30
 80141c8:	d0fa      	beq.n	80141c0 <_dtoa_r+0xb98>
 80141ca:	e6dd      	b.n	8013f88 <_dtoa_r+0x960>
 80141cc:	9a00      	ldr	r2, [sp, #0]
 80141ce:	429a      	cmp	r2, r3
 80141d0:	d189      	bne.n	80140e6 <_dtoa_r+0xabe>
 80141d2:	f10b 0b01 	add.w	fp, fp, #1
 80141d6:	2331      	movs	r3, #49	; 0x31
 80141d8:	e796      	b.n	8014108 <_dtoa_r+0xae0>
 80141da:	4b0a      	ldr	r3, [pc, #40]	; (8014204 <_dtoa_r+0xbdc>)
 80141dc:	f7ff ba99 	b.w	8013712 <_dtoa_r+0xea>
 80141e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	f47f aa6d 	bne.w	80136c2 <_dtoa_r+0x9a>
 80141e8:	4b07      	ldr	r3, [pc, #28]	; (8014208 <_dtoa_r+0xbe0>)
 80141ea:	f7ff ba92 	b.w	8013712 <_dtoa_r+0xea>
 80141ee:	9b01      	ldr	r3, [sp, #4]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	dcb5      	bgt.n	8014160 <_dtoa_r+0xb38>
 80141f4:	9b07      	ldr	r3, [sp, #28]
 80141f6:	2b02      	cmp	r3, #2
 80141f8:	f73f aeb1 	bgt.w	8013f5e <_dtoa_r+0x936>
 80141fc:	e7b0      	b.n	8014160 <_dtoa_r+0xb38>
 80141fe:	bf00      	nop
 8014200:	08015738 	.word	0x08015738
 8014204:	08015698 	.word	0x08015698
 8014208:	080156bc 	.word	0x080156bc

0801420c <_free_r>:
 801420c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801420e:	2900      	cmp	r1, #0
 8014210:	d044      	beq.n	801429c <_free_r+0x90>
 8014212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014216:	9001      	str	r0, [sp, #4]
 8014218:	2b00      	cmp	r3, #0
 801421a:	f1a1 0404 	sub.w	r4, r1, #4
 801421e:	bfb8      	it	lt
 8014220:	18e4      	addlt	r4, r4, r3
 8014222:	f000 f8e7 	bl	80143f4 <__malloc_lock>
 8014226:	4a1e      	ldr	r2, [pc, #120]	; (80142a0 <_free_r+0x94>)
 8014228:	9801      	ldr	r0, [sp, #4]
 801422a:	6813      	ldr	r3, [r2, #0]
 801422c:	b933      	cbnz	r3, 801423c <_free_r+0x30>
 801422e:	6063      	str	r3, [r4, #4]
 8014230:	6014      	str	r4, [r2, #0]
 8014232:	b003      	add	sp, #12
 8014234:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014238:	f000 b8e2 	b.w	8014400 <__malloc_unlock>
 801423c:	42a3      	cmp	r3, r4
 801423e:	d908      	bls.n	8014252 <_free_r+0x46>
 8014240:	6825      	ldr	r5, [r4, #0]
 8014242:	1961      	adds	r1, r4, r5
 8014244:	428b      	cmp	r3, r1
 8014246:	bf01      	itttt	eq
 8014248:	6819      	ldreq	r1, [r3, #0]
 801424a:	685b      	ldreq	r3, [r3, #4]
 801424c:	1949      	addeq	r1, r1, r5
 801424e:	6021      	streq	r1, [r4, #0]
 8014250:	e7ed      	b.n	801422e <_free_r+0x22>
 8014252:	461a      	mov	r2, r3
 8014254:	685b      	ldr	r3, [r3, #4]
 8014256:	b10b      	cbz	r3, 801425c <_free_r+0x50>
 8014258:	42a3      	cmp	r3, r4
 801425a:	d9fa      	bls.n	8014252 <_free_r+0x46>
 801425c:	6811      	ldr	r1, [r2, #0]
 801425e:	1855      	adds	r5, r2, r1
 8014260:	42a5      	cmp	r5, r4
 8014262:	d10b      	bne.n	801427c <_free_r+0x70>
 8014264:	6824      	ldr	r4, [r4, #0]
 8014266:	4421      	add	r1, r4
 8014268:	1854      	adds	r4, r2, r1
 801426a:	42a3      	cmp	r3, r4
 801426c:	6011      	str	r1, [r2, #0]
 801426e:	d1e0      	bne.n	8014232 <_free_r+0x26>
 8014270:	681c      	ldr	r4, [r3, #0]
 8014272:	685b      	ldr	r3, [r3, #4]
 8014274:	6053      	str	r3, [r2, #4]
 8014276:	440c      	add	r4, r1
 8014278:	6014      	str	r4, [r2, #0]
 801427a:	e7da      	b.n	8014232 <_free_r+0x26>
 801427c:	d902      	bls.n	8014284 <_free_r+0x78>
 801427e:	230c      	movs	r3, #12
 8014280:	6003      	str	r3, [r0, #0]
 8014282:	e7d6      	b.n	8014232 <_free_r+0x26>
 8014284:	6825      	ldr	r5, [r4, #0]
 8014286:	1961      	adds	r1, r4, r5
 8014288:	428b      	cmp	r3, r1
 801428a:	bf04      	itt	eq
 801428c:	6819      	ldreq	r1, [r3, #0]
 801428e:	685b      	ldreq	r3, [r3, #4]
 8014290:	6063      	str	r3, [r4, #4]
 8014292:	bf04      	itt	eq
 8014294:	1949      	addeq	r1, r1, r5
 8014296:	6021      	streq	r1, [r4, #0]
 8014298:	6054      	str	r4, [r2, #4]
 801429a:	e7ca      	b.n	8014232 <_free_r+0x26>
 801429c:	b003      	add	sp, #12
 801429e:	bd30      	pop	{r4, r5, pc}
 80142a0:	200067d4 	.word	0x200067d4

080142a4 <malloc>:
 80142a4:	4b02      	ldr	r3, [pc, #8]	; (80142b0 <malloc+0xc>)
 80142a6:	4601      	mov	r1, r0
 80142a8:	6818      	ldr	r0, [r3, #0]
 80142aa:	f000 b823 	b.w	80142f4 <_malloc_r>
 80142ae:	bf00      	nop
 80142b0:	200001e0 	.word	0x200001e0

080142b4 <sbrk_aligned>:
 80142b4:	b570      	push	{r4, r5, r6, lr}
 80142b6:	4e0e      	ldr	r6, [pc, #56]	; (80142f0 <sbrk_aligned+0x3c>)
 80142b8:	460c      	mov	r4, r1
 80142ba:	6831      	ldr	r1, [r6, #0]
 80142bc:	4605      	mov	r5, r0
 80142be:	b911      	cbnz	r1, 80142c6 <sbrk_aligned+0x12>
 80142c0:	f000 fe96 	bl	8014ff0 <_sbrk_r>
 80142c4:	6030      	str	r0, [r6, #0]
 80142c6:	4621      	mov	r1, r4
 80142c8:	4628      	mov	r0, r5
 80142ca:	f000 fe91 	bl	8014ff0 <_sbrk_r>
 80142ce:	1c43      	adds	r3, r0, #1
 80142d0:	d00a      	beq.n	80142e8 <sbrk_aligned+0x34>
 80142d2:	1cc4      	adds	r4, r0, #3
 80142d4:	f024 0403 	bic.w	r4, r4, #3
 80142d8:	42a0      	cmp	r0, r4
 80142da:	d007      	beq.n	80142ec <sbrk_aligned+0x38>
 80142dc:	1a21      	subs	r1, r4, r0
 80142de:	4628      	mov	r0, r5
 80142e0:	f000 fe86 	bl	8014ff0 <_sbrk_r>
 80142e4:	3001      	adds	r0, #1
 80142e6:	d101      	bne.n	80142ec <sbrk_aligned+0x38>
 80142e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80142ec:	4620      	mov	r0, r4
 80142ee:	bd70      	pop	{r4, r5, r6, pc}
 80142f0:	200067d8 	.word	0x200067d8

080142f4 <_malloc_r>:
 80142f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142f8:	1ccd      	adds	r5, r1, #3
 80142fa:	f025 0503 	bic.w	r5, r5, #3
 80142fe:	3508      	adds	r5, #8
 8014300:	2d0c      	cmp	r5, #12
 8014302:	bf38      	it	cc
 8014304:	250c      	movcc	r5, #12
 8014306:	2d00      	cmp	r5, #0
 8014308:	4607      	mov	r7, r0
 801430a:	db01      	blt.n	8014310 <_malloc_r+0x1c>
 801430c:	42a9      	cmp	r1, r5
 801430e:	d905      	bls.n	801431c <_malloc_r+0x28>
 8014310:	230c      	movs	r3, #12
 8014312:	603b      	str	r3, [r7, #0]
 8014314:	2600      	movs	r6, #0
 8014316:	4630      	mov	r0, r6
 8014318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801431c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80143f0 <_malloc_r+0xfc>
 8014320:	f000 f868 	bl	80143f4 <__malloc_lock>
 8014324:	f8d8 3000 	ldr.w	r3, [r8]
 8014328:	461c      	mov	r4, r3
 801432a:	bb5c      	cbnz	r4, 8014384 <_malloc_r+0x90>
 801432c:	4629      	mov	r1, r5
 801432e:	4638      	mov	r0, r7
 8014330:	f7ff ffc0 	bl	80142b4 <sbrk_aligned>
 8014334:	1c43      	adds	r3, r0, #1
 8014336:	4604      	mov	r4, r0
 8014338:	d155      	bne.n	80143e6 <_malloc_r+0xf2>
 801433a:	f8d8 4000 	ldr.w	r4, [r8]
 801433e:	4626      	mov	r6, r4
 8014340:	2e00      	cmp	r6, #0
 8014342:	d145      	bne.n	80143d0 <_malloc_r+0xdc>
 8014344:	2c00      	cmp	r4, #0
 8014346:	d048      	beq.n	80143da <_malloc_r+0xe6>
 8014348:	6823      	ldr	r3, [r4, #0]
 801434a:	4631      	mov	r1, r6
 801434c:	4638      	mov	r0, r7
 801434e:	eb04 0903 	add.w	r9, r4, r3
 8014352:	f000 fe4d 	bl	8014ff0 <_sbrk_r>
 8014356:	4581      	cmp	r9, r0
 8014358:	d13f      	bne.n	80143da <_malloc_r+0xe6>
 801435a:	6821      	ldr	r1, [r4, #0]
 801435c:	1a6d      	subs	r5, r5, r1
 801435e:	4629      	mov	r1, r5
 8014360:	4638      	mov	r0, r7
 8014362:	f7ff ffa7 	bl	80142b4 <sbrk_aligned>
 8014366:	3001      	adds	r0, #1
 8014368:	d037      	beq.n	80143da <_malloc_r+0xe6>
 801436a:	6823      	ldr	r3, [r4, #0]
 801436c:	442b      	add	r3, r5
 801436e:	6023      	str	r3, [r4, #0]
 8014370:	f8d8 3000 	ldr.w	r3, [r8]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d038      	beq.n	80143ea <_malloc_r+0xf6>
 8014378:	685a      	ldr	r2, [r3, #4]
 801437a:	42a2      	cmp	r2, r4
 801437c:	d12b      	bne.n	80143d6 <_malloc_r+0xe2>
 801437e:	2200      	movs	r2, #0
 8014380:	605a      	str	r2, [r3, #4]
 8014382:	e00f      	b.n	80143a4 <_malloc_r+0xb0>
 8014384:	6822      	ldr	r2, [r4, #0]
 8014386:	1b52      	subs	r2, r2, r5
 8014388:	d41f      	bmi.n	80143ca <_malloc_r+0xd6>
 801438a:	2a0b      	cmp	r2, #11
 801438c:	d917      	bls.n	80143be <_malloc_r+0xca>
 801438e:	1961      	adds	r1, r4, r5
 8014390:	42a3      	cmp	r3, r4
 8014392:	6025      	str	r5, [r4, #0]
 8014394:	bf18      	it	ne
 8014396:	6059      	strne	r1, [r3, #4]
 8014398:	6863      	ldr	r3, [r4, #4]
 801439a:	bf08      	it	eq
 801439c:	f8c8 1000 	streq.w	r1, [r8]
 80143a0:	5162      	str	r2, [r4, r5]
 80143a2:	604b      	str	r3, [r1, #4]
 80143a4:	4638      	mov	r0, r7
 80143a6:	f104 060b 	add.w	r6, r4, #11
 80143aa:	f000 f829 	bl	8014400 <__malloc_unlock>
 80143ae:	f026 0607 	bic.w	r6, r6, #7
 80143b2:	1d23      	adds	r3, r4, #4
 80143b4:	1af2      	subs	r2, r6, r3
 80143b6:	d0ae      	beq.n	8014316 <_malloc_r+0x22>
 80143b8:	1b9b      	subs	r3, r3, r6
 80143ba:	50a3      	str	r3, [r4, r2]
 80143bc:	e7ab      	b.n	8014316 <_malloc_r+0x22>
 80143be:	42a3      	cmp	r3, r4
 80143c0:	6862      	ldr	r2, [r4, #4]
 80143c2:	d1dd      	bne.n	8014380 <_malloc_r+0x8c>
 80143c4:	f8c8 2000 	str.w	r2, [r8]
 80143c8:	e7ec      	b.n	80143a4 <_malloc_r+0xb0>
 80143ca:	4623      	mov	r3, r4
 80143cc:	6864      	ldr	r4, [r4, #4]
 80143ce:	e7ac      	b.n	801432a <_malloc_r+0x36>
 80143d0:	4634      	mov	r4, r6
 80143d2:	6876      	ldr	r6, [r6, #4]
 80143d4:	e7b4      	b.n	8014340 <_malloc_r+0x4c>
 80143d6:	4613      	mov	r3, r2
 80143d8:	e7cc      	b.n	8014374 <_malloc_r+0x80>
 80143da:	230c      	movs	r3, #12
 80143dc:	603b      	str	r3, [r7, #0]
 80143de:	4638      	mov	r0, r7
 80143e0:	f000 f80e 	bl	8014400 <__malloc_unlock>
 80143e4:	e797      	b.n	8014316 <_malloc_r+0x22>
 80143e6:	6025      	str	r5, [r4, #0]
 80143e8:	e7dc      	b.n	80143a4 <_malloc_r+0xb0>
 80143ea:	605b      	str	r3, [r3, #4]
 80143ec:	deff      	udf	#255	; 0xff
 80143ee:	bf00      	nop
 80143f0:	200067d4 	.word	0x200067d4

080143f4 <__malloc_lock>:
 80143f4:	4801      	ldr	r0, [pc, #4]	; (80143fc <__malloc_lock+0x8>)
 80143f6:	f7ff b87d 	b.w	80134f4 <__retarget_lock_acquire_recursive>
 80143fa:	bf00      	nop
 80143fc:	200067d0 	.word	0x200067d0

08014400 <__malloc_unlock>:
 8014400:	4801      	ldr	r0, [pc, #4]	; (8014408 <__malloc_unlock+0x8>)
 8014402:	f7ff b878 	b.w	80134f6 <__retarget_lock_release_recursive>
 8014406:	bf00      	nop
 8014408:	200067d0 	.word	0x200067d0

0801440c <_Balloc>:
 801440c:	b570      	push	{r4, r5, r6, lr}
 801440e:	69c6      	ldr	r6, [r0, #28]
 8014410:	4604      	mov	r4, r0
 8014412:	460d      	mov	r5, r1
 8014414:	b976      	cbnz	r6, 8014434 <_Balloc+0x28>
 8014416:	2010      	movs	r0, #16
 8014418:	f7ff ff44 	bl	80142a4 <malloc>
 801441c:	4602      	mov	r2, r0
 801441e:	61e0      	str	r0, [r4, #28]
 8014420:	b920      	cbnz	r0, 801442c <_Balloc+0x20>
 8014422:	4b18      	ldr	r3, [pc, #96]	; (8014484 <_Balloc+0x78>)
 8014424:	4818      	ldr	r0, [pc, #96]	; (8014488 <_Balloc+0x7c>)
 8014426:	216b      	movs	r1, #107	; 0x6b
 8014428:	f000 fdf2 	bl	8015010 <__assert_func>
 801442c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014430:	6006      	str	r6, [r0, #0]
 8014432:	60c6      	str	r6, [r0, #12]
 8014434:	69e6      	ldr	r6, [r4, #28]
 8014436:	68f3      	ldr	r3, [r6, #12]
 8014438:	b183      	cbz	r3, 801445c <_Balloc+0x50>
 801443a:	69e3      	ldr	r3, [r4, #28]
 801443c:	68db      	ldr	r3, [r3, #12]
 801443e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014442:	b9b8      	cbnz	r0, 8014474 <_Balloc+0x68>
 8014444:	2101      	movs	r1, #1
 8014446:	fa01 f605 	lsl.w	r6, r1, r5
 801444a:	1d72      	adds	r2, r6, #5
 801444c:	0092      	lsls	r2, r2, #2
 801444e:	4620      	mov	r0, r4
 8014450:	f000 fdfc 	bl	801504c <_calloc_r>
 8014454:	b160      	cbz	r0, 8014470 <_Balloc+0x64>
 8014456:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801445a:	e00e      	b.n	801447a <_Balloc+0x6e>
 801445c:	2221      	movs	r2, #33	; 0x21
 801445e:	2104      	movs	r1, #4
 8014460:	4620      	mov	r0, r4
 8014462:	f000 fdf3 	bl	801504c <_calloc_r>
 8014466:	69e3      	ldr	r3, [r4, #28]
 8014468:	60f0      	str	r0, [r6, #12]
 801446a:	68db      	ldr	r3, [r3, #12]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d1e4      	bne.n	801443a <_Balloc+0x2e>
 8014470:	2000      	movs	r0, #0
 8014472:	bd70      	pop	{r4, r5, r6, pc}
 8014474:	6802      	ldr	r2, [r0, #0]
 8014476:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801447a:	2300      	movs	r3, #0
 801447c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014480:	e7f7      	b.n	8014472 <_Balloc+0x66>
 8014482:	bf00      	nop
 8014484:	080156c9 	.word	0x080156c9
 8014488:	08015749 	.word	0x08015749

0801448c <_Bfree>:
 801448c:	b570      	push	{r4, r5, r6, lr}
 801448e:	69c6      	ldr	r6, [r0, #28]
 8014490:	4605      	mov	r5, r0
 8014492:	460c      	mov	r4, r1
 8014494:	b976      	cbnz	r6, 80144b4 <_Bfree+0x28>
 8014496:	2010      	movs	r0, #16
 8014498:	f7ff ff04 	bl	80142a4 <malloc>
 801449c:	4602      	mov	r2, r0
 801449e:	61e8      	str	r0, [r5, #28]
 80144a0:	b920      	cbnz	r0, 80144ac <_Bfree+0x20>
 80144a2:	4b09      	ldr	r3, [pc, #36]	; (80144c8 <_Bfree+0x3c>)
 80144a4:	4809      	ldr	r0, [pc, #36]	; (80144cc <_Bfree+0x40>)
 80144a6:	218f      	movs	r1, #143	; 0x8f
 80144a8:	f000 fdb2 	bl	8015010 <__assert_func>
 80144ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80144b0:	6006      	str	r6, [r0, #0]
 80144b2:	60c6      	str	r6, [r0, #12]
 80144b4:	b13c      	cbz	r4, 80144c6 <_Bfree+0x3a>
 80144b6:	69eb      	ldr	r3, [r5, #28]
 80144b8:	6862      	ldr	r2, [r4, #4]
 80144ba:	68db      	ldr	r3, [r3, #12]
 80144bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80144c0:	6021      	str	r1, [r4, #0]
 80144c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80144c6:	bd70      	pop	{r4, r5, r6, pc}
 80144c8:	080156c9 	.word	0x080156c9
 80144cc:	08015749 	.word	0x08015749

080144d0 <__multadd>:
 80144d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144d4:	690d      	ldr	r5, [r1, #16]
 80144d6:	4607      	mov	r7, r0
 80144d8:	460c      	mov	r4, r1
 80144da:	461e      	mov	r6, r3
 80144dc:	f101 0c14 	add.w	ip, r1, #20
 80144e0:	2000      	movs	r0, #0
 80144e2:	f8dc 3000 	ldr.w	r3, [ip]
 80144e6:	b299      	uxth	r1, r3
 80144e8:	fb02 6101 	mla	r1, r2, r1, r6
 80144ec:	0c1e      	lsrs	r6, r3, #16
 80144ee:	0c0b      	lsrs	r3, r1, #16
 80144f0:	fb02 3306 	mla	r3, r2, r6, r3
 80144f4:	b289      	uxth	r1, r1
 80144f6:	3001      	adds	r0, #1
 80144f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80144fc:	4285      	cmp	r5, r0
 80144fe:	f84c 1b04 	str.w	r1, [ip], #4
 8014502:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014506:	dcec      	bgt.n	80144e2 <__multadd+0x12>
 8014508:	b30e      	cbz	r6, 801454e <__multadd+0x7e>
 801450a:	68a3      	ldr	r3, [r4, #8]
 801450c:	42ab      	cmp	r3, r5
 801450e:	dc19      	bgt.n	8014544 <__multadd+0x74>
 8014510:	6861      	ldr	r1, [r4, #4]
 8014512:	4638      	mov	r0, r7
 8014514:	3101      	adds	r1, #1
 8014516:	f7ff ff79 	bl	801440c <_Balloc>
 801451a:	4680      	mov	r8, r0
 801451c:	b928      	cbnz	r0, 801452a <__multadd+0x5a>
 801451e:	4602      	mov	r2, r0
 8014520:	4b0c      	ldr	r3, [pc, #48]	; (8014554 <__multadd+0x84>)
 8014522:	480d      	ldr	r0, [pc, #52]	; (8014558 <__multadd+0x88>)
 8014524:	21ba      	movs	r1, #186	; 0xba
 8014526:	f000 fd73 	bl	8015010 <__assert_func>
 801452a:	6922      	ldr	r2, [r4, #16]
 801452c:	3202      	adds	r2, #2
 801452e:	f104 010c 	add.w	r1, r4, #12
 8014532:	0092      	lsls	r2, r2, #2
 8014534:	300c      	adds	r0, #12
 8014536:	f7fe ffdf 	bl	80134f8 <memcpy>
 801453a:	4621      	mov	r1, r4
 801453c:	4638      	mov	r0, r7
 801453e:	f7ff ffa5 	bl	801448c <_Bfree>
 8014542:	4644      	mov	r4, r8
 8014544:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014548:	3501      	adds	r5, #1
 801454a:	615e      	str	r6, [r3, #20]
 801454c:	6125      	str	r5, [r4, #16]
 801454e:	4620      	mov	r0, r4
 8014550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014554:	08015738 	.word	0x08015738
 8014558:	08015749 	.word	0x08015749

0801455c <__hi0bits>:
 801455c:	0c03      	lsrs	r3, r0, #16
 801455e:	041b      	lsls	r3, r3, #16
 8014560:	b9d3      	cbnz	r3, 8014598 <__hi0bits+0x3c>
 8014562:	0400      	lsls	r0, r0, #16
 8014564:	2310      	movs	r3, #16
 8014566:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801456a:	bf04      	itt	eq
 801456c:	0200      	lsleq	r0, r0, #8
 801456e:	3308      	addeq	r3, #8
 8014570:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014574:	bf04      	itt	eq
 8014576:	0100      	lsleq	r0, r0, #4
 8014578:	3304      	addeq	r3, #4
 801457a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801457e:	bf04      	itt	eq
 8014580:	0080      	lsleq	r0, r0, #2
 8014582:	3302      	addeq	r3, #2
 8014584:	2800      	cmp	r0, #0
 8014586:	db05      	blt.n	8014594 <__hi0bits+0x38>
 8014588:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801458c:	f103 0301 	add.w	r3, r3, #1
 8014590:	bf08      	it	eq
 8014592:	2320      	moveq	r3, #32
 8014594:	4618      	mov	r0, r3
 8014596:	4770      	bx	lr
 8014598:	2300      	movs	r3, #0
 801459a:	e7e4      	b.n	8014566 <__hi0bits+0xa>

0801459c <__lo0bits>:
 801459c:	6803      	ldr	r3, [r0, #0]
 801459e:	f013 0207 	ands.w	r2, r3, #7
 80145a2:	d00c      	beq.n	80145be <__lo0bits+0x22>
 80145a4:	07d9      	lsls	r1, r3, #31
 80145a6:	d422      	bmi.n	80145ee <__lo0bits+0x52>
 80145a8:	079a      	lsls	r2, r3, #30
 80145aa:	bf49      	itett	mi
 80145ac:	085b      	lsrmi	r3, r3, #1
 80145ae:	089b      	lsrpl	r3, r3, #2
 80145b0:	6003      	strmi	r3, [r0, #0]
 80145b2:	2201      	movmi	r2, #1
 80145b4:	bf5c      	itt	pl
 80145b6:	6003      	strpl	r3, [r0, #0]
 80145b8:	2202      	movpl	r2, #2
 80145ba:	4610      	mov	r0, r2
 80145bc:	4770      	bx	lr
 80145be:	b299      	uxth	r1, r3
 80145c0:	b909      	cbnz	r1, 80145c6 <__lo0bits+0x2a>
 80145c2:	0c1b      	lsrs	r3, r3, #16
 80145c4:	2210      	movs	r2, #16
 80145c6:	b2d9      	uxtb	r1, r3
 80145c8:	b909      	cbnz	r1, 80145ce <__lo0bits+0x32>
 80145ca:	3208      	adds	r2, #8
 80145cc:	0a1b      	lsrs	r3, r3, #8
 80145ce:	0719      	lsls	r1, r3, #28
 80145d0:	bf04      	itt	eq
 80145d2:	091b      	lsreq	r3, r3, #4
 80145d4:	3204      	addeq	r2, #4
 80145d6:	0799      	lsls	r1, r3, #30
 80145d8:	bf04      	itt	eq
 80145da:	089b      	lsreq	r3, r3, #2
 80145dc:	3202      	addeq	r2, #2
 80145de:	07d9      	lsls	r1, r3, #31
 80145e0:	d403      	bmi.n	80145ea <__lo0bits+0x4e>
 80145e2:	085b      	lsrs	r3, r3, #1
 80145e4:	f102 0201 	add.w	r2, r2, #1
 80145e8:	d003      	beq.n	80145f2 <__lo0bits+0x56>
 80145ea:	6003      	str	r3, [r0, #0]
 80145ec:	e7e5      	b.n	80145ba <__lo0bits+0x1e>
 80145ee:	2200      	movs	r2, #0
 80145f0:	e7e3      	b.n	80145ba <__lo0bits+0x1e>
 80145f2:	2220      	movs	r2, #32
 80145f4:	e7e1      	b.n	80145ba <__lo0bits+0x1e>
	...

080145f8 <__i2b>:
 80145f8:	b510      	push	{r4, lr}
 80145fa:	460c      	mov	r4, r1
 80145fc:	2101      	movs	r1, #1
 80145fe:	f7ff ff05 	bl	801440c <_Balloc>
 8014602:	4602      	mov	r2, r0
 8014604:	b928      	cbnz	r0, 8014612 <__i2b+0x1a>
 8014606:	4b05      	ldr	r3, [pc, #20]	; (801461c <__i2b+0x24>)
 8014608:	4805      	ldr	r0, [pc, #20]	; (8014620 <__i2b+0x28>)
 801460a:	f240 1145 	movw	r1, #325	; 0x145
 801460e:	f000 fcff 	bl	8015010 <__assert_func>
 8014612:	2301      	movs	r3, #1
 8014614:	6144      	str	r4, [r0, #20]
 8014616:	6103      	str	r3, [r0, #16]
 8014618:	bd10      	pop	{r4, pc}
 801461a:	bf00      	nop
 801461c:	08015738 	.word	0x08015738
 8014620:	08015749 	.word	0x08015749

08014624 <__multiply>:
 8014624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014628:	4691      	mov	r9, r2
 801462a:	690a      	ldr	r2, [r1, #16]
 801462c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014630:	429a      	cmp	r2, r3
 8014632:	bfb8      	it	lt
 8014634:	460b      	movlt	r3, r1
 8014636:	460c      	mov	r4, r1
 8014638:	bfbc      	itt	lt
 801463a:	464c      	movlt	r4, r9
 801463c:	4699      	movlt	r9, r3
 801463e:	6927      	ldr	r7, [r4, #16]
 8014640:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014644:	68a3      	ldr	r3, [r4, #8]
 8014646:	6861      	ldr	r1, [r4, #4]
 8014648:	eb07 060a 	add.w	r6, r7, sl
 801464c:	42b3      	cmp	r3, r6
 801464e:	b085      	sub	sp, #20
 8014650:	bfb8      	it	lt
 8014652:	3101      	addlt	r1, #1
 8014654:	f7ff feda 	bl	801440c <_Balloc>
 8014658:	b930      	cbnz	r0, 8014668 <__multiply+0x44>
 801465a:	4602      	mov	r2, r0
 801465c:	4b44      	ldr	r3, [pc, #272]	; (8014770 <__multiply+0x14c>)
 801465e:	4845      	ldr	r0, [pc, #276]	; (8014774 <__multiply+0x150>)
 8014660:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8014664:	f000 fcd4 	bl	8015010 <__assert_func>
 8014668:	f100 0514 	add.w	r5, r0, #20
 801466c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014670:	462b      	mov	r3, r5
 8014672:	2200      	movs	r2, #0
 8014674:	4543      	cmp	r3, r8
 8014676:	d321      	bcc.n	80146bc <__multiply+0x98>
 8014678:	f104 0314 	add.w	r3, r4, #20
 801467c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014680:	f109 0314 	add.w	r3, r9, #20
 8014684:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014688:	9202      	str	r2, [sp, #8]
 801468a:	1b3a      	subs	r2, r7, r4
 801468c:	3a15      	subs	r2, #21
 801468e:	f022 0203 	bic.w	r2, r2, #3
 8014692:	3204      	adds	r2, #4
 8014694:	f104 0115 	add.w	r1, r4, #21
 8014698:	428f      	cmp	r7, r1
 801469a:	bf38      	it	cc
 801469c:	2204      	movcc	r2, #4
 801469e:	9201      	str	r2, [sp, #4]
 80146a0:	9a02      	ldr	r2, [sp, #8]
 80146a2:	9303      	str	r3, [sp, #12]
 80146a4:	429a      	cmp	r2, r3
 80146a6:	d80c      	bhi.n	80146c2 <__multiply+0x9e>
 80146a8:	2e00      	cmp	r6, #0
 80146aa:	dd03      	ble.n	80146b4 <__multiply+0x90>
 80146ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d05b      	beq.n	801476c <__multiply+0x148>
 80146b4:	6106      	str	r6, [r0, #16]
 80146b6:	b005      	add	sp, #20
 80146b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146bc:	f843 2b04 	str.w	r2, [r3], #4
 80146c0:	e7d8      	b.n	8014674 <__multiply+0x50>
 80146c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80146c6:	f1ba 0f00 	cmp.w	sl, #0
 80146ca:	d024      	beq.n	8014716 <__multiply+0xf2>
 80146cc:	f104 0e14 	add.w	lr, r4, #20
 80146d0:	46a9      	mov	r9, r5
 80146d2:	f04f 0c00 	mov.w	ip, #0
 80146d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80146da:	f8d9 1000 	ldr.w	r1, [r9]
 80146de:	fa1f fb82 	uxth.w	fp, r2
 80146e2:	b289      	uxth	r1, r1
 80146e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80146e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80146ec:	f8d9 2000 	ldr.w	r2, [r9]
 80146f0:	4461      	add	r1, ip
 80146f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80146f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80146fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80146fe:	b289      	uxth	r1, r1
 8014700:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014704:	4577      	cmp	r7, lr
 8014706:	f849 1b04 	str.w	r1, [r9], #4
 801470a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801470e:	d8e2      	bhi.n	80146d6 <__multiply+0xb2>
 8014710:	9a01      	ldr	r2, [sp, #4]
 8014712:	f845 c002 	str.w	ip, [r5, r2]
 8014716:	9a03      	ldr	r2, [sp, #12]
 8014718:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801471c:	3304      	adds	r3, #4
 801471e:	f1b9 0f00 	cmp.w	r9, #0
 8014722:	d021      	beq.n	8014768 <__multiply+0x144>
 8014724:	6829      	ldr	r1, [r5, #0]
 8014726:	f104 0c14 	add.w	ip, r4, #20
 801472a:	46ae      	mov	lr, r5
 801472c:	f04f 0a00 	mov.w	sl, #0
 8014730:	f8bc b000 	ldrh.w	fp, [ip]
 8014734:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014738:	fb09 220b 	mla	r2, r9, fp, r2
 801473c:	4452      	add	r2, sl
 801473e:	b289      	uxth	r1, r1
 8014740:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014744:	f84e 1b04 	str.w	r1, [lr], #4
 8014748:	f85c 1b04 	ldr.w	r1, [ip], #4
 801474c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014750:	f8be 1000 	ldrh.w	r1, [lr]
 8014754:	fb09 110a 	mla	r1, r9, sl, r1
 8014758:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801475c:	4567      	cmp	r7, ip
 801475e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014762:	d8e5      	bhi.n	8014730 <__multiply+0x10c>
 8014764:	9a01      	ldr	r2, [sp, #4]
 8014766:	50a9      	str	r1, [r5, r2]
 8014768:	3504      	adds	r5, #4
 801476a:	e799      	b.n	80146a0 <__multiply+0x7c>
 801476c:	3e01      	subs	r6, #1
 801476e:	e79b      	b.n	80146a8 <__multiply+0x84>
 8014770:	08015738 	.word	0x08015738
 8014774:	08015749 	.word	0x08015749

08014778 <__pow5mult>:
 8014778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801477c:	4615      	mov	r5, r2
 801477e:	f012 0203 	ands.w	r2, r2, #3
 8014782:	4606      	mov	r6, r0
 8014784:	460f      	mov	r7, r1
 8014786:	d007      	beq.n	8014798 <__pow5mult+0x20>
 8014788:	4c25      	ldr	r4, [pc, #148]	; (8014820 <__pow5mult+0xa8>)
 801478a:	3a01      	subs	r2, #1
 801478c:	2300      	movs	r3, #0
 801478e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014792:	f7ff fe9d 	bl	80144d0 <__multadd>
 8014796:	4607      	mov	r7, r0
 8014798:	10ad      	asrs	r5, r5, #2
 801479a:	d03d      	beq.n	8014818 <__pow5mult+0xa0>
 801479c:	69f4      	ldr	r4, [r6, #28]
 801479e:	b97c      	cbnz	r4, 80147c0 <__pow5mult+0x48>
 80147a0:	2010      	movs	r0, #16
 80147a2:	f7ff fd7f 	bl	80142a4 <malloc>
 80147a6:	4602      	mov	r2, r0
 80147a8:	61f0      	str	r0, [r6, #28]
 80147aa:	b928      	cbnz	r0, 80147b8 <__pow5mult+0x40>
 80147ac:	4b1d      	ldr	r3, [pc, #116]	; (8014824 <__pow5mult+0xac>)
 80147ae:	481e      	ldr	r0, [pc, #120]	; (8014828 <__pow5mult+0xb0>)
 80147b0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80147b4:	f000 fc2c 	bl	8015010 <__assert_func>
 80147b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80147bc:	6004      	str	r4, [r0, #0]
 80147be:	60c4      	str	r4, [r0, #12]
 80147c0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80147c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80147c8:	b94c      	cbnz	r4, 80147de <__pow5mult+0x66>
 80147ca:	f240 2171 	movw	r1, #625	; 0x271
 80147ce:	4630      	mov	r0, r6
 80147d0:	f7ff ff12 	bl	80145f8 <__i2b>
 80147d4:	2300      	movs	r3, #0
 80147d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80147da:	4604      	mov	r4, r0
 80147dc:	6003      	str	r3, [r0, #0]
 80147de:	f04f 0900 	mov.w	r9, #0
 80147e2:	07eb      	lsls	r3, r5, #31
 80147e4:	d50a      	bpl.n	80147fc <__pow5mult+0x84>
 80147e6:	4639      	mov	r1, r7
 80147e8:	4622      	mov	r2, r4
 80147ea:	4630      	mov	r0, r6
 80147ec:	f7ff ff1a 	bl	8014624 <__multiply>
 80147f0:	4639      	mov	r1, r7
 80147f2:	4680      	mov	r8, r0
 80147f4:	4630      	mov	r0, r6
 80147f6:	f7ff fe49 	bl	801448c <_Bfree>
 80147fa:	4647      	mov	r7, r8
 80147fc:	106d      	asrs	r5, r5, #1
 80147fe:	d00b      	beq.n	8014818 <__pow5mult+0xa0>
 8014800:	6820      	ldr	r0, [r4, #0]
 8014802:	b938      	cbnz	r0, 8014814 <__pow5mult+0x9c>
 8014804:	4622      	mov	r2, r4
 8014806:	4621      	mov	r1, r4
 8014808:	4630      	mov	r0, r6
 801480a:	f7ff ff0b 	bl	8014624 <__multiply>
 801480e:	6020      	str	r0, [r4, #0]
 8014810:	f8c0 9000 	str.w	r9, [r0]
 8014814:	4604      	mov	r4, r0
 8014816:	e7e4      	b.n	80147e2 <__pow5mult+0x6a>
 8014818:	4638      	mov	r0, r7
 801481a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801481e:	bf00      	nop
 8014820:	08015898 	.word	0x08015898
 8014824:	080156c9 	.word	0x080156c9
 8014828:	08015749 	.word	0x08015749

0801482c <__lshift>:
 801482c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014830:	460c      	mov	r4, r1
 8014832:	6849      	ldr	r1, [r1, #4]
 8014834:	6923      	ldr	r3, [r4, #16]
 8014836:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801483a:	68a3      	ldr	r3, [r4, #8]
 801483c:	4607      	mov	r7, r0
 801483e:	4691      	mov	r9, r2
 8014840:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014844:	f108 0601 	add.w	r6, r8, #1
 8014848:	42b3      	cmp	r3, r6
 801484a:	db0b      	blt.n	8014864 <__lshift+0x38>
 801484c:	4638      	mov	r0, r7
 801484e:	f7ff fddd 	bl	801440c <_Balloc>
 8014852:	4605      	mov	r5, r0
 8014854:	b948      	cbnz	r0, 801486a <__lshift+0x3e>
 8014856:	4602      	mov	r2, r0
 8014858:	4b28      	ldr	r3, [pc, #160]	; (80148fc <__lshift+0xd0>)
 801485a:	4829      	ldr	r0, [pc, #164]	; (8014900 <__lshift+0xd4>)
 801485c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8014860:	f000 fbd6 	bl	8015010 <__assert_func>
 8014864:	3101      	adds	r1, #1
 8014866:	005b      	lsls	r3, r3, #1
 8014868:	e7ee      	b.n	8014848 <__lshift+0x1c>
 801486a:	2300      	movs	r3, #0
 801486c:	f100 0114 	add.w	r1, r0, #20
 8014870:	f100 0210 	add.w	r2, r0, #16
 8014874:	4618      	mov	r0, r3
 8014876:	4553      	cmp	r3, sl
 8014878:	db33      	blt.n	80148e2 <__lshift+0xb6>
 801487a:	6920      	ldr	r0, [r4, #16]
 801487c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014880:	f104 0314 	add.w	r3, r4, #20
 8014884:	f019 091f 	ands.w	r9, r9, #31
 8014888:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801488c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014890:	d02b      	beq.n	80148ea <__lshift+0xbe>
 8014892:	f1c9 0e20 	rsb	lr, r9, #32
 8014896:	468a      	mov	sl, r1
 8014898:	2200      	movs	r2, #0
 801489a:	6818      	ldr	r0, [r3, #0]
 801489c:	fa00 f009 	lsl.w	r0, r0, r9
 80148a0:	4310      	orrs	r0, r2
 80148a2:	f84a 0b04 	str.w	r0, [sl], #4
 80148a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80148aa:	459c      	cmp	ip, r3
 80148ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80148b0:	d8f3      	bhi.n	801489a <__lshift+0x6e>
 80148b2:	ebac 0304 	sub.w	r3, ip, r4
 80148b6:	3b15      	subs	r3, #21
 80148b8:	f023 0303 	bic.w	r3, r3, #3
 80148bc:	3304      	adds	r3, #4
 80148be:	f104 0015 	add.w	r0, r4, #21
 80148c2:	4584      	cmp	ip, r0
 80148c4:	bf38      	it	cc
 80148c6:	2304      	movcc	r3, #4
 80148c8:	50ca      	str	r2, [r1, r3]
 80148ca:	b10a      	cbz	r2, 80148d0 <__lshift+0xa4>
 80148cc:	f108 0602 	add.w	r6, r8, #2
 80148d0:	3e01      	subs	r6, #1
 80148d2:	4638      	mov	r0, r7
 80148d4:	612e      	str	r6, [r5, #16]
 80148d6:	4621      	mov	r1, r4
 80148d8:	f7ff fdd8 	bl	801448c <_Bfree>
 80148dc:	4628      	mov	r0, r5
 80148de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80148e6:	3301      	adds	r3, #1
 80148e8:	e7c5      	b.n	8014876 <__lshift+0x4a>
 80148ea:	3904      	subs	r1, #4
 80148ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80148f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80148f4:	459c      	cmp	ip, r3
 80148f6:	d8f9      	bhi.n	80148ec <__lshift+0xc0>
 80148f8:	e7ea      	b.n	80148d0 <__lshift+0xa4>
 80148fa:	bf00      	nop
 80148fc:	08015738 	.word	0x08015738
 8014900:	08015749 	.word	0x08015749

08014904 <__mcmp>:
 8014904:	b530      	push	{r4, r5, lr}
 8014906:	6902      	ldr	r2, [r0, #16]
 8014908:	690c      	ldr	r4, [r1, #16]
 801490a:	1b12      	subs	r2, r2, r4
 801490c:	d10e      	bne.n	801492c <__mcmp+0x28>
 801490e:	f100 0314 	add.w	r3, r0, #20
 8014912:	3114      	adds	r1, #20
 8014914:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014918:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801491c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014920:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014924:	42a5      	cmp	r5, r4
 8014926:	d003      	beq.n	8014930 <__mcmp+0x2c>
 8014928:	d305      	bcc.n	8014936 <__mcmp+0x32>
 801492a:	2201      	movs	r2, #1
 801492c:	4610      	mov	r0, r2
 801492e:	bd30      	pop	{r4, r5, pc}
 8014930:	4283      	cmp	r3, r0
 8014932:	d3f3      	bcc.n	801491c <__mcmp+0x18>
 8014934:	e7fa      	b.n	801492c <__mcmp+0x28>
 8014936:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801493a:	e7f7      	b.n	801492c <__mcmp+0x28>

0801493c <__mdiff>:
 801493c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014940:	460c      	mov	r4, r1
 8014942:	4606      	mov	r6, r0
 8014944:	4611      	mov	r1, r2
 8014946:	4620      	mov	r0, r4
 8014948:	4690      	mov	r8, r2
 801494a:	f7ff ffdb 	bl	8014904 <__mcmp>
 801494e:	1e05      	subs	r5, r0, #0
 8014950:	d110      	bne.n	8014974 <__mdiff+0x38>
 8014952:	4629      	mov	r1, r5
 8014954:	4630      	mov	r0, r6
 8014956:	f7ff fd59 	bl	801440c <_Balloc>
 801495a:	b930      	cbnz	r0, 801496a <__mdiff+0x2e>
 801495c:	4b3a      	ldr	r3, [pc, #232]	; (8014a48 <__mdiff+0x10c>)
 801495e:	4602      	mov	r2, r0
 8014960:	f240 2137 	movw	r1, #567	; 0x237
 8014964:	4839      	ldr	r0, [pc, #228]	; (8014a4c <__mdiff+0x110>)
 8014966:	f000 fb53 	bl	8015010 <__assert_func>
 801496a:	2301      	movs	r3, #1
 801496c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014970:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014974:	bfa4      	itt	ge
 8014976:	4643      	movge	r3, r8
 8014978:	46a0      	movge	r8, r4
 801497a:	4630      	mov	r0, r6
 801497c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014980:	bfa6      	itte	ge
 8014982:	461c      	movge	r4, r3
 8014984:	2500      	movge	r5, #0
 8014986:	2501      	movlt	r5, #1
 8014988:	f7ff fd40 	bl	801440c <_Balloc>
 801498c:	b920      	cbnz	r0, 8014998 <__mdiff+0x5c>
 801498e:	4b2e      	ldr	r3, [pc, #184]	; (8014a48 <__mdiff+0x10c>)
 8014990:	4602      	mov	r2, r0
 8014992:	f240 2145 	movw	r1, #581	; 0x245
 8014996:	e7e5      	b.n	8014964 <__mdiff+0x28>
 8014998:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801499c:	6926      	ldr	r6, [r4, #16]
 801499e:	60c5      	str	r5, [r0, #12]
 80149a0:	f104 0914 	add.w	r9, r4, #20
 80149a4:	f108 0514 	add.w	r5, r8, #20
 80149a8:	f100 0e14 	add.w	lr, r0, #20
 80149ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80149b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80149b4:	f108 0210 	add.w	r2, r8, #16
 80149b8:	46f2      	mov	sl, lr
 80149ba:	2100      	movs	r1, #0
 80149bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80149c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80149c4:	fa11 f88b 	uxtah	r8, r1, fp
 80149c8:	b299      	uxth	r1, r3
 80149ca:	0c1b      	lsrs	r3, r3, #16
 80149cc:	eba8 0801 	sub.w	r8, r8, r1
 80149d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80149d4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80149d8:	fa1f f888 	uxth.w	r8, r8
 80149dc:	1419      	asrs	r1, r3, #16
 80149de:	454e      	cmp	r6, r9
 80149e0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80149e4:	f84a 3b04 	str.w	r3, [sl], #4
 80149e8:	d8e8      	bhi.n	80149bc <__mdiff+0x80>
 80149ea:	1b33      	subs	r3, r6, r4
 80149ec:	3b15      	subs	r3, #21
 80149ee:	f023 0303 	bic.w	r3, r3, #3
 80149f2:	3304      	adds	r3, #4
 80149f4:	3415      	adds	r4, #21
 80149f6:	42a6      	cmp	r6, r4
 80149f8:	bf38      	it	cc
 80149fa:	2304      	movcc	r3, #4
 80149fc:	441d      	add	r5, r3
 80149fe:	4473      	add	r3, lr
 8014a00:	469e      	mov	lr, r3
 8014a02:	462e      	mov	r6, r5
 8014a04:	4566      	cmp	r6, ip
 8014a06:	d30e      	bcc.n	8014a26 <__mdiff+0xea>
 8014a08:	f10c 0203 	add.w	r2, ip, #3
 8014a0c:	1b52      	subs	r2, r2, r5
 8014a0e:	f022 0203 	bic.w	r2, r2, #3
 8014a12:	3d03      	subs	r5, #3
 8014a14:	45ac      	cmp	ip, r5
 8014a16:	bf38      	it	cc
 8014a18:	2200      	movcc	r2, #0
 8014a1a:	4413      	add	r3, r2
 8014a1c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014a20:	b17a      	cbz	r2, 8014a42 <__mdiff+0x106>
 8014a22:	6107      	str	r7, [r0, #16]
 8014a24:	e7a4      	b.n	8014970 <__mdiff+0x34>
 8014a26:	f856 8b04 	ldr.w	r8, [r6], #4
 8014a2a:	fa11 f288 	uxtah	r2, r1, r8
 8014a2e:	1414      	asrs	r4, r2, #16
 8014a30:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014a34:	b292      	uxth	r2, r2
 8014a36:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014a3a:	f84e 2b04 	str.w	r2, [lr], #4
 8014a3e:	1421      	asrs	r1, r4, #16
 8014a40:	e7e0      	b.n	8014a04 <__mdiff+0xc8>
 8014a42:	3f01      	subs	r7, #1
 8014a44:	e7ea      	b.n	8014a1c <__mdiff+0xe0>
 8014a46:	bf00      	nop
 8014a48:	08015738 	.word	0x08015738
 8014a4c:	08015749 	.word	0x08015749

08014a50 <__d2b>:
 8014a50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014a54:	460f      	mov	r7, r1
 8014a56:	2101      	movs	r1, #1
 8014a58:	ec59 8b10 	vmov	r8, r9, d0
 8014a5c:	4616      	mov	r6, r2
 8014a5e:	f7ff fcd5 	bl	801440c <_Balloc>
 8014a62:	4604      	mov	r4, r0
 8014a64:	b930      	cbnz	r0, 8014a74 <__d2b+0x24>
 8014a66:	4602      	mov	r2, r0
 8014a68:	4b24      	ldr	r3, [pc, #144]	; (8014afc <__d2b+0xac>)
 8014a6a:	4825      	ldr	r0, [pc, #148]	; (8014b00 <__d2b+0xb0>)
 8014a6c:	f240 310f 	movw	r1, #783	; 0x30f
 8014a70:	f000 face 	bl	8015010 <__assert_func>
 8014a74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014a78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014a7c:	bb2d      	cbnz	r5, 8014aca <__d2b+0x7a>
 8014a7e:	9301      	str	r3, [sp, #4]
 8014a80:	f1b8 0300 	subs.w	r3, r8, #0
 8014a84:	d026      	beq.n	8014ad4 <__d2b+0x84>
 8014a86:	4668      	mov	r0, sp
 8014a88:	9300      	str	r3, [sp, #0]
 8014a8a:	f7ff fd87 	bl	801459c <__lo0bits>
 8014a8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014a92:	b1e8      	cbz	r0, 8014ad0 <__d2b+0x80>
 8014a94:	f1c0 0320 	rsb	r3, r0, #32
 8014a98:	fa02 f303 	lsl.w	r3, r2, r3
 8014a9c:	430b      	orrs	r3, r1
 8014a9e:	40c2      	lsrs	r2, r0
 8014aa0:	6163      	str	r3, [r4, #20]
 8014aa2:	9201      	str	r2, [sp, #4]
 8014aa4:	9b01      	ldr	r3, [sp, #4]
 8014aa6:	61a3      	str	r3, [r4, #24]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	bf14      	ite	ne
 8014aac:	2202      	movne	r2, #2
 8014aae:	2201      	moveq	r2, #1
 8014ab0:	6122      	str	r2, [r4, #16]
 8014ab2:	b1bd      	cbz	r5, 8014ae4 <__d2b+0x94>
 8014ab4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014ab8:	4405      	add	r5, r0
 8014aba:	603d      	str	r5, [r7, #0]
 8014abc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014ac0:	6030      	str	r0, [r6, #0]
 8014ac2:	4620      	mov	r0, r4
 8014ac4:	b003      	add	sp, #12
 8014ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014aca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014ace:	e7d6      	b.n	8014a7e <__d2b+0x2e>
 8014ad0:	6161      	str	r1, [r4, #20]
 8014ad2:	e7e7      	b.n	8014aa4 <__d2b+0x54>
 8014ad4:	a801      	add	r0, sp, #4
 8014ad6:	f7ff fd61 	bl	801459c <__lo0bits>
 8014ada:	9b01      	ldr	r3, [sp, #4]
 8014adc:	6163      	str	r3, [r4, #20]
 8014ade:	3020      	adds	r0, #32
 8014ae0:	2201      	movs	r2, #1
 8014ae2:	e7e5      	b.n	8014ab0 <__d2b+0x60>
 8014ae4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014ae8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014aec:	6038      	str	r0, [r7, #0]
 8014aee:	6918      	ldr	r0, [r3, #16]
 8014af0:	f7ff fd34 	bl	801455c <__hi0bits>
 8014af4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014af8:	e7e2      	b.n	8014ac0 <__d2b+0x70>
 8014afa:	bf00      	nop
 8014afc:	08015738 	.word	0x08015738
 8014b00:	08015749 	.word	0x08015749

08014b04 <__sfputc_r>:
 8014b04:	6893      	ldr	r3, [r2, #8]
 8014b06:	3b01      	subs	r3, #1
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	b410      	push	{r4}
 8014b0c:	6093      	str	r3, [r2, #8]
 8014b0e:	da08      	bge.n	8014b22 <__sfputc_r+0x1e>
 8014b10:	6994      	ldr	r4, [r2, #24]
 8014b12:	42a3      	cmp	r3, r4
 8014b14:	db01      	blt.n	8014b1a <__sfputc_r+0x16>
 8014b16:	290a      	cmp	r1, #10
 8014b18:	d103      	bne.n	8014b22 <__sfputc_r+0x1e>
 8014b1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b1e:	f7fe bb82 	b.w	8013226 <__swbuf_r>
 8014b22:	6813      	ldr	r3, [r2, #0]
 8014b24:	1c58      	adds	r0, r3, #1
 8014b26:	6010      	str	r0, [r2, #0]
 8014b28:	7019      	strb	r1, [r3, #0]
 8014b2a:	4608      	mov	r0, r1
 8014b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b30:	4770      	bx	lr

08014b32 <__sfputs_r>:
 8014b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b34:	4606      	mov	r6, r0
 8014b36:	460f      	mov	r7, r1
 8014b38:	4614      	mov	r4, r2
 8014b3a:	18d5      	adds	r5, r2, r3
 8014b3c:	42ac      	cmp	r4, r5
 8014b3e:	d101      	bne.n	8014b44 <__sfputs_r+0x12>
 8014b40:	2000      	movs	r0, #0
 8014b42:	e007      	b.n	8014b54 <__sfputs_r+0x22>
 8014b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b48:	463a      	mov	r2, r7
 8014b4a:	4630      	mov	r0, r6
 8014b4c:	f7ff ffda 	bl	8014b04 <__sfputc_r>
 8014b50:	1c43      	adds	r3, r0, #1
 8014b52:	d1f3      	bne.n	8014b3c <__sfputs_r+0xa>
 8014b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014b58 <_vfiprintf_r>:
 8014b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b5c:	460d      	mov	r5, r1
 8014b5e:	b09d      	sub	sp, #116	; 0x74
 8014b60:	4614      	mov	r4, r2
 8014b62:	4698      	mov	r8, r3
 8014b64:	4606      	mov	r6, r0
 8014b66:	b118      	cbz	r0, 8014b70 <_vfiprintf_r+0x18>
 8014b68:	6a03      	ldr	r3, [r0, #32]
 8014b6a:	b90b      	cbnz	r3, 8014b70 <_vfiprintf_r+0x18>
 8014b6c:	f7fe fa74 	bl	8013058 <__sinit>
 8014b70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014b72:	07d9      	lsls	r1, r3, #31
 8014b74:	d405      	bmi.n	8014b82 <_vfiprintf_r+0x2a>
 8014b76:	89ab      	ldrh	r3, [r5, #12]
 8014b78:	059a      	lsls	r2, r3, #22
 8014b7a:	d402      	bmi.n	8014b82 <_vfiprintf_r+0x2a>
 8014b7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014b7e:	f7fe fcb9 	bl	80134f4 <__retarget_lock_acquire_recursive>
 8014b82:	89ab      	ldrh	r3, [r5, #12]
 8014b84:	071b      	lsls	r3, r3, #28
 8014b86:	d501      	bpl.n	8014b8c <_vfiprintf_r+0x34>
 8014b88:	692b      	ldr	r3, [r5, #16]
 8014b8a:	b99b      	cbnz	r3, 8014bb4 <_vfiprintf_r+0x5c>
 8014b8c:	4629      	mov	r1, r5
 8014b8e:	4630      	mov	r0, r6
 8014b90:	f7fe fb86 	bl	80132a0 <__swsetup_r>
 8014b94:	b170      	cbz	r0, 8014bb4 <_vfiprintf_r+0x5c>
 8014b96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014b98:	07dc      	lsls	r4, r3, #31
 8014b9a:	d504      	bpl.n	8014ba6 <_vfiprintf_r+0x4e>
 8014b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014ba0:	b01d      	add	sp, #116	; 0x74
 8014ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ba6:	89ab      	ldrh	r3, [r5, #12]
 8014ba8:	0598      	lsls	r0, r3, #22
 8014baa:	d4f7      	bmi.n	8014b9c <_vfiprintf_r+0x44>
 8014bac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014bae:	f7fe fca2 	bl	80134f6 <__retarget_lock_release_recursive>
 8014bb2:	e7f3      	b.n	8014b9c <_vfiprintf_r+0x44>
 8014bb4:	2300      	movs	r3, #0
 8014bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8014bb8:	2320      	movs	r3, #32
 8014bba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014bbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8014bc2:	2330      	movs	r3, #48	; 0x30
 8014bc4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014d78 <_vfiprintf_r+0x220>
 8014bc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014bcc:	f04f 0901 	mov.w	r9, #1
 8014bd0:	4623      	mov	r3, r4
 8014bd2:	469a      	mov	sl, r3
 8014bd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014bd8:	b10a      	cbz	r2, 8014bde <_vfiprintf_r+0x86>
 8014bda:	2a25      	cmp	r2, #37	; 0x25
 8014bdc:	d1f9      	bne.n	8014bd2 <_vfiprintf_r+0x7a>
 8014bde:	ebba 0b04 	subs.w	fp, sl, r4
 8014be2:	d00b      	beq.n	8014bfc <_vfiprintf_r+0xa4>
 8014be4:	465b      	mov	r3, fp
 8014be6:	4622      	mov	r2, r4
 8014be8:	4629      	mov	r1, r5
 8014bea:	4630      	mov	r0, r6
 8014bec:	f7ff ffa1 	bl	8014b32 <__sfputs_r>
 8014bf0:	3001      	adds	r0, #1
 8014bf2:	f000 80a9 	beq.w	8014d48 <_vfiprintf_r+0x1f0>
 8014bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014bf8:	445a      	add	r2, fp
 8014bfa:	9209      	str	r2, [sp, #36]	; 0x24
 8014bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	f000 80a1 	beq.w	8014d48 <_vfiprintf_r+0x1f0>
 8014c06:	2300      	movs	r3, #0
 8014c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014c0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014c10:	f10a 0a01 	add.w	sl, sl, #1
 8014c14:	9304      	str	r3, [sp, #16]
 8014c16:	9307      	str	r3, [sp, #28]
 8014c18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014c1c:	931a      	str	r3, [sp, #104]	; 0x68
 8014c1e:	4654      	mov	r4, sl
 8014c20:	2205      	movs	r2, #5
 8014c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c26:	4854      	ldr	r0, [pc, #336]	; (8014d78 <_vfiprintf_r+0x220>)
 8014c28:	f7eb fafa 	bl	8000220 <memchr>
 8014c2c:	9a04      	ldr	r2, [sp, #16]
 8014c2e:	b9d8      	cbnz	r0, 8014c68 <_vfiprintf_r+0x110>
 8014c30:	06d1      	lsls	r1, r2, #27
 8014c32:	bf44      	itt	mi
 8014c34:	2320      	movmi	r3, #32
 8014c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014c3a:	0713      	lsls	r3, r2, #28
 8014c3c:	bf44      	itt	mi
 8014c3e:	232b      	movmi	r3, #43	; 0x2b
 8014c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014c44:	f89a 3000 	ldrb.w	r3, [sl]
 8014c48:	2b2a      	cmp	r3, #42	; 0x2a
 8014c4a:	d015      	beq.n	8014c78 <_vfiprintf_r+0x120>
 8014c4c:	9a07      	ldr	r2, [sp, #28]
 8014c4e:	4654      	mov	r4, sl
 8014c50:	2000      	movs	r0, #0
 8014c52:	f04f 0c0a 	mov.w	ip, #10
 8014c56:	4621      	mov	r1, r4
 8014c58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014c5c:	3b30      	subs	r3, #48	; 0x30
 8014c5e:	2b09      	cmp	r3, #9
 8014c60:	d94d      	bls.n	8014cfe <_vfiprintf_r+0x1a6>
 8014c62:	b1b0      	cbz	r0, 8014c92 <_vfiprintf_r+0x13a>
 8014c64:	9207      	str	r2, [sp, #28]
 8014c66:	e014      	b.n	8014c92 <_vfiprintf_r+0x13a>
 8014c68:	eba0 0308 	sub.w	r3, r0, r8
 8014c6c:	fa09 f303 	lsl.w	r3, r9, r3
 8014c70:	4313      	orrs	r3, r2
 8014c72:	9304      	str	r3, [sp, #16]
 8014c74:	46a2      	mov	sl, r4
 8014c76:	e7d2      	b.n	8014c1e <_vfiprintf_r+0xc6>
 8014c78:	9b03      	ldr	r3, [sp, #12]
 8014c7a:	1d19      	adds	r1, r3, #4
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	9103      	str	r1, [sp, #12]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	bfbb      	ittet	lt
 8014c84:	425b      	neglt	r3, r3
 8014c86:	f042 0202 	orrlt.w	r2, r2, #2
 8014c8a:	9307      	strge	r3, [sp, #28]
 8014c8c:	9307      	strlt	r3, [sp, #28]
 8014c8e:	bfb8      	it	lt
 8014c90:	9204      	strlt	r2, [sp, #16]
 8014c92:	7823      	ldrb	r3, [r4, #0]
 8014c94:	2b2e      	cmp	r3, #46	; 0x2e
 8014c96:	d10c      	bne.n	8014cb2 <_vfiprintf_r+0x15a>
 8014c98:	7863      	ldrb	r3, [r4, #1]
 8014c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8014c9c:	d134      	bne.n	8014d08 <_vfiprintf_r+0x1b0>
 8014c9e:	9b03      	ldr	r3, [sp, #12]
 8014ca0:	1d1a      	adds	r2, r3, #4
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	9203      	str	r2, [sp, #12]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	bfb8      	it	lt
 8014caa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014cae:	3402      	adds	r4, #2
 8014cb0:	9305      	str	r3, [sp, #20]
 8014cb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014d88 <_vfiprintf_r+0x230>
 8014cb6:	7821      	ldrb	r1, [r4, #0]
 8014cb8:	2203      	movs	r2, #3
 8014cba:	4650      	mov	r0, sl
 8014cbc:	f7eb fab0 	bl	8000220 <memchr>
 8014cc0:	b138      	cbz	r0, 8014cd2 <_vfiprintf_r+0x17a>
 8014cc2:	9b04      	ldr	r3, [sp, #16]
 8014cc4:	eba0 000a 	sub.w	r0, r0, sl
 8014cc8:	2240      	movs	r2, #64	; 0x40
 8014cca:	4082      	lsls	r2, r0
 8014ccc:	4313      	orrs	r3, r2
 8014cce:	3401      	adds	r4, #1
 8014cd0:	9304      	str	r3, [sp, #16]
 8014cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014cd6:	4829      	ldr	r0, [pc, #164]	; (8014d7c <_vfiprintf_r+0x224>)
 8014cd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014cdc:	2206      	movs	r2, #6
 8014cde:	f7eb fa9f 	bl	8000220 <memchr>
 8014ce2:	2800      	cmp	r0, #0
 8014ce4:	d03f      	beq.n	8014d66 <_vfiprintf_r+0x20e>
 8014ce6:	4b26      	ldr	r3, [pc, #152]	; (8014d80 <_vfiprintf_r+0x228>)
 8014ce8:	bb1b      	cbnz	r3, 8014d32 <_vfiprintf_r+0x1da>
 8014cea:	9b03      	ldr	r3, [sp, #12]
 8014cec:	3307      	adds	r3, #7
 8014cee:	f023 0307 	bic.w	r3, r3, #7
 8014cf2:	3308      	adds	r3, #8
 8014cf4:	9303      	str	r3, [sp, #12]
 8014cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cf8:	443b      	add	r3, r7
 8014cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8014cfc:	e768      	b.n	8014bd0 <_vfiprintf_r+0x78>
 8014cfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8014d02:	460c      	mov	r4, r1
 8014d04:	2001      	movs	r0, #1
 8014d06:	e7a6      	b.n	8014c56 <_vfiprintf_r+0xfe>
 8014d08:	2300      	movs	r3, #0
 8014d0a:	3401      	adds	r4, #1
 8014d0c:	9305      	str	r3, [sp, #20]
 8014d0e:	4619      	mov	r1, r3
 8014d10:	f04f 0c0a 	mov.w	ip, #10
 8014d14:	4620      	mov	r0, r4
 8014d16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d1a:	3a30      	subs	r2, #48	; 0x30
 8014d1c:	2a09      	cmp	r2, #9
 8014d1e:	d903      	bls.n	8014d28 <_vfiprintf_r+0x1d0>
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d0c6      	beq.n	8014cb2 <_vfiprintf_r+0x15a>
 8014d24:	9105      	str	r1, [sp, #20]
 8014d26:	e7c4      	b.n	8014cb2 <_vfiprintf_r+0x15a>
 8014d28:	fb0c 2101 	mla	r1, ip, r1, r2
 8014d2c:	4604      	mov	r4, r0
 8014d2e:	2301      	movs	r3, #1
 8014d30:	e7f0      	b.n	8014d14 <_vfiprintf_r+0x1bc>
 8014d32:	ab03      	add	r3, sp, #12
 8014d34:	9300      	str	r3, [sp, #0]
 8014d36:	462a      	mov	r2, r5
 8014d38:	4b12      	ldr	r3, [pc, #72]	; (8014d84 <_vfiprintf_r+0x22c>)
 8014d3a:	a904      	add	r1, sp, #16
 8014d3c:	4630      	mov	r0, r6
 8014d3e:	f7fd fd4b 	bl	80127d8 <_printf_float>
 8014d42:	4607      	mov	r7, r0
 8014d44:	1c78      	adds	r0, r7, #1
 8014d46:	d1d6      	bne.n	8014cf6 <_vfiprintf_r+0x19e>
 8014d48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014d4a:	07d9      	lsls	r1, r3, #31
 8014d4c:	d405      	bmi.n	8014d5a <_vfiprintf_r+0x202>
 8014d4e:	89ab      	ldrh	r3, [r5, #12]
 8014d50:	059a      	lsls	r2, r3, #22
 8014d52:	d402      	bmi.n	8014d5a <_vfiprintf_r+0x202>
 8014d54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014d56:	f7fe fbce 	bl	80134f6 <__retarget_lock_release_recursive>
 8014d5a:	89ab      	ldrh	r3, [r5, #12]
 8014d5c:	065b      	lsls	r3, r3, #25
 8014d5e:	f53f af1d 	bmi.w	8014b9c <_vfiprintf_r+0x44>
 8014d62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014d64:	e71c      	b.n	8014ba0 <_vfiprintf_r+0x48>
 8014d66:	ab03      	add	r3, sp, #12
 8014d68:	9300      	str	r3, [sp, #0]
 8014d6a:	462a      	mov	r2, r5
 8014d6c:	4b05      	ldr	r3, [pc, #20]	; (8014d84 <_vfiprintf_r+0x22c>)
 8014d6e:	a904      	add	r1, sp, #16
 8014d70:	4630      	mov	r0, r6
 8014d72:	f7fd ffd5 	bl	8012d20 <_printf_i>
 8014d76:	e7e4      	b.n	8014d42 <_vfiprintf_r+0x1ea>
 8014d78:	080158a4 	.word	0x080158a4
 8014d7c:	080158ae 	.word	0x080158ae
 8014d80:	080127d9 	.word	0x080127d9
 8014d84:	08014b33 	.word	0x08014b33
 8014d88:	080158aa 	.word	0x080158aa

08014d8c <__sflush_r>:
 8014d8c:	898a      	ldrh	r2, [r1, #12]
 8014d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d92:	4605      	mov	r5, r0
 8014d94:	0710      	lsls	r0, r2, #28
 8014d96:	460c      	mov	r4, r1
 8014d98:	d458      	bmi.n	8014e4c <__sflush_r+0xc0>
 8014d9a:	684b      	ldr	r3, [r1, #4]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	dc05      	bgt.n	8014dac <__sflush_r+0x20>
 8014da0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	dc02      	bgt.n	8014dac <__sflush_r+0x20>
 8014da6:	2000      	movs	r0, #0
 8014da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014dae:	2e00      	cmp	r6, #0
 8014db0:	d0f9      	beq.n	8014da6 <__sflush_r+0x1a>
 8014db2:	2300      	movs	r3, #0
 8014db4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014db8:	682f      	ldr	r7, [r5, #0]
 8014dba:	6a21      	ldr	r1, [r4, #32]
 8014dbc:	602b      	str	r3, [r5, #0]
 8014dbe:	d032      	beq.n	8014e26 <__sflush_r+0x9a>
 8014dc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014dc2:	89a3      	ldrh	r3, [r4, #12]
 8014dc4:	075a      	lsls	r2, r3, #29
 8014dc6:	d505      	bpl.n	8014dd4 <__sflush_r+0x48>
 8014dc8:	6863      	ldr	r3, [r4, #4]
 8014dca:	1ac0      	subs	r0, r0, r3
 8014dcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014dce:	b10b      	cbz	r3, 8014dd4 <__sflush_r+0x48>
 8014dd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014dd2:	1ac0      	subs	r0, r0, r3
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	4602      	mov	r2, r0
 8014dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014dda:	6a21      	ldr	r1, [r4, #32]
 8014ddc:	4628      	mov	r0, r5
 8014dde:	47b0      	blx	r6
 8014de0:	1c43      	adds	r3, r0, #1
 8014de2:	89a3      	ldrh	r3, [r4, #12]
 8014de4:	d106      	bne.n	8014df4 <__sflush_r+0x68>
 8014de6:	6829      	ldr	r1, [r5, #0]
 8014de8:	291d      	cmp	r1, #29
 8014dea:	d82b      	bhi.n	8014e44 <__sflush_r+0xb8>
 8014dec:	4a29      	ldr	r2, [pc, #164]	; (8014e94 <__sflush_r+0x108>)
 8014dee:	410a      	asrs	r2, r1
 8014df0:	07d6      	lsls	r6, r2, #31
 8014df2:	d427      	bmi.n	8014e44 <__sflush_r+0xb8>
 8014df4:	2200      	movs	r2, #0
 8014df6:	6062      	str	r2, [r4, #4]
 8014df8:	04d9      	lsls	r1, r3, #19
 8014dfa:	6922      	ldr	r2, [r4, #16]
 8014dfc:	6022      	str	r2, [r4, #0]
 8014dfe:	d504      	bpl.n	8014e0a <__sflush_r+0x7e>
 8014e00:	1c42      	adds	r2, r0, #1
 8014e02:	d101      	bne.n	8014e08 <__sflush_r+0x7c>
 8014e04:	682b      	ldr	r3, [r5, #0]
 8014e06:	b903      	cbnz	r3, 8014e0a <__sflush_r+0x7e>
 8014e08:	6560      	str	r0, [r4, #84]	; 0x54
 8014e0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014e0c:	602f      	str	r7, [r5, #0]
 8014e0e:	2900      	cmp	r1, #0
 8014e10:	d0c9      	beq.n	8014da6 <__sflush_r+0x1a>
 8014e12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014e16:	4299      	cmp	r1, r3
 8014e18:	d002      	beq.n	8014e20 <__sflush_r+0x94>
 8014e1a:	4628      	mov	r0, r5
 8014e1c:	f7ff f9f6 	bl	801420c <_free_r>
 8014e20:	2000      	movs	r0, #0
 8014e22:	6360      	str	r0, [r4, #52]	; 0x34
 8014e24:	e7c0      	b.n	8014da8 <__sflush_r+0x1c>
 8014e26:	2301      	movs	r3, #1
 8014e28:	4628      	mov	r0, r5
 8014e2a:	47b0      	blx	r6
 8014e2c:	1c41      	adds	r1, r0, #1
 8014e2e:	d1c8      	bne.n	8014dc2 <__sflush_r+0x36>
 8014e30:	682b      	ldr	r3, [r5, #0]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d0c5      	beq.n	8014dc2 <__sflush_r+0x36>
 8014e36:	2b1d      	cmp	r3, #29
 8014e38:	d001      	beq.n	8014e3e <__sflush_r+0xb2>
 8014e3a:	2b16      	cmp	r3, #22
 8014e3c:	d101      	bne.n	8014e42 <__sflush_r+0xb6>
 8014e3e:	602f      	str	r7, [r5, #0]
 8014e40:	e7b1      	b.n	8014da6 <__sflush_r+0x1a>
 8014e42:	89a3      	ldrh	r3, [r4, #12]
 8014e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e48:	81a3      	strh	r3, [r4, #12]
 8014e4a:	e7ad      	b.n	8014da8 <__sflush_r+0x1c>
 8014e4c:	690f      	ldr	r7, [r1, #16]
 8014e4e:	2f00      	cmp	r7, #0
 8014e50:	d0a9      	beq.n	8014da6 <__sflush_r+0x1a>
 8014e52:	0793      	lsls	r3, r2, #30
 8014e54:	680e      	ldr	r6, [r1, #0]
 8014e56:	bf08      	it	eq
 8014e58:	694b      	ldreq	r3, [r1, #20]
 8014e5a:	600f      	str	r7, [r1, #0]
 8014e5c:	bf18      	it	ne
 8014e5e:	2300      	movne	r3, #0
 8014e60:	eba6 0807 	sub.w	r8, r6, r7
 8014e64:	608b      	str	r3, [r1, #8]
 8014e66:	f1b8 0f00 	cmp.w	r8, #0
 8014e6a:	dd9c      	ble.n	8014da6 <__sflush_r+0x1a>
 8014e6c:	6a21      	ldr	r1, [r4, #32]
 8014e6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014e70:	4643      	mov	r3, r8
 8014e72:	463a      	mov	r2, r7
 8014e74:	4628      	mov	r0, r5
 8014e76:	47b0      	blx	r6
 8014e78:	2800      	cmp	r0, #0
 8014e7a:	dc06      	bgt.n	8014e8a <__sflush_r+0xfe>
 8014e7c:	89a3      	ldrh	r3, [r4, #12]
 8014e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e82:	81a3      	strh	r3, [r4, #12]
 8014e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014e88:	e78e      	b.n	8014da8 <__sflush_r+0x1c>
 8014e8a:	4407      	add	r7, r0
 8014e8c:	eba8 0800 	sub.w	r8, r8, r0
 8014e90:	e7e9      	b.n	8014e66 <__sflush_r+0xda>
 8014e92:	bf00      	nop
 8014e94:	dfbffffe 	.word	0xdfbffffe

08014e98 <_fflush_r>:
 8014e98:	b538      	push	{r3, r4, r5, lr}
 8014e9a:	690b      	ldr	r3, [r1, #16]
 8014e9c:	4605      	mov	r5, r0
 8014e9e:	460c      	mov	r4, r1
 8014ea0:	b913      	cbnz	r3, 8014ea8 <_fflush_r+0x10>
 8014ea2:	2500      	movs	r5, #0
 8014ea4:	4628      	mov	r0, r5
 8014ea6:	bd38      	pop	{r3, r4, r5, pc}
 8014ea8:	b118      	cbz	r0, 8014eb2 <_fflush_r+0x1a>
 8014eaa:	6a03      	ldr	r3, [r0, #32]
 8014eac:	b90b      	cbnz	r3, 8014eb2 <_fflush_r+0x1a>
 8014eae:	f7fe f8d3 	bl	8013058 <__sinit>
 8014eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d0f3      	beq.n	8014ea2 <_fflush_r+0xa>
 8014eba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014ebc:	07d0      	lsls	r0, r2, #31
 8014ebe:	d404      	bmi.n	8014eca <_fflush_r+0x32>
 8014ec0:	0599      	lsls	r1, r3, #22
 8014ec2:	d402      	bmi.n	8014eca <_fflush_r+0x32>
 8014ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014ec6:	f7fe fb15 	bl	80134f4 <__retarget_lock_acquire_recursive>
 8014eca:	4628      	mov	r0, r5
 8014ecc:	4621      	mov	r1, r4
 8014ece:	f7ff ff5d 	bl	8014d8c <__sflush_r>
 8014ed2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014ed4:	07da      	lsls	r2, r3, #31
 8014ed6:	4605      	mov	r5, r0
 8014ed8:	d4e4      	bmi.n	8014ea4 <_fflush_r+0xc>
 8014eda:	89a3      	ldrh	r3, [r4, #12]
 8014edc:	059b      	lsls	r3, r3, #22
 8014ede:	d4e1      	bmi.n	8014ea4 <_fflush_r+0xc>
 8014ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014ee2:	f7fe fb08 	bl	80134f6 <__retarget_lock_release_recursive>
 8014ee6:	e7dd      	b.n	8014ea4 <_fflush_r+0xc>

08014ee8 <__swhatbuf_r>:
 8014ee8:	b570      	push	{r4, r5, r6, lr}
 8014eea:	460c      	mov	r4, r1
 8014eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ef0:	2900      	cmp	r1, #0
 8014ef2:	b096      	sub	sp, #88	; 0x58
 8014ef4:	4615      	mov	r5, r2
 8014ef6:	461e      	mov	r6, r3
 8014ef8:	da0d      	bge.n	8014f16 <__swhatbuf_r+0x2e>
 8014efa:	89a3      	ldrh	r3, [r4, #12]
 8014efc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014f00:	f04f 0100 	mov.w	r1, #0
 8014f04:	bf0c      	ite	eq
 8014f06:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8014f0a:	2340      	movne	r3, #64	; 0x40
 8014f0c:	2000      	movs	r0, #0
 8014f0e:	6031      	str	r1, [r6, #0]
 8014f10:	602b      	str	r3, [r5, #0]
 8014f12:	b016      	add	sp, #88	; 0x58
 8014f14:	bd70      	pop	{r4, r5, r6, pc}
 8014f16:	466a      	mov	r2, sp
 8014f18:	f000 f848 	bl	8014fac <_fstat_r>
 8014f1c:	2800      	cmp	r0, #0
 8014f1e:	dbec      	blt.n	8014efa <__swhatbuf_r+0x12>
 8014f20:	9901      	ldr	r1, [sp, #4]
 8014f22:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014f26:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8014f2a:	4259      	negs	r1, r3
 8014f2c:	4159      	adcs	r1, r3
 8014f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014f32:	e7eb      	b.n	8014f0c <__swhatbuf_r+0x24>

08014f34 <__smakebuf_r>:
 8014f34:	898b      	ldrh	r3, [r1, #12]
 8014f36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014f38:	079d      	lsls	r5, r3, #30
 8014f3a:	4606      	mov	r6, r0
 8014f3c:	460c      	mov	r4, r1
 8014f3e:	d507      	bpl.n	8014f50 <__smakebuf_r+0x1c>
 8014f40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014f44:	6023      	str	r3, [r4, #0]
 8014f46:	6123      	str	r3, [r4, #16]
 8014f48:	2301      	movs	r3, #1
 8014f4a:	6163      	str	r3, [r4, #20]
 8014f4c:	b002      	add	sp, #8
 8014f4e:	bd70      	pop	{r4, r5, r6, pc}
 8014f50:	ab01      	add	r3, sp, #4
 8014f52:	466a      	mov	r2, sp
 8014f54:	f7ff ffc8 	bl	8014ee8 <__swhatbuf_r>
 8014f58:	9900      	ldr	r1, [sp, #0]
 8014f5a:	4605      	mov	r5, r0
 8014f5c:	4630      	mov	r0, r6
 8014f5e:	f7ff f9c9 	bl	80142f4 <_malloc_r>
 8014f62:	b948      	cbnz	r0, 8014f78 <__smakebuf_r+0x44>
 8014f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f68:	059a      	lsls	r2, r3, #22
 8014f6a:	d4ef      	bmi.n	8014f4c <__smakebuf_r+0x18>
 8014f6c:	f023 0303 	bic.w	r3, r3, #3
 8014f70:	f043 0302 	orr.w	r3, r3, #2
 8014f74:	81a3      	strh	r3, [r4, #12]
 8014f76:	e7e3      	b.n	8014f40 <__smakebuf_r+0xc>
 8014f78:	89a3      	ldrh	r3, [r4, #12]
 8014f7a:	6020      	str	r0, [r4, #0]
 8014f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f80:	81a3      	strh	r3, [r4, #12]
 8014f82:	9b00      	ldr	r3, [sp, #0]
 8014f84:	6163      	str	r3, [r4, #20]
 8014f86:	9b01      	ldr	r3, [sp, #4]
 8014f88:	6120      	str	r0, [r4, #16]
 8014f8a:	b15b      	cbz	r3, 8014fa4 <__smakebuf_r+0x70>
 8014f8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014f90:	4630      	mov	r0, r6
 8014f92:	f000 f81d 	bl	8014fd0 <_isatty_r>
 8014f96:	b128      	cbz	r0, 8014fa4 <__smakebuf_r+0x70>
 8014f98:	89a3      	ldrh	r3, [r4, #12]
 8014f9a:	f023 0303 	bic.w	r3, r3, #3
 8014f9e:	f043 0301 	orr.w	r3, r3, #1
 8014fa2:	81a3      	strh	r3, [r4, #12]
 8014fa4:	89a3      	ldrh	r3, [r4, #12]
 8014fa6:	431d      	orrs	r5, r3
 8014fa8:	81a5      	strh	r5, [r4, #12]
 8014faa:	e7cf      	b.n	8014f4c <__smakebuf_r+0x18>

08014fac <_fstat_r>:
 8014fac:	b538      	push	{r3, r4, r5, lr}
 8014fae:	4d07      	ldr	r5, [pc, #28]	; (8014fcc <_fstat_r+0x20>)
 8014fb0:	2300      	movs	r3, #0
 8014fb2:	4604      	mov	r4, r0
 8014fb4:	4608      	mov	r0, r1
 8014fb6:	4611      	mov	r1, r2
 8014fb8:	602b      	str	r3, [r5, #0]
 8014fba:	f7ed f838 	bl	800202e <_fstat>
 8014fbe:	1c43      	adds	r3, r0, #1
 8014fc0:	d102      	bne.n	8014fc8 <_fstat_r+0x1c>
 8014fc2:	682b      	ldr	r3, [r5, #0]
 8014fc4:	b103      	cbz	r3, 8014fc8 <_fstat_r+0x1c>
 8014fc6:	6023      	str	r3, [r4, #0]
 8014fc8:	bd38      	pop	{r3, r4, r5, pc}
 8014fca:	bf00      	nop
 8014fcc:	200067cc 	.word	0x200067cc

08014fd0 <_isatty_r>:
 8014fd0:	b538      	push	{r3, r4, r5, lr}
 8014fd2:	4d06      	ldr	r5, [pc, #24]	; (8014fec <_isatty_r+0x1c>)
 8014fd4:	2300      	movs	r3, #0
 8014fd6:	4604      	mov	r4, r0
 8014fd8:	4608      	mov	r0, r1
 8014fda:	602b      	str	r3, [r5, #0]
 8014fdc:	f7ed f837 	bl	800204e <_isatty>
 8014fe0:	1c43      	adds	r3, r0, #1
 8014fe2:	d102      	bne.n	8014fea <_isatty_r+0x1a>
 8014fe4:	682b      	ldr	r3, [r5, #0]
 8014fe6:	b103      	cbz	r3, 8014fea <_isatty_r+0x1a>
 8014fe8:	6023      	str	r3, [r4, #0]
 8014fea:	bd38      	pop	{r3, r4, r5, pc}
 8014fec:	200067cc 	.word	0x200067cc

08014ff0 <_sbrk_r>:
 8014ff0:	b538      	push	{r3, r4, r5, lr}
 8014ff2:	4d06      	ldr	r5, [pc, #24]	; (801500c <_sbrk_r+0x1c>)
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	4604      	mov	r4, r0
 8014ff8:	4608      	mov	r0, r1
 8014ffa:	602b      	str	r3, [r5, #0]
 8014ffc:	f7ed f840 	bl	8002080 <_sbrk>
 8015000:	1c43      	adds	r3, r0, #1
 8015002:	d102      	bne.n	801500a <_sbrk_r+0x1a>
 8015004:	682b      	ldr	r3, [r5, #0]
 8015006:	b103      	cbz	r3, 801500a <_sbrk_r+0x1a>
 8015008:	6023      	str	r3, [r4, #0]
 801500a:	bd38      	pop	{r3, r4, r5, pc}
 801500c:	200067cc 	.word	0x200067cc

08015010 <__assert_func>:
 8015010:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015012:	4614      	mov	r4, r2
 8015014:	461a      	mov	r2, r3
 8015016:	4b09      	ldr	r3, [pc, #36]	; (801503c <__assert_func+0x2c>)
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	4605      	mov	r5, r0
 801501c:	68d8      	ldr	r0, [r3, #12]
 801501e:	b14c      	cbz	r4, 8015034 <__assert_func+0x24>
 8015020:	4b07      	ldr	r3, [pc, #28]	; (8015040 <__assert_func+0x30>)
 8015022:	9100      	str	r1, [sp, #0]
 8015024:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015028:	4906      	ldr	r1, [pc, #24]	; (8015044 <__assert_func+0x34>)
 801502a:	462b      	mov	r3, r5
 801502c:	f000 f844 	bl	80150b8 <fiprintf>
 8015030:	f000 f854 	bl	80150dc <abort>
 8015034:	4b04      	ldr	r3, [pc, #16]	; (8015048 <__assert_func+0x38>)
 8015036:	461c      	mov	r4, r3
 8015038:	e7f3      	b.n	8015022 <__assert_func+0x12>
 801503a:	bf00      	nop
 801503c:	200001e0 	.word	0x200001e0
 8015040:	080158bf 	.word	0x080158bf
 8015044:	080158cc 	.word	0x080158cc
 8015048:	080158fa 	.word	0x080158fa

0801504c <_calloc_r>:
 801504c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801504e:	fba1 2402 	umull	r2, r4, r1, r2
 8015052:	b94c      	cbnz	r4, 8015068 <_calloc_r+0x1c>
 8015054:	4611      	mov	r1, r2
 8015056:	9201      	str	r2, [sp, #4]
 8015058:	f7ff f94c 	bl	80142f4 <_malloc_r>
 801505c:	9a01      	ldr	r2, [sp, #4]
 801505e:	4605      	mov	r5, r0
 8015060:	b930      	cbnz	r0, 8015070 <_calloc_r+0x24>
 8015062:	4628      	mov	r0, r5
 8015064:	b003      	add	sp, #12
 8015066:	bd30      	pop	{r4, r5, pc}
 8015068:	220c      	movs	r2, #12
 801506a:	6002      	str	r2, [r0, #0]
 801506c:	2500      	movs	r5, #0
 801506e:	e7f8      	b.n	8015062 <_calloc_r+0x16>
 8015070:	4621      	mov	r1, r4
 8015072:	f7fe f96d 	bl	8013350 <memset>
 8015076:	e7f4      	b.n	8015062 <_calloc_r+0x16>

08015078 <__ascii_mbtowc>:
 8015078:	b082      	sub	sp, #8
 801507a:	b901      	cbnz	r1, 801507e <__ascii_mbtowc+0x6>
 801507c:	a901      	add	r1, sp, #4
 801507e:	b142      	cbz	r2, 8015092 <__ascii_mbtowc+0x1a>
 8015080:	b14b      	cbz	r3, 8015096 <__ascii_mbtowc+0x1e>
 8015082:	7813      	ldrb	r3, [r2, #0]
 8015084:	600b      	str	r3, [r1, #0]
 8015086:	7812      	ldrb	r2, [r2, #0]
 8015088:	1e10      	subs	r0, r2, #0
 801508a:	bf18      	it	ne
 801508c:	2001      	movne	r0, #1
 801508e:	b002      	add	sp, #8
 8015090:	4770      	bx	lr
 8015092:	4610      	mov	r0, r2
 8015094:	e7fb      	b.n	801508e <__ascii_mbtowc+0x16>
 8015096:	f06f 0001 	mvn.w	r0, #1
 801509a:	e7f8      	b.n	801508e <__ascii_mbtowc+0x16>

0801509c <__ascii_wctomb>:
 801509c:	b149      	cbz	r1, 80150b2 <__ascii_wctomb+0x16>
 801509e:	2aff      	cmp	r2, #255	; 0xff
 80150a0:	bf85      	ittet	hi
 80150a2:	238a      	movhi	r3, #138	; 0x8a
 80150a4:	6003      	strhi	r3, [r0, #0]
 80150a6:	700a      	strbls	r2, [r1, #0]
 80150a8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80150ac:	bf98      	it	ls
 80150ae:	2001      	movls	r0, #1
 80150b0:	4770      	bx	lr
 80150b2:	4608      	mov	r0, r1
 80150b4:	4770      	bx	lr
	...

080150b8 <fiprintf>:
 80150b8:	b40e      	push	{r1, r2, r3}
 80150ba:	b503      	push	{r0, r1, lr}
 80150bc:	4601      	mov	r1, r0
 80150be:	ab03      	add	r3, sp, #12
 80150c0:	4805      	ldr	r0, [pc, #20]	; (80150d8 <fiprintf+0x20>)
 80150c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80150c6:	6800      	ldr	r0, [r0, #0]
 80150c8:	9301      	str	r3, [sp, #4]
 80150ca:	f7ff fd45 	bl	8014b58 <_vfiprintf_r>
 80150ce:	b002      	add	sp, #8
 80150d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80150d4:	b003      	add	sp, #12
 80150d6:	4770      	bx	lr
 80150d8:	200001e0 	.word	0x200001e0

080150dc <abort>:
 80150dc:	b508      	push	{r3, lr}
 80150de:	2006      	movs	r0, #6
 80150e0:	f000 f82c 	bl	801513c <raise>
 80150e4:	2001      	movs	r0, #1
 80150e6:	f7ec ff53 	bl	8001f90 <_exit>

080150ea <_raise_r>:
 80150ea:	291f      	cmp	r1, #31
 80150ec:	b538      	push	{r3, r4, r5, lr}
 80150ee:	4604      	mov	r4, r0
 80150f0:	460d      	mov	r5, r1
 80150f2:	d904      	bls.n	80150fe <_raise_r+0x14>
 80150f4:	2316      	movs	r3, #22
 80150f6:	6003      	str	r3, [r0, #0]
 80150f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80150fc:	bd38      	pop	{r3, r4, r5, pc}
 80150fe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8015100:	b112      	cbz	r2, 8015108 <_raise_r+0x1e>
 8015102:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015106:	b94b      	cbnz	r3, 801511c <_raise_r+0x32>
 8015108:	4620      	mov	r0, r4
 801510a:	f000 f831 	bl	8015170 <_getpid_r>
 801510e:	462a      	mov	r2, r5
 8015110:	4601      	mov	r1, r0
 8015112:	4620      	mov	r0, r4
 8015114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015118:	f000 b818 	b.w	801514c <_kill_r>
 801511c:	2b01      	cmp	r3, #1
 801511e:	d00a      	beq.n	8015136 <_raise_r+0x4c>
 8015120:	1c59      	adds	r1, r3, #1
 8015122:	d103      	bne.n	801512c <_raise_r+0x42>
 8015124:	2316      	movs	r3, #22
 8015126:	6003      	str	r3, [r0, #0]
 8015128:	2001      	movs	r0, #1
 801512a:	e7e7      	b.n	80150fc <_raise_r+0x12>
 801512c:	2400      	movs	r4, #0
 801512e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015132:	4628      	mov	r0, r5
 8015134:	4798      	blx	r3
 8015136:	2000      	movs	r0, #0
 8015138:	e7e0      	b.n	80150fc <_raise_r+0x12>
	...

0801513c <raise>:
 801513c:	4b02      	ldr	r3, [pc, #8]	; (8015148 <raise+0xc>)
 801513e:	4601      	mov	r1, r0
 8015140:	6818      	ldr	r0, [r3, #0]
 8015142:	f7ff bfd2 	b.w	80150ea <_raise_r>
 8015146:	bf00      	nop
 8015148:	200001e0 	.word	0x200001e0

0801514c <_kill_r>:
 801514c:	b538      	push	{r3, r4, r5, lr}
 801514e:	4d07      	ldr	r5, [pc, #28]	; (801516c <_kill_r+0x20>)
 8015150:	2300      	movs	r3, #0
 8015152:	4604      	mov	r4, r0
 8015154:	4608      	mov	r0, r1
 8015156:	4611      	mov	r1, r2
 8015158:	602b      	str	r3, [r5, #0]
 801515a:	f7ec ff09 	bl	8001f70 <_kill>
 801515e:	1c43      	adds	r3, r0, #1
 8015160:	d102      	bne.n	8015168 <_kill_r+0x1c>
 8015162:	682b      	ldr	r3, [r5, #0]
 8015164:	b103      	cbz	r3, 8015168 <_kill_r+0x1c>
 8015166:	6023      	str	r3, [r4, #0]
 8015168:	bd38      	pop	{r3, r4, r5, pc}
 801516a:	bf00      	nop
 801516c:	200067cc 	.word	0x200067cc

08015170 <_getpid_r>:
 8015170:	f7ec bef6 	b.w	8001f60 <_getpid>

08015174 <_init>:
 8015174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015176:	bf00      	nop
 8015178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801517a:	bc08      	pop	{r3}
 801517c:	469e      	mov	lr, r3
 801517e:	4770      	bx	lr

08015180 <_fini>:
 8015180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015182:	bf00      	nop
 8015184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015186:	bc08      	pop	{r3}
 8015188:	469e      	mov	lr, r3
 801518a:	4770      	bx	lr
