
STM32G474RET6_SecurityCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014d48  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007dc  08014f28  08014f28  00024f28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015704  08015704  00030358  2**0
                  CONTENTS
  4 .ARM          00000008  08015704  08015704  00025704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801570c  0801570c  00030358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801570c  0801570c  0002570c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015710  08015710  00025710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  08015714  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003154  20000358  08015a6c  00030358  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200034ac  08015a6c  000334ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY
 12 .debug_info   000340f5  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007307  00000000  00000000  0006447d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027e8  00000000  00000000  0006b788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000024d0  00000000  00000000  0006df70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031f43  00000000  00000000  00070440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033d0a  00000000  00000000  000a2383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00128759  00000000  00000000  000d608d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001fe7e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b950  00000000  00000000  001fe838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000358 	.word	0x20000358
 80001fc:	00000000 	.word	0x00000000
 8000200:	08014f10 	.word	0x08014f10

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000035c 	.word	0x2000035c
 800021c:	08014f10 	.word	0x08014f10

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
ADC_HandleTypeDef hadc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	; 0x30
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2220      	movs	r2, #32
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f011 f8e8 	bl	80120ea <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f1a:	4b32      	ldr	r3, [pc, #200]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f22:	4b30      	ldr	r3, [pc, #192]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f24:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f2a:	4b2e      	ldr	r3, [pc, #184]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f30:	4b2c      	ldr	r3, [pc, #176]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f36:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f3c:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f42:	4b28      	ldr	r3, [pc, #160]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f44:	2204      	movs	r2, #4
 8000f46:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f48:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f4e:	4b25      	ldr	r3, [pc, #148]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f54:	4b23      	ldr	r3, [pc, #140]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f5a:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f62:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f68:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f76:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f84:	4817      	ldr	r0, [pc, #92]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000f86:	f002 fc79 	bl	800387c <HAL_ADC_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f90:	f000 fe96 	bl	8001cc0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f94:	2300      	movs	r3, #0
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4811      	ldr	r0, [pc, #68]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000fa0:	f003 fa94 	bl	80044cc <HAL_ADCEx_MultiModeConfigChannel>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000faa:	f000 fe89 	bl	8001cc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <MX_ADC1_Init+0xec>)
 8000fb0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fb2:	2306      	movs	r3, #6
 8000fb4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fba:	237f      	movs	r3, #127	; 0x7f
 8000fbc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4806      	ldr	r0, [pc, #24]	; (8000fe4 <MX_ADC1_Init+0xe8>)
 8000fcc:	f002 fe18 	bl	8003c00 <HAL_ADC_ConfigChannel>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000fd6:	f000 fe73 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	3730      	adds	r7, #48	; 0x30
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000374 	.word	0x20000374
 8000fe8:	04300002 	.word	0x04300002

08000fec <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2220      	movs	r2, #32
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f011 f876 	bl	80120ea <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ffe:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <MX_ADC2_Init+0xc0>)
 8001000:	4a2b      	ldr	r2, [pc, #172]	; (80010b0 <MX_ADC2_Init+0xc4>)
 8001002:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001004:	4b29      	ldr	r3, [pc, #164]	; (80010ac <MX_ADC2_Init+0xc0>)
 8001006:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800100a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800100c:	4b27      	ldr	r3, [pc, #156]	; (80010ac <MX_ADC2_Init+0xc0>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001012:	4b26      	ldr	r3, [pc, #152]	; (80010ac <MX_ADC2_Init+0xc0>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001018:	4b24      	ldr	r3, [pc, #144]	; (80010ac <MX_ADC2_Init+0xc0>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800101e:	4b23      	ldr	r3, [pc, #140]	; (80010ac <MX_ADC2_Init+0xc0>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <MX_ADC2_Init+0xc0>)
 8001026:	2204      	movs	r2, #4
 8001028:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <MX_ADC2_Init+0xc0>)
 800102c:	2200      	movs	r2, #0
 800102e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001030:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <MX_ADC2_Init+0xc0>)
 8001032:	2200      	movs	r2, #0
 8001034:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001036:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <MX_ADC2_Init+0xc0>)
 8001038:	2201      	movs	r2, #1
 800103a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <MX_ADC2_Init+0xc0>)
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001044:	4b19      	ldr	r3, [pc, #100]	; (80010ac <MX_ADC2_Init+0xc0>)
 8001046:	2200      	movs	r2, #0
 8001048:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <MX_ADC2_Init+0xc0>)
 800104c:	2200      	movs	r2, #0
 800104e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001050:	4b16      	ldr	r3, [pc, #88]	; (80010ac <MX_ADC2_Init+0xc0>)
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <MX_ADC2_Init+0xc0>)
 800105a:	2200      	movs	r2, #0
 800105c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <MX_ADC2_Init+0xc0>)
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001066:	4811      	ldr	r0, [pc, #68]	; (80010ac <MX_ADC2_Init+0xc0>)
 8001068:	f002 fc08 	bl	800387c <HAL_ADC_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001072:	f000 fe25 	bl	8001cc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_ADC2_Init+0xc8>)
 8001078:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800107a:	2306      	movs	r3, #6
 800107c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001082:	237f      	movs	r3, #127	; 0x7f
 8001084:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001086:	2304      	movs	r3, #4
 8001088:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800108e:	463b      	mov	r3, r7
 8001090:	4619      	mov	r1, r3
 8001092:	4806      	ldr	r0, [pc, #24]	; (80010ac <MX_ADC2_Init+0xc0>)
 8001094:	f002 fdb4 	bl	8003c00 <HAL_ADC_ConfigChannel>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800109e:	f000 fe0f 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	3720      	adds	r7, #32
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200003e0 	.word	0x200003e0
 80010b0:	50000100 	.word	0x50000100
 80010b4:	25b00200 	.word	0x25b00200

080010b8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08c      	sub	sp, #48	; 0x30
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2220      	movs	r2, #32
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f011 f80a 	bl	80120ea <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80010d6:	4b31      	ldr	r3, [pc, #196]	; (800119c <MX_ADC3_Init+0xe4>)
 80010d8:	4a31      	ldr	r2, [pc, #196]	; (80011a0 <MX_ADC3_Init+0xe8>)
 80010da:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010dc:	4b2f      	ldr	r3, [pc, #188]	; (800119c <MX_ADC3_Init+0xe4>)
 80010de:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010e2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010e4:	4b2d      	ldr	r3, [pc, #180]	; (800119c <MX_ADC3_Init+0xe4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ea:	4b2c      	ldr	r3, [pc, #176]	; (800119c <MX_ADC3_Init+0xe4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80010f0:	4b2a      	ldr	r3, [pc, #168]	; (800119c <MX_ADC3_Init+0xe4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010f6:	4b29      	ldr	r3, [pc, #164]	; (800119c <MX_ADC3_Init+0xe4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010fc:	4b27      	ldr	r3, [pc, #156]	; (800119c <MX_ADC3_Init+0xe4>)
 80010fe:	2204      	movs	r2, #4
 8001100:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <MX_ADC3_Init+0xe4>)
 8001104:	2200      	movs	r2, #0
 8001106:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001108:	4b24      	ldr	r3, [pc, #144]	; (800119c <MX_ADC3_Init+0xe4>)
 800110a:	2200      	movs	r2, #0
 800110c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800110e:	4b23      	ldr	r3, [pc, #140]	; (800119c <MX_ADC3_Init+0xe4>)
 8001110:	2201      	movs	r2, #1
 8001112:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001114:	4b21      	ldr	r3, [pc, #132]	; (800119c <MX_ADC3_Init+0xe4>)
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800111c:	4b1f      	ldr	r3, [pc, #124]	; (800119c <MX_ADC3_Init+0xe4>)
 800111e:	2200      	movs	r2, #0
 8001120:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <MX_ADC3_Init+0xe4>)
 8001124:	2200      	movs	r2, #0
 8001126:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001128:	4b1c      	ldr	r3, [pc, #112]	; (800119c <MX_ADC3_Init+0xe4>)
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <MX_ADC3_Init+0xe4>)
 8001132:	2200      	movs	r2, #0
 8001134:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <MX_ADC3_Init+0xe4>)
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800113e:	4817      	ldr	r0, [pc, #92]	; (800119c <MX_ADC3_Init+0xe4>)
 8001140:	f002 fb9c 	bl	800387c <HAL_ADC_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800114a:	f000 fdb9 	bl	8001cc0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001156:	4619      	mov	r1, r3
 8001158:	4810      	ldr	r0, [pc, #64]	; (800119c <MX_ADC3_Init+0xe4>)
 800115a:	f003 f9b7 	bl	80044cc <HAL_ADCEx_MultiModeConfigChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001164:	f000 fdac 	bl	8001cc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_ADC3_Init+0xec>)
 800116a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800116c:	2306      	movs	r3, #6
 800116e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001174:	237f      	movs	r3, #127	; 0x7f
 8001176:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001178:	2304      	movs	r3, #4
 800117a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	; (800119c <MX_ADC3_Init+0xe4>)
 8001186:	f002 fd3b 	bl	8003c00 <HAL_ADC_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8001190:	f000 fd96 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	3730      	adds	r7, #48	; 0x30
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	2000044c 	.word	0x2000044c
 80011a0:	50000400 	.word	0x50000400
 80011a4:	04300002 	.word	0x04300002

080011a8 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ae:	463b      	mov	r3, r7
 80011b0:	2220      	movs	r2, #32
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f010 ff98 	bl	80120ea <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80011ba:	4b2b      	ldr	r3, [pc, #172]	; (8001268 <MX_ADC4_Init+0xc0>)
 80011bc:	4a2b      	ldr	r2, [pc, #172]	; (800126c <MX_ADC4_Init+0xc4>)
 80011be:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011c0:	4b29      	ldr	r3, [pc, #164]	; (8001268 <MX_ADC4_Init+0xc0>)
 80011c2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011c6:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80011c8:	4b27      	ldr	r3, [pc, #156]	; (8001268 <MX_ADC4_Init+0xc0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <MX_ADC4_Init+0xc0>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80011d4:	4b24      	ldr	r3, [pc, #144]	; (8001268 <MX_ADC4_Init+0xc0>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011da:	4b23      	ldr	r3, [pc, #140]	; (8001268 <MX_ADC4_Init+0xc0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011e0:	4b21      	ldr	r3, [pc, #132]	; (8001268 <MX_ADC4_Init+0xc0>)
 80011e2:	2204      	movs	r2, #4
 80011e4:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80011e6:	4b20      	ldr	r3, [pc, #128]	; (8001268 <MX_ADC4_Init+0xc0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 80011ec:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <MX_ADC4_Init+0xc0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 80011f2:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <MX_ADC4_Init+0xc0>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <MX_ADC4_Init+0xc0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001200:	4b19      	ldr	r3, [pc, #100]	; (8001268 <MX_ADC4_Init+0xc0>)
 8001202:	2200      	movs	r2, #0
 8001204:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <MX_ADC4_Init+0xc0>)
 8001208:	2200      	movs	r2, #0
 800120a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 800120c:	4b16      	ldr	r3, [pc, #88]	; (8001268 <MX_ADC4_Init+0xc0>)
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <MX_ADC4_Init+0xc0>)
 8001216:	2200      	movs	r2, #0
 8001218:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <MX_ADC4_Init+0xc0>)
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001222:	4811      	ldr	r0, [pc, #68]	; (8001268 <MX_ADC4_Init+0xc0>)
 8001224:	f002 fb2a 	bl	800387c <HAL_ADC_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 800122e:	f000 fd47 	bl	8001cc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_ADC4_Init+0xc8>)
 8001234:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001236:	2306      	movs	r3, #6
 8001238:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800123a:	2304      	movs	r3, #4
 800123c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800123e:	237f      	movs	r3, #127	; 0x7f
 8001240:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001242:	2304      	movs	r3, #4
 8001244:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800124a:	463b      	mov	r3, r7
 800124c:	4619      	mov	r1, r3
 800124e:	4806      	ldr	r0, [pc, #24]	; (8001268 <MX_ADC4_Init+0xc0>)
 8001250:	f002 fcd6 	bl	8003c00 <HAL_ADC_ConfigChannel>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 800125a:	f000 fd31 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	3720      	adds	r7, #32
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200004b8 	.word	0x200004b8
 800126c:	50000500 	.word	0x50000500
 8001270:	0c900008 	.word	0x0c900008

08001274 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b0a6      	sub	sp, #152	; 0x98
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800128c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001290:	2254      	movs	r2, #84	; 0x54
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f010 ff28 	bl	80120ea <memset>
  if(adcHandle->Instance==ADC1)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012a2:	d141      	bne.n	8001328 <HAL_ADC_MspInit+0xb4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012a8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012aa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80012ae:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012b4:	4618      	mov	r0, r3
 80012b6:	f006 ff63 	bl	8008180 <HAL_RCCEx_PeriphCLKConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012c0:	f000 fcfe 	bl	8001cc0 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012c4:	4b91      	ldr	r3, [pc, #580]	; (800150c <HAL_ADC_MspInit+0x298>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	3301      	adds	r3, #1
 80012ca:	4a90      	ldr	r2, [pc, #576]	; (800150c <HAL_ADC_MspInit+0x298>)
 80012cc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012ce:	4b8f      	ldr	r3, [pc, #572]	; (800150c <HAL_ADC_MspInit+0x298>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d10b      	bne.n	80012ee <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012d6:	4b8e      	ldr	r3, [pc, #568]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	4a8d      	ldr	r2, [pc, #564]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80012dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e2:	4b8b      	ldr	r3, [pc, #556]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	4b88      	ldr	r3, [pc, #544]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	4a87      	ldr	r2, [pc, #540]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fa:	4b85      	ldr	r3, [pc, #532]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
 8001304:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001306:	2303      	movs	r3, #3
 8001308:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800130c:	2303      	movs	r3, #3
 800130e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800131c:	4619      	mov	r1, r3
 800131e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001322:	f003 fb99 	bl	8004a58 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8001326:	e0ed      	b.n	8001504 <HAL_ADC_MspInit+0x290>
  else if(adcHandle->Instance==ADC2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a79      	ldr	r2, [pc, #484]	; (8001514 <HAL_ADC_MspInit+0x2a0>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d15b      	bne.n	80013ea <HAL_ADC_MspInit+0x176>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001338:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800133c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800133e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001342:	4618      	mov	r0, r3
 8001344:	f006 ff1c 	bl	8008180 <HAL_RCCEx_PeriphCLKConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_ADC_MspInit+0xde>
      Error_Handler();
 800134e:	f000 fcb7 	bl	8001cc0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001352:	4b6e      	ldr	r3, [pc, #440]	; (800150c <HAL_ADC_MspInit+0x298>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	4a6c      	ldr	r2, [pc, #432]	; (800150c <HAL_ADC_MspInit+0x298>)
 800135a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800135c:	4b6b      	ldr	r3, [pc, #428]	; (800150c <HAL_ADC_MspInit+0x298>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d10b      	bne.n	800137c <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001364:	4b6a      	ldr	r3, [pc, #424]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001368:	4a69      	ldr	r2, [pc, #420]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 800136a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800136e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001370:	4b67      	ldr	r3, [pc, #412]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 8001372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800137c:	4b64      	ldr	r3, [pc, #400]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 800137e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001380:	4a63      	ldr	r2, [pc, #396]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 8001382:	f043 0304 	orr.w	r3, r3, #4
 8001386:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001388:	4b61      	ldr	r3, [pc, #388]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 800138a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	623b      	str	r3, [r7, #32]
 8001392:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001394:	4b5e      	ldr	r3, [pc, #376]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 8001396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001398:	4a5d      	ldr	r2, [pc, #372]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 800139a:	f043 0302 	orr.w	r3, r3, #2
 800139e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a0:	4b5b      	ldr	r3, [pc, #364]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80013a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	61fb      	str	r3, [r7, #28]
 80013aa:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013ac:	2308      	movs	r3, #8
 80013ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b2:	2303      	movs	r3, #3
 80013b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013be:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80013c2:	4619      	mov	r1, r3
 80013c4:	4854      	ldr	r0, [pc, #336]	; (8001518 <HAL_ADC_MspInit+0x2a4>)
 80013c6:	f003 fb47 	bl	8004a58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013ca:	2304      	movs	r3, #4
 80013cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d0:	2303      	movs	r3, #3
 80013d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013dc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80013e0:	4619      	mov	r1, r3
 80013e2:	484e      	ldr	r0, [pc, #312]	; (800151c <HAL_ADC_MspInit+0x2a8>)
 80013e4:	f003 fb38 	bl	8004a58 <HAL_GPIO_Init>
}
 80013e8:	e08c      	b.n	8001504 <HAL_ADC_MspInit+0x290>
  else if(adcHandle->Instance==ADC3)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a4c      	ldr	r2, [pc, #304]	; (8001520 <HAL_ADC_MspInit+0x2ac>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d141      	bne.n	8001478 <HAL_ADC_MspInit+0x204>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80013f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80013fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80013fe:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001400:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001404:	4618      	mov	r0, r3
 8001406:	f006 febb 	bl	8008180 <HAL_RCCEx_PeriphCLKConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_ADC_MspInit+0x1a0>
      Error_Handler();
 8001410:	f000 fc56 	bl	8001cc0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001414:	4b43      	ldr	r3, [pc, #268]	; (8001524 <HAL_ADC_MspInit+0x2b0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	3301      	adds	r3, #1
 800141a:	4a42      	ldr	r2, [pc, #264]	; (8001524 <HAL_ADC_MspInit+0x2b0>)
 800141c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800141e:	4b41      	ldr	r3, [pc, #260]	; (8001524 <HAL_ADC_MspInit+0x2b0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d10b      	bne.n	800143e <HAL_ADC_MspInit+0x1ca>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001426:	4b3a      	ldr	r3, [pc, #232]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	4a39      	ldr	r2, [pc, #228]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 800142c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001432:	4b37      	ldr	r3, [pc, #220]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143a:	61bb      	str	r3, [r7, #24]
 800143c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	4b34      	ldr	r3, [pc, #208]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	4a33      	ldr	r2, [pc, #204]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144a:	4b31      	ldr	r3, [pc, #196]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 8001456:	f242 0302 	movw	r3, #8194	; 0x2002
 800145a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145e:	2303      	movs	r3, #3
 8001460:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800146e:	4619      	mov	r1, r3
 8001470:	482a      	ldr	r0, [pc, #168]	; (800151c <HAL_ADC_MspInit+0x2a8>)
 8001472:	f003 faf1 	bl	8004a58 <HAL_GPIO_Init>
}
 8001476:	e045      	b.n	8001504 <HAL_ADC_MspInit+0x290>
  else if(adcHandle->Instance==ADC4)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a2a      	ldr	r2, [pc, #168]	; (8001528 <HAL_ADC_MspInit+0x2b4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d140      	bne.n	8001504 <HAL_ADC_MspInit+0x290>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001482:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001486:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001488:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800148c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800148e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001492:	4618      	mov	r0, r3
 8001494:	f006 fe74 	bl	8008180 <HAL_RCCEx_PeriphCLKConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_ADC_MspInit+0x22e>
      Error_Handler();
 800149e:	f000 fc0f 	bl	8001cc0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80014a2:	4b20      	ldr	r3, [pc, #128]	; (8001524 <HAL_ADC_MspInit+0x2b0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	3301      	adds	r3, #1
 80014a8:	4a1e      	ldr	r2, [pc, #120]	; (8001524 <HAL_ADC_MspInit+0x2b0>)
 80014aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80014ac:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <HAL_ADC_MspInit+0x2b0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d10b      	bne.n	80014cc <HAL_ADC_MspInit+0x258>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	4a15      	ldr	r2, [pc, #84]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80014ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80014c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80014ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d0:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80014d2:	f043 0302 	orr.w	r3, r3, #2
 80014d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d8:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <HAL_ADC_MspInit+0x29c>)
 80014da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80014e4:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80014e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ec:	2303      	movs	r3, #3
 80014ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80014fc:	4619      	mov	r1, r3
 80014fe:	4807      	ldr	r0, [pc, #28]	; (800151c <HAL_ADC_MspInit+0x2a8>)
 8001500:	f003 faaa 	bl	8004a58 <HAL_GPIO_Init>
}
 8001504:	bf00      	nop
 8001506:	3798      	adds	r7, #152	; 0x98
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000524 	.word	0x20000524
 8001510:	40021000 	.word	0x40021000
 8001514:	50000100 	.word	0x50000100
 8001518:	48000800 	.word	0x48000800
 800151c:	48000400 	.word	0x48000400
 8001520:	50000400 	.word	0x50000400
 8001524:	20000528 	.word	0x20000528
 8001528:	50000500 	.word	0x50000500

0800152c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800152c:	b5b0      	push	{r4, r5, r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <MX_FREERTOS_Init+0x2c>)
 8001534:	1d3c      	adds	r4, r7, #4
 8001536:	461d      	mov	r5, r3
 8001538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800153a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800153c:	682b      	ldr	r3, [r5, #0]
 800153e:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	2100      	movs	r1, #0
 8001544:	4618      	mov	r0, r3
 8001546:	f00d fe53 	bl	800f1f0 <osThreadCreate>
 800154a:	4603      	mov	r3, r0
 800154c:	4a03      	ldr	r2, [pc, #12]	; (800155c <MX_FREERTOS_Init+0x30>)
 800154e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001550:	bf00      	nop
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bdb0      	pop	{r4, r5, r7, pc}
 8001558:	08014f34 	.word	0x08014f34
 800155c:	2000052c 	.word	0x2000052c

08001560 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001568:	2001      	movs	r0, #1
 800156a:	f00d fe68 	bl	800f23e <osDelay>
 800156e:	e7fb      	b.n	8001568 <StartDefaultTask+0x8>

08001570 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <MX_CORDIC_Init+0x20>)
 8001576:	4a07      	ldr	r2, [pc, #28]	; (8001594 <MX_CORDIC_Init+0x24>)
 8001578:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_CORDIC_Init+0x20>)
 800157c:	f003 f8ae 	bl	80046dc <HAL_CORDIC_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001586:	f000 fb9b 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000530 	.word	0x20000530
 8001594:	40020c00 	.word	0x40020c00

08001598 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <HAL_CORDIC_MspInit+0x38>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d10b      	bne.n	80015c2 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80015aa:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <HAL_CORDIC_MspInit+0x3c>)
 80015ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ae:	4a09      	ldr	r2, [pc, #36]	; (80015d4 <HAL_CORDIC_MspInit+0x3c>)
 80015b0:	f043 0308 	orr.w	r3, r3, #8
 80015b4:	6493      	str	r3, [r2, #72]	; 0x48
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <HAL_CORDIC_MspInit+0x3c>)
 80015b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 80015c2:	bf00      	nop
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40020c00 	.word	0x40020c00
 80015d4:	40021000 	.word	0x40021000

080015d8 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_FMAC_Init+0x20>)
 80015de:	4a07      	ldr	r2, [pc, #28]	; (80015fc <MX_FMAC_Init+0x24>)
 80015e0:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_FMAC_Init+0x20>)
 80015e4:	f003 f98c 	bl	8004900 <HAL_FMAC_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 80015ee:	f000 fb67 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000558 	.word	0x20000558
 80015fc:	40021400 	.word	0x40021400

08001600 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <HAL_FMAC_MspInit+0x38>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d10b      	bne.n	800162a <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <HAL_FMAC_MspInit+0x3c>)
 8001614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001616:	4a09      	ldr	r2, [pc, #36]	; (800163c <HAL_FMAC_MspInit+0x3c>)
 8001618:	f043 0310 	orr.w	r3, r3, #16
 800161c:	6493      	str	r3, [r2, #72]	; 0x48
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <HAL_FMAC_MspInit+0x3c>)
 8001620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40021400 	.word	0x40021400
 800163c:	40021000 	.word	0x40021000

08001640 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ENC_BTN_A_Pin){
		//ENC_Button_Update(HAL_GPIO_ReadPin(ENC_BTN_B_GPIO_Port, ENC_BTN_B_Pin));
	}

}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08c      	sub	sp, #48	; 0x30
 800165c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	f107 031c 	add.w	r3, r7, #28
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800166e:	4b72      	ldr	r3, [pc, #456]	; (8001838 <MX_GPIO_Init+0x1e0>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	4a71      	ldr	r2, [pc, #452]	; (8001838 <MX_GPIO_Init+0x1e0>)
 8001674:	f043 0320 	orr.w	r3, r3, #32
 8001678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167a:	4b6f      	ldr	r3, [pc, #444]	; (8001838 <MX_GPIO_Init+0x1e0>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	f003 0320 	and.w	r3, r3, #32
 8001682:	61bb      	str	r3, [r7, #24]
 8001684:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001686:	4b6c      	ldr	r3, [pc, #432]	; (8001838 <MX_GPIO_Init+0x1e0>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	4a6b      	ldr	r2, [pc, #428]	; (8001838 <MX_GPIO_Init+0x1e0>)
 800168c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001692:	4b69      	ldr	r3, [pc, #420]	; (8001838 <MX_GPIO_Init+0x1e0>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169e:	4b66      	ldr	r3, [pc, #408]	; (8001838 <MX_GPIO_Init+0x1e0>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	4a65      	ldr	r2, [pc, #404]	; (8001838 <MX_GPIO_Init+0x1e0>)
 80016a4:	f043 0304 	orr.w	r3, r3, #4
 80016a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016aa:	4b63      	ldr	r3, [pc, #396]	; (8001838 <MX_GPIO_Init+0x1e0>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	4b60      	ldr	r3, [pc, #384]	; (8001838 <MX_GPIO_Init+0x1e0>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	4a5f      	ldr	r2, [pc, #380]	; (8001838 <MX_GPIO_Init+0x1e0>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c2:	4b5d      	ldr	r3, [pc, #372]	; (8001838 <MX_GPIO_Init+0x1e0>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ce:	4b5a      	ldr	r3, [pc, #360]	; (8001838 <MX_GPIO_Init+0x1e0>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	4a59      	ldr	r2, [pc, #356]	; (8001838 <MX_GPIO_Init+0x1e0>)
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016da:	4b57      	ldr	r3, [pc, #348]	; (8001838 <MX_GPIO_Init+0x1e0>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e6:	4b54      	ldr	r3, [pc, #336]	; (8001838 <MX_GPIO_Init+0x1e0>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	4a53      	ldr	r2, [pc, #332]	; (8001838 <MX_GPIO_Init+0x1e0>)
 80016ec:	f043 0308 	orr.w	r3, r3, #8
 80016f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f2:	4b51      	ldr	r3, [pc, #324]	; (8001838 <MX_GPIO_Init+0x1e0>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_ENABLE_GPIO_Port, PWR_ENABLE_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001704:	484d      	ldr	r0, [pc, #308]	; (800183c <MX_GPIO_Init+0x1e4>)
 8001706:	f003 fb29 	bl	8004d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_1_GPIO_Port, USR_LED_1_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001714:	f003 fb22 	bl	8004d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USR_LED_2_Pin|USR_LED_3_Pin|USR_LED_4_Pin, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800171e:	4848      	ldr	r0, [pc, #288]	; (8001840 <MX_GPIO_Init+0x1e8>)
 8001720:	f003 fb1c 	bl	8004d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_Pin;
 8001724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800172a:	2300      	movs	r3, #0
 800172c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 8001732:	f107 031c 	add.w	r3, r7, #28
 8001736:	4619      	mov	r1, r3
 8001738:	4842      	ldr	r0, [pc, #264]	; (8001844 <MX_GPIO_Init+0x1ec>)
 800173a:	f003 f98d 	bl	8004a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_2_Pin;
 800173e:	2310      	movs	r3, #16
 8001740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001742:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001748:	2301      	movs	r3, #1
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USR_BTN_2_GPIO_Port, &GPIO_InitStruct);
 800174c:	f107 031c 	add.w	r3, r7, #28
 8001750:	4619      	mov	r1, r3
 8001752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001756:	f003 f97f 	bl	8004a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 800175a:	2320      	movs	r3, #32
 800175c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800175e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	4619      	mov	r1, r3
 800176e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001772:	f003 f971 	bl	8004a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Nucleo_NRST_Pin;
 8001776:	2301      	movs	r3, #1
 8001778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800177a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800177e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Nucleo_NRST_GPIO_Port, &GPIO_InitStruct);
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	4619      	mov	r1, r3
 800178a:	482c      	ldr	r0, [pc, #176]	; (800183c <MX_GPIO_Init+0x1e4>)
 800178c:	f003 f964 	bl	8004a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_ENABLE_Pin;
 8001790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001796:	2301      	movs	r3, #1
 8001798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PWR_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	4619      	mov	r1, r3
 80017a8:	4824      	ldr	r0, [pc, #144]	; (800183c <MX_GPIO_Init+0x1e4>)
 80017aa:	f003 f955 	bl	8004a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_1_Pin;
 80017ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USR_LED_1_GPIO_Port, &GPIO_InitStruct);
 80017c0:	f107 031c 	add.w	r3, r7, #28
 80017c4:	4619      	mov	r1, r3
 80017c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ca:	f003 f945 	bl	8004a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = USR_LED_2_Pin|USR_LED_3_Pin|USR_LED_4_Pin;
 80017ce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d4:	2301      	movs	r3, #1
 80017d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e0:	f107 031c 	add.w	r3, r7, #28
 80017e4:	4619      	mov	r1, r3
 80017e6:	4816      	ldr	r0, [pc, #88]	; (8001840 <MX_GPIO_Init+0x1e8>)
 80017e8:	f003 f936 	bl	8004a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_1_Pin;
 80017ec:	2304      	movs	r3, #4
 80017ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USR_BTN_1_GPIO_Port, &GPIO_InitStruct);
 80017fa:	f107 031c 	add.w	r3, r7, #28
 80017fe:	4619      	mov	r1, r3
 8001800:	4811      	ldr	r0, [pc, #68]	; (8001848 <MX_GPIO_Init+0x1f0>)
 8001802:	f003 f929 	bl	8004a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Soft_NRST_Pin;
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800180a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800180e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001810:	2301      	movs	r3, #1
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Soft_NRST_GPIO_Port, &GPIO_InitStruct);
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4619      	mov	r1, r3
 800181a:	4808      	ldr	r0, [pc, #32]	; (800183c <MX_GPIO_Init+0x1e4>)
 800181c:	f003 f91c 	bl	8004a58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001820:	2200      	movs	r2, #0
 8001822:	2105      	movs	r1, #5
 8001824:	2017      	movs	r0, #23
 8001826:	f003 f843 	bl	80048b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800182a:	2017      	movs	r0, #23
 800182c:	f003 f85a 	bl	80048e4 <HAL_NVIC_EnableIRQ>

}
 8001830:	bf00      	nop
 8001832:	3730      	adds	r7, #48	; 0x30
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40021000 	.word	0x40021000
 800183c:	48000400 	.word	0x48000400
 8001840:	48000800 	.word	0x48000800
 8001844:	48001800 	.word	0x48001800
 8001848:	48000c00 	.word	0x48000c00

0800184c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <MX_I2C2_Init+0x74>)
 8001852:	4a1c      	ldr	r2, [pc, #112]	; (80018c4 <MX_I2C2_Init+0x78>)
 8001854:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8001856:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_I2C2_Init+0x74>)
 8001858:	4a1b      	ldr	r2, [pc, #108]	; (80018c8 <MX_I2C2_Init+0x7c>)
 800185a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <MX_I2C2_Init+0x74>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <MX_I2C2_Init+0x74>)
 8001864:	2201      	movs	r2, #1
 8001866:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <MX_I2C2_Init+0x74>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800186e:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <MX_I2C2_Init+0x74>)
 8001870:	2200      	movs	r2, #0
 8001872:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <MX_I2C2_Init+0x74>)
 8001876:	2200      	movs	r2, #0
 8001878:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <MX_I2C2_Init+0x74>)
 800187c:	2200      	movs	r2, #0
 800187e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <MX_I2C2_Init+0x74>)
 8001882:	2200      	movs	r2, #0
 8001884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001886:	480e      	ldr	r0, [pc, #56]	; (80018c0 <MX_I2C2_Init+0x74>)
 8001888:	f003 fab2 	bl	8004df0 <HAL_I2C_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001892:	f000 fa15 	bl	8001cc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001896:	2100      	movs	r1, #0
 8001898:	4809      	ldr	r0, [pc, #36]	; (80018c0 <MX_I2C2_Init+0x74>)
 800189a:	f004 f8a1 	bl	80059e0 <HAL_I2CEx_ConfigAnalogFilter>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80018a4:	f000 fa0c 	bl	8001cc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80018a8:	2100      	movs	r1, #0
 80018aa:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_I2C2_Init+0x74>)
 80018ac:	f004 f8e3 	bl	8005a76 <HAL_I2CEx_ConfigDigitalFilter>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80018b6:	f000 fa03 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000590 	.word	0x20000590
 80018c4:	40005800 	.word	0x40005800
 80018c8:	30a0a7fb 	.word	0x30a0a7fb

080018cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b09e      	sub	sp, #120	; 0x78
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e4:	f107 0310 	add.w	r3, r7, #16
 80018e8:	2254      	movs	r2, #84	; 0x54
 80018ea:	2100      	movs	r1, #0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f010 fbfc 	bl	80120ea <memset>
  if(i2cHandle->Instance==I2C2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a1f      	ldr	r2, [pc, #124]	; (8001974 <HAL_I2C_MspInit+0xa8>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d137      	bne.n	800196c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001900:	2300      	movs	r3, #0
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001904:	f107 0310 	add.w	r3, r7, #16
 8001908:	4618      	mov	r0, r3
 800190a:	f006 fc39 	bl	8008180 <HAL_RCCEx_PeriphCLKConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001914:	f000 f9d4 	bl	8001cc0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <HAL_I2C_MspInit+0xac>)
 800191a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191c:	4a16      	ldr	r2, [pc, #88]	; (8001978 <HAL_I2C_MspInit+0xac>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <HAL_I2C_MspInit+0xac>)
 8001926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001930:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001934:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001936:	2312      	movs	r3, #18
 8001938:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001942:	2304      	movs	r3, #4
 8001944:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001946:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800194a:	4619      	mov	r1, r3
 800194c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001950:	f003 f882 	bl	8004a58 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <HAL_I2C_MspInit+0xac>)
 8001956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001958:	4a07      	ldr	r2, [pc, #28]	; (8001978 <HAL_I2C_MspInit+0xac>)
 800195a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800195e:	6593      	str	r3, [r2, #88]	; 0x58
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_I2C_MspInit+0xac>)
 8001962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001964:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800196c:	bf00      	nop
 800196e:	3778      	adds	r7, #120	; 0x78
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40005800 	.word	0x40005800
 8001978:	40021000 	.word	0x40021000

0800197c <I2C_Scan>:
  /* USER CODE END I2C2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void I2C_Scan(I2C_HandleTypeDef* i2cHandle){
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	uint8_t i2c_Number = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	73fb      	strb	r3, [r7, #15]
	if(i2cHandle->Instance==I2C1) i2c_Number = 2;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a24      	ldr	r2, [pc, #144]	; (8001a20 <I2C_Scan+0xa4>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d101      	bne.n	8001996 <I2C_Scan+0x1a>
 8001992:	2302      	movs	r3, #2
 8001994:	73fb      	strb	r3, [r7, #15]
	if(i2cHandle->Instance==I2C2) i2c_Number = 2;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a22      	ldr	r2, [pc, #136]	; (8001a24 <I2C_Scan+0xa8>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d101      	bne.n	80019a4 <I2C_Scan+0x28>
 80019a0:	2302      	movs	r3, #2
 80019a2:	73fb      	strb	r3, [r7, #15]
	if(i2cHandle->Instance==I2C3) i2c_Number = 3;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a1f      	ldr	r2, [pc, #124]	; (8001a28 <I2C_Scan+0xac>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d101      	bne.n	80019b2 <I2C_Scan+0x36>
 80019ae:	2303      	movs	r3, #3
 80019b0:	73fb      	strb	r3, [r7, #15]
	printf("### Scanning I2C bus number %d ###\r\n", i2c_Number);
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	4619      	mov	r1, r3
 80019b6:	481d      	ldr	r0, [pc, #116]	; (8001a2c <I2C_Scan+0xb0>)
 80019b8:	f011 f89e 	bl	8012af8 <iprintf>
	for(uint16_t addr = 0x00; addr < 0x80; addr++){
 80019bc:	2300      	movs	r3, #0
 80019be:	81bb      	strh	r3, [r7, #12]
 80019c0:	e023      	b.n	8001a0a <I2C_Scan+0x8e>
		if(HAL_I2C_IsDeviceReady(i2cHandle, addr<<1, 1, HAL_MAX_DELAY) == HAL_OK){
 80019c2:	89bb      	ldrh	r3, [r7, #12]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	b299      	uxth	r1, r3
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019cc:	2201      	movs	r2, #1
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f003 fcac 	bl	800532c <HAL_I2C_IsDeviceReady>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d105      	bne.n	80019e6 <I2C_Scan+0x6a>
			printf("0x%2x ", addr);
 80019da:	89bb      	ldrh	r3, [r7, #12]
 80019dc:	4619      	mov	r1, r3
 80019de:	4814      	ldr	r0, [pc, #80]	; (8001a30 <I2C_Scan+0xb4>)
 80019e0:	f011 f88a 	bl	8012af8 <iprintf>
 80019e4:	e002      	b.n	80019ec <I2C_Scan+0x70>
		}
		else{
			printf(" --  ");
 80019e6:	4813      	ldr	r0, [pc, #76]	; (8001a34 <I2C_Scan+0xb8>)
 80019e8:	f011 f886 	bl	8012af8 <iprintf>
		}
		if((addr+1)%8 == 0){
 80019ec:	89bb      	ldrh	r3, [r7, #12]
 80019ee:	3301      	adds	r3, #1
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <I2C_Scan+0x82>
			printf("\r\n");
 80019f8:	480f      	ldr	r0, [pc, #60]	; (8001a38 <I2C_Scan+0xbc>)
 80019fa:	f011 f903 	bl	8012c04 <puts>
		}
		HAL_Delay(1);
 80019fe:	2001      	movs	r0, #1
 8001a00:	f001 fd40 	bl	8003484 <HAL_Delay>
	for(uint16_t addr = 0x00; addr < 0x80; addr++){
 8001a04:	89bb      	ldrh	r3, [r7, #12]
 8001a06:	3301      	adds	r3, #1
 8001a08:	81bb      	strh	r3, [r7, #12]
 8001a0a:	89bb      	ldrh	r3, [r7, #12]
 8001a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8001a0e:	d9d8      	bls.n	80019c2 <I2C_Scan+0x46>
	}
	printf("\r\n");
 8001a10:	4809      	ldr	r0, [pc, #36]	; (8001a38 <I2C_Scan+0xbc>)
 8001a12:	f011 f8f7 	bl	8012c04 <puts>
}
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40005400 	.word	0x40005400
 8001a24:	40005800 	.word	0x40005800
 8001a28:	40007800 	.word	0x40007800
 8001a2c:	08014f48 	.word	0x08014f48
 8001a30:	08014f70 	.word	0x08014f70
 8001a34:	08014f78 	.word	0x08014f78
 8001a38:	08014f80 	.word	0x08014f80

08001a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af02      	add	r7, sp, #8
//	int uartTxSize = 0;
//	uint16_t bus_voltage_raw;
//	float bus_voltage;
//	int time = 0;
//	BaseType_t xReturned;
	TaskHandle_t xHandle_LCD, xHandle_Rotary, xHandle_LED, xHandle_TCN75A, xHandle_Fan = NULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a46:	f001 fce6 	bl	8003416 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a4a:	f000 f8c9 	bl	8001be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a4e:	f7ff fe03 	bl	8001658 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001a52:	f7ff fa53 	bl	8000efc <MX_ADC1_Init>
  MX_ADC2_Init();
 8001a56:	f7ff fac9 	bl	8000fec <MX_ADC2_Init>
  MX_ADC3_Init();
 8001a5a:	f7ff fb2d 	bl	80010b8 <MX_ADC3_Init>
  MX_ADC4_Init();
 8001a5e:	f7ff fba3 	bl	80011a8 <MX_ADC4_Init>
  MX_CORDIC_Init();
 8001a62:	f7ff fd85 	bl	8001570 <MX_CORDIC_Init>
  MX_FMAC_Init();
 8001a66:	f7ff fdb7 	bl	80015d8 <MX_FMAC_Init>
  MX_I2C2_Init();
 8001a6a:	f7ff feef 	bl	800184c <MX_I2C2_Init>
  MX_TIM8_Init();
 8001a6e:	f000 fb93 	bl	8002198 <MX_TIM8_Init>
  MX_TIM15_Init();
 8001a72:	f000 fc29 	bl	80022c8 <MX_TIM15_Init>
  MX_TIM17_Init();
 8001a76:	f000 fd21 	bl	80024bc <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8001a7a:	f000 ff03 	bl	8002884 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001a7e:	f000 ff4d 	bl	800291c <MX_USART3_UART_Init>
  MX_TIM16_Init();
 8001a82:	f000 fca1 	bl	80023c8 <MX_TIM16_Init>
  MX_TIM1_Init();
 8001a86:	f000 fac1 	bl	800200c <MX_TIM1_Init>
  MX_USB_Device_Init();
 8001a8a:	f00f fd17 	bl	80114bc <MX_USB_Device_Init>
  MX_TIM3_Init();
 8001a8e:	f000 fb2b 	bl	80020e8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  I2C_Scan(&hi2c2);
 8001a92:	483b      	ldr	r0, [pc, #236]	; (8001b80 <main+0x144>)
 8001a94:	f7ff ff72 	bl	800197c <I2C_Scan>
	printf("*****************************************\r\n"
 8001a98:	483a      	ldr	r0, [pc, #232]	; (8001b84 <main+0x148>)
 8001a9a:	f011 f8b3 	bl	8012c04 <puts>
		   "* ENSEA INVERTER PROJECT                *\r\n"
		   "* Firmware revision 1.0                 *\r\n"
		   "* By Nicolas Papazoglou & Alexis Martin *\r\n"
		   "*****************************************\r\n");
	//I2C_Scan(&hi2c2);
	xUartMutex = xSemaphoreCreateMutex();
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f00d fd6d 	bl	800f57e <xQueueCreateMutex>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4a38      	ldr	r2, [pc, #224]	; (8001b88 <main+0x14c>)
 8001aa8:	6013      	str	r3, [r2, #0]
	xI2CMutex = xSemaphoreCreateMutex();
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f00d fd67 	bl	800f57e <xQueueCreateMutex>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4a36      	ldr	r2, [pc, #216]	; (8001b8c <main+0x150>)
 8001ab4:	6013      	str	r3, [r2, #0]
	xTemperatureQueue = xQueueCreate(1, sizeof(float));
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2104      	movs	r1, #4
 8001aba:	2001      	movs	r0, #1
 8001abc:	f00d fcf0 	bl	800f4a0 <xQueueGenericCreate>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4a33      	ldr	r2, [pc, #204]	; (8001b90 <main+0x154>)
 8001ac4:	6013      	str	r3, [r2, #0]

	if(pdPASS==xTaskCreate(vTask_LCD, "LCD_Task", STACK_SIZE, (void *) &hi2c2, LCD_Task_Priority, &xHandle_LCD)){
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	2304      	movs	r3, #4
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	4b2b      	ldr	r3, [pc, #172]	; (8001b80 <main+0x144>)
 8001ad2:	2280      	movs	r2, #128	; 0x80
 8001ad4:	492f      	ldr	r1, [pc, #188]	; (8001b94 <main+0x158>)
 8001ad6:	4830      	ldr	r0, [pc, #192]	; (8001b98 <main+0x15c>)
 8001ad8:	f00e f97c 	bl	800fdd4 <xTaskCreate>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d103      	bne.n	8001aea <main+0xae>
		printf("LCD_Task successfully created\r\n");
 8001ae2:	482e      	ldr	r0, [pc, #184]	; (8001b9c <main+0x160>)
 8001ae4:	f011 f88e 	bl	8012c04 <puts>
 8001ae8:	e002      	b.n	8001af0 <main+0xb4>
	}
	else{
		printf("LCD_Task creation error\r\n");
 8001aea:	482d      	ldr	r0, [pc, #180]	; (8001ba0 <main+0x164>)
 8001aec:	f011 f88a 	bl	8012c04 <puts>
	}

	if(pdPASS==xTaskCreate(vTask_RotaryEnc, "RotEncorder_Task", STACK_SIZE, (void *) &htim3, RotaryEnc_Task_Priority, &xHandle_Rotary)){
 8001af0:	f107 0308 	add.w	r3, r7, #8
 8001af4:	9301      	str	r3, [sp, #4]
 8001af6:	2302      	movs	r3, #2
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <main+0x168>)
 8001afc:	2280      	movs	r2, #128	; 0x80
 8001afe:	492a      	ldr	r1, [pc, #168]	; (8001ba8 <main+0x16c>)
 8001b00:	482a      	ldr	r0, [pc, #168]	; (8001bac <main+0x170>)
 8001b02:	f00e f967 	bl	800fdd4 <xTaskCreate>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d103      	bne.n	8001b14 <main+0xd8>
		printf("RotEncorder_Task successfully created\r\n");
 8001b0c:	4828      	ldr	r0, [pc, #160]	; (8001bb0 <main+0x174>)
 8001b0e:	f011 f879 	bl	8012c04 <puts>
 8001b12:	e002      	b.n	8001b1a <main+0xde>
	}
	else{
		printf("RotEncorder_Task creation error\r\n");
 8001b14:	4827      	ldr	r0, [pc, #156]	; (8001bb4 <main+0x178>)
 8001b16:	f011 f875 	bl	8012c04 <puts>
//	}
//	else{
//		printf("LED_Task creation error\r\n");
//	}

	if(pdPASS==xTaskCreate(vTask_TCN75A, "TCN75A_Task", STACK_SIZE, (void *) &hi2c2, TCN75A_Task_Priority, &xHandle_TCN75A)){
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	9301      	str	r3, [sp, #4]
 8001b1e:	2303      	movs	r3, #3
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <main+0x144>)
 8001b24:	2280      	movs	r2, #128	; 0x80
 8001b26:	4924      	ldr	r1, [pc, #144]	; (8001bb8 <main+0x17c>)
 8001b28:	4824      	ldr	r0, [pc, #144]	; (8001bbc <main+0x180>)
 8001b2a:	f00e f953 	bl	800fdd4 <xTaskCreate>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d103      	bne.n	8001b3c <main+0x100>
		printf("TCN75A_Task successfully created\r\n");
 8001b34:	4822      	ldr	r0, [pc, #136]	; (8001bc0 <main+0x184>)
 8001b36:	f011 f865 	bl	8012c04 <puts>
 8001b3a:	e002      	b.n	8001b42 <main+0x106>
	}
	else{
		printf("TCN75A_Task creation error\r\n");
 8001b3c:	4821      	ldr	r0, [pc, #132]	; (8001bc4 <main+0x188>)
 8001b3e:	f011 f861 	bl	8012c04 <puts>
	}

	if(pdPASS==xTaskCreate(vTask_Fan, "Fan_Task", STACK_SIZE, (void *) &htim16, Fan_Task_Priority, &xHandle_Fan)){
 8001b42:	463b      	mov	r3, r7
 8001b44:	9301      	str	r3, [sp, #4]
 8001b46:	2300      	movs	r3, #0
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	4b1f      	ldr	r3, [pc, #124]	; (8001bc8 <main+0x18c>)
 8001b4c:	2280      	movs	r2, #128	; 0x80
 8001b4e:	491f      	ldr	r1, [pc, #124]	; (8001bcc <main+0x190>)
 8001b50:	481f      	ldr	r0, [pc, #124]	; (8001bd0 <main+0x194>)
 8001b52:	f00e f93f 	bl	800fdd4 <xTaskCreate>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d103      	bne.n	8001b64 <main+0x128>
		printf("Fan_Task successfully created\r\n");
 8001b5c:	481d      	ldr	r0, [pc, #116]	; (8001bd4 <main+0x198>)
 8001b5e:	f011 f851 	bl	8012c04 <puts>
 8001b62:	e002      	b.n	8001b6a <main+0x12e>
	}
	else{
		printf("Fan_Task creation error\r\n");
 8001b64:	481c      	ldr	r0, [pc, #112]	; (8001bd8 <main+0x19c>)
 8001b66:	f011 f84d 	bl	8012c04 <puts>
	}
	printf("Starting Scheduler... \r\n");
 8001b6a:	481c      	ldr	r0, [pc, #112]	; (8001bdc <main+0x1a0>)
 8001b6c:	f011 f84a 	bl	8012c04 <puts>


//	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
//	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 8500);

	vTaskStartScheduler();
 8001b70:	f00e faae 	bl	80100d0 <vTaskStartScheduler>
	//  HAL_GPIO_WritePin(PWR_ENABLE_GPIO_Port, PWR_ENABLE_Pin, SET);

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001b74:	f7ff fcda 	bl	800152c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001b78:	f00d fb33 	bl	800f1e2 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
 8001b7c:	e7fe      	b.n	8001b7c <main+0x140>
 8001b7e:	bf00      	nop
 8001b80:	20000590 	.word	0x20000590
 8001b84:	08014f84 	.word	0x08014f84
 8001b88:	200005dc 	.word	0x200005dc
 8001b8c:	200005e0 	.word	0x200005e0
 8001b90:	200005e4 	.word	0x200005e4
 8001b94:	0801505c 	.word	0x0801505c
 8001b98:	08002ead 	.word	0x08002ead
 8001b9c:	08015068 	.word	0x08015068
 8001ba0:	08015088 	.word	0x08015088
 8001ba4:	20000684 	.word	0x20000684
 8001ba8:	080150a4 	.word	0x080150a4
 8001bac:	08003321 	.word	0x08003321
 8001bb0:	080150b8 	.word	0x080150b8
 8001bb4:	080150e0 	.word	0x080150e0
 8001bb8:	08015104 	.word	0x08015104
 8001bbc:	08002ae9 	.word	0x08002ae9
 8001bc0:	08015110 	.word	0x08015110
 8001bc4:	08015134 	.word	0x08015134
 8001bc8:	20000768 	.word	0x20000768
 8001bcc:	08015150 	.word	0x08015150
 8001bd0:	08002cbd 	.word	0x08002cbd
 8001bd4:	0801515c 	.word	0x0801515c
 8001bd8:	0801517c 	.word	0x0801517c
 8001bdc:	08015198 	.word	0x08015198

08001be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b094      	sub	sp, #80	; 0x50
 8001be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001be6:	f107 0318 	add.w	r3, r7, #24
 8001bea:	2238      	movs	r2, #56	; 0x38
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f010 fa7b 	bl	80120ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001c02:	2000      	movs	r0, #0
 8001c04:	f005 fcb6 	bl	8007574 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001c08:	2321      	movs	r3, #33	; 0x21
 8001c0a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c10:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001c12:	2301      	movs	r3, #1
 8001c14:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c16:	2302      	movs	r3, #2
 8001c18:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001c1e:	2304      	movs	r3, #4
 8001c20:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001c22:	2355      	movs	r3, #85	; 0x55
 8001c24:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c26:	2302      	movs	r3, #2
 8001c28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c32:	f107 0318 	add.w	r3, r7, #24
 8001c36:	4618      	mov	r0, r3
 8001c38:	f005 fd40 	bl	80076bc <HAL_RCC_OscConfig>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001c42:	f000 f83d 	bl	8001cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c46:	230f      	movs	r3, #15
 8001c48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	2104      	movs	r1, #4
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f006 f844 	bl	8007cec <HAL_RCC_ClockConfig>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001c6a:	f000 f829 	bl	8001cc0 <Error_Handler>
  }
}
 8001c6e:	bf00      	nop
 8001c70:	3750      	adds	r7, #80	; 0x50
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001c80:	1d39      	adds	r1, r7, #4
 8001c82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c86:	2201      	movs	r2, #1
 8001c88:	4803      	ldr	r0, [pc, #12]	; (8001c98 <__io_putchar+0x20>)
 8001c8a:	f008 fd61 	bl	800a750 <HAL_UART_Transmit>

	return ch;
 8001c8e:	687b      	ldr	r3, [r7, #4]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000890 	.word	0x20000890

08001c9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d101      	bne.n	8001cb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cae:	f001 fbcb 	bl	8003448 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40001000 	.word	0x40001000

08001cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc4:	b672      	cpsid	i
}
 8001cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <Error_Handler+0x8>
	...

08001ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd6:	4a10      	ldr	r2, [pc, #64]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6613      	str	r3, [r2, #96]	; 0x60
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <HAL_MspInit+0x4c>)
 8001ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cee:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	6593      	str	r3, [r2, #88]	; 0x58
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	210f      	movs	r1, #15
 8001d06:	f06f 0001 	mvn.w	r0, #1
 8001d0a:	f002 fdd1 	bl	80048b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000

08001d1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08c      	sub	sp, #48	; 0x30
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d2c:	4b2c      	ldr	r3, [pc, #176]	; (8001de0 <HAL_InitTick+0xc4>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a2b      	ldr	r2, [pc, #172]	; (8001de0 <HAL_InitTick+0xc4>)
 8001d32:	f043 0310 	orr.w	r3, r3, #16
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
 8001d38:	4b29      	ldr	r3, [pc, #164]	; (8001de0 <HAL_InitTick+0xc4>)
 8001d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d44:	f107 020c 	add.w	r2, r7, #12
 8001d48:	f107 0310 	add.w	r3, r7, #16
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f006 f9a0 	bl	8008094 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d54:	f006 f972 	bl	800803c <HAL_RCC_GetPCLK1Freq>
 8001d58:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5c:	4a21      	ldr	r2, [pc, #132]	; (8001de4 <HAL_InitTick+0xc8>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	0c9b      	lsrs	r3, r3, #18
 8001d64:	3b01      	subs	r3, #1
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d68:	4b1f      	ldr	r3, [pc, #124]	; (8001de8 <HAL_InitTick+0xcc>)
 8001d6a:	4a20      	ldr	r2, [pc, #128]	; (8001dec <HAL_InitTick+0xd0>)
 8001d6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <HAL_InitTick+0xcc>)
 8001d70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d74:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d76:	4a1c      	ldr	r2, [pc, #112]	; (8001de8 <HAL_InitTick+0xcc>)
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <HAL_InitTick+0xcc>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d82:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <HAL_InitTick+0xcc>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001d88:	4817      	ldr	r0, [pc, #92]	; (8001de8 <HAL_InitTick+0xcc>)
 8001d8a:	f006 fc47 	bl	800861c <HAL_TIM_Base_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001d94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d11b      	bne.n	8001dd4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001d9c:	4812      	ldr	r0, [pc, #72]	; (8001de8 <HAL_InitTick+0xcc>)
 8001d9e:	f006 fc95 	bl	80086cc <HAL_TIM_Base_Start_IT>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001da8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d111      	bne.n	8001dd4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001db0:	2036      	movs	r0, #54	; 0x36
 8001db2:	f002 fd97 	bl	80048e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b0f      	cmp	r3, #15
 8001dba:	d808      	bhi.n	8001dce <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	2036      	movs	r0, #54	; 0x36
 8001dc2:	f002 fd75 	bl	80048b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <HAL_InitTick+0xd4>)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	e002      	b.n	8001dd4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001dd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3730      	adds	r7, #48	; 0x30
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000
 8001de4:	431bde83 	.word	0x431bde83
 8001de8:	200005e8 	.word	0x200005e8
 8001dec:	40001000 	.word	0x40001000
 8001df0:	20000004 	.word	0x20000004

08001df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <NMI_Handler+0x4>

08001dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dfe:	e7fe      	b.n	8001dfe <HardFault_Handler+0x4>

08001e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <MemManage_Handler+0x4>

08001e06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e0a:	e7fe      	b.n	8001e0a <BusFault_Handler+0x4>

08001e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <UsageFault_Handler+0x4>

08001e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <USB_LP_IRQHandler+0x10>)
 8001e26:	f003 ff79 	bl	8005d1c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20002f88 	.word	0x20002f88

08001e34 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_Pin);
 8001e38:	2020      	movs	r0, #32
 8001e3a:	f002 ffc1 	bl	8004dc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_B_Pin);
 8001e3e:	2080      	movs	r0, #128	; 0x80
 8001e40:	f002 ffbe 	bl	8004dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <TIM6_DAC_IRQHandler+0x10>)
 8001e4e:	f006 ffbe 	bl	8008dce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200005e8 	.word	0x200005e8

08001e5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
	return 1;
 8001e60:	2301      	movs	r3, #1
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <_kill>:

int _kill(int pid, int sig)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e76:	f010 f807 	bl	8011e88 <__errno>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2216      	movs	r2, #22
 8001e7e:	601a      	str	r2, [r3, #0]
	return -1;
 8001e80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_exit>:

void _exit (int status)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ffe7 	bl	8001e6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e9e:	e7fe      	b.n	8001e9e <_exit+0x12>

08001ea0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	e00a      	b.n	8001ec8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eb2:	f3af 8000 	nop.w
 8001eb6:	4601      	mov	r1, r0
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	60ba      	str	r2, [r7, #8]
 8001ebe:	b2ca      	uxtb	r2, r1
 8001ec0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	dbf0      	blt.n	8001eb2 <_read+0x12>
	}

return len;
 8001ed0:	687b      	ldr	r3, [r7, #4]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b086      	sub	sp, #24
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	e009      	b.n	8001f00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	60ba      	str	r2, [r7, #8]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff febf 	bl	8001c78 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	3301      	adds	r3, #1
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	dbf1      	blt.n	8001eec <_write+0x12>
	}
	return len;
 8001f08:	687b      	ldr	r3, [r7, #4]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <_close>:

int _close(int file)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
	return -1;
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f3a:	605a      	str	r2, [r3, #4]
	return 0;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <_isatty>:

int _isatty(int file)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
	return 1;
 8001f52:	2301      	movs	r3, #1
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f84:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <_sbrk+0x5c>)
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <_sbrk+0x60>)
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <_sbrk+0x64>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <_sbrk+0x64>)
 8001f9a:	4a12      	ldr	r2, [pc, #72]	; (8001fe4 <_sbrk+0x68>)
 8001f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d207      	bcs.n	8001fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fac:	f00f ff6c 	bl	8011e88 <__errno>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fba:	e009      	b.n	8001fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <_sbrk+0x64>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	4a05      	ldr	r2, [pc, #20]	; (8001fe0 <_sbrk+0x64>)
 8001fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fce:	68fb      	ldr	r3, [r7, #12]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20020000 	.word	0x20020000
 8001fdc:	00000400 	.word	0x00000400
 8001fe0:	20000634 	.word	0x20000634
 8001fe4:	200034b0 	.word	0x200034b0

08001fe8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <SystemInit+0x20>)
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff2:	4a05      	ldr	r2, [pc, #20]	; (8002008 <SystemInit+0x20>)
 8001ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08c      	sub	sp, #48	; 0x30
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002012:	f107 0320 	add.w	r3, r7, #32
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8002020:	f107 0310 	add.w	r3, r7, #16
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002038:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <MX_TIM1_Init+0xd4>)
 800203a:	4a2a      	ldr	r2, [pc, #168]	; (80020e4 <MX_TIM1_Init+0xd8>)
 800203c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800203e:	4b28      	ldr	r3, [pc, #160]	; (80020e0 <MX_TIM1_Init+0xd4>)
 8002040:	2200      	movs	r2, #0
 8002042:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002044:	4b26      	ldr	r3, [pc, #152]	; (80020e0 <MX_TIM1_Init+0xd4>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800204a:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <MX_TIM1_Init+0xd4>)
 800204c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002050:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002052:	4b23      	ldr	r3, [pc, #140]	; (80020e0 <MX_TIM1_Init+0xd4>)
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002058:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <MX_TIM1_Init+0xd4>)
 800205a:	2200      	movs	r2, #0
 800205c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205e:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <MX_TIM1_Init+0xd4>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002064:	481e      	ldr	r0, [pc, #120]	; (80020e0 <MX_TIM1_Init+0xd4>)
 8002066:	f006 fad9 	bl	800861c <HAL_TIM_Base_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8002070:	f7ff fe26 	bl	8001cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002078:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800207a:	f107 0320 	add.w	r3, r7, #32
 800207e:	4619      	mov	r1, r3
 8002080:	4817      	ldr	r0, [pc, #92]	; (80020e0 <MX_TIM1_Init+0xd4>)
 8002082:	f007 f9d3 	bl	800942c <HAL_TIM_ConfigClockSource>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800208c:	f7ff fe18 	bl	8001cc0 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim1, &sConfig) != HAL_OK)
 80020a0:	f107 0310 	add.w	r3, r7, #16
 80020a4:	4619      	mov	r1, r3
 80020a6:	480e      	ldr	r0, [pc, #56]	; (80020e0 <MX_TIM1_Init+0xd4>)
 80020a8:	f008 f8bb 	bl	800a222 <HAL_TIMEx_HallSensor_Init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80020b2:	f7ff fe05 	bl	8001cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80020b6:	2350      	movs	r3, #80	; 0x50
 80020b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	4619      	mov	r1, r3
 80020c6:	4806      	ldr	r0, [pc, #24]	; (80020e0 <MX_TIM1_Init+0xd4>)
 80020c8:	f008 f964 	bl	800a394 <HAL_TIMEx_MasterConfigSynchronization>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80020d2:	f7ff fdf5 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020d6:	bf00      	nop
 80020d8:	3730      	adds	r7, #48	; 0x30
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000638 	.word	0x20000638
 80020e4:	40012c00 	.word	0x40012c00

080020e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08c      	sub	sp, #48	; 0x30
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020ee:	f107 030c 	add.w	r3, r7, #12
 80020f2:	2224      	movs	r2, #36	; 0x24
 80020f4:	2100      	movs	r1, #0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f00f fff7 	bl	80120ea <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020fc:	463b      	mov	r3, r7
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002106:	4b21      	ldr	r3, [pc, #132]	; (800218c <MX_TIM3_Init+0xa4>)
 8002108:	4a21      	ldr	r2, [pc, #132]	; (8002190 <MX_TIM3_Init+0xa8>)
 800210a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800210c:	4b1f      	ldr	r3, [pc, #124]	; (800218c <MX_TIM3_Init+0xa4>)
 800210e:	2200      	movs	r2, #0
 8002110:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002112:	4b1e      	ldr	r3, [pc, #120]	; (800218c <MX_TIM3_Init+0xa4>)
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002118:	4b1c      	ldr	r3, [pc, #112]	; (800218c <MX_TIM3_Init+0xa4>)
 800211a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800211e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002120:	4b1a      	ldr	r3, [pc, #104]	; (800218c <MX_TIM3_Init+0xa4>)
 8002122:	2200      	movs	r2, #0
 8002124:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002126:	4b19      	ldr	r3, [pc, #100]	; (800218c <MX_TIM3_Init+0xa4>)
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_X1_TI1;
 800212c:	4b19      	ldr	r3, [pc, #100]	; (8002194 <MX_TIM3_Init+0xac>)
 800212e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002130:	2300      	movs	r3, #0
 8002132:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002134:	2301      	movs	r3, #1
 8002136:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002138:	2300      	movs	r3, #0
 800213a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002140:	2300      	movs	r3, #0
 8002142:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002144:	2301      	movs	r3, #1
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002148:	2300      	movs	r3, #0
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	4619      	mov	r1, r3
 8002156:	480d      	ldr	r0, [pc, #52]	; (800218c <MX_TIM3_Init+0xa4>)
 8002158:	f006 fd05 	bl	8008b66 <HAL_TIM_Encoder_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002162:	f7ff fdad 	bl	8001cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800216e:	463b      	mov	r3, r7
 8002170:	4619      	mov	r1, r3
 8002172:	4806      	ldr	r0, [pc, #24]	; (800218c <MX_TIM3_Init+0xa4>)
 8002174:	f008 f90e 	bl	800a394 <HAL_TIMEx_MasterConfigSynchronization>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800217e:	f7ff fd9f 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002182:	bf00      	nop
 8002184:	3730      	adds	r7, #48	; 0x30
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000684 	.word	0x20000684
 8002190:	40000400 	.word	0x40000400
 8002194:	00010006 	.word	0x00010006

08002198 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08c      	sub	sp, #48	; 0x30
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800219e:	f107 0320 	add.w	r3, r7, #32
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80021c4:	4b3e      	ldr	r3, [pc, #248]	; (80022c0 <MX_TIM8_Init+0x128>)
 80021c6:	4a3f      	ldr	r2, [pc, #252]	; (80022c4 <MX_TIM8_Init+0x12c>)
 80021c8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80021ca:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <MX_TIM8_Init+0x128>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d0:	4b3b      	ldr	r3, [pc, #236]	; (80022c0 <MX_TIM8_Init+0x128>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80021d6:	4b3a      	ldr	r3, [pc, #232]	; (80022c0 <MX_TIM8_Init+0x128>)
 80021d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021dc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021de:	4b38      	ldr	r3, [pc, #224]	; (80022c0 <MX_TIM8_Init+0x128>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80021e4:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <MX_TIM8_Init+0x128>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ea:	4b35      	ldr	r3, [pc, #212]	; (80022c0 <MX_TIM8_Init+0x128>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80021f0:	4833      	ldr	r0, [pc, #204]	; (80022c0 <MX_TIM8_Init+0x128>)
 80021f2:	f006 fa13 	bl	800861c <HAL_TIM_Base_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 80021fc:	f7ff fd60 	bl	8001cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002204:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002206:	f107 0320 	add.w	r3, r7, #32
 800220a:	4619      	mov	r1, r3
 800220c:	482c      	ldr	r0, [pc, #176]	; (80022c0 <MX_TIM8_Init+0x128>)
 800220e:	f007 f90d 	bl	800942c <HAL_TIM_ConfigClockSource>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002218:	f7ff fd52 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800221c:	4828      	ldr	r0, [pc, #160]	; (80022c0 <MX_TIM8_Init+0x128>)
 800221e:	f006 fc41 	bl	8008aa4 <HAL_TIM_IC_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8002228:	f7ff fd4a 	bl	8001cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002230:	2300      	movs	r3, #0
 8002232:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	4619      	mov	r1, r3
 800223e:	4820      	ldr	r0, [pc, #128]	; (80022c0 <MX_TIM8_Init+0x128>)
 8002240:	f008 f8a8 	bl	800a394 <HAL_TIMEx_MasterConfigSynchronization>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 800224a:	f7ff fd39 	bl	8001cc0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800224e:	2300      	movs	r3, #0
 8002250:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002252:	2301      	movs	r3, #1
 8002254:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	2200      	movs	r2, #0
 8002262:	4619      	mov	r1, r3
 8002264:	4816      	ldr	r0, [pc, #88]	; (80022c0 <MX_TIM8_Init+0x128>)
 8002266:	f006 ff31 	bl	80090cc <HAL_TIM_IC_ConfigChannel>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8002270:	f7ff fd26 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	2204      	movs	r2, #4
 8002278:	4619      	mov	r1, r3
 800227a:	4811      	ldr	r0, [pc, #68]	; (80022c0 <MX_TIM8_Init+0x128>)
 800227c:	f006 ff26 	bl	80090cc <HAL_TIM_IC_ConfigChannel>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 8002286:	f7ff fd1b 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800228a:	1d3b      	adds	r3, r7, #4
 800228c:	2208      	movs	r2, #8
 800228e:	4619      	mov	r1, r3
 8002290:	480b      	ldr	r0, [pc, #44]	; (80022c0 <MX_TIM8_Init+0x128>)
 8002292:	f006 ff1b 	bl	80090cc <HAL_TIM_IC_ConfigChannel>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 800229c:	f7ff fd10 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	220c      	movs	r2, #12
 80022a4:	4619      	mov	r1, r3
 80022a6:	4806      	ldr	r0, [pc, #24]	; (80022c0 <MX_TIM8_Init+0x128>)
 80022a8:	f006 ff10 	bl	80090cc <HAL_TIM_IC_ConfigChannel>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 80022b2:	f7ff fd05 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80022b6:	bf00      	nop
 80022b8:	3730      	adds	r7, #48	; 0x30
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	200006d0 	.word	0x200006d0
 80022c4:	40013400 	.word	0x40013400

080022c8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08c      	sub	sp, #48	; 0x30
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ce:	f107 0320 	add.w	r3, r7, #32
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]
 80022f0:	609a      	str	r2, [r3, #8]
 80022f2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80022f4:	4b32      	ldr	r3, [pc, #200]	; (80023c0 <MX_TIM15_Init+0xf8>)
 80022f6:	4a33      	ldr	r2, [pc, #204]	; (80023c4 <MX_TIM15_Init+0xfc>)
 80022f8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80022fa:	4b31      	ldr	r3, [pc, #196]	; (80023c0 <MX_TIM15_Init+0xf8>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002300:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <MX_TIM15_Init+0xf8>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002306:	4b2e      	ldr	r3, [pc, #184]	; (80023c0 <MX_TIM15_Init+0xf8>)
 8002308:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800230c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800230e:	4b2c      	ldr	r3, [pc, #176]	; (80023c0 <MX_TIM15_Init+0xf8>)
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002314:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <MX_TIM15_Init+0xf8>)
 8002316:	2200      	movs	r2, #0
 8002318:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800231a:	4b29      	ldr	r3, [pc, #164]	; (80023c0 <MX_TIM15_Init+0xf8>)
 800231c:	2200      	movs	r2, #0
 800231e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002320:	4827      	ldr	r0, [pc, #156]	; (80023c0 <MX_TIM15_Init+0xf8>)
 8002322:	f006 f97b 	bl	800861c <HAL_TIM_Base_Init>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM15_Init+0x68>
  {
    Error_Handler();
 800232c:	f7ff fcc8 	bl	8001cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002334:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002336:	f107 0320 	add.w	r3, r7, #32
 800233a:	4619      	mov	r1, r3
 800233c:	4820      	ldr	r0, [pc, #128]	; (80023c0 <MX_TIM15_Init+0xf8>)
 800233e:	f007 f875 	bl	800942c <HAL_TIM_ConfigClockSource>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_TIM15_Init+0x84>
  {
    Error_Handler();
 8002348:	f7ff fcba 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 800234c:	481c      	ldr	r0, [pc, #112]	; (80023c0 <MX_TIM15_Init+0xf8>)
 800234e:	f006 fba9 	bl	8008aa4 <HAL_TIM_IC_Init>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8002358:	f7ff fcb2 	bl	8001cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002360:	2300      	movs	r3, #0
 8002362:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	4619      	mov	r1, r3
 800236a:	4815      	ldr	r0, [pc, #84]	; (80023c0 <MX_TIM15_Init+0xf8>)
 800236c:	f008 f812 	bl	800a394 <HAL_TIMEx_MasterConfigSynchronization>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM15_Init+0xb2>
  {
    Error_Handler();
 8002376:	f7ff fca3 	bl	8001cc0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800237a:	2300      	movs	r3, #0
 800237c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800237e:	2301      	movs	r3, #1
 8002380:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	2200      	movs	r2, #0
 800238e:	4619      	mov	r1, r3
 8002390:	480b      	ldr	r0, [pc, #44]	; (80023c0 <MX_TIM15_Init+0xf8>)
 8002392:	f006 fe9b 	bl	80090cc <HAL_TIM_IC_ConfigChannel>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 800239c:	f7ff fc90 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	2204      	movs	r2, #4
 80023a4:	4619      	mov	r1, r3
 80023a6:	4806      	ldr	r0, [pc, #24]	; (80023c0 <MX_TIM15_Init+0xf8>)
 80023a8:	f006 fe90 	bl	80090cc <HAL_TIM_IC_ConfigChannel>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_TIM15_Init+0xee>
  {
    Error_Handler();
 80023b2:	f7ff fc85 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80023b6:	bf00      	nop
 80023b8:	3730      	adds	r7, #48	; 0x30
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	2000071c 	.word	0x2000071c
 80023c4:	40014000 	.word	0x40014000

080023c8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b094      	sub	sp, #80	; 0x50
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	605a      	str	r2, [r3, #4]
 80023d8:	609a      	str	r2, [r3, #8]
 80023da:	60da      	str	r2, [r3, #12]
 80023dc:	611a      	str	r2, [r3, #16]
 80023de:	615a      	str	r2, [r3, #20]
 80023e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023e2:	463b      	mov	r3, r7
 80023e4:	2234      	movs	r2, #52	; 0x34
 80023e6:	2100      	movs	r1, #0
 80023e8:	4618      	mov	r0, r3
 80023ea:	f00f fe7e 	bl	80120ea <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80023ee:	4b31      	ldr	r3, [pc, #196]	; (80024b4 <MX_TIM16_Init+0xec>)
 80023f0:	4a31      	ldr	r2, [pc, #196]	; (80024b8 <MX_TIM16_Init+0xf0>)
 80023f2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80023f4:	4b2f      	ldr	r3, [pc, #188]	; (80024b4 <MX_TIM16_Init+0xec>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023fa:	4b2e      	ldr	r3, [pc, #184]	; (80024b4 <MX_TIM16_Init+0xec>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8500;
 8002400:	4b2c      	ldr	r3, [pc, #176]	; (80024b4 <MX_TIM16_Init+0xec>)
 8002402:	f242 1234 	movw	r2, #8500	; 0x2134
 8002406:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002408:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <MX_TIM16_Init+0xec>)
 800240a:	2200      	movs	r2, #0
 800240c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800240e:	4b29      	ldr	r3, [pc, #164]	; (80024b4 <MX_TIM16_Init+0xec>)
 8002410:	2200      	movs	r2, #0
 8002412:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002414:	4b27      	ldr	r3, [pc, #156]	; (80024b4 <MX_TIM16_Init+0xec>)
 8002416:	2280      	movs	r2, #128	; 0x80
 8002418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800241a:	4826      	ldr	r0, [pc, #152]	; (80024b4 <MX_TIM16_Init+0xec>)
 800241c:	f006 f8fe 	bl	800861c <HAL_TIM_Base_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002426:	f7ff fc4b 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800242a:	4822      	ldr	r0, [pc, #136]	; (80024b4 <MX_TIM16_Init+0xec>)
 800242c:	f006 f9c6 	bl	80087bc <HAL_TIM_PWM_Init>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002436:	f7ff fc43 	bl	8001cc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800243a:	2360      	movs	r3, #96	; 0x60
 800243c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002442:	2300      	movs	r3, #0
 8002444:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002446:	2300      	movs	r3, #0
 8002448:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800244a:	2300      	movs	r3, #0
 800244c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002452:	2300      	movs	r3, #0
 8002454:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002456:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800245a:	2200      	movs	r2, #0
 800245c:	4619      	mov	r1, r3
 800245e:	4815      	ldr	r0, [pc, #84]	; (80024b4 <MX_TIM16_Init+0xec>)
 8002460:	f006 fed0 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800246a:	f7ff fc29 	bl	8001cc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800246e:	2300      	movs	r3, #0
 8002470:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002476:	2300      	movs	r3, #0
 8002478:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002486:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800248c:	2300      	movs	r3, #0
 800248e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002490:	463b      	mov	r3, r7
 8002492:	4619      	mov	r1, r3
 8002494:	4807      	ldr	r0, [pc, #28]	; (80024b4 <MX_TIM16_Init+0xec>)
 8002496:	f008 f813 	bl	800a4c0 <HAL_TIMEx_ConfigBreakDeadTime>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80024a0:	f7ff fc0e 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80024a4:	4803      	ldr	r0, [pc, #12]	; (80024b4 <MX_TIM16_Init+0xec>)
 80024a6:	f000 f991 	bl	80027cc <HAL_TIM_MspPostInit>

}
 80024aa:	bf00      	nop
 80024ac:	3750      	adds	r7, #80	; 0x50
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000768 	.word	0x20000768
 80024b8:	40014400 	.word	0x40014400

080024bc <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b094      	sub	sp, #80	; 0x50
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80024c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	605a      	str	r2, [r3, #4]
 80024cc:	609a      	str	r2, [r3, #8]
 80024ce:	60da      	str	r2, [r3, #12]
 80024d0:	611a      	str	r2, [r3, #16]
 80024d2:	615a      	str	r2, [r3, #20]
 80024d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024d6:	463b      	mov	r3, r7
 80024d8:	2234      	movs	r2, #52	; 0x34
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f00f fe04 	bl	80120ea <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80024e2:	4b30      	ldr	r3, [pc, #192]	; (80025a4 <MX_TIM17_Init+0xe8>)
 80024e4:	4a30      	ldr	r2, [pc, #192]	; (80025a8 <MX_TIM17_Init+0xec>)
 80024e6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 9-1;
 80024e8:	4b2e      	ldr	r3, [pc, #184]	; (80025a4 <MX_TIM17_Init+0xe8>)
 80024ea:	2208      	movs	r2, #8
 80024ec:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ee:	4b2d      	ldr	r3, [pc, #180]	; (80025a4 <MX_TIM17_Init+0xe8>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 255;
 80024f4:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <MX_TIM17_Init+0xe8>)
 80024f6:	22ff      	movs	r2, #255	; 0xff
 80024f8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024fa:	4b2a      	ldr	r3, [pc, #168]	; (80025a4 <MX_TIM17_Init+0xe8>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002500:	4b28      	ldr	r3, [pc, #160]	; (80025a4 <MX_TIM17_Init+0xe8>)
 8002502:	2200      	movs	r2, #0
 8002504:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002506:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <MX_TIM17_Init+0xe8>)
 8002508:	2200      	movs	r2, #0
 800250a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800250c:	4825      	ldr	r0, [pc, #148]	; (80025a4 <MX_TIM17_Init+0xe8>)
 800250e:	f006 f885 	bl	800861c <HAL_TIM_Base_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8002518:	f7ff fbd2 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800251c:	4821      	ldr	r0, [pc, #132]	; (80025a4 <MX_TIM17_Init+0xe8>)
 800251e:	f006 f94d 	bl	80087bc <HAL_TIM_PWM_Init>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8002528:	f7ff fbca 	bl	8001cc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800252c:	2360      	movs	r3, #96	; 0x60
 800252e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002534:	2300      	movs	r3, #0
 8002536:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002538:	2300      	movs	r3, #0
 800253a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800253c:	2300      	movs	r3, #0
 800253e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002540:	2300      	movs	r3, #0
 8002542:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002544:	2300      	movs	r3, #0
 8002546:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002548:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800254c:	2200      	movs	r2, #0
 800254e:	4619      	mov	r1, r3
 8002550:	4814      	ldr	r0, [pc, #80]	; (80025a4 <MX_TIM17_Init+0xe8>)
 8002552:	f006 fe57 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 800255c:	f7ff fbb0 	bl	8001cc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002560:	2300      	movs	r3, #0
 8002562:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002564:	2300      	movs	r3, #0
 8002566:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002568:	2300      	movs	r3, #0
 800256a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002570:	2300      	movs	r3, #0
 8002572:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002578:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800257e:	2300      	movs	r3, #0
 8002580:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002582:	463b      	mov	r3, r7
 8002584:	4619      	mov	r1, r3
 8002586:	4807      	ldr	r0, [pc, #28]	; (80025a4 <MX_TIM17_Init+0xe8>)
 8002588:	f007 ff9a 	bl	800a4c0 <HAL_TIMEx_ConfigBreakDeadTime>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8002592:	f7ff fb95 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002596:	4803      	ldr	r0, [pc, #12]	; (80025a4 <MX_TIM17_Init+0xe8>)
 8002598:	f000 f918 	bl	80027cc <HAL_TIM_MspPostInit>

}
 800259c:	bf00      	nop
 800259e:	3750      	adds	r7, #80	; 0x50
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	200007b4 	.word	0x200007b4
 80025a8:	40014800 	.word	0x40014800

080025ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b090      	sub	sp, #64	; 0x40
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a58      	ldr	r2, [pc, #352]	; (800272c <HAL_TIM_Base_MspInit+0x180>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d128      	bne.n	8002620 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025ce:	4b58      	ldr	r3, [pc, #352]	; (8002730 <HAL_TIM_Base_MspInit+0x184>)
 80025d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d2:	4a57      	ldr	r2, [pc, #348]	; (8002730 <HAL_TIM_Base_MspInit+0x184>)
 80025d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025d8:	6613      	str	r3, [r2, #96]	; 0x60
 80025da:	4b55      	ldr	r3, [pc, #340]	; (8002730 <HAL_TIM_Base_MspInit+0x184>)
 80025dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80025e4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e6:	4b52      	ldr	r3, [pc, #328]	; (8002730 <HAL_TIM_Base_MspInit+0x184>)
 80025e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ea:	4a51      	ldr	r2, [pc, #324]	; (8002730 <HAL_TIM_Base_MspInit+0x184>)
 80025ec:	f043 0304 	orr.w	r3, r3, #4
 80025f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025f2:	4b4f      	ldr	r3, [pc, #316]	; (8002730 <HAL_TIM_Base_MspInit+0x184>)
 80025f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80025fe:	2307      	movs	r3, #7
 8002600:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	2300      	movs	r3, #0
 800260c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800260e:	2302      	movs	r3, #2
 8002610:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002612:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002616:	4619      	mov	r1, r3
 8002618:	4846      	ldr	r0, [pc, #280]	; (8002734 <HAL_TIM_Base_MspInit+0x188>)
 800261a:	f002 fa1d 	bl	8004a58 <HAL_GPIO_Init>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800261e:	e080      	b.n	8002722 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM8)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a44      	ldr	r2, [pc, #272]	; (8002738 <HAL_TIM_Base_MspInit+0x18c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d129      	bne.n	800267e <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800262a:	4b41      	ldr	r3, [pc, #260]	; (8002730 <HAL_TIM_Base_MspInit+0x184>)
 800262c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262e:	4a40      	ldr	r2, [pc, #256]	; (8002730 <HAL_TIM_Base_MspInit+0x184>)
 8002630:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002634:	6613      	str	r3, [r2, #96]	; 0x60
 8002636:	4b3e      	ldr	r3, [pc, #248]	; (8002730 <HAL_TIM_Base_MspInit+0x184>)
 8002638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800263a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800263e:	623b      	str	r3, [r7, #32]
 8002640:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002642:	4b3b      	ldr	r3, [pc, #236]	; (8002730 <HAL_TIM_Base_MspInit+0x184>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002646:	4a3a      	ldr	r2, [pc, #232]	; (8002730 <HAL_TIM_Base_MspInit+0x184>)
 8002648:	f043 0304 	orr.w	r3, r3, #4
 800264c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800264e:	4b38      	ldr	r3, [pc, #224]	; (8002730 <HAL_TIM_Base_MspInit+0x184>)
 8002650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	61fb      	str	r3, [r7, #28]
 8002658:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800265a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002660:	2302      	movs	r3, #2
 8002662:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002668:	2300      	movs	r3, #0
 800266a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800266c:	2304      	movs	r3, #4
 800266e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002670:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002674:	4619      	mov	r1, r3
 8002676:	482f      	ldr	r0, [pc, #188]	; (8002734 <HAL_TIM_Base_MspInit+0x188>)
 8002678:	f002 f9ee 	bl	8004a58 <HAL_GPIO_Init>
}
 800267c:	e051      	b.n	8002722 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM15)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a2e      	ldr	r2, [pc, #184]	; (800273c <HAL_TIM_Base_MspInit+0x190>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d129      	bne.n	80026dc <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002688:	4b29      	ldr	r3, [pc, #164]	; (8002730 <HAL_TIM_Base_MspInit+0x184>)
 800268a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800268c:	4a28      	ldr	r2, [pc, #160]	; (8002730 <HAL_TIM_Base_MspInit+0x184>)
 800268e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002692:	6613      	str	r3, [r2, #96]	; 0x60
 8002694:	4b26      	ldr	r3, [pc, #152]	; (8002730 <HAL_TIM_Base_MspInit+0x184>)
 8002696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a0:	4b23      	ldr	r3, [pc, #140]	; (8002730 <HAL_TIM_Base_MspInit+0x184>)
 80026a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a4:	4a22      	ldr	r2, [pc, #136]	; (8002730 <HAL_TIM_Base_MspInit+0x184>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ac:	4b20      	ldr	r3, [pc, #128]	; (8002730 <HAL_TIM_Base_MspInit+0x184>)
 80026ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026b8:	230c      	movs	r3, #12
 80026ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026bc:	2302      	movs	r3, #2
 80026be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c4:	2300      	movs	r3, #0
 80026c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80026c8:	2309      	movs	r3, #9
 80026ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026d0:	4619      	mov	r1, r3
 80026d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026d6:	f002 f9bf 	bl	8004a58 <HAL_GPIO_Init>
}
 80026da:	e022      	b.n	8002722 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM16)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a17      	ldr	r2, [pc, #92]	; (8002740 <HAL_TIM_Base_MspInit+0x194>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d10c      	bne.n	8002700 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80026e6:	4b12      	ldr	r3, [pc, #72]	; (8002730 <HAL_TIM_Base_MspInit+0x184>)
 80026e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ea:	4a11      	ldr	r2, [pc, #68]	; (8002730 <HAL_TIM_Base_MspInit+0x184>)
 80026ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f0:	6613      	str	r3, [r2, #96]	; 0x60
 80026f2:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <HAL_TIM_Base_MspInit+0x184>)
 80026f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	693b      	ldr	r3, [r7, #16]
}
 80026fe:	e010      	b.n	8002722 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM17)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0f      	ldr	r2, [pc, #60]	; (8002744 <HAL_TIM_Base_MspInit+0x198>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d10b      	bne.n	8002722 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <HAL_TIM_Base_MspInit+0x184>)
 800270c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270e:	4a08      	ldr	r2, [pc, #32]	; (8002730 <HAL_TIM_Base_MspInit+0x184>)
 8002710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002714:	6613      	str	r3, [r2, #96]	; 0x60
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_TIM_Base_MspInit+0x184>)
 8002718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
}
 8002722:	bf00      	nop
 8002724:	3740      	adds	r7, #64	; 0x40
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40012c00 	.word	0x40012c00
 8002730:	40021000 	.word	0x40021000
 8002734:	48000800 	.word	0x48000800
 8002738:	40013400 	.word	0x40013400
 800273c:	40014000 	.word	0x40014000
 8002740:	40014400 	.word	0x40014400
 8002744:	40014800 	.word	0x40014800

08002748 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	; 0x28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a17      	ldr	r2, [pc, #92]	; (80027c4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d128      	bne.n	80027bc <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800276a:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <HAL_TIM_Encoder_MspInit+0x80>)
 800276c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276e:	4a16      	ldr	r2, [pc, #88]	; (80027c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002770:	f043 0302 	orr.w	r3, r3, #2
 8002774:	6593      	str	r3, [r2, #88]	; 0x58
 8002776:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002782:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002786:	4a10      	ldr	r2, [pc, #64]	; (80027c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800278e:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_BTN_A_Pin|ENC_BTN_B_Pin;
 800279a:	23c0      	movs	r3, #192	; 0xc0
 800279c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279e:	2302      	movs	r3, #2
 80027a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a6:	2300      	movs	r3, #0
 80027a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027aa:	2302      	movs	r3, #2
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ae:	f107 0314 	add.w	r3, r7, #20
 80027b2:	4619      	mov	r1, r3
 80027b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027b8:	f002 f94e 	bl	8004a58 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80027bc:	bf00      	nop
 80027be:	3728      	adds	r7, #40	; 0x28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40000400 	.word	0x40000400
 80027c8:	40021000 	.word	0x40021000

080027cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08a      	sub	sp, #40	; 0x28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a22      	ldr	r2, [pc, #136]	; (8002874 <HAL_TIM_MspPostInit+0xa8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d11c      	bne.n	8002828 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ee:	4b22      	ldr	r3, [pc, #136]	; (8002878 <HAL_TIM_MspPostInit+0xac>)
 80027f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f2:	4a21      	ldr	r2, [pc, #132]	; (8002878 <HAL_TIM_MspPostInit+0xac>)
 80027f4:	f043 0302 	orr.w	r3, r3, #2
 80027f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027fa:	4b1f      	ldr	r3, [pc, #124]	; (8002878 <HAL_TIM_MspPostInit+0xac>)
 80027fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB4     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002806:	2310      	movs	r3, #16
 8002808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280a:	2302      	movs	r3, #2
 800280c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002812:	2300      	movs	r3, #0
 8002814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002816:	2301      	movs	r3, #1
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800281a:	f107 0314 	add.w	r3, r7, #20
 800281e:	4619      	mov	r1, r3
 8002820:	4816      	ldr	r0, [pc, #88]	; (800287c <HAL_TIM_MspPostInit+0xb0>)
 8002822:	f002 f919 	bl	8004a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002826:	e020      	b.n	800286a <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM17)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a14      	ldr	r2, [pc, #80]	; (8002880 <HAL_TIM_MspPostInit+0xb4>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d11b      	bne.n	800286a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002832:	4b11      	ldr	r3, [pc, #68]	; (8002878 <HAL_TIM_MspPostInit+0xac>)
 8002834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002836:	4a10      	ldr	r2, [pc, #64]	; (8002878 <HAL_TIM_MspPostInit+0xac>)
 8002838:	f043 0302 	orr.w	r3, r3, #2
 800283c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800283e:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <HAL_TIM_MspPostInit+0xac>)
 8002840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ISO_PWM_BREAK_Pin;
 800284a:	2320      	movs	r3, #32
 800284c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284e:	2302      	movs	r3, #2
 8002850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002856:	2300      	movs	r3, #0
 8002858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800285a:	230a      	movs	r3, #10
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ISO_PWM_BREAK_GPIO_Port, &GPIO_InitStruct);
 800285e:	f107 0314 	add.w	r3, r7, #20
 8002862:	4619      	mov	r1, r3
 8002864:	4805      	ldr	r0, [pc, #20]	; (800287c <HAL_TIM_MspPostInit+0xb0>)
 8002866:	f002 f8f7 	bl	8004a58 <HAL_GPIO_Init>
}
 800286a:	bf00      	nop
 800286c:	3728      	adds	r7, #40	; 0x28
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40014400 	.word	0x40014400
 8002878:	40021000 	.word	0x40021000
 800287c:	48000400 	.word	0x48000400
 8002880:	40014800 	.word	0x40014800

08002884 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002888:	4b22      	ldr	r3, [pc, #136]	; (8002914 <MX_USART1_UART_Init+0x90>)
 800288a:	4a23      	ldr	r2, [pc, #140]	; (8002918 <MX_USART1_UART_Init+0x94>)
 800288c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800288e:	4b21      	ldr	r3, [pc, #132]	; (8002914 <MX_USART1_UART_Init+0x90>)
 8002890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002894:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002896:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <MX_USART1_UART_Init+0x90>)
 8002898:	2200      	movs	r2, #0
 800289a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800289c:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <MX_USART1_UART_Init+0x90>)
 800289e:	2200      	movs	r2, #0
 80028a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028a2:	4b1c      	ldr	r3, [pc, #112]	; (8002914 <MX_USART1_UART_Init+0x90>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028a8:	4b1a      	ldr	r3, [pc, #104]	; (8002914 <MX_USART1_UART_Init+0x90>)
 80028aa:	220c      	movs	r2, #12
 80028ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ae:	4b19      	ldr	r3, [pc, #100]	; (8002914 <MX_USART1_UART_Init+0x90>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b4:	4b17      	ldr	r3, [pc, #92]	; (8002914 <MX_USART1_UART_Init+0x90>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028ba:	4b16      	ldr	r3, [pc, #88]	; (8002914 <MX_USART1_UART_Init+0x90>)
 80028bc:	2200      	movs	r2, #0
 80028be:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028c0:	4b14      	ldr	r3, [pc, #80]	; (8002914 <MX_USART1_UART_Init+0x90>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028c6:	4b13      	ldr	r3, [pc, #76]	; (8002914 <MX_USART1_UART_Init+0x90>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028cc:	4811      	ldr	r0, [pc, #68]	; (8002914 <MX_USART1_UART_Init+0x90>)
 80028ce:	f007 feef 	bl	800a6b0 <HAL_UART_Init>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80028d8:	f7ff f9f2 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028dc:	2100      	movs	r1, #0
 80028de:	480d      	ldr	r0, [pc, #52]	; (8002914 <MX_USART1_UART_Init+0x90>)
 80028e0:	f008 fcb6 	bl	800b250 <HAL_UARTEx_SetTxFifoThreshold>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80028ea:	f7ff f9e9 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028ee:	2100      	movs	r1, #0
 80028f0:	4808      	ldr	r0, [pc, #32]	; (8002914 <MX_USART1_UART_Init+0x90>)
 80028f2:	f008 fceb 	bl	800b2cc <HAL_UARTEx_SetRxFifoThreshold>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80028fc:	f7ff f9e0 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002900:	4804      	ldr	r0, [pc, #16]	; (8002914 <MX_USART1_UART_Init+0x90>)
 8002902:	f008 fc6c 	bl	800b1de <HAL_UARTEx_DisableFifoMode>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800290c:	f7ff f9d8 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000800 	.word	0x20000800
 8002918:	40013800 	.word	0x40013800

0800291c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002920:	4b22      	ldr	r3, [pc, #136]	; (80029ac <MX_USART3_UART_Init+0x90>)
 8002922:	4a23      	ldr	r2, [pc, #140]	; (80029b0 <MX_USART3_UART_Init+0x94>)
 8002924:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002926:	4b21      	ldr	r3, [pc, #132]	; (80029ac <MX_USART3_UART_Init+0x90>)
 8002928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800292c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800292e:	4b1f      	ldr	r3, [pc, #124]	; (80029ac <MX_USART3_UART_Init+0x90>)
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002934:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <MX_USART3_UART_Init+0x90>)
 8002936:	2200      	movs	r2, #0
 8002938:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800293a:	4b1c      	ldr	r3, [pc, #112]	; (80029ac <MX_USART3_UART_Init+0x90>)
 800293c:	2200      	movs	r2, #0
 800293e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002940:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <MX_USART3_UART_Init+0x90>)
 8002942:	220c      	movs	r2, #12
 8002944:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002946:	4b19      	ldr	r3, [pc, #100]	; (80029ac <MX_USART3_UART_Init+0x90>)
 8002948:	2200      	movs	r2, #0
 800294a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800294c:	4b17      	ldr	r3, [pc, #92]	; (80029ac <MX_USART3_UART_Init+0x90>)
 800294e:	2200      	movs	r2, #0
 8002950:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002952:	4b16      	ldr	r3, [pc, #88]	; (80029ac <MX_USART3_UART_Init+0x90>)
 8002954:	2200      	movs	r2, #0
 8002956:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002958:	4b14      	ldr	r3, [pc, #80]	; (80029ac <MX_USART3_UART_Init+0x90>)
 800295a:	2200      	movs	r2, #0
 800295c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800295e:	4b13      	ldr	r3, [pc, #76]	; (80029ac <MX_USART3_UART_Init+0x90>)
 8002960:	2200      	movs	r2, #0
 8002962:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002964:	4811      	ldr	r0, [pc, #68]	; (80029ac <MX_USART3_UART_Init+0x90>)
 8002966:	f007 fea3 	bl	800a6b0 <HAL_UART_Init>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002970:	f7ff f9a6 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002974:	2100      	movs	r1, #0
 8002976:	480d      	ldr	r0, [pc, #52]	; (80029ac <MX_USART3_UART_Init+0x90>)
 8002978:	f008 fc6a 	bl	800b250 <HAL_UARTEx_SetTxFifoThreshold>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002982:	f7ff f99d 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002986:	2100      	movs	r1, #0
 8002988:	4808      	ldr	r0, [pc, #32]	; (80029ac <MX_USART3_UART_Init+0x90>)
 800298a:	f008 fc9f 	bl	800b2cc <HAL_UARTEx_SetRxFifoThreshold>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002994:	f7ff f994 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002998:	4804      	ldr	r0, [pc, #16]	; (80029ac <MX_USART3_UART_Init+0x90>)
 800299a:	f008 fc20 	bl	800b1de <HAL_UARTEx_DisableFifoMode>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80029a4:	f7ff f98c 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029a8:	bf00      	nop
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000890 	.word	0x20000890
 80029b0:	40004800 	.word	0x40004800

080029b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b0a0      	sub	sp, #128	; 0x80
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029cc:	f107 0318 	add.w	r3, r7, #24
 80029d0:	2254      	movs	r2, #84	; 0x54
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f00f fb88 	bl	80120ea <memset>
  if(uartHandle->Instance==USART1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a3d      	ldr	r2, [pc, #244]	; (8002ad4 <HAL_UART_MspInit+0x120>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d136      	bne.n	8002a52 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029e4:	2301      	movs	r3, #1
 80029e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029ec:	f107 0318 	add.w	r3, r7, #24
 80029f0:	4618      	mov	r0, r3
 80029f2:	f005 fbc5 	bl	8008180 <HAL_RCCEx_PeriphCLKConfig>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029fc:	f7ff f960 	bl	8001cc0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a00:	4b35      	ldr	r3, [pc, #212]	; (8002ad8 <HAL_UART_MspInit+0x124>)
 8002a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a04:	4a34      	ldr	r2, [pc, #208]	; (8002ad8 <HAL_UART_MspInit+0x124>)
 8002a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a0a:	6613      	str	r3, [r2, #96]	; 0x60
 8002a0c:	4b32      	ldr	r3, [pc, #200]	; (8002ad8 <HAL_UART_MspInit+0x124>)
 8002a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a18:	4b2f      	ldr	r3, [pc, #188]	; (8002ad8 <HAL_UART_MspInit+0x124>)
 8002a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1c:	4a2e      	ldr	r2, [pc, #184]	; (8002ad8 <HAL_UART_MspInit+0x124>)
 8002a1e:	f043 0304 	orr.w	r3, r3, #4
 8002a22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a24:	4b2c      	ldr	r3, [pc, #176]	; (8002ad8 <HAL_UART_MspInit+0x124>)
 8002a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002a30:	2330      	movs	r3, #48	; 0x30
 8002a32:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a34:	2302      	movs	r3, #2
 8002a36:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a40:	2307      	movs	r3, #7
 8002a42:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4824      	ldr	r0, [pc, #144]	; (8002adc <HAL_UART_MspInit+0x128>)
 8002a4c:	f002 f804 	bl	8004a58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002a50:	e03b      	b.n	8002aca <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART3)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a22      	ldr	r2, [pc, #136]	; (8002ae0 <HAL_UART_MspInit+0x12c>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d136      	bne.n	8002aca <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002a60:	2300      	movs	r3, #0
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a64:	f107 0318 	add.w	r3, r7, #24
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f005 fb89 	bl	8008180 <HAL_RCCEx_PeriphCLKConfig>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8002a74:	f7ff f924 	bl	8001cc0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a78:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <HAL_UART_MspInit+0x124>)
 8002a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7c:	4a16      	ldr	r2, [pc, #88]	; (8002ad8 <HAL_UART_MspInit+0x124>)
 8002a7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a82:	6593      	str	r3, [r2, #88]	; 0x58
 8002a84:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <HAL_UART_MspInit+0x124>)
 8002a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a90:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <HAL_UART_MspInit+0x124>)
 8002a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a94:	4a10      	ldr	r2, [pc, #64]	; (8002ad8 <HAL_UART_MspInit+0x124>)
 8002a96:	f043 0302 	orr.w	r3, r3, #2
 8002a9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <HAL_UART_MspInit+0x124>)
 8002a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002aa8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002aac:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002aba:	2307      	movs	r3, #7
 8002abc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002abe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4807      	ldr	r0, [pc, #28]	; (8002ae4 <HAL_UART_MspInit+0x130>)
 8002ac6:	f001 ffc7 	bl	8004a58 <HAL_GPIO_Init>
}
 8002aca:	bf00      	nop
 8002acc:	3780      	adds	r7, #128	; 0x80
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40013800 	.word	0x40013800
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	48000800 	.word	0x48000800
 8002ae0:	40004800 	.word	0x40004800
 8002ae4:	48000400 	.word	0x48000400

08002ae8 <vTask_TCN75A>:
extern SemaphoreHandle_t xI2CMutex;
extern QueueHandle_t xTemperatureQueue;
TCN75A_HandleTypeDef hTCN75A1;


void vTask_TCN75A(void *pvParameters){
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
	I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*) pvParameters;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	60fb      	str	r3, [r7, #12]
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002af4:	4b32      	ldr	r3, [pc, #200]	; (8002bc0 <vTask_TCN75A+0xd8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002afc:	4618      	mov	r0, r3
 8002afe:	f00c ff35 	bl	800f96c <xQueueSemaphoreTake>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d109      	bne.n	8002b1c <vTask_TCN75A+0x34>
		printf("Init Task TCN75A...   ");
 8002b08:	482e      	ldr	r0, [pc, #184]	; (8002bc4 <vTask_TCN75A+0xdc>)
 8002b0a:	f00f fff5 	bl	8012af8 <iprintf>
		xSemaphoreGive(xUartMutex);
 8002b0e:	4b2c      	ldr	r3, [pc, #176]	; (8002bc0 <vTask_TCN75A+0xd8>)
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	2300      	movs	r3, #0
 8002b14:	2200      	movs	r2, #0
 8002b16:	2100      	movs	r1, #0
 8002b18:	f00c fd4a 	bl	800f5b0 <xQueueGenericSend>
	}
	TCN75A_Init(&hTCN75A1, hi2c);
 8002b1c:	68f9      	ldr	r1, [r7, #12]
 8002b1e:	482a      	ldr	r0, [pc, #168]	; (8002bc8 <vTask_TCN75A+0xe0>)
 8002b20:	f000 f860 	bl	8002be4 <TCN75A_Init>
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002b24:	4b26      	ldr	r3, [pc, #152]	; (8002bc0 <vTask_TCN75A+0xd8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f00c ff1d 	bl	800f96c <xQueueSemaphoreTake>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d109      	bne.n	8002b4c <vTask_TCN75A+0x64>
		printf(" Done\r\n");
 8002b38:	4824      	ldr	r0, [pc, #144]	; (8002bcc <vTask_TCN75A+0xe4>)
 8002b3a:	f010 f863 	bl	8012c04 <puts>
		xSemaphoreGive(xUartMutex);
 8002b3e:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <vTask_TCN75A+0xd8>)
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	2300      	movs	r3, #0
 8002b44:	2200      	movs	r2, #0
 8002b46:	2100      	movs	r1, #0
 8002b48:	f00c fd32 	bl	800f5b0 <xQueueGenericSend>
	}
	vTaskDelay(1000);
 8002b4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b50:	f00d fa8a 	bl	8010068 <vTaskDelay>
	for(;;){
		TCN75A_Read_Temperature(&hTCN75A1);
 8002b54:	481c      	ldr	r0, [pc, #112]	; (8002bc8 <vTask_TCN75A+0xe0>)
 8002b56:	f000 f867 	bl	8002c28 <TCN75A_Read_Temperature>
		if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002b5a:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <vTask_TCN75A+0xd8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b62:	4618      	mov	r0, r3
 8002b64:	f00c ff02 	bl	800f96c <xQueueSemaphoreTake>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d11e      	bne.n	8002bac <vTask_TCN75A+0xc4>
			printf("Temperature %2.2f°C\r\n",hTCN75A1.temperature);
 8002b6e:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <vTask_TCN75A+0xe0>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fd fd10 	bl	8000598 <__aeabi_f2d>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4814      	ldr	r0, [pc, #80]	; (8002bd0 <vTask_TCN75A+0xe8>)
 8002b7e:	f00f ffbb 	bl	8012af8 <iprintf>
			xSemaphoreGive(xUartMutex);
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <vTask_TCN75A+0xd8>)
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	2300      	movs	r3, #0
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	f00c fd10 	bl	800f5b0 <xQueueGenericSend>
			if(pdPASS == xQueueSend(xTemperatureQueue, &hTCN75A1.temperature, portMAX_DELAY)){
 8002b90:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <vTask_TCN75A+0xec>)
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	2300      	movs	r3, #0
 8002b96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b9a:	490f      	ldr	r1, [pc, #60]	; (8002bd8 <vTask_TCN75A+0xf0>)
 8002b9c:	f00c fd08 	bl	800f5b0 <xQueueGenericSend>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d102      	bne.n	8002bac <vTask_TCN75A+0xc4>
				printf("Temperature transmit to fan controller\r\n");
 8002ba6:	480d      	ldr	r0, [pc, #52]	; (8002bdc <vTask_TCN75A+0xf4>)
 8002ba8:	f010 f82c 	bl	8012c04 <puts>
			}

		}
		vTaskDelay(1000);
 8002bac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bb0:	f00d fa5a 	bl	8010068 <vTaskDelay>
		HAL_GPIO_TogglePin(USR_LED_3_GPIO_Port, USR_LED_3_Pin);
 8002bb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bb8:	4809      	ldr	r0, [pc, #36]	; (8002be0 <vTask_TCN75A+0xf8>)
 8002bba:	f002 f8e7 	bl	8004d8c <HAL_GPIO_TogglePin>
	for(;;){
 8002bbe:	e7c9      	b.n	8002b54 <vTask_TCN75A+0x6c>
 8002bc0:	200005dc 	.word	0x200005dc
 8002bc4:	080151b0 	.word	0x080151b0
 8002bc8:	20000920 	.word	0x20000920
 8002bcc:	080151c8 	.word	0x080151c8
 8002bd0:	080151d0 	.word	0x080151d0
 8002bd4:	200005e4 	.word	0x200005e4
 8002bd8:	2000092c 	.word	0x2000092c
 8002bdc:	080151e8 	.word	0x080151e8
 8002be0:	48000800 	.word	0x48000800

08002be4 <TCN75A_Init>:
	}
}

void TCN75A_Init(TCN75A_HandleTypeDef* hTCN75A, I2C_HandleTypeDef* hi2c){
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
	hTCN75A->hi2c = hi2c;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	601a      	str	r2, [r3, #0]
	hTCN75A->I2C_addr = _TCN75A_I2C_ADDR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2248      	movs	r2, #72	; 0x48
 8002bf8:	711a      	strb	r2, [r3, #4]

	uint8_t config[2] = {_TCN75A_RP_CONFIG, _TCN75A_12BITS};
 8002bfa:	f246 0301 	movw	r3, #24577	; 0x6001
 8002bfe:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(hTCN75A->hi2c, hTCN75A->I2C_addr<<1, config, 2, HAL_MAX_DELAY);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	791b      	ldrb	r3, [r3, #4]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	b299      	uxth	r1, r3
 8002c0e:	f107 020c 	add.w	r2, r7, #12
 8002c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	2302      	movs	r3, #2
 8002c1a:	f002 f979 	bl	8004f10 <HAL_I2C_Master_Transmit>
}
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <TCN75A_Read_Temperature>:

void TCN75A_Read_Temperature(TCN75A_HandleTypeDef* hTCN75A){
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af04      	add	r7, sp, #16
 8002c2e:	6078      	str	r0, [r7, #4]
	uint8_t data[2] = {0x00, 0x00};
 8002c30:	2300      	movs	r3, #0
 8002c32:	81bb      	strh	r3, [r7, #12]
	if(xSemaphoreTake(xI2CMutex, portMAX_DELAY)==pdTRUE){
 8002c34:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <TCN75A_Read_Temperature+0x90>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f00c fe95 	bl	800f96c <xQueueSemaphoreTake>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d119      	bne.n	8002c7c <TCN75A_Read_Temperature+0x54>
		//HAL_I2C_Master_Transmit(hTCN75A->hi2c, hTCN75A->I2C_addr<<1, data, 1, HAL_MAX_DELAY);
		//HAL_I2C_Master_Receive(hTCN75A->hi2c, hTCN75A->I2C_addr<<1, data, 2, HAL_MAX_DELAY);
		HAL_I2C_Mem_Read(hTCN75A->hi2c, hTCN75A->I2C_addr<<1, _TCN75A_RP_TA, 1, data, 2, HAL_MAX_DELAY);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6818      	ldr	r0, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	791b      	ldrb	r3, [r3, #4]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	b299      	uxth	r1, r3
 8002c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	9301      	str	r3, [sp, #4]
 8002c60:	f107 030c 	add.w	r3, r7, #12
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	2301      	movs	r3, #1
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f002 fa45 	bl	80050f8 <HAL_I2C_Mem_Read>
		xSemaphoreGive(xI2CMutex);
 8002c6e:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <TCN75A_Read_Temperature+0x90>)
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	2300      	movs	r3, #0
 8002c74:	2200      	movs	r2, #0
 8002c76:	2100      	movs	r1, #0
 8002c78:	f00c fc9a 	bl	800f5b0 <xQueueGenericSend>
	}
		hTCN75A->temperature_raw = (data[0]<<4)|(data[1]>>4);
 8002c7c:	7b3b      	ldrb	r3, [r7, #12]
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	b21a      	sxth	r2, r3
 8002c82:	7b7b      	ldrb	r3, [r7, #13]
 8002c84:	091b      	lsrs	r3, r3, #4
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	b21b      	sxth	r3, r3
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	b21b      	sxth	r3, r3
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	811a      	strh	r2, [r3, #8]
		hTCN75A->temperature = (float)hTCN75A->temperature_raw / 16.0;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	891b      	ldrh	r3, [r3, #8]
 8002c98:	ee07 3a90 	vmov	s15, r3
 8002c9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ca0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002ca4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	200005e0 	.word	0x200005e0

08002cbc <vTask_Fan>:
#include "semphr.h"

extern SemaphoreHandle_t xUartMutex;
extern QueueHandle_t xTemperatureQueue;

void vTask_Fan(void *pvParameters){
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
	FAN_HandleTypeDef hfan1;
	float temperature;
	float speed = 0;
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002cca:	4b30      	ldr	r3, [pc, #192]	; (8002d8c <vTask_Fan+0xd0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f00c fe4a 	bl	800f96c <xQueueSemaphoreTake>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d109      	bne.n	8002cf2 <vTask_Fan+0x36>
		printf("Init Fan...           ");
 8002cde:	482c      	ldr	r0, [pc, #176]	; (8002d90 <vTask_Fan+0xd4>)
 8002ce0:	f00f ff0a 	bl	8012af8 <iprintf>
		xSemaphoreGive(xUartMutex);
 8002ce4:	4b29      	ldr	r3, [pc, #164]	; (8002d8c <vTask_Fan+0xd0>)
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	2300      	movs	r3, #0
 8002cea:	2200      	movs	r2, #0
 8002cec:	2100      	movs	r1, #0
 8002cee:	f00c fc5f 	bl	800f5b0 <xQueueGenericSend>
	}
	Fan_Init(&hfan1, (TIM_HandleTypeDef*)pvParameters);
 8002cf2:	f107 0310 	add.w	r3, r7, #16
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 f84f 	bl	8002d9c <Fan_Init>
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002cfe:	4b23      	ldr	r3, [pc, #140]	; (8002d8c <vTask_Fan+0xd0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d06:	4618      	mov	r0, r3
 8002d08:	f00c fe30 	bl	800f96c <xQueueSemaphoreTake>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d109      	bne.n	8002d26 <vTask_Fan+0x6a>
		printf(" Done\r\n");
 8002d12:	4820      	ldr	r0, [pc, #128]	; (8002d94 <vTask_Fan+0xd8>)
 8002d14:	f00f ff76 	bl	8012c04 <puts>
		xSemaphoreGive(xUartMutex);
 8002d18:	4b1c      	ldr	r3, [pc, #112]	; (8002d8c <vTask_Fan+0xd0>)
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2100      	movs	r1, #0
 8002d22:	f00c fc45 	bl	800f5b0 <xQueueGenericSend>
	}

	for(;;){
		if(pdPASS == xQueueReceive(xTemperatureQueue, &temperature, portMAX_DELAY)){
 8002d26:	4b1c      	ldr	r3, [pc, #112]	; (8002d98 <vTask_Fan+0xdc>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f107 010c 	add.w	r1, r7, #12
 8002d2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d32:	4618      	mov	r0, r3
 8002d34:	f00c fd3a 	bl	800f7ac <xQueueReceive>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d120      	bne.n	8002d80 <vTask_Fan+0xc4>
			speed = (temperature > 30) ? 1 : ((temperature < 29) ? 0 : speed);
 8002d3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d42:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d4e:	dd02      	ble.n	8002d56 <vTask_Fan+0x9a>
 8002d50:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002d54:	e00c      	b.n	8002d70 <vTask_Fan+0xb4>
 8002d56:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d5a:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8002d5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d66:	d502      	bpl.n	8002d6e <vTask_Fan+0xb2>
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	e000      	b.n	8002d70 <vTask_Fan+0xb4>
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	61fb      	str	r3, [r7, #28]
			Fan_Set_Speed(&hfan1, speed);
 8002d72:	f107 0310 	add.w	r3, r7, #16
 8002d76:	ed97 0a07 	vldr	s0, [r7, #28]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 f836 	bl	8002dec <Fan_Set_Speed>
		}
		vTaskDelay(1000);
 8002d80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d84:	f00d f970 	bl	8010068 <vTaskDelay>
		if(pdPASS == xQueueReceive(xTemperatureQueue, &temperature, portMAX_DELAY)){
 8002d88:	e7cd      	b.n	8002d26 <vTask_Fan+0x6a>
 8002d8a:	bf00      	nop
 8002d8c:	200005dc 	.word	0x200005dc
 8002d90:	08015210 	.word	0x08015210
 8002d94:	08015228 	.word	0x08015228
 8002d98:	200005e4 	.word	0x200005e4

08002d9c <Fan_Init>:
	}
}

void Fan_Init(FAN_HandleTypeDef* hfan, TIM_HandleTypeDef* htim){
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
	hfan->htim = htim;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	601a      	str	r2, [r3, #0]
	hfan->Max_Pwm = __HAL_TIM_GET_AUTORELOAD(htim);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	809a      	strh	r2, [r3, #4]
	hfan->Pwm = 0;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	80da      	strh	r2, [r3, #6]
	hfan->Channel = FAN_CHANNEL;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	721a      	strb	r2, [r3, #8]
	Fan_Set_Speed(hfan, 0);
 8002dc4:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8002de8 <Fan_Init+0x4c>
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f80f 	bl	8002dec <Fan_Set_Speed>
	HAL_TIM_PWM_Start(hfan->htim, hfan->Channel);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	7a1b      	ldrb	r3, [r3, #8]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4610      	mov	r0, r2
 8002dda:	f005 fd51 	bl	8008880 <HAL_TIM_PWM_Start>
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	00000000 	.word	0x00000000

08002dec <Fan_Set_Speed>:

void Fan_Set_Speed(FAN_HandleTypeDef* hfan, float speed){
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	ed87 0a00 	vstr	s0, [r7]
	hfan->Pwm = (uint16_t)(speed*((float)hfan->Max_Pwm));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	889b      	ldrh	r3, [r3, #4]
 8002dfc:	ee07 3a90 	vmov	s15, r3
 8002e00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e04:	edd7 7a00 	vldr	s15, [r7]
 8002e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e10:	ee17 3a90 	vmov	r3, s15
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	80da      	strh	r2, [r3, #6]
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	7a1b      	ldrb	r3, [r3, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d106      	bne.n	8002e30 <Fan_Set_Speed+0x44>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	88da      	ldrh	r2, [r3, #6]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002e2e:	e036      	b.n	8002e9e <Fan_Set_Speed+0xb2>
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	7a1b      	ldrb	r3, [r3, #8]
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d107      	bne.n	8002e48 <Fan_Set_Speed+0x5c>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	88d9      	ldrh	r1, [r3, #6]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	460b      	mov	r3, r1
 8002e44:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002e46:	e02a      	b.n	8002e9e <Fan_Set_Speed+0xb2>
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	7a1b      	ldrb	r3, [r3, #8]
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d107      	bne.n	8002e60 <Fan_Set_Speed+0x74>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	88d9      	ldrh	r1, [r3, #6]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002e5e:	e01e      	b.n	8002e9e <Fan_Set_Speed+0xb2>
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	7a1b      	ldrb	r3, [r3, #8]
 8002e64:	2b0c      	cmp	r3, #12
 8002e66:	d107      	bne.n	8002e78 <Fan_Set_Speed+0x8c>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	88d9      	ldrh	r1, [r3, #6]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	460b      	mov	r3, r1
 8002e74:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002e76:	e012      	b.n	8002e9e <Fan_Set_Speed+0xb2>
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	7a1b      	ldrb	r3, [r3, #8]
 8002e7c:	2b10      	cmp	r3, #16
 8002e7e:	d107      	bne.n	8002e90 <Fan_Set_Speed+0xa4>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	88d9      	ldrh	r1, [r3, #6]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	6493      	str	r3, [r2, #72]	; 0x48
}
 8002e8e:	e006      	b.n	8002e9e <Fan_Set_Speed+0xb2>
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	88d9      	ldrh	r1, [r3, #6]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <vTask_LCD>:
LCD_HandleTypeDef hlcd1;
uint8_t LCD_Text_Buffer[_LCD_MAX_CHAR];
const uint8_t _ROW_16[] = {0x80, 0xC0};

// Task
void vTask_LCD(void *pvParameters){
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
	int time = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60fb      	str	r3, [r7, #12]
	I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*) pvParameters;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	60bb      	str	r3, [r7, #8]
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002ebc:	4b22      	ldr	r3, [pc, #136]	; (8002f48 <vTask_LCD+0x9c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f00c fd51 	bl	800f96c <xQueueSemaphoreTake>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d109      	bne.n	8002ee4 <vTask_LCD+0x38>
		printf("Init Task LCD...      ");
 8002ed0:	481e      	ldr	r0, [pc, #120]	; (8002f4c <vTask_LCD+0xa0>)
 8002ed2:	f00f fe11 	bl	8012af8 <iprintf>
		xSemaphoreGive(xUartMutex);
 8002ed6:	4b1c      	ldr	r3, [pc, #112]	; (8002f48 <vTask_LCD+0x9c>)
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	2300      	movs	r3, #0
 8002edc:	2200      	movs	r2, #0
 8002ede:	2100      	movs	r1, #0
 8002ee0:	f00c fb66 	bl	800f5b0 <xQueueGenericSend>
	}
	LCD_Init(&hlcd1, hi2c);
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	481a      	ldr	r0, [pc, #104]	; (8002f50 <vTask_LCD+0xa4>)
 8002ee8:	f000 f8a2 	bl	8003030 <LCD_Init>
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002eec:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <vTask_LCD+0x9c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f00c fd39 	bl	800f96c <xQueueSemaphoreTake>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d109      	bne.n	8002f14 <vTask_LCD+0x68>
		printf(" Done\r\n");
 8002f00:	4814      	ldr	r0, [pc, #80]	; (8002f54 <vTask_LCD+0xa8>)
 8002f02:	f00f fe7f 	bl	8012c04 <puts>
		xSemaphoreGive(xUartMutex);
 8002f06:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <vTask_LCD+0x9c>)
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2100      	movs	r1, #0
 8002f10:	f00c fb4e 	bl	800f5b0 <xQueueGenericSend>
	}
	for(;;){
		snprintf((char*)(&hlcd1)->LCD_Text_Buffer, _LCD_MAX_CHAR, "Time : %4d sec", time);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4a10      	ldr	r2, [pc, #64]	; (8002f58 <vTask_LCD+0xac>)
 8002f18:	2121      	movs	r1, #33	; 0x21
 8002f1a:	4810      	ldr	r0, [pc, #64]	; (8002f5c <vTask_LCD+0xb0>)
 8002f1c:	f00f fef4 	bl	8012d08 <sniprintf>
		LCD_Print(&hlcd1, (&hlcd1)->LCD_Text_Buffer, _LCD_1ST_LINE);
 8002f20:	2200      	movs	r2, #0
 8002f22:	490e      	ldr	r1, [pc, #56]	; (8002f5c <vTask_LCD+0xb0>)
 8002f24:	480a      	ldr	r0, [pc, #40]	; (8002f50 <vTask_LCD+0xa4>)
 8002f26:	f000 f8df 	bl	80030e8 <LCD_Print>
		vTaskDelay(1000);
 8002f2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f2e:	f00d f89b 	bl	8010068 <vTaskDelay>
		time++;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	3301      	adds	r3, #1
 8002f36:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(USR_LED_1_GPIO_Port, USR_LED_1_Pin);
 8002f38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f40:	f001 ff24 	bl	8004d8c <HAL_GPIO_TogglePin>
	for(;;){
 8002f44:	e7e6      	b.n	8002f14 <vTask_LCD+0x68>
 8002f46:	bf00      	nop
 8002f48:	200005dc 	.word	0x200005dc
 8002f4c:	08015230 	.word	0x08015230
 8002f50:	20000930 	.word	0x20000930
 8002f54:	08015248 	.word	0x08015248
 8002f58:	08015250 	.word	0x08015250
 8002f5c:	2000093a 	.word	0x2000093a

08002f60 <LCD_Send_Command>:
	}
}

// Fonction d'écriture d'une commande sur l'écran LCD
HAL_StatusTypeDef LCD_Send_Command(LCD_HandleTypeDef *hlcd, uint8_t command) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2] = {hlcd->LCD_Command, command};
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	795b      	ldrb	r3, [r3, #5]
 8002f70:	733b      	strb	r3, [r7, #12]
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret;
	if(xSemaphoreTake(xI2CMutex, portMAX_DELAY)==pdTRUE){
 8002f76:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <LCD_Send_Command+0x64>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f00c fcf4 	bl	800f96c <xQueueSemaphoreTake>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d117      	bne.n	8002fba <LCD_Send_Command+0x5a>
		ret = HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, hlcd->LCD_I2C_addr<<1, data, sizeof(data), HAL_MAX_DELAY);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6818      	ldr	r0, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	791b      	ldrb	r3, [r3, #4]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	b299      	uxth	r1, r3
 8002f98:	f107 020c 	add.w	r2, r7, #12
 8002f9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	f001 ffb4 	bl	8004f10 <HAL_I2C_Master_Transmit>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGive(xI2CMutex);
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <LCD_Send_Command+0x64>)
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	f00c fafb 	bl	800f5b0 <xQueueGenericSend>
	}
	return ret;
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	200005e0 	.word	0x200005e0

08002fc8 <LCD_Send_Data>:

// Fonction d'écriture d'une donnée (caractère) sur l'écran LCD
HAL_StatusTypeDef LCD_Send_Data(LCD_HandleTypeDef *hlcd, uint8_t data) {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	70fb      	strb	r3, [r7, #3]
	uint8_t data_array[2] = {hlcd->LCD_Data, data};
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	799b      	ldrb	r3, [r3, #6]
 8002fd8:	733b      	strb	r3, [r7, #12]
 8002fda:	78fb      	ldrb	r3, [r7, #3]
 8002fdc:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret;
	if(xSemaphoreTake(xI2CMutex, portMAX_DELAY)==pdTRUE){
 8002fde:	4b13      	ldr	r3, [pc, #76]	; (800302c <LCD_Send_Data+0x64>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f00c fcc0 	bl	800f96c <xQueueSemaphoreTake>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d117      	bne.n	8003022 <LCD_Send_Data+0x5a>
		ret = HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, hlcd->LCD_I2C_addr<<1, data_array, sizeof(data_array), HAL_MAX_DELAY);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	791b      	ldrb	r3, [r3, #4]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	b299      	uxth	r1, r3
 8003000:	f107 020c 	add.w	r2, r7, #12
 8003004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	2302      	movs	r3, #2
 800300c:	f001 ff80 	bl	8004f10 <HAL_I2C_Master_Transmit>
 8003010:	4603      	mov	r3, r0
 8003012:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGive(xI2CMutex);
 8003014:	4b05      	ldr	r3, [pc, #20]	; (800302c <LCD_Send_Data+0x64>)
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	2300      	movs	r3, #0
 800301a:	2200      	movs	r2, #0
 800301c:	2100      	movs	r1, #0
 800301e:	f00c fac7 	bl	800f5b0 <xQueueGenericSend>
	}
	return ret;
 8003022:	7bfb      	ldrb	r3, [r7, #15]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	200005e0 	.word	0x200005e0

08003030 <LCD_Init>:

// Fonction d'initialisation de l'écran LCD
void LCD_Init(LCD_HandleTypeDef *hlcd, I2C_HandleTypeDef *hi2c) {
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
	//	int debug;
	//	uint8_t data[2];
	hlcd->LCD_hi2c = hi2c;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	601a      	str	r2, [r3, #0]
	hlcd->LCD_I2C_addr = _LCD_I2C_TXT_ADDR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	223e      	movs	r2, #62	; 0x3e
 8003044:	711a      	strb	r2, [r3, #4]
	hlcd->LCD_Command = _LCD_COMMAND;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2280      	movs	r2, #128	; 0x80
 800304a:	715a      	strb	r2, [r3, #5]
	hlcd->LCD_Data = _LCD_DATA;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2240      	movs	r2, #64	; 0x40
 8003050:	719a      	strb	r2, [r3, #6]
	hlcd->LCD_Background_Color[0] = 0;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	71da      	strb	r2, [r3, #7]
	hlcd->LCD_Background_Color[1] = 255;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	22ff      	movs	r2, #255	; 0xff
 800305c:	721a      	strb	r2, [r3, #8]
	hlcd->LCD_Background_Color[2] = 128;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2280      	movs	r2, #128	; 0x80
 8003062:	725a      	strb	r2, [r3, #9]
	sprintf((char*)hlcd->LCD_Text_Buffer,"");
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	330a      	adds	r3, #10
 8003068:	491e      	ldr	r1, [pc, #120]	; (80030e4 <LCD_Init+0xb4>)
 800306a:	4618      	mov	r0, r3
 800306c:	f00f fe80 	bl	8012d70 <siprintf>

	HAL_Delay(50);
 8003070:	2032      	movs	r0, #50	; 0x32
 8003072:	f000 fa07 	bl	8003484 <HAL_Delay>
	LCD_Send_Command(hlcd, _LCD_FUNCTIONSET | _LCD_4BITMODE | _LCD_1LINE | _LCD_5x8DOTS);
 8003076:	2120      	movs	r1, #32
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff ff71 	bl	8002f60 <LCD_Send_Command>
	//	LCD_Send_Command(hlcd, 0x28);
	HAL_Delay(5);
 800307e:	2005      	movs	r0, #5
 8003080:	f000 fa00 	bl	8003484 <HAL_Delay>
	LCD_Send_Command(hlcd, _LCD_FUNCTIONSET | _LCD_4BITMODE | _LCD_1LINE | _LCD_5x8DOTS);
 8003084:	2120      	movs	r1, #32
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7ff ff6a 	bl	8002f60 <LCD_Send_Command>
	//	LCD_Send_Command(hlcd, 0x28);
	HAL_Delay(1);
 800308c:	2001      	movs	r0, #1
 800308e:	f000 f9f9 	bl	8003484 <HAL_Delay>
	LCD_Send_Command(hlcd, _LCD_FUNCTIONSET | _LCD_4BITMODE | _LCD_1LINE | _LCD_5x8DOTS);
 8003092:	2120      	movs	r1, #32
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff ff63 	bl	8002f60 <LCD_Send_Command>
	//	LCD_Send_Command(hlcd, 0x28);
	HAL_Delay(1);
 800309a:	2001      	movs	r0, #1
 800309c:	f000 f9f2 	bl	8003484 <HAL_Delay>
	LCD_Send_Command(hlcd, _LCD_FUNCTIONSET | _LCD_4BITMODE | _LCD_1LINE | _LCD_5x8DOTS);
 80030a0:	2120      	movs	r1, #32
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff ff5c 	bl	8002f60 <LCD_Send_Command>
	//	LCD_Send_Command(hlcd, 0x28);

	LCD_Send_Command(hlcd, _LCD_DISPLAYCONTROL | _LCD_DISPLAYON | _LCD_CURSORON | _LCD_BLINKON);
 80030a8:	210f      	movs	r1, #15
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff ff58 	bl	8002f60 <LCD_Send_Command>
	LCD_Send_Command(hlcd, _LCD_CLEARDISPLAY);
 80030b0:	2101      	movs	r1, #1
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff ff54 	bl	8002f60 <LCD_Send_Command>
	HAL_Delay(2);
 80030b8:	2002      	movs	r0, #2
 80030ba:	f000 f9e3 	bl	8003484 <HAL_Delay>
	LCD_Send_Command(hlcd, _LCD_ENTRYMODESET | _LCD_ENTRYLEFT | _LCD_ENTRYSHIFTDECREMENT);
 80030be:	2106      	movs	r1, #6
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff ff4d 	bl	8002f60 <LCD_Send_Command>
	//	LCD_Send_Command(hlcd, 0x28);
	//	LCD_Send_Command(hlcd, 0x01);
	//	LCD_Send_Command(hlcd, 0x0C);
	//	LCD_Send_Command(hlcd, 0x06);

	LCD_Background_Init(hlcd);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f838 	bl	800313c <LCD_Background_Init>
	LCD_Set_Background_Color(hlcd, hlcd->LCD_Background_Color, _DIMMING_HALF);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3307      	adds	r3, #7
 80030d0:	2201      	movs	r2, #1
 80030d2:	4619      	mov	r1, r3
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f88f 	bl	80031f8 <LCD_Set_Background_Color>
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	08015260 	.word	0x08015260

080030e8 <LCD_Print>:

void LCD_Clear(LCD_HandleTypeDef *hlcd) {
	LCD_Send_Command(hlcd, _LCD_CLEARDISPLAY);
}

void LCD_Print(LCD_HandleTypeDef *hlcd, uint8_t *message, uint8_t line){
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	4613      	mov	r3, r2
 80030f4:	71fb      	strb	r3, [r7, #7]
	LCD_Send_Command(hlcd, _ROW_16[line]);
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	4a0f      	ldr	r2, [pc, #60]	; (8003138 <LCD_Print+0x50>)
 80030fa:	5cd3      	ldrb	r3, [r2, r3]
 80030fc:	4619      	mov	r1, r3
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f7ff ff2e 	bl	8002f60 <LCD_Send_Command>
	uint8_t i = 0;
 8003104:	2300      	movs	r3, #0
 8003106:	75fb      	strb	r3, [r7, #23]
	while (message[i] != '\0') {
 8003108:	e00a      	b.n	8003120 <LCD_Print+0x38>
		LCD_Send_Data(hlcd, message[i]);
 800310a:	7dfb      	ldrb	r3, [r7, #23]
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	4413      	add	r3, r2
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	4619      	mov	r1, r3
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f7ff ff57 	bl	8002fc8 <LCD_Send_Data>
		i++;
 800311a:	7dfb      	ldrb	r3, [r7, #23]
 800311c:	3301      	adds	r3, #1
 800311e:	75fb      	strb	r3, [r7, #23]
	while (message[i] != '\0') {
 8003120:	7dfb      	ldrb	r3, [r7, #23]
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	4413      	add	r3, r2
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1ee      	bne.n	800310a <LCD_Print+0x22>
	}
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	08015300 	.word	0x08015300

0800313c <LCD_Background_Init>:

void LCD_Background_Init(LCD_HandleTypeDef *hlcd){
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af02      	add	r7, sp, #8
 8003142:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	if(xSemaphoreTake(xI2CMutex, portMAX_DELAY)==pdTRUE){
 8003144:	4b2b      	ldr	r3, [pc, #172]	; (80031f4 <LCD_Background_Init+0xb8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800314c:	4618      	mov	r0, r3
 800314e:	f00c fc0d 	bl	800f96c <xQueueSemaphoreTake>
 8003152:	4603      	mov	r3, r0
 8003154:	2b01      	cmp	r3, #1
 8003156:	d133      	bne.n	80031c0 <LCD_Background_Init+0x84>
		data[0] = _REG_MODE1;
 8003158:	2300      	movs	r3, #0
 800315a:	723b      	strb	r3, [r7, #8]
		data[1] = 0x00;
 800315c:	2300      	movs	r3, #0
 800315e:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, _LCD_I2C_RGB_ADDR<<1, data, 2, HAL_MAX_DELAY);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6818      	ldr	r0, [r3, #0]
 8003164:	f107 0208 	add.w	r2, r7, #8
 8003168:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	2302      	movs	r3, #2
 8003170:	21c4      	movs	r1, #196	; 0xc4
 8003172:	f001 fecd 	bl	8004f10 <HAL_I2C_Master_Transmit>
		data[0] = _REG_OUTPUT;
 8003176:	2308      	movs	r3, #8
 8003178:	723b      	strb	r3, [r7, #8]
		data[1] = 0xFF;
 800317a:	23ff      	movs	r3, #255	; 0xff
 800317c:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, _LCD_I2C_RGB_ADDR<<1, data, 2, HAL_MAX_DELAY);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	f107 0208 	add.w	r2, r7, #8
 8003186:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2302      	movs	r3, #2
 800318e:	21c4      	movs	r1, #196	; 0xc4
 8003190:	f001 febe 	bl	8004f10 <HAL_I2C_Master_Transmit>
		data[0] = _REG_MODE2;
 8003194:	2301      	movs	r3, #1
 8003196:	723b      	strb	r3, [r7, #8]
		data[1] = 0x20;
 8003198:	2320      	movs	r3, #32
 800319a:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, _LCD_I2C_RGB_ADDR<<1, data, 2, HAL_MAX_DELAY);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	f107 0208 	add.w	r2, r7, #8
 80031a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	2302      	movs	r3, #2
 80031ac:	21c4      	movs	r1, #196	; 0xc4
 80031ae:	f001 feaf 	bl	8004f10 <HAL_I2C_Master_Transmit>
		xSemaphoreGive(xI2CMutex);
 80031b2:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <LCD_Background_Init+0xb8>)
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	2300      	movs	r3, #0
 80031b8:	2200      	movs	r2, #0
 80031ba:	2100      	movs	r1, #0
 80031bc:	f00c f9f8 	bl	800f5b0 <xQueueGenericSend>
	}
	for(int blink_idx = 0; blink_idx<10; blink_idx++){
 80031c0:	2300      	movs	r3, #0
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	e00e      	b.n	80031e4 <LCD_Background_Init+0xa8>
		LCD_Set_Background_Color_White(hlcd);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f876 	bl	80032b8 <LCD_Set_Background_Color_White>
		HAL_Delay(50);
 80031cc:	2032      	movs	r0, #50	; 0x32
 80031ce:	f000 f959 	bl	8003484 <HAL_Delay>
		LCD_Set_Background_Color_Red(hlcd);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f88a 	bl	80032ec <LCD_Set_Background_Color_Red>
		HAL_Delay(50);
 80031d8:	2032      	movs	r0, #50	; 0x32
 80031da:	f000 f953 	bl	8003484 <HAL_Delay>
	for(int blink_idx = 0; blink_idx<10; blink_idx++){
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	3301      	adds	r3, #1
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2b09      	cmp	r3, #9
 80031e8:	dded      	ble.n	80031c6 <LCD_Background_Init+0x8a>
	}
}
 80031ea:	bf00      	nop
 80031ec:	bf00      	nop
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	200005e0 	.word	0x200005e0

080031f8 <LCD_Set_Background_Color>:

void LCD_Set_Background_Color(LCD_HandleTypeDef *hlcd, uint8_t rgb[3], uint8_t dimming){
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	4613      	mov	r3, r2
 8003204:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2];
	if(xSemaphoreTake(xI2CMutex, portMAX_DELAY)==pdTRUE){
 8003206:	4b2b      	ldr	r3, [pc, #172]	; (80032b4 <LCD_Set_Background_Color+0xbc>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800320e:	4618      	mov	r0, r3
 8003210:	f00c fbac 	bl	800f96c <xQueueSemaphoreTake>
 8003214:	4603      	mov	r3, r0
 8003216:	2b01      	cmp	r3, #1
 8003218:	d147      	bne.n	80032aa <LCD_Set_Background_Color+0xb2>
		data[0] = 0x04;
 800321a:	2304      	movs	r3, #4
 800321c:	753b      	strb	r3, [r7, #20]
		data[1] = rgb[0]>>dimming;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	fa42 f303 	asr.w	r3, r2, r3
 800322a:	b2db      	uxtb	r3, r3
 800322c:	757b      	strb	r3, [r7, #21]
		HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, _LCD_I2C_RGB_ADDR<<1, data, 2, HAL_MAX_DELAY);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6818      	ldr	r0, [r3, #0]
 8003232:	f107 0214 	add.w	r2, r7, #20
 8003236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	2302      	movs	r3, #2
 800323e:	21c4      	movs	r1, #196	; 0xc4
 8003240:	f001 fe66 	bl	8004f10 <HAL_I2C_Master_Transmit>

		data[0] = 0x03;
 8003244:	2303      	movs	r3, #3
 8003246:	753b      	strb	r3, [r7, #20]
		data[1] = rgb[1]>>dimming;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	3301      	adds	r3, #1
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	fa42 f303 	asr.w	r3, r2, r3
 8003256:	b2db      	uxtb	r3, r3
 8003258:	757b      	strb	r3, [r7, #21]
		HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, _LCD_I2C_RGB_ADDR<<1, data, 2, HAL_MAX_DELAY);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	f107 0214 	add.w	r2, r7, #20
 8003262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	2302      	movs	r3, #2
 800326a:	21c4      	movs	r1, #196	; 0xc4
 800326c:	f001 fe50 	bl	8004f10 <HAL_I2C_Master_Transmit>

		data[0] = 0x02;
 8003270:	2302      	movs	r3, #2
 8003272:	753b      	strb	r3, [r7, #20]
		data[1] = rgb[2]>>dimming;
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	3302      	adds	r3, #2
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	fa42 f303 	asr.w	r3, r2, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	757b      	strb	r3, [r7, #21]
		HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, _LCD_I2C_RGB_ADDR<<1, data, 2, HAL_MAX_DELAY);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	f107 0214 	add.w	r2, r7, #20
 800328e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	2302      	movs	r3, #2
 8003296:	21c4      	movs	r1, #196	; 0xc4
 8003298:	f001 fe3a 	bl	8004f10 <HAL_I2C_Master_Transmit>
		xSemaphoreGive(xI2CMutex);
 800329c:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <LCD_Set_Background_Color+0xbc>)
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	2300      	movs	r3, #0
 80032a2:	2200      	movs	r2, #0
 80032a4:	2100      	movs	r1, #0
 80032a6:	f00c f983 	bl	800f5b0 <xQueueGenericSend>
	}
}
 80032aa:	bf00      	nop
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	200005e0 	.word	0x200005e0

080032b8 <LCD_Set_Background_Color_White>:

void LCD_Set_Background_Color_White(LCD_HandleTypeDef *hlcd){
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
	uint8_t rgb[3] = _COLOR_WHITE;
 80032c0:	4a09      	ldr	r2, [pc, #36]	; (80032e8 <LCD_Set_Background_Color_White+0x30>)
 80032c2:	f107 030c 	add.w	r3, r7, #12
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	4611      	mov	r1, r2
 80032ca:	8019      	strh	r1, [r3, #0]
 80032cc:	3302      	adds	r3, #2
 80032ce:	0c12      	lsrs	r2, r2, #16
 80032d0:	701a      	strb	r2, [r3, #0]
	LCD_Set_Background_Color(hlcd, rgb, _DIMMING_NO);
 80032d2:	f107 030c 	add.w	r3, r7, #12
 80032d6:	2200      	movs	r2, #0
 80032d8:	4619      	mov	r1, r3
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7ff ff8c 	bl	80031f8 <LCD_Set_Background_Color>
}
 80032e0:	bf00      	nop
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	08015264 	.word	0x08015264

080032ec <LCD_Set_Background_Color_Red>:

void LCD_Set_Background_Color_Red(LCD_HandleTypeDef *hlcd){
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
	uint8_t rgb[3] = _COLOR_RED;
 80032f4:	4a09      	ldr	r2, [pc, #36]	; (800331c <LCD_Set_Background_Color_Red+0x30>)
 80032f6:	f107 030c 	add.w	r3, r7, #12
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	4611      	mov	r1, r2
 80032fe:	8019      	strh	r1, [r3, #0]
 8003300:	3302      	adds	r3, #2
 8003302:	0c12      	lsrs	r2, r2, #16
 8003304:	701a      	strb	r2, [r3, #0]
	LCD_Set_Background_Color(hlcd, rgb, _DIMMING_NO);
 8003306:	f107 030c 	add.w	r3, r7, #12
 800330a:	2200      	movs	r2, #0
 800330c:	4619      	mov	r1, r3
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff ff72 	bl	80031f8 <LCD_Set_Background_Color>
}
 8003314:	bf00      	nop
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	08015268 	.word	0x08015268

08003320 <vTask_RotaryEnc>:
extern SemaphoreHandle_t xUartMutex;

uint8_t value;
uint32_t last_Tick = 0;

void vTask_RotaryEnc(void *pvParameters){
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef* htim = (TIM_HandleTypeDef*) pvParameters;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	613b      	str	r3, [r7, #16]
	uint32_t RotaryEnc_Previous_Value = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
	uint32_t RotaryEnc_Value = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	60fb      	str	r3, [r7, #12]
	printf("Init Rotary Encoder...");
 8003334:	4818      	ldr	r0, [pc, #96]	; (8003398 <vTask_RotaryEnc+0x78>)
 8003336:	f00f fbdf 	bl	8012af8 <iprintf>
	RotaryEnc_Init(htim);
 800333a:	6938      	ldr	r0, [r7, #16]
 800333c:	f000 f836 	bl	80033ac <RotaryEnc_Init>
	printf(" Done\r\n");
 8003340:	4816      	ldr	r0, [pc, #88]	; (800339c <vTask_RotaryEnc+0x7c>)
 8003342:	f00f fc5f 	bl	8012c04 <puts>
	for(;;){
		RotaryEnc_Value = __HAL_TIM_GET_COUNTER(htim);
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	60fb      	str	r3, [r7, #12]

		if(RotaryEnc_Previous_Value != RotaryEnc_Value){
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	429a      	cmp	r2, r3
 8003354:	d015      	beq.n	8003382 <vTask_RotaryEnc+0x62>
			if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8003356:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <vTask_RotaryEnc+0x80>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800335e:	4618      	mov	r0, r3
 8003360:	f00c fb04 	bl	800f96c <xQueueSemaphoreTake>
 8003364:	4603      	mov	r3, r0
 8003366:	2b01      	cmp	r3, #1
 8003368:	d109      	bne.n	800337e <vTask_RotaryEnc+0x5e>
				printf("!\r\n");
 800336a:	480e      	ldr	r0, [pc, #56]	; (80033a4 <vTask_RotaryEnc+0x84>)
 800336c:	f00f fc4a 	bl	8012c04 <puts>
				xSemaphoreGive(xUartMutex);
 8003370:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <vTask_RotaryEnc+0x80>)
 8003372:	6818      	ldr	r0, [r3, #0]
 8003374:	2300      	movs	r3, #0
 8003376:	2200      	movs	r2, #0
 8003378:	2100      	movs	r1, #0
 800337a:	f00c f919 	bl	800f5b0 <xQueueGenericSend>
			}
			RotaryEnc_Previous_Value = RotaryEnc_Value;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	617b      	str	r3, [r7, #20]
		}

		vTaskDelay(1000);
 8003382:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003386:	f00c fe6f 	bl	8010068 <vTaskDelay>
		HAL_GPIO_TogglePin(USR_LED_2_GPIO_Port, USR_LED_2_Pin);
 800338a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800338e:	4806      	ldr	r0, [pc, #24]	; (80033a8 <vTask_RotaryEnc+0x88>)
 8003390:	f001 fcfc 	bl	8004d8c <HAL_GPIO_TogglePin>
		RotaryEnc_Value = __HAL_TIM_GET_COUNTER(htim);
 8003394:	e7d7      	b.n	8003346 <vTask_RotaryEnc+0x26>
 8003396:	bf00      	nop
 8003398:	08015274 	.word	0x08015274
 800339c:	0801528c 	.word	0x0801528c
 80033a0:	200005dc 	.word	0x200005dc
 80033a4:	08015294 	.word	0x08015294
 80033a8:	48000800 	.word	0x48000800

080033ac <RotaryEnc_Init>:
	}
}

void RotaryEnc_Init(TIM_HandleTypeDef* htim){
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_1);
 80033b4:	2100      	movs	r1, #0
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f005 fc7b 	bl	8008cb2 <HAL_TIM_Encoder_Start>
}
 80033bc:	bf00      	nop
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80033c4:	480d      	ldr	r0, [pc, #52]	; (80033fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80033c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033c8:	480d      	ldr	r0, [pc, #52]	; (8003400 <LoopForever+0x6>)
  ldr r1, =_edata
 80033ca:	490e      	ldr	r1, [pc, #56]	; (8003404 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033cc:	4a0e      	ldr	r2, [pc, #56]	; (8003408 <LoopForever+0xe>)
  movs r3, #0
 80033ce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80033d0:	e002      	b.n	80033d8 <LoopCopyDataInit>

080033d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033d6:	3304      	adds	r3, #4

080033d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033dc:	d3f9      	bcc.n	80033d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033de:	4a0b      	ldr	r2, [pc, #44]	; (800340c <LoopForever+0x12>)
  ldr r4, =_ebss
 80033e0:	4c0b      	ldr	r4, [pc, #44]	; (8003410 <LoopForever+0x16>)
  movs r3, #0
 80033e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033e4:	e001      	b.n	80033ea <LoopFillZerobss>

080033e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033e8:	3204      	adds	r2, #4

080033ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033ec:	d3fb      	bcc.n	80033e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80033ee:	f7fe fdfb 	bl	8001fe8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033f2:	f00e fe45 	bl	8012080 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80033f6:	f7fe fb21 	bl	8001a3c <main>

080033fa <LoopForever>:

LoopForever:
    b LoopForever
 80033fa:	e7fe      	b.n	80033fa <LoopForever>
  ldr   r0, =_estack
 80033fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003404:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8003408:	08015714 	.word	0x08015714
  ldr r2, =_sbss
 800340c:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8003410:	200034ac 	.word	0x200034ac

08003414 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003414:	e7fe      	b.n	8003414 <ADC1_2_IRQHandler>

08003416 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003420:	2003      	movs	r0, #3
 8003422:	f001 fa3a 	bl	800489a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003426:	200f      	movs	r0, #15
 8003428:	f7fe fc78 	bl	8001d1c <HAL_InitTick>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	71fb      	strb	r3, [r7, #7]
 8003436:	e001      	b.n	800343c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003438:	f7fe fc48 	bl	8001ccc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800343c:	79fb      	ldrb	r3, [r7, #7]

}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800344c:	4b05      	ldr	r3, [pc, #20]	; (8003464 <HAL_IncTick+0x1c>)
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_IncTick+0x20>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4413      	add	r3, r2
 8003456:	4a03      	ldr	r2, [pc, #12]	; (8003464 <HAL_IncTick+0x1c>)
 8003458:	6013      	str	r3, [r2, #0]
}
 800345a:	bf00      	nop
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	2000095c 	.word	0x2000095c
 8003468:	20000008 	.word	0x20000008

0800346c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  return uwTick;
 8003470:	4b03      	ldr	r3, [pc, #12]	; (8003480 <HAL_GetTick+0x14>)
 8003472:	681b      	ldr	r3, [r3, #0]
}
 8003474:	4618      	mov	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	2000095c 	.word	0x2000095c

08003484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800348c:	f7ff ffee 	bl	800346c <HAL_GetTick>
 8003490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800349c:	d004      	beq.n	80034a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800349e:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <HAL_Delay+0x40>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4413      	add	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034a8:	bf00      	nop
 80034aa:	f7ff ffdf 	bl	800346c <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d8f7      	bhi.n	80034aa <HAL_Delay+0x26>
  {
  }
}
 80034ba:	bf00      	nop
 80034bc:	bf00      	nop
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	20000008 	.word	0x20000008

080034c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	609a      	str	r2, [r3, #8]
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	609a      	str	r2, [r3, #8]
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	3360      	adds	r3, #96	; 0x60
 8003542:	461a      	mov	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b08      	ldr	r3, [pc, #32]	; (8003574 <LL_ADC_SetOffset+0x44>)
 8003552:	4013      	ands	r3, r2
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	4313      	orrs	r3, r2
 8003560:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003568:	bf00      	nop
 800356a:	371c      	adds	r7, #28
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	03fff000 	.word	0x03fff000

08003578 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3360      	adds	r3, #96	; 0x60
 8003586:	461a      	mov	r2, r3
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003598:	4618      	mov	r0, r3
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	3360      	adds	r3, #96	; 0x60
 80035b4:	461a      	mov	r2, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	431a      	orrs	r2, r3
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80035ce:	bf00      	nop
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80035da:	b480      	push	{r7}
 80035dc:	b087      	sub	sp, #28
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	3360      	adds	r3, #96	; 0x60
 80035ea:	461a      	mov	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	431a      	orrs	r2, r3
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003604:	bf00      	nop
 8003606:	371c      	adds	r7, #28
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	3360      	adds	r3, #96	; 0x60
 8003620:	461a      	mov	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	431a      	orrs	r2, r3
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800363a:	bf00      	nop
 800363c:	371c      	adds	r7, #28
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	615a      	str	r2, [r3, #20]
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	3330      	adds	r3, #48	; 0x30
 800367c:	461a      	mov	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	0a1b      	lsrs	r3, r3, #8
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	f003 030c 	and.w	r3, r3, #12
 8003688:	4413      	add	r3, r2
 800368a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	f003 031f 	and.w	r3, r3, #31
 8003696:	211f      	movs	r1, #31
 8003698:	fa01 f303 	lsl.w	r3, r1, r3
 800369c:	43db      	mvns	r3, r3
 800369e:	401a      	ands	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	0e9b      	lsrs	r3, r3, #26
 80036a4:	f003 011f 	and.w	r1, r3, #31
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f003 031f 	and.w	r3, r3, #31
 80036ae:	fa01 f303 	lsl.w	r3, r1, r3
 80036b2:	431a      	orrs	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80036b8:	bf00      	nop
 80036ba:	371c      	adds	r7, #28
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	3314      	adds	r3, #20
 80036d4:	461a      	mov	r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	0e5b      	lsrs	r3, r3, #25
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	4413      	add	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	0d1b      	lsrs	r3, r3, #20
 80036ec:	f003 031f 	and.w	r3, r3, #31
 80036f0:	2107      	movs	r1, #7
 80036f2:	fa01 f303 	lsl.w	r3, r1, r3
 80036f6:	43db      	mvns	r3, r3
 80036f8:	401a      	ands	r2, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	0d1b      	lsrs	r3, r3, #20
 80036fe:	f003 031f 	and.w	r3, r3, #31
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	fa01 f303 	lsl.w	r3, r1, r3
 8003708:	431a      	orrs	r2, r3
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800370e:	bf00      	nop
 8003710:	371c      	adds	r7, #28
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
	...

0800371c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a0f      	ldr	r2, [pc, #60]	; (8003768 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d10a      	bne.n	8003746 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800373c:	431a      	orrs	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003744:	e00a      	b.n	800375c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003752:	43db      	mvns	r3, r3
 8003754:	401a      	ands	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800375c:	bf00      	nop
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	407f0000 	.word	0x407f0000

0800376c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800377c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6093      	str	r3, [r2, #8]
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037a4:	d101      	bne.n	80037aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80037c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037f4:	d101      	bne.n	80037fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <LL_ADC_IsEnabled+0x18>
 800381c:	2301      	movs	r3, #1
 800381e:	e000      	b.n	8003822 <LL_ADC_IsEnabled+0x1a>
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b04      	cmp	r3, #4
 8003840:	d101      	bne.n	8003846 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 0308 	and.w	r3, r3, #8
 8003864:	2b08      	cmp	r3, #8
 8003866:	d101      	bne.n	800386c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003868:	2301      	movs	r3, #1
 800386a:	e000      	b.n	800386e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
	...

0800387c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800387c:	b590      	push	{r4, r7, lr}
 800387e:	b089      	sub	sp, #36	; 0x24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003888:	2300      	movs	r3, #0
 800388a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e1af      	b.n	8003bf6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d109      	bne.n	80038b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7fd fce5 	bl	8001274 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff ff67 	bl	8003790 <LL_ADC_IsDeepPowerDownEnabled>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d004      	beq.n	80038d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff ff4d 	bl	800376c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff ff82 	bl	80037e0 <LL_ADC_IsInternalRegulatorEnabled>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d115      	bne.n	800390e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff ff66 	bl	80037b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038ec:	4b9f      	ldr	r3, [pc, #636]	; (8003b6c <HAL_ADC_Init+0x2f0>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	099b      	lsrs	r3, r3, #6
 80038f2:	4a9f      	ldr	r2, [pc, #636]	; (8003b70 <HAL_ADC_Init+0x2f4>)
 80038f4:	fba2 2303 	umull	r2, r3, r2, r3
 80038f8:	099b      	lsrs	r3, r3, #6
 80038fa:	3301      	adds	r3, #1
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003900:	e002      	b.n	8003908 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	3b01      	subs	r3, #1
 8003906:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f9      	bne.n	8003902 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff ff64 	bl	80037e0 <LL_ADC_IsInternalRegulatorEnabled>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10d      	bne.n	800393a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003922:	f043 0210 	orr.w	r2, r3, #16
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800392e:	f043 0201 	orr.w	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff ff75 	bl	800382e <LL_ADC_REG_IsConversionOngoing>
 8003944:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394a:	f003 0310 	and.w	r3, r3, #16
 800394e:	2b00      	cmp	r3, #0
 8003950:	f040 8148 	bne.w	8003be4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2b00      	cmp	r3, #0
 8003958:	f040 8144 	bne.w	8003be4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003960:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003964:	f043 0202 	orr.w	r2, r3, #2
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff ff49 	bl	8003808 <LL_ADC_IsEnabled>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d141      	bne.n	8003a00 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003984:	d004      	beq.n	8003990 <HAL_ADC_Init+0x114>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a7a      	ldr	r2, [pc, #488]	; (8003b74 <HAL_ADC_Init+0x2f8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d10f      	bne.n	80039b0 <HAL_ADC_Init+0x134>
 8003990:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003994:	f7ff ff38 	bl	8003808 <LL_ADC_IsEnabled>
 8003998:	4604      	mov	r4, r0
 800399a:	4876      	ldr	r0, [pc, #472]	; (8003b74 <HAL_ADC_Init+0x2f8>)
 800399c:	f7ff ff34 	bl	8003808 <LL_ADC_IsEnabled>
 80039a0:	4603      	mov	r3, r0
 80039a2:	4323      	orrs	r3, r4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	bf0c      	ite	eq
 80039a8:	2301      	moveq	r3, #1
 80039aa:	2300      	movne	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	e012      	b.n	80039d6 <HAL_ADC_Init+0x15a>
 80039b0:	4871      	ldr	r0, [pc, #452]	; (8003b78 <HAL_ADC_Init+0x2fc>)
 80039b2:	f7ff ff29 	bl	8003808 <LL_ADC_IsEnabled>
 80039b6:	4604      	mov	r4, r0
 80039b8:	4870      	ldr	r0, [pc, #448]	; (8003b7c <HAL_ADC_Init+0x300>)
 80039ba:	f7ff ff25 	bl	8003808 <LL_ADC_IsEnabled>
 80039be:	4603      	mov	r3, r0
 80039c0:	431c      	orrs	r4, r3
 80039c2:	486f      	ldr	r0, [pc, #444]	; (8003b80 <HAL_ADC_Init+0x304>)
 80039c4:	f7ff ff20 	bl	8003808 <LL_ADC_IsEnabled>
 80039c8:	4603      	mov	r3, r0
 80039ca:	4323      	orrs	r3, r4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	bf0c      	ite	eq
 80039d0:	2301      	moveq	r3, #1
 80039d2:	2300      	movne	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d012      	beq.n	8003a00 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039e2:	d004      	beq.n	80039ee <HAL_ADC_Init+0x172>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a62      	ldr	r2, [pc, #392]	; (8003b74 <HAL_ADC_Init+0x2f8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d101      	bne.n	80039f2 <HAL_ADC_Init+0x176>
 80039ee:	4a65      	ldr	r2, [pc, #404]	; (8003b84 <HAL_ADC_Init+0x308>)
 80039f0:	e000      	b.n	80039f4 <HAL_ADC_Init+0x178>
 80039f2:	4a65      	ldr	r2, [pc, #404]	; (8003b88 <HAL_ADC_Init+0x30c>)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	4619      	mov	r1, r3
 80039fa:	4610      	mov	r0, r2
 80039fc:	f7ff fd64 	bl	80034c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	7f5b      	ldrb	r3, [r3, #29]
 8003a04:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a0a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003a10:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003a16:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a1e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a20:	4313      	orrs	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d106      	bne.n	8003a3c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	3b01      	subs	r3, #1
 8003a34:	045b      	lsls	r3, r3, #17
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d009      	beq.n	8003a58 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a50:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	4b4b      	ldr	r3, [pc, #300]	; (8003b8c <HAL_ADC_Init+0x310>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6812      	ldr	r2, [r2, #0]
 8003a66:	69b9      	ldr	r1, [r7, #24]
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff fed1 	bl	800382e <LL_ADC_REG_IsConversionOngoing>
 8003a8c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff fede 	bl	8003854 <LL_ADC_INJ_IsConversionOngoing>
 8003a98:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d17f      	bne.n	8003ba0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d17c      	bne.n	8003ba0 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003aaa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ab2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ac2:	f023 0302 	bic.w	r3, r3, #2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6812      	ldr	r2, [r2, #0]
 8003aca:	69b9      	ldr	r1, [r7, #24]
 8003acc:	430b      	orrs	r3, r1
 8003ace:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d017      	beq.n	8003b08 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691a      	ldr	r2, [r3, #16]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003ae6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003af0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003af4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6911      	ldr	r1, [r2, #16]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6812      	ldr	r2, [r2, #0]
 8003b00:	430b      	orrs	r3, r1
 8003b02:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003b06:	e013      	b.n	8003b30 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b16:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6812      	ldr	r2, [r2, #0]
 8003b24:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b2c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d12a      	bne.n	8003b90 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003b44:	f023 0304 	bic.w	r3, r3, #4
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b50:	4311      	orrs	r1, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b56:	4311      	orrs	r1, r2
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f042 0201 	orr.w	r2, r2, #1
 8003b68:	611a      	str	r2, [r3, #16]
 8003b6a:	e019      	b.n	8003ba0 <HAL_ADC_Init+0x324>
 8003b6c:	20000000 	.word	0x20000000
 8003b70:	053e2d63 	.word	0x053e2d63
 8003b74:	50000100 	.word	0x50000100
 8003b78:	50000400 	.word	0x50000400
 8003b7c:	50000500 	.word	0x50000500
 8003b80:	50000600 	.word	0x50000600
 8003b84:	50000300 	.word	0x50000300
 8003b88:	50000700 	.word	0x50000700
 8003b8c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0201 	bic.w	r2, r2, #1
 8003b9e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d10c      	bne.n	8003bc2 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	f023 010f 	bic.w	r1, r3, #15
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	1e5a      	subs	r2, r3, #1
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8003bc0:	e007      	b.n	8003bd2 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 020f 	bic.w	r2, r2, #15
 8003bd0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd6:	f023 0303 	bic.w	r3, r3, #3
 8003bda:	f043 0201 	orr.w	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	65da      	str	r2, [r3, #92]	; 0x5c
 8003be2:	e007      	b.n	8003bf4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be8:	f043 0210 	orr.w	r2, r3, #16
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003bf4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3724      	adds	r7, #36	; 0x24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd90      	pop	{r4, r7, pc}
 8003bfe:	bf00      	nop

08003c00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b0b6      	sub	sp, #216	; 0xd8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d102      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x24>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	f000 bc13 	b.w	800444a <HAL_ADC_ConfigChannel+0x84a>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff fdfc 	bl	800382e <LL_ADC_REG_IsConversionOngoing>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f040 83f3 	bne.w	8004424 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	6859      	ldr	r1, [r3, #4]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f7ff fd0e 	bl	800366c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff fdea 	bl	800382e <LL_ADC_REG_IsConversionOngoing>
 8003c5a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff fdf6 	bl	8003854 <LL_ADC_INJ_IsConversionOngoing>
 8003c68:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f040 81d9 	bne.w	8004028 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f040 81d4 	bne.w	8004028 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c88:	d10f      	bne.n	8003caa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2200      	movs	r2, #0
 8003c94:	4619      	mov	r1, r3
 8003c96:	f7ff fd15 	bl	80036c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff fccf 	bl	8003646 <LL_ADC_SetSamplingTimeCommonConfig>
 8003ca8:	e00e      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6818      	ldr	r0, [r3, #0]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	6819      	ldr	r1, [r3, #0]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f7ff fd04 	bl	80036c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff fcbf 	bl	8003646 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	695a      	ldr	r2, [r3, #20]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	08db      	lsrs	r3, r3, #3
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d022      	beq.n	8003d30 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	6919      	ldr	r1, [r3, #16]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003cfa:	f7ff fc19 	bl	8003530 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	6919      	ldr	r1, [r3, #16]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f7ff fc65 	bl	80035da <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6818      	ldr	r0, [r3, #0]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	6919      	ldr	r1, [r3, #16]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	7f1b      	ldrb	r3, [r3, #28]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d102      	bne.n	8003d26 <HAL_ADC_ConfigChannel+0x126>
 8003d20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d24:	e000      	b.n	8003d28 <HAL_ADC_ConfigChannel+0x128>
 8003d26:	2300      	movs	r3, #0
 8003d28:	461a      	mov	r2, r3
 8003d2a:	f7ff fc71 	bl	8003610 <LL_ADC_SetOffsetSaturation>
 8003d2e:	e17b      	b.n	8004028 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2100      	movs	r1, #0
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff fc1e 	bl	8003578 <LL_ADC_GetOffsetChannel>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10a      	bne.n	8003d5c <HAL_ADC_ConfigChannel+0x15c>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff fc13 	bl	8003578 <LL_ADC_GetOffsetChannel>
 8003d52:	4603      	mov	r3, r0
 8003d54:	0e9b      	lsrs	r3, r3, #26
 8003d56:	f003 021f 	and.w	r2, r3, #31
 8003d5a:	e01e      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x19a>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2100      	movs	r1, #0
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff fc08 	bl	8003578 <LL_ADC_GetOffsetChannel>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d72:	fa93 f3a3 	rbit	r3, r3
 8003d76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003d8a:	2320      	movs	r3, #32
 8003d8c:	e004      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003d8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d92:	fab3 f383 	clz	r3, r3
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d105      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x1b2>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	0e9b      	lsrs	r3, r3, #26
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	e018      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x1e4>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003dbe:	fa93 f3a3 	rbit	r3, r3
 8003dc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003dca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003dce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003dd6:	2320      	movs	r3, #32
 8003dd8:	e004      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003dda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003dde:	fab3 f383 	clz	r3, r3
 8003de2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d106      	bne.n	8003df6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2200      	movs	r2, #0
 8003dee:	2100      	movs	r1, #0
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff fbd7 	bl	80035a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff fbbb 	bl	8003578 <LL_ADC_GetOffsetChannel>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10a      	bne.n	8003e22 <HAL_ADC_ConfigChannel+0x222>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2101      	movs	r1, #1
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff fbb0 	bl	8003578 <LL_ADC_GetOffsetChannel>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	0e9b      	lsrs	r3, r3, #26
 8003e1c:	f003 021f 	and.w	r2, r3, #31
 8003e20:	e01e      	b.n	8003e60 <HAL_ADC_ConfigChannel+0x260>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2101      	movs	r1, #1
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff fba5 	bl	8003578 <LL_ADC_GetOffsetChannel>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e38:	fa93 f3a3 	rbit	r3, r3
 8003e3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003e40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003e48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003e50:	2320      	movs	r3, #32
 8003e52:	e004      	b.n	8003e5e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003e54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e58:	fab3 f383 	clz	r3, r3
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d105      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x278>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	0e9b      	lsrs	r3, r3, #26
 8003e72:	f003 031f 	and.w	r3, r3, #31
 8003e76:	e018      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x2aa>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e84:	fa93 f3a3 	rbit	r3, r3
 8003e88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003e8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003e94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003e9c:	2320      	movs	r3, #32
 8003e9e:	e004      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003ea0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ea4:	fab3 f383 	clz	r3, r3
 8003ea8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d106      	bne.n	8003ebc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff fb74 	bl	80035a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff fb58 	bl	8003578 <LL_ADC_GetOffsetChannel>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10a      	bne.n	8003ee8 <HAL_ADC_ConfigChannel+0x2e8>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2102      	movs	r1, #2
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff fb4d 	bl	8003578 <LL_ADC_GetOffsetChannel>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	0e9b      	lsrs	r3, r3, #26
 8003ee2:	f003 021f 	and.w	r2, r3, #31
 8003ee6:	e01e      	b.n	8003f26 <HAL_ADC_ConfigChannel+0x326>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2102      	movs	r1, #2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff fb42 	bl	8003578 <LL_ADC_GetOffsetChannel>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003efe:	fa93 f3a3 	rbit	r3, r3
 8003f02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003f06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003f0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003f16:	2320      	movs	r3, #32
 8003f18:	e004      	b.n	8003f24 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003f1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f1e:	fab3 f383 	clz	r3, r3
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d105      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x33e>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	0e9b      	lsrs	r3, r3, #26
 8003f38:	f003 031f 	and.w	r3, r3, #31
 8003f3c:	e016      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x36c>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f4a:	fa93 f3a3 	rbit	r3, r3
 8003f4e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003f50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003f56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003f5e:	2320      	movs	r3, #32
 8003f60:	e004      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003f62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f66:	fab3 f383 	clz	r3, r3
 8003f6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d106      	bne.n	8003f7e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2200      	movs	r2, #0
 8003f76:	2102      	movs	r1, #2
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff fb13 	bl	80035a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2103      	movs	r1, #3
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff faf7 	bl	8003578 <LL_ADC_GetOffsetChannel>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10a      	bne.n	8003faa <HAL_ADC_ConfigChannel+0x3aa>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2103      	movs	r1, #3
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff faec 	bl	8003578 <LL_ADC_GetOffsetChannel>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	0e9b      	lsrs	r3, r3, #26
 8003fa4:	f003 021f 	and.w	r2, r3, #31
 8003fa8:	e017      	b.n	8003fda <HAL_ADC_ConfigChannel+0x3da>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2103      	movs	r1, #3
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff fae1 	bl	8003578 <LL_ADC_GetOffsetChannel>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fbc:	fa93 f3a3 	rbit	r3, r3
 8003fc0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003fc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fc4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003fc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003fcc:	2320      	movs	r3, #32
 8003fce:	e003      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fd2:	fab3 f383 	clz	r3, r3
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d105      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x3f2>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	0e9b      	lsrs	r3, r3, #26
 8003fec:	f003 031f 	and.w	r3, r3, #31
 8003ff0:	e011      	b.n	8004016 <HAL_ADC_ConfigChannel+0x416>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ffa:	fa93 f3a3 	rbit	r3, r3
 8003ffe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004002:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800400a:	2320      	movs	r3, #32
 800400c:	e003      	b.n	8004016 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800400e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004010:	fab3 f383 	clz	r3, r3
 8004014:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004016:	429a      	cmp	r2, r3
 8004018:	d106      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2200      	movs	r2, #0
 8004020:	2103      	movs	r1, #3
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff fabe 	bl	80035a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff fbeb 	bl	8003808 <LL_ADC_IsEnabled>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	f040 813d 	bne.w	80042b4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6819      	ldr	r1, [r3, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	461a      	mov	r2, r3
 8004048:	f7ff fb68 	bl	800371c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	4aa2      	ldr	r2, [pc, #648]	; (80042dc <HAL_ADC_ConfigChannel+0x6dc>)
 8004052:	4293      	cmp	r3, r2
 8004054:	f040 812e 	bne.w	80042b4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10b      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x480>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	0e9b      	lsrs	r3, r3, #26
 800406e:	3301      	adds	r3, #1
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	2b09      	cmp	r3, #9
 8004076:	bf94      	ite	ls
 8004078:	2301      	movls	r3, #1
 800407a:	2300      	movhi	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	e019      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x4b4>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004088:	fa93 f3a3 	rbit	r3, r3
 800408c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800408e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004090:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004098:	2320      	movs	r3, #32
 800409a:	e003      	b.n	80040a4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800409c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800409e:	fab3 f383 	clz	r3, r3
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	3301      	adds	r3, #1
 80040a6:	f003 031f 	and.w	r3, r3, #31
 80040aa:	2b09      	cmp	r3, #9
 80040ac:	bf94      	ite	ls
 80040ae:	2301      	movls	r3, #1
 80040b0:	2300      	movhi	r3, #0
 80040b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d079      	beq.n	80041ac <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d107      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x4d4>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	0e9b      	lsrs	r3, r3, #26
 80040ca:	3301      	adds	r3, #1
 80040cc:	069b      	lsls	r3, r3, #26
 80040ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040d2:	e015      	b.n	8004100 <HAL_ADC_ConfigChannel+0x500>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040dc:	fa93 f3a3 	rbit	r3, r3
 80040e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80040e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80040e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80040ec:	2320      	movs	r3, #32
 80040ee:	e003      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80040f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040f2:	fab3 f383 	clz	r3, r3
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	3301      	adds	r3, #1
 80040fa:	069b      	lsls	r3, r3, #26
 80040fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004108:	2b00      	cmp	r3, #0
 800410a:	d109      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x520>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	0e9b      	lsrs	r3, r3, #26
 8004112:	3301      	adds	r3, #1
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	2101      	movs	r1, #1
 800411a:	fa01 f303 	lsl.w	r3, r1, r3
 800411e:	e017      	b.n	8004150 <HAL_ADC_ConfigChannel+0x550>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004128:	fa93 f3a3 	rbit	r3, r3
 800412c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800412e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004130:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004138:	2320      	movs	r3, #32
 800413a:	e003      	b.n	8004144 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800413c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800413e:	fab3 f383 	clz	r3, r3
 8004142:	b2db      	uxtb	r3, r3
 8004144:	3301      	adds	r3, #1
 8004146:	f003 031f 	and.w	r3, r3, #31
 800414a:	2101      	movs	r1, #1
 800414c:	fa01 f303 	lsl.w	r3, r1, r3
 8004150:	ea42 0103 	orr.w	r1, r2, r3
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10a      	bne.n	8004176 <HAL_ADC_ConfigChannel+0x576>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	0e9b      	lsrs	r3, r3, #26
 8004166:	3301      	adds	r3, #1
 8004168:	f003 021f 	and.w	r2, r3, #31
 800416c:	4613      	mov	r3, r2
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	4413      	add	r3, r2
 8004172:	051b      	lsls	r3, r3, #20
 8004174:	e018      	b.n	80041a8 <HAL_ADC_ConfigChannel+0x5a8>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417e:	fa93 f3a3 	rbit	r3, r3
 8004182:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004186:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800418e:	2320      	movs	r3, #32
 8004190:	e003      	b.n	800419a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004194:	fab3 f383 	clz	r3, r3
 8004198:	b2db      	uxtb	r3, r3
 800419a:	3301      	adds	r3, #1
 800419c:	f003 021f 	and.w	r2, r3, #31
 80041a0:	4613      	mov	r3, r2
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	4413      	add	r3, r2
 80041a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041a8:	430b      	orrs	r3, r1
 80041aa:	e07e      	b.n	80042aa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d107      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x5c8>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	0e9b      	lsrs	r3, r3, #26
 80041be:	3301      	adds	r3, #1
 80041c0:	069b      	lsls	r3, r3, #26
 80041c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041c6:	e015      	b.n	80041f4 <HAL_ADC_ConfigChannel+0x5f4>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d0:	fa93 f3a3 	rbit	r3, r3
 80041d4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80041d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80041da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80041e0:	2320      	movs	r3, #32
 80041e2:	e003      	b.n	80041ec <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80041e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e6:	fab3 f383 	clz	r3, r3
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	3301      	adds	r3, #1
 80041ee:	069b      	lsls	r3, r3, #26
 80041f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d109      	bne.n	8004214 <HAL_ADC_ConfigChannel+0x614>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	0e9b      	lsrs	r3, r3, #26
 8004206:	3301      	adds	r3, #1
 8004208:	f003 031f 	and.w	r3, r3, #31
 800420c:	2101      	movs	r1, #1
 800420e:	fa01 f303 	lsl.w	r3, r1, r3
 8004212:	e017      	b.n	8004244 <HAL_ADC_ConfigChannel+0x644>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	fa93 f3a3 	rbit	r3, r3
 8004220:	61fb      	str	r3, [r7, #28]
  return result;
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800422c:	2320      	movs	r3, #32
 800422e:	e003      	b.n	8004238 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	fab3 f383 	clz	r3, r3
 8004236:	b2db      	uxtb	r3, r3
 8004238:	3301      	adds	r3, #1
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	2101      	movs	r1, #1
 8004240:	fa01 f303 	lsl.w	r3, r1, r3
 8004244:	ea42 0103 	orr.w	r1, r2, r3
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10d      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x670>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	0e9b      	lsrs	r3, r3, #26
 800425a:	3301      	adds	r3, #1
 800425c:	f003 021f 	and.w	r2, r3, #31
 8004260:	4613      	mov	r3, r2
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	4413      	add	r3, r2
 8004266:	3b1e      	subs	r3, #30
 8004268:	051b      	lsls	r3, r3, #20
 800426a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800426e:	e01b      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x6a8>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	fa93 f3a3 	rbit	r3, r3
 800427c:	613b      	str	r3, [r7, #16]
  return result;
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004288:	2320      	movs	r3, #32
 800428a:	e003      	b.n	8004294 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	fab3 f383 	clz	r3, r3
 8004292:	b2db      	uxtb	r3, r3
 8004294:	3301      	adds	r3, #1
 8004296:	f003 021f 	and.w	r2, r3, #31
 800429a:	4613      	mov	r3, r2
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	4413      	add	r3, r2
 80042a0:	3b1e      	subs	r3, #30
 80042a2:	051b      	lsls	r3, r3, #20
 80042a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042a8:	430b      	orrs	r3, r1
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	6892      	ldr	r2, [r2, #8]
 80042ae:	4619      	mov	r1, r3
 80042b0:	f7ff fa08 	bl	80036c4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <HAL_ADC_ConfigChannel+0x6e0>)
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 80be 	beq.w	800443e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042ca:	d004      	beq.n	80042d6 <HAL_ADC_ConfigChannel+0x6d6>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a04      	ldr	r2, [pc, #16]	; (80042e4 <HAL_ADC_ConfigChannel+0x6e4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d10a      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x6ec>
 80042d6:	4b04      	ldr	r3, [pc, #16]	; (80042e8 <HAL_ADC_ConfigChannel+0x6e8>)
 80042d8:	e009      	b.n	80042ee <HAL_ADC_ConfigChannel+0x6ee>
 80042da:	bf00      	nop
 80042dc:	407f0000 	.word	0x407f0000
 80042e0:	80080000 	.word	0x80080000
 80042e4:	50000100 	.word	0x50000100
 80042e8:	50000300 	.word	0x50000300
 80042ec:	4b59      	ldr	r3, [pc, #356]	; (8004454 <HAL_ADC_ConfigChannel+0x854>)
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff f910 	bl	8003514 <LL_ADC_GetCommonPathInternalCh>
 80042f4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a56      	ldr	r2, [pc, #344]	; (8004458 <HAL_ADC_ConfigChannel+0x858>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d004      	beq.n	800430c <HAL_ADC_ConfigChannel+0x70c>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a55      	ldr	r2, [pc, #340]	; (800445c <HAL_ADC_ConfigChannel+0x85c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d13a      	bne.n	8004382 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800430c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004310:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d134      	bne.n	8004382 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004320:	d005      	beq.n	800432e <HAL_ADC_ConfigChannel+0x72e>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a4e      	ldr	r2, [pc, #312]	; (8004460 <HAL_ADC_ConfigChannel+0x860>)
 8004328:	4293      	cmp	r3, r2
 800432a:	f040 8085 	bne.w	8004438 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004336:	d004      	beq.n	8004342 <HAL_ADC_ConfigChannel+0x742>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a49      	ldr	r2, [pc, #292]	; (8004464 <HAL_ADC_ConfigChannel+0x864>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d101      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x746>
 8004342:	4a49      	ldr	r2, [pc, #292]	; (8004468 <HAL_ADC_ConfigChannel+0x868>)
 8004344:	e000      	b.n	8004348 <HAL_ADC_ConfigChannel+0x748>
 8004346:	4a43      	ldr	r2, [pc, #268]	; (8004454 <HAL_ADC_ConfigChannel+0x854>)
 8004348:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800434c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004350:	4619      	mov	r1, r3
 8004352:	4610      	mov	r0, r2
 8004354:	f7ff f8cb 	bl	80034ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004358:	4b44      	ldr	r3, [pc, #272]	; (800446c <HAL_ADC_ConfigChannel+0x86c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	099b      	lsrs	r3, r3, #6
 800435e:	4a44      	ldr	r2, [pc, #272]	; (8004470 <HAL_ADC_ConfigChannel+0x870>)
 8004360:	fba2 2303 	umull	r2, r3, r2, r3
 8004364:	099b      	lsrs	r3, r3, #6
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	4613      	mov	r3, r2
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004372:	e002      	b.n	800437a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3b01      	subs	r3, #1
 8004378:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1f9      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004380:	e05a      	b.n	8004438 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a3b      	ldr	r2, [pc, #236]	; (8004474 <HAL_ADC_ConfigChannel+0x874>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d125      	bne.n	80043d8 <HAL_ADC_ConfigChannel+0x7d8>
 800438c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d11f      	bne.n	80043d8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a31      	ldr	r2, [pc, #196]	; (8004464 <HAL_ADC_ConfigChannel+0x864>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d104      	bne.n	80043ac <HAL_ADC_ConfigChannel+0x7ac>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a34      	ldr	r2, [pc, #208]	; (8004478 <HAL_ADC_ConfigChannel+0x878>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d047      	beq.n	800443c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043b4:	d004      	beq.n	80043c0 <HAL_ADC_ConfigChannel+0x7c0>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a2a      	ldr	r2, [pc, #168]	; (8004464 <HAL_ADC_ConfigChannel+0x864>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d101      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x7c4>
 80043c0:	4a29      	ldr	r2, [pc, #164]	; (8004468 <HAL_ADC_ConfigChannel+0x868>)
 80043c2:	e000      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x7c6>
 80043c4:	4a23      	ldr	r2, [pc, #140]	; (8004454 <HAL_ADC_ConfigChannel+0x854>)
 80043c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ce:	4619      	mov	r1, r3
 80043d0:	4610      	mov	r0, r2
 80043d2:	f7ff f88c 	bl	80034ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043d6:	e031      	b.n	800443c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a27      	ldr	r2, [pc, #156]	; (800447c <HAL_ADC_ConfigChannel+0x87c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d12d      	bne.n	800443e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80043e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d127      	bne.n	800443e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a1c      	ldr	r2, [pc, #112]	; (8004464 <HAL_ADC_ConfigChannel+0x864>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d022      	beq.n	800443e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004400:	d004      	beq.n	800440c <HAL_ADC_ConfigChannel+0x80c>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a17      	ldr	r2, [pc, #92]	; (8004464 <HAL_ADC_ConfigChannel+0x864>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d101      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x810>
 800440c:	4a16      	ldr	r2, [pc, #88]	; (8004468 <HAL_ADC_ConfigChannel+0x868>)
 800440e:	e000      	b.n	8004412 <HAL_ADC_ConfigChannel+0x812>
 8004410:	4a10      	ldr	r2, [pc, #64]	; (8004454 <HAL_ADC_ConfigChannel+0x854>)
 8004412:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004416:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800441a:	4619      	mov	r1, r3
 800441c:	4610      	mov	r0, r2
 800441e:	f7ff f866 	bl	80034ee <LL_ADC_SetCommonPathInternalCh>
 8004422:	e00c      	b.n	800443e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004428:	f043 0220 	orr.w	r2, r3, #32
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004436:	e002      	b.n	800443e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004438:	bf00      	nop
 800443a:	e000      	b.n	800443e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800443c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004446:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800444a:	4618      	mov	r0, r3
 800444c:	37d8      	adds	r7, #216	; 0xd8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	50000700 	.word	0x50000700
 8004458:	c3210000 	.word	0xc3210000
 800445c:	90c00010 	.word	0x90c00010
 8004460:	50000600 	.word	0x50000600
 8004464:	50000100 	.word	0x50000100
 8004468:	50000300 	.word	0x50000300
 800446c:	20000000 	.word	0x20000000
 8004470:	053e2d63 	.word	0x053e2d63
 8004474:	c7520000 	.word	0xc7520000
 8004478:	50000500 	.word	0x50000500
 800447c:	cb840000 	.word	0xcb840000

08004480 <LL_ADC_IsEnabled>:
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <LL_ADC_IsEnabled+0x18>
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <LL_ADC_IsEnabled+0x1a>
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d101      	bne.n	80044be <LL_ADC_REG_IsConversionOngoing+0x18>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80044cc:	b590      	push	{r4, r7, lr}
 80044ce:	b0a1      	sub	sp, #132	; 0x84
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044d6:	2300      	movs	r3, #0
 80044d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d101      	bne.n	80044ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e0e7      	b.n	80046ba <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80044f2:	2300      	movs	r3, #0
 80044f4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80044f6:	2300      	movs	r3, #0
 80044f8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004502:	d102      	bne.n	800450a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004504:	4b6f      	ldr	r3, [pc, #444]	; (80046c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	e009      	b.n	800451e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a6e      	ldr	r2, [pc, #440]	; (80046c8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d102      	bne.n	800451a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004514:	4b6d      	ldr	r3, [pc, #436]	; (80046cc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004516:	60bb      	str	r3, [r7, #8]
 8004518:	e001      	b.n	800451e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800451a:	2300      	movs	r3, #0
 800451c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10b      	bne.n	800453c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004528:	f043 0220 	orr.w	r2, r3, #32
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e0be      	b.n	80046ba <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff ffb1 	bl	80044a6 <LL_ADC_REG_IsConversionOngoing>
 8004544:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff ffab 	bl	80044a6 <LL_ADC_REG_IsConversionOngoing>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	f040 80a0 	bne.w	8004698 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004558:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800455a:	2b00      	cmp	r3, #0
 800455c:	f040 809c 	bne.w	8004698 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004568:	d004      	beq.n	8004574 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a55      	ldr	r2, [pc, #340]	; (80046c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d101      	bne.n	8004578 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004574:	4b56      	ldr	r3, [pc, #344]	; (80046d0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004576:	e000      	b.n	800457a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004578:	4b56      	ldr	r3, [pc, #344]	; (80046d4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800457a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d04b      	beq.n	800461c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	6859      	ldr	r1, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004596:	035b      	lsls	r3, r3, #13
 8004598:	430b      	orrs	r3, r1
 800459a:	431a      	orrs	r2, r3
 800459c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800459e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045a8:	d004      	beq.n	80045b4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a45      	ldr	r2, [pc, #276]	; (80046c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d10f      	bne.n	80045d4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80045b4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80045b8:	f7ff ff62 	bl	8004480 <LL_ADC_IsEnabled>
 80045bc:	4604      	mov	r4, r0
 80045be:	4841      	ldr	r0, [pc, #260]	; (80046c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045c0:	f7ff ff5e 	bl	8004480 <LL_ADC_IsEnabled>
 80045c4:	4603      	mov	r3, r0
 80045c6:	4323      	orrs	r3, r4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf0c      	ite	eq
 80045cc:	2301      	moveq	r3, #1
 80045ce:	2300      	movne	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	e012      	b.n	80045fa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80045d4:	483c      	ldr	r0, [pc, #240]	; (80046c8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80045d6:	f7ff ff53 	bl	8004480 <LL_ADC_IsEnabled>
 80045da:	4604      	mov	r4, r0
 80045dc:	483b      	ldr	r0, [pc, #236]	; (80046cc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80045de:	f7ff ff4f 	bl	8004480 <LL_ADC_IsEnabled>
 80045e2:	4603      	mov	r3, r0
 80045e4:	431c      	orrs	r4, r3
 80045e6:	483c      	ldr	r0, [pc, #240]	; (80046d8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80045e8:	f7ff ff4a 	bl	8004480 <LL_ADC_IsEnabled>
 80045ec:	4603      	mov	r3, r0
 80045ee:	4323      	orrs	r3, r4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	bf0c      	ite	eq
 80045f4:	2301      	moveq	r3, #1
 80045f6:	2300      	movne	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d056      	beq.n	80046ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80045fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004606:	f023 030f 	bic.w	r3, r3, #15
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	6811      	ldr	r1, [r2, #0]
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	6892      	ldr	r2, [r2, #8]
 8004612:	430a      	orrs	r2, r1
 8004614:	431a      	orrs	r2, r3
 8004616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004618:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800461a:	e047      	b.n	80046ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800461c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004626:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004630:	d004      	beq.n	800463c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a23      	ldr	r2, [pc, #140]	; (80046c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d10f      	bne.n	800465c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800463c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004640:	f7ff ff1e 	bl	8004480 <LL_ADC_IsEnabled>
 8004644:	4604      	mov	r4, r0
 8004646:	481f      	ldr	r0, [pc, #124]	; (80046c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004648:	f7ff ff1a 	bl	8004480 <LL_ADC_IsEnabled>
 800464c:	4603      	mov	r3, r0
 800464e:	4323      	orrs	r3, r4
 8004650:	2b00      	cmp	r3, #0
 8004652:	bf0c      	ite	eq
 8004654:	2301      	moveq	r3, #1
 8004656:	2300      	movne	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	e012      	b.n	8004682 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800465c:	481a      	ldr	r0, [pc, #104]	; (80046c8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800465e:	f7ff ff0f 	bl	8004480 <LL_ADC_IsEnabled>
 8004662:	4604      	mov	r4, r0
 8004664:	4819      	ldr	r0, [pc, #100]	; (80046cc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004666:	f7ff ff0b 	bl	8004480 <LL_ADC_IsEnabled>
 800466a:	4603      	mov	r3, r0
 800466c:	431c      	orrs	r4, r3
 800466e:	481a      	ldr	r0, [pc, #104]	; (80046d8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004670:	f7ff ff06 	bl	8004480 <LL_ADC_IsEnabled>
 8004674:	4603      	mov	r3, r0
 8004676:	4323      	orrs	r3, r4
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d012      	beq.n	80046ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800468e:	f023 030f 	bic.w	r3, r3, #15
 8004692:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004694:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004696:	e009      	b.n	80046ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469c:	f043 0220 	orr.w	r2, r3, #32
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80046aa:	e000      	b.n	80046ae <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80046b6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3784      	adds	r7, #132	; 0x84
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd90      	pop	{r4, r7, pc}
 80046c2:	bf00      	nop
 80046c4:	50000100 	.word	0x50000100
 80046c8:	50000400 	.word	0x50000400
 80046cc:	50000500 	.word	0x50000500
 80046d0:	50000300 	.word	0x50000300
 80046d4:	50000700 	.word	0x50000700
 80046d8:	50000600 	.word	0x50000600

080046dc <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e023      	b.n	8004736 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fc ff48 	bl	8001598 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004750:	4b0c      	ldr	r3, [pc, #48]	; (8004784 <__NVIC_SetPriorityGrouping+0x44>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800475c:	4013      	ands	r3, r2
 800475e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800476c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004772:	4a04      	ldr	r2, [pc, #16]	; (8004784 <__NVIC_SetPriorityGrouping+0x44>)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	60d3      	str	r3, [r2, #12]
}
 8004778:	bf00      	nop
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	e000ed00 	.word	0xe000ed00

08004788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800478c:	4b04      	ldr	r3, [pc, #16]	; (80047a0 <__NVIC_GetPriorityGrouping+0x18>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	0a1b      	lsrs	r3, r3, #8
 8004792:	f003 0307 	and.w	r3, r3, #7
}
 8004796:	4618      	mov	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	e000ed00 	.word	0xe000ed00

080047a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	4603      	mov	r3, r0
 80047ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	db0b      	blt.n	80047ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047b6:	79fb      	ldrb	r3, [r7, #7]
 80047b8:	f003 021f 	and.w	r2, r3, #31
 80047bc:	4907      	ldr	r1, [pc, #28]	; (80047dc <__NVIC_EnableIRQ+0x38>)
 80047be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c2:	095b      	lsrs	r3, r3, #5
 80047c4:	2001      	movs	r0, #1
 80047c6:	fa00 f202 	lsl.w	r2, r0, r2
 80047ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	e000e100 	.word	0xe000e100

080047e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	4603      	mov	r3, r0
 80047e8:	6039      	str	r1, [r7, #0]
 80047ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	db0a      	blt.n	800480a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	490c      	ldr	r1, [pc, #48]	; (800482c <__NVIC_SetPriority+0x4c>)
 80047fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fe:	0112      	lsls	r2, r2, #4
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	440b      	add	r3, r1
 8004804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004808:	e00a      	b.n	8004820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	b2da      	uxtb	r2, r3
 800480e:	4908      	ldr	r1, [pc, #32]	; (8004830 <__NVIC_SetPriority+0x50>)
 8004810:	79fb      	ldrb	r3, [r7, #7]
 8004812:	f003 030f 	and.w	r3, r3, #15
 8004816:	3b04      	subs	r3, #4
 8004818:	0112      	lsls	r2, r2, #4
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	440b      	add	r3, r1
 800481e:	761a      	strb	r2, [r3, #24]
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	e000e100 	.word	0xe000e100
 8004830:	e000ed00 	.word	0xe000ed00

08004834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004834:	b480      	push	{r7}
 8004836:	b089      	sub	sp, #36	; 0x24
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	f1c3 0307 	rsb	r3, r3, #7
 800484e:	2b04      	cmp	r3, #4
 8004850:	bf28      	it	cs
 8004852:	2304      	movcs	r3, #4
 8004854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	3304      	adds	r3, #4
 800485a:	2b06      	cmp	r3, #6
 800485c:	d902      	bls.n	8004864 <NVIC_EncodePriority+0x30>
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	3b03      	subs	r3, #3
 8004862:	e000      	b.n	8004866 <NVIC_EncodePriority+0x32>
 8004864:	2300      	movs	r3, #0
 8004866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004868:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	43da      	mvns	r2, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	401a      	ands	r2, r3
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800487c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	fa01 f303 	lsl.w	r3, r1, r3
 8004886:	43d9      	mvns	r1, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800488c:	4313      	orrs	r3, r2
         );
}
 800488e:	4618      	mov	r0, r3
 8004890:	3724      	adds	r7, #36	; 0x24
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b082      	sub	sp, #8
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7ff ff4c 	bl	8004740 <__NVIC_SetPriorityGrouping>
}
 80048a8:	bf00      	nop
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048be:	f7ff ff63 	bl	8004788 <__NVIC_GetPriorityGrouping>
 80048c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	68b9      	ldr	r1, [r7, #8]
 80048c8:	6978      	ldr	r0, [r7, #20]
 80048ca:	f7ff ffb3 	bl	8004834 <NVIC_EncodePriority>
 80048ce:	4602      	mov	r2, r0
 80048d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048d4:	4611      	mov	r1, r2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7ff ff82 	bl	80047e0 <__NVIC_SetPriority>
}
 80048dc:	bf00      	nop
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff ff56 	bl	80047a4 <__NVIC_EnableIRQ>
}
 80048f8:	bf00      	nop
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e033      	b.n	800497a <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7fc fe6a 	bl	8001600 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f854 	bl	80049e0 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f822 	bl	8004982 <FMAC_Reset>
 800493e:	4603      	mov	r3, r0
 8004940:	2b01      	cmp	r3, #1
 8004942:	d10c      	bne.n	800495e <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004948:	f043 0210 	orr.w	r2, r3, #16
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	22a0      	movs	r2, #160	; 0xa0
 8004954:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	73fb      	strb	r3, [r7, #15]
 800495c:	e008      	b.n	8004970 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2220      	movs	r2, #32
 8004968:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8004978:	7bfb      	ldrb	r3, [r7, #15]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b084      	sub	sp, #16
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800498a:	f7fe fd6f 	bl	800346c <HAL_GetTick>
 800498e:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800499e:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80049a0:	e00f      	b.n	80049c2 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 80049a2:	f7fe fd63 	bl	800346c <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80049b0:	d907      	bls.n	80049c2 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e00a      	b.n	80049d8 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e8      	bne.n	80049a2 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f807 	bl	80049fc <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f81b 	bl	8004a2a <FMAC_ResetOutputStateAndDataPointers>
}
 80049f4:	bf00      	nop
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a66:	e15a      	b.n	8004d1e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	fa01 f303 	lsl.w	r3, r1, r3
 8004a74:	4013      	ands	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 814c 	beq.w	8004d18 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f003 0303 	and.w	r3, r3, #3
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d005      	beq.n	8004a98 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d130      	bne.n	8004afa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	2203      	movs	r2, #3
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4013      	ands	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ace:	2201      	movs	r2, #1
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	43db      	mvns	r3, r3
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4013      	ands	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	091b      	lsrs	r3, r3, #4
 8004ae4:	f003 0201 	and.w	r2, r3, #1
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	fa02 f303 	lsl.w	r3, r2, r3
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d017      	beq.n	8004b36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	2203      	movs	r2, #3
 8004b12:	fa02 f303 	lsl.w	r3, r2, r3
 8004b16:	43db      	mvns	r3, r3
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	689a      	ldr	r2, [r3, #8]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d123      	bne.n	8004b8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	08da      	lsrs	r2, r3, #3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	3208      	adds	r2, #8
 8004b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	220f      	movs	r2, #15
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	43db      	mvns	r3, r3
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	4013      	ands	r3, r2
 8004b64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	691a      	ldr	r2, [r3, #16]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	fa02 f303 	lsl.w	r3, r2, r3
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	08da      	lsrs	r2, r3, #3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3208      	adds	r2, #8
 8004b84:	6939      	ldr	r1, [r7, #16]
 8004b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	2203      	movs	r2, #3
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	43db      	mvns	r3, r3
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f003 0203 	and.w	r2, r3, #3
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 80a6 	beq.w	8004d18 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bcc:	4b5b      	ldr	r3, [pc, #364]	; (8004d3c <HAL_GPIO_Init+0x2e4>)
 8004bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd0:	4a5a      	ldr	r2, [pc, #360]	; (8004d3c <HAL_GPIO_Init+0x2e4>)
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	6613      	str	r3, [r2, #96]	; 0x60
 8004bd8:	4b58      	ldr	r3, [pc, #352]	; (8004d3c <HAL_GPIO_Init+0x2e4>)
 8004bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	60bb      	str	r3, [r7, #8]
 8004be2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004be4:	4a56      	ldr	r2, [pc, #344]	; (8004d40 <HAL_GPIO_Init+0x2e8>)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	089b      	lsrs	r3, r3, #2
 8004bea:	3302      	adds	r3, #2
 8004bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f003 0303 	and.w	r3, r3, #3
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	220f      	movs	r2, #15
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	43db      	mvns	r3, r3
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4013      	ands	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c0e:	d01f      	beq.n	8004c50 <HAL_GPIO_Init+0x1f8>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a4c      	ldr	r2, [pc, #304]	; (8004d44 <HAL_GPIO_Init+0x2ec>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d019      	beq.n	8004c4c <HAL_GPIO_Init+0x1f4>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a4b      	ldr	r2, [pc, #300]	; (8004d48 <HAL_GPIO_Init+0x2f0>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d013      	beq.n	8004c48 <HAL_GPIO_Init+0x1f0>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a4a      	ldr	r2, [pc, #296]	; (8004d4c <HAL_GPIO_Init+0x2f4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00d      	beq.n	8004c44 <HAL_GPIO_Init+0x1ec>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a49      	ldr	r2, [pc, #292]	; (8004d50 <HAL_GPIO_Init+0x2f8>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d007      	beq.n	8004c40 <HAL_GPIO_Init+0x1e8>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a48      	ldr	r2, [pc, #288]	; (8004d54 <HAL_GPIO_Init+0x2fc>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d101      	bne.n	8004c3c <HAL_GPIO_Init+0x1e4>
 8004c38:	2305      	movs	r3, #5
 8004c3a:	e00a      	b.n	8004c52 <HAL_GPIO_Init+0x1fa>
 8004c3c:	2306      	movs	r3, #6
 8004c3e:	e008      	b.n	8004c52 <HAL_GPIO_Init+0x1fa>
 8004c40:	2304      	movs	r3, #4
 8004c42:	e006      	b.n	8004c52 <HAL_GPIO_Init+0x1fa>
 8004c44:	2303      	movs	r3, #3
 8004c46:	e004      	b.n	8004c52 <HAL_GPIO_Init+0x1fa>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e002      	b.n	8004c52 <HAL_GPIO_Init+0x1fa>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e000      	b.n	8004c52 <HAL_GPIO_Init+0x1fa>
 8004c50:	2300      	movs	r3, #0
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	f002 0203 	and.w	r2, r2, #3
 8004c58:	0092      	lsls	r2, r2, #2
 8004c5a:	4093      	lsls	r3, r2
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c62:	4937      	ldr	r1, [pc, #220]	; (8004d40 <HAL_GPIO_Init+0x2e8>)
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	089b      	lsrs	r3, r3, #2
 8004c68:	3302      	adds	r3, #2
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c70:	4b39      	ldr	r3, [pc, #228]	; (8004d58 <HAL_GPIO_Init+0x300>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c94:	4a30      	ldr	r2, [pc, #192]	; (8004d58 <HAL_GPIO_Init+0x300>)
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004c9a:	4b2f      	ldr	r3, [pc, #188]	; (8004d58 <HAL_GPIO_Init+0x300>)
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004cbe:	4a26      	ldr	r2, [pc, #152]	; (8004d58 <HAL_GPIO_Init+0x300>)
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004cc4:	4b24      	ldr	r3, [pc, #144]	; (8004d58 <HAL_GPIO_Init+0x300>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	43db      	mvns	r3, r3
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ce8:	4a1b      	ldr	r2, [pc, #108]	; (8004d58 <HAL_GPIO_Init+0x300>)
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004cee:	4b1a      	ldr	r3, [pc, #104]	; (8004d58 <HAL_GPIO_Init+0x300>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	43db      	mvns	r3, r3
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d12:	4a11      	ldr	r2, [pc, #68]	; (8004d58 <HAL_GPIO_Init+0x300>)
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	fa22 f303 	lsr.w	r3, r2, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f47f ae9d 	bne.w	8004a68 <HAL_GPIO_Init+0x10>
  }
}
 8004d2e:	bf00      	nop
 8004d30:	bf00      	nop
 8004d32:	371c      	adds	r7, #28
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	40010000 	.word	0x40010000
 8004d44:	48000400 	.word	0x48000400
 8004d48:	48000800 	.word	0x48000800
 8004d4c:	48000c00 	.word	0x48000c00
 8004d50:	48001000 	.word	0x48001000
 8004d54:	48001400 	.word	0x48001400
 8004d58:	40010400 	.word	0x40010400

08004d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	460b      	mov	r3, r1
 8004d66:	807b      	strh	r3, [r7, #2]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d6c:	787b      	ldrb	r3, [r7, #1]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d72:	887a      	ldrh	r2, [r7, #2]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d78:	e002      	b.n	8004d80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d7a:	887a      	ldrh	r2, [r7, #2]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	460b      	mov	r3, r1
 8004d96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d9e:	887a      	ldrh	r2, [r7, #2]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4013      	ands	r3, r2
 8004da4:	041a      	lsls	r2, r3, #16
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	43d9      	mvns	r1, r3
 8004daa:	887b      	ldrh	r3, [r7, #2]
 8004dac:	400b      	ands	r3, r1
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	619a      	str	r2, [r3, #24]
}
 8004db4:	bf00      	nop
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004dca:	4b08      	ldr	r3, [pc, #32]	; (8004dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dcc:	695a      	ldr	r2, [r3, #20]
 8004dce:	88fb      	ldrh	r3, [r7, #6]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d006      	beq.n	8004de4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004dd6:	4a05      	ldr	r2, [pc, #20]	; (8004dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dd8:	88fb      	ldrh	r3, [r7, #6]
 8004dda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ddc:	88fb      	ldrh	r3, [r7, #6]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fc fc2e 	bl	8001640 <HAL_GPIO_EXTI_Callback>
  }
}
 8004de4:	bf00      	nop
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40010400 	.word	0x40010400

08004df0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e081      	b.n	8004f06 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d106      	bne.n	8004e1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7fc fd58 	bl	80018cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2224      	movs	r2, #36	; 0x24
 8004e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0201 	bic.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d107      	bne.n	8004e6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e66:	609a      	str	r2, [r3, #8]
 8004e68:	e006      	b.n	8004e78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004e76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d104      	bne.n	8004e8a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6812      	ldr	r2, [r2, #0]
 8004e94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68da      	ldr	r2, [r3, #12]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004eac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691a      	ldr	r2, [r3, #16]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	69d9      	ldr	r1, [r3, #28]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a1a      	ldr	r2, [r3, #32]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0201 	orr.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
	...

08004f10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af02      	add	r7, sp, #8
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	607a      	str	r2, [r7, #4]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	817b      	strh	r3, [r7, #10]
 8004f20:	4613      	mov	r3, r2
 8004f22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b20      	cmp	r3, #32
 8004f2e:	f040 80da 	bne.w	80050e6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d101      	bne.n	8004f40 <HAL_I2C_Master_Transmit+0x30>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	e0d3      	b.n	80050e8 <HAL_I2C_Master_Transmit+0x1d8>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f48:	f7fe fa90 	bl	800346c <HAL_GetTick>
 8004f4c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	2319      	movs	r3, #25
 8004f54:	2201      	movs	r2, #1
 8004f56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 fb66 	bl	800562c <I2C_WaitOnFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e0be      	b.n	80050e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2221      	movs	r2, #33	; 0x21
 8004f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2210      	movs	r2, #16
 8004f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	893a      	ldrh	r2, [r7, #8]
 8004f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2bff      	cmp	r3, #255	; 0xff
 8004f9a:	d90e      	bls.n	8004fba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	22ff      	movs	r2, #255	; 0xff
 8004fa0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	8979      	ldrh	r1, [r7, #10]
 8004faa:	4b51      	ldr	r3, [pc, #324]	; (80050f0 <HAL_I2C_Master_Transmit+0x1e0>)
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 fce2 	bl	800597c <I2C_TransferConfig>
 8004fb8:	e06c      	b.n	8005094 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	8979      	ldrh	r1, [r7, #10]
 8004fcc:	4b48      	ldr	r3, [pc, #288]	; (80050f0 <HAL_I2C_Master_Transmit+0x1e0>)
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 fcd1 	bl	800597c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004fda:	e05b      	b.n	8005094 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	6a39      	ldr	r1, [r7, #32]
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 fb63 	bl	80056ac <I2C_WaitOnTXISFlagUntilTimeout>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e07b      	b.n	80050e8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	781a      	ldrb	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500a:	b29b      	uxth	r3, r3
 800500c:	3b01      	subs	r3, #1
 800500e:	b29a      	uxth	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005024:	b29b      	uxth	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d034      	beq.n	8005094 <HAL_I2C_Master_Transmit+0x184>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800502e:	2b00      	cmp	r3, #0
 8005030:	d130      	bne.n	8005094 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	2200      	movs	r2, #0
 800503a:	2180      	movs	r1, #128	; 0x80
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 faf5 	bl	800562c <I2C_WaitOnFlagUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e04d      	b.n	80050e8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005050:	b29b      	uxth	r3, r3
 8005052:	2bff      	cmp	r3, #255	; 0xff
 8005054:	d90e      	bls.n	8005074 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	22ff      	movs	r2, #255	; 0xff
 800505a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005060:	b2da      	uxtb	r2, r3
 8005062:	8979      	ldrh	r1, [r7, #10]
 8005064:	2300      	movs	r3, #0
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 fc85 	bl	800597c <I2C_TransferConfig>
 8005072:	e00f      	b.n	8005094 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005078:	b29a      	uxth	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005082:	b2da      	uxtb	r2, r3
 8005084:	8979      	ldrh	r1, [r7, #10]
 8005086:	2300      	movs	r3, #0
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 fc74 	bl	800597c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005098:	b29b      	uxth	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d19e      	bne.n	8004fdc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	6a39      	ldr	r1, [r7, #32]
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 fb42 	bl	800572c <I2C_WaitOnSTOPFlagUntilTimeout>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e01a      	b.n	80050e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2220      	movs	r2, #32
 80050b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6859      	ldr	r1, [r3, #4]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	4b0b      	ldr	r3, [pc, #44]	; (80050f4 <HAL_I2C_Master_Transmit+0x1e4>)
 80050c6:	400b      	ands	r3, r1
 80050c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2220      	movs	r2, #32
 80050ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	e000      	b.n	80050e8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80050e6:	2302      	movs	r3, #2
  }
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	80002000 	.word	0x80002000
 80050f4:	fe00e800 	.word	0xfe00e800

080050f8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b088      	sub	sp, #32
 80050fc:	af02      	add	r7, sp, #8
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	4608      	mov	r0, r1
 8005102:	4611      	mov	r1, r2
 8005104:	461a      	mov	r2, r3
 8005106:	4603      	mov	r3, r0
 8005108:	817b      	strh	r3, [r7, #10]
 800510a:	460b      	mov	r3, r1
 800510c:	813b      	strh	r3, [r7, #8]
 800510e:	4613      	mov	r3, r2
 8005110:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b20      	cmp	r3, #32
 800511c:	f040 80fd 	bne.w	800531a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d002      	beq.n	800512c <HAL_I2C_Mem_Read+0x34>
 8005126:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005128:	2b00      	cmp	r3, #0
 800512a:	d105      	bne.n	8005138 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005132:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e0f1      	b.n	800531c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <HAL_I2C_Mem_Read+0x4e>
 8005142:	2302      	movs	r3, #2
 8005144:	e0ea      	b.n	800531c <HAL_I2C_Mem_Read+0x224>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800514e:	f7fe f98d 	bl	800346c <HAL_GetTick>
 8005152:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	2319      	movs	r3, #25
 800515a:	2201      	movs	r2, #1
 800515c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 fa63 	bl	800562c <I2C_WaitOnFlagUntilTimeout>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e0d5      	b.n	800531c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2222      	movs	r2, #34	; 0x22
 8005174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2240      	movs	r2, #64	; 0x40
 800517c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6a3a      	ldr	r2, [r7, #32]
 800518a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005190:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005198:	88f8      	ldrh	r0, [r7, #6]
 800519a:	893a      	ldrh	r2, [r7, #8]
 800519c:	8979      	ldrh	r1, [r7, #10]
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	9301      	str	r3, [sp, #4]
 80051a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	4603      	mov	r3, r0
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f9c7 	bl	800553c <I2C_RequestMemoryRead>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e0ad      	b.n	800531c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	2bff      	cmp	r3, #255	; 0xff
 80051c8:	d90e      	bls.n	80051e8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	22ff      	movs	r2, #255	; 0xff
 80051ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	8979      	ldrh	r1, [r7, #10]
 80051d8:	4b52      	ldr	r3, [pc, #328]	; (8005324 <HAL_I2C_Mem_Read+0x22c>)
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 fbcb 	bl	800597c <I2C_TransferConfig>
 80051e6:	e00f      	b.n	8005208 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	8979      	ldrh	r1, [r7, #10]
 80051fa:	4b4a      	ldr	r3, [pc, #296]	; (8005324 <HAL_I2C_Mem_Read+0x22c>)
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 fbba 	bl	800597c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	2200      	movs	r2, #0
 8005210:	2104      	movs	r1, #4
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 fa0a 	bl	800562c <I2C_WaitOnFlagUntilTimeout>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e07c      	b.n	800531c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523e:	3b01      	subs	r3, #1
 8005240:	b29a      	uxth	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005258:	b29b      	uxth	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d034      	beq.n	80052c8 <HAL_I2C_Mem_Read+0x1d0>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005262:	2b00      	cmp	r3, #0
 8005264:	d130      	bne.n	80052c8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526c:	2200      	movs	r2, #0
 800526e:	2180      	movs	r1, #128	; 0x80
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 f9db 	bl	800562c <I2C_WaitOnFlagUntilTimeout>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e04d      	b.n	800531c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005284:	b29b      	uxth	r3, r3
 8005286:	2bff      	cmp	r3, #255	; 0xff
 8005288:	d90e      	bls.n	80052a8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	22ff      	movs	r2, #255	; 0xff
 800528e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005294:	b2da      	uxtb	r2, r3
 8005296:	8979      	ldrh	r1, [r7, #10]
 8005298:	2300      	movs	r3, #0
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f000 fb6b 	bl	800597c <I2C_TransferConfig>
 80052a6:	e00f      	b.n	80052c8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	8979      	ldrh	r1, [r7, #10]
 80052ba:	2300      	movs	r3, #0
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 fb5a 	bl	800597c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d19a      	bne.n	8005208 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 fa28 	bl	800572c <I2C_WaitOnSTOPFlagUntilTimeout>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e01a      	b.n	800531c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2220      	movs	r2, #32
 80052ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6859      	ldr	r1, [r3, #4]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	4b0b      	ldr	r3, [pc, #44]	; (8005328 <HAL_I2C_Mem_Read+0x230>)
 80052fa:	400b      	ands	r3, r1
 80052fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2220      	movs	r2, #32
 8005302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	e000      	b.n	800531c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800531a:	2302      	movs	r3, #2
  }
}
 800531c:	4618      	mov	r0, r3
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	80002400 	.word	0x80002400
 8005328:	fe00e800 	.word	0xfe00e800

0800532c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b08a      	sub	sp, #40	; 0x28
 8005330:	af02      	add	r7, sp, #8
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	607a      	str	r2, [r7, #4]
 8005336:	603b      	str	r3, [r7, #0]
 8005338:	460b      	mov	r3, r1
 800533a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800533c:	2300      	movs	r3, #0
 800533e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b20      	cmp	r3, #32
 800534a:	f040 80f1 	bne.w	8005530 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800535c:	d101      	bne.n	8005362 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800535e:	2302      	movs	r3, #2
 8005360:	e0e7      	b.n	8005532 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005368:	2b01      	cmp	r3, #1
 800536a:	d101      	bne.n	8005370 <HAL_I2C_IsDeviceReady+0x44>
 800536c:	2302      	movs	r3, #2
 800536e:	e0e0      	b.n	8005532 <HAL_I2C_IsDeviceReady+0x206>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2224      	movs	r2, #36	; 0x24
 800537c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d107      	bne.n	800539e <HAL_I2C_IsDeviceReady+0x72>
 800538e:	897b      	ldrh	r3, [r7, #10]
 8005390:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005394:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005398:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800539c:	e004      	b.n	80053a8 <HAL_I2C_IsDeviceReady+0x7c>
 800539e:	897b      	ldrh	r3, [r7, #10]
 80053a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053a4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	6812      	ldr	r2, [r2, #0]
 80053ac:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80053ae:	f7fe f85d 	bl	800346c <HAL_GetTick>
 80053b2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	f003 0320 	and.w	r3, r3, #32
 80053be:	2b20      	cmp	r3, #32
 80053c0:	bf0c      	ite	eq
 80053c2:	2301      	moveq	r3, #1
 80053c4:	2300      	movne	r3, #0
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	f003 0310 	and.w	r3, r3, #16
 80053d4:	2b10      	cmp	r3, #16
 80053d6:	bf0c      	ite	eq
 80053d8:	2301      	moveq	r3, #1
 80053da:	2300      	movne	r3, #0
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80053e0:	e034      	b.n	800544c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053e8:	d01a      	beq.n	8005420 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053ea:	f7fe f83f 	bl	800346c <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d302      	bcc.n	8005400 <HAL_I2C_IsDeviceReady+0xd4>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10f      	bne.n	8005420 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2220      	movs	r2, #32
 8005404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540c:	f043 0220 	orr.w	r2, r3, #32
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e088      	b.n	8005532 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	f003 0320 	and.w	r3, r3, #32
 800542a:	2b20      	cmp	r3, #32
 800542c:	bf0c      	ite	eq
 800542e:	2301      	moveq	r3, #1
 8005430:	2300      	movne	r3, #0
 8005432:	b2db      	uxtb	r3, r3
 8005434:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	f003 0310 	and.w	r3, r3, #16
 8005440:	2b10      	cmp	r3, #16
 8005442:	bf0c      	ite	eq
 8005444:	2301      	moveq	r3, #1
 8005446:	2300      	movne	r3, #0
 8005448:	b2db      	uxtb	r3, r3
 800544a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800544c:	7ffb      	ldrb	r3, [r7, #31]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d102      	bne.n	8005458 <HAL_I2C_IsDeviceReady+0x12c>
 8005452:	7fbb      	ldrb	r3, [r7, #30]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0c4      	beq.n	80053e2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	f003 0310 	and.w	r3, r3, #16
 8005462:	2b10      	cmp	r3, #16
 8005464:	d01a      	beq.n	800549c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2200      	movs	r2, #0
 800546e:	2120      	movs	r1, #32
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 f8db 	bl	800562c <I2C_WaitOnFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e058      	b.n	8005532 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2220      	movs	r2, #32
 8005486:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2220      	movs	r2, #32
 800548c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8005498:	2300      	movs	r3, #0
 800549a:	e04a      	b.n	8005532 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2200      	movs	r2, #0
 80054a4:	2120      	movs	r1, #32
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 f8c0 	bl	800562c <I2C_WaitOnFlagUntilTimeout>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e03d      	b.n	8005532 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2210      	movs	r2, #16
 80054bc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2220      	movs	r2, #32
 80054c4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d118      	bne.n	8005500 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054dc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2200      	movs	r2, #0
 80054e6:	2120      	movs	r1, #32
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f000 f89f 	bl	800562c <I2C_WaitOnFlagUntilTimeout>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e01c      	b.n	8005532 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2220      	movs	r2, #32
 80054fe:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	3301      	adds	r3, #1
 8005504:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	429a      	cmp	r2, r3
 800550c:	f63f af3b 	bhi.w	8005386 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2220      	movs	r2, #32
 8005514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800551c:	f043 0220 	orr.w	r2, r3, #32
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e000      	b.n	8005532 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005530:	2302      	movs	r3, #2
  }
}
 8005532:	4618      	mov	r0, r3
 8005534:	3720      	adds	r7, #32
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af02      	add	r7, sp, #8
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	4608      	mov	r0, r1
 8005546:	4611      	mov	r1, r2
 8005548:	461a      	mov	r2, r3
 800554a:	4603      	mov	r3, r0
 800554c:	817b      	strh	r3, [r7, #10]
 800554e:	460b      	mov	r3, r1
 8005550:	813b      	strh	r3, [r7, #8]
 8005552:	4613      	mov	r3, r2
 8005554:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005556:	88fb      	ldrh	r3, [r7, #6]
 8005558:	b2da      	uxtb	r2, r3
 800555a:	8979      	ldrh	r1, [r7, #10]
 800555c:	4b20      	ldr	r3, [pc, #128]	; (80055e0 <I2C_RequestMemoryRead+0xa4>)
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	2300      	movs	r3, #0
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 fa0a 	bl	800597c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005568:	69fa      	ldr	r2, [r7, #28]
 800556a:	69b9      	ldr	r1, [r7, #24]
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 f89d 	bl	80056ac <I2C_WaitOnTXISFlagUntilTimeout>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e02c      	b.n	80055d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800557c:	88fb      	ldrh	r3, [r7, #6]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d105      	bne.n	800558e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005582:	893b      	ldrh	r3, [r7, #8]
 8005584:	b2da      	uxtb	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	629a      	str	r2, [r3, #40]	; 0x28
 800558c:	e015      	b.n	80055ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800558e:	893b      	ldrh	r3, [r7, #8]
 8005590:	0a1b      	lsrs	r3, r3, #8
 8005592:	b29b      	uxth	r3, r3
 8005594:	b2da      	uxtb	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800559c:	69fa      	ldr	r2, [r7, #28]
 800559e:	69b9      	ldr	r1, [r7, #24]
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 f883 	bl	80056ac <I2C_WaitOnTXISFlagUntilTimeout>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e012      	b.n	80055d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055b0:	893b      	ldrh	r3, [r7, #8]
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	2200      	movs	r2, #0
 80055c2:	2140      	movs	r1, #64	; 0x40
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f831 	bl	800562c <I2C_WaitOnFlagUntilTimeout>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e000      	b.n	80055d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	80002000 	.word	0x80002000

080055e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d103      	bne.n	8005602 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2200      	movs	r2, #0
 8005600:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b01      	cmp	r3, #1
 800560e:	d007      	beq.n	8005620 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699a      	ldr	r2, [r3, #24]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0201 	orr.w	r2, r2, #1
 800561e:	619a      	str	r2, [r3, #24]
  }
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	603b      	str	r3, [r7, #0]
 8005638:	4613      	mov	r3, r2
 800563a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800563c:	e022      	b.n	8005684 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005644:	d01e      	beq.n	8005684 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005646:	f7fd ff11 	bl	800346c <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	429a      	cmp	r2, r3
 8005654:	d302      	bcc.n	800565c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d113      	bne.n	8005684 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005660:	f043 0220 	orr.w	r2, r3, #32
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e00f      	b.n	80056a4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699a      	ldr	r2, [r3, #24]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	4013      	ands	r3, r2
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	429a      	cmp	r2, r3
 8005692:	bf0c      	ite	eq
 8005694:	2301      	moveq	r3, #1
 8005696:	2300      	movne	r3, #0
 8005698:	b2db      	uxtb	r3, r3
 800569a:	461a      	mov	r2, r3
 800569c:	79fb      	ldrb	r3, [r7, #7]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d0cd      	beq.n	800563e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056b8:	e02c      	b.n	8005714 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	68b9      	ldr	r1, [r7, #8]
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 f870 	bl	80057a4 <I2C_IsErrorOccurred>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e02a      	b.n	8005724 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056d4:	d01e      	beq.n	8005714 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056d6:	f7fd fec9 	bl	800346c <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d302      	bcc.n	80056ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d113      	bne.n	8005714 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f0:	f043 0220 	orr.w	r2, r3, #32
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e007      	b.n	8005724 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b02      	cmp	r3, #2
 8005720:	d1cb      	bne.n	80056ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005738:	e028      	b.n	800578c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	68b9      	ldr	r1, [r7, #8]
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 f830 	bl	80057a4 <I2C_IsErrorOccurred>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e026      	b.n	800579c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800574e:	f7fd fe8d 	bl	800346c <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	429a      	cmp	r2, r3
 800575c:	d302      	bcc.n	8005764 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d113      	bne.n	800578c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005768:	f043 0220 	orr.w	r2, r3, #32
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2220      	movs	r2, #32
 8005774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e007      	b.n	800579c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	f003 0320 	and.w	r3, r3, #32
 8005796:	2b20      	cmp	r3, #32
 8005798:	d1cf      	bne.n	800573a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b08a      	sub	sp, #40	; 0x28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80057be:	2300      	movs	r3, #0
 80057c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	f003 0310 	and.w	r3, r3, #16
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d075      	beq.n	80058bc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2210      	movs	r2, #16
 80057d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80057d8:	e056      	b.n	8005888 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057e0:	d052      	beq.n	8005888 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80057e2:	f7fd fe43 	bl	800346c <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d302      	bcc.n	80057f8 <I2C_IsErrorOccurred+0x54>
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d147      	bne.n	8005888 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005802:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800580a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800581a:	d12e      	bne.n	800587a <I2C_IsErrorOccurred+0xd6>
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005822:	d02a      	beq.n	800587a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005824:	7cfb      	ldrb	r3, [r7, #19]
 8005826:	2b20      	cmp	r3, #32
 8005828:	d027      	beq.n	800587a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005838:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800583a:	f7fd fe17 	bl	800346c <HAL_GetTick>
 800583e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005840:	e01b      	b.n	800587a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005842:	f7fd fe13 	bl	800346c <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	2b19      	cmp	r3, #25
 800584e:	d914      	bls.n	800587a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005854:	f043 0220 	orr.w	r2, r3, #32
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	f003 0320 	and.w	r3, r3, #32
 8005884:	2b20      	cmp	r3, #32
 8005886:	d1dc      	bne.n	8005842 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	f003 0320 	and.w	r3, r3, #32
 8005892:	2b20      	cmp	r3, #32
 8005894:	d003      	beq.n	800589e <I2C_IsErrorOccurred+0xfa>
 8005896:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800589a:	2b00      	cmp	r3, #0
 800589c:	d09d      	beq.n	80057da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800589e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d103      	bne.n	80058ae <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2220      	movs	r2, #32
 80058ac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	f043 0304 	orr.w	r3, r3, #4
 80058b4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00b      	beq.n	80058e6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	f043 0301 	orr.w	r3, r3, #1
 80058d4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00b      	beq.n	8005908 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80058f0:	6a3b      	ldr	r3, [r7, #32]
 80058f2:	f043 0308 	orr.w	r3, r3, #8
 80058f6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005900:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00b      	beq.n	800592a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	f043 0302 	orr.w	r3, r3, #2
 8005918:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005922:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800592a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800592e:	2b00      	cmp	r3, #0
 8005930:	d01c      	beq.n	800596c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f7ff fe56 	bl	80055e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6859      	ldr	r1, [r3, #4]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	4b0d      	ldr	r3, [pc, #52]	; (8005978 <I2C_IsErrorOccurred+0x1d4>)
 8005944:	400b      	ands	r3, r1
 8005946:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	431a      	orrs	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800596c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005970:	4618      	mov	r0, r3
 8005972:	3728      	adds	r7, #40	; 0x28
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	fe00e800 	.word	0xfe00e800

0800597c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	607b      	str	r3, [r7, #4]
 8005986:	460b      	mov	r3, r1
 8005988:	817b      	strh	r3, [r7, #10]
 800598a:	4613      	mov	r3, r2
 800598c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800598e:	897b      	ldrh	r3, [r7, #10]
 8005990:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005994:	7a7b      	ldrb	r3, [r7, #9]
 8005996:	041b      	lsls	r3, r3, #16
 8005998:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800599c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059aa:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	0d5b      	lsrs	r3, r3, #21
 80059b6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80059ba:	4b08      	ldr	r3, [pc, #32]	; (80059dc <I2C_TransferConfig+0x60>)
 80059bc:	430b      	orrs	r3, r1
 80059be:	43db      	mvns	r3, r3
 80059c0:	ea02 0103 	and.w	r1, r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80059ce:	bf00      	nop
 80059d0:	371c      	adds	r7, #28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	03ff63ff 	.word	0x03ff63ff

080059e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b20      	cmp	r3, #32
 80059f4:	d138      	bne.n	8005a68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d101      	bne.n	8005a04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a00:	2302      	movs	r3, #2
 8005a02:	e032      	b.n	8005a6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2224      	movs	r2, #36	; 0x24
 8005a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0201 	bic.w	r2, r2, #1
 8005a22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6819      	ldr	r1, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0201 	orr.w	r2, r2, #1
 8005a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a64:	2300      	movs	r3, #0
 8005a66:	e000      	b.n	8005a6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a68:	2302      	movs	r3, #2
  }
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b085      	sub	sp, #20
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b20      	cmp	r3, #32
 8005a8a:	d139      	bne.n	8005b00 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d101      	bne.n	8005a9a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a96:	2302      	movs	r3, #2
 8005a98:	e033      	b.n	8005b02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2224      	movs	r2, #36	; 0x24
 8005aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 0201 	bic.w	r2, r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005ac8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	021b      	lsls	r3, r3, #8
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0201 	orr.w	r2, r2, #1
 8005aea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2220      	movs	r2, #32
 8005af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	e000      	b.n	8005b02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b00:	2302      	movs	r3, #2
  }
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005b0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b10:	b08b      	sub	sp, #44	; 0x2c
 8005b12:	af06      	add	r7, sp, #24
 8005b14:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e0d7      	b.n	8005cd0 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d106      	bne.n	8005b3a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f00b fea1 	bl	801187c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2203      	movs	r2, #3
 8005b3e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f005 fc63 	bl	800b412 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	73fb      	strb	r3, [r7, #15]
 8005b50:	e04c      	b.n	8005bec <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
 8005b54:	6879      	ldr	r1, [r7, #4]
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	4613      	mov	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	440b      	add	r3, r1
 8005b62:	3301      	adds	r3, #1
 8005b64:	2201      	movs	r2, #1
 8005b66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	1c5a      	adds	r2, r3, #1
 8005b6e:	4613      	mov	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	00db      	lsls	r3, r3, #3
 8005b76:	440b      	add	r3, r1
 8005b78:	7bfa      	ldrb	r2, [r7, #15]
 8005b7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005b7c:	7bfa      	ldrb	r2, [r7, #15]
 8005b7e:	7bfb      	ldrb	r3, [r7, #15]
 8005b80:	b298      	uxth	r0, r3
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	4613      	mov	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	440b      	add	r3, r1
 8005b8e:	3336      	adds	r3, #54	; 0x36
 8005b90:	4602      	mov	r2, r0
 8005b92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	440b      	add	r3, r1
 8005ba4:	3303      	adds	r3, #3
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005baa:	7bfa      	ldrb	r2, [r7, #15]
 8005bac:	6879      	ldr	r1, [r7, #4]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	00db      	lsls	r3, r3, #3
 8005bb6:	440b      	add	r3, r1
 8005bb8:	3338      	adds	r3, #56	; 0x38
 8005bba:	2200      	movs	r2, #0
 8005bbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005bbe:	7bfa      	ldrb	r2, [r7, #15]
 8005bc0:	6879      	ldr	r1, [r7, #4]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	440b      	add	r3, r1
 8005bcc:	333c      	adds	r3, #60	; 0x3c
 8005bce:	2200      	movs	r2, #0
 8005bd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005bd2:	7bfa      	ldrb	r2, [r7, #15]
 8005bd4:	6879      	ldr	r1, [r7, #4]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	440b      	add	r3, r1
 8005be0:	3340      	adds	r3, #64	; 0x40
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
 8005be8:	3301      	adds	r3, #1
 8005bea:	73fb      	strb	r3, [r7, #15]
 8005bec:	7bfa      	ldrb	r2, [r7, #15]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d3ad      	bcc.n	8005b52 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	73fb      	strb	r3, [r7, #15]
 8005bfa:	e044      	b.n	8005c86 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005bfc:	7bfa      	ldrb	r2, [r7, #15]
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	4613      	mov	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	440b      	add	r3, r1
 8005c0a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005c0e:	2200      	movs	r2, #0
 8005c10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005c12:	7bfa      	ldrb	r2, [r7, #15]
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	4613      	mov	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4413      	add	r3, r2
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	440b      	add	r3, r1
 8005c20:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005c24:	7bfa      	ldrb	r2, [r7, #15]
 8005c26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005c28:	7bfa      	ldrb	r2, [r7, #15]
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	440b      	add	r3, r1
 8005c36:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005c3e:	7bfa      	ldrb	r2, [r7, #15]
 8005c40:	6879      	ldr	r1, [r7, #4]
 8005c42:	4613      	mov	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	00db      	lsls	r3, r3, #3
 8005c4a:	440b      	add	r3, r1
 8005c4c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005c50:	2200      	movs	r2, #0
 8005c52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005c54:	7bfa      	ldrb	r2, [r7, #15]
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4413      	add	r3, r2
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	440b      	add	r3, r1
 8005c62:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005c66:	2200      	movs	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c6a:	7bfa      	ldrb	r2, [r7, #15]
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	440b      	add	r3, r1
 8005c78:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
 8005c82:	3301      	adds	r3, #1
 8005c84:	73fb      	strb	r3, [r7, #15]
 8005c86:	7bfa      	ldrb	r2, [r7, #15]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d3b5      	bcc.n	8005bfc <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	603b      	str	r3, [r7, #0]
 8005c96:	687e      	ldr	r6, [r7, #4]
 8005c98:	466d      	mov	r5, sp
 8005c9a:	f106 0410 	add.w	r4, r6, #16
 8005c9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ca0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	602b      	str	r3, [r5, #0]
 8005ca6:	1d33      	adds	r3, r6, #4
 8005ca8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005caa:	6838      	ldr	r0, [r7, #0]
 8005cac:	f005 fbcc 	bl	800b448 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	69db      	ldr	r3, [r3, #28]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d102      	bne.n	8005cce <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f001 fc29 	bl	8007520 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005cd8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d101      	bne.n	8005cee <HAL_PCD_Start+0x16>
 8005cea:	2302      	movs	r3, #2
 8005cec:	e012      	b.n	8005d14 <HAL_PCD_Start+0x3c>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f005 fb72 	bl	800b3e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f007 fd8b 	bl	800d820 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3708      	adds	r7, #8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f007 fd90 	bl	800d84e <USB_ReadInterrupts>
 8005d2e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fb26 	bl	800638c <PCD_EP_ISR_Handler>

    return;
 8005d40:	e110      	b.n	8005f64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d013      	beq.n	8005d74 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d5e:	b292      	uxth	r2, r2
 8005d60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f00b fe1a 	bl	801199e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f8fc 	bl	8005f6a <HAL_PCD_SetAddress>

    return;
 8005d72:	e0f7      	b.n	8005f64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00c      	beq.n	8005d98 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d90:	b292      	uxth	r2, r2
 8005d92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005d96:	e0e5      	b.n	8005f64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00c      	beq.n	8005dbc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005db4:	b292      	uxth	r2, r2
 8005db6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005dba:	e0d3      	b.n	8005f64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d034      	beq.n	8005e30 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0204 	bic.w	r2, r2, #4
 8005dd8:	b292      	uxth	r2, r2
 8005dda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0208 	bic.w	r2, r2, #8
 8005df0:	b292      	uxth	r2, r2
 8005df2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d107      	bne.n	8005e10 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005e08:	2100      	movs	r1, #0
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f00b ffbc 	bl	8011d88 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f00b fdfd 	bl	8011a10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e28:	b292      	uxth	r2, r2
 8005e2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005e2e:	e099      	b.n	8005f64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d027      	beq.n	8005e8a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f042 0208 	orr.w	r2, r2, #8
 8005e4c:	b292      	uxth	r2, r2
 8005e4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e64:	b292      	uxth	r2, r2
 8005e66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f042 0204 	orr.w	r2, r2, #4
 8005e7c:	b292      	uxth	r2, r2
 8005e7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f00b fdaa 	bl	80119dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005e88:	e06c      	b.n	8005f64 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d040      	beq.n	8005f16 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ea6:	b292      	uxth	r2, r2
 8005ea8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d12b      	bne.n	8005f0e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f042 0204 	orr.w	r2, r2, #4
 8005ec8:	b292      	uxth	r2, r2
 8005eca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f042 0208 	orr.w	r2, r2, #8
 8005ee0:	b292      	uxth	r2, r2
 8005ee2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	089b      	lsrs	r3, r3, #2
 8005efa:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005f04:	2101      	movs	r1, #1
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f00b ff3e 	bl	8011d88 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005f0c:	e02a      	b.n	8005f64 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f00b fd64 	bl	80119dc <HAL_PCD_SuspendCallback>
    return;
 8005f14:	e026      	b.n	8005f64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00f      	beq.n	8005f40 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005f32:	b292      	uxth	r2, r2
 8005f34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f00b fd22 	bl	8011982 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005f3e:	e011      	b.n	8005f64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00c      	beq.n	8005f64 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f5c:	b292      	uxth	r2, r2
 8005f5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005f62:	bf00      	nop
  }
}
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b082      	sub	sp, #8
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	460b      	mov	r3, r1
 8005f74:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <HAL_PCD_SetAddress+0x1a>
 8005f80:	2302      	movs	r3, #2
 8005f82:	e013      	b.n	8005fac <HAL_PCD_SetAddress+0x42>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	78fa      	ldrb	r2, [r7, #3]
 8005f90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	78fa      	ldrb	r2, [r7, #3]
 8005f9a:	4611      	mov	r1, r2
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f007 fc2b 	bl	800d7f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	4608      	mov	r0, r1
 8005fbe:	4611      	mov	r1, r2
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	70fb      	strb	r3, [r7, #3]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	803b      	strh	r3, [r7, #0]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005fd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	da0e      	bge.n	8005ff8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fda:	78fb      	ldrb	r3, [r7, #3]
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	00db      	lsls	r3, r3, #3
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	4413      	add	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	705a      	strb	r2, [r3, #1]
 8005ff6:	e00e      	b.n	8006016 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ff8:	78fb      	ldrb	r3, [r7, #3]
 8005ffa:	f003 0207 	and.w	r2, r3, #7
 8005ffe:	4613      	mov	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	4413      	add	r3, r2
 800600e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006016:	78fb      	ldrb	r3, [r7, #3]
 8006018:	f003 0307 	and.w	r3, r3, #7
 800601c:	b2da      	uxtb	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006022:	883a      	ldrh	r2, [r7, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	78ba      	ldrb	r2, [r7, #2]
 800602c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	785b      	ldrb	r3, [r3, #1]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d004      	beq.n	8006040 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	b29a      	uxth	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006040:	78bb      	ldrb	r3, [r7, #2]
 8006042:	2b02      	cmp	r3, #2
 8006044:	d102      	bne.n	800604c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006052:	2b01      	cmp	r3, #1
 8006054:	d101      	bne.n	800605a <HAL_PCD_EP_Open+0xa6>
 8006056:	2302      	movs	r3, #2
 8006058:	e00e      	b.n	8006078 <HAL_PCD_EP_Open+0xc4>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68f9      	ldr	r1, [r7, #12]
 8006068:	4618      	mov	r0, r3
 800606a:	f005 fa0f 	bl	800b48c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8006076:	7afb      	ldrb	r3, [r7, #11]
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	460b      	mov	r3, r1
 800608a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800608c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006090:	2b00      	cmp	r3, #0
 8006092:	da0e      	bge.n	80060b2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006094:	78fb      	ldrb	r3, [r7, #3]
 8006096:	f003 0307 	and.w	r3, r3, #7
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	4613      	mov	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	4413      	add	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2201      	movs	r2, #1
 80060ae:	705a      	strb	r2, [r3, #1]
 80060b0:	e00e      	b.n	80060d0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060b2:	78fb      	ldrb	r3, [r7, #3]
 80060b4:	f003 0207 	and.w	r2, r3, #7
 80060b8:	4613      	mov	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	4413      	add	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80060d0:	78fb      	ldrb	r3, [r7, #3]
 80060d2:	f003 0307 	and.w	r3, r3, #7
 80060d6:	b2da      	uxtb	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d101      	bne.n	80060ea <HAL_PCD_EP_Close+0x6a>
 80060e6:	2302      	movs	r3, #2
 80060e8:	e00e      	b.n	8006108 <HAL_PCD_EP_Close+0x88>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68f9      	ldr	r1, [r7, #12]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f005 fd5b 	bl	800bbb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	607a      	str	r2, [r7, #4]
 800611a:	603b      	str	r3, [r7, #0]
 800611c:	460b      	mov	r3, r1
 800611e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006120:	7afb      	ldrb	r3, [r7, #11]
 8006122:	f003 0207 	and.w	r2, r3, #7
 8006126:	4613      	mov	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	00db      	lsls	r3, r3, #3
 800612e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	4413      	add	r3, r2
 8006136:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	2200      	movs	r2, #0
 8006148:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2200      	movs	r2, #0
 800614e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006150:	7afb      	ldrb	r3, [r7, #11]
 8006152:	f003 0307 	and.w	r3, r3, #7
 8006156:	b2da      	uxtb	r2, r3
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800615c:	7afb      	ldrb	r3, [r7, #11]
 800615e:	f003 0307 	and.w	r3, r3, #7
 8006162:	2b00      	cmp	r3, #0
 8006164:	d106      	bne.n	8006174 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6979      	ldr	r1, [r7, #20]
 800616c:	4618      	mov	r0, r3
 800616e:	f005 ff0e 	bl	800bf8e <USB_EPStartXfer>
 8006172:	e005      	b.n	8006180 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6979      	ldr	r1, [r7, #20]
 800617a:	4618      	mov	r0, r3
 800617c:	f005 ff07 	bl	800bf8e <USB_EPStartXfer>
  }

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3718      	adds	r7, #24
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	460b      	mov	r3, r1
 8006194:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006196:	78fb      	ldrb	r3, [r7, #3]
 8006198:	f003 0207 	and.w	r2, r3, #7
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	00db      	lsls	r3, r3, #3
 80061a6:	440b      	add	r3, r1
 80061a8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80061ac:	681b      	ldr	r3, [r3, #0]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b086      	sub	sp, #24
 80061be:	af00      	add	r7, sp, #0
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	603b      	str	r3, [r7, #0]
 80061c6:	460b      	mov	r3, r1
 80061c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061ca:	7afb      	ldrb	r3, [r7, #11]
 80061cc:	f003 0307 	and.w	r3, r3, #7
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	4613      	mov	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	4413      	add	r3, r2
 80061de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	2200      	movs	r2, #0
 80061fe:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	2201      	movs	r2, #1
 8006204:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006206:	7afb      	ldrb	r3, [r7, #11]
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	b2da      	uxtb	r2, r3
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006212:	7afb      	ldrb	r3, [r7, #11]
 8006214:	f003 0307 	and.w	r3, r3, #7
 8006218:	2b00      	cmp	r3, #0
 800621a:	d106      	bne.n	800622a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6979      	ldr	r1, [r7, #20]
 8006222:	4618      	mov	r0, r3
 8006224:	f005 feb3 	bl	800bf8e <USB_EPStartXfer>
 8006228:	e005      	b.n	8006236 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6979      	ldr	r1, [r7, #20]
 8006230:	4618      	mov	r0, r3
 8006232:	f005 feac 	bl	800bf8e <USB_EPStartXfer>
  }

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	460b      	mov	r3, r1
 800624a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800624c:	78fb      	ldrb	r3, [r7, #3]
 800624e:	f003 0207 	and.w	r2, r3, #7
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	429a      	cmp	r2, r3
 8006258:	d901      	bls.n	800625e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e03e      	b.n	80062dc <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800625e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006262:	2b00      	cmp	r3, #0
 8006264:	da0e      	bge.n	8006284 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006266:	78fb      	ldrb	r3, [r7, #3]
 8006268:	f003 0307 	and.w	r3, r3, #7
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	4613      	mov	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	00db      	lsls	r3, r3, #3
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	4413      	add	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2201      	movs	r2, #1
 8006280:	705a      	strb	r2, [r3, #1]
 8006282:	e00c      	b.n	800629e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006284:	78fa      	ldrb	r2, [r7, #3]
 8006286:	4613      	mov	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	4413      	add	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2201      	movs	r2, #1
 80062a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	f003 0307 	and.w	r3, r3, #7
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d101      	bne.n	80062be <HAL_PCD_EP_SetStall+0x7e>
 80062ba:	2302      	movs	r3, #2
 80062bc:	e00e      	b.n	80062dc <HAL_PCD_EP_SetStall+0x9c>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68f9      	ldr	r1, [r7, #12]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f007 f994 	bl	800d5fa <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	460b      	mov	r3, r1
 80062ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80062f0:	78fb      	ldrb	r3, [r7, #3]
 80062f2:	f003 020f 	and.w	r2, r3, #15
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d901      	bls.n	8006302 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e040      	b.n	8006384 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006302:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006306:	2b00      	cmp	r3, #0
 8006308:	da0e      	bge.n	8006328 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800630a:	78fb      	ldrb	r3, [r7, #3]
 800630c:	f003 0307 	and.w	r3, r3, #7
 8006310:	1c5a      	adds	r2, r3, #1
 8006312:	4613      	mov	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	4413      	add	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2201      	movs	r2, #1
 8006324:	705a      	strb	r2, [r3, #1]
 8006326:	e00e      	b.n	8006346 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	f003 0207 	and.w	r2, r3, #7
 800632e:	4613      	mov	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	4413      	add	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800634c:	78fb      	ldrb	r3, [r7, #3]
 800634e:	f003 0307 	and.w	r3, r3, #7
 8006352:	b2da      	uxtb	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800635e:	2b01      	cmp	r3, #1
 8006360:	d101      	bne.n	8006366 <HAL_PCD_EP_ClrStall+0x82>
 8006362:	2302      	movs	r3, #2
 8006364:	e00e      	b.n	8006384 <HAL_PCD_EP_ClrStall+0xa0>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68f9      	ldr	r1, [r7, #12]
 8006374:	4618      	mov	r0, r3
 8006376:	f007 f991 	bl	800d69c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b096      	sub	sp, #88	; 0x58
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006394:	e39c      	b.n	8006ad0 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800639e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80063a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	f003 030f 	and.w	r3, r3, #15
 80063ac:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80063b0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f040 815e 	bne.w	8006676 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80063ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80063be:	f003 0310 	and.w	r3, r3, #16
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d150      	bne.n	8006468 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80063d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d6:	81fb      	strh	r3, [r7, #14]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	89fb      	ldrh	r3, [r7, #14]
 80063de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	3328      	adds	r3, #40	; 0x28
 80063ee:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	461a      	mov	r2, r3
 80063fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	00db      	lsls	r3, r3, #3
 8006402:	4413      	add	r3, r2
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	6812      	ldr	r2, [r2, #0]
 8006408:	4413      	add	r3, r2
 800640a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006416:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800641a:	695a      	ldr	r2, [r3, #20]
 800641c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800641e:	69db      	ldr	r3, [r3, #28]
 8006420:	441a      	add	r2, r3
 8006422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006424:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006426:	2100      	movs	r1, #0
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f00b fa90 	bl	801194e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 834a 	beq.w	8006ad0 <PCD_EP_ISR_Handler+0x744>
 800643c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	2b00      	cmp	r3, #0
 8006442:	f040 8345 	bne.w	8006ad0 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800644c:	b2db      	uxtb	r3, r3
 800644e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006452:	b2da      	uxtb	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	b292      	uxth	r2, r2
 800645a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006466:	e333      	b.n	8006ad0 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800646e:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800647a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800647e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006482:	2b00      	cmp	r3, #0
 8006484:	d032      	beq.n	80064ec <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800648e:	b29b      	uxth	r3, r3
 8006490:	461a      	mov	r2, r3
 8006492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	4413      	add	r3, r2
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	6812      	ldr	r2, [r2, #0]
 800649e:	4413      	add	r3, r2
 80064a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80064aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ac:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6818      	ldr	r0, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80064b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ba:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80064bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064be:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	f007 fa16 	bl	800d8f2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	881b      	ldrh	r3, [r3, #0]
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	f640 738f 	movw	r3, #3983	; 0xf8f
 80064d2:	4013      	ands	r3, r2
 80064d4:	823b      	strh	r3, [r7, #16]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	8a3a      	ldrh	r2, [r7, #16]
 80064dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064e0:	b292      	uxth	r2, r2
 80064e2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f00b fa05 	bl	80118f4 <HAL_PCD_SetupStageCallback>
 80064ea:	e2f1      	b.n	8006ad0 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80064ec:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f280 82ed 	bge.w	8006ad0 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006502:	4013      	ands	r3, r2
 8006504:	83fb      	strh	r3, [r7, #30]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	8bfa      	ldrh	r2, [r7, #30]
 800650c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006510:	b292      	uxth	r2, r2
 8006512:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800651c:	b29b      	uxth	r3, r3
 800651e:	461a      	mov	r2, r3
 8006520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	00db      	lsls	r3, r3, #3
 8006526:	4413      	add	r3, r2
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	6812      	ldr	r2, [r2, #0]
 800652c:	4413      	add	r3, r2
 800652e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006532:	881b      	ldrh	r3, [r3, #0]
 8006534:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800653a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800653c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d019      	beq.n	8006578 <PCD_EP_ISR_Handler+0x1ec>
 8006544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d015      	beq.n	8006578 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6818      	ldr	r0, [r3, #0]
 8006550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006552:	6959      	ldr	r1, [r3, #20]
 8006554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006556:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800655a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800655c:	b29b      	uxth	r3, r3
 800655e:	f007 f9c8 	bl	800d8f2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006564:	695a      	ldr	r2, [r3, #20]
 8006566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	441a      	add	r2, r3
 800656c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800656e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006570:	2100      	movs	r1, #0
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f00b f9d0 	bl	8011918 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	b29b      	uxth	r3, r3
 8006580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006584:	2b00      	cmp	r3, #0
 8006586:	f040 82a3 	bne.w	8006ad0 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	61bb      	str	r3, [r7, #24]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006598:	b29b      	uxth	r3, r3
 800659a:	461a      	mov	r2, r3
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	4413      	add	r3, r2
 80065a0:	61bb      	str	r3, [r7, #24]
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	2b3e      	cmp	r3, #62	; 0x3e
 80065b0:	d918      	bls.n	80065e4 <PCD_EP_ISR_Handler+0x258>
 80065b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	095b      	lsrs	r3, r3, #5
 80065b8:	647b      	str	r3, [r7, #68]	; 0x44
 80065ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	f003 031f 	and.w	r3, r3, #31
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d102      	bne.n	80065cc <PCD_EP_ISR_Handler+0x240>
 80065c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065c8:	3b01      	subs	r3, #1
 80065ca:	647b      	str	r3, [r7, #68]	; 0x44
 80065cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	029b      	lsls	r3, r3, #10
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065dc:	b29a      	uxth	r2, r3
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	801a      	strh	r2, [r3, #0]
 80065e2:	e029      	b.n	8006638 <PCD_EP_ISR_Handler+0x2ac>
 80065e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d112      	bne.n	8006612 <PCD_EP_ISR_Handler+0x286>
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	801a      	strh	r2, [r3, #0]
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	b29b      	uxth	r3, r3
 8006602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800660a:	b29a      	uxth	r2, r3
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	801a      	strh	r2, [r3, #0]
 8006610:	e012      	b.n	8006638 <PCD_EP_ISR_Handler+0x2ac>
 8006612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	085b      	lsrs	r3, r3, #1
 8006618:	647b      	str	r3, [r7, #68]	; 0x44
 800661a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <PCD_EP_ISR_Handler+0x2a0>
 8006626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006628:	3301      	adds	r3, #1
 800662a:	647b      	str	r3, [r7, #68]	; 0x44
 800662c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800662e:	b29b      	uxth	r3, r3
 8006630:	029b      	lsls	r3, r3, #10
 8006632:	b29a      	uxth	r2, r3
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	b29b      	uxth	r3, r3
 8006640:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006648:	827b      	strh	r3, [r7, #18]
 800664a:	8a7b      	ldrh	r3, [r7, #18]
 800664c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006650:	827b      	strh	r3, [r7, #18]
 8006652:	8a7b      	ldrh	r3, [r7, #18]
 8006654:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006658:	827b      	strh	r3, [r7, #18]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	8a7b      	ldrh	r3, [r7, #18]
 8006660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800666c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006670:	b29b      	uxth	r3, r3
 8006672:	8013      	strh	r3, [r2, #0]
 8006674:	e22c      	b.n	8006ad0 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800668a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800668e:	2b00      	cmp	r3, #0
 8006690:	f280 80f6 	bge.w	8006880 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	461a      	mov	r2, r3
 800669a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80066aa:	4013      	ands	r3, r2
 80066ac:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	461a      	mov	r2, r3
 80066b6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80066c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80066c6:	b292      	uxth	r2, r2
 80066c8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80066ca:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80066ce:	4613      	mov	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	00db      	lsls	r3, r3, #3
 80066d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	4413      	add	r3, r2
 80066de:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80066e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066e2:	7b1b      	ldrb	r3, [r3, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d123      	bne.n	8006730 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	461a      	mov	r2, r3
 80066f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	00db      	lsls	r3, r3, #3
 80066fa:	4413      	add	r3, r2
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	6812      	ldr	r2, [r2, #0]
 8006700:	4413      	add	r3, r2
 8006702:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800670c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8006710:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 808e 	beq.w	8006836 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6818      	ldr	r0, [r3, #0]
 800671e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006720:	6959      	ldr	r1, [r3, #20]
 8006722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006724:	88da      	ldrh	r2, [r3, #6]
 8006726:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800672a:	f007 f8e2 	bl	800d8f2 <USB_ReadPMA>
 800672e:	e082      	b.n	8006836 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006732:	78db      	ldrb	r3, [r3, #3]
 8006734:	2b02      	cmp	r3, #2
 8006736:	d10a      	bne.n	800674e <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006738:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800673c:	461a      	mov	r2, r3
 800673e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f9d3 	bl	8006aec <HAL_PCD_EP_DB_Receive>
 8006746:	4603      	mov	r3, r0
 8006748:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800674c:	e073      	b.n	8006836 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	b29b      	uxth	r3, r3
 8006760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006768:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	461a      	mov	r2, r3
 8006772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	441a      	add	r2, r3
 800677a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800677e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006782:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800678a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800678e:	b29b      	uxth	r3, r3
 8006790:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	881b      	ldrh	r3, [r3, #0]
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d022      	beq.n	80067f2 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	461a      	mov	r2, r3
 80067b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	4413      	add	r3, r2
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	6812      	ldr	r2, [r2, #0]
 80067c4:	4413      	add	r3, r2
 80067c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067ca:	881b      	ldrh	r3, [r3, #0]
 80067cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067d0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80067d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d02c      	beq.n	8006836 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6818      	ldr	r0, [r3, #0]
 80067e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e2:	6959      	ldr	r1, [r3, #20]
 80067e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e6:	891a      	ldrh	r2, [r3, #8]
 80067e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80067ec:	f007 f881 	bl	800d8f2 <USB_ReadPMA>
 80067f0:	e021      	b.n	8006836 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	461a      	mov	r2, r3
 80067fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	00db      	lsls	r3, r3, #3
 8006804:	4413      	add	r3, r2
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	6812      	ldr	r2, [r2, #0]
 800680a:	4413      	add	r3, r2
 800680c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006816:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800681a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800681e:	2b00      	cmp	r3, #0
 8006820:	d009      	beq.n	8006836 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6818      	ldr	r0, [r3, #0]
 8006826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006828:	6959      	ldr	r1, [r3, #20]
 800682a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800682c:	895a      	ldrh	r2, [r3, #10]
 800682e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006832:	f007 f85e 	bl	800d8f2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006838:	69da      	ldr	r2, [r3, #28]
 800683a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800683e:	441a      	add	r2, r3
 8006840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006842:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006846:	695a      	ldr	r2, [r3, #20]
 8006848:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800684c:	441a      	add	r2, r3
 800684e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006850:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d005      	beq.n	8006866 <PCD_EP_ISR_Handler+0x4da>
 800685a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800685e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	429a      	cmp	r2, r3
 8006864:	d206      	bcs.n	8006874 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f00b f853 	bl	8011918 <HAL_PCD_DataOutStageCallback>
 8006872:	e005      	b.n	8006880 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800687a:	4618      	mov	r0, r3
 800687c:	f005 fb87 	bl	800bf8e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006880:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 8121 	beq.w	8006ad0 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800688e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	4613      	mov	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	00db      	lsls	r3, r3, #3
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	4413      	add	r3, r2
 80068a0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80068b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	461a      	mov	r2, r3
 80068c6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	441a      	add	r2, r3
 80068ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80068d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068da:	b29b      	uxth	r3, r3
 80068dc:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80068de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e0:	78db      	ldrb	r3, [r3, #3]
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	f000 80a2 	beq.w	8006a2c <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80068e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ea:	2200      	movs	r2, #0
 80068ec:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80068ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f0:	7b1b      	ldrb	r3, [r3, #12]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 8093 	beq.w	8006a1e <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80068f8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80068fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006900:	2b00      	cmp	r3, #0
 8006902:	d046      	beq.n	8006992 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006906:	785b      	ldrb	r3, [r3, #1]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d126      	bne.n	800695a <PCD_EP_ISR_Handler+0x5ce>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	627b      	str	r3, [r7, #36]	; 0x24
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800691a:	b29b      	uxth	r3, r3
 800691c:	461a      	mov	r2, r3
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	4413      	add	r3, r2
 8006922:	627b      	str	r3, [r7, #36]	; 0x24
 8006924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	00da      	lsls	r2, r3, #3
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	4413      	add	r3, r2
 800692e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006932:	623b      	str	r3, [r7, #32]
 8006934:	6a3b      	ldr	r3, [r7, #32]
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	b29b      	uxth	r3, r3
 800693a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800693e:	b29a      	uxth	r2, r3
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	801a      	strh	r2, [r3, #0]
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	b29b      	uxth	r3, r3
 800694a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800694e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006952:	b29a      	uxth	r2, r3
 8006954:	6a3b      	ldr	r3, [r7, #32]
 8006956:	801a      	strh	r2, [r3, #0]
 8006958:	e061      	b.n	8006a1e <PCD_EP_ISR_Handler+0x692>
 800695a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800695c:	785b      	ldrb	r3, [r3, #1]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d15d      	bne.n	8006a1e <PCD_EP_ISR_Handler+0x692>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006970:	b29b      	uxth	r3, r3
 8006972:	461a      	mov	r2, r3
 8006974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006976:	4413      	add	r3, r2
 8006978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800697a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	00da      	lsls	r2, r3, #3
 8006980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006982:	4413      	add	r3, r2
 8006984:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006988:	62bb      	str	r3, [r7, #40]	; 0x28
 800698a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698c:	2200      	movs	r2, #0
 800698e:	801a      	strh	r2, [r3, #0]
 8006990:	e045      	b.n	8006a1e <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800699a:	785b      	ldrb	r3, [r3, #1]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d126      	bne.n	80069ee <PCD_EP_ISR_Handler+0x662>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	637b      	str	r3, [r7, #52]	; 0x34
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	461a      	mov	r2, r3
 80069b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b4:	4413      	add	r3, r2
 80069b6:	637b      	str	r3, [r7, #52]	; 0x34
 80069b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	00da      	lsls	r2, r3, #3
 80069be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c0:	4413      	add	r3, r2
 80069c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069c6:	633b      	str	r3, [r7, #48]	; 0x30
 80069c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d6:	801a      	strh	r2, [r3, #0]
 80069d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069da:	881b      	ldrh	r3, [r3, #0]
 80069dc:	b29b      	uxth	r3, r3
 80069de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ea:	801a      	strh	r2, [r3, #0]
 80069ec:	e017      	b.n	8006a1e <PCD_EP_ISR_Handler+0x692>
 80069ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069f0:	785b      	ldrb	r3, [r3, #1]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d113      	bne.n	8006a1e <PCD_EP_ISR_Handler+0x692>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	461a      	mov	r2, r3
 8006a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a04:	4413      	add	r3, r2
 8006a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	00da      	lsls	r2, r3, #3
 8006a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a10:	4413      	add	r3, r2
 8006a12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a16:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	4619      	mov	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f00a ff92 	bl	801194e <HAL_PCD_DataInStageCallback>
 8006a2a:	e051      	b.n	8006ad0 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006a2c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d144      	bne.n	8006ac2 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	461a      	mov	r2, r3
 8006a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	00db      	lsls	r3, r3, #3
 8006a4a:	4413      	add	r3, r2
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	6812      	ldr	r2, [r2, #0]
 8006a50:	4413      	add	r3, r2
 8006a52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a56:	881b      	ldrh	r3, [r3, #0]
 8006a58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a5c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a62:	699a      	ldr	r2, [r3, #24]
 8006a64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d907      	bls.n	8006a7c <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8006a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a6e:	699a      	ldr	r2, [r3, #24]
 8006a70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006a74:	1ad2      	subs	r2, r2, r3
 8006a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a78:	619a      	str	r2, [r3, #24]
 8006a7a:	e002      	b.n	8006a82 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8006a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a7e:	2200      	movs	r2, #0
 8006a80:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d106      	bne.n	8006a98 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f00a ff5c 	bl	801194e <HAL_PCD_DataInStageCallback>
 8006a96:	e01b      	b.n	8006ad0 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a9a:	695a      	ldr	r2, [r3, #20]
 8006a9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006aa0:	441a      	add	r2, r3
 8006aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa8:	69da      	ldr	r2, [r3, #28]
 8006aaa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006aae:	441a      	add	r2, r3
 8006ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ab2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006aba:	4618      	mov	r0, r3
 8006abc:	f005 fa67 	bl	800bf8e <USB_EPStartXfer>
 8006ac0:	e006      	b.n	8006ad0 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006ac2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f917 	bl	8006cfe <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	b21b      	sxth	r3, r3
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f6ff ac5a 	blt.w	8006396 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3758      	adds	r7, #88	; 0x58
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b088      	sub	sp, #32
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	4613      	mov	r3, r2
 8006af8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006afa:	88fb      	ldrh	r3, [r7, #6]
 8006afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d07c      	beq.n	8006bfe <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	461a      	mov	r2, r3
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	4413      	add	r3, r2
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	6812      	ldr	r2, [r2, #0]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b28:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	699a      	ldr	r2, [r3, #24]
 8006b2e:	8b7b      	ldrh	r3, [r7, #26]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d306      	bcc.n	8006b42 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	699a      	ldr	r2, [r3, #24]
 8006b38:	8b7b      	ldrh	r3, [r7, #26]
 8006b3a:	1ad2      	subs	r2, r2, r3
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	619a      	str	r2, [r3, #24]
 8006b40:	e002      	b.n	8006b48 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2200      	movs	r2, #0
 8006b46:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d123      	bne.n	8006b98 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	461a      	mov	r2, r3
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	881b      	ldrh	r3, [r3, #0]
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b6a:	833b      	strh	r3, [r7, #24]
 8006b6c:	8b3b      	ldrh	r3, [r7, #24]
 8006b6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b72:	833b      	strh	r3, [r7, #24]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	441a      	add	r2, r3
 8006b82:	8b3b      	ldrh	r3, [r7, #24]
 8006b84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006b98:	88fb      	ldrh	r3, [r7, #6]
 8006b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d01f      	beq.n	8006be2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bbc:	82fb      	strh	r3, [r7, #22]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	441a      	add	r2, r3
 8006bcc:	8afb      	ldrh	r3, [r7, #22]
 8006bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006be2:	8b7b      	ldrh	r3, [r7, #26]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 8085 	beq.w	8006cf4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6818      	ldr	r0, [r3, #0]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	6959      	ldr	r1, [r3, #20]
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	891a      	ldrh	r2, [r3, #8]
 8006bf6:	8b7b      	ldrh	r3, [r7, #26]
 8006bf8:	f006 fe7b 	bl	800d8f2 <USB_ReadPMA>
 8006bfc:	e07a      	b.n	8006cf4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	461a      	mov	r2, r3
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	00db      	lsls	r3, r3, #3
 8006c10:	4413      	add	r3, r2
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	6812      	ldr	r2, [r2, #0]
 8006c16:	4413      	add	r3, r2
 8006c18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c22:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	699a      	ldr	r2, [r3, #24]
 8006c28:	8b7b      	ldrh	r3, [r7, #26]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d306      	bcc.n	8006c3c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	699a      	ldr	r2, [r3, #24]
 8006c32:	8b7b      	ldrh	r3, [r7, #26]
 8006c34:	1ad2      	subs	r2, r2, r3
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	619a      	str	r2, [r3, #24]
 8006c3a:	e002      	b.n	8006c42 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d123      	bne.n	8006c92 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c64:	83fb      	strh	r3, [r7, #30]
 8006c66:	8bfb      	ldrh	r3, [r7, #30]
 8006c68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c6c:	83fb      	strh	r3, [r7, #30]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	441a      	add	r2, r3
 8006c7c:	8bfb      	ldrh	r3, [r7, #30]
 8006c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006c92:	88fb      	ldrh	r3, [r7, #6]
 8006c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d11f      	bne.n	8006cdc <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb6:	83bb      	strh	r3, [r7, #28]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	441a      	add	r2, r3
 8006cc6:	8bbb      	ldrh	r3, [r7, #28]
 8006cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006cdc:	8b7b      	ldrh	r3, [r7, #26]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d008      	beq.n	8006cf4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6818      	ldr	r0, [r3, #0]
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	6959      	ldr	r1, [r3, #20]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	895a      	ldrh	r2, [r3, #10]
 8006cee:	8b7b      	ldrh	r3, [r7, #26]
 8006cf0:	f006 fdff 	bl	800d8f2 <USB_ReadPMA>
    }
  }

  return count;
 8006cf4:	8b7b      	ldrh	r3, [r7, #26]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3720      	adds	r7, #32
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b0a2      	sub	sp, #136	; 0x88
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	60f8      	str	r0, [r7, #12]
 8006d06:	60b9      	str	r1, [r7, #8]
 8006d08:	4613      	mov	r3, r2
 8006d0a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006d0c:	88fb      	ldrh	r3, [r7, #6]
 8006d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f000 81c5 	beq.w	80070a2 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	461a      	mov	r2, r3
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	00db      	lsls	r3, r3, #3
 8006d2a:	4413      	add	r3, r2
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	6812      	ldr	r2, [r2, #0]
 8006d30:	4413      	add	r3, r2
 8006d32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d36:	881b      	ldrh	r3, [r3, #0]
 8006d38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d3c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	699a      	ldr	r2, [r3, #24]
 8006d44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d907      	bls.n	8006d5c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	699a      	ldr	r2, [r3, #24]
 8006d50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006d54:	1ad2      	subs	r2, r2, r3
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	619a      	str	r2, [r3, #24]
 8006d5a:	e002      	b.n	8006d62 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f040 80b9 	bne.w	8006ede <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	785b      	ldrb	r3, [r3, #1]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d126      	bne.n	8006dc2 <HAL_PCD_EP_DB_Transmit+0xc4>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	461a      	mov	r2, r3
 8006d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d88:	4413      	add	r3, r2
 8006d8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	00da      	lsls	r2, r3, #3
 8006d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d94:	4413      	add	r3, r2
 8006d96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	801a      	strh	r2, [r3, #0]
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	801a      	strh	r2, [r3, #0]
 8006dc0:	e01a      	b.n	8006df8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	785b      	ldrb	r3, [r3, #1]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d116      	bne.n	8006df8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	633b      	str	r3, [r7, #48]	; 0x30
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	461a      	mov	r2, r3
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dde:	4413      	add	r3, r2
 8006de0:	633b      	str	r3, [r7, #48]	; 0x30
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	00da      	lsls	r2, r3, #3
 8006de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dea:	4413      	add	r3, r2
 8006dec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df4:	2200      	movs	r2, #0
 8006df6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	623b      	str	r3, [r7, #32]
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	785b      	ldrb	r3, [r3, #1]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d126      	bne.n	8006e54 <HAL_PCD_EP_DB_Transmit+0x156>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	61bb      	str	r3, [r7, #24]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	461a      	mov	r2, r3
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	61bb      	str	r3, [r7, #24]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	00da      	lsls	r2, r3, #3
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	4413      	add	r3, r2
 8006e28:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e2c:	617b      	str	r3, [r7, #20]
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	881b      	ldrh	r3, [r3, #0]
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	801a      	strh	r2, [r3, #0]
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	881b      	ldrh	r3, [r3, #0]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	801a      	strh	r2, [r3, #0]
 8006e52:	e017      	b.n	8006e84 <HAL_PCD_EP_DB_Transmit+0x186>
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	785b      	ldrb	r3, [r3, #1]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d113      	bne.n	8006e84 <HAL_PCD_EP_DB_Transmit+0x186>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	461a      	mov	r2, r3
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	623b      	str	r3, [r7, #32]
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	00da      	lsls	r2, r3, #3
 8006e74:	6a3b      	ldr	r3, [r7, #32]
 8006e76:	4413      	add	r3, r2
 8006e78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e7c:	61fb      	str	r3, [r7, #28]
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	2200      	movs	r2, #0
 8006e82:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	4619      	mov	r1, r3
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f00a fd5f 	bl	801194e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006e90:	88fb      	ldrh	r3, [r7, #6]
 8006e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 82d2 	beq.w	8007440 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb6:	827b      	strh	r3, [r7, #18]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	441a      	add	r2, r3
 8006ec6:	8a7b      	ldrh	r3, [r7, #18]
 8006ec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ecc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ed0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	8013      	strh	r3, [r2, #0]
 8006edc:	e2b0      	b.n	8007440 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006ede:	88fb      	ldrh	r3, [r7, #6]
 8006ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d021      	beq.n	8006f2c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	461a      	mov	r2, r3
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	881b      	ldrh	r3, [r3, #0]
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f02:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	441a      	add	r2, r3
 8006f14:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	f040 8284 	bne.w	8007440 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	695a      	ldr	r2, [r3, #20]
 8006f3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f40:	441a      	add	r2, r3
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	69da      	ldr	r2, [r3, #28]
 8006f4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f4e:	441a      	add	r2, r3
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	6a1a      	ldr	r2, [r3, #32]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d309      	bcc.n	8006f74 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	6a1a      	ldr	r2, [r3, #32]
 8006f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f6c:	1ad2      	subs	r2, r2, r3
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	621a      	str	r2, [r3, #32]
 8006f72:	e015      	b.n	8006fa0 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	6a1b      	ldr	r3, [r3, #32]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d107      	bne.n	8006f8c <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8006f7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f80:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006f8a:	e009      	b.n	8006fa0 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	785b      	ldrb	r3, [r3, #1]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d155      	bne.n	8007054 <HAL_PCD_EP_DB_Transmit+0x356>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	461a      	mov	r2, r3
 8006fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbc:	4413      	add	r3, r2
 8006fbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	00da      	lsls	r2, r3, #3
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc8:	4413      	add	r3, r2
 8006fca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fce:	637b      	str	r3, [r7, #52]	; 0x34
 8006fd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fd2:	2b3e      	cmp	r3, #62	; 0x3e
 8006fd4:	d916      	bls.n	8007004 <HAL_PCD_EP_DB_Transmit+0x306>
 8006fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fd8:	095b      	lsrs	r3, r3, #5
 8006fda:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fde:	f003 031f 	and.w	r3, r3, #31
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d102      	bne.n	8006fec <HAL_PCD_EP_DB_Transmit+0x2ee>
 8006fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	029b      	lsls	r3, r3, #10
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007000:	801a      	strh	r2, [r3, #0]
 8007002:	e043      	b.n	800708c <HAL_PCD_EP_DB_Transmit+0x38e>
 8007004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007006:	2b00      	cmp	r3, #0
 8007008:	d112      	bne.n	8007030 <HAL_PCD_EP_DB_Transmit+0x332>
 800700a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	b29b      	uxth	r3, r3
 8007010:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007014:	b29a      	uxth	r2, r3
 8007016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007018:	801a      	strh	r2, [r3, #0]
 800701a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701c:	881b      	ldrh	r3, [r3, #0]
 800701e:	b29b      	uxth	r3, r3
 8007020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007028:	b29a      	uxth	r2, r3
 800702a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800702c:	801a      	strh	r2, [r3, #0]
 800702e:	e02d      	b.n	800708c <HAL_PCD_EP_DB_Transmit+0x38e>
 8007030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007032:	085b      	lsrs	r3, r3, #1
 8007034:	64bb      	str	r3, [r7, #72]	; 0x48
 8007036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	2b00      	cmp	r3, #0
 800703e:	d002      	beq.n	8007046 <HAL_PCD_EP_DB_Transmit+0x348>
 8007040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007042:	3301      	adds	r3, #1
 8007044:	64bb      	str	r3, [r7, #72]	; 0x48
 8007046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007048:	b29b      	uxth	r3, r3
 800704a:	029b      	lsls	r3, r3, #10
 800704c:	b29a      	uxth	r2, r3
 800704e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007050:	801a      	strh	r2, [r3, #0]
 8007052:	e01b      	b.n	800708c <HAL_PCD_EP_DB_Transmit+0x38e>
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	785b      	ldrb	r3, [r3, #1]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d117      	bne.n	800708c <HAL_PCD_EP_DB_Transmit+0x38e>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	643b      	str	r3, [r7, #64]	; 0x40
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800706a:	b29b      	uxth	r3, r3
 800706c:	461a      	mov	r2, r3
 800706e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007070:	4413      	add	r3, r2
 8007072:	643b      	str	r3, [r7, #64]	; 0x40
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	00da      	lsls	r2, r3, #3
 800707a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800707c:	4413      	add	r3, r2
 800707e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007086:	b29a      	uxth	r2, r3
 8007088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800708a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6818      	ldr	r0, [r3, #0]
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	6959      	ldr	r1, [r3, #20]
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	891a      	ldrh	r2, [r3, #8]
 8007098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800709a:	b29b      	uxth	r3, r3
 800709c:	f006 fbe7 	bl	800d86e <USB_WritePMA>
 80070a0:	e1ce      	b.n	8007440 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	461a      	mov	r2, r3
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	00db      	lsls	r3, r3, #3
 80070b4:	4413      	add	r3, r2
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	6812      	ldr	r2, [r2, #0]
 80070ba:	4413      	add	r3, r2
 80070bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	699a      	ldr	r2, [r3, #24]
 80070ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d307      	bcc.n	80070e6 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	699a      	ldr	r2, [r3, #24]
 80070da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80070de:	1ad2      	subs	r2, r2, r3
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	619a      	str	r2, [r3, #24]
 80070e4:	e002      	b.n	80070ec <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2200      	movs	r2, #0
 80070ea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f040 80c4 	bne.w	800727e <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	785b      	ldrb	r3, [r3, #1]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d126      	bne.n	800714c <HAL_PCD_EP_DB_Transmit+0x44e>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	66bb      	str	r3, [r7, #104]	; 0x68
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800710c:	b29b      	uxth	r3, r3
 800710e:	461a      	mov	r2, r3
 8007110:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007112:	4413      	add	r3, r2
 8007114:	66bb      	str	r3, [r7, #104]	; 0x68
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	00da      	lsls	r2, r3, #3
 800711c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800711e:	4413      	add	r3, r2
 8007120:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007124:	667b      	str	r3, [r7, #100]	; 0x64
 8007126:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	b29b      	uxth	r3, r3
 800712c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007130:	b29a      	uxth	r2, r3
 8007132:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007134:	801a      	strh	r2, [r3, #0]
 8007136:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	b29b      	uxth	r3, r3
 800713c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007144:	b29a      	uxth	r2, r3
 8007146:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007148:	801a      	strh	r2, [r3, #0]
 800714a:	e01a      	b.n	8007182 <HAL_PCD_EP_DB_Transmit+0x484>
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	785b      	ldrb	r3, [r3, #1]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d116      	bne.n	8007182 <HAL_PCD_EP_DB_Transmit+0x484>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	673b      	str	r3, [r7, #112]	; 0x70
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007162:	b29b      	uxth	r3, r3
 8007164:	461a      	mov	r2, r3
 8007166:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007168:	4413      	add	r3, r2
 800716a:	673b      	str	r3, [r7, #112]	; 0x70
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	00da      	lsls	r2, r3, #3
 8007172:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007174:	4413      	add	r3, r2
 8007176:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800717a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800717c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800717e:	2200      	movs	r2, #0
 8007180:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	785b      	ldrb	r3, [r3, #1]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d12f      	bne.n	80071f0 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	461a      	mov	r2, r3
 80071a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071a8:	4413      	add	r3, r2
 80071aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	00da      	lsls	r2, r3, #3
 80071b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071b8:	4413      	add	r3, r2
 80071ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80071c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80071c6:	881b      	ldrh	r3, [r3, #0]
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80071d4:	801a      	strh	r2, [r3, #0]
 80071d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80071ec:	801a      	strh	r2, [r3, #0]
 80071ee:	e017      	b.n	8007220 <HAL_PCD_EP_DB_Transmit+0x522>
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	785b      	ldrb	r3, [r3, #1]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d113      	bne.n	8007220 <HAL_PCD_EP_DB_Transmit+0x522>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007200:	b29b      	uxth	r3, r3
 8007202:	461a      	mov	r2, r3
 8007204:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007206:	4413      	add	r3, r2
 8007208:	67fb      	str	r3, [r7, #124]	; 0x7c
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	00da      	lsls	r2, r3, #3
 8007210:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007212:	4413      	add	r3, r2
 8007214:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007218:	67bb      	str	r3, [r7, #120]	; 0x78
 800721a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800721c:	2200      	movs	r2, #0
 800721e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	4619      	mov	r1, r3
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f00a fb91 	bl	801194e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800722c:	88fb      	ldrh	r3, [r7, #6]
 800722e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007232:	2b00      	cmp	r3, #0
 8007234:	f040 8104 	bne.w	8007440 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	461a      	mov	r2, r3
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4413      	add	r3, r2
 8007246:	881b      	ldrh	r3, [r3, #0]
 8007248:	b29b      	uxth	r3, r3
 800724a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800724e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007252:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	461a      	mov	r2, r3
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	441a      	add	r2, r3
 8007264:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800726c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007270:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007278:	b29b      	uxth	r3, r3
 800727a:	8013      	strh	r3, [r2, #0]
 800727c:	e0e0      	b.n	8007440 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800727e:	88fb      	ldrh	r3, [r7, #6]
 8007280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d121      	bne.n	80072cc <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	461a      	mov	r2, r3
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	b29b      	uxth	r3, r3
 800729a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800729e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072a2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	461a      	mov	r2, r3
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	441a      	add	r2, r3
 80072b4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80072b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	f040 80b4 	bne.w	8007440 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	695a      	ldr	r2, [r3, #20]
 80072dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072e0:	441a      	add	r2, r3
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	69da      	ldr	r2, [r3, #28]
 80072ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072ee:	441a      	add	r2, r3
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	6a1a      	ldr	r2, [r3, #32]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d309      	bcc.n	8007314 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	6a1a      	ldr	r2, [r3, #32]
 800730a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800730c:	1ad2      	subs	r2, r2, r3
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	621a      	str	r2, [r3, #32]
 8007312:	e015      	b.n	8007340 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d107      	bne.n	800732c <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 800731c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007320:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800732a:	e009      	b.n	8007340 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	2200      	movs	r2, #0
 8007336:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	663b      	str	r3, [r7, #96]	; 0x60
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	785b      	ldrb	r3, [r3, #1]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d155      	bne.n	80073fa <HAL_PCD_EP_DB_Transmit+0x6fc>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	65bb      	str	r3, [r7, #88]	; 0x58
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800735c:	b29b      	uxth	r3, r3
 800735e:	461a      	mov	r2, r3
 8007360:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007362:	4413      	add	r3, r2
 8007364:	65bb      	str	r3, [r7, #88]	; 0x58
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	00da      	lsls	r2, r3, #3
 800736c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800736e:	4413      	add	r3, r2
 8007370:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007374:	657b      	str	r3, [r7, #84]	; 0x54
 8007376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007378:	2b3e      	cmp	r3, #62	; 0x3e
 800737a:	d916      	bls.n	80073aa <HAL_PCD_EP_DB_Transmit+0x6ac>
 800737c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800737e:	095b      	lsrs	r3, r3, #5
 8007380:	677b      	str	r3, [r7, #116]	; 0x74
 8007382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007384:	f003 031f 	and.w	r3, r3, #31
 8007388:	2b00      	cmp	r3, #0
 800738a:	d102      	bne.n	8007392 <HAL_PCD_EP_DB_Transmit+0x694>
 800738c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800738e:	3b01      	subs	r3, #1
 8007390:	677b      	str	r3, [r7, #116]	; 0x74
 8007392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007394:	b29b      	uxth	r3, r3
 8007396:	029b      	lsls	r3, r3, #10
 8007398:	b29b      	uxth	r3, r3
 800739a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800739e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073a6:	801a      	strh	r2, [r3, #0]
 80073a8:	e040      	b.n	800742c <HAL_PCD_EP_DB_Transmit+0x72e>
 80073aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d112      	bne.n	80073d6 <HAL_PCD_EP_DB_Transmit+0x6d8>
 80073b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073be:	801a      	strh	r2, [r3, #0]
 80073c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073d2:	801a      	strh	r2, [r3, #0]
 80073d4:	e02a      	b.n	800742c <HAL_PCD_EP_DB_Transmit+0x72e>
 80073d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073d8:	085b      	lsrs	r3, r3, #1
 80073da:	677b      	str	r3, [r7, #116]	; 0x74
 80073dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073de:	f003 0301 	and.w	r3, r3, #1
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <HAL_PCD_EP_DB_Transmit+0x6ee>
 80073e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073e8:	3301      	adds	r3, #1
 80073ea:	677b      	str	r3, [r7, #116]	; 0x74
 80073ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	029b      	lsls	r3, r3, #10
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073f6:	801a      	strh	r2, [r3, #0]
 80073f8:	e018      	b.n	800742c <HAL_PCD_EP_DB_Transmit+0x72e>
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	785b      	ldrb	r3, [r3, #1]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d114      	bne.n	800742c <HAL_PCD_EP_DB_Transmit+0x72e>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800740a:	b29b      	uxth	r3, r3
 800740c:	461a      	mov	r2, r3
 800740e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007410:	4413      	add	r3, r2
 8007412:	663b      	str	r3, [r7, #96]	; 0x60
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	00da      	lsls	r2, r3, #3
 800741a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800741c:	4413      	add	r3, r2
 800741e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007422:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007426:	b29a      	uxth	r2, r3
 8007428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800742a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6818      	ldr	r0, [r3, #0]
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	6959      	ldr	r1, [r3, #20]
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	895a      	ldrh	r2, [r3, #10]
 8007438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800743a:	b29b      	uxth	r3, r3
 800743c:	f006 fa17 	bl	800d86e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	461a      	mov	r2, r3
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	881b      	ldrh	r3, [r3, #0]
 8007450:	b29b      	uxth	r3, r3
 8007452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800745a:	823b      	strh	r3, [r7, #16]
 800745c:	8a3b      	ldrh	r3, [r7, #16]
 800745e:	f083 0310 	eor.w	r3, r3, #16
 8007462:	823b      	strh	r3, [r7, #16]
 8007464:	8a3b      	ldrh	r3, [r7, #16]
 8007466:	f083 0320 	eor.w	r3, r3, #32
 800746a:	823b      	strh	r3, [r7, #16]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	461a      	mov	r2, r3
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	441a      	add	r2, r3
 800747a:	8a3b      	ldrh	r3, [r7, #16]
 800747c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800748c:	b29b      	uxth	r3, r3
 800748e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3788      	adds	r7, #136	; 0x88
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800749a:	b480      	push	{r7}
 800749c:	b087      	sub	sp, #28
 800749e:	af00      	add	r7, sp, #0
 80074a0:	60f8      	str	r0, [r7, #12]
 80074a2:	607b      	str	r3, [r7, #4]
 80074a4:	460b      	mov	r3, r1
 80074a6:	817b      	strh	r3, [r7, #10]
 80074a8:	4613      	mov	r3, r2
 80074aa:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80074ac:	897b      	ldrh	r3, [r7, #10]
 80074ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00b      	beq.n	80074d0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074b8:	897b      	ldrh	r3, [r7, #10]
 80074ba:	f003 0307 	and.w	r3, r3, #7
 80074be:	1c5a      	adds	r2, r3, #1
 80074c0:	4613      	mov	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4413      	add	r3, r2
 80074c6:	00db      	lsls	r3, r3, #3
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	4413      	add	r3, r2
 80074cc:	617b      	str	r3, [r7, #20]
 80074ce:	e009      	b.n	80074e4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80074d0:	897a      	ldrh	r2, [r7, #10]
 80074d2:	4613      	mov	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4413      	add	r3, r2
 80074d8:	00db      	lsls	r3, r3, #3
 80074da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	4413      	add	r3, r2
 80074e2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80074e4:	893b      	ldrh	r3, [r7, #8]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d107      	bne.n	80074fa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2200      	movs	r2, #0
 80074ee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	80da      	strh	r2, [r3, #6]
 80074f8:	e00b      	b.n	8007512 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2201      	movs	r2, #1
 80074fe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	b29a      	uxth	r2, r3
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	0c1b      	lsrs	r3, r3, #16
 800750c:	b29a      	uxth	r2, r3
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	371c      	adds	r7, #28
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007544:	b29b      	uxth	r3, r3
 8007546:	f043 0301 	orr.w	r3, r3, #1
 800754a:	b29a      	uxth	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007558:	b29b      	uxth	r3, r3
 800755a:	f043 0302 	orr.w	r3, r3, #2
 800755e:	b29a      	uxth	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3714      	adds	r7, #20
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d141      	bne.n	8007606 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007582:	4b4b      	ldr	r3, [pc, #300]	; (80076b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800758a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800758e:	d131      	bne.n	80075f4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007590:	4b47      	ldr	r3, [pc, #284]	; (80076b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007596:	4a46      	ldr	r2, [pc, #280]	; (80076b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800759c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80075a0:	4b43      	ldr	r3, [pc, #268]	; (80076b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80075a8:	4a41      	ldr	r2, [pc, #260]	; (80076b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80075b0:	4b40      	ldr	r3, [pc, #256]	; (80076b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2232      	movs	r2, #50	; 0x32
 80075b6:	fb02 f303 	mul.w	r3, r2, r3
 80075ba:	4a3f      	ldr	r2, [pc, #252]	; (80076b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80075bc:	fba2 2303 	umull	r2, r3, r2, r3
 80075c0:	0c9b      	lsrs	r3, r3, #18
 80075c2:	3301      	adds	r3, #1
 80075c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80075c6:	e002      	b.n	80075ce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3b01      	subs	r3, #1
 80075cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80075ce:	4b38      	ldr	r3, [pc, #224]	; (80076b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075da:	d102      	bne.n	80075e2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1f2      	bne.n	80075c8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80075e2:	4b33      	ldr	r3, [pc, #204]	; (80076b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075ee:	d158      	bne.n	80076a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e057      	b.n	80076a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80075f4:	4b2e      	ldr	r3, [pc, #184]	; (80076b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075fa:	4a2d      	ldr	r2, [pc, #180]	; (80076b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007600:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007604:	e04d      	b.n	80076a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800760c:	d141      	bne.n	8007692 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800760e:	4b28      	ldr	r3, [pc, #160]	; (80076b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800761a:	d131      	bne.n	8007680 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800761c:	4b24      	ldr	r3, [pc, #144]	; (80076b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800761e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007622:	4a23      	ldr	r2, [pc, #140]	; (80076b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007628:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800762c:	4b20      	ldr	r3, [pc, #128]	; (80076b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007634:	4a1e      	ldr	r2, [pc, #120]	; (80076b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800763a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800763c:	4b1d      	ldr	r3, [pc, #116]	; (80076b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2232      	movs	r2, #50	; 0x32
 8007642:	fb02 f303 	mul.w	r3, r2, r3
 8007646:	4a1c      	ldr	r2, [pc, #112]	; (80076b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007648:	fba2 2303 	umull	r2, r3, r2, r3
 800764c:	0c9b      	lsrs	r3, r3, #18
 800764e:	3301      	adds	r3, #1
 8007650:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007652:	e002      	b.n	800765a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	3b01      	subs	r3, #1
 8007658:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800765a:	4b15      	ldr	r3, [pc, #84]	; (80076b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007666:	d102      	bne.n	800766e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1f2      	bne.n	8007654 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800766e:	4b10      	ldr	r3, [pc, #64]	; (80076b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800767a:	d112      	bne.n	80076a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e011      	b.n	80076a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007680:	4b0b      	ldr	r3, [pc, #44]	; (80076b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007686:	4a0a      	ldr	r2, [pc, #40]	; (80076b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800768c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007690:	e007      	b.n	80076a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007692:	4b07      	ldr	r3, [pc, #28]	; (80076b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800769a:	4a05      	ldr	r2, [pc, #20]	; (80076b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800769c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80076a0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	40007000 	.word	0x40007000
 80076b4:	20000000 	.word	0x20000000
 80076b8:	431bde83 	.word	0x431bde83

080076bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b088      	sub	sp, #32
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d101      	bne.n	80076ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e306      	b.n	8007cdc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d075      	beq.n	80077c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076da:	4b97      	ldr	r3, [pc, #604]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f003 030c 	and.w	r3, r3, #12
 80076e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076e4:	4b94      	ldr	r3, [pc, #592]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f003 0303 	and.w	r3, r3, #3
 80076ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	2b0c      	cmp	r3, #12
 80076f2:	d102      	bne.n	80076fa <HAL_RCC_OscConfig+0x3e>
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	d002      	beq.n	8007700 <HAL_RCC_OscConfig+0x44>
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	2b08      	cmp	r3, #8
 80076fe:	d10b      	bne.n	8007718 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007700:	4b8d      	ldr	r3, [pc, #564]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d05b      	beq.n	80077c4 <HAL_RCC_OscConfig+0x108>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d157      	bne.n	80077c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e2e1      	b.n	8007cdc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007720:	d106      	bne.n	8007730 <HAL_RCC_OscConfig+0x74>
 8007722:	4b85      	ldr	r3, [pc, #532]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a84      	ldr	r2, [pc, #528]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 8007728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800772c:	6013      	str	r3, [r2, #0]
 800772e:	e01d      	b.n	800776c <HAL_RCC_OscConfig+0xb0>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007738:	d10c      	bne.n	8007754 <HAL_RCC_OscConfig+0x98>
 800773a:	4b7f      	ldr	r3, [pc, #508]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a7e      	ldr	r2, [pc, #504]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 8007740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007744:	6013      	str	r3, [r2, #0]
 8007746:	4b7c      	ldr	r3, [pc, #496]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a7b      	ldr	r2, [pc, #492]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 800774c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007750:	6013      	str	r3, [r2, #0]
 8007752:	e00b      	b.n	800776c <HAL_RCC_OscConfig+0xb0>
 8007754:	4b78      	ldr	r3, [pc, #480]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a77      	ldr	r2, [pc, #476]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 800775a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800775e:	6013      	str	r3, [r2, #0]
 8007760:	4b75      	ldr	r3, [pc, #468]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a74      	ldr	r2, [pc, #464]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 8007766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800776a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d013      	beq.n	800779c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007774:	f7fb fe7a 	bl	800346c <HAL_GetTick>
 8007778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800777a:	e008      	b.n	800778e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800777c:	f7fb fe76 	bl	800346c <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	2b64      	cmp	r3, #100	; 0x64
 8007788:	d901      	bls.n	800778e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e2a6      	b.n	8007cdc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800778e:	4b6a      	ldr	r3, [pc, #424]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d0f0      	beq.n	800777c <HAL_RCC_OscConfig+0xc0>
 800779a:	e014      	b.n	80077c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800779c:	f7fb fe66 	bl	800346c <HAL_GetTick>
 80077a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80077a2:	e008      	b.n	80077b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077a4:	f7fb fe62 	bl	800346c <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	2b64      	cmp	r3, #100	; 0x64
 80077b0:	d901      	bls.n	80077b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e292      	b.n	8007cdc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80077b6:	4b60      	ldr	r3, [pc, #384]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1f0      	bne.n	80077a4 <HAL_RCC_OscConfig+0xe8>
 80077c2:	e000      	b.n	80077c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d075      	beq.n	80078be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077d2:	4b59      	ldr	r3, [pc, #356]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f003 030c 	and.w	r3, r3, #12
 80077da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077dc:	4b56      	ldr	r3, [pc, #344]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	f003 0303 	and.w	r3, r3, #3
 80077e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	2b0c      	cmp	r3, #12
 80077ea:	d102      	bne.n	80077f2 <HAL_RCC_OscConfig+0x136>
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d002      	beq.n	80077f8 <HAL_RCC_OscConfig+0x13c>
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	2b04      	cmp	r3, #4
 80077f6:	d11f      	bne.n	8007838 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077f8:	4b4f      	ldr	r3, [pc, #316]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007800:	2b00      	cmp	r3, #0
 8007802:	d005      	beq.n	8007810 <HAL_RCC_OscConfig+0x154>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d101      	bne.n	8007810 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e265      	b.n	8007cdc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007810:	4b49      	ldr	r3, [pc, #292]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	061b      	lsls	r3, r3, #24
 800781e:	4946      	ldr	r1, [pc, #280]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 8007820:	4313      	orrs	r3, r2
 8007822:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007824:	4b45      	ldr	r3, [pc, #276]	; (800793c <HAL_RCC_OscConfig+0x280>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4618      	mov	r0, r3
 800782a:	f7fa fa77 	bl	8001d1c <HAL_InitTick>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d043      	beq.n	80078bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e251      	b.n	8007cdc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d023      	beq.n	8007888 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007840:	4b3d      	ldr	r3, [pc, #244]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a3c      	ldr	r2, [pc, #240]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 8007846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800784a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800784c:	f7fb fe0e 	bl	800346c <HAL_GetTick>
 8007850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007852:	e008      	b.n	8007866 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007854:	f7fb fe0a 	bl	800346c <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	2b02      	cmp	r3, #2
 8007860:	d901      	bls.n	8007866 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e23a      	b.n	8007cdc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007866:	4b34      	ldr	r3, [pc, #208]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800786e:	2b00      	cmp	r3, #0
 8007870:	d0f0      	beq.n	8007854 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007872:	4b31      	ldr	r3, [pc, #196]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	061b      	lsls	r3, r3, #24
 8007880:	492d      	ldr	r1, [pc, #180]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 8007882:	4313      	orrs	r3, r2
 8007884:	604b      	str	r3, [r1, #4]
 8007886:	e01a      	b.n	80078be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007888:	4b2b      	ldr	r3, [pc, #172]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a2a      	ldr	r2, [pc, #168]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 800788e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007894:	f7fb fdea 	bl	800346c <HAL_GetTick>
 8007898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800789a:	e008      	b.n	80078ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800789c:	f7fb fde6 	bl	800346c <HAL_GetTick>
 80078a0:	4602      	mov	r2, r0
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d901      	bls.n	80078ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e216      	b.n	8007cdc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80078ae:	4b22      	ldr	r3, [pc, #136]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1f0      	bne.n	800789c <HAL_RCC_OscConfig+0x1e0>
 80078ba:	e000      	b.n	80078be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0308 	and.w	r3, r3, #8
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d041      	beq.n	800794e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d01c      	beq.n	800790c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078d2:	4b19      	ldr	r3, [pc, #100]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 80078d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078d8:	4a17      	ldr	r2, [pc, #92]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 80078da:	f043 0301 	orr.w	r3, r3, #1
 80078de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078e2:	f7fb fdc3 	bl	800346c <HAL_GetTick>
 80078e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80078e8:	e008      	b.n	80078fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078ea:	f7fb fdbf 	bl	800346c <HAL_GetTick>
 80078ee:	4602      	mov	r2, r0
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d901      	bls.n	80078fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e1ef      	b.n	8007cdc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80078fc:	4b0e      	ldr	r3, [pc, #56]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 80078fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007902:	f003 0302 	and.w	r3, r3, #2
 8007906:	2b00      	cmp	r3, #0
 8007908:	d0ef      	beq.n	80078ea <HAL_RCC_OscConfig+0x22e>
 800790a:	e020      	b.n	800794e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800790c:	4b0a      	ldr	r3, [pc, #40]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 800790e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007912:	4a09      	ldr	r2, [pc, #36]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 8007914:	f023 0301 	bic.w	r3, r3, #1
 8007918:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800791c:	f7fb fda6 	bl	800346c <HAL_GetTick>
 8007920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007922:	e00d      	b.n	8007940 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007924:	f7fb fda2 	bl	800346c <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b02      	cmp	r3, #2
 8007930:	d906      	bls.n	8007940 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e1d2      	b.n	8007cdc <HAL_RCC_OscConfig+0x620>
 8007936:	bf00      	nop
 8007938:	40021000 	.word	0x40021000
 800793c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007940:	4b8c      	ldr	r3, [pc, #560]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 8007942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1ea      	bne.n	8007924 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0304 	and.w	r3, r3, #4
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 80a6 	beq.w	8007aa8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800795c:	2300      	movs	r3, #0
 800795e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007960:	4b84      	ldr	r3, [pc, #528]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 8007962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d101      	bne.n	8007970 <HAL_RCC_OscConfig+0x2b4>
 800796c:	2301      	movs	r3, #1
 800796e:	e000      	b.n	8007972 <HAL_RCC_OscConfig+0x2b6>
 8007970:	2300      	movs	r3, #0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00d      	beq.n	8007992 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007976:	4b7f      	ldr	r3, [pc, #508]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 8007978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800797a:	4a7e      	ldr	r2, [pc, #504]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 800797c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007980:	6593      	str	r3, [r2, #88]	; 0x58
 8007982:	4b7c      	ldr	r3, [pc, #496]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 8007984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800798a:	60fb      	str	r3, [r7, #12]
 800798c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800798e:	2301      	movs	r3, #1
 8007990:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007992:	4b79      	ldr	r3, [pc, #484]	; (8007b78 <HAL_RCC_OscConfig+0x4bc>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800799a:	2b00      	cmp	r3, #0
 800799c:	d118      	bne.n	80079d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800799e:	4b76      	ldr	r3, [pc, #472]	; (8007b78 <HAL_RCC_OscConfig+0x4bc>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a75      	ldr	r2, [pc, #468]	; (8007b78 <HAL_RCC_OscConfig+0x4bc>)
 80079a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079aa:	f7fb fd5f 	bl	800346c <HAL_GetTick>
 80079ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079b0:	e008      	b.n	80079c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079b2:	f7fb fd5b 	bl	800346c <HAL_GetTick>
 80079b6:	4602      	mov	r2, r0
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d901      	bls.n	80079c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e18b      	b.n	8007cdc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079c4:	4b6c      	ldr	r3, [pc, #432]	; (8007b78 <HAL_RCC_OscConfig+0x4bc>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d0f0      	beq.n	80079b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d108      	bne.n	80079ea <HAL_RCC_OscConfig+0x32e>
 80079d8:	4b66      	ldr	r3, [pc, #408]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 80079da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079de:	4a65      	ldr	r2, [pc, #404]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 80079e0:	f043 0301 	orr.w	r3, r3, #1
 80079e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80079e8:	e024      	b.n	8007a34 <HAL_RCC_OscConfig+0x378>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	2b05      	cmp	r3, #5
 80079f0:	d110      	bne.n	8007a14 <HAL_RCC_OscConfig+0x358>
 80079f2:	4b60      	ldr	r3, [pc, #384]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 80079f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079f8:	4a5e      	ldr	r2, [pc, #376]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 80079fa:	f043 0304 	orr.w	r3, r3, #4
 80079fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a02:	4b5c      	ldr	r3, [pc, #368]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 8007a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a08:	4a5a      	ldr	r2, [pc, #360]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 8007a0a:	f043 0301 	orr.w	r3, r3, #1
 8007a0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a12:	e00f      	b.n	8007a34 <HAL_RCC_OscConfig+0x378>
 8007a14:	4b57      	ldr	r3, [pc, #348]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 8007a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a1a:	4a56      	ldr	r2, [pc, #344]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 8007a1c:	f023 0301 	bic.w	r3, r3, #1
 8007a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a24:	4b53      	ldr	r3, [pc, #332]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 8007a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a2a:	4a52      	ldr	r2, [pc, #328]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 8007a2c:	f023 0304 	bic.w	r3, r3, #4
 8007a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d016      	beq.n	8007a6a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a3c:	f7fb fd16 	bl	800346c <HAL_GetTick>
 8007a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a42:	e00a      	b.n	8007a5a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a44:	f7fb fd12 	bl	800346c <HAL_GetTick>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d901      	bls.n	8007a5a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e140      	b.n	8007cdc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a5a:	4b46      	ldr	r3, [pc, #280]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 8007a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a60:	f003 0302 	and.w	r3, r3, #2
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d0ed      	beq.n	8007a44 <HAL_RCC_OscConfig+0x388>
 8007a68:	e015      	b.n	8007a96 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a6a:	f7fb fcff 	bl	800346c <HAL_GetTick>
 8007a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a70:	e00a      	b.n	8007a88 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a72:	f7fb fcfb 	bl	800346c <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d901      	bls.n	8007a88 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e129      	b.n	8007cdc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a88:	4b3a      	ldr	r3, [pc, #232]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 8007a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a8e:	f003 0302 	and.w	r3, r3, #2
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1ed      	bne.n	8007a72 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007a96:	7ffb      	ldrb	r3, [r7, #31]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d105      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a9c:	4b35      	ldr	r3, [pc, #212]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 8007a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aa0:	4a34      	ldr	r2, [pc, #208]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 8007aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007aa6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0320 	and.w	r3, r3, #32
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d03c      	beq.n	8007b2e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d01c      	beq.n	8007af6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007abc:	4b2d      	ldr	r3, [pc, #180]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 8007abe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ac2:	4a2c      	ldr	r2, [pc, #176]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 8007ac4:	f043 0301 	orr.w	r3, r3, #1
 8007ac8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007acc:	f7fb fcce 	bl	800346c <HAL_GetTick>
 8007ad0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007ad2:	e008      	b.n	8007ae6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ad4:	f7fb fcca 	bl	800346c <HAL_GetTick>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d901      	bls.n	8007ae6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e0fa      	b.n	8007cdc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007ae6:	4b23      	ldr	r3, [pc, #140]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 8007ae8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007aec:	f003 0302 	and.w	r3, r3, #2
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d0ef      	beq.n	8007ad4 <HAL_RCC_OscConfig+0x418>
 8007af4:	e01b      	b.n	8007b2e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007af6:	4b1f      	ldr	r3, [pc, #124]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 8007af8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007afc:	4a1d      	ldr	r2, [pc, #116]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 8007afe:	f023 0301 	bic.w	r3, r3, #1
 8007b02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b06:	f7fb fcb1 	bl	800346c <HAL_GetTick>
 8007b0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007b0c:	e008      	b.n	8007b20 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b0e:	f7fb fcad 	bl	800346c <HAL_GetTick>
 8007b12:	4602      	mov	r2, r0
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d901      	bls.n	8007b20 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e0dd      	b.n	8007cdc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007b20:	4b14      	ldr	r3, [pc, #80]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 8007b22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b26:	f003 0302 	and.w	r3, r3, #2
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1ef      	bne.n	8007b0e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	69db      	ldr	r3, [r3, #28]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 80d1 	beq.w	8007cda <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b38:	4b0e      	ldr	r3, [pc, #56]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f003 030c 	and.w	r3, r3, #12
 8007b40:	2b0c      	cmp	r3, #12
 8007b42:	f000 808b 	beq.w	8007c5c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d15e      	bne.n	8007c0c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b4e:	4b09      	ldr	r3, [pc, #36]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a08      	ldr	r2, [pc, #32]	; (8007b74 <HAL_RCC_OscConfig+0x4b8>)
 8007b54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b5a:	f7fb fc87 	bl	800346c <HAL_GetTick>
 8007b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b60:	e00c      	b.n	8007b7c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b62:	f7fb fc83 	bl	800346c <HAL_GetTick>
 8007b66:	4602      	mov	r2, r0
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d905      	bls.n	8007b7c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e0b3      	b.n	8007cdc <HAL_RCC_OscConfig+0x620>
 8007b74:	40021000 	.word	0x40021000
 8007b78:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b7c:	4b59      	ldr	r3, [pc, #356]	; (8007ce4 <HAL_RCC_OscConfig+0x628>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1ec      	bne.n	8007b62 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b88:	4b56      	ldr	r3, [pc, #344]	; (8007ce4 <HAL_RCC_OscConfig+0x628>)
 8007b8a:	68da      	ldr	r2, [r3, #12]
 8007b8c:	4b56      	ldr	r3, [pc, #344]	; (8007ce8 <HAL_RCC_OscConfig+0x62c>)
 8007b8e:	4013      	ands	r3, r2
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	6a11      	ldr	r1, [r2, #32]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b98:	3a01      	subs	r2, #1
 8007b9a:	0112      	lsls	r2, r2, #4
 8007b9c:	4311      	orrs	r1, r2
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007ba2:	0212      	lsls	r2, r2, #8
 8007ba4:	4311      	orrs	r1, r2
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007baa:	0852      	lsrs	r2, r2, #1
 8007bac:	3a01      	subs	r2, #1
 8007bae:	0552      	lsls	r2, r2, #21
 8007bb0:	4311      	orrs	r1, r2
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007bb6:	0852      	lsrs	r2, r2, #1
 8007bb8:	3a01      	subs	r2, #1
 8007bba:	0652      	lsls	r2, r2, #25
 8007bbc:	4311      	orrs	r1, r2
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007bc2:	06d2      	lsls	r2, r2, #27
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	4947      	ldr	r1, [pc, #284]	; (8007ce4 <HAL_RCC_OscConfig+0x628>)
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bcc:	4b45      	ldr	r3, [pc, #276]	; (8007ce4 <HAL_RCC_OscConfig+0x628>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a44      	ldr	r2, [pc, #272]	; (8007ce4 <HAL_RCC_OscConfig+0x628>)
 8007bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bd6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007bd8:	4b42      	ldr	r3, [pc, #264]	; (8007ce4 <HAL_RCC_OscConfig+0x628>)
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	4a41      	ldr	r2, [pc, #260]	; (8007ce4 <HAL_RCC_OscConfig+0x628>)
 8007bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007be2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007be4:	f7fb fc42 	bl	800346c <HAL_GetTick>
 8007be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bea:	e008      	b.n	8007bfe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bec:	f7fb fc3e 	bl	800346c <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d901      	bls.n	8007bfe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e06e      	b.n	8007cdc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bfe:	4b39      	ldr	r3, [pc, #228]	; (8007ce4 <HAL_RCC_OscConfig+0x628>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0f0      	beq.n	8007bec <HAL_RCC_OscConfig+0x530>
 8007c0a:	e066      	b.n	8007cda <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c0c:	4b35      	ldr	r3, [pc, #212]	; (8007ce4 <HAL_RCC_OscConfig+0x628>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a34      	ldr	r2, [pc, #208]	; (8007ce4 <HAL_RCC_OscConfig+0x628>)
 8007c12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c16:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007c18:	4b32      	ldr	r3, [pc, #200]	; (8007ce4 <HAL_RCC_OscConfig+0x628>)
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	4a31      	ldr	r2, [pc, #196]	; (8007ce4 <HAL_RCC_OscConfig+0x628>)
 8007c1e:	f023 0303 	bic.w	r3, r3, #3
 8007c22:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007c24:	4b2f      	ldr	r3, [pc, #188]	; (8007ce4 <HAL_RCC_OscConfig+0x628>)
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	4a2e      	ldr	r2, [pc, #184]	; (8007ce4 <HAL_RCC_OscConfig+0x628>)
 8007c2a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c32:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c34:	f7fb fc1a 	bl	800346c <HAL_GetTick>
 8007c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c3a:	e008      	b.n	8007c4e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c3c:	f7fb fc16 	bl	800346c <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d901      	bls.n	8007c4e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e046      	b.n	8007cdc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c4e:	4b25      	ldr	r3, [pc, #148]	; (8007ce4 <HAL_RCC_OscConfig+0x628>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1f0      	bne.n	8007c3c <HAL_RCC_OscConfig+0x580>
 8007c5a:	e03e      	b.n	8007cda <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	69db      	ldr	r3, [r3, #28]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d101      	bne.n	8007c68 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e039      	b.n	8007cdc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007c68:	4b1e      	ldr	r3, [pc, #120]	; (8007ce4 <HAL_RCC_OscConfig+0x628>)
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f003 0203 	and.w	r2, r3, #3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a1b      	ldr	r3, [r3, #32]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d12c      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c86:	3b01      	subs	r3, #1
 8007c88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d123      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c98:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d11b      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d113      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb8:	085b      	lsrs	r3, r3, #1
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d109      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ccc:	085b      	lsrs	r3, r3, #1
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d001      	beq.n	8007cda <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e000      	b.n	8007cdc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3720      	adds	r7, #32
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	40021000 	.word	0x40021000
 8007ce8:	019f800c 	.word	0x019f800c

08007cec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d101      	bne.n	8007d04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e11e      	b.n	8007f42 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d04:	4b91      	ldr	r3, [pc, #580]	; (8007f4c <HAL_RCC_ClockConfig+0x260>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 030f 	and.w	r3, r3, #15
 8007d0c:	683a      	ldr	r2, [r7, #0]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d910      	bls.n	8007d34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d12:	4b8e      	ldr	r3, [pc, #568]	; (8007f4c <HAL_RCC_ClockConfig+0x260>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f023 020f 	bic.w	r2, r3, #15
 8007d1a:	498c      	ldr	r1, [pc, #560]	; (8007f4c <HAL_RCC_ClockConfig+0x260>)
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d22:	4b8a      	ldr	r3, [pc, #552]	; (8007f4c <HAL_RCC_ClockConfig+0x260>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 030f 	and.w	r3, r3, #15
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d001      	beq.n	8007d34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e106      	b.n	8007f42 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d073      	beq.n	8007e28 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	2b03      	cmp	r3, #3
 8007d46:	d129      	bne.n	8007d9c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d48:	4b81      	ldr	r3, [pc, #516]	; (8007f50 <HAL_RCC_ClockConfig+0x264>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e0f4      	b.n	8007f42 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007d58:	f000 f9ce 	bl	80080f8 <RCC_GetSysClockFreqFromPLLSource>
 8007d5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	4a7c      	ldr	r2, [pc, #496]	; (8007f54 <HAL_RCC_ClockConfig+0x268>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d93f      	bls.n	8007de6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007d66:	4b7a      	ldr	r3, [pc, #488]	; (8007f50 <HAL_RCC_ClockConfig+0x264>)
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d009      	beq.n	8007d86 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d033      	beq.n	8007de6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d12f      	bne.n	8007de6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007d86:	4b72      	ldr	r3, [pc, #456]	; (8007f50 <HAL_RCC_ClockConfig+0x264>)
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d8e:	4a70      	ldr	r2, [pc, #448]	; (8007f50 <HAL_RCC_ClockConfig+0x264>)
 8007d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007d96:	2380      	movs	r3, #128	; 0x80
 8007d98:	617b      	str	r3, [r7, #20]
 8007d9a:	e024      	b.n	8007de6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d107      	bne.n	8007db4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007da4:	4b6a      	ldr	r3, [pc, #424]	; (8007f50 <HAL_RCC_ClockConfig+0x264>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d109      	bne.n	8007dc4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e0c6      	b.n	8007f42 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007db4:	4b66      	ldr	r3, [pc, #408]	; (8007f50 <HAL_RCC_ClockConfig+0x264>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e0be      	b.n	8007f42 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007dc4:	f000 f8ce 	bl	8007f64 <HAL_RCC_GetSysClockFreq>
 8007dc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	4a61      	ldr	r2, [pc, #388]	; (8007f54 <HAL_RCC_ClockConfig+0x268>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d909      	bls.n	8007de6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007dd2:	4b5f      	ldr	r3, [pc, #380]	; (8007f50 <HAL_RCC_ClockConfig+0x264>)
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dda:	4a5d      	ldr	r2, [pc, #372]	; (8007f50 <HAL_RCC_ClockConfig+0x264>)
 8007ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007de2:	2380      	movs	r3, #128	; 0x80
 8007de4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007de6:	4b5a      	ldr	r3, [pc, #360]	; (8007f50 <HAL_RCC_ClockConfig+0x264>)
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f023 0203 	bic.w	r2, r3, #3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	4957      	ldr	r1, [pc, #348]	; (8007f50 <HAL_RCC_ClockConfig+0x264>)
 8007df4:	4313      	orrs	r3, r2
 8007df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007df8:	f7fb fb38 	bl	800346c <HAL_GetTick>
 8007dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dfe:	e00a      	b.n	8007e16 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e00:	f7fb fb34 	bl	800346c <HAL_GetTick>
 8007e04:	4602      	mov	r2, r0
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d901      	bls.n	8007e16 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e095      	b.n	8007f42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e16:	4b4e      	ldr	r3, [pc, #312]	; (8007f50 <HAL_RCC_ClockConfig+0x264>)
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f003 020c 	and.w	r2, r3, #12
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d1eb      	bne.n	8007e00 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0302 	and.w	r3, r3, #2
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d023      	beq.n	8007e7c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0304 	and.w	r3, r3, #4
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d005      	beq.n	8007e4c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e40:	4b43      	ldr	r3, [pc, #268]	; (8007f50 <HAL_RCC_ClockConfig+0x264>)
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	4a42      	ldr	r2, [pc, #264]	; (8007f50 <HAL_RCC_ClockConfig+0x264>)
 8007e46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007e4a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0308 	and.w	r3, r3, #8
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d007      	beq.n	8007e68 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007e58:	4b3d      	ldr	r3, [pc, #244]	; (8007f50 <HAL_RCC_ClockConfig+0x264>)
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007e60:	4a3b      	ldr	r2, [pc, #236]	; (8007f50 <HAL_RCC_ClockConfig+0x264>)
 8007e62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007e66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e68:	4b39      	ldr	r3, [pc, #228]	; (8007f50 <HAL_RCC_ClockConfig+0x264>)
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	4936      	ldr	r1, [pc, #216]	; (8007f50 <HAL_RCC_ClockConfig+0x264>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	608b      	str	r3, [r1, #8]
 8007e7a:	e008      	b.n	8007e8e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	2b80      	cmp	r3, #128	; 0x80
 8007e80:	d105      	bne.n	8007e8e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007e82:	4b33      	ldr	r3, [pc, #204]	; (8007f50 <HAL_RCC_ClockConfig+0x264>)
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	4a32      	ldr	r2, [pc, #200]	; (8007f50 <HAL_RCC_ClockConfig+0x264>)
 8007e88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e8c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e8e:	4b2f      	ldr	r3, [pc, #188]	; (8007f4c <HAL_RCC_ClockConfig+0x260>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 030f 	and.w	r3, r3, #15
 8007e96:	683a      	ldr	r2, [r7, #0]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d21d      	bcs.n	8007ed8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e9c:	4b2b      	ldr	r3, [pc, #172]	; (8007f4c <HAL_RCC_ClockConfig+0x260>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f023 020f 	bic.w	r2, r3, #15
 8007ea4:	4929      	ldr	r1, [pc, #164]	; (8007f4c <HAL_RCC_ClockConfig+0x260>)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007eac:	f7fb fade 	bl	800346c <HAL_GetTick>
 8007eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eb2:	e00a      	b.n	8007eca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007eb4:	f7fb fada 	bl	800346c <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d901      	bls.n	8007eca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e03b      	b.n	8007f42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eca:	4b20      	ldr	r3, [pc, #128]	; (8007f4c <HAL_RCC_ClockConfig+0x260>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 030f 	and.w	r3, r3, #15
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d1ed      	bne.n	8007eb4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 0304 	and.w	r3, r3, #4
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d008      	beq.n	8007ef6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ee4:	4b1a      	ldr	r3, [pc, #104]	; (8007f50 <HAL_RCC_ClockConfig+0x264>)
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	4917      	ldr	r1, [pc, #92]	; (8007f50 <HAL_RCC_ClockConfig+0x264>)
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0308 	and.w	r3, r3, #8
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d009      	beq.n	8007f16 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f02:	4b13      	ldr	r3, [pc, #76]	; (8007f50 <HAL_RCC_ClockConfig+0x264>)
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	00db      	lsls	r3, r3, #3
 8007f10:	490f      	ldr	r1, [pc, #60]	; (8007f50 <HAL_RCC_ClockConfig+0x264>)
 8007f12:	4313      	orrs	r3, r2
 8007f14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007f16:	f000 f825 	bl	8007f64 <HAL_RCC_GetSysClockFreq>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	4b0c      	ldr	r3, [pc, #48]	; (8007f50 <HAL_RCC_ClockConfig+0x264>)
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	091b      	lsrs	r3, r3, #4
 8007f22:	f003 030f 	and.w	r3, r3, #15
 8007f26:	490c      	ldr	r1, [pc, #48]	; (8007f58 <HAL_RCC_ClockConfig+0x26c>)
 8007f28:	5ccb      	ldrb	r3, [r1, r3]
 8007f2a:	f003 031f 	and.w	r3, r3, #31
 8007f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f32:	4a0a      	ldr	r2, [pc, #40]	; (8007f5c <HAL_RCC_ClockConfig+0x270>)
 8007f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007f36:	4b0a      	ldr	r3, [pc, #40]	; (8007f60 <HAL_RCC_ClockConfig+0x274>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7f9 feee 	bl	8001d1c <HAL_InitTick>
 8007f40:	4603      	mov	r3, r0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3718      	adds	r7, #24
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	40022000 	.word	0x40022000
 8007f50:	40021000 	.word	0x40021000
 8007f54:	04c4b400 	.word	0x04c4b400
 8007f58:	080152e8 	.word	0x080152e8
 8007f5c:	20000000 	.word	0x20000000
 8007f60:	20000004 	.word	0x20000004

08007f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b087      	sub	sp, #28
 8007f68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007f6a:	4b2c      	ldr	r3, [pc, #176]	; (800801c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	f003 030c 	and.w	r3, r3, #12
 8007f72:	2b04      	cmp	r3, #4
 8007f74:	d102      	bne.n	8007f7c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007f76:	4b2a      	ldr	r3, [pc, #168]	; (8008020 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007f78:	613b      	str	r3, [r7, #16]
 8007f7a:	e047      	b.n	800800c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007f7c:	4b27      	ldr	r3, [pc, #156]	; (800801c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	f003 030c 	and.w	r3, r3, #12
 8007f84:	2b08      	cmp	r3, #8
 8007f86:	d102      	bne.n	8007f8e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007f88:	4b25      	ldr	r3, [pc, #148]	; (8008020 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007f8a:	613b      	str	r3, [r7, #16]
 8007f8c:	e03e      	b.n	800800c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007f8e:	4b23      	ldr	r3, [pc, #140]	; (800801c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f003 030c 	and.w	r3, r3, #12
 8007f96:	2b0c      	cmp	r3, #12
 8007f98:	d136      	bne.n	8008008 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007f9a:	4b20      	ldr	r3, [pc, #128]	; (800801c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	f003 0303 	and.w	r3, r3, #3
 8007fa2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007fa4:	4b1d      	ldr	r3, [pc, #116]	; (800801c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	091b      	lsrs	r3, r3, #4
 8007faa:	f003 030f 	and.w	r3, r3, #15
 8007fae:	3301      	adds	r3, #1
 8007fb0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2b03      	cmp	r3, #3
 8007fb6:	d10c      	bne.n	8007fd2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007fb8:	4a19      	ldr	r2, [pc, #100]	; (8008020 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc0:	4a16      	ldr	r2, [pc, #88]	; (800801c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007fc2:	68d2      	ldr	r2, [r2, #12]
 8007fc4:	0a12      	lsrs	r2, r2, #8
 8007fc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007fca:	fb02 f303 	mul.w	r3, r2, r3
 8007fce:	617b      	str	r3, [r7, #20]
      break;
 8007fd0:	e00c      	b.n	8007fec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007fd2:	4a13      	ldr	r2, [pc, #76]	; (8008020 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fda:	4a10      	ldr	r2, [pc, #64]	; (800801c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007fdc:	68d2      	ldr	r2, [r2, #12]
 8007fde:	0a12      	lsrs	r2, r2, #8
 8007fe0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007fe4:	fb02 f303 	mul.w	r3, r2, r3
 8007fe8:	617b      	str	r3, [r7, #20]
      break;
 8007fea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007fec:	4b0b      	ldr	r3, [pc, #44]	; (800801c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	0e5b      	lsrs	r3, r3, #25
 8007ff2:	f003 0303 	and.w	r3, r3, #3
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	005b      	lsls	r3, r3, #1
 8007ffa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	fbb2 f3f3 	udiv	r3, r2, r3
 8008004:	613b      	str	r3, [r7, #16]
 8008006:	e001      	b.n	800800c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008008:	2300      	movs	r3, #0
 800800a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800800c:	693b      	ldr	r3, [r7, #16]
}
 800800e:	4618      	mov	r0, r3
 8008010:	371c      	adds	r7, #28
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	40021000 	.word	0x40021000
 8008020:	00f42400 	.word	0x00f42400

08008024 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008024:	b480      	push	{r7}
 8008026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008028:	4b03      	ldr	r3, [pc, #12]	; (8008038 <HAL_RCC_GetHCLKFreq+0x14>)
 800802a:	681b      	ldr	r3, [r3, #0]
}
 800802c:	4618      	mov	r0, r3
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	20000000 	.word	0x20000000

0800803c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008040:	f7ff fff0 	bl	8008024 <HAL_RCC_GetHCLKFreq>
 8008044:	4602      	mov	r2, r0
 8008046:	4b06      	ldr	r3, [pc, #24]	; (8008060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	0a1b      	lsrs	r3, r3, #8
 800804c:	f003 0307 	and.w	r3, r3, #7
 8008050:	4904      	ldr	r1, [pc, #16]	; (8008064 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008052:	5ccb      	ldrb	r3, [r1, r3]
 8008054:	f003 031f 	and.w	r3, r3, #31
 8008058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800805c:	4618      	mov	r0, r3
 800805e:	bd80      	pop	{r7, pc}
 8008060:	40021000 	.word	0x40021000
 8008064:	080152f8 	.word	0x080152f8

08008068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800806c:	f7ff ffda 	bl	8008024 <HAL_RCC_GetHCLKFreq>
 8008070:	4602      	mov	r2, r0
 8008072:	4b06      	ldr	r3, [pc, #24]	; (800808c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	0adb      	lsrs	r3, r3, #11
 8008078:	f003 0307 	and.w	r3, r3, #7
 800807c:	4904      	ldr	r1, [pc, #16]	; (8008090 <HAL_RCC_GetPCLK2Freq+0x28>)
 800807e:	5ccb      	ldrb	r3, [r1, r3]
 8008080:	f003 031f 	and.w	r3, r3, #31
 8008084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008088:	4618      	mov	r0, r3
 800808a:	bd80      	pop	{r7, pc}
 800808c:	40021000 	.word	0x40021000
 8008090:	080152f8 	.word	0x080152f8

08008094 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	220f      	movs	r2, #15
 80080a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80080a4:	4b12      	ldr	r3, [pc, #72]	; (80080f0 <HAL_RCC_GetClockConfig+0x5c>)
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f003 0203 	and.w	r2, r3, #3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80080b0:	4b0f      	ldr	r3, [pc, #60]	; (80080f0 <HAL_RCC_GetClockConfig+0x5c>)
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80080bc:	4b0c      	ldr	r3, [pc, #48]	; (80080f0 <HAL_RCC_GetClockConfig+0x5c>)
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80080c8:	4b09      	ldr	r3, [pc, #36]	; (80080f0 <HAL_RCC_GetClockConfig+0x5c>)
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	08db      	lsrs	r3, r3, #3
 80080ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80080d6:	4b07      	ldr	r3, [pc, #28]	; (80080f4 <HAL_RCC_GetClockConfig+0x60>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 020f 	and.w	r2, r3, #15
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	601a      	str	r2, [r3, #0]
}
 80080e2:	bf00      	nop
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	40021000 	.word	0x40021000
 80080f4:	40022000 	.word	0x40022000

080080f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b087      	sub	sp, #28
 80080fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80080fe:	4b1e      	ldr	r3, [pc, #120]	; (8008178 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	f003 0303 	and.w	r3, r3, #3
 8008106:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008108:	4b1b      	ldr	r3, [pc, #108]	; (8008178 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	091b      	lsrs	r3, r3, #4
 800810e:	f003 030f 	and.w	r3, r3, #15
 8008112:	3301      	adds	r3, #1
 8008114:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	2b03      	cmp	r3, #3
 800811a:	d10c      	bne.n	8008136 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800811c:	4a17      	ldr	r2, [pc, #92]	; (800817c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	fbb2 f3f3 	udiv	r3, r2, r3
 8008124:	4a14      	ldr	r2, [pc, #80]	; (8008178 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008126:	68d2      	ldr	r2, [r2, #12]
 8008128:	0a12      	lsrs	r2, r2, #8
 800812a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800812e:	fb02 f303 	mul.w	r3, r2, r3
 8008132:	617b      	str	r3, [r7, #20]
    break;
 8008134:	e00c      	b.n	8008150 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008136:	4a11      	ldr	r2, [pc, #68]	; (800817c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	fbb2 f3f3 	udiv	r3, r2, r3
 800813e:	4a0e      	ldr	r2, [pc, #56]	; (8008178 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008140:	68d2      	ldr	r2, [r2, #12]
 8008142:	0a12      	lsrs	r2, r2, #8
 8008144:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008148:	fb02 f303 	mul.w	r3, r2, r3
 800814c:	617b      	str	r3, [r7, #20]
    break;
 800814e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008150:	4b09      	ldr	r3, [pc, #36]	; (8008178 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	0e5b      	lsrs	r3, r3, #25
 8008156:	f003 0303 	and.w	r3, r3, #3
 800815a:	3301      	adds	r3, #1
 800815c:	005b      	lsls	r3, r3, #1
 800815e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	fbb2 f3f3 	udiv	r3, r2, r3
 8008168:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800816a:	687b      	ldr	r3, [r7, #4]
}
 800816c:	4618      	mov	r0, r3
 800816e:	371c      	adds	r7, #28
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr
 8008178:	40021000 	.word	0x40021000
 800817c:	00f42400 	.word	0x00f42400

08008180 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008188:	2300      	movs	r3, #0
 800818a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800818c:	2300      	movs	r3, #0
 800818e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 8098 	beq.w	80082ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800819e:	2300      	movs	r3, #0
 80081a0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081a2:	4b43      	ldr	r3, [pc, #268]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10d      	bne.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081ae:	4b40      	ldr	r3, [pc, #256]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081b2:	4a3f      	ldr	r2, [pc, #252]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081b8:	6593      	str	r3, [r2, #88]	; 0x58
 80081ba:	4b3d      	ldr	r3, [pc, #244]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081c2:	60bb      	str	r3, [r7, #8]
 80081c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081c6:	2301      	movs	r3, #1
 80081c8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081ca:	4b3a      	ldr	r3, [pc, #232]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a39      	ldr	r2, [pc, #228]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80081d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081d6:	f7fb f949 	bl	800346c <HAL_GetTick>
 80081da:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081dc:	e009      	b.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081de:	f7fb f945 	bl	800346c <HAL_GetTick>
 80081e2:	4602      	mov	r2, r0
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d902      	bls.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	74fb      	strb	r3, [r7, #19]
        break;
 80081f0:	e005      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081f2:	4b30      	ldr	r3, [pc, #192]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d0ef      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80081fe:	7cfb      	ldrb	r3, [r7, #19]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d159      	bne.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008204:	4b2a      	ldr	r3, [pc, #168]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800820a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800820e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d01e      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	429a      	cmp	r2, r3
 800821e:	d019      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008220:	4b23      	ldr	r3, [pc, #140]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800822a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800822c:	4b20      	ldr	r3, [pc, #128]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800822e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008232:	4a1f      	ldr	r2, [pc, #124]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800823c:	4b1c      	ldr	r3, [pc, #112]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800823e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008242:	4a1b      	ldr	r2, [pc, #108]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800824c:	4a18      	ldr	r2, [pc, #96]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	2b00      	cmp	r3, #0
 800825c:	d016      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800825e:	f7fb f905 	bl	800346c <HAL_GetTick>
 8008262:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008264:	e00b      	b.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008266:	f7fb f901 	bl	800346c <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	f241 3288 	movw	r2, #5000	; 0x1388
 8008274:	4293      	cmp	r3, r2
 8008276:	d902      	bls.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008278:	2303      	movs	r3, #3
 800827a:	74fb      	strb	r3, [r7, #19]
            break;
 800827c:	e006      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800827e:	4b0c      	ldr	r3, [pc, #48]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008284:	f003 0302 	and.w	r3, r3, #2
 8008288:	2b00      	cmp	r3, #0
 800828a:	d0ec      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800828c:	7cfb      	ldrb	r3, [r7, #19]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10b      	bne.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008292:	4b07      	ldr	r3, [pc, #28]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008298:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a0:	4903      	ldr	r1, [pc, #12]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80082a8:	e008      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80082aa:	7cfb      	ldrb	r3, [r7, #19]
 80082ac:	74bb      	strb	r3, [r7, #18]
 80082ae:	e005      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80082b0:	40021000 	.word	0x40021000
 80082b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082b8:	7cfb      	ldrb	r3, [r7, #19]
 80082ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082bc:	7c7b      	ldrb	r3, [r7, #17]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d105      	bne.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082c2:	4ba7      	ldr	r3, [pc, #668]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082c6:	4aa6      	ldr	r2, [pc, #664]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00a      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80082da:	4ba1      	ldr	r3, [pc, #644]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082e0:	f023 0203 	bic.w	r2, r3, #3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	499d      	ldr	r1, [pc, #628]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082ea:	4313      	orrs	r3, r2
 80082ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0302 	and.w	r3, r3, #2
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00a      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80082fc:	4b98      	ldr	r3, [pc, #608]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008302:	f023 020c 	bic.w	r2, r3, #12
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	4995      	ldr	r1, [pc, #596]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800830c:	4313      	orrs	r3, r2
 800830e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0304 	and.w	r3, r3, #4
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00a      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800831e:	4b90      	ldr	r3, [pc, #576]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008324:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	498c      	ldr	r1, [pc, #560]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800832e:	4313      	orrs	r3, r2
 8008330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0308 	and.w	r3, r3, #8
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00a      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008340:	4b87      	ldr	r3, [pc, #540]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008346:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	4984      	ldr	r1, [pc, #528]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008350:	4313      	orrs	r3, r2
 8008352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0310 	and.w	r3, r3, #16
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00a      	beq.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008362:	4b7f      	ldr	r3, [pc, #508]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008368:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	497b      	ldr	r1, [pc, #492]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008372:	4313      	orrs	r3, r2
 8008374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0320 	and.w	r3, r3, #32
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00a      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008384:	4b76      	ldr	r3, [pc, #472]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800838a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	4973      	ldr	r1, [pc, #460]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008394:	4313      	orrs	r3, r2
 8008396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00a      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80083a6:	4b6e      	ldr	r3, [pc, #440]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	69db      	ldr	r3, [r3, #28]
 80083b4:	496a      	ldr	r1, [pc, #424]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083b6:	4313      	orrs	r3, r2
 80083b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00a      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80083c8:	4b65      	ldr	r3, [pc, #404]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	4962      	ldr	r1, [pc, #392]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083d8:	4313      	orrs	r3, r2
 80083da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00a      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80083ea:	4b5d      	ldr	r3, [pc, #372]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f8:	4959      	ldr	r1, [pc, #356]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00a      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800840c:	4b54      	ldr	r3, [pc, #336]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800840e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008412:	f023 0203 	bic.w	r2, r3, #3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800841a:	4951      	ldr	r1, [pc, #324]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800841c:	4313      	orrs	r3, r2
 800841e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00a      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800842e:	4b4c      	ldr	r3, [pc, #304]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008434:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843c:	4948      	ldr	r1, [pc, #288]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800843e:	4313      	orrs	r3, r2
 8008440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800844c:	2b00      	cmp	r3, #0
 800844e:	d015      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008450:	4b43      	ldr	r3, [pc, #268]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008456:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845e:	4940      	ldr	r1, [pc, #256]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008460:	4313      	orrs	r3, r2
 8008462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800846a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800846e:	d105      	bne.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008470:	4b3b      	ldr	r3, [pc, #236]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	4a3a      	ldr	r2, [pc, #232]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800847a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008484:	2b00      	cmp	r3, #0
 8008486:	d015      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008488:	4b35      	ldr	r3, [pc, #212]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800848a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800848e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008496:	4932      	ldr	r1, [pc, #200]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008498:	4313      	orrs	r3, r2
 800849a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084a6:	d105      	bne.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084a8:	4b2d      	ldr	r3, [pc, #180]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	4a2c      	ldr	r2, [pc, #176]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084b2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d015      	beq.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80084c0:	4b27      	ldr	r3, [pc, #156]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ce:	4924      	ldr	r1, [pc, #144]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084d0:	4313      	orrs	r3, r2
 80084d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80084de:	d105      	bne.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084e0:	4b1f      	ldr	r3, [pc, #124]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	4a1e      	ldr	r2, [pc, #120]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d015      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80084f8:	4b19      	ldr	r3, [pc, #100]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008506:	4916      	ldr	r1, [pc, #88]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008508:	4313      	orrs	r3, r2
 800850a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008512:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008516:	d105      	bne.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008518:	4b11      	ldr	r3, [pc, #68]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	4a10      	ldr	r2, [pc, #64]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800851e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008522:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800852c:	2b00      	cmp	r3, #0
 800852e:	d019      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008530:	4b0b      	ldr	r3, [pc, #44]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008536:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853e:	4908      	ldr	r1, [pc, #32]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008540:	4313      	orrs	r3, r2
 8008542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800854e:	d109      	bne.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008550:	4b03      	ldr	r3, [pc, #12]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	4a02      	ldr	r2, [pc, #8]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800855a:	60d3      	str	r3, [r2, #12]
 800855c:	e002      	b.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800855e:	bf00      	nop
 8008560:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800856c:	2b00      	cmp	r3, #0
 800856e:	d015      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008570:	4b29      	ldr	r3, [pc, #164]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008576:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800857e:	4926      	ldr	r1, [pc, #152]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008580:	4313      	orrs	r3, r2
 8008582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800858a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800858e:	d105      	bne.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008590:	4b21      	ldr	r3, [pc, #132]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	4a20      	ldr	r2, [pc, #128]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800859a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d015      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80085a8:	4b1b      	ldr	r3, [pc, #108]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085b6:	4918      	ldr	r1, [pc, #96]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085b8:	4313      	orrs	r3, r2
 80085ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c6:	d105      	bne.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80085c8:	4b13      	ldr	r3, [pc, #76]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	4a12      	ldr	r2, [pc, #72]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085d2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d015      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80085e0:	4b0d      	ldr	r3, [pc, #52]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ee:	490a      	ldr	r1, [pc, #40]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085fe:	d105      	bne.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008600:	4b05      	ldr	r3, [pc, #20]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	4a04      	ldr	r2, [pc, #16]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800860a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800860c:	7cbb      	ldrb	r3, [r7, #18]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3718      	adds	r7, #24
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	40021000 	.word	0x40021000

0800861c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d101      	bne.n	800862e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e049      	b.n	80086c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008634:	b2db      	uxtb	r3, r3
 8008636:	2b00      	cmp	r3, #0
 8008638:	d106      	bne.n	8008648 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7f9 ffb2 	bl	80025ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2202      	movs	r2, #2
 800864c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	3304      	adds	r3, #4
 8008658:	4619      	mov	r1, r3
 800865a:	4610      	mov	r0, r2
 800865c:	f001 f824 	bl	80096a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
	...

080086cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d001      	beq.n	80086e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	e054      	b.n	800878e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2202      	movs	r2, #2
 80086e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68da      	ldr	r2, [r3, #12]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f042 0201 	orr.w	r2, r2, #1
 80086fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a26      	ldr	r2, [pc, #152]	; (800879c <HAL_TIM_Base_Start_IT+0xd0>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d022      	beq.n	800874c <HAL_TIM_Base_Start_IT+0x80>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800870e:	d01d      	beq.n	800874c <HAL_TIM_Base_Start_IT+0x80>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a22      	ldr	r2, [pc, #136]	; (80087a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d018      	beq.n	800874c <HAL_TIM_Base_Start_IT+0x80>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a21      	ldr	r2, [pc, #132]	; (80087a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d013      	beq.n	800874c <HAL_TIM_Base_Start_IT+0x80>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a1f      	ldr	r2, [pc, #124]	; (80087a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d00e      	beq.n	800874c <HAL_TIM_Base_Start_IT+0x80>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a1e      	ldr	r2, [pc, #120]	; (80087ac <HAL_TIM_Base_Start_IT+0xe0>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d009      	beq.n	800874c <HAL_TIM_Base_Start_IT+0x80>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a1c      	ldr	r2, [pc, #112]	; (80087b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d004      	beq.n	800874c <HAL_TIM_Base_Start_IT+0x80>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a1b      	ldr	r2, [pc, #108]	; (80087b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d115      	bne.n	8008778 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	689a      	ldr	r2, [r3, #8]
 8008752:	4b19      	ldr	r3, [pc, #100]	; (80087b8 <HAL_TIM_Base_Start_IT+0xec>)
 8008754:	4013      	ands	r3, r2
 8008756:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2b06      	cmp	r3, #6
 800875c:	d015      	beq.n	800878a <HAL_TIM_Base_Start_IT+0xbe>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008764:	d011      	beq.n	800878a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f042 0201 	orr.w	r2, r2, #1
 8008774:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008776:	e008      	b.n	800878a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f042 0201 	orr.w	r2, r2, #1
 8008786:	601a      	str	r2, [r3, #0]
 8008788:	e000      	b.n	800878c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800878a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	40012c00 	.word	0x40012c00
 80087a0:	40000400 	.word	0x40000400
 80087a4:	40000800 	.word	0x40000800
 80087a8:	40000c00 	.word	0x40000c00
 80087ac:	40013400 	.word	0x40013400
 80087b0:	40014000 	.word	0x40014000
 80087b4:	40015000 	.word	0x40015000
 80087b8:	00010007 	.word	0x00010007

080087bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d101      	bne.n	80087ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e049      	b.n	8008862 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d106      	bne.n	80087e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f841 	bl	800886a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2202      	movs	r2, #2
 80087ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	3304      	adds	r3, #4
 80087f8:	4619      	mov	r1, r3
 80087fa:	4610      	mov	r0, r2
 80087fc:	f000 ff54 	bl	80096a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800886a:	b480      	push	{r7}
 800886c:	b083      	sub	sp, #12
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008872:	bf00      	nop
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
	...

08008880 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d109      	bne.n	80088a4 <HAL_TIM_PWM_Start+0x24>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b01      	cmp	r3, #1
 800889a:	bf14      	ite	ne
 800889c:	2301      	movne	r3, #1
 800889e:	2300      	moveq	r3, #0
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	e03c      	b.n	800891e <HAL_TIM_PWM_Start+0x9e>
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	2b04      	cmp	r3, #4
 80088a8:	d109      	bne.n	80088be <HAL_TIM_PWM_Start+0x3e>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	bf14      	ite	ne
 80088b6:	2301      	movne	r3, #1
 80088b8:	2300      	moveq	r3, #0
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	e02f      	b.n	800891e <HAL_TIM_PWM_Start+0x9e>
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	2b08      	cmp	r3, #8
 80088c2:	d109      	bne.n	80088d8 <HAL_TIM_PWM_Start+0x58>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	bf14      	ite	ne
 80088d0:	2301      	movne	r3, #1
 80088d2:	2300      	moveq	r3, #0
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	e022      	b.n	800891e <HAL_TIM_PWM_Start+0x9e>
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	2b0c      	cmp	r3, #12
 80088dc:	d109      	bne.n	80088f2 <HAL_TIM_PWM_Start+0x72>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	bf14      	ite	ne
 80088ea:	2301      	movne	r3, #1
 80088ec:	2300      	moveq	r3, #0
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	e015      	b.n	800891e <HAL_TIM_PWM_Start+0x9e>
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	2b10      	cmp	r3, #16
 80088f6:	d109      	bne.n	800890c <HAL_TIM_PWM_Start+0x8c>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	2b01      	cmp	r3, #1
 8008902:	bf14      	ite	ne
 8008904:	2301      	movne	r3, #1
 8008906:	2300      	moveq	r3, #0
 8008908:	b2db      	uxtb	r3, r3
 800890a:	e008      	b.n	800891e <HAL_TIM_PWM_Start+0x9e>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008912:	b2db      	uxtb	r3, r3
 8008914:	2b01      	cmp	r3, #1
 8008916:	bf14      	ite	ne
 8008918:	2301      	movne	r3, #1
 800891a:	2300      	moveq	r3, #0
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d001      	beq.n	8008926 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e0a6      	b.n	8008a74 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d104      	bne.n	8008936 <HAL_TIM_PWM_Start+0xb6>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2202      	movs	r2, #2
 8008930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008934:	e023      	b.n	800897e <HAL_TIM_PWM_Start+0xfe>
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	2b04      	cmp	r3, #4
 800893a:	d104      	bne.n	8008946 <HAL_TIM_PWM_Start+0xc6>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2202      	movs	r2, #2
 8008940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008944:	e01b      	b.n	800897e <HAL_TIM_PWM_Start+0xfe>
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	2b08      	cmp	r3, #8
 800894a:	d104      	bne.n	8008956 <HAL_TIM_PWM_Start+0xd6>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2202      	movs	r2, #2
 8008950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008954:	e013      	b.n	800897e <HAL_TIM_PWM_Start+0xfe>
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	2b0c      	cmp	r3, #12
 800895a:	d104      	bne.n	8008966 <HAL_TIM_PWM_Start+0xe6>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2202      	movs	r2, #2
 8008960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008964:	e00b      	b.n	800897e <HAL_TIM_PWM_Start+0xfe>
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	2b10      	cmp	r3, #16
 800896a:	d104      	bne.n	8008976 <HAL_TIM_PWM_Start+0xf6>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2202      	movs	r2, #2
 8008970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008974:	e003      	b.n	800897e <HAL_TIM_PWM_Start+0xfe>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2202      	movs	r2, #2
 800897a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2201      	movs	r2, #1
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	4618      	mov	r0, r3
 8008988:	f001 fc26 	bl	800a1d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a3a      	ldr	r2, [pc, #232]	; (8008a7c <HAL_TIM_PWM_Start+0x1fc>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d018      	beq.n	80089c8 <HAL_TIM_PWM_Start+0x148>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a39      	ldr	r2, [pc, #228]	; (8008a80 <HAL_TIM_PWM_Start+0x200>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d013      	beq.n	80089c8 <HAL_TIM_PWM_Start+0x148>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a37      	ldr	r2, [pc, #220]	; (8008a84 <HAL_TIM_PWM_Start+0x204>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d00e      	beq.n	80089c8 <HAL_TIM_PWM_Start+0x148>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a36      	ldr	r2, [pc, #216]	; (8008a88 <HAL_TIM_PWM_Start+0x208>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d009      	beq.n	80089c8 <HAL_TIM_PWM_Start+0x148>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a34      	ldr	r2, [pc, #208]	; (8008a8c <HAL_TIM_PWM_Start+0x20c>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d004      	beq.n	80089c8 <HAL_TIM_PWM_Start+0x148>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a33      	ldr	r2, [pc, #204]	; (8008a90 <HAL_TIM_PWM_Start+0x210>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d101      	bne.n	80089cc <HAL_TIM_PWM_Start+0x14c>
 80089c8:	2301      	movs	r3, #1
 80089ca:	e000      	b.n	80089ce <HAL_TIM_PWM_Start+0x14e>
 80089cc:	2300      	movs	r3, #0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d007      	beq.n	80089e2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a25      	ldr	r2, [pc, #148]	; (8008a7c <HAL_TIM_PWM_Start+0x1fc>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d022      	beq.n	8008a32 <HAL_TIM_PWM_Start+0x1b2>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089f4:	d01d      	beq.n	8008a32 <HAL_TIM_PWM_Start+0x1b2>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a26      	ldr	r2, [pc, #152]	; (8008a94 <HAL_TIM_PWM_Start+0x214>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d018      	beq.n	8008a32 <HAL_TIM_PWM_Start+0x1b2>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a24      	ldr	r2, [pc, #144]	; (8008a98 <HAL_TIM_PWM_Start+0x218>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d013      	beq.n	8008a32 <HAL_TIM_PWM_Start+0x1b2>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a23      	ldr	r2, [pc, #140]	; (8008a9c <HAL_TIM_PWM_Start+0x21c>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d00e      	beq.n	8008a32 <HAL_TIM_PWM_Start+0x1b2>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a19      	ldr	r2, [pc, #100]	; (8008a80 <HAL_TIM_PWM_Start+0x200>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d009      	beq.n	8008a32 <HAL_TIM_PWM_Start+0x1b2>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a18      	ldr	r2, [pc, #96]	; (8008a84 <HAL_TIM_PWM_Start+0x204>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d004      	beq.n	8008a32 <HAL_TIM_PWM_Start+0x1b2>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a18      	ldr	r2, [pc, #96]	; (8008a90 <HAL_TIM_PWM_Start+0x210>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d115      	bne.n	8008a5e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	689a      	ldr	r2, [r3, #8]
 8008a38:	4b19      	ldr	r3, [pc, #100]	; (8008aa0 <HAL_TIM_PWM_Start+0x220>)
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2b06      	cmp	r3, #6
 8008a42:	d015      	beq.n	8008a70 <HAL_TIM_PWM_Start+0x1f0>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a4a:	d011      	beq.n	8008a70 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f042 0201 	orr.w	r2, r2, #1
 8008a5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a5c:	e008      	b.n	8008a70 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f042 0201 	orr.w	r2, r2, #1
 8008a6c:	601a      	str	r2, [r3, #0]
 8008a6e:	e000      	b.n	8008a72 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}
 8008a7c:	40012c00 	.word	0x40012c00
 8008a80:	40013400 	.word	0x40013400
 8008a84:	40014000 	.word	0x40014000
 8008a88:	40014400 	.word	0x40014400
 8008a8c:	40014800 	.word	0x40014800
 8008a90:	40015000 	.word	0x40015000
 8008a94:	40000400 	.word	0x40000400
 8008a98:	40000800 	.word	0x40000800
 8008a9c:	40000c00 	.word	0x40000c00
 8008aa0:	00010007 	.word	0x00010007

08008aa4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d101      	bne.n	8008ab6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e049      	b.n	8008b4a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d106      	bne.n	8008ad0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f841 	bl	8008b52 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2202      	movs	r2, #2
 8008ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	3304      	adds	r3, #4
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	4610      	mov	r0, r2
 8008ae4:	f000 fde0 	bl	80096a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008b52:	b480      	push	{r7}
 8008b54:	b083      	sub	sp, #12
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008b5a:	bf00      	nop
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b086      	sub	sp, #24
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d101      	bne.n	8008b7a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e097      	b.n	8008caa <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d106      	bne.n	8008b94 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f7f9 fdda 	bl	8002748 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2202      	movs	r2, #2
 8008b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	6812      	ldr	r2, [r2, #0]
 8008ba6:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8008baa:	f023 0307 	bic.w	r3, r3, #7
 8008bae:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	3304      	adds	r3, #4
 8008bb8:	4619      	mov	r1, r3
 8008bba:	4610      	mov	r0, r2
 8008bbc:	f000 fd74 	bl	80096a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
 8008bd6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008be8:	f023 0303 	bic.w	r3, r3, #3
 8008bec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	689a      	ldr	r2, [r3, #8]
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	021b      	lsls	r3, r3, #8
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	693a      	ldr	r2, [r7, #16]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008c06:	f023 030c 	bic.w	r3, r3, #12
 8008c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	68da      	ldr	r2, [r3, #12]
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	69db      	ldr	r3, [r3, #28]
 8008c20:	021b      	lsls	r3, r3, #8
 8008c22:	4313      	orrs	r3, r2
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	011a      	lsls	r2, r3, #4
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	6a1b      	ldr	r3, [r3, #32]
 8008c34:	031b      	lsls	r3, r3, #12
 8008c36:	4313      	orrs	r3, r2
 8008c38:	693a      	ldr	r2, [r7, #16]
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008c44:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008c4c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	011b      	lsls	r3, r3, #4
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3718      	adds	r7, #24
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b084      	sub	sp, #16
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cc2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008cca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cd2:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cda:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d110      	bne.n	8008d04 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d102      	bne.n	8008cee <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008ce8:	7b7b      	ldrb	r3, [r7, #13]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d001      	beq.n	8008cf2 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e069      	b.n	8008dc6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2202      	movs	r2, #2
 8008cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2202      	movs	r2, #2
 8008cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d02:	e031      	b.n	8008d68 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	2b04      	cmp	r3, #4
 8008d08:	d110      	bne.n	8008d2c <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d0a:	7bbb      	ldrb	r3, [r7, #14]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d102      	bne.n	8008d16 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d10:	7b3b      	ldrb	r3, [r7, #12]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d001      	beq.n	8008d1a <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e055      	b.n	8008dc6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2202      	movs	r2, #2
 8008d1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2202      	movs	r2, #2
 8008d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d2a:	e01d      	b.n	8008d68 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d2c:	7bfb      	ldrb	r3, [r7, #15]
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d108      	bne.n	8008d44 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d32:	7bbb      	ldrb	r3, [r7, #14]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d105      	bne.n	8008d44 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d38:	7b7b      	ldrb	r3, [r7, #13]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d102      	bne.n	8008d44 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d3e:	7b3b      	ldrb	r3, [r7, #12]
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d001      	beq.n	8008d48 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	e03e      	b.n	8008dc6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2202      	movs	r2, #2
 8008d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2202      	movs	r2, #2
 8008d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2202      	movs	r2, #2
 8008d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2202      	movs	r2, #2
 8008d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d003      	beq.n	8008d76 <HAL_TIM_Encoder_Start+0xc4>
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	2b04      	cmp	r3, #4
 8008d72:	d008      	beq.n	8008d86 <HAL_TIM_Encoder_Start+0xd4>
 8008d74:	e00f      	b.n	8008d96 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	2100      	movs	r1, #0
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f001 fa2a 	bl	800a1d8 <TIM_CCxChannelCmd>
      break;
 8008d84:	e016      	b.n	8008db4 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	2104      	movs	r1, #4
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f001 fa22 	bl	800a1d8 <TIM_CCxChannelCmd>
      break;
 8008d94:	e00e      	b.n	8008db4 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f001 fa1a 	bl	800a1d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2201      	movs	r2, #1
 8008daa:	2104      	movs	r1, #4
 8008dac:	4618      	mov	r0, r3
 8008dae:	f001 fa13 	bl	800a1d8 <TIM_CCxChannelCmd>
      break;
 8008db2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f042 0201 	orr.w	r2, r2, #1
 8008dc2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b082      	sub	sp, #8
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	f003 0302 	and.w	r3, r3, #2
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	d122      	bne.n	8008e2a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	f003 0302 	and.w	r3, r3, #2
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d11b      	bne.n	8008e2a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f06f 0202 	mvn.w	r2, #2
 8008dfa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	f003 0303 	and.w	r3, r3, #3
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d003      	beq.n	8008e18 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 fc2b 	bl	800966c <HAL_TIM_IC_CaptureCallback>
 8008e16:	e005      	b.n	8008e24 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fc1d 	bl	8009658 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fc2e 	bl	8009680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	f003 0304 	and.w	r3, r3, #4
 8008e34:	2b04      	cmp	r3, #4
 8008e36:	d122      	bne.n	8008e7e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	f003 0304 	and.w	r3, r3, #4
 8008e42:	2b04      	cmp	r3, #4
 8008e44:	d11b      	bne.n	8008e7e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f06f 0204 	mvn.w	r2, #4
 8008e4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2202      	movs	r2, #2
 8008e54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	699b      	ldr	r3, [r3, #24]
 8008e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d003      	beq.n	8008e6c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fc01 	bl	800966c <HAL_TIM_IC_CaptureCallback>
 8008e6a:	e005      	b.n	8008e78 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fbf3 	bl	8009658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fc04 	bl	8009680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	691b      	ldr	r3, [r3, #16]
 8008e84:	f003 0308 	and.w	r3, r3, #8
 8008e88:	2b08      	cmp	r3, #8
 8008e8a:	d122      	bne.n	8008ed2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	f003 0308 	and.w	r3, r3, #8
 8008e96:	2b08      	cmp	r3, #8
 8008e98:	d11b      	bne.n	8008ed2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f06f 0208 	mvn.w	r2, #8
 8008ea2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2204      	movs	r2, #4
 8008ea8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	69db      	ldr	r3, [r3, #28]
 8008eb0:	f003 0303 	and.w	r3, r3, #3
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d003      	beq.n	8008ec0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 fbd7 	bl	800966c <HAL_TIM_IC_CaptureCallback>
 8008ebe:	e005      	b.n	8008ecc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fbc9 	bl	8009658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fbda 	bl	8009680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	f003 0310 	and.w	r3, r3, #16
 8008edc:	2b10      	cmp	r3, #16
 8008ede:	d122      	bne.n	8008f26 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	f003 0310 	and.w	r3, r3, #16
 8008eea:	2b10      	cmp	r3, #16
 8008eec:	d11b      	bne.n	8008f26 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f06f 0210 	mvn.w	r2, #16
 8008ef6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2208      	movs	r2, #8
 8008efc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	69db      	ldr	r3, [r3, #28]
 8008f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d003      	beq.n	8008f14 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fbad 	bl	800966c <HAL_TIM_IC_CaptureCallback>
 8008f12:	e005      	b.n	8008f20 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fb9f 	bl	8009658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fbb0 	bl	8009680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	f003 0301 	and.w	r3, r3, #1
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d10e      	bne.n	8008f52 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	f003 0301 	and.w	r3, r3, #1
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d107      	bne.n	8008f52 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f06f 0201 	mvn.w	r2, #1
 8008f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f7f8 fea5 	bl	8001c9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f5c:	2b80      	cmp	r3, #128	; 0x80
 8008f5e:	d10e      	bne.n	8008f7e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f6a:	2b80      	cmp	r3, #128	; 0x80
 8008f6c:	d107      	bne.n	8008f7e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f001 fb5d 	bl	800a638 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f8c:	d10e      	bne.n	8008fac <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f98:	2b80      	cmp	r3, #128	; 0x80
 8008f9a:	d107      	bne.n	8008fac <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f001 fb50 	bl	800a64c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb6:	2b40      	cmp	r3, #64	; 0x40
 8008fb8:	d10e      	bne.n	8008fd8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fc4:	2b40      	cmp	r3, #64	; 0x40
 8008fc6:	d107      	bne.n	8008fd8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fb5e 	bl	8009694 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	691b      	ldr	r3, [r3, #16]
 8008fde:	f003 0320 	and.w	r3, r3, #32
 8008fe2:	2b20      	cmp	r3, #32
 8008fe4:	d10e      	bne.n	8009004 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	f003 0320 	and.w	r3, r3, #32
 8008ff0:	2b20      	cmp	r3, #32
 8008ff2:	d107      	bne.n	8009004 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f06f 0220 	mvn.w	r2, #32
 8008ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f001 fb10 	bl	800a624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800900e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009012:	d10f      	bne.n	8009034 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800901e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009022:	d107      	bne.n	8009034 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800902c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f001 fb16 	bl	800a660 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800903e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009042:	d10f      	bne.n	8009064 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800904e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009052:	d107      	bne.n	8009064 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800905c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f001 fb08 	bl	800a674 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800906e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009072:	d10f      	bne.n	8009094 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800907e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009082:	d107      	bne.n	8009094 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800908c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f001 fafa 	bl	800a688 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800909e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090a2:	d10f      	bne.n	80090c4 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090b2:	d107      	bne.n	80090c4 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80090bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f001 faec 	bl	800a69c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090c4:	bf00      	nop
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b086      	sub	sp, #24
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090d8:	2300      	movs	r3, #0
 80090da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d101      	bne.n	80090ea <HAL_TIM_IC_ConfigChannel+0x1e>
 80090e6:	2302      	movs	r3, #2
 80090e8:	e088      	b.n	80091fc <HAL_TIM_IC_ConfigChannel+0x130>
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2201      	movs	r2, #1
 80090ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d11b      	bne.n	8009130 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6818      	ldr	r0, [r3, #0]
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	6819      	ldr	r1, [r3, #0]
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	685a      	ldr	r2, [r3, #4]
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	f000 fea0 	bl	8009e4c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	699a      	ldr	r2, [r3, #24]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f022 020c 	bic.w	r2, r2, #12
 800911a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6999      	ldr	r1, [r3, #24]
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	689a      	ldr	r2, [r3, #8]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	430a      	orrs	r2, r1
 800912c:	619a      	str	r2, [r3, #24]
 800912e:	e060      	b.n	80091f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b04      	cmp	r3, #4
 8009134:	d11c      	bne.n	8009170 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6818      	ldr	r0, [r3, #0]
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	6819      	ldr	r1, [r3, #0]
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	685a      	ldr	r2, [r3, #4]
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	f000 ff24 	bl	8009f92 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	699a      	ldr	r2, [r3, #24]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009158:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	6999      	ldr	r1, [r3, #24]
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	021a      	lsls	r2, r3, #8
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	430a      	orrs	r2, r1
 800916c:	619a      	str	r2, [r3, #24]
 800916e:	e040      	b.n	80091f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b08      	cmp	r3, #8
 8009174:	d11b      	bne.n	80091ae <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6818      	ldr	r0, [r3, #0]
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	6819      	ldr	r1, [r3, #0]
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	685a      	ldr	r2, [r3, #4]
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	f000 ff71 	bl	800a06c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	69da      	ldr	r2, [r3, #28]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f022 020c 	bic.w	r2, r2, #12
 8009198:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	69d9      	ldr	r1, [r3, #28]
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	689a      	ldr	r2, [r3, #8]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	430a      	orrs	r2, r1
 80091aa:	61da      	str	r2, [r3, #28]
 80091ac:	e021      	b.n	80091f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2b0c      	cmp	r3, #12
 80091b2:	d11c      	bne.n	80091ee <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6818      	ldr	r0, [r3, #0]
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	6819      	ldr	r1, [r3, #0]
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	685a      	ldr	r2, [r3, #4]
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	f000 ff8e 	bl	800a0e4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	69da      	ldr	r2, [r3, #28]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80091d6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	69d9      	ldr	r1, [r3, #28]
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	021a      	lsls	r2, r3, #8
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	430a      	orrs	r2, r1
 80091ea:	61da      	str	r2, [r3, #28]
 80091ec:	e001      	b.n	80091f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80091fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3718      	adds	r7, #24
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800921a:	2b01      	cmp	r3, #1
 800921c:	d101      	bne.n	8009222 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800921e:	2302      	movs	r3, #2
 8009220:	e0ff      	b.n	8009422 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2b14      	cmp	r3, #20
 800922e:	f200 80f0 	bhi.w	8009412 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009232:	a201      	add	r2, pc, #4	; (adr r2, 8009238 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009238:	0800928d 	.word	0x0800928d
 800923c:	08009413 	.word	0x08009413
 8009240:	08009413 	.word	0x08009413
 8009244:	08009413 	.word	0x08009413
 8009248:	080092cd 	.word	0x080092cd
 800924c:	08009413 	.word	0x08009413
 8009250:	08009413 	.word	0x08009413
 8009254:	08009413 	.word	0x08009413
 8009258:	0800930f 	.word	0x0800930f
 800925c:	08009413 	.word	0x08009413
 8009260:	08009413 	.word	0x08009413
 8009264:	08009413 	.word	0x08009413
 8009268:	0800934f 	.word	0x0800934f
 800926c:	08009413 	.word	0x08009413
 8009270:	08009413 	.word	0x08009413
 8009274:	08009413 	.word	0x08009413
 8009278:	08009391 	.word	0x08009391
 800927c:	08009413 	.word	0x08009413
 8009280:	08009413 	.word	0x08009413
 8009284:	08009413 	.word	0x08009413
 8009288:	080093d1 	.word	0x080093d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68b9      	ldr	r1, [r7, #8]
 8009292:	4618      	mov	r0, r3
 8009294:	f000 fab0 	bl	80097f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	699a      	ldr	r2, [r3, #24]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f042 0208 	orr.w	r2, r2, #8
 80092a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	699a      	ldr	r2, [r3, #24]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f022 0204 	bic.w	r2, r2, #4
 80092b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6999      	ldr	r1, [r3, #24]
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	691a      	ldr	r2, [r3, #16]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	430a      	orrs	r2, r1
 80092c8:	619a      	str	r2, [r3, #24]
      break;
 80092ca:	e0a5      	b.n	8009418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68b9      	ldr	r1, [r7, #8]
 80092d2:	4618      	mov	r0, r3
 80092d4:	f000 fb2a 	bl	800992c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	699a      	ldr	r2, [r3, #24]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	699a      	ldr	r2, [r3, #24]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6999      	ldr	r1, [r3, #24]
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	021a      	lsls	r2, r3, #8
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	430a      	orrs	r2, r1
 800930a:	619a      	str	r2, [r3, #24]
      break;
 800930c:	e084      	b.n	8009418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68b9      	ldr	r1, [r7, #8]
 8009314:	4618      	mov	r0, r3
 8009316:	f000 fb9d 	bl	8009a54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	69da      	ldr	r2, [r3, #28]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f042 0208 	orr.w	r2, r2, #8
 8009328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	69da      	ldr	r2, [r3, #28]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f022 0204 	bic.w	r2, r2, #4
 8009338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	69d9      	ldr	r1, [r3, #28]
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	691a      	ldr	r2, [r3, #16]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	430a      	orrs	r2, r1
 800934a:	61da      	str	r2, [r3, #28]
      break;
 800934c:	e064      	b.n	8009418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68b9      	ldr	r1, [r7, #8]
 8009354:	4618      	mov	r0, r3
 8009356:	f000 fc0f 	bl	8009b78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	69da      	ldr	r2, [r3, #28]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	69da      	ldr	r2, [r3, #28]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	69d9      	ldr	r1, [r3, #28]
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	021a      	lsls	r2, r3, #8
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	430a      	orrs	r2, r1
 800938c:	61da      	str	r2, [r3, #28]
      break;
 800938e:	e043      	b.n	8009418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68b9      	ldr	r1, [r7, #8]
 8009396:	4618      	mov	r0, r3
 8009398:	f000 fc82 	bl	8009ca0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f042 0208 	orr.w	r2, r2, #8
 80093aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f022 0204 	bic.w	r2, r2, #4
 80093ba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	691a      	ldr	r2, [r3, #16]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	430a      	orrs	r2, r1
 80093cc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80093ce:	e023      	b.n	8009418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68b9      	ldr	r1, [r7, #8]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 fccc 	bl	8009d74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093fa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	021a      	lsls	r2, r3, #8
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	430a      	orrs	r2, r1
 800940e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009410:	e002      	b.n	8009418 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	75fb      	strb	r3, [r7, #23]
      break;
 8009416:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2200      	movs	r2, #0
 800941c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009420:	7dfb      	ldrb	r3, [r7, #23]
}
 8009422:	4618      	mov	r0, r3
 8009424:	3718      	adds	r7, #24
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop

0800942c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009436:	2300      	movs	r3, #0
 8009438:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009440:	2b01      	cmp	r3, #1
 8009442:	d101      	bne.n	8009448 <HAL_TIM_ConfigClockSource+0x1c>
 8009444:	2302      	movs	r3, #2
 8009446:	e0f6      	b.n	8009636 <HAL_TIM_ConfigClockSource+0x20a>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2202      	movs	r2, #2
 8009454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009466:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800946a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009472:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68ba      	ldr	r2, [r7, #8]
 800947a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a6f      	ldr	r2, [pc, #444]	; (8009640 <HAL_TIM_ConfigClockSource+0x214>)
 8009482:	4293      	cmp	r3, r2
 8009484:	f000 80c1 	beq.w	800960a <HAL_TIM_ConfigClockSource+0x1de>
 8009488:	4a6d      	ldr	r2, [pc, #436]	; (8009640 <HAL_TIM_ConfigClockSource+0x214>)
 800948a:	4293      	cmp	r3, r2
 800948c:	f200 80c6 	bhi.w	800961c <HAL_TIM_ConfigClockSource+0x1f0>
 8009490:	4a6c      	ldr	r2, [pc, #432]	; (8009644 <HAL_TIM_ConfigClockSource+0x218>)
 8009492:	4293      	cmp	r3, r2
 8009494:	f000 80b9 	beq.w	800960a <HAL_TIM_ConfigClockSource+0x1de>
 8009498:	4a6a      	ldr	r2, [pc, #424]	; (8009644 <HAL_TIM_ConfigClockSource+0x218>)
 800949a:	4293      	cmp	r3, r2
 800949c:	f200 80be 	bhi.w	800961c <HAL_TIM_ConfigClockSource+0x1f0>
 80094a0:	4a69      	ldr	r2, [pc, #420]	; (8009648 <HAL_TIM_ConfigClockSource+0x21c>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	f000 80b1 	beq.w	800960a <HAL_TIM_ConfigClockSource+0x1de>
 80094a8:	4a67      	ldr	r2, [pc, #412]	; (8009648 <HAL_TIM_ConfigClockSource+0x21c>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	f200 80b6 	bhi.w	800961c <HAL_TIM_ConfigClockSource+0x1f0>
 80094b0:	4a66      	ldr	r2, [pc, #408]	; (800964c <HAL_TIM_ConfigClockSource+0x220>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	f000 80a9 	beq.w	800960a <HAL_TIM_ConfigClockSource+0x1de>
 80094b8:	4a64      	ldr	r2, [pc, #400]	; (800964c <HAL_TIM_ConfigClockSource+0x220>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	f200 80ae 	bhi.w	800961c <HAL_TIM_ConfigClockSource+0x1f0>
 80094c0:	4a63      	ldr	r2, [pc, #396]	; (8009650 <HAL_TIM_ConfigClockSource+0x224>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	f000 80a1 	beq.w	800960a <HAL_TIM_ConfigClockSource+0x1de>
 80094c8:	4a61      	ldr	r2, [pc, #388]	; (8009650 <HAL_TIM_ConfigClockSource+0x224>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	f200 80a6 	bhi.w	800961c <HAL_TIM_ConfigClockSource+0x1f0>
 80094d0:	4a60      	ldr	r2, [pc, #384]	; (8009654 <HAL_TIM_ConfigClockSource+0x228>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	f000 8099 	beq.w	800960a <HAL_TIM_ConfigClockSource+0x1de>
 80094d8:	4a5e      	ldr	r2, [pc, #376]	; (8009654 <HAL_TIM_ConfigClockSource+0x228>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	f200 809e 	bhi.w	800961c <HAL_TIM_ConfigClockSource+0x1f0>
 80094e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80094e4:	f000 8091 	beq.w	800960a <HAL_TIM_ConfigClockSource+0x1de>
 80094e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80094ec:	f200 8096 	bhi.w	800961c <HAL_TIM_ConfigClockSource+0x1f0>
 80094f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094f4:	f000 8089 	beq.w	800960a <HAL_TIM_ConfigClockSource+0x1de>
 80094f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094fc:	f200 808e 	bhi.w	800961c <HAL_TIM_ConfigClockSource+0x1f0>
 8009500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009504:	d03e      	beq.n	8009584 <HAL_TIM_ConfigClockSource+0x158>
 8009506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800950a:	f200 8087 	bhi.w	800961c <HAL_TIM_ConfigClockSource+0x1f0>
 800950e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009512:	f000 8086 	beq.w	8009622 <HAL_TIM_ConfigClockSource+0x1f6>
 8009516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800951a:	d87f      	bhi.n	800961c <HAL_TIM_ConfigClockSource+0x1f0>
 800951c:	2b70      	cmp	r3, #112	; 0x70
 800951e:	d01a      	beq.n	8009556 <HAL_TIM_ConfigClockSource+0x12a>
 8009520:	2b70      	cmp	r3, #112	; 0x70
 8009522:	d87b      	bhi.n	800961c <HAL_TIM_ConfigClockSource+0x1f0>
 8009524:	2b60      	cmp	r3, #96	; 0x60
 8009526:	d050      	beq.n	80095ca <HAL_TIM_ConfigClockSource+0x19e>
 8009528:	2b60      	cmp	r3, #96	; 0x60
 800952a:	d877      	bhi.n	800961c <HAL_TIM_ConfigClockSource+0x1f0>
 800952c:	2b50      	cmp	r3, #80	; 0x50
 800952e:	d03c      	beq.n	80095aa <HAL_TIM_ConfigClockSource+0x17e>
 8009530:	2b50      	cmp	r3, #80	; 0x50
 8009532:	d873      	bhi.n	800961c <HAL_TIM_ConfigClockSource+0x1f0>
 8009534:	2b40      	cmp	r3, #64	; 0x40
 8009536:	d058      	beq.n	80095ea <HAL_TIM_ConfigClockSource+0x1be>
 8009538:	2b40      	cmp	r3, #64	; 0x40
 800953a:	d86f      	bhi.n	800961c <HAL_TIM_ConfigClockSource+0x1f0>
 800953c:	2b30      	cmp	r3, #48	; 0x30
 800953e:	d064      	beq.n	800960a <HAL_TIM_ConfigClockSource+0x1de>
 8009540:	2b30      	cmp	r3, #48	; 0x30
 8009542:	d86b      	bhi.n	800961c <HAL_TIM_ConfigClockSource+0x1f0>
 8009544:	2b20      	cmp	r3, #32
 8009546:	d060      	beq.n	800960a <HAL_TIM_ConfigClockSource+0x1de>
 8009548:	2b20      	cmp	r3, #32
 800954a:	d867      	bhi.n	800961c <HAL_TIM_ConfigClockSource+0x1f0>
 800954c:	2b00      	cmp	r3, #0
 800954e:	d05c      	beq.n	800960a <HAL_TIM_ConfigClockSource+0x1de>
 8009550:	2b10      	cmp	r3, #16
 8009552:	d05a      	beq.n	800960a <HAL_TIM_ConfigClockSource+0x1de>
 8009554:	e062      	b.n	800961c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6818      	ldr	r0, [r3, #0]
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	6899      	ldr	r1, [r3, #8]
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	685a      	ldr	r2, [r3, #4]
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	f000 fe17 	bl	800a198 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009578:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68ba      	ldr	r2, [r7, #8]
 8009580:	609a      	str	r2, [r3, #8]
      break;
 8009582:	e04f      	b.n	8009624 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6818      	ldr	r0, [r3, #0]
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	6899      	ldr	r1, [r3, #8]
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	685a      	ldr	r2, [r3, #4]
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	f000 fe00 	bl	800a198 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	689a      	ldr	r2, [r3, #8]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095a6:	609a      	str	r2, [r3, #8]
      break;
 80095a8:	e03c      	b.n	8009624 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6818      	ldr	r0, [r3, #0]
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	6859      	ldr	r1, [r3, #4]
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	461a      	mov	r2, r3
 80095b8:	f000 fcbc 	bl	8009f34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2150      	movs	r1, #80	; 0x50
 80095c2:	4618      	mov	r0, r3
 80095c4:	f000 fdcb 	bl	800a15e <TIM_ITRx_SetConfig>
      break;
 80095c8:	e02c      	b.n	8009624 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6818      	ldr	r0, [r3, #0]
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	6859      	ldr	r1, [r3, #4]
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	461a      	mov	r2, r3
 80095d8:	f000 fd18 	bl	800a00c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2160      	movs	r1, #96	; 0x60
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 fdbb 	bl	800a15e <TIM_ITRx_SetConfig>
      break;
 80095e8:	e01c      	b.n	8009624 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6818      	ldr	r0, [r3, #0]
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	6859      	ldr	r1, [r3, #4]
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	461a      	mov	r2, r3
 80095f8:	f000 fc9c 	bl	8009f34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2140      	movs	r1, #64	; 0x40
 8009602:	4618      	mov	r0, r3
 8009604:	f000 fdab 	bl	800a15e <TIM_ITRx_SetConfig>
      break;
 8009608:	e00c      	b.n	8009624 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4619      	mov	r1, r3
 8009614:	4610      	mov	r0, r2
 8009616:	f000 fda2 	bl	800a15e <TIM_ITRx_SetConfig>
      break;
 800961a:	e003      	b.n	8009624 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	73fb      	strb	r3, [r7, #15]
      break;
 8009620:	e000      	b.n	8009624 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009622:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009634:	7bfb      	ldrb	r3, [r7, #15]
}
 8009636:	4618      	mov	r0, r3
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	00100070 	.word	0x00100070
 8009644:	00100060 	.word	0x00100060
 8009648:	00100050 	.word	0x00100050
 800964c:	00100040 	.word	0x00100040
 8009650:	00100030 	.word	0x00100030
 8009654:	00100020 	.word	0x00100020

08009658 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a46      	ldr	r2, [pc, #280]	; (80097d4 <TIM_Base_SetConfig+0x12c>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d017      	beq.n	80096f0 <TIM_Base_SetConfig+0x48>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096c6:	d013      	beq.n	80096f0 <TIM_Base_SetConfig+0x48>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a43      	ldr	r2, [pc, #268]	; (80097d8 <TIM_Base_SetConfig+0x130>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d00f      	beq.n	80096f0 <TIM_Base_SetConfig+0x48>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a42      	ldr	r2, [pc, #264]	; (80097dc <TIM_Base_SetConfig+0x134>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d00b      	beq.n	80096f0 <TIM_Base_SetConfig+0x48>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a41      	ldr	r2, [pc, #260]	; (80097e0 <TIM_Base_SetConfig+0x138>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d007      	beq.n	80096f0 <TIM_Base_SetConfig+0x48>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4a40      	ldr	r2, [pc, #256]	; (80097e4 <TIM_Base_SetConfig+0x13c>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d003      	beq.n	80096f0 <TIM_Base_SetConfig+0x48>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	4a3f      	ldr	r2, [pc, #252]	; (80097e8 <TIM_Base_SetConfig+0x140>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d108      	bne.n	8009702 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	4313      	orrs	r3, r2
 8009700:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a33      	ldr	r2, [pc, #204]	; (80097d4 <TIM_Base_SetConfig+0x12c>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d023      	beq.n	8009752 <TIM_Base_SetConfig+0xaa>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009710:	d01f      	beq.n	8009752 <TIM_Base_SetConfig+0xaa>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a30      	ldr	r2, [pc, #192]	; (80097d8 <TIM_Base_SetConfig+0x130>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d01b      	beq.n	8009752 <TIM_Base_SetConfig+0xaa>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a2f      	ldr	r2, [pc, #188]	; (80097dc <TIM_Base_SetConfig+0x134>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d017      	beq.n	8009752 <TIM_Base_SetConfig+0xaa>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a2e      	ldr	r2, [pc, #184]	; (80097e0 <TIM_Base_SetConfig+0x138>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d013      	beq.n	8009752 <TIM_Base_SetConfig+0xaa>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a2d      	ldr	r2, [pc, #180]	; (80097e4 <TIM_Base_SetConfig+0x13c>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d00f      	beq.n	8009752 <TIM_Base_SetConfig+0xaa>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a2d      	ldr	r2, [pc, #180]	; (80097ec <TIM_Base_SetConfig+0x144>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d00b      	beq.n	8009752 <TIM_Base_SetConfig+0xaa>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a2c      	ldr	r2, [pc, #176]	; (80097f0 <TIM_Base_SetConfig+0x148>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d007      	beq.n	8009752 <TIM_Base_SetConfig+0xaa>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a2b      	ldr	r2, [pc, #172]	; (80097f4 <TIM_Base_SetConfig+0x14c>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d003      	beq.n	8009752 <TIM_Base_SetConfig+0xaa>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a26      	ldr	r2, [pc, #152]	; (80097e8 <TIM_Base_SetConfig+0x140>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d108      	bne.n	8009764 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	4313      	orrs	r3, r2
 8009762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	695b      	ldr	r3, [r3, #20]
 800976e:	4313      	orrs	r3, r2
 8009770:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	689a      	ldr	r2, [r3, #8]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a12      	ldr	r2, [pc, #72]	; (80097d4 <TIM_Base_SetConfig+0x12c>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d013      	beq.n	80097b8 <TIM_Base_SetConfig+0x110>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a14      	ldr	r2, [pc, #80]	; (80097e4 <TIM_Base_SetConfig+0x13c>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d00f      	beq.n	80097b8 <TIM_Base_SetConfig+0x110>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a14      	ldr	r2, [pc, #80]	; (80097ec <TIM_Base_SetConfig+0x144>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d00b      	beq.n	80097b8 <TIM_Base_SetConfig+0x110>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a13      	ldr	r2, [pc, #76]	; (80097f0 <TIM_Base_SetConfig+0x148>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d007      	beq.n	80097b8 <TIM_Base_SetConfig+0x110>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a12      	ldr	r2, [pc, #72]	; (80097f4 <TIM_Base_SetConfig+0x14c>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d003      	beq.n	80097b8 <TIM_Base_SetConfig+0x110>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a0d      	ldr	r2, [pc, #52]	; (80097e8 <TIM_Base_SetConfig+0x140>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d103      	bne.n	80097c0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	691a      	ldr	r2, [r3, #16]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	615a      	str	r2, [r3, #20]
}
 80097c6:	bf00      	nop
 80097c8:	3714      	adds	r7, #20
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	40012c00 	.word	0x40012c00
 80097d8:	40000400 	.word	0x40000400
 80097dc:	40000800 	.word	0x40000800
 80097e0:	40000c00 	.word	0x40000c00
 80097e4:	40013400 	.word	0x40013400
 80097e8:	40015000 	.word	0x40015000
 80097ec:	40014000 	.word	0x40014000
 80097f0:	40014400 	.word	0x40014400
 80097f4:	40014800 	.word	0x40014800

080097f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b087      	sub	sp, #28
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	f023 0201 	bic.w	r2, r3, #1
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6a1b      	ldr	r3, [r3, #32]
 8009812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	699b      	ldr	r3, [r3, #24]
 800981e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800982a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f023 0303 	bic.w	r3, r3, #3
 8009832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	4313      	orrs	r3, r2
 800983c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	f023 0302 	bic.w	r3, r3, #2
 8009844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	4313      	orrs	r3, r2
 800984e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a30      	ldr	r2, [pc, #192]	; (8009914 <TIM_OC1_SetConfig+0x11c>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d013      	beq.n	8009880 <TIM_OC1_SetConfig+0x88>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a2f      	ldr	r2, [pc, #188]	; (8009918 <TIM_OC1_SetConfig+0x120>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d00f      	beq.n	8009880 <TIM_OC1_SetConfig+0x88>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a2e      	ldr	r2, [pc, #184]	; (800991c <TIM_OC1_SetConfig+0x124>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d00b      	beq.n	8009880 <TIM_OC1_SetConfig+0x88>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a2d      	ldr	r2, [pc, #180]	; (8009920 <TIM_OC1_SetConfig+0x128>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d007      	beq.n	8009880 <TIM_OC1_SetConfig+0x88>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4a2c      	ldr	r2, [pc, #176]	; (8009924 <TIM_OC1_SetConfig+0x12c>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d003      	beq.n	8009880 <TIM_OC1_SetConfig+0x88>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a2b      	ldr	r2, [pc, #172]	; (8009928 <TIM_OC1_SetConfig+0x130>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d10c      	bne.n	800989a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	f023 0308 	bic.w	r3, r3, #8
 8009886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	4313      	orrs	r3, r2
 8009890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	f023 0304 	bic.w	r3, r3, #4
 8009898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a1d      	ldr	r2, [pc, #116]	; (8009914 <TIM_OC1_SetConfig+0x11c>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d013      	beq.n	80098ca <TIM_OC1_SetConfig+0xd2>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4a1c      	ldr	r2, [pc, #112]	; (8009918 <TIM_OC1_SetConfig+0x120>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d00f      	beq.n	80098ca <TIM_OC1_SetConfig+0xd2>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4a1b      	ldr	r2, [pc, #108]	; (800991c <TIM_OC1_SetConfig+0x124>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d00b      	beq.n	80098ca <TIM_OC1_SetConfig+0xd2>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a1a      	ldr	r2, [pc, #104]	; (8009920 <TIM_OC1_SetConfig+0x128>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d007      	beq.n	80098ca <TIM_OC1_SetConfig+0xd2>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a19      	ldr	r2, [pc, #100]	; (8009924 <TIM_OC1_SetConfig+0x12c>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d003      	beq.n	80098ca <TIM_OC1_SetConfig+0xd2>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a18      	ldr	r2, [pc, #96]	; (8009928 <TIM_OC1_SetConfig+0x130>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d111      	bne.n	80098ee <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80098d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	695b      	ldr	r3, [r3, #20]
 80098de:	693a      	ldr	r2, [r7, #16]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	693a      	ldr	r2, [r7, #16]
 80098f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	685a      	ldr	r2, [r3, #4]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	697a      	ldr	r2, [r7, #20]
 8009906:	621a      	str	r2, [r3, #32]
}
 8009908:	bf00      	nop
 800990a:	371c      	adds	r7, #28
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr
 8009914:	40012c00 	.word	0x40012c00
 8009918:	40013400 	.word	0x40013400
 800991c:	40014000 	.word	0x40014000
 8009920:	40014400 	.word	0x40014400
 8009924:	40014800 	.word	0x40014800
 8009928:	40015000 	.word	0x40015000

0800992c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800992c:	b480      	push	{r7}
 800992e:	b087      	sub	sp, #28
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	f023 0210 	bic.w	r2, r3, #16
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	699b      	ldr	r3, [r3, #24]
 8009952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800995a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800995e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	021b      	lsls	r3, r3, #8
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	4313      	orrs	r3, r2
 8009972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	f023 0320 	bic.w	r3, r3, #32
 800997a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	011b      	lsls	r3, r3, #4
 8009982:	697a      	ldr	r2, [r7, #20]
 8009984:	4313      	orrs	r3, r2
 8009986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a2c      	ldr	r2, [pc, #176]	; (8009a3c <TIM_OC2_SetConfig+0x110>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d007      	beq.n	80099a0 <TIM_OC2_SetConfig+0x74>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a2b      	ldr	r2, [pc, #172]	; (8009a40 <TIM_OC2_SetConfig+0x114>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d003      	beq.n	80099a0 <TIM_OC2_SetConfig+0x74>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a2a      	ldr	r2, [pc, #168]	; (8009a44 <TIM_OC2_SetConfig+0x118>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d10d      	bne.n	80099bc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	011b      	lsls	r3, r3, #4
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a1f      	ldr	r2, [pc, #124]	; (8009a3c <TIM_OC2_SetConfig+0x110>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d013      	beq.n	80099ec <TIM_OC2_SetConfig+0xc0>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4a1e      	ldr	r2, [pc, #120]	; (8009a40 <TIM_OC2_SetConfig+0x114>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d00f      	beq.n	80099ec <TIM_OC2_SetConfig+0xc0>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4a1e      	ldr	r2, [pc, #120]	; (8009a48 <TIM_OC2_SetConfig+0x11c>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d00b      	beq.n	80099ec <TIM_OC2_SetConfig+0xc0>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	4a1d      	ldr	r2, [pc, #116]	; (8009a4c <TIM_OC2_SetConfig+0x120>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d007      	beq.n	80099ec <TIM_OC2_SetConfig+0xc0>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	4a1c      	ldr	r2, [pc, #112]	; (8009a50 <TIM_OC2_SetConfig+0x124>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d003      	beq.n	80099ec <TIM_OC2_SetConfig+0xc0>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4a17      	ldr	r2, [pc, #92]	; (8009a44 <TIM_OC2_SetConfig+0x118>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d113      	bne.n	8009a14 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	695b      	ldr	r3, [r3, #20]
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	693a      	ldr	r2, [r7, #16]
 8009a04:	4313      	orrs	r3, r2
 8009a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	699b      	ldr	r3, [r3, #24]
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	693a      	ldr	r2, [r7, #16]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	693a      	ldr	r2, [r7, #16]
 8009a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	68fa      	ldr	r2, [r7, #12]
 8009a1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	685a      	ldr	r2, [r3, #4]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	621a      	str	r2, [r3, #32]
}
 8009a2e:	bf00      	nop
 8009a30:	371c      	adds	r7, #28
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	40012c00 	.word	0x40012c00
 8009a40:	40013400 	.word	0x40013400
 8009a44:	40015000 	.word	0x40015000
 8009a48:	40014000 	.word	0x40014000
 8009a4c:	40014400 	.word	0x40014400
 8009a50:	40014800 	.word	0x40014800

08009a54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b087      	sub	sp, #28
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6a1b      	ldr	r3, [r3, #32]
 8009a62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a1b      	ldr	r3, [r3, #32]
 8009a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	69db      	ldr	r3, [r3, #28]
 8009a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f023 0303 	bic.w	r3, r3, #3
 8009a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	4313      	orrs	r3, r2
 8009a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	021b      	lsls	r3, r3, #8
 8009aa8:	697a      	ldr	r2, [r7, #20]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	4a2b      	ldr	r2, [pc, #172]	; (8009b60 <TIM_OC3_SetConfig+0x10c>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d007      	beq.n	8009ac6 <TIM_OC3_SetConfig+0x72>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	4a2a      	ldr	r2, [pc, #168]	; (8009b64 <TIM_OC3_SetConfig+0x110>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d003      	beq.n	8009ac6 <TIM_OC3_SetConfig+0x72>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	4a29      	ldr	r2, [pc, #164]	; (8009b68 <TIM_OC3_SetConfig+0x114>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d10d      	bne.n	8009ae2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009acc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	021b      	lsls	r3, r3, #8
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a1e      	ldr	r2, [pc, #120]	; (8009b60 <TIM_OC3_SetConfig+0x10c>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d013      	beq.n	8009b12 <TIM_OC3_SetConfig+0xbe>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a1d      	ldr	r2, [pc, #116]	; (8009b64 <TIM_OC3_SetConfig+0x110>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d00f      	beq.n	8009b12 <TIM_OC3_SetConfig+0xbe>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a1d      	ldr	r2, [pc, #116]	; (8009b6c <TIM_OC3_SetConfig+0x118>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d00b      	beq.n	8009b12 <TIM_OC3_SetConfig+0xbe>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4a1c      	ldr	r2, [pc, #112]	; (8009b70 <TIM_OC3_SetConfig+0x11c>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d007      	beq.n	8009b12 <TIM_OC3_SetConfig+0xbe>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4a1b      	ldr	r2, [pc, #108]	; (8009b74 <TIM_OC3_SetConfig+0x120>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d003      	beq.n	8009b12 <TIM_OC3_SetConfig+0xbe>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a16      	ldr	r2, [pc, #88]	; (8009b68 <TIM_OC3_SetConfig+0x114>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d113      	bne.n	8009b3a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	695b      	ldr	r3, [r3, #20]
 8009b26:	011b      	lsls	r3, r3, #4
 8009b28:	693a      	ldr	r2, [r7, #16]
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	011b      	lsls	r3, r3, #4
 8009b34:	693a      	ldr	r2, [r7, #16]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	693a      	ldr	r2, [r7, #16]
 8009b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	685a      	ldr	r2, [r3, #4]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	697a      	ldr	r2, [r7, #20]
 8009b52:	621a      	str	r2, [r3, #32]
}
 8009b54:	bf00      	nop
 8009b56:	371c      	adds	r7, #28
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	40012c00 	.word	0x40012c00
 8009b64:	40013400 	.word	0x40013400
 8009b68:	40015000 	.word	0x40015000
 8009b6c:	40014000 	.word	0x40014000
 8009b70:	40014400 	.word	0x40014400
 8009b74:	40014800 	.word	0x40014800

08009b78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b087      	sub	sp, #28
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a1b      	ldr	r3, [r3, #32]
 8009b86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a1b      	ldr	r3, [r3, #32]
 8009b92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	69db      	ldr	r3, [r3, #28]
 8009b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	021b      	lsls	r3, r3, #8
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009bc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	031b      	lsls	r3, r3, #12
 8009bce:	697a      	ldr	r2, [r7, #20]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	4a2c      	ldr	r2, [pc, #176]	; (8009c88 <TIM_OC4_SetConfig+0x110>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d007      	beq.n	8009bec <TIM_OC4_SetConfig+0x74>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4a2b      	ldr	r2, [pc, #172]	; (8009c8c <TIM_OC4_SetConfig+0x114>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d003      	beq.n	8009bec <TIM_OC4_SetConfig+0x74>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4a2a      	ldr	r2, [pc, #168]	; (8009c90 <TIM_OC4_SetConfig+0x118>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d10d      	bne.n	8009c08 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	031b      	lsls	r3, r3, #12
 8009bfa:	697a      	ldr	r2, [r7, #20]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a1f      	ldr	r2, [pc, #124]	; (8009c88 <TIM_OC4_SetConfig+0x110>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d013      	beq.n	8009c38 <TIM_OC4_SetConfig+0xc0>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4a1e      	ldr	r2, [pc, #120]	; (8009c8c <TIM_OC4_SetConfig+0x114>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d00f      	beq.n	8009c38 <TIM_OC4_SetConfig+0xc0>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a1e      	ldr	r2, [pc, #120]	; (8009c94 <TIM_OC4_SetConfig+0x11c>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d00b      	beq.n	8009c38 <TIM_OC4_SetConfig+0xc0>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a1d      	ldr	r2, [pc, #116]	; (8009c98 <TIM_OC4_SetConfig+0x120>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d007      	beq.n	8009c38 <TIM_OC4_SetConfig+0xc0>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4a1c      	ldr	r2, [pc, #112]	; (8009c9c <TIM_OC4_SetConfig+0x124>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d003      	beq.n	8009c38 <TIM_OC4_SetConfig+0xc0>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4a17      	ldr	r2, [pc, #92]	; (8009c90 <TIM_OC4_SetConfig+0x118>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d113      	bne.n	8009c60 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c3e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009c46:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	695b      	ldr	r3, [r3, #20]
 8009c4c:	019b      	lsls	r3, r3, #6
 8009c4e:	693a      	ldr	r2, [r7, #16]
 8009c50:	4313      	orrs	r3, r2
 8009c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	019b      	lsls	r3, r3, #6
 8009c5a:	693a      	ldr	r2, [r7, #16]
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	685a      	ldr	r2, [r3, #4]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	697a      	ldr	r2, [r7, #20]
 8009c78:	621a      	str	r2, [r3, #32]
}
 8009c7a:	bf00      	nop
 8009c7c:	371c      	adds	r7, #28
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop
 8009c88:	40012c00 	.word	0x40012c00
 8009c8c:	40013400 	.word	0x40013400
 8009c90:	40015000 	.word	0x40015000
 8009c94:	40014000 	.word	0x40014000
 8009c98:	40014400 	.word	0x40014400
 8009c9c:	40014800 	.word	0x40014800

08009ca0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b087      	sub	sp, #28
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a1b      	ldr	r3, [r3, #32]
 8009cae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6a1b      	ldr	r3, [r3, #32]
 8009cba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009ce4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	041b      	lsls	r3, r3, #16
 8009cec:	693a      	ldr	r2, [r7, #16]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a19      	ldr	r2, [pc, #100]	; (8009d5c <TIM_OC5_SetConfig+0xbc>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d013      	beq.n	8009d22 <TIM_OC5_SetConfig+0x82>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a18      	ldr	r2, [pc, #96]	; (8009d60 <TIM_OC5_SetConfig+0xc0>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d00f      	beq.n	8009d22 <TIM_OC5_SetConfig+0x82>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a17      	ldr	r2, [pc, #92]	; (8009d64 <TIM_OC5_SetConfig+0xc4>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d00b      	beq.n	8009d22 <TIM_OC5_SetConfig+0x82>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a16      	ldr	r2, [pc, #88]	; (8009d68 <TIM_OC5_SetConfig+0xc8>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d007      	beq.n	8009d22 <TIM_OC5_SetConfig+0x82>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4a15      	ldr	r2, [pc, #84]	; (8009d6c <TIM_OC5_SetConfig+0xcc>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d003      	beq.n	8009d22 <TIM_OC5_SetConfig+0x82>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4a14      	ldr	r2, [pc, #80]	; (8009d70 <TIM_OC5_SetConfig+0xd0>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d109      	bne.n	8009d36 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	695b      	ldr	r3, [r3, #20]
 8009d2e:	021b      	lsls	r3, r3, #8
 8009d30:	697a      	ldr	r2, [r7, #20]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	697a      	ldr	r2, [r7, #20]
 8009d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	685a      	ldr	r2, [r3, #4]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	693a      	ldr	r2, [r7, #16]
 8009d4e:	621a      	str	r2, [r3, #32]
}
 8009d50:	bf00      	nop
 8009d52:	371c      	adds	r7, #28
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr
 8009d5c:	40012c00 	.word	0x40012c00
 8009d60:	40013400 	.word	0x40013400
 8009d64:	40014000 	.word	0x40014000
 8009d68:	40014400 	.word	0x40014400
 8009d6c:	40014800 	.word	0x40014800
 8009d70:	40015000 	.word	0x40015000

08009d74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b087      	sub	sp, #28
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a1b      	ldr	r3, [r3, #32]
 8009d82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a1b      	ldr	r3, [r3, #32]
 8009d8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	021b      	lsls	r3, r3, #8
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	4313      	orrs	r3, r2
 8009db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009dba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	051b      	lsls	r3, r3, #20
 8009dc2:	693a      	ldr	r2, [r7, #16]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a1a      	ldr	r2, [pc, #104]	; (8009e34 <TIM_OC6_SetConfig+0xc0>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d013      	beq.n	8009df8 <TIM_OC6_SetConfig+0x84>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a19      	ldr	r2, [pc, #100]	; (8009e38 <TIM_OC6_SetConfig+0xc4>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d00f      	beq.n	8009df8 <TIM_OC6_SetConfig+0x84>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a18      	ldr	r2, [pc, #96]	; (8009e3c <TIM_OC6_SetConfig+0xc8>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d00b      	beq.n	8009df8 <TIM_OC6_SetConfig+0x84>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4a17      	ldr	r2, [pc, #92]	; (8009e40 <TIM_OC6_SetConfig+0xcc>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d007      	beq.n	8009df8 <TIM_OC6_SetConfig+0x84>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a16      	ldr	r2, [pc, #88]	; (8009e44 <TIM_OC6_SetConfig+0xd0>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d003      	beq.n	8009df8 <TIM_OC6_SetConfig+0x84>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a15      	ldr	r2, [pc, #84]	; (8009e48 <TIM_OC6_SetConfig+0xd4>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d109      	bne.n	8009e0c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009dfe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	695b      	ldr	r3, [r3, #20]
 8009e04:	029b      	lsls	r3, r3, #10
 8009e06:	697a      	ldr	r2, [r7, #20]
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	697a      	ldr	r2, [r7, #20]
 8009e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	685a      	ldr	r2, [r3, #4]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	693a      	ldr	r2, [r7, #16]
 8009e24:	621a      	str	r2, [r3, #32]
}
 8009e26:	bf00      	nop
 8009e28:	371c      	adds	r7, #28
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	40012c00 	.word	0x40012c00
 8009e38:	40013400 	.word	0x40013400
 8009e3c:	40014000 	.word	0x40014000
 8009e40:	40014400 	.word	0x40014400
 8009e44:	40014800 	.word	0x40014800
 8009e48:	40015000 	.word	0x40015000

08009e4c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b087      	sub	sp, #28
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
 8009e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	6a1b      	ldr	r3, [r3, #32]
 8009e5e:	f023 0201 	bic.w	r2, r3, #1
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	699b      	ldr	r3, [r3, #24]
 8009e6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6a1b      	ldr	r3, [r3, #32]
 8009e70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	4a28      	ldr	r2, [pc, #160]	; (8009f18 <TIM_TI1_SetConfig+0xcc>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d01b      	beq.n	8009eb2 <TIM_TI1_SetConfig+0x66>
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e80:	d017      	beq.n	8009eb2 <TIM_TI1_SetConfig+0x66>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	4a25      	ldr	r2, [pc, #148]	; (8009f1c <TIM_TI1_SetConfig+0xd0>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d013      	beq.n	8009eb2 <TIM_TI1_SetConfig+0x66>
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	4a24      	ldr	r2, [pc, #144]	; (8009f20 <TIM_TI1_SetConfig+0xd4>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d00f      	beq.n	8009eb2 <TIM_TI1_SetConfig+0x66>
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	4a23      	ldr	r2, [pc, #140]	; (8009f24 <TIM_TI1_SetConfig+0xd8>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d00b      	beq.n	8009eb2 <TIM_TI1_SetConfig+0x66>
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	4a22      	ldr	r2, [pc, #136]	; (8009f28 <TIM_TI1_SetConfig+0xdc>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d007      	beq.n	8009eb2 <TIM_TI1_SetConfig+0x66>
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	4a21      	ldr	r2, [pc, #132]	; (8009f2c <TIM_TI1_SetConfig+0xe0>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d003      	beq.n	8009eb2 <TIM_TI1_SetConfig+0x66>
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	4a20      	ldr	r2, [pc, #128]	; (8009f30 <TIM_TI1_SetConfig+0xe4>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d101      	bne.n	8009eb6 <TIM_TI1_SetConfig+0x6a>
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e000      	b.n	8009eb8 <TIM_TI1_SetConfig+0x6c>
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d008      	beq.n	8009ece <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	f023 0303 	bic.w	r3, r3, #3
 8009ec2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009ec4:	697a      	ldr	r2, [r7, #20]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	617b      	str	r3, [r7, #20]
 8009ecc:	e003      	b.n	8009ed6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	f043 0301 	orr.w	r3, r3, #1
 8009ed4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009edc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	011b      	lsls	r3, r3, #4
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	697a      	ldr	r2, [r7, #20]
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	f023 030a 	bic.w	r3, r3, #10
 8009ef0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	f003 030a 	and.w	r3, r3, #10
 8009ef8:	693a      	ldr	r2, [r7, #16]
 8009efa:	4313      	orrs	r3, r2
 8009efc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	697a      	ldr	r2, [r7, #20]
 8009f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	693a      	ldr	r2, [r7, #16]
 8009f08:	621a      	str	r2, [r3, #32]
}
 8009f0a:	bf00      	nop
 8009f0c:	371c      	adds	r7, #28
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	40012c00 	.word	0x40012c00
 8009f1c:	40000400 	.word	0x40000400
 8009f20:	40000800 	.word	0x40000800
 8009f24:	40000c00 	.word	0x40000c00
 8009f28:	40013400 	.word	0x40013400
 8009f2c:	40014000 	.word	0x40014000
 8009f30:	40015000 	.word	0x40015000

08009f34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b087      	sub	sp, #28
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6a1b      	ldr	r3, [r3, #32]
 8009f44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	6a1b      	ldr	r3, [r3, #32]
 8009f4a:	f023 0201 	bic.w	r2, r3, #1
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	699b      	ldr	r3, [r3, #24]
 8009f56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	011b      	lsls	r3, r3, #4
 8009f64:	693a      	ldr	r2, [r7, #16]
 8009f66:	4313      	orrs	r3, r2
 8009f68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	f023 030a 	bic.w	r3, r3, #10
 8009f70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f72:	697a      	ldr	r2, [r7, #20]
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	4313      	orrs	r3, r2
 8009f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	693a      	ldr	r2, [r7, #16]
 8009f7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	697a      	ldr	r2, [r7, #20]
 8009f84:	621a      	str	r2, [r3, #32]
}
 8009f86:	bf00      	nop
 8009f88:	371c      	adds	r7, #28
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr

08009f92 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009f92:	b480      	push	{r7}
 8009f94:	b087      	sub	sp, #28
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	60f8      	str	r0, [r7, #12]
 8009f9a:	60b9      	str	r1, [r7, #8]
 8009f9c:	607a      	str	r2, [r7, #4]
 8009f9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	6a1b      	ldr	r3, [r3, #32]
 8009fa4:	f023 0210 	bic.w	r2, r3, #16
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6a1b      	ldr	r3, [r3, #32]
 8009fb6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fbe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	021b      	lsls	r3, r3, #8
 8009fc4:	697a      	ldr	r2, [r7, #20]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009fd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	031b      	lsls	r3, r3, #12
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	697a      	ldr	r2, [r7, #20]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009fe4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	011b      	lsls	r3, r3, #4
 8009fea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009fee:	693a      	ldr	r2, [r7, #16]
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	697a      	ldr	r2, [r7, #20]
 8009ff8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	693a      	ldr	r2, [r7, #16]
 8009ffe:	621a      	str	r2, [r3, #32]
}
 800a000:	bf00      	nop
 800a002:	371c      	adds	r7, #28
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b087      	sub	sp, #28
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6a1b      	ldr	r3, [r3, #32]
 800a01c:	f023 0210 	bic.w	r2, r3, #16
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	699b      	ldr	r3, [r3, #24]
 800a028:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6a1b      	ldr	r3, [r3, #32]
 800a02e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a036:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	031b      	lsls	r3, r3, #12
 800a03c:	697a      	ldr	r2, [r7, #20]
 800a03e:	4313      	orrs	r3, r2
 800a040:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a048:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	011b      	lsls	r3, r3, #4
 800a04e:	693a      	ldr	r2, [r7, #16]
 800a050:	4313      	orrs	r3, r2
 800a052:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	697a      	ldr	r2, [r7, #20]
 800a058:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	693a      	ldr	r2, [r7, #16]
 800a05e:	621a      	str	r2, [r3, #32]
}
 800a060:	bf00      	nop
 800a062:	371c      	adds	r7, #28
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b087      	sub	sp, #28
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	607a      	str	r2, [r7, #4]
 800a078:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6a1b      	ldr	r3, [r3, #32]
 800a07e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6a1b      	ldr	r3, [r3, #32]
 800a090:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	f023 0303 	bic.w	r3, r3, #3
 800a098:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a09a:	697a      	ldr	r2, [r7, #20]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	011b      	lsls	r3, r3, #4
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	697a      	ldr	r2, [r7, #20]
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a0bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	021b      	lsls	r3, r3, #8
 800a0c2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a0c6:	693a      	ldr	r2, [r7, #16]
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	621a      	str	r2, [r3, #32]
}
 800a0d8:	bf00      	nop
 800a0da:	371c      	adds	r7, #28
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b087      	sub	sp, #28
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
 800a0f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6a1b      	ldr	r3, [r3, #32]
 800a0f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	69db      	ldr	r3, [r3, #28]
 800a102:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6a1b      	ldr	r3, [r3, #32]
 800a108:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a110:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	021b      	lsls	r3, r3, #8
 800a116:	697a      	ldr	r2, [r7, #20]
 800a118:	4313      	orrs	r3, r2
 800a11a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a122:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	031b      	lsls	r3, r3, #12
 800a128:	b29b      	uxth	r3, r3
 800a12a:	697a      	ldr	r2, [r7, #20]
 800a12c:	4313      	orrs	r3, r2
 800a12e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a136:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	031b      	lsls	r3, r3, #12
 800a13c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	4313      	orrs	r3, r2
 800a144:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	697a      	ldr	r2, [r7, #20]
 800a14a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	693a      	ldr	r2, [r7, #16]
 800a150:	621a      	str	r2, [r3, #32]
}
 800a152:	bf00      	nop
 800a154:	371c      	adds	r7, #28
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr

0800a15e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a15e:	b480      	push	{r7}
 800a160:	b085      	sub	sp, #20
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
 800a166:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a178:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	4313      	orrs	r3, r2
 800a180:	f043 0307 	orr.w	r3, r3, #7
 800a184:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	609a      	str	r2, [r3, #8]
}
 800a18c:	bf00      	nop
 800a18e:	3714      	adds	r7, #20
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a198:	b480      	push	{r7}
 800a19a:	b087      	sub	sp, #28
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
 800a1a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	021a      	lsls	r2, r3, #8
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	431a      	orrs	r2, r3
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	697a      	ldr	r2, [r7, #20]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	697a      	ldr	r2, [r7, #20]
 800a1ca:	609a      	str	r2, [r3, #8]
}
 800a1cc:	bf00      	nop
 800a1ce:	371c      	adds	r7, #28
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b087      	sub	sp, #28
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	f003 031f 	and.w	r3, r3, #31
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	6a1a      	ldr	r2, [r3, #32]
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	43db      	mvns	r3, r3
 800a1fa:	401a      	ands	r2, r3
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6a1a      	ldr	r2, [r3, #32]
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	f003 031f 	and.w	r3, r3, #31
 800a20a:	6879      	ldr	r1, [r7, #4]
 800a20c:	fa01 f303 	lsl.w	r3, r1, r3
 800a210:	431a      	orrs	r2, r3
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	621a      	str	r2, [r3, #32]
}
 800a216:	bf00      	nop
 800a218:	371c      	adds	r7, #28
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr

0800a222 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b08a      	sub	sp, #40	; 0x28
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
 800a22a:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d101      	bne.n	800a236 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	e0a0      	b.n	800a378 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d106      	bne.n	800a250 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2200      	movs	r2, #0
 800a246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 f898 	bl	800a380 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2202      	movs	r2, #2
 800a254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	3304      	adds	r3, #4
 800a260:	4619      	mov	r1, r3
 800a262:	4610      	mov	r0, r2
 800a264:	f7ff fa20 	bl	80096a8 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6818      	ldr	r0, [r3, #0]
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	6819      	ldr	r1, [r3, #0]
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	2203      	movs	r2, #3
 800a276:	f7ff fde9 	bl	8009e4c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	699a      	ldr	r2, [r3, #24]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f022 020c 	bic.w	r2, r2, #12
 800a288:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	6999      	ldr	r1, [r3, #24]
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	685a      	ldr	r2, [r3, #4]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	430a      	orrs	r2, r1
 800a29a:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	685a      	ldr	r2, [r3, #4]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a2aa:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	6812      	ldr	r2, [r2, #0]
 800a2b6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a2ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2be:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	689a      	ldr	r2, [r3, #8]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a2ce:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	6812      	ldr	r2, [r2, #0]
 800a2da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2de:	f023 0307 	bic.w	r3, r3, #7
 800a2e2:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	689a      	ldr	r2, [r3, #8]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f042 0204 	orr.w	r2, r2, #4
 800a2f2:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800a2fc:	2370      	movs	r3, #112	; 0x70
 800a2fe:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a300:	2300      	movs	r3, #0
 800a302:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a304:	2300      	movs	r3, #0
 800a306:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a308:	2300      	movs	r3, #0
 800a30a:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f107 020c 	add.w	r2, r7, #12
 800a31a:	4611      	mov	r1, r2
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7ff fb05 	bl	800992c <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	6812      	ldr	r2, [r2, #0]
 800a32c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a334:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	685a      	ldr	r2, [r3, #4]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800a344:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2201      	movs	r2, #1
 800a34a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2201      	movs	r2, #1
 800a352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2201      	movs	r2, #1
 800a35a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2201      	movs	r2, #1
 800a362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2201      	movs	r2, #1
 800a36a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2201      	movs	r2, #1
 800a372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3728      	adds	r7, #40	; 0x28
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 800a388:	bf00      	nop
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a394:	b480      	push	{r7}
 800a396:	b085      	sub	sp, #20
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d101      	bne.n	800a3ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a3a8:	2302      	movs	r3, #2
 800a3aa:	e074      	b.n	800a496 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2202      	movs	r2, #2
 800a3b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a34      	ldr	r2, [pc, #208]	; (800a4a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d009      	beq.n	800a3ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a33      	ldr	r2, [pc, #204]	; (800a4a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d004      	beq.n	800a3ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a31      	ldr	r2, [pc, #196]	; (800a4ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d108      	bne.n	800a3fc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a3f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a406:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	4313      	orrs	r3, r2
 800a410:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	68fa      	ldr	r2, [r7, #12]
 800a418:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a21      	ldr	r2, [pc, #132]	; (800a4a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d022      	beq.n	800a46a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a42c:	d01d      	beq.n	800a46a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a1f      	ldr	r2, [pc, #124]	; (800a4b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d018      	beq.n	800a46a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a1d      	ldr	r2, [pc, #116]	; (800a4b4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d013      	beq.n	800a46a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a1c      	ldr	r2, [pc, #112]	; (800a4b8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d00e      	beq.n	800a46a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a15      	ldr	r2, [pc, #84]	; (800a4a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d009      	beq.n	800a46a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a18      	ldr	r2, [pc, #96]	; (800a4bc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d004      	beq.n	800a46a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a11      	ldr	r2, [pc, #68]	; (800a4ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d10c      	bne.n	800a484 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a470:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	4313      	orrs	r3, r2
 800a47a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	68ba      	ldr	r2, [r7, #8]
 800a482:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	3714      	adds	r7, #20
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr
 800a4a2:	bf00      	nop
 800a4a4:	40012c00 	.word	0x40012c00
 800a4a8:	40013400 	.word	0x40013400
 800a4ac:	40015000 	.word	0x40015000
 800a4b0:	40000400 	.word	0x40000400
 800a4b4:	40000800 	.word	0x40000800
 800a4b8:	40000c00 	.word	0x40000c00
 800a4bc:	40014000 	.word	0x40014000

0800a4c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d101      	bne.n	800a4dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a4d8:	2302      	movs	r3, #2
 800a4da:	e096      	b.n	800a60a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	4313      	orrs	r3, r2
 800a50c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4313      	orrs	r3, r2
 800a51a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	691b      	ldr	r3, [r3, #16]
 800a526:	4313      	orrs	r3, r2
 800a528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	695b      	ldr	r3, [r3, #20]
 800a534:	4313      	orrs	r3, r2
 800a536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a542:	4313      	orrs	r3, r2
 800a544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	699b      	ldr	r3, [r3, #24]
 800a550:	041b      	lsls	r3, r3, #16
 800a552:	4313      	orrs	r3, r2
 800a554:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a2f      	ldr	r2, [pc, #188]	; (800a618 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d009      	beq.n	800a574 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a2d      	ldr	r2, [pc, #180]	; (800a61c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d004      	beq.n	800a574 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a2c      	ldr	r2, [pc, #176]	; (800a620 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d106      	bne.n	800a582 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	69db      	ldr	r3, [r3, #28]
 800a57e:	4313      	orrs	r3, r2
 800a580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a24      	ldr	r2, [pc, #144]	; (800a618 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d009      	beq.n	800a5a0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a22      	ldr	r2, [pc, #136]	; (800a61c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d004      	beq.n	800a5a0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4a21      	ldr	r2, [pc, #132]	; (800a620 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d12b      	bne.n	800a5f8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5aa:	051b      	lsls	r3, r3, #20
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	6a1b      	ldr	r3, [r3, #32]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a11      	ldr	r2, [pc, #68]	; (800a618 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d009      	beq.n	800a5ea <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a10      	ldr	r2, [pc, #64]	; (800a61c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d004      	beq.n	800a5ea <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a0e      	ldr	r2, [pc, #56]	; (800a620 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d106      	bne.n	800a5f8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3714      	adds	r7, #20
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop
 800a618:	40012c00 	.word	0x40012c00
 800a61c:	40013400 	.word	0x40013400
 800a620:	40015000 	.word	0x40015000

0800a624 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a624:	b480      	push	{r7}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a62c:	bf00      	nop
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a640:	bf00      	nop
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a654:	bf00      	nop
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a668:	bf00      	nop
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a67c:	bf00      	nop
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a690:	bf00      	nop
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a6a4:	bf00      	nop
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d101      	bne.n	800a6c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e042      	b.n	800a748 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d106      	bne.n	800a6da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f7f8 f96d 	bl	80029b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2224      	movs	r2, #36	; 0x24
 800a6de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f022 0201 	bic.w	r2, r2, #1
 800a6f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 f8c2 	bl	800a87c <UART_SetConfig>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d101      	bne.n	800a702 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
 800a700:	e022      	b.n	800a748 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a706:	2b00      	cmp	r3, #0
 800a708:	d002      	beq.n	800a710 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 fbb2 	bl	800ae74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	685a      	ldr	r2, [r3, #4]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a71e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	689a      	ldr	r2, [r3, #8]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a72e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f042 0201 	orr.w	r2, r2, #1
 800a73e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 fc39 	bl	800afb8 <UART_CheckIdleState>
 800a746:	4603      	mov	r3, r0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b08a      	sub	sp, #40	; 0x28
 800a754:	af02      	add	r7, sp, #8
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	603b      	str	r3, [r7, #0]
 800a75c:	4613      	mov	r3, r2
 800a75e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a766:	2b20      	cmp	r3, #32
 800a768:	f040 8083 	bne.w	800a872 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d002      	beq.n	800a778 <HAL_UART_Transmit+0x28>
 800a772:	88fb      	ldrh	r3, [r7, #6]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d101      	bne.n	800a77c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	e07b      	b.n	800a874 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a782:	2b01      	cmp	r3, #1
 800a784:	d101      	bne.n	800a78a <HAL_UART_Transmit+0x3a>
 800a786:	2302      	movs	r3, #2
 800a788:	e074      	b.n	800a874 <HAL_UART_Transmit+0x124>
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2201      	movs	r2, #1
 800a78e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2200      	movs	r2, #0
 800a796:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2221      	movs	r2, #33	; 0x21
 800a79e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a7a2:	f7f8 fe63 	bl	800346c <HAL_GetTick>
 800a7a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	88fa      	ldrh	r2, [r7, #6]
 800a7ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	88fa      	ldrh	r2, [r7, #6]
 800a7b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7c0:	d108      	bne.n	800a7d4 <HAL_UART_Transmit+0x84>
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d104      	bne.n	800a7d4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	61bb      	str	r3, [r7, #24]
 800a7d2:	e003      	b.n	800a7dc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a7e4:	e02c      	b.n	800a840 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	2180      	movs	r1, #128	; 0x80
 800a7f0:	68f8      	ldr	r0, [r7, #12]
 800a7f2:	f000 fc2c 	bl	800b04e <UART_WaitOnFlagUntilTimeout>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d001      	beq.n	800a800 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	e039      	b.n	800a874 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d10b      	bne.n	800a81e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a806:	69bb      	ldr	r3, [r7, #24]
 800a808:	881b      	ldrh	r3, [r3, #0]
 800a80a:	461a      	mov	r2, r3
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a814:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	3302      	adds	r3, #2
 800a81a:	61bb      	str	r3, [r7, #24]
 800a81c:	e007      	b.n	800a82e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	781a      	ldrb	r2, [r3, #0]
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	3301      	adds	r3, #1
 800a82c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a834:	b29b      	uxth	r3, r3
 800a836:	3b01      	subs	r3, #1
 800a838:	b29a      	uxth	r2, r3
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a846:	b29b      	uxth	r3, r3
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d1cc      	bne.n	800a7e6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	9300      	str	r3, [sp, #0]
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	2200      	movs	r2, #0
 800a854:	2140      	movs	r1, #64	; 0x40
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f000 fbf9 	bl	800b04e <UART_WaitOnFlagUntilTimeout>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d001      	beq.n	800a866 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a862:	2303      	movs	r3, #3
 800a864:	e006      	b.n	800a874 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2220      	movs	r2, #32
 800a86a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a86e:	2300      	movs	r3, #0
 800a870:	e000      	b.n	800a874 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a872:	2302      	movs	r3, #2
  }
}
 800a874:	4618      	mov	r0, r3
 800a876:	3720      	adds	r7, #32
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a87c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a880:	b08c      	sub	sp, #48	; 0x30
 800a882:	af00      	add	r7, sp, #0
 800a884:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a886:	2300      	movs	r3, #0
 800a888:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	689a      	ldr	r2, [r3, #8]
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	691b      	ldr	r3, [r3, #16]
 800a894:	431a      	orrs	r2, r3
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	695b      	ldr	r3, [r3, #20]
 800a89a:	431a      	orrs	r2, r3
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	69db      	ldr	r3, [r3, #28]
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	4baa      	ldr	r3, [pc, #680]	; (800ab54 <UART_SetConfig+0x2d8>)
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	697a      	ldr	r2, [r7, #20]
 800a8b0:	6812      	ldr	r2, [r2, #0]
 800a8b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8b4:	430b      	orrs	r3, r1
 800a8b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	68da      	ldr	r2, [r3, #12]
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	430a      	orrs	r2, r1
 800a8cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	699b      	ldr	r3, [r3, #24]
 800a8d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a9f      	ldr	r2, [pc, #636]	; (800ab58 <UART_SetConfig+0x2dc>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d004      	beq.n	800a8e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	6a1b      	ldr	r3, [r3, #32]
 800a8e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a8f2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a8f6:	697a      	ldr	r2, [r7, #20]
 800a8f8:	6812      	ldr	r2, [r2, #0]
 800a8fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8fc:	430b      	orrs	r3, r1
 800a8fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a906:	f023 010f 	bic.w	r1, r3, #15
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	430a      	orrs	r2, r1
 800a914:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a90      	ldr	r2, [pc, #576]	; (800ab5c <UART_SetConfig+0x2e0>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d125      	bne.n	800a96c <UART_SetConfig+0xf0>
 800a920:	4b8f      	ldr	r3, [pc, #572]	; (800ab60 <UART_SetConfig+0x2e4>)
 800a922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a926:	f003 0303 	and.w	r3, r3, #3
 800a92a:	2b03      	cmp	r3, #3
 800a92c:	d81a      	bhi.n	800a964 <UART_SetConfig+0xe8>
 800a92e:	a201      	add	r2, pc, #4	; (adr r2, 800a934 <UART_SetConfig+0xb8>)
 800a930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a934:	0800a945 	.word	0x0800a945
 800a938:	0800a955 	.word	0x0800a955
 800a93c:	0800a94d 	.word	0x0800a94d
 800a940:	0800a95d 	.word	0x0800a95d
 800a944:	2301      	movs	r3, #1
 800a946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a94a:	e116      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800a94c:	2302      	movs	r3, #2
 800a94e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a952:	e112      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800a954:	2304      	movs	r3, #4
 800a956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a95a:	e10e      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800a95c:	2308      	movs	r3, #8
 800a95e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a962:	e10a      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800a964:	2310      	movs	r3, #16
 800a966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a96a:	e106      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a7c      	ldr	r2, [pc, #496]	; (800ab64 <UART_SetConfig+0x2e8>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d138      	bne.n	800a9e8 <UART_SetConfig+0x16c>
 800a976:	4b7a      	ldr	r3, [pc, #488]	; (800ab60 <UART_SetConfig+0x2e4>)
 800a978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a97c:	f003 030c 	and.w	r3, r3, #12
 800a980:	2b0c      	cmp	r3, #12
 800a982:	d82d      	bhi.n	800a9e0 <UART_SetConfig+0x164>
 800a984:	a201      	add	r2, pc, #4	; (adr r2, 800a98c <UART_SetConfig+0x110>)
 800a986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a98a:	bf00      	nop
 800a98c:	0800a9c1 	.word	0x0800a9c1
 800a990:	0800a9e1 	.word	0x0800a9e1
 800a994:	0800a9e1 	.word	0x0800a9e1
 800a998:	0800a9e1 	.word	0x0800a9e1
 800a99c:	0800a9d1 	.word	0x0800a9d1
 800a9a0:	0800a9e1 	.word	0x0800a9e1
 800a9a4:	0800a9e1 	.word	0x0800a9e1
 800a9a8:	0800a9e1 	.word	0x0800a9e1
 800a9ac:	0800a9c9 	.word	0x0800a9c9
 800a9b0:	0800a9e1 	.word	0x0800a9e1
 800a9b4:	0800a9e1 	.word	0x0800a9e1
 800a9b8:	0800a9e1 	.word	0x0800a9e1
 800a9bc:	0800a9d9 	.word	0x0800a9d9
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9c6:	e0d8      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800a9c8:	2302      	movs	r3, #2
 800a9ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9ce:	e0d4      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800a9d0:	2304      	movs	r3, #4
 800a9d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9d6:	e0d0      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800a9d8:	2308      	movs	r3, #8
 800a9da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9de:	e0cc      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800a9e0:	2310      	movs	r3, #16
 800a9e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9e6:	e0c8      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a5e      	ldr	r2, [pc, #376]	; (800ab68 <UART_SetConfig+0x2ec>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d125      	bne.n	800aa3e <UART_SetConfig+0x1c2>
 800a9f2:	4b5b      	ldr	r3, [pc, #364]	; (800ab60 <UART_SetConfig+0x2e4>)
 800a9f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a9fc:	2b30      	cmp	r3, #48	; 0x30
 800a9fe:	d016      	beq.n	800aa2e <UART_SetConfig+0x1b2>
 800aa00:	2b30      	cmp	r3, #48	; 0x30
 800aa02:	d818      	bhi.n	800aa36 <UART_SetConfig+0x1ba>
 800aa04:	2b20      	cmp	r3, #32
 800aa06:	d00a      	beq.n	800aa1e <UART_SetConfig+0x1a2>
 800aa08:	2b20      	cmp	r3, #32
 800aa0a:	d814      	bhi.n	800aa36 <UART_SetConfig+0x1ba>
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d002      	beq.n	800aa16 <UART_SetConfig+0x19a>
 800aa10:	2b10      	cmp	r3, #16
 800aa12:	d008      	beq.n	800aa26 <UART_SetConfig+0x1aa>
 800aa14:	e00f      	b.n	800aa36 <UART_SetConfig+0x1ba>
 800aa16:	2300      	movs	r3, #0
 800aa18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa1c:	e0ad      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aa1e:	2302      	movs	r3, #2
 800aa20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa24:	e0a9      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aa26:	2304      	movs	r3, #4
 800aa28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa2c:	e0a5      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aa2e:	2308      	movs	r3, #8
 800aa30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa34:	e0a1      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aa36:	2310      	movs	r3, #16
 800aa38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa3c:	e09d      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4a4a      	ldr	r2, [pc, #296]	; (800ab6c <UART_SetConfig+0x2f0>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d125      	bne.n	800aa94 <UART_SetConfig+0x218>
 800aa48:	4b45      	ldr	r3, [pc, #276]	; (800ab60 <UART_SetConfig+0x2e4>)
 800aa4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aa52:	2bc0      	cmp	r3, #192	; 0xc0
 800aa54:	d016      	beq.n	800aa84 <UART_SetConfig+0x208>
 800aa56:	2bc0      	cmp	r3, #192	; 0xc0
 800aa58:	d818      	bhi.n	800aa8c <UART_SetConfig+0x210>
 800aa5a:	2b80      	cmp	r3, #128	; 0x80
 800aa5c:	d00a      	beq.n	800aa74 <UART_SetConfig+0x1f8>
 800aa5e:	2b80      	cmp	r3, #128	; 0x80
 800aa60:	d814      	bhi.n	800aa8c <UART_SetConfig+0x210>
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d002      	beq.n	800aa6c <UART_SetConfig+0x1f0>
 800aa66:	2b40      	cmp	r3, #64	; 0x40
 800aa68:	d008      	beq.n	800aa7c <UART_SetConfig+0x200>
 800aa6a:	e00f      	b.n	800aa8c <UART_SetConfig+0x210>
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa72:	e082      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aa74:	2302      	movs	r3, #2
 800aa76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa7a:	e07e      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aa7c:	2304      	movs	r3, #4
 800aa7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa82:	e07a      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aa84:	2308      	movs	r3, #8
 800aa86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa8a:	e076      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aa8c:	2310      	movs	r3, #16
 800aa8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa92:	e072      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a35      	ldr	r2, [pc, #212]	; (800ab70 <UART_SetConfig+0x2f4>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d12a      	bne.n	800aaf4 <UART_SetConfig+0x278>
 800aa9e:	4b30      	ldr	r3, [pc, #192]	; (800ab60 <UART_SetConfig+0x2e4>)
 800aaa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aaac:	d01a      	beq.n	800aae4 <UART_SetConfig+0x268>
 800aaae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aab2:	d81b      	bhi.n	800aaec <UART_SetConfig+0x270>
 800aab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aab8:	d00c      	beq.n	800aad4 <UART_SetConfig+0x258>
 800aaba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aabe:	d815      	bhi.n	800aaec <UART_SetConfig+0x270>
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d003      	beq.n	800aacc <UART_SetConfig+0x250>
 800aac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aac8:	d008      	beq.n	800aadc <UART_SetConfig+0x260>
 800aaca:	e00f      	b.n	800aaec <UART_SetConfig+0x270>
 800aacc:	2300      	movs	r3, #0
 800aace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aad2:	e052      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aad4:	2302      	movs	r3, #2
 800aad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aada:	e04e      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aadc:	2304      	movs	r3, #4
 800aade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aae2:	e04a      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aae4:	2308      	movs	r3, #8
 800aae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aaea:	e046      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aaec:	2310      	movs	r3, #16
 800aaee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aaf2:	e042      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a17      	ldr	r2, [pc, #92]	; (800ab58 <UART_SetConfig+0x2dc>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d13a      	bne.n	800ab74 <UART_SetConfig+0x2f8>
 800aafe:	4b18      	ldr	r3, [pc, #96]	; (800ab60 <UART_SetConfig+0x2e4>)
 800ab00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ab08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab0c:	d01a      	beq.n	800ab44 <UART_SetConfig+0x2c8>
 800ab0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab12:	d81b      	bhi.n	800ab4c <UART_SetConfig+0x2d0>
 800ab14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab18:	d00c      	beq.n	800ab34 <UART_SetConfig+0x2b8>
 800ab1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab1e:	d815      	bhi.n	800ab4c <UART_SetConfig+0x2d0>
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d003      	beq.n	800ab2c <UART_SetConfig+0x2b0>
 800ab24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab28:	d008      	beq.n	800ab3c <UART_SetConfig+0x2c0>
 800ab2a:	e00f      	b.n	800ab4c <UART_SetConfig+0x2d0>
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab32:	e022      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800ab34:	2302      	movs	r3, #2
 800ab36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab3a:	e01e      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800ab3c:	2304      	movs	r3, #4
 800ab3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab42:	e01a      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800ab44:	2308      	movs	r3, #8
 800ab46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab4a:	e016      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800ab4c:	2310      	movs	r3, #16
 800ab4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab52:	e012      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800ab54:	cfff69f3 	.word	0xcfff69f3
 800ab58:	40008000 	.word	0x40008000
 800ab5c:	40013800 	.word	0x40013800
 800ab60:	40021000 	.word	0x40021000
 800ab64:	40004400 	.word	0x40004400
 800ab68:	40004800 	.word	0x40004800
 800ab6c:	40004c00 	.word	0x40004c00
 800ab70:	40005000 	.word	0x40005000
 800ab74:	2310      	movs	r3, #16
 800ab76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4aae      	ldr	r2, [pc, #696]	; (800ae38 <UART_SetConfig+0x5bc>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	f040 8097 	bne.w	800acb4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ab86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ab8a:	2b08      	cmp	r3, #8
 800ab8c:	d823      	bhi.n	800abd6 <UART_SetConfig+0x35a>
 800ab8e:	a201      	add	r2, pc, #4	; (adr r2, 800ab94 <UART_SetConfig+0x318>)
 800ab90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab94:	0800abb9 	.word	0x0800abb9
 800ab98:	0800abd7 	.word	0x0800abd7
 800ab9c:	0800abc1 	.word	0x0800abc1
 800aba0:	0800abd7 	.word	0x0800abd7
 800aba4:	0800abc7 	.word	0x0800abc7
 800aba8:	0800abd7 	.word	0x0800abd7
 800abac:	0800abd7 	.word	0x0800abd7
 800abb0:	0800abd7 	.word	0x0800abd7
 800abb4:	0800abcf 	.word	0x0800abcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abb8:	f7fd fa40 	bl	800803c <HAL_RCC_GetPCLK1Freq>
 800abbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800abbe:	e010      	b.n	800abe2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800abc0:	4b9e      	ldr	r3, [pc, #632]	; (800ae3c <UART_SetConfig+0x5c0>)
 800abc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800abc4:	e00d      	b.n	800abe2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abc6:	f7fd f9cd 	bl	8007f64 <HAL_RCC_GetSysClockFreq>
 800abca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800abcc:	e009      	b.n	800abe2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800abd4:	e005      	b.n	800abe2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800abd6:	2300      	movs	r3, #0
 800abd8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800abda:	2301      	movs	r3, #1
 800abdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800abe0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800abe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f000 8130 	beq.w	800ae4a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abee:	4a94      	ldr	r2, [pc, #592]	; (800ae40 <UART_SetConfig+0x5c4>)
 800abf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abf4:	461a      	mov	r2, r3
 800abf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf8:	fbb3 f3f2 	udiv	r3, r3, r2
 800abfc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	685a      	ldr	r2, [r3, #4]
 800ac02:	4613      	mov	r3, r2
 800ac04:	005b      	lsls	r3, r3, #1
 800ac06:	4413      	add	r3, r2
 800ac08:	69ba      	ldr	r2, [r7, #24]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d305      	bcc.n	800ac1a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac14:	69ba      	ldr	r2, [r7, #24]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d903      	bls.n	800ac22 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ac20:	e113      	b.n	800ae4a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac24:	2200      	movs	r2, #0
 800ac26:	60bb      	str	r3, [r7, #8]
 800ac28:	60fa      	str	r2, [r7, #12]
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2e:	4a84      	ldr	r2, [pc, #528]	; (800ae40 <UART_SetConfig+0x5c4>)
 800ac30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	2200      	movs	r2, #0
 800ac38:	603b      	str	r3, [r7, #0]
 800ac3a:	607a      	str	r2, [r7, #4]
 800ac3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ac44:	f7f5 ffd8 	bl	8000bf8 <__aeabi_uldivmod>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	4610      	mov	r0, r2
 800ac4e:	4619      	mov	r1, r3
 800ac50:	f04f 0200 	mov.w	r2, #0
 800ac54:	f04f 0300 	mov.w	r3, #0
 800ac58:	020b      	lsls	r3, r1, #8
 800ac5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ac5e:	0202      	lsls	r2, r0, #8
 800ac60:	6979      	ldr	r1, [r7, #20]
 800ac62:	6849      	ldr	r1, [r1, #4]
 800ac64:	0849      	lsrs	r1, r1, #1
 800ac66:	2000      	movs	r0, #0
 800ac68:	460c      	mov	r4, r1
 800ac6a:	4605      	mov	r5, r0
 800ac6c:	eb12 0804 	adds.w	r8, r2, r4
 800ac70:	eb43 0905 	adc.w	r9, r3, r5
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	469a      	mov	sl, r3
 800ac7c:	4693      	mov	fp, r2
 800ac7e:	4652      	mov	r2, sl
 800ac80:	465b      	mov	r3, fp
 800ac82:	4640      	mov	r0, r8
 800ac84:	4649      	mov	r1, r9
 800ac86:	f7f5 ffb7 	bl	8000bf8 <__aeabi_uldivmod>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	4613      	mov	r3, r2
 800ac90:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ac92:	6a3b      	ldr	r3, [r7, #32]
 800ac94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac98:	d308      	bcc.n	800acac <UART_SetConfig+0x430>
 800ac9a:	6a3b      	ldr	r3, [r7, #32]
 800ac9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aca0:	d204      	bcs.n	800acac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	6a3a      	ldr	r2, [r7, #32]
 800aca8:	60da      	str	r2, [r3, #12]
 800acaa:	e0ce      	b.n	800ae4a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800acac:	2301      	movs	r3, #1
 800acae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800acb2:	e0ca      	b.n	800ae4a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	69db      	ldr	r3, [r3, #28]
 800acb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acbc:	d166      	bne.n	800ad8c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800acbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800acc2:	2b08      	cmp	r3, #8
 800acc4:	d827      	bhi.n	800ad16 <UART_SetConfig+0x49a>
 800acc6:	a201      	add	r2, pc, #4	; (adr r2, 800accc <UART_SetConfig+0x450>)
 800acc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800accc:	0800acf1 	.word	0x0800acf1
 800acd0:	0800acf9 	.word	0x0800acf9
 800acd4:	0800ad01 	.word	0x0800ad01
 800acd8:	0800ad17 	.word	0x0800ad17
 800acdc:	0800ad07 	.word	0x0800ad07
 800ace0:	0800ad17 	.word	0x0800ad17
 800ace4:	0800ad17 	.word	0x0800ad17
 800ace8:	0800ad17 	.word	0x0800ad17
 800acec:	0800ad0f 	.word	0x0800ad0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acf0:	f7fd f9a4 	bl	800803c <HAL_RCC_GetPCLK1Freq>
 800acf4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800acf6:	e014      	b.n	800ad22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acf8:	f7fd f9b6 	bl	8008068 <HAL_RCC_GetPCLK2Freq>
 800acfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800acfe:	e010      	b.n	800ad22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad00:	4b4e      	ldr	r3, [pc, #312]	; (800ae3c <UART_SetConfig+0x5c0>)
 800ad02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ad04:	e00d      	b.n	800ad22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad06:	f7fd f92d 	bl	8007f64 <HAL_RCC_GetSysClockFreq>
 800ad0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ad0c:	e009      	b.n	800ad22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ad14:	e005      	b.n	800ad22 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ad16:	2300      	movs	r3, #0
 800ad18:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ad20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ad22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f000 8090 	beq.w	800ae4a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2e:	4a44      	ldr	r2, [pc, #272]	; (800ae40 <UART_SetConfig+0x5c4>)
 800ad30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad34:	461a      	mov	r2, r3
 800ad36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad38:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad3c:	005a      	lsls	r2, r3, #1
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	085b      	lsrs	r3, r3, #1
 800ad44:	441a      	add	r2, r3
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad50:	6a3b      	ldr	r3, [r7, #32]
 800ad52:	2b0f      	cmp	r3, #15
 800ad54:	d916      	bls.n	800ad84 <UART_SetConfig+0x508>
 800ad56:	6a3b      	ldr	r3, [r7, #32]
 800ad58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad5c:	d212      	bcs.n	800ad84 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ad5e:	6a3b      	ldr	r3, [r7, #32]
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	f023 030f 	bic.w	r3, r3, #15
 800ad66:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ad68:	6a3b      	ldr	r3, [r7, #32]
 800ad6a:	085b      	lsrs	r3, r3, #1
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	f003 0307 	and.w	r3, r3, #7
 800ad72:	b29a      	uxth	r2, r3
 800ad74:	8bfb      	ldrh	r3, [r7, #30]
 800ad76:	4313      	orrs	r3, r2
 800ad78:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	8bfa      	ldrh	r2, [r7, #30]
 800ad80:	60da      	str	r2, [r3, #12]
 800ad82:	e062      	b.n	800ae4a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ad84:	2301      	movs	r3, #1
 800ad86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ad8a:	e05e      	b.n	800ae4a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ad8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad90:	2b08      	cmp	r3, #8
 800ad92:	d828      	bhi.n	800ade6 <UART_SetConfig+0x56a>
 800ad94:	a201      	add	r2, pc, #4	; (adr r2, 800ad9c <UART_SetConfig+0x520>)
 800ad96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad9a:	bf00      	nop
 800ad9c:	0800adc1 	.word	0x0800adc1
 800ada0:	0800adc9 	.word	0x0800adc9
 800ada4:	0800add1 	.word	0x0800add1
 800ada8:	0800ade7 	.word	0x0800ade7
 800adac:	0800add7 	.word	0x0800add7
 800adb0:	0800ade7 	.word	0x0800ade7
 800adb4:	0800ade7 	.word	0x0800ade7
 800adb8:	0800ade7 	.word	0x0800ade7
 800adbc:	0800addf 	.word	0x0800addf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adc0:	f7fd f93c 	bl	800803c <HAL_RCC_GetPCLK1Freq>
 800adc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800adc6:	e014      	b.n	800adf2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800adc8:	f7fd f94e 	bl	8008068 <HAL_RCC_GetPCLK2Freq>
 800adcc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800adce:	e010      	b.n	800adf2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800add0:	4b1a      	ldr	r3, [pc, #104]	; (800ae3c <UART_SetConfig+0x5c0>)
 800add2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800add4:	e00d      	b.n	800adf2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800add6:	f7fd f8c5 	bl	8007f64 <HAL_RCC_GetSysClockFreq>
 800adda:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800addc:	e009      	b.n	800adf2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ade2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ade4:	e005      	b.n	800adf2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ade6:	2300      	movs	r3, #0
 800ade8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800adea:	2301      	movs	r3, #1
 800adec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800adf0:	bf00      	nop
    }

    if (pclk != 0U)
 800adf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d028      	beq.n	800ae4a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfc:	4a10      	ldr	r2, [pc, #64]	; (800ae40 <UART_SetConfig+0x5c4>)
 800adfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae02:	461a      	mov	r2, r3
 800ae04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae06:	fbb3 f2f2 	udiv	r2, r3, r2
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	085b      	lsrs	r3, r3, #1
 800ae10:	441a      	add	r2, r3
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae1c:	6a3b      	ldr	r3, [r7, #32]
 800ae1e:	2b0f      	cmp	r3, #15
 800ae20:	d910      	bls.n	800ae44 <UART_SetConfig+0x5c8>
 800ae22:	6a3b      	ldr	r3, [r7, #32]
 800ae24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae28:	d20c      	bcs.n	800ae44 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ae2a:	6a3b      	ldr	r3, [r7, #32]
 800ae2c:	b29a      	uxth	r2, r3
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	60da      	str	r2, [r3, #12]
 800ae34:	e009      	b.n	800ae4a <UART_SetConfig+0x5ce>
 800ae36:	bf00      	nop
 800ae38:	40008000 	.word	0x40008000
 800ae3c:	00f42400 	.word	0x00f42400
 800ae40:	08015304 	.word	0x08015304
      }
      else
      {
        ret = HAL_ERROR;
 800ae44:	2301      	movs	r3, #1
 800ae46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	2201      	movs	r2, #1
 800ae56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	2200      	movs	r2, #0
 800ae64:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ae66:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3730      	adds	r7, #48	; 0x30
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ae74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae80:	f003 0301 	and.w	r3, r3, #1
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d00a      	beq.n	800ae9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	430a      	orrs	r2, r1
 800ae9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea2:	f003 0302 	and.w	r3, r3, #2
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00a      	beq.n	800aec0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	430a      	orrs	r2, r1
 800aebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aec4:	f003 0304 	and.w	r3, r3, #4
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00a      	beq.n	800aee2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	430a      	orrs	r2, r1
 800aee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aee6:	f003 0308 	and.w	r3, r3, #8
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00a      	beq.n	800af04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	430a      	orrs	r2, r1
 800af02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af08:	f003 0310 	and.w	r3, r3, #16
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d00a      	beq.n	800af26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	430a      	orrs	r2, r1
 800af24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af2a:	f003 0320 	and.w	r3, r3, #32
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d00a      	beq.n	800af48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	430a      	orrs	r2, r1
 800af46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af50:	2b00      	cmp	r3, #0
 800af52:	d01a      	beq.n	800af8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	430a      	orrs	r2, r1
 800af68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af72:	d10a      	bne.n	800af8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	430a      	orrs	r2, r1
 800af88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af92:	2b00      	cmp	r3, #0
 800af94:	d00a      	beq.n	800afac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	430a      	orrs	r2, r1
 800afaa:	605a      	str	r2, [r3, #4]
  }
}
 800afac:	bf00      	nop
 800afae:	370c      	adds	r7, #12
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b086      	sub	sp, #24
 800afbc:	af02      	add	r7, sp, #8
 800afbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800afc8:	f7f8 fa50 	bl	800346c <HAL_GetTick>
 800afcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f003 0308 	and.w	r3, r3, #8
 800afd8:	2b08      	cmp	r3, #8
 800afda:	d10e      	bne.n	800affa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800afdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800afe0:	9300      	str	r3, [sp, #0]
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 f82f 	bl	800b04e <UART_WaitOnFlagUntilTimeout>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d001      	beq.n	800affa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aff6:	2303      	movs	r3, #3
 800aff8:	e025      	b.n	800b046 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f003 0304 	and.w	r3, r3, #4
 800b004:	2b04      	cmp	r3, #4
 800b006:	d10e      	bne.n	800b026 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b008:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b00c:	9300      	str	r3, [sp, #0]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 f819 	bl	800b04e <UART_WaitOnFlagUntilTimeout>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b022:	2303      	movs	r3, #3
 800b024:	e00f      	b.n	800b046 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2220      	movs	r2, #32
 800b02a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2220      	movs	r2, #32
 800b032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b044:	2300      	movs	r3, #0
}
 800b046:	4618      	mov	r0, r3
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b04e:	b580      	push	{r7, lr}
 800b050:	b09c      	sub	sp, #112	; 0x70
 800b052:	af00      	add	r7, sp, #0
 800b054:	60f8      	str	r0, [r7, #12]
 800b056:	60b9      	str	r1, [r7, #8]
 800b058:	603b      	str	r3, [r7, #0]
 800b05a:	4613      	mov	r3, r2
 800b05c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b05e:	e0a9      	b.n	800b1b4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b060:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b066:	f000 80a5 	beq.w	800b1b4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b06a:	f7f8 f9ff 	bl	800346c <HAL_GetTick>
 800b06e:	4602      	mov	r2, r0
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	1ad3      	subs	r3, r2, r3
 800b074:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b076:	429a      	cmp	r2, r3
 800b078:	d302      	bcc.n	800b080 <UART_WaitOnFlagUntilTimeout+0x32>
 800b07a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d140      	bne.n	800b102 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b088:	e853 3f00 	ldrex	r3, [r3]
 800b08c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b08e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b090:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b094:	667b      	str	r3, [r7, #100]	; 0x64
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	461a      	mov	r2, r3
 800b09c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b09e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b0a0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b0a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b0a6:	e841 2300 	strex	r3, r2, [r1]
 800b0aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b0ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1e6      	bne.n	800b080 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	3308      	adds	r3, #8
 800b0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0bc:	e853 3f00 	ldrex	r3, [r3]
 800b0c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c4:	f023 0301 	bic.w	r3, r3, #1
 800b0c8:	663b      	str	r3, [r7, #96]	; 0x60
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	3308      	adds	r3, #8
 800b0d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b0d2:	64ba      	str	r2, [r7, #72]	; 0x48
 800b0d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b0d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0da:	e841 2300 	strex	r3, r2, [r1]
 800b0de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b0e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d1e5      	bne.n	800b0b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2220      	movs	r2, #32
 800b0ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2220      	movs	r2, #32
 800b0f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b0fe:	2303      	movs	r3, #3
 800b100:	e069      	b.n	800b1d6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f003 0304 	and.w	r3, r3, #4
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d051      	beq.n	800b1b4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	69db      	ldr	r3, [r3, #28]
 800b116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b11a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b11e:	d149      	bne.n	800b1b4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b128:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b132:	e853 3f00 	ldrex	r3, [r3]
 800b136:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b13e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	461a      	mov	r2, r3
 800b146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b148:	637b      	str	r3, [r7, #52]	; 0x34
 800b14a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b14e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b150:	e841 2300 	strex	r3, r2, [r1]
 800b154:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d1e6      	bne.n	800b12a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	3308      	adds	r3, #8
 800b162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	e853 3f00 	ldrex	r3, [r3]
 800b16a:	613b      	str	r3, [r7, #16]
   return(result);
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	f023 0301 	bic.w	r3, r3, #1
 800b172:	66bb      	str	r3, [r7, #104]	; 0x68
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	3308      	adds	r3, #8
 800b17a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b17c:	623a      	str	r2, [r7, #32]
 800b17e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b180:	69f9      	ldr	r1, [r7, #28]
 800b182:	6a3a      	ldr	r2, [r7, #32]
 800b184:	e841 2300 	strex	r3, r2, [r1]
 800b188:	61bb      	str	r3, [r7, #24]
   return(result);
 800b18a:	69bb      	ldr	r3, [r7, #24]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d1e5      	bne.n	800b15c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2220      	movs	r2, #32
 800b194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2220      	movs	r2, #32
 800b19c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2220      	movs	r2, #32
 800b1a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b1b0:	2303      	movs	r3, #3
 800b1b2:	e010      	b.n	800b1d6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	69da      	ldr	r2, [r3, #28]
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	4013      	ands	r3, r2
 800b1be:	68ba      	ldr	r2, [r7, #8]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	bf0c      	ite	eq
 800b1c4:	2301      	moveq	r3, #1
 800b1c6:	2300      	movne	r3, #0
 800b1c8:	b2db      	uxtb	r3, r3
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	79fb      	ldrb	r3, [r7, #7]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	f43f af46 	beq.w	800b060 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3770      	adds	r7, #112	; 0x70
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b1de:	b480      	push	{r7}
 800b1e0:	b085      	sub	sp, #20
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d101      	bne.n	800b1f4 <HAL_UARTEx_DisableFifoMode+0x16>
 800b1f0:	2302      	movs	r3, #2
 800b1f2:	e027      	b.n	800b244 <HAL_UARTEx_DisableFifoMode+0x66>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2224      	movs	r2, #36	; 0x24
 800b200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	681a      	ldr	r2, [r3, #0]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f022 0201 	bic.w	r2, r2, #1
 800b21a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b222:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2220      	movs	r2, #32
 800b236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2200      	movs	r2, #0
 800b23e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b242:	2300      	movs	r3, #0
}
 800b244:	4618      	mov	r0, r3
 800b246:	3714      	adds	r7, #20
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b260:	2b01      	cmp	r3, #1
 800b262:	d101      	bne.n	800b268 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b264:	2302      	movs	r3, #2
 800b266:	e02d      	b.n	800b2c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2201      	movs	r2, #1
 800b26c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2224      	movs	r2, #36	; 0x24
 800b274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f022 0201 	bic.w	r2, r2, #1
 800b28e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	689b      	ldr	r3, [r3, #8]
 800b296:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	683a      	ldr	r2, [r7, #0]
 800b2a0:	430a      	orrs	r2, r1
 800b2a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 f84f 	bl	800b348 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	68fa      	ldr	r2, [r7, #12]
 800b2b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2220      	movs	r2, #32
 800b2b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b2c2:	2300      	movs	r3, #0
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3710      	adds	r7, #16
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d101      	bne.n	800b2e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b2e0:	2302      	movs	r3, #2
 800b2e2:	e02d      	b.n	800b340 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2224      	movs	r2, #36	; 0x24
 800b2f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f022 0201 	bic.w	r2, r2, #1
 800b30a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	683a      	ldr	r2, [r7, #0]
 800b31c:	430a      	orrs	r2, r1
 800b31e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 f811 	bl	800b348 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	68fa      	ldr	r2, [r7, #12]
 800b32c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2220      	movs	r2, #32
 800b332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b33e:	2300      	movs	r3, #0
}
 800b340:	4618      	mov	r0, r3
 800b342:	3710      	adds	r7, #16
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b354:	2b00      	cmp	r3, #0
 800b356:	d108      	bne.n	800b36a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2201      	movs	r2, #1
 800b35c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b368:	e031      	b.n	800b3ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b36a:	2308      	movs	r3, #8
 800b36c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b36e:	2308      	movs	r3, #8
 800b370:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	0e5b      	lsrs	r3, r3, #25
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	f003 0307 	and.w	r3, r3, #7
 800b380:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	0f5b      	lsrs	r3, r3, #29
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	f003 0307 	and.w	r3, r3, #7
 800b390:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b392:	7bbb      	ldrb	r3, [r7, #14]
 800b394:	7b3a      	ldrb	r2, [r7, #12]
 800b396:	4911      	ldr	r1, [pc, #68]	; (800b3dc <UARTEx_SetNbDataToProcess+0x94>)
 800b398:	5c8a      	ldrb	r2, [r1, r2]
 800b39a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b39e:	7b3a      	ldrb	r2, [r7, #12]
 800b3a0:	490f      	ldr	r1, [pc, #60]	; (800b3e0 <UARTEx_SetNbDataToProcess+0x98>)
 800b3a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3a8:	b29a      	uxth	r2, r3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3b0:	7bfb      	ldrb	r3, [r7, #15]
 800b3b2:	7b7a      	ldrb	r2, [r7, #13]
 800b3b4:	4909      	ldr	r1, [pc, #36]	; (800b3dc <UARTEx_SetNbDataToProcess+0x94>)
 800b3b6:	5c8a      	ldrb	r2, [r1, r2]
 800b3b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b3bc:	7b7a      	ldrb	r2, [r7, #13]
 800b3be:	4908      	ldr	r1, [pc, #32]	; (800b3e0 <UARTEx_SetNbDataToProcess+0x98>)
 800b3c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3c6:	b29a      	uxth	r2, r3
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b3ce:	bf00      	nop
 800b3d0:	3714      	adds	r7, #20
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr
 800b3da:	bf00      	nop
 800b3dc:	0801531c 	.word	0x0801531c
 800b3e0:	08015324 	.word	0x08015324

0800b3e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b085      	sub	sp, #20
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b3f4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800b3f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	b29a      	uxth	r2, r3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b404:	2300      	movs	r3, #0
}
 800b406:	4618      	mov	r0, r3
 800b408:	3714      	adds	r7, #20
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr

0800b412 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b412:	b480      	push	{r7}
 800b414:	b085      	sub	sp, #20
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b41a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800b41e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b426:	b29a      	uxth	r2, r3
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	43db      	mvns	r3, r3
 800b42e:	b29b      	uxth	r3, r3
 800b430:	4013      	ands	r3, r2
 800b432:	b29a      	uxth	r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b43a:	2300      	movs	r3, #0
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3714      	adds	r7, #20
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b448:	b084      	sub	sp, #16
 800b44a:	b480      	push	{r7}
 800b44c:	b083      	sub	sp, #12
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
 800b452:	f107 0014 	add.w	r0, r7, #20
 800b456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2201      	movs	r2, #1
 800b45e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800b47a:	2300      	movs	r3, #0
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	370c      	adds	r7, #12
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	b004      	add	sp, #16
 800b488:	4770      	bx	lr
	...

0800b48c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b09d      	sub	sp, #116	; 0x74
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b496:	2300      	movs	r3, #0
 800b498:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	009b      	lsls	r3, r3, #2
 800b4a4:	4413      	add	r3, r2
 800b4a6:	881b      	ldrh	r3, [r3, #0]
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800b4ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4b2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	78db      	ldrb	r3, [r3, #3]
 800b4ba:	2b03      	cmp	r3, #3
 800b4bc:	d81f      	bhi.n	800b4fe <USB_ActivateEndpoint+0x72>
 800b4be:	a201      	add	r2, pc, #4	; (adr r2, 800b4c4 <USB_ActivateEndpoint+0x38>)
 800b4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4c4:	0800b4d5 	.word	0x0800b4d5
 800b4c8:	0800b4f1 	.word	0x0800b4f1
 800b4cc:	0800b507 	.word	0x0800b507
 800b4d0:	0800b4e3 	.word	0x0800b4e3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b4d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b4d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b4dc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b4e0:	e012      	b.n	800b508 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b4e2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b4e6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800b4ea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b4ee:	e00b      	b.n	800b508 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b4f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b4f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b4f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b4fc:	e004      	b.n	800b508 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800b4fe:	2301      	movs	r3, #1
 800b500:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800b504:	e000      	b.n	800b508 <USB_ActivateEndpoint+0x7c>
      break;
 800b506:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	009b      	lsls	r3, r3, #2
 800b510:	441a      	add	r2, r3
 800b512:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b51a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b51e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b526:	b29b      	uxth	r3, r3
 800b528:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	4413      	add	r3, r2
 800b534:	881b      	ldrh	r3, [r3, #0]
 800b536:	b29b      	uxth	r3, r3
 800b538:	b21b      	sxth	r3, r3
 800b53a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b53e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b542:	b21a      	sxth	r2, r3
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	b21b      	sxth	r3, r3
 800b54a:	4313      	orrs	r3, r2
 800b54c:	b21b      	sxth	r3, r3
 800b54e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	441a      	add	r2, r3
 800b55c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800b560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b56c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b570:	b29b      	uxth	r3, r3
 800b572:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	7b1b      	ldrb	r3, [r3, #12]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	f040 8149 	bne.w	800b810 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	785b      	ldrb	r3, [r3, #1]
 800b582:	2b00      	cmp	r3, #0
 800b584:	f000 8084 	beq.w	800b690 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	61bb      	str	r3, [r7, #24]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b592:	b29b      	uxth	r3, r3
 800b594:	461a      	mov	r2, r3
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	4413      	add	r3, r2
 800b59a:	61bb      	str	r3, [r7, #24]
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	00da      	lsls	r2, r3, #3
 800b5a2:	69bb      	ldr	r3, [r7, #24]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b5aa:	617b      	str	r3, [r7, #20]
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	88db      	ldrh	r3, [r3, #6]
 800b5b0:	085b      	lsrs	r3, r3, #1
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	005b      	lsls	r3, r3, #1
 800b5b6:	b29a      	uxth	r2, r3
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b5bc:	687a      	ldr	r2, [r7, #4]
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	4413      	add	r3, r2
 800b5c6:	881b      	ldrh	r3, [r3, #0]
 800b5c8:	827b      	strh	r3, [r7, #18]
 800b5ca:	8a7b      	ldrh	r3, [r7, #18]
 800b5cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d01b      	beq.n	800b60c <USB_ActivateEndpoint+0x180>
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	4413      	add	r3, r2
 800b5de:	881b      	ldrh	r3, [r3, #0]
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5ea:	823b      	strh	r3, [r7, #16]
 800b5ec:	687a      	ldr	r2, [r7, #4]
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	441a      	add	r2, r3
 800b5f6:	8a3b      	ldrh	r3, [r7, #16]
 800b5f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b5fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b604:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b608:	b29b      	uxth	r3, r3
 800b60a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	78db      	ldrb	r3, [r3, #3]
 800b610:	2b01      	cmp	r3, #1
 800b612:	d020      	beq.n	800b656 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	4413      	add	r3, r2
 800b61e:	881b      	ldrh	r3, [r3, #0]
 800b620:	b29b      	uxth	r3, r3
 800b622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b62a:	81bb      	strh	r3, [r7, #12]
 800b62c:	89bb      	ldrh	r3, [r7, #12]
 800b62e:	f083 0320 	eor.w	r3, r3, #32
 800b632:	81bb      	strh	r3, [r7, #12]
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	441a      	add	r2, r3
 800b63e:	89bb      	ldrh	r3, [r7, #12]
 800b640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b644:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b64c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b650:	b29b      	uxth	r3, r3
 800b652:	8013      	strh	r3, [r2, #0]
 800b654:	e2a6      	b.n	800bba4 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	009b      	lsls	r3, r3, #2
 800b65e:	4413      	add	r3, r2
 800b660:	881b      	ldrh	r3, [r3, #0]
 800b662:	b29b      	uxth	r3, r3
 800b664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b66c:	81fb      	strh	r3, [r7, #14]
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	441a      	add	r2, r3
 800b678:	89fb      	ldrh	r3, [r7, #14]
 800b67a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b67e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	8013      	strh	r3, [r2, #0]
 800b68e:	e289      	b.n	800bba4 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	633b      	str	r3, [r7, #48]	; 0x30
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	461a      	mov	r2, r3
 800b69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a0:	4413      	add	r3, r2
 800b6a2:	633b      	str	r3, [r7, #48]	; 0x30
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	781b      	ldrb	r3, [r3, #0]
 800b6a8:	00da      	lsls	r2, r3, #3
 800b6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ac:	4413      	add	r3, r2
 800b6ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	88db      	ldrh	r3, [r3, #6]
 800b6b8:	085b      	lsrs	r3, r3, #1
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	005b      	lsls	r3, r3, #1
 800b6be:	b29a      	uxth	r2, r3
 800b6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d4:	4413      	add	r3, r2
 800b6d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	00da      	lsls	r2, r3, #3
 800b6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e0:	4413      	add	r3, r2
 800b6e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b6e6:	627b      	str	r3, [r7, #36]	; 0x24
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	691b      	ldr	r3, [r3, #16]
 800b6ec:	2b3e      	cmp	r3, #62	; 0x3e
 800b6ee:	d918      	bls.n	800b722 <USB_ActivateEndpoint+0x296>
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	691b      	ldr	r3, [r3, #16]
 800b6f4:	095b      	lsrs	r3, r3, #5
 800b6f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	691b      	ldr	r3, [r3, #16]
 800b6fc:	f003 031f 	and.w	r3, r3, #31
 800b700:	2b00      	cmp	r3, #0
 800b702:	d102      	bne.n	800b70a <USB_ActivateEndpoint+0x27e>
 800b704:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b706:	3b01      	subs	r3, #1
 800b708:	66bb      	str	r3, [r7, #104]	; 0x68
 800b70a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	029b      	lsls	r3, r3, #10
 800b710:	b29b      	uxth	r3, r3
 800b712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b71a:	b29a      	uxth	r2, r3
 800b71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71e:	801a      	strh	r2, [r3, #0]
 800b720:	e029      	b.n	800b776 <USB_ActivateEndpoint+0x2ea>
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	691b      	ldr	r3, [r3, #16]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d112      	bne.n	800b750 <USB_ActivateEndpoint+0x2c4>
 800b72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72c:	881b      	ldrh	r3, [r3, #0]
 800b72e:	b29b      	uxth	r3, r3
 800b730:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b734:	b29a      	uxth	r2, r3
 800b736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b738:	801a      	strh	r2, [r3, #0]
 800b73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73c:	881b      	ldrh	r3, [r3, #0]
 800b73e:	b29b      	uxth	r3, r3
 800b740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b748:	b29a      	uxth	r2, r3
 800b74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74c:	801a      	strh	r2, [r3, #0]
 800b74e:	e012      	b.n	800b776 <USB_ActivateEndpoint+0x2ea>
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	691b      	ldr	r3, [r3, #16]
 800b754:	085b      	lsrs	r3, r3, #1
 800b756:	66bb      	str	r3, [r7, #104]	; 0x68
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	691b      	ldr	r3, [r3, #16]
 800b75c:	f003 0301 	and.w	r3, r3, #1
 800b760:	2b00      	cmp	r3, #0
 800b762:	d002      	beq.n	800b76a <USB_ActivateEndpoint+0x2de>
 800b764:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b766:	3301      	adds	r3, #1
 800b768:	66bb      	str	r3, [r7, #104]	; 0x68
 800b76a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	029b      	lsls	r3, r3, #10
 800b770:	b29a      	uxth	r2, r3
 800b772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b774:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	4413      	add	r3, r2
 800b780:	881b      	ldrh	r3, [r3, #0]
 800b782:	847b      	strh	r3, [r7, #34]	; 0x22
 800b784:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d01b      	beq.n	800b7c6 <USB_ActivateEndpoint+0x33a>
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	4413      	add	r3, r2
 800b798:	881b      	ldrh	r3, [r3, #0]
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7a4:	843b      	strh	r3, [r7, #32]
 800b7a6:	687a      	ldr	r2, [r7, #4]
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	441a      	add	r2, r3
 800b7b0:	8c3b      	ldrh	r3, [r7, #32]
 800b7b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b7be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	009b      	lsls	r3, r3, #2
 800b7ce:	4413      	add	r3, r2
 800b7d0:	881b      	ldrh	r3, [r3, #0]
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b7d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7dc:	83fb      	strh	r3, [r7, #30]
 800b7de:	8bfb      	ldrh	r3, [r7, #30]
 800b7e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b7e4:	83fb      	strh	r3, [r7, #30]
 800b7e6:	8bfb      	ldrh	r3, [r7, #30]
 800b7e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b7ec:	83fb      	strh	r3, [r7, #30]
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	441a      	add	r2, r3
 800b7f8:	8bfb      	ldrh	r3, [r7, #30]
 800b7fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b80a:	b29b      	uxth	r3, r3
 800b80c:	8013      	strh	r3, [r2, #0]
 800b80e:	e1c9      	b.n	800bba4 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	78db      	ldrb	r3, [r3, #3]
 800b814:	2b02      	cmp	r3, #2
 800b816:	d11e      	bne.n	800b856 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	4413      	add	r3, r2
 800b822:	881b      	ldrh	r3, [r3, #0]
 800b824:	b29b      	uxth	r3, r3
 800b826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b82a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b82e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	441a      	add	r2, r3
 800b83c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b840:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b844:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b848:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b84c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b850:	b29b      	uxth	r3, r3
 800b852:	8013      	strh	r3, [r2, #0]
 800b854:	e01d      	b.n	800b892 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	4413      	add	r3, r2
 800b860:	881b      	ldrh	r3, [r3, #0]
 800b862:	b29b      	uxth	r3, r3
 800b864:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b86c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	441a      	add	r2, r3
 800b87a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800b87e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b88a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b88e:	b29b      	uxth	r3, r3
 800b890:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	461a      	mov	r2, r3
 800b8a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8a2:	4413      	add	r3, r2
 800b8a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	00da      	lsls	r2, r3, #3
 800b8ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8ae:	4413      	add	r3, r2
 800b8b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8b4:	65bb      	str	r3, [r7, #88]	; 0x58
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	891b      	ldrh	r3, [r3, #8]
 800b8ba:	085b      	lsrs	r3, r3, #1
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	005b      	lsls	r3, r3, #1
 800b8c0:	b29a      	uxth	r2, r3
 800b8c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b8c4:	801a      	strh	r2, [r3, #0]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	657b      	str	r3, [r7, #84]	; 0x54
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8d6:	4413      	add	r3, r2
 800b8d8:	657b      	str	r3, [r7, #84]	; 0x54
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	781b      	ldrb	r3, [r3, #0]
 800b8de:	00da      	lsls	r2, r3, #3
 800b8e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8e2:	4413      	add	r3, r2
 800b8e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b8e8:	653b      	str	r3, [r7, #80]	; 0x50
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	895b      	ldrh	r3, [r3, #10]
 800b8ee:	085b      	lsrs	r3, r3, #1
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	005b      	lsls	r3, r3, #1
 800b8f4:	b29a      	uxth	r2, r3
 800b8f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8f8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	785b      	ldrb	r3, [r3, #1]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	f040 8093 	bne.w	800ba2a <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b904:	687a      	ldr	r2, [r7, #4]
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	4413      	add	r3, r2
 800b90e:	881b      	ldrh	r3, [r3, #0]
 800b910:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b914:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d01b      	beq.n	800b958 <USB_ActivateEndpoint+0x4cc>
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	009b      	lsls	r3, r3, #2
 800b928:	4413      	add	r3, r2
 800b92a:	881b      	ldrh	r3, [r3, #0]
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b936:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b938:	687a      	ldr	r2, [r7, #4]
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	441a      	add	r2, r3
 800b942:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b944:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b948:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b94c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b954:	b29b      	uxth	r3, r3
 800b956:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	4413      	add	r3, r2
 800b962:	881b      	ldrh	r3, [r3, #0]
 800b964:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800b966:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d01b      	beq.n	800b9a8 <USB_ActivateEndpoint+0x51c>
 800b970:	687a      	ldr	r2, [r7, #4]
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	781b      	ldrb	r3, [r3, #0]
 800b976:	009b      	lsls	r3, r3, #2
 800b978:	4413      	add	r3, r2
 800b97a:	881b      	ldrh	r3, [r3, #0]
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b986:	877b      	strh	r3, [r7, #58]	; 0x3a
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	441a      	add	r2, r3
 800b992:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b994:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b998:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b99c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	4413      	add	r3, r2
 800b9b2:	881b      	ldrh	r3, [r3, #0]
 800b9b4:	b29b      	uxth	r3, r3
 800b9b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b9ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9be:	873b      	strh	r3, [r7, #56]	; 0x38
 800b9c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b9c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b9c6:	873b      	strh	r3, [r7, #56]	; 0x38
 800b9c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b9ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b9ce:	873b      	strh	r3, [r7, #56]	; 0x38
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	009b      	lsls	r3, r3, #2
 800b9d8:	441a      	add	r2, r3
 800b9da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b9dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	4413      	add	r3, r2
 800b9fa:	881b      	ldrh	r3, [r3, #0]
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba06:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	441a      	add	r2, r3
 800ba12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ba14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	8013      	strh	r3, [r2, #0]
 800ba28:	e0bc      	b.n	800bba4 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ba2a:	687a      	ldr	r2, [r7, #4]
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	4413      	add	r3, r2
 800ba34:	881b      	ldrh	r3, [r3, #0]
 800ba36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ba3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ba3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d01d      	beq.n	800ba82 <USB_ActivateEndpoint+0x5f6>
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	4413      	add	r3, r2
 800ba50:	881b      	ldrh	r3, [r3, #0]
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba5c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	441a      	add	r2, r3
 800ba6a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ba6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ba7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	4413      	add	r3, r2
 800ba8c:	881b      	ldrh	r3, [r3, #0]
 800ba8e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ba92:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ba96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d01d      	beq.n	800bada <USB_ActivateEndpoint+0x64e>
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	009b      	lsls	r3, r3, #2
 800baa6:	4413      	add	r3, r2
 800baa8:	881b      	ldrh	r3, [r3, #0]
 800baaa:	b29b      	uxth	r3, r3
 800baac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bab4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800bab8:	687a      	ldr	r2, [r7, #4]
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	781b      	ldrb	r3, [r3, #0]
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	441a      	add	r2, r3
 800bac2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800baca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bad2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	78db      	ldrb	r3, [r3, #3]
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d024      	beq.n	800bb2c <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bae2:	687a      	ldr	r2, [r7, #4]
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	4413      	add	r3, r2
 800baec:	881b      	ldrh	r3, [r3, #0]
 800baee:	b29b      	uxth	r3, r3
 800baf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800baf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800baf8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800bafc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800bb00:	f083 0320 	eor.w	r3, r3, #32
 800bb04:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	009b      	lsls	r3, r3, #2
 800bb10:	441a      	add	r2, r3
 800bb12:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800bb16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	8013      	strh	r3, [r2, #0]
 800bb2a:	e01d      	b.n	800bb68 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	009b      	lsls	r3, r3, #2
 800bb34:	4413      	add	r3, r2
 800bb36:	881b      	ldrh	r3, [r3, #0]
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb42:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	009b      	lsls	r3, r3, #2
 800bb4e:	441a      	add	r2, r3
 800bb50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800bb54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	009b      	lsls	r3, r3, #2
 800bb70:	4413      	add	r3, r2
 800bb72:	881b      	ldrh	r3, [r3, #0]
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb7e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	441a      	add	r2, r3
 800bb8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bb90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800bba4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3774      	adds	r7, #116	; 0x74
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b08d      	sub	sp, #52	; 0x34
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	7b1b      	ldrb	r3, [r3, #12]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	f040 808e 	bne.w	800bce4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	785b      	ldrb	r3, [r3, #1]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d044      	beq.n	800bc5a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	4413      	add	r3, r2
 800bbda:	881b      	ldrh	r3, [r3, #0]
 800bbdc:	81bb      	strh	r3, [r7, #12]
 800bbde:	89bb      	ldrh	r3, [r7, #12]
 800bbe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d01b      	beq.n	800bc20 <USB_DeactivateEndpoint+0x6c>
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	009b      	lsls	r3, r3, #2
 800bbf0:	4413      	add	r3, r2
 800bbf2:	881b      	ldrh	r3, [r3, #0]
 800bbf4:	b29b      	uxth	r3, r3
 800bbf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbfe:	817b      	strh	r3, [r7, #10]
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	009b      	lsls	r3, r3, #2
 800bc08:	441a      	add	r2, r3
 800bc0a:	897b      	ldrh	r3, [r7, #10]
 800bc0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	009b      	lsls	r3, r3, #2
 800bc28:	4413      	add	r3, r2
 800bc2a:	881b      	ldrh	r3, [r3, #0]
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc36:	813b      	strh	r3, [r7, #8]
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	441a      	add	r2, r3
 800bc42:	893b      	ldrh	r3, [r7, #8]
 800bc44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	8013      	strh	r3, [r2, #0]
 800bc58:	e192      	b.n	800bf80 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	009b      	lsls	r3, r3, #2
 800bc62:	4413      	add	r3, r2
 800bc64:	881b      	ldrh	r3, [r3, #0]
 800bc66:	827b      	strh	r3, [r7, #18]
 800bc68:	8a7b      	ldrh	r3, [r7, #18]
 800bc6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d01b      	beq.n	800bcaa <USB_DeactivateEndpoint+0xf6>
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	4413      	add	r3, r2
 800bc7c:	881b      	ldrh	r3, [r3, #0]
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc88:	823b      	strh	r3, [r7, #16]
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	441a      	add	r2, r3
 800bc94:	8a3b      	ldrh	r3, [r7, #16]
 800bc96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	4413      	add	r3, r2
 800bcb4:	881b      	ldrh	r3, [r3, #0]
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bcbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcc0:	81fb      	strh	r3, [r7, #14]
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	441a      	add	r2, r3
 800bccc:	89fb      	ldrh	r3, [r7, #14]
 800bcce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bcd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bcd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bcda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	8013      	strh	r3, [r2, #0]
 800bce2:	e14d      	b.n	800bf80 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	785b      	ldrb	r3, [r3, #1]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	f040 80a5 	bne.w	800be38 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	4413      	add	r3, r2
 800bcf8:	881b      	ldrh	r3, [r3, #0]
 800bcfa:	843b      	strh	r3, [r7, #32]
 800bcfc:	8c3b      	ldrh	r3, [r7, #32]
 800bcfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d01b      	beq.n	800bd3e <USB_DeactivateEndpoint+0x18a>
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	4413      	add	r3, r2
 800bd10:	881b      	ldrh	r3, [r3, #0]
 800bd12:	b29b      	uxth	r3, r3
 800bd14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd1c:	83fb      	strh	r3, [r7, #30]
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	441a      	add	r2, r3
 800bd28:	8bfb      	ldrh	r3, [r7, #30]
 800bd2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bd36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	4413      	add	r3, r2
 800bd48:	881b      	ldrh	r3, [r3, #0]
 800bd4a:	83bb      	strh	r3, [r7, #28]
 800bd4c:	8bbb      	ldrh	r3, [r7, #28]
 800bd4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d01b      	beq.n	800bd8e <USB_DeactivateEndpoint+0x1da>
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	4413      	add	r3, r2
 800bd60:	881b      	ldrh	r3, [r3, #0]
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd6c:	837b      	strh	r3, [r7, #26]
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	009b      	lsls	r3, r3, #2
 800bd76:	441a      	add	r2, r3
 800bd78:	8b7b      	ldrh	r3, [r7, #26]
 800bd7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	4413      	add	r3, r2
 800bd98:	881b      	ldrh	r3, [r3, #0]
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bda0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bda4:	833b      	strh	r3, [r7, #24]
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	441a      	add	r2, r3
 800bdb0:	8b3b      	ldrh	r3, [r7, #24]
 800bdb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	4413      	add	r3, r2
 800bdd0:	881b      	ldrh	r3, [r3, #0]
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bdd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bddc:	82fb      	strh	r3, [r7, #22]
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	441a      	add	r2, r3
 800bde8:	8afb      	ldrh	r3, [r7, #22]
 800bdea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bdfe:	687a      	ldr	r2, [r7, #4]
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	009b      	lsls	r3, r3, #2
 800be06:	4413      	add	r3, r2
 800be08:	881b      	ldrh	r3, [r3, #0]
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be14:	82bb      	strh	r3, [r7, #20]
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	009b      	lsls	r3, r3, #2
 800be1e:	441a      	add	r2, r3
 800be20:	8abb      	ldrh	r3, [r7, #20]
 800be22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be32:	b29b      	uxth	r3, r3
 800be34:	8013      	strh	r3, [r2, #0]
 800be36:	e0a3      	b.n	800bf80 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800be38:	687a      	ldr	r2, [r7, #4]
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	4413      	add	r3, r2
 800be42:	881b      	ldrh	r3, [r3, #0]
 800be44:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800be46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d01b      	beq.n	800be88 <USB_DeactivateEndpoint+0x2d4>
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	4413      	add	r3, r2
 800be5a:	881b      	ldrh	r3, [r3, #0]
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be66:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	009b      	lsls	r3, r3, #2
 800be70:	441a      	add	r2, r3
 800be72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800be74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800be80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be84:	b29b      	uxth	r3, r3
 800be86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800be88:	687a      	ldr	r2, [r7, #4]
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	4413      	add	r3, r2
 800be92:	881b      	ldrh	r3, [r3, #0]
 800be94:	857b      	strh	r3, [r7, #42]	; 0x2a
 800be96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800be98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d01b      	beq.n	800bed8 <USB_DeactivateEndpoint+0x324>
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	4413      	add	r3, r2
 800beaa:	881b      	ldrh	r3, [r3, #0]
 800beac:	b29b      	uxth	r3, r3
 800beae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800beb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800beb6:	853b      	strh	r3, [r7, #40]	; 0x28
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	441a      	add	r2, r3
 800bec2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800becc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bed0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	4413      	add	r3, r2
 800bee2:	881b      	ldrh	r3, [r3, #0]
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800beea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800beee:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	781b      	ldrb	r3, [r3, #0]
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	441a      	add	r2, r3
 800befa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800befc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bf08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf0c:	b29b      	uxth	r3, r3
 800bf0e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	009b      	lsls	r3, r3, #2
 800bf18:	4413      	add	r3, r2
 800bf1a:	881b      	ldrh	r3, [r3, #0]
 800bf1c:	b29b      	uxth	r3, r3
 800bf1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf26:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	441a      	add	r2, r3
 800bf32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	009b      	lsls	r3, r3, #2
 800bf50:	4413      	add	r3, r2
 800bf52:	881b      	ldrh	r3, [r3, #0]
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bf5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf5e:	847b      	strh	r3, [r7, #34]	; 0x22
 800bf60:	687a      	ldr	r2, [r7, #4]
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	441a      	add	r2, r3
 800bf6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800bf80:	2300      	movs	r3, #0
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3734      	adds	r7, #52	; 0x34
 800bf86:	46bd      	mov	sp, r7
 800bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8c:	4770      	bx	lr

0800bf8e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b0c2      	sub	sp, #264	; 0x108
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf9c:	6018      	str	r0, [r3, #0]
 800bf9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfa6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bfa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	785b      	ldrb	r3, [r3, #1]
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	f040 867b 	bne.w	800ccb0 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800bfba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	699a      	ldr	r2, [r3, #24]
 800bfc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d908      	bls.n	800bfe8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800bfd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	691b      	ldr	r3, [r3, #16]
 800bfe2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800bfe6:	e007      	b.n	800bff8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800bfe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	699b      	ldr	r3, [r3, #24]
 800bff4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800bff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	7b1b      	ldrb	r3, [r3, #12]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d13a      	bne.n	800c07e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c00c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	6959      	ldr	r1, [r3, #20]
 800c014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	88da      	ldrh	r2, [r3, #6]
 800c020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c024:	b29b      	uxth	r3, r3
 800c026:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c02a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c02e:	6800      	ldr	r0, [r0, #0]
 800c030:	f001 fc1d 	bl	800d86e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c038:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	613b      	str	r3, [r7, #16]
 800c040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c044:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c04e:	b29b      	uxth	r3, r3
 800c050:	461a      	mov	r2, r3
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	4413      	add	r3, r2
 800c056:	613b      	str	r3, [r7, #16]
 800c058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c05c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	00da      	lsls	r2, r3, #3
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	4413      	add	r3, r2
 800c06a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c06e:	60fb      	str	r3, [r7, #12]
 800c070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c074:	b29a      	uxth	r2, r3
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	801a      	strh	r2, [r3, #0]
 800c07a:	f000 bde3 	b.w	800cc44 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c07e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	78db      	ldrb	r3, [r3, #3]
 800c08a:	2b02      	cmp	r3, #2
 800c08c:	f040 843a 	bne.w	800c904 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	6a1a      	ldr	r2, [r3, #32]
 800c09c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	691b      	ldr	r3, [r3, #16]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	f240 83b7 	bls.w	800c81c <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c0ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0b6:	681a      	ldr	r2, [r3, #0]
 800c0b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	4413      	add	r3, r2
 800c0c8:	881b      	ldrh	r3, [r3, #0]
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800c0d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0e0:	681a      	ldr	r2, [r3, #0]
 800c0e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	441a      	add	r2, r3
 800c0f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c0f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800c102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c106:	b29b      	uxth	r3, r3
 800c108:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c10a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c10e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	6a1a      	ldr	r2, [r3, #32]
 800c116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c11a:	1ad2      	subs	r2, r2, r3
 800c11c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c12c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	009b      	lsls	r3, r3, #2
 800c140:	4413      	add	r3, r2
 800c142:	881b      	ldrh	r3, [r3, #0]
 800c144:	b29b      	uxth	r3, r3
 800c146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	f000 81b3 	beq.w	800c4b6 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c154:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	633b      	str	r3, [r7, #48]	; 0x30
 800c15c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	785b      	ldrb	r3, [r3, #1]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d16d      	bne.n	800c248 <USB_EPStartXfer+0x2ba>
 800c16c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c170:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	62bb      	str	r3, [r7, #40]	; 0x28
 800c178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c17c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c186:	b29b      	uxth	r3, r3
 800c188:	461a      	mov	r2, r3
 800c18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18c:	4413      	add	r3, r2
 800c18e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	00da      	lsls	r2, r3, #3
 800c19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a0:	4413      	add	r3, r2
 800c1a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c1a6:	627b      	str	r3, [r7, #36]	; 0x24
 800c1a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1ac:	2b3e      	cmp	r3, #62	; 0x3e
 800c1ae:	d91c      	bls.n	800c1ea <USB_EPStartXfer+0x25c>
 800c1b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1b4:	095b      	lsrs	r3, r3, #5
 800c1b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c1ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1be:	f003 031f 	and.w	r3, r3, #31
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d104      	bne.n	800c1d0 <USB_EPStartXfer+0x242>
 800c1c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c1ca:	3b01      	subs	r3, #1
 800c1cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c1d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	029b      	lsls	r3, r3, #10
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1e2:	b29a      	uxth	r2, r3
 800c1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e6:	801a      	strh	r2, [r3, #0]
 800c1e8:	e053      	b.n	800c292 <USB_EPStartXfer+0x304>
 800c1ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d112      	bne.n	800c218 <USB_EPStartXfer+0x28a>
 800c1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f4:	881b      	ldrh	r3, [r3, #0]
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c1fc:	b29a      	uxth	r2, r3
 800c1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c200:	801a      	strh	r2, [r3, #0]
 800c202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c204:	881b      	ldrh	r3, [r3, #0]
 800c206:	b29b      	uxth	r3, r3
 800c208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c20c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c210:	b29a      	uxth	r2, r3
 800c212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c214:	801a      	strh	r2, [r3, #0]
 800c216:	e03c      	b.n	800c292 <USB_EPStartXfer+0x304>
 800c218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c21c:	085b      	lsrs	r3, r3, #1
 800c21e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c226:	f003 0301 	and.w	r3, r3, #1
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d004      	beq.n	800c238 <USB_EPStartXfer+0x2aa>
 800c22e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c232:	3301      	adds	r3, #1
 800c234:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c238:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	029b      	lsls	r3, r3, #10
 800c240:	b29a      	uxth	r2, r3
 800c242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c244:	801a      	strh	r2, [r3, #0]
 800c246:	e024      	b.n	800c292 <USB_EPStartXfer+0x304>
 800c248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c24c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	785b      	ldrb	r3, [r3, #1]
 800c254:	2b01      	cmp	r3, #1
 800c256:	d11c      	bne.n	800c292 <USB_EPStartXfer+0x304>
 800c258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c25c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c266:	b29b      	uxth	r3, r3
 800c268:	461a      	mov	r2, r3
 800c26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26c:	4413      	add	r3, r2
 800c26e:	633b      	str	r3, [r7, #48]	; 0x30
 800c270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	00da      	lsls	r2, r3, #3
 800c27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c280:	4413      	add	r3, r2
 800c282:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c286:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c28c:	b29a      	uxth	r2, r3
 800c28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c290:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	895b      	ldrh	r3, [r3, #10]
 800c29e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c2a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	6959      	ldr	r1, [r3, #20]
 800c2ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2b2:	b29b      	uxth	r3, r3
 800c2b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c2b8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c2bc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c2c0:	6800      	ldr	r0, [r0, #0]
 800c2c2:	f001 fad4 	bl	800d86e <USB_WritePMA>
            ep->xfer_buff += len;
 800c2c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	695a      	ldr	r2, [r3, #20]
 800c2d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2d6:	441a      	add	r2, r3
 800c2d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c2e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	6a1a      	ldr	r2, [r3, #32]
 800c2f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	691b      	ldr	r3, [r3, #16]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d90f      	bls.n	800c320 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800c300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c304:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	6a1a      	ldr	r2, [r3, #32]
 800c30c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c310:	1ad2      	subs	r2, r2, r3
 800c312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	621a      	str	r2, [r3, #32]
 800c31e:	e00e      	b.n	800c33e <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800c320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	6a1b      	ldr	r3, [r3, #32]
 800c32c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800c330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2200      	movs	r2, #0
 800c33c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c33e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	785b      	ldrb	r3, [r3, #1]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d16d      	bne.n	800c42a <USB_EPStartXfer+0x49c>
 800c34e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c352:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	61bb      	str	r3, [r7, #24]
 800c35a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c35e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c368:	b29b      	uxth	r3, r3
 800c36a:	461a      	mov	r2, r3
 800c36c:	69bb      	ldr	r3, [r7, #24]
 800c36e:	4413      	add	r3, r2
 800c370:	61bb      	str	r3, [r7, #24]
 800c372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	00da      	lsls	r2, r3, #3
 800c380:	69bb      	ldr	r3, [r7, #24]
 800c382:	4413      	add	r3, r2
 800c384:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c388:	617b      	str	r3, [r7, #20]
 800c38a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c38e:	2b3e      	cmp	r3, #62	; 0x3e
 800c390:	d91c      	bls.n	800c3cc <USB_EPStartXfer+0x43e>
 800c392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c396:	095b      	lsrs	r3, r3, #5
 800c398:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c39c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3a0:	f003 031f 	and.w	r3, r3, #31
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d104      	bne.n	800c3b2 <USB_EPStartXfer+0x424>
 800c3a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c3b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	029b      	lsls	r3, r3, #10
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3c4:	b29a      	uxth	r2, r3
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	801a      	strh	r2, [r3, #0]
 800c3ca:	e059      	b.n	800c480 <USB_EPStartXfer+0x4f2>
 800c3cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d112      	bne.n	800c3fa <USB_EPStartXfer+0x46c>
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	881b      	ldrh	r3, [r3, #0]
 800c3d8:	b29b      	uxth	r3, r3
 800c3da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c3de:	b29a      	uxth	r2, r3
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	801a      	strh	r2, [r3, #0]
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	881b      	ldrh	r3, [r3, #0]
 800c3e8:	b29b      	uxth	r3, r3
 800c3ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3f2:	b29a      	uxth	r2, r3
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	801a      	strh	r2, [r3, #0]
 800c3f8:	e042      	b.n	800c480 <USB_EPStartXfer+0x4f2>
 800c3fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3fe:	085b      	lsrs	r3, r3, #1
 800c400:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c408:	f003 0301 	and.w	r3, r3, #1
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d004      	beq.n	800c41a <USB_EPStartXfer+0x48c>
 800c410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c414:	3301      	adds	r3, #1
 800c416:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c41a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c41e:	b29b      	uxth	r3, r3
 800c420:	029b      	lsls	r3, r3, #10
 800c422:	b29a      	uxth	r2, r3
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	801a      	strh	r2, [r3, #0]
 800c428:	e02a      	b.n	800c480 <USB_EPStartXfer+0x4f2>
 800c42a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c42e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	785b      	ldrb	r3, [r3, #1]
 800c436:	2b01      	cmp	r3, #1
 800c438:	d122      	bne.n	800c480 <USB_EPStartXfer+0x4f2>
 800c43a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c43e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	623b      	str	r3, [r7, #32]
 800c446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c44a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c454:	b29b      	uxth	r3, r3
 800c456:	461a      	mov	r2, r3
 800c458:	6a3b      	ldr	r3, [r7, #32]
 800c45a:	4413      	add	r3, r2
 800c45c:	623b      	str	r3, [r7, #32]
 800c45e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	00da      	lsls	r2, r3, #3
 800c46c:	6a3b      	ldr	r3, [r7, #32]
 800c46e:	4413      	add	r3, r2
 800c470:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c474:	61fb      	str	r3, [r7, #28]
 800c476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c47a:	b29a      	uxth	r2, r3
 800c47c:	69fb      	ldr	r3, [r7, #28]
 800c47e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	891b      	ldrh	r3, [r3, #8]
 800c48c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	6959      	ldr	r1, [r3, #20]
 800c49c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4a0:	b29b      	uxth	r3, r3
 800c4a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c4a6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c4aa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c4ae:	6800      	ldr	r0, [r0, #0]
 800c4b0:	f001 f9dd 	bl	800d86e <USB_WritePMA>
 800c4b4:	e3c6      	b.n	800cc44 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c4b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	785b      	ldrb	r3, [r3, #1]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d16d      	bne.n	800c5a2 <USB_EPStartXfer+0x614>
 800c4c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4e6:	4413      	add	r3, r2
 800c4e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	00da      	lsls	r2, r3, #3
 800c4f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4fa:	4413      	add	r3, r2
 800c4fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c500:	647b      	str	r3, [r7, #68]	; 0x44
 800c502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c506:	2b3e      	cmp	r3, #62	; 0x3e
 800c508:	d91c      	bls.n	800c544 <USB_EPStartXfer+0x5b6>
 800c50a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c50e:	095b      	lsrs	r3, r3, #5
 800c510:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c518:	f003 031f 	and.w	r3, r3, #31
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d104      	bne.n	800c52a <USB_EPStartXfer+0x59c>
 800c520:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c524:	3b01      	subs	r3, #1
 800c526:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c52a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c52e:	b29b      	uxth	r3, r3
 800c530:	029b      	lsls	r3, r3, #10
 800c532:	b29b      	uxth	r3, r3
 800c534:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c538:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c53c:	b29a      	uxth	r2, r3
 800c53e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c540:	801a      	strh	r2, [r3, #0]
 800c542:	e059      	b.n	800c5f8 <USB_EPStartXfer+0x66a>
 800c544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d112      	bne.n	800c572 <USB_EPStartXfer+0x5e4>
 800c54c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c54e:	881b      	ldrh	r3, [r3, #0]
 800c550:	b29b      	uxth	r3, r3
 800c552:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c556:	b29a      	uxth	r2, r3
 800c558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c55a:	801a      	strh	r2, [r3, #0]
 800c55c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c55e:	881b      	ldrh	r3, [r3, #0]
 800c560:	b29b      	uxth	r3, r3
 800c562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c56a:	b29a      	uxth	r2, r3
 800c56c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c56e:	801a      	strh	r2, [r3, #0]
 800c570:	e042      	b.n	800c5f8 <USB_EPStartXfer+0x66a>
 800c572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c576:	085b      	lsrs	r3, r3, #1
 800c578:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c580:	f003 0301 	and.w	r3, r3, #1
 800c584:	2b00      	cmp	r3, #0
 800c586:	d004      	beq.n	800c592 <USB_EPStartXfer+0x604>
 800c588:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c58c:	3301      	adds	r3, #1
 800c58e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c592:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c596:	b29b      	uxth	r3, r3
 800c598:	029b      	lsls	r3, r3, #10
 800c59a:	b29a      	uxth	r2, r3
 800c59c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c59e:	801a      	strh	r2, [r3, #0]
 800c5a0:	e02a      	b.n	800c5f8 <USB_EPStartXfer+0x66a>
 800c5a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	785b      	ldrb	r3, [r3, #1]
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d122      	bne.n	800c5f8 <USB_EPStartXfer+0x66a>
 800c5b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	653b      	str	r3, [r7, #80]	; 0x50
 800c5be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5d2:	4413      	add	r3, r2
 800c5d4:	653b      	str	r3, [r7, #80]	; 0x50
 800c5d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	00da      	lsls	r2, r3, #3
 800c5e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5e6:	4413      	add	r3, r2
 800c5e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c5ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c5ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5f2:	b29a      	uxth	r2, r3
 800c5f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c5f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	891b      	ldrh	r3, [r3, #8]
 800c604:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c60c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	6959      	ldr	r1, [r3, #20]
 800c614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c618:	b29b      	uxth	r3, r3
 800c61a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c61e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c622:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c626:	6800      	ldr	r0, [r0, #0]
 800c628:	f001 f921 	bl	800d86e <USB_WritePMA>
            ep->xfer_buff += len;
 800c62c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	695a      	ldr	r2, [r3, #20]
 800c638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c63c:	441a      	add	r2, r3
 800c63e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c64a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c64e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	6a1a      	ldr	r2, [r3, #32]
 800c656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c65a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	691b      	ldr	r3, [r3, #16]
 800c662:	429a      	cmp	r2, r3
 800c664:	d90f      	bls.n	800c686 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800c666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c66a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	6a1a      	ldr	r2, [r3, #32]
 800c672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c676:	1ad2      	subs	r2, r2, r3
 800c678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c67c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	621a      	str	r2, [r3, #32]
 800c684:	e00e      	b.n	800c6a4 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800c686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c68a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	6a1b      	ldr	r3, [r3, #32]
 800c692:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800c696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c69a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c6a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	643b      	str	r3, [r7, #64]	; 0x40
 800c6b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	785b      	ldrb	r3, [r3, #1]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d16d      	bne.n	800c79c <USB_EPStartXfer+0x80e>
 800c6c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	63bb      	str	r3, [r7, #56]	; 0x38
 800c6cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	461a      	mov	r2, r3
 800c6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6e0:	4413      	add	r3, r2
 800c6e2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c6e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	00da      	lsls	r2, r3, #3
 800c6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f4:	4413      	add	r3, r2
 800c6f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c6fa:	637b      	str	r3, [r7, #52]	; 0x34
 800c6fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c700:	2b3e      	cmp	r3, #62	; 0x3e
 800c702:	d91c      	bls.n	800c73e <USB_EPStartXfer+0x7b0>
 800c704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c708:	095b      	lsrs	r3, r3, #5
 800c70a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c712:	f003 031f 	and.w	r3, r3, #31
 800c716:	2b00      	cmp	r3, #0
 800c718:	d104      	bne.n	800c724 <USB_EPStartXfer+0x796>
 800c71a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c71e:	3b01      	subs	r3, #1
 800c720:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c728:	b29b      	uxth	r3, r3
 800c72a:	029b      	lsls	r3, r3, #10
 800c72c:	b29b      	uxth	r3, r3
 800c72e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c736:	b29a      	uxth	r2, r3
 800c738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c73a:	801a      	strh	r2, [r3, #0]
 800c73c:	e053      	b.n	800c7e6 <USB_EPStartXfer+0x858>
 800c73e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c742:	2b00      	cmp	r3, #0
 800c744:	d112      	bne.n	800c76c <USB_EPStartXfer+0x7de>
 800c746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c748:	881b      	ldrh	r3, [r3, #0]
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c750:	b29a      	uxth	r2, r3
 800c752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c754:	801a      	strh	r2, [r3, #0]
 800c756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c758:	881b      	ldrh	r3, [r3, #0]
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c764:	b29a      	uxth	r2, r3
 800c766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c768:	801a      	strh	r2, [r3, #0]
 800c76a:	e03c      	b.n	800c7e6 <USB_EPStartXfer+0x858>
 800c76c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c770:	085b      	lsrs	r3, r3, #1
 800c772:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c776:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c77a:	f003 0301 	and.w	r3, r3, #1
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d004      	beq.n	800c78c <USB_EPStartXfer+0x7fe>
 800c782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c786:	3301      	adds	r3, #1
 800c788:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c78c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c790:	b29b      	uxth	r3, r3
 800c792:	029b      	lsls	r3, r3, #10
 800c794:	b29a      	uxth	r2, r3
 800c796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c798:	801a      	strh	r2, [r3, #0]
 800c79a:	e024      	b.n	800c7e6 <USB_EPStartXfer+0x858>
 800c79c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	785b      	ldrb	r3, [r3, #1]
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d11c      	bne.n	800c7e6 <USB_EPStartXfer+0x858>
 800c7ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	461a      	mov	r2, r3
 800c7be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7c0:	4413      	add	r3, r2
 800c7c2:	643b      	str	r3, [r7, #64]	; 0x40
 800c7c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	00da      	lsls	r2, r3, #3
 800c7d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7d4:	4413      	add	r3, r2
 800c7d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c7da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7e0:	b29a      	uxth	r2, r3
 800c7e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c7e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	895b      	ldrh	r3, [r3, #10]
 800c7f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c7f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	6959      	ldr	r1, [r3, #20]
 800c802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c806:	b29b      	uxth	r3, r3
 800c808:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c80c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c810:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c814:	6800      	ldr	r0, [r0, #0]
 800c816:	f001 f82a 	bl	800d86e <USB_WritePMA>
 800c81a:	e213      	b.n	800cc44 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c81c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	6a1b      	ldr	r3, [r3, #32]
 800c828:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c82c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c830:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c83a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	009b      	lsls	r3, r3, #2
 800c844:	4413      	add	r3, r2
 800c846:	881b      	ldrh	r3, [r3, #0]
 800c848:	b29b      	uxth	r3, r3
 800c84a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800c84e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c852:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800c856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c85a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c85e:	681a      	ldr	r2, [r3, #0]
 800c860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	009b      	lsls	r3, r3, #2
 800c86e:	441a      	add	r2, r3
 800c870:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c87c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c884:	b29b      	uxth	r3, r3
 800c886:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c88c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c898:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8a2:	b29b      	uxth	r3, r3
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8a8:	4413      	add	r3, r2
 800c8aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c8ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	00da      	lsls	r2, r3, #3
 800c8ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8bc:	4413      	add	r3, r2
 800c8be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c8c2:	65bb      	str	r3, [r7, #88]	; 0x58
 800c8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8c8:	b29a      	uxth	r2, r3
 800c8ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c8cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c8ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	891b      	ldrh	r3, [r3, #8]
 800c8da:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c8de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	6959      	ldr	r1, [r3, #20]
 800c8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c8f4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c8f8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c8fc:	6800      	ldr	r0, [r0, #0]
 800c8fe:	f000 ffb6 	bl	800d86e <USB_WritePMA>
 800c902:	e19f      	b.n	800cc44 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	6a1a      	ldr	r2, [r3, #32]
 800c910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c914:	1ad2      	subs	r2, r2, r3
 800c916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c91a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	4413      	add	r3, r2
 800c93c:	881b      	ldrh	r3, [r3, #0]
 800c93e:	b29b      	uxth	r3, r3
 800c940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c944:	2b00      	cmp	r3, #0
 800c946:	f000 80bc 	beq.w	800cac2 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c94a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c94e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	673b      	str	r3, [r7, #112]	; 0x70
 800c956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c95a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	785b      	ldrb	r3, [r3, #1]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d16d      	bne.n	800ca42 <USB_EPStartXfer+0xab4>
 800c966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c96a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	66bb      	str	r3, [r7, #104]	; 0x68
 800c972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c976:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c980:	b29b      	uxth	r3, r3
 800c982:	461a      	mov	r2, r3
 800c984:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c986:	4413      	add	r3, r2
 800c988:	66bb      	str	r3, [r7, #104]	; 0x68
 800c98a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c98e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	00da      	lsls	r2, r3, #3
 800c998:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c99a:	4413      	add	r3, r2
 800c99c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c9a0:	667b      	str	r3, [r7, #100]	; 0x64
 800c9a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9a6:	2b3e      	cmp	r3, #62	; 0x3e
 800c9a8:	d91c      	bls.n	800c9e4 <USB_EPStartXfer+0xa56>
 800c9aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9ae:	095b      	lsrs	r3, r3, #5
 800c9b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9b8:	f003 031f 	and.w	r3, r3, #31
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d104      	bne.n	800c9ca <USB_EPStartXfer+0xa3c>
 800c9c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c9c4:	3b01      	subs	r3, #1
 800c9c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c9ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	029b      	lsls	r3, r3, #10
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c9d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c9dc:	b29a      	uxth	r2, r3
 800c9de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9e0:	801a      	strh	r2, [r3, #0]
 800c9e2:	e053      	b.n	800ca8c <USB_EPStartXfer+0xafe>
 800c9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d112      	bne.n	800ca12 <USB_EPStartXfer+0xa84>
 800c9ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9ee:	881b      	ldrh	r3, [r3, #0]
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c9f6:	b29a      	uxth	r2, r3
 800c9f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9fa:	801a      	strh	r2, [r3, #0]
 800c9fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9fe:	881b      	ldrh	r3, [r3, #0]
 800ca00:	b29b      	uxth	r3, r3
 800ca02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca0a:	b29a      	uxth	r2, r3
 800ca0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca0e:	801a      	strh	r2, [r3, #0]
 800ca10:	e03c      	b.n	800ca8c <USB_EPStartXfer+0xafe>
 800ca12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca16:	085b      	lsrs	r3, r3, #1
 800ca18:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ca1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca20:	f003 0301 	and.w	r3, r3, #1
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d004      	beq.n	800ca32 <USB_EPStartXfer+0xaa4>
 800ca28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ca32:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	029b      	lsls	r3, r3, #10
 800ca3a:	b29a      	uxth	r2, r3
 800ca3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca3e:	801a      	strh	r2, [r3, #0]
 800ca40:	e024      	b.n	800ca8c <USB_EPStartXfer+0xafe>
 800ca42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	785b      	ldrb	r3, [r3, #1]
 800ca4e:	2b01      	cmp	r3, #1
 800ca50:	d11c      	bne.n	800ca8c <USB_EPStartXfer+0xafe>
 800ca52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	461a      	mov	r2, r3
 800ca64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca66:	4413      	add	r3, r2
 800ca68:	673b      	str	r3, [r7, #112]	; 0x70
 800ca6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	781b      	ldrb	r3, [r3, #0]
 800ca76:	00da      	lsls	r2, r3, #3
 800ca78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca7a:	4413      	add	r3, r2
 800ca7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ca80:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ca82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca86:	b29a      	uxth	r2, r3
 800ca88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca8a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ca8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	895b      	ldrh	r3, [r3, #10]
 800ca98:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ca9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800caa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	6959      	ldr	r1, [r3, #20]
 800caa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800caac:	b29b      	uxth	r3, r3
 800caae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cab2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cab6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800caba:	6800      	ldr	r0, [r0, #0]
 800cabc:	f000 fed7 	bl	800d86e <USB_WritePMA>
 800cac0:	e0c0      	b.n	800cc44 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	785b      	ldrb	r3, [r3, #1]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d16d      	bne.n	800cbae <USB_EPStartXfer+0xc20>
 800cad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cad6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cae2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800caec:	b29b      	uxth	r3, r3
 800caee:	461a      	mov	r2, r3
 800caf0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800caf2:	4413      	add	r3, r2
 800caf4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800caf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cafa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	00da      	lsls	r2, r3, #3
 800cb04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cb06:	4413      	add	r3, r2
 800cb08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cb0c:	67bb      	str	r3, [r7, #120]	; 0x78
 800cb0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb12:	2b3e      	cmp	r3, #62	; 0x3e
 800cb14:	d91c      	bls.n	800cb50 <USB_EPStartXfer+0xbc2>
 800cb16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb1a:	095b      	lsrs	r3, r3, #5
 800cb1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cb20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb24:	f003 031f 	and.w	r3, r3, #31
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d104      	bne.n	800cb36 <USB_EPStartXfer+0xba8>
 800cb2c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800cb30:	3b01      	subs	r3, #1
 800cb32:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cb36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800cb3a:	b29b      	uxth	r3, r3
 800cb3c:	029b      	lsls	r3, r3, #10
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb48:	b29a      	uxth	r2, r3
 800cb4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb4c:	801a      	strh	r2, [r3, #0]
 800cb4e:	e05f      	b.n	800cc10 <USB_EPStartXfer+0xc82>
 800cb50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d112      	bne.n	800cb7e <USB_EPStartXfer+0xbf0>
 800cb58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb5a:	881b      	ldrh	r3, [r3, #0]
 800cb5c:	b29b      	uxth	r3, r3
 800cb5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cb62:	b29a      	uxth	r2, r3
 800cb64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb66:	801a      	strh	r2, [r3, #0]
 800cb68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb6a:	881b      	ldrh	r3, [r3, #0]
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb76:	b29a      	uxth	r2, r3
 800cb78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb7a:	801a      	strh	r2, [r3, #0]
 800cb7c:	e048      	b.n	800cc10 <USB_EPStartXfer+0xc82>
 800cb7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb82:	085b      	lsrs	r3, r3, #1
 800cb84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cb88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb8c:	f003 0301 	and.w	r3, r3, #1
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d004      	beq.n	800cb9e <USB_EPStartXfer+0xc10>
 800cb94:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800cb98:	3301      	adds	r3, #1
 800cb9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cb9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800cba2:	b29b      	uxth	r3, r3
 800cba4:	029b      	lsls	r3, r3, #10
 800cba6:	b29a      	uxth	r2, r3
 800cba8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cbaa:	801a      	strh	r2, [r3, #0]
 800cbac:	e030      	b.n	800cc10 <USB_EPStartXfer+0xc82>
 800cbae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	785b      	ldrb	r3, [r3, #1]
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d128      	bne.n	800cc10 <USB_EPStartXfer+0xc82>
 800cbbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cbcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	461a      	mov	r2, r3
 800cbde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cbe2:	4413      	add	r3, r2
 800cbe4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cbe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	00da      	lsls	r2, r3, #3
 800cbf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cbfa:	4413      	add	r3, r2
 800cbfc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cc00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cc04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc08:	b29a      	uxth	r2, r3
 800cc0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cc0e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cc10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	891b      	ldrh	r3, [r3, #8]
 800cc1c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cc20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	6959      	ldr	r1, [r3, #20]
 800cc2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cc36:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cc3a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800cc3e:	6800      	ldr	r0, [r0, #0]
 800cc40:	f000 fe15 	bl	800d86e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800cc44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cc4c:	681a      	ldr	r2, [r3, #0]
 800cc4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	009b      	lsls	r3, r3, #2
 800cc5c:	4413      	add	r3, r2
 800cc5e:	881b      	ldrh	r3, [r3, #0]
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc6a:	817b      	strh	r3, [r7, #10]
 800cc6c:	897b      	ldrh	r3, [r7, #10]
 800cc6e:	f083 0310 	eor.w	r3, r3, #16
 800cc72:	817b      	strh	r3, [r7, #10]
 800cc74:	897b      	ldrh	r3, [r7, #10]
 800cc76:	f083 0320 	eor.w	r3, r3, #32
 800cc7a:	817b      	strh	r3, [r7, #10]
 800cc7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	781b      	ldrb	r3, [r3, #0]
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	441a      	add	r2, r3
 800cc96:	897b      	ldrh	r3, [r7, #10]
 800cc98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cca8:	b29b      	uxth	r3, r3
 800ccaa:	8013      	strh	r3, [r2, #0]
 800ccac:	f000 bc9f 	b.w	800d5ee <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ccb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	7b1b      	ldrb	r3, [r3, #12]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	f040 80ae 	bne.w	800ce1e <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ccc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	699a      	ldr	r2, [r3, #24]
 800ccce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	691b      	ldr	r3, [r3, #16]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d917      	bls.n	800cd0e <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800ccde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cce2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	691b      	ldr	r3, [r3, #16]
 800ccea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800ccee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	699a      	ldr	r2, [r3, #24]
 800ccfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccfe:	1ad2      	subs	r2, r2, r3
 800cd00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	619a      	str	r2, [r3, #24]
 800cd0c:	e00e      	b.n	800cd2c <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800cd0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	699b      	ldr	r3, [r3, #24]
 800cd1a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800cd1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800cd2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cd3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd48:	b29b      	uxth	r3, r3
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cd50:	4413      	add	r3, r2
 800cd52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cd56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	00da      	lsls	r2, r3, #3
 800cd64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cd68:	4413      	add	r3, r2
 800cd6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cd6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cd72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd76:	2b3e      	cmp	r3, #62	; 0x3e
 800cd78:	d91d      	bls.n	800cdb6 <USB_EPStartXfer+0xe28>
 800cd7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd7e:	095b      	lsrs	r3, r3, #5
 800cd80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cd84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd88:	f003 031f 	and.w	r3, r3, #31
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d104      	bne.n	800cd9a <USB_EPStartXfer+0xe0c>
 800cd90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cd94:	3b01      	subs	r3, #1
 800cd96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cd9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	029b      	lsls	r3, r3, #10
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cda8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdac:	b29a      	uxth	r2, r3
 800cdae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cdb2:	801a      	strh	r2, [r3, #0]
 800cdb4:	e3e1      	b.n	800d57a <USB_EPStartXfer+0x15ec>
 800cdb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d116      	bne.n	800cdec <USB_EPStartXfer+0xe5e>
 800cdbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cdc2:	881b      	ldrh	r3, [r3, #0]
 800cdc4:	b29b      	uxth	r3, r3
 800cdc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cdca:	b29a      	uxth	r2, r3
 800cdcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cdd0:	801a      	strh	r2, [r3, #0]
 800cdd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cdd6:	881b      	ldrh	r3, [r3, #0]
 800cdd8:	b29b      	uxth	r3, r3
 800cdda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cde2:	b29a      	uxth	r2, r3
 800cde4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cde8:	801a      	strh	r2, [r3, #0]
 800cdea:	e3c6      	b.n	800d57a <USB_EPStartXfer+0x15ec>
 800cdec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdf0:	085b      	lsrs	r3, r3, #1
 800cdf2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cdf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdfa:	f003 0301 	and.w	r3, r3, #1
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d004      	beq.n	800ce0c <USB_EPStartXfer+0xe7e>
 800ce02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ce06:	3301      	adds	r3, #1
 800ce08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ce0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	029b      	lsls	r3, r3, #10
 800ce14:	b29a      	uxth	r2, r3
 800ce16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ce1a:	801a      	strh	r2, [r3, #0]
 800ce1c:	e3ad      	b.n	800d57a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ce1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	78db      	ldrb	r3, [r3, #3]
 800ce2a:	2b02      	cmp	r3, #2
 800ce2c:	f040 8200 	bne.w	800d230 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ce30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	785b      	ldrb	r3, [r3, #1]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	f040 8091 	bne.w	800cf64 <USB_EPStartXfer+0xfd6>
 800ce42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ce50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce5e:	b29b      	uxth	r3, r3
 800ce60:	461a      	mov	r2, r3
 800ce62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce66:	4413      	add	r3, r2
 800ce68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ce6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	00da      	lsls	r2, r3, #3
 800ce7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce7e:	4413      	add	r3, r2
 800ce80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ce84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ce88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	691b      	ldr	r3, [r3, #16]
 800ce94:	2b3e      	cmp	r3, #62	; 0x3e
 800ce96:	d925      	bls.n	800cee4 <USB_EPStartXfer+0xf56>
 800ce98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	691b      	ldr	r3, [r3, #16]
 800cea4:	095b      	lsrs	r3, r3, #5
 800cea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ceaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ceae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	691b      	ldr	r3, [r3, #16]
 800ceb6:	f003 031f 	and.w	r3, r3, #31
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d104      	bne.n	800cec8 <USB_EPStartXfer+0xf3a>
 800cebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cec2:	3b01      	subs	r3, #1
 800cec4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cecc:	b29b      	uxth	r3, r3
 800cece:	029b      	lsls	r3, r3, #10
 800ced0:	b29b      	uxth	r3, r3
 800ced2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ced6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ceda:	b29a      	uxth	r2, r3
 800cedc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cee0:	801a      	strh	r2, [r3, #0]
 800cee2:	e074      	b.n	800cfce <USB_EPStartXfer+0x1040>
 800cee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	691b      	ldr	r3, [r3, #16]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d116      	bne.n	800cf22 <USB_EPStartXfer+0xf94>
 800cef4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cef8:	881b      	ldrh	r3, [r3, #0]
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cf00:	b29a      	uxth	r2, r3
 800cf02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cf06:	801a      	strh	r2, [r3, #0]
 800cf08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cf0c:	881b      	ldrh	r3, [r3, #0]
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf18:	b29a      	uxth	r2, r3
 800cf1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cf1e:	801a      	strh	r2, [r3, #0]
 800cf20:	e055      	b.n	800cfce <USB_EPStartXfer+0x1040>
 800cf22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	691b      	ldr	r3, [r3, #16]
 800cf2e:	085b      	lsrs	r3, r3, #1
 800cf30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cf34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	691b      	ldr	r3, [r3, #16]
 800cf40:	f003 0301 	and.w	r3, r3, #1
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d004      	beq.n	800cf52 <USB_EPStartXfer+0xfc4>
 800cf48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cf52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	029b      	lsls	r3, r3, #10
 800cf5a:	b29a      	uxth	r2, r3
 800cf5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cf60:	801a      	strh	r2, [r3, #0]
 800cf62:	e034      	b.n	800cfce <USB_EPStartXfer+0x1040>
 800cf64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	785b      	ldrb	r3, [r3, #1]
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d12c      	bne.n	800cfce <USB_EPStartXfer+0x1040>
 800cf74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cf82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	461a      	mov	r2, r3
 800cf94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cf98:	4413      	add	r3, r2
 800cf9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cf9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	00da      	lsls	r2, r3, #3
 800cfac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cfb0:	4413      	add	r3, r2
 800cfb2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cfb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cfba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	691b      	ldr	r3, [r3, #16]
 800cfc6:	b29a      	uxth	r2, r3
 800cfc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cfcc:	801a      	strh	r2, [r3, #0]
 800cfce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cfdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	785b      	ldrb	r3, [r3, #1]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	f040 8091 	bne.w	800d110 <USB_EPStartXfer+0x1182>
 800cfee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cff2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d000:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	461a      	mov	r2, r3
 800d00e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d012:	4413      	add	r3, r2
 800d014:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d01c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	00da      	lsls	r2, r3, #3
 800d026:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d02a:	4413      	add	r3, r2
 800d02c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d030:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	691b      	ldr	r3, [r3, #16]
 800d040:	2b3e      	cmp	r3, #62	; 0x3e
 800d042:	d925      	bls.n	800d090 <USB_EPStartXfer+0x1102>
 800d044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	691b      	ldr	r3, [r3, #16]
 800d050:	095b      	lsrs	r3, r3, #5
 800d052:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d05a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	691b      	ldr	r3, [r3, #16]
 800d062:	f003 031f 	and.w	r3, r3, #31
 800d066:	2b00      	cmp	r3, #0
 800d068:	d104      	bne.n	800d074 <USB_EPStartXfer+0x10e6>
 800d06a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d06e:	3b01      	subs	r3, #1
 800d070:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d078:	b29b      	uxth	r3, r3
 800d07a:	029b      	lsls	r3, r3, #10
 800d07c:	b29b      	uxth	r3, r3
 800d07e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d086:	b29a      	uxth	r2, r3
 800d088:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d08c:	801a      	strh	r2, [r3, #0]
 800d08e:	e06d      	b.n	800d16c <USB_EPStartXfer+0x11de>
 800d090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	691b      	ldr	r3, [r3, #16]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d116      	bne.n	800d0ce <USB_EPStartXfer+0x1140>
 800d0a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d0a4:	881b      	ldrh	r3, [r3, #0]
 800d0a6:	b29b      	uxth	r3, r3
 800d0a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d0ac:	b29a      	uxth	r2, r3
 800d0ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d0b2:	801a      	strh	r2, [r3, #0]
 800d0b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d0b8:	881b      	ldrh	r3, [r3, #0]
 800d0ba:	b29b      	uxth	r3, r3
 800d0bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0c4:	b29a      	uxth	r2, r3
 800d0c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d0ca:	801a      	strh	r2, [r3, #0]
 800d0cc:	e04e      	b.n	800d16c <USB_EPStartXfer+0x11de>
 800d0ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	691b      	ldr	r3, [r3, #16]
 800d0da:	085b      	lsrs	r3, r3, #1
 800d0dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d0e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	691b      	ldr	r3, [r3, #16]
 800d0ec:	f003 0301 	and.w	r3, r3, #1
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d004      	beq.n	800d0fe <USB_EPStartXfer+0x1170>
 800d0f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0f8:	3301      	adds	r3, #1
 800d0fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d0fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d102:	b29b      	uxth	r3, r3
 800d104:	029b      	lsls	r3, r3, #10
 800d106:	b29a      	uxth	r2, r3
 800d108:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d10c:	801a      	strh	r2, [r3, #0]
 800d10e:	e02d      	b.n	800d16c <USB_EPStartXfer+0x11de>
 800d110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	785b      	ldrb	r3, [r3, #1]
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	d125      	bne.n	800d16c <USB_EPStartXfer+0x11de>
 800d120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d124:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d12e:	b29b      	uxth	r3, r3
 800d130:	461a      	mov	r2, r3
 800d132:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d136:	4413      	add	r3, r2
 800d138:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d13c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	00da      	lsls	r2, r3, #3
 800d14a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d14e:	4413      	add	r3, r2
 800d150:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d154:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d15c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	691b      	ldr	r3, [r3, #16]
 800d164:	b29a      	uxth	r2, r3
 800d166:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d16a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d16c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	69db      	ldr	r3, [r3, #28]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	f000 81fe 	beq.w	800d57a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d17e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d182:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d18c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	009b      	lsls	r3, r3, #2
 800d196:	4413      	add	r3, r2
 800d198:	881b      	ldrh	r3, [r3, #0]
 800d19a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d19e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d1a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d005      	beq.n	800d1b6 <USB_EPStartXfer+0x1228>
 800d1aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d1ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d10d      	bne.n	800d1d2 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d1b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d1ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	f040 81db 	bne.w	800d57a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d1c4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d1c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	f040 81d4 	bne.w	800d57a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d1d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d1da:	681a      	ldr	r2, [r3, #0]
 800d1dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	009b      	lsls	r3, r3, #2
 800d1ea:	4413      	add	r3, r2
 800d1ec:	881b      	ldrh	r3, [r3, #0]
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d1f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1f8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800d1fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d200:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d204:	681a      	ldr	r2, [r3, #0]
 800d206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d20a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	441a      	add	r2, r3
 800d216:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800d21a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d21e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d226:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	8013      	strh	r3, [r2, #0]
 800d22e:	e1a4      	b.n	800d57a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	78db      	ldrb	r3, [r3, #3]
 800d23c:	2b01      	cmp	r3, #1
 800d23e:	f040 819a 	bne.w	800d576 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	699a      	ldr	r2, [r3, #24]
 800d24e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	691b      	ldr	r3, [r3, #16]
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d917      	bls.n	800d28e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800d25e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	691b      	ldr	r3, [r3, #16]
 800d26a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800d26e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	699a      	ldr	r2, [r3, #24]
 800d27a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d27e:	1ad2      	subs	r2, r2, r3
 800d280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	619a      	str	r2, [r3, #24]
 800d28c:	e00e      	b.n	800d2ac <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800d28e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	699b      	ldr	r3, [r3, #24]
 800d29a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800d29e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d2ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	785b      	ldrb	r3, [r3, #1]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d178      	bne.n	800d3ae <USB_EPStartXfer+0x1420>
 800d2bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d2ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d2d8:	b29b      	uxth	r3, r3
 800d2da:	461a      	mov	r2, r3
 800d2dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d2e0:	4413      	add	r3, r2
 800d2e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d2e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	00da      	lsls	r2, r3, #3
 800d2f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d2f8:	4413      	add	r3, r2
 800d2fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d2fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d306:	2b3e      	cmp	r3, #62	; 0x3e
 800d308:	d91d      	bls.n	800d346 <USB_EPStartXfer+0x13b8>
 800d30a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d30e:	095b      	lsrs	r3, r3, #5
 800d310:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d318:	f003 031f 	and.w	r3, r3, #31
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d104      	bne.n	800d32a <USB_EPStartXfer+0x139c>
 800d320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d324:	3b01      	subs	r3, #1
 800d326:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d32a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d32e:	b29b      	uxth	r3, r3
 800d330:	029b      	lsls	r3, r3, #10
 800d332:	b29b      	uxth	r3, r3
 800d334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d33c:	b29a      	uxth	r2, r3
 800d33e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d342:	801a      	strh	r2, [r3, #0]
 800d344:	e064      	b.n	800d410 <USB_EPStartXfer+0x1482>
 800d346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d116      	bne.n	800d37c <USB_EPStartXfer+0x13ee>
 800d34e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d352:	881b      	ldrh	r3, [r3, #0]
 800d354:	b29b      	uxth	r3, r3
 800d356:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d35a:	b29a      	uxth	r2, r3
 800d35c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d360:	801a      	strh	r2, [r3, #0]
 800d362:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d366:	881b      	ldrh	r3, [r3, #0]
 800d368:	b29b      	uxth	r3, r3
 800d36a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d36e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d372:	b29a      	uxth	r2, r3
 800d374:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d378:	801a      	strh	r2, [r3, #0]
 800d37a:	e049      	b.n	800d410 <USB_EPStartXfer+0x1482>
 800d37c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d380:	085b      	lsrs	r3, r3, #1
 800d382:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d38a:	f003 0301 	and.w	r3, r3, #1
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d004      	beq.n	800d39c <USB_EPStartXfer+0x140e>
 800d392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d396:	3301      	adds	r3, #1
 800d398:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d39c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d3a0:	b29b      	uxth	r3, r3
 800d3a2:	029b      	lsls	r3, r3, #10
 800d3a4:	b29a      	uxth	r2, r3
 800d3a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d3aa:	801a      	strh	r2, [r3, #0]
 800d3ac:	e030      	b.n	800d410 <USB_EPStartXfer+0x1482>
 800d3ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	785b      	ldrb	r3, [r3, #1]
 800d3ba:	2b01      	cmp	r3, #1
 800d3bc:	d128      	bne.n	800d410 <USB_EPStartXfer+0x1482>
 800d3be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d3cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d3da:	b29b      	uxth	r3, r3
 800d3dc:	461a      	mov	r2, r3
 800d3de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d3e2:	4413      	add	r3, r2
 800d3e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d3e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	00da      	lsls	r2, r3, #3
 800d3f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d3fa:	4413      	add	r3, r2
 800d3fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d400:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d408:	b29a      	uxth	r2, r3
 800d40a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d40e:	801a      	strh	r2, [r3, #0]
 800d410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d414:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d41e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	785b      	ldrb	r3, [r3, #1]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d178      	bne.n	800d520 <USB_EPStartXfer+0x1592>
 800d42e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d432:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d43c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d440:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	461a      	mov	r2, r3
 800d44e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d452:	4413      	add	r3, r2
 800d454:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d45c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	00da      	lsls	r2, r3, #3
 800d466:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d46a:	4413      	add	r3, r2
 800d46c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d470:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d478:	2b3e      	cmp	r3, #62	; 0x3e
 800d47a:	d91d      	bls.n	800d4b8 <USB_EPStartXfer+0x152a>
 800d47c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d480:	095b      	lsrs	r3, r3, #5
 800d482:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d48a:	f003 031f 	and.w	r3, r3, #31
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d104      	bne.n	800d49c <USB_EPStartXfer+0x150e>
 800d492:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d496:	3b01      	subs	r3, #1
 800d498:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d49c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d4a0:	b29b      	uxth	r3, r3
 800d4a2:	029b      	lsls	r3, r3, #10
 800d4a4:	b29b      	uxth	r3, r3
 800d4a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d4aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d4ae:	b29a      	uxth	r2, r3
 800d4b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d4b4:	801a      	strh	r2, [r3, #0]
 800d4b6:	e060      	b.n	800d57a <USB_EPStartXfer+0x15ec>
 800d4b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d116      	bne.n	800d4ee <USB_EPStartXfer+0x1560>
 800d4c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d4c4:	881b      	ldrh	r3, [r3, #0]
 800d4c6:	b29b      	uxth	r3, r3
 800d4c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d4cc:	b29a      	uxth	r2, r3
 800d4ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d4d2:	801a      	strh	r2, [r3, #0]
 800d4d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d4d8:	881b      	ldrh	r3, [r3, #0]
 800d4da:	b29b      	uxth	r3, r3
 800d4dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d4e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d4e4:	b29a      	uxth	r2, r3
 800d4e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d4ea:	801a      	strh	r2, [r3, #0]
 800d4ec:	e045      	b.n	800d57a <USB_EPStartXfer+0x15ec>
 800d4ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4f2:	085b      	lsrs	r3, r3, #1
 800d4f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d4f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4fc:	f003 0301 	and.w	r3, r3, #1
 800d500:	2b00      	cmp	r3, #0
 800d502:	d004      	beq.n	800d50e <USB_EPStartXfer+0x1580>
 800d504:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d508:	3301      	adds	r3, #1
 800d50a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d50e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d512:	b29b      	uxth	r3, r3
 800d514:	029b      	lsls	r3, r3, #10
 800d516:	b29a      	uxth	r2, r3
 800d518:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d51c:	801a      	strh	r2, [r3, #0]
 800d51e:	e02c      	b.n	800d57a <USB_EPStartXfer+0x15ec>
 800d520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	785b      	ldrb	r3, [r3, #1]
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d124      	bne.n	800d57a <USB_EPStartXfer+0x15ec>
 800d530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d534:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d53e:	b29b      	uxth	r3, r3
 800d540:	461a      	mov	r2, r3
 800d542:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d546:	4413      	add	r3, r2
 800d548:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d54c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	781b      	ldrb	r3, [r3, #0]
 800d558:	00da      	lsls	r2, r3, #3
 800d55a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d55e:	4413      	add	r3, r2
 800d560:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d564:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d56c:	b29a      	uxth	r2, r3
 800d56e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d572:	801a      	strh	r2, [r3, #0]
 800d574:	e001      	b.n	800d57a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800d576:	2301      	movs	r3, #1
 800d578:	e03a      	b.n	800d5f0 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d57a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d57e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	009b      	lsls	r3, r3, #2
 800d592:	4413      	add	r3, r2
 800d594:	881b      	ldrh	r3, [r3, #0]
 800d596:	b29b      	uxth	r3, r3
 800d598:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d59c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d5a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d5a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d5ac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d5b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d5b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d5b8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d5bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d5c4:	681a      	ldr	r2, [r3, #0]
 800d5c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	009b      	lsls	r3, r3, #2
 800d5d4:	441a      	add	r2, r3
 800d5d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d5da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d5de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d5e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d5e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d5ee:	2300      	movs	r3, #0
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}

0800d5fa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d5fa:	b480      	push	{r7}
 800d5fc:	b085      	sub	sp, #20
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	6078      	str	r0, [r7, #4]
 800d602:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	785b      	ldrb	r3, [r3, #1]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d020      	beq.n	800d64e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d60c:	687a      	ldr	r2, [r7, #4]
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	009b      	lsls	r3, r3, #2
 800d614:	4413      	add	r3, r2
 800d616:	881b      	ldrh	r3, [r3, #0]
 800d618:	b29b      	uxth	r3, r3
 800d61a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d61e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d622:	81bb      	strh	r3, [r7, #12]
 800d624:	89bb      	ldrh	r3, [r7, #12]
 800d626:	f083 0310 	eor.w	r3, r3, #16
 800d62a:	81bb      	strh	r3, [r7, #12]
 800d62c:	687a      	ldr	r2, [r7, #4]
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	009b      	lsls	r3, r3, #2
 800d634:	441a      	add	r2, r3
 800d636:	89bb      	ldrh	r3, [r7, #12]
 800d638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d63c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d648:	b29b      	uxth	r3, r3
 800d64a:	8013      	strh	r3, [r2, #0]
 800d64c:	e01f      	b.n	800d68e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d64e:	687a      	ldr	r2, [r7, #4]
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	009b      	lsls	r3, r3, #2
 800d656:	4413      	add	r3, r2
 800d658:	881b      	ldrh	r3, [r3, #0]
 800d65a:	b29b      	uxth	r3, r3
 800d65c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d664:	81fb      	strh	r3, [r7, #14]
 800d666:	89fb      	ldrh	r3, [r7, #14]
 800d668:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d66c:	81fb      	strh	r3, [r7, #14]
 800d66e:	687a      	ldr	r2, [r7, #4]
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	009b      	lsls	r3, r3, #2
 800d676:	441a      	add	r2, r3
 800d678:	89fb      	ldrh	r3, [r7, #14]
 800d67a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d67e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d68e:	2300      	movs	r3, #0
}
 800d690:	4618      	mov	r0, r3
 800d692:	3714      	adds	r7, #20
 800d694:	46bd      	mov	sp, r7
 800d696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69a:	4770      	bx	lr

0800d69c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d69c:	b480      	push	{r7}
 800d69e:	b087      	sub	sp, #28
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	7b1b      	ldrb	r3, [r3, #12]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	f040 809d 	bne.w	800d7ea <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	785b      	ldrb	r3, [r3, #1]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d04c      	beq.n	800d752 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d6b8:	687a      	ldr	r2, [r7, #4]
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	009b      	lsls	r3, r3, #2
 800d6c0:	4413      	add	r3, r2
 800d6c2:	881b      	ldrh	r3, [r3, #0]
 800d6c4:	823b      	strh	r3, [r7, #16]
 800d6c6:	8a3b      	ldrh	r3, [r7, #16]
 800d6c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d01b      	beq.n	800d708 <USB_EPClearStall+0x6c>
 800d6d0:	687a      	ldr	r2, [r7, #4]
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	781b      	ldrb	r3, [r3, #0]
 800d6d6:	009b      	lsls	r3, r3, #2
 800d6d8:	4413      	add	r3, r2
 800d6da:	881b      	ldrh	r3, [r3, #0]
 800d6dc:	b29b      	uxth	r3, r3
 800d6de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d6e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6e6:	81fb      	strh	r3, [r7, #14]
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	009b      	lsls	r3, r3, #2
 800d6f0:	441a      	add	r2, r3
 800d6f2:	89fb      	ldrh	r3, [r7, #14]
 800d6f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d6f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d6fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d700:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d704:	b29b      	uxth	r3, r3
 800d706:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	78db      	ldrb	r3, [r3, #3]
 800d70c:	2b01      	cmp	r3, #1
 800d70e:	d06c      	beq.n	800d7ea <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d710:	687a      	ldr	r2, [r7, #4]
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	009b      	lsls	r3, r3, #2
 800d718:	4413      	add	r3, r2
 800d71a:	881b      	ldrh	r3, [r3, #0]
 800d71c:	b29b      	uxth	r3, r3
 800d71e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d726:	81bb      	strh	r3, [r7, #12]
 800d728:	89bb      	ldrh	r3, [r7, #12]
 800d72a:	f083 0320 	eor.w	r3, r3, #32
 800d72e:	81bb      	strh	r3, [r7, #12]
 800d730:	687a      	ldr	r2, [r7, #4]
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	781b      	ldrb	r3, [r3, #0]
 800d736:	009b      	lsls	r3, r3, #2
 800d738:	441a      	add	r2, r3
 800d73a:	89bb      	ldrh	r3, [r7, #12]
 800d73c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	8013      	strh	r3, [r2, #0]
 800d750:	e04b      	b.n	800d7ea <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d752:	687a      	ldr	r2, [r7, #4]
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	009b      	lsls	r3, r3, #2
 800d75a:	4413      	add	r3, r2
 800d75c:	881b      	ldrh	r3, [r3, #0]
 800d75e:	82fb      	strh	r3, [r7, #22]
 800d760:	8afb      	ldrh	r3, [r7, #22]
 800d762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d766:	2b00      	cmp	r3, #0
 800d768:	d01b      	beq.n	800d7a2 <USB_EPClearStall+0x106>
 800d76a:	687a      	ldr	r2, [r7, #4]
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	009b      	lsls	r3, r3, #2
 800d772:	4413      	add	r3, r2
 800d774:	881b      	ldrh	r3, [r3, #0]
 800d776:	b29b      	uxth	r3, r3
 800d778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d77c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d780:	82bb      	strh	r3, [r7, #20]
 800d782:	687a      	ldr	r2, [r7, #4]
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	781b      	ldrb	r3, [r3, #0]
 800d788:	009b      	lsls	r3, r3, #2
 800d78a:	441a      	add	r2, r3
 800d78c:	8abb      	ldrh	r3, [r7, #20]
 800d78e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d796:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d79a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	009b      	lsls	r3, r3, #2
 800d7aa:	4413      	add	r3, r2
 800d7ac:	881b      	ldrh	r3, [r3, #0]
 800d7ae:	b29b      	uxth	r3, r3
 800d7b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d7b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7b8:	827b      	strh	r3, [r7, #18]
 800d7ba:	8a7b      	ldrh	r3, [r7, #18]
 800d7bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d7c0:	827b      	strh	r3, [r7, #18]
 800d7c2:	8a7b      	ldrh	r3, [r7, #18]
 800d7c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d7c8:	827b      	strh	r3, [r7, #18]
 800d7ca:	687a      	ldr	r2, [r7, #4]
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	009b      	lsls	r3, r3, #2
 800d7d2:	441a      	add	r2, r3
 800d7d4:	8a7b      	ldrh	r3, [r7, #18]
 800d7d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d7da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d7de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7e6:	b29b      	uxth	r3, r3
 800d7e8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d7ea:	2300      	movs	r3, #0
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	371c      	adds	r7, #28
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f6:	4770      	bx	lr

0800d7f8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b083      	sub	sp, #12
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	460b      	mov	r3, r1
 800d802:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d804:	78fb      	ldrb	r3, [r7, #3]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d103      	bne.n	800d812 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2280      	movs	r2, #128	; 0x80
 800d80e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800d812:	2300      	movs	r3, #0
}
 800d814:	4618      	mov	r0, r3
 800d816:	370c      	adds	r7, #12
 800d818:	46bd      	mov	sp, r7
 800d81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81e:	4770      	bx	lr

0800d820 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800d820:	b480      	push	{r7}
 800d822:	b083      	sub	sp, #12
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d82e:	b29b      	uxth	r3, r3
 800d830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d838:	b29a      	uxth	r2, r3
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800d840:	2300      	movs	r3, #0
}
 800d842:	4618      	mov	r0, r3
 800d844:	370c      	adds	r7, #12
 800d846:	46bd      	mov	sp, r7
 800d848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84c:	4770      	bx	lr

0800d84e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800d84e:	b480      	push	{r7}
 800d850:	b085      	sub	sp, #20
 800d852:	af00      	add	r7, sp, #0
 800d854:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d85c:	b29b      	uxth	r3, r3
 800d85e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d860:	68fb      	ldr	r3, [r7, #12]
}
 800d862:	4618      	mov	r0, r3
 800d864:	3714      	adds	r7, #20
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr

0800d86e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d86e:	b480      	push	{r7}
 800d870:	b08d      	sub	sp, #52	; 0x34
 800d872:	af00      	add	r7, sp, #0
 800d874:	60f8      	str	r0, [r7, #12]
 800d876:	60b9      	str	r1, [r7, #8]
 800d878:	4611      	mov	r1, r2
 800d87a:	461a      	mov	r2, r3
 800d87c:	460b      	mov	r3, r1
 800d87e:	80fb      	strh	r3, [r7, #6]
 800d880:	4613      	mov	r3, r2
 800d882:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d884:	88bb      	ldrh	r3, [r7, #4]
 800d886:	3301      	adds	r3, #1
 800d888:	085b      	lsrs	r3, r3, #1
 800d88a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d894:	88fa      	ldrh	r2, [r7, #6]
 800d896:	69fb      	ldr	r3, [r7, #28]
 800d898:	4413      	add	r3, r2
 800d89a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d89e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800d8a0:	6a3b      	ldr	r3, [r7, #32]
 800d8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8a4:	e01b      	b.n	800d8de <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800d8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800d8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800d8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	021b      	lsls	r3, r3, #8
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	461a      	mov	r2, r3
 800d8be:	69bb      	ldr	r3, [r7, #24]
 800d8c0:	4313      	orrs	r3, r2
 800d8c2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	b29a      	uxth	r2, r3
 800d8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ca:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ce:	3302      	adds	r3, #2
 800d8d0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800d8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d4:	3301      	adds	r3, #1
 800d8d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800d8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8da:	3b01      	subs	r3, #1
 800d8dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d1e0      	bne.n	800d8a6 <USB_WritePMA+0x38>
  }
}
 800d8e4:	bf00      	nop
 800d8e6:	bf00      	nop
 800d8e8:	3734      	adds	r7, #52	; 0x34
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr

0800d8f2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d8f2:	b480      	push	{r7}
 800d8f4:	b08b      	sub	sp, #44	; 0x2c
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	60f8      	str	r0, [r7, #12]
 800d8fa:	60b9      	str	r1, [r7, #8]
 800d8fc:	4611      	mov	r1, r2
 800d8fe:	461a      	mov	r2, r3
 800d900:	460b      	mov	r3, r1
 800d902:	80fb      	strh	r3, [r7, #6]
 800d904:	4613      	mov	r3, r2
 800d906:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d908:	88bb      	ldrh	r3, [r7, #4]
 800d90a:	085b      	lsrs	r3, r3, #1
 800d90c:	b29b      	uxth	r3, r3
 800d90e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d918:	88fa      	ldrh	r2, [r7, #6]
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	4413      	add	r3, r2
 800d91e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d922:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800d924:	69bb      	ldr	r3, [r7, #24]
 800d926:	627b      	str	r3, [r7, #36]	; 0x24
 800d928:	e018      	b.n	800d95c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800d92a:	6a3b      	ldr	r3, [r7, #32]
 800d92c:	881b      	ldrh	r3, [r3, #0]
 800d92e:	b29b      	uxth	r3, r3
 800d930:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d932:	6a3b      	ldr	r3, [r7, #32]
 800d934:	3302      	adds	r3, #2
 800d936:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800d938:	693b      	ldr	r3, [r7, #16]
 800d93a:	b2da      	uxtb	r2, r3
 800d93c:	69fb      	ldr	r3, [r7, #28]
 800d93e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d940:	69fb      	ldr	r3, [r7, #28]
 800d942:	3301      	adds	r3, #1
 800d944:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	0a1b      	lsrs	r3, r3, #8
 800d94a:	b2da      	uxtb	r2, r3
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d950:	69fb      	ldr	r3, [r7, #28]
 800d952:	3301      	adds	r3, #1
 800d954:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800d956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d958:	3b01      	subs	r3, #1
 800d95a:	627b      	str	r3, [r7, #36]	; 0x24
 800d95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d1e3      	bne.n	800d92a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d962:	88bb      	ldrh	r3, [r7, #4]
 800d964:	f003 0301 	and.w	r3, r3, #1
 800d968:	b29b      	uxth	r3, r3
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d007      	beq.n	800d97e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800d96e:	6a3b      	ldr	r3, [r7, #32]
 800d970:	881b      	ldrh	r3, [r3, #0]
 800d972:	b29b      	uxth	r3, r3
 800d974:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	b2da      	uxtb	r2, r3
 800d97a:	69fb      	ldr	r3, [r7, #28]
 800d97c:	701a      	strb	r2, [r3, #0]
  }
}
 800d97e:	bf00      	nop
 800d980:	372c      	adds	r7, #44	; 0x2c
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr

0800d98a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d98a:	b580      	push	{r7, lr}
 800d98c:	b084      	sub	sp, #16
 800d98e:	af00      	add	r7, sp, #0
 800d990:	6078      	str	r0, [r7, #4]
 800d992:	460b      	mov	r3, r1
 800d994:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d996:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d99a:	f004 fa2b 	bl	8011df4 <USBD_static_malloc>
 800d99e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d105      	bne.n	800d9b2 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d9ae:	2302      	movs	r3, #2
 800d9b0:	e066      	b.n	800da80 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	68fa      	ldr	r2, [r7, #12]
 800d9b6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	7c1b      	ldrb	r3, [r3, #16]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d119      	bne.n	800d9f6 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d9c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d9c6:	2202      	movs	r2, #2
 800d9c8:	2181      	movs	r1, #129	; 0x81
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f004 f8b7 	bl	8011b3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2201      	movs	r2, #1
 800d9d4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d9d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d9da:	2202      	movs	r2, #2
 800d9dc:	2101      	movs	r1, #1
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f004 f8ad 	bl	8011b3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2210      	movs	r2, #16
 800d9f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800d9f4:	e016      	b.n	800da24 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d9f6:	2340      	movs	r3, #64	; 0x40
 800d9f8:	2202      	movs	r2, #2
 800d9fa:	2181      	movs	r1, #129	; 0x81
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f004 f89e 	bl	8011b3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2201      	movs	r2, #1
 800da06:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800da08:	2340      	movs	r3, #64	; 0x40
 800da0a:	2202      	movs	r2, #2
 800da0c:	2101      	movs	r1, #1
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f004 f895 	bl	8011b3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2201      	movs	r2, #1
 800da18:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2210      	movs	r2, #16
 800da20:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800da24:	2308      	movs	r3, #8
 800da26:	2203      	movs	r2, #3
 800da28:	2182      	movs	r1, #130	; 0x82
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f004 f887 	bl	8011b3e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2201      	movs	r2, #1
 800da34:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	2200      	movs	r2, #0
 800da46:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	2200      	movs	r2, #0
 800da4e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	7c1b      	ldrb	r3, [r3, #16]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d109      	bne.n	800da6e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800da60:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da64:	2101      	movs	r1, #1
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f004 f959 	bl	8011d1e <USBD_LL_PrepareReceive>
 800da6c:	e007      	b.n	800da7e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800da74:	2340      	movs	r3, #64	; 0x40
 800da76:	2101      	movs	r1, #1
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f004 f950 	bl	8011d1e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800da7e:	2300      	movs	r3, #0
}
 800da80:	4618      	mov	r0, r3
 800da82:	3710      	adds	r7, #16
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b082      	sub	sp, #8
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	460b      	mov	r3, r1
 800da92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800da94:	2181      	movs	r1, #129	; 0x81
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f004 f877 	bl	8011b8a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2200      	movs	r2, #0
 800daa0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800daa2:	2101      	movs	r1, #1
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f004 f870 	bl	8011b8a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2200      	movs	r2, #0
 800daae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800dab2:	2182      	movs	r1, #130	; 0x82
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f004 f868 	bl	8011b8a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2200      	movs	r2, #0
 800dabe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2200      	movs	r2, #0
 800dac6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d00e      	beq.n	800daf2 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dada:	685b      	ldr	r3, [r3, #4]
 800dadc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dae4:	4618      	mov	r0, r3
 800dae6:	f004 f993 	bl	8011e10 <USBD_static_free>
    pdev->pClassData = NULL;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2200      	movs	r2, #0
 800daee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800daf2:	2300      	movs	r3, #0
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3708      	adds	r7, #8
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b086      	sub	sp, #24
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db0c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800db0e:	2300      	movs	r3, #0
 800db10:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800db12:	2300      	movs	r3, #0
 800db14:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800db16:	2300      	movs	r3, #0
 800db18:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d101      	bne.n	800db24 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800db20:	2303      	movs	r3, #3
 800db22:	e0af      	b.n	800dc84 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d03f      	beq.n	800dbb0 <USBD_CDC_Setup+0xb4>
 800db30:	2b20      	cmp	r3, #32
 800db32:	f040 809f 	bne.w	800dc74 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	88db      	ldrh	r3, [r3, #6]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d02e      	beq.n	800db9c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	b25b      	sxtb	r3, r3
 800db44:	2b00      	cmp	r3, #0
 800db46:	da16      	bge.n	800db76 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db4e:	689b      	ldr	r3, [r3, #8]
 800db50:	683a      	ldr	r2, [r7, #0]
 800db52:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800db54:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800db56:	683a      	ldr	r2, [r7, #0]
 800db58:	88d2      	ldrh	r2, [r2, #6]
 800db5a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	88db      	ldrh	r3, [r3, #6]
 800db60:	2b07      	cmp	r3, #7
 800db62:	bf28      	it	cs
 800db64:	2307      	movcs	r3, #7
 800db66:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800db68:	693b      	ldr	r3, [r7, #16]
 800db6a:	89fa      	ldrh	r2, [r7, #14]
 800db6c:	4619      	mov	r1, r3
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f001 fa9f 	bl	800f0b2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800db74:	e085      	b.n	800dc82 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	785a      	ldrb	r2, [r3, #1]
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	88db      	ldrh	r3, [r3, #6]
 800db84:	b2da      	uxtb	r2, r3
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800db8c:	6939      	ldr	r1, [r7, #16]
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	88db      	ldrh	r3, [r3, #6]
 800db92:	461a      	mov	r2, r3
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f001 fab8 	bl	800f10a <USBD_CtlPrepareRx>
      break;
 800db9a:	e072      	b.n	800dc82 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dba2:	689b      	ldr	r3, [r3, #8]
 800dba4:	683a      	ldr	r2, [r7, #0]
 800dba6:	7850      	ldrb	r0, [r2, #1]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	6839      	ldr	r1, [r7, #0]
 800dbac:	4798      	blx	r3
      break;
 800dbae:	e068      	b.n	800dc82 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	785b      	ldrb	r3, [r3, #1]
 800dbb4:	2b0b      	cmp	r3, #11
 800dbb6:	d852      	bhi.n	800dc5e <USBD_CDC_Setup+0x162>
 800dbb8:	a201      	add	r2, pc, #4	; (adr r2, 800dbc0 <USBD_CDC_Setup+0xc4>)
 800dbba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbbe:	bf00      	nop
 800dbc0:	0800dbf1 	.word	0x0800dbf1
 800dbc4:	0800dc6d 	.word	0x0800dc6d
 800dbc8:	0800dc5f 	.word	0x0800dc5f
 800dbcc:	0800dc5f 	.word	0x0800dc5f
 800dbd0:	0800dc5f 	.word	0x0800dc5f
 800dbd4:	0800dc5f 	.word	0x0800dc5f
 800dbd8:	0800dc5f 	.word	0x0800dc5f
 800dbdc:	0800dc5f 	.word	0x0800dc5f
 800dbe0:	0800dc5f 	.word	0x0800dc5f
 800dbe4:	0800dc5f 	.word	0x0800dc5f
 800dbe8:	0800dc1b 	.word	0x0800dc1b
 800dbec:	0800dc45 	.word	0x0800dc45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbf6:	b2db      	uxtb	r3, r3
 800dbf8:	2b03      	cmp	r3, #3
 800dbfa:	d107      	bne.n	800dc0c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800dbfc:	f107 030a 	add.w	r3, r7, #10
 800dc00:	2202      	movs	r2, #2
 800dc02:	4619      	mov	r1, r3
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f001 fa54 	bl	800f0b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dc0a:	e032      	b.n	800dc72 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800dc0c:	6839      	ldr	r1, [r7, #0]
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f001 f9de 	bl	800efd0 <USBD_CtlError>
            ret = USBD_FAIL;
 800dc14:	2303      	movs	r3, #3
 800dc16:	75fb      	strb	r3, [r7, #23]
          break;
 800dc18:	e02b      	b.n	800dc72 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc20:	b2db      	uxtb	r3, r3
 800dc22:	2b03      	cmp	r3, #3
 800dc24:	d107      	bne.n	800dc36 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800dc26:	f107 030d 	add.w	r3, r7, #13
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f001 fa3f 	bl	800f0b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dc34:	e01d      	b.n	800dc72 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800dc36:	6839      	ldr	r1, [r7, #0]
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f001 f9c9 	bl	800efd0 <USBD_CtlError>
            ret = USBD_FAIL;
 800dc3e:	2303      	movs	r3, #3
 800dc40:	75fb      	strb	r3, [r7, #23]
          break;
 800dc42:	e016      	b.n	800dc72 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	2b03      	cmp	r3, #3
 800dc4e:	d00f      	beq.n	800dc70 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800dc50:	6839      	ldr	r1, [r7, #0]
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f001 f9bc 	bl	800efd0 <USBD_CtlError>
            ret = USBD_FAIL;
 800dc58:	2303      	movs	r3, #3
 800dc5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800dc5c:	e008      	b.n	800dc70 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800dc5e:	6839      	ldr	r1, [r7, #0]
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f001 f9b5 	bl	800efd0 <USBD_CtlError>
          ret = USBD_FAIL;
 800dc66:	2303      	movs	r3, #3
 800dc68:	75fb      	strb	r3, [r7, #23]
          break;
 800dc6a:	e002      	b.n	800dc72 <USBD_CDC_Setup+0x176>
          break;
 800dc6c:	bf00      	nop
 800dc6e:	e008      	b.n	800dc82 <USBD_CDC_Setup+0x186>
          break;
 800dc70:	bf00      	nop
      }
      break;
 800dc72:	e006      	b.n	800dc82 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800dc74:	6839      	ldr	r1, [r7, #0]
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	f001 f9aa 	bl	800efd0 <USBD_CtlError>
      ret = USBD_FAIL;
 800dc7c:	2303      	movs	r3, #3
 800dc7e:	75fb      	strb	r3, [r7, #23]
      break;
 800dc80:	bf00      	nop
  }

  return (uint8_t)ret;
 800dc82:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3718      	adds	r7, #24
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	460b      	mov	r3, r1
 800dc96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dc9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d101      	bne.n	800dcae <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dcaa:	2303      	movs	r3, #3
 800dcac:	e04f      	b.n	800dd4e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dcb4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800dcb6:	78fa      	ldrb	r2, [r7, #3]
 800dcb8:	6879      	ldr	r1, [r7, #4]
 800dcba:	4613      	mov	r3, r2
 800dcbc:	009b      	lsls	r3, r3, #2
 800dcbe:	4413      	add	r3, r2
 800dcc0:	009b      	lsls	r3, r3, #2
 800dcc2:	440b      	add	r3, r1
 800dcc4:	3318      	adds	r3, #24
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d029      	beq.n	800dd20 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800dccc:	78fa      	ldrb	r2, [r7, #3]
 800dcce:	6879      	ldr	r1, [r7, #4]
 800dcd0:	4613      	mov	r3, r2
 800dcd2:	009b      	lsls	r3, r3, #2
 800dcd4:	4413      	add	r3, r2
 800dcd6:	009b      	lsls	r3, r3, #2
 800dcd8:	440b      	add	r3, r1
 800dcda:	3318      	adds	r3, #24
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	78f9      	ldrb	r1, [r7, #3]
 800dce0:	68f8      	ldr	r0, [r7, #12]
 800dce2:	460b      	mov	r3, r1
 800dce4:	009b      	lsls	r3, r3, #2
 800dce6:	440b      	add	r3, r1
 800dce8:	00db      	lsls	r3, r3, #3
 800dcea:	4403      	add	r3, r0
 800dcec:	3338      	adds	r3, #56	; 0x38
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	fbb2 f1f3 	udiv	r1, r2, r3
 800dcf4:	fb01 f303 	mul.w	r3, r1, r3
 800dcf8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d110      	bne.n	800dd20 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800dcfe:	78fa      	ldrb	r2, [r7, #3]
 800dd00:	6879      	ldr	r1, [r7, #4]
 800dd02:	4613      	mov	r3, r2
 800dd04:	009b      	lsls	r3, r3, #2
 800dd06:	4413      	add	r3, r2
 800dd08:	009b      	lsls	r3, r3, #2
 800dd0a:	440b      	add	r3, r1
 800dd0c:	3318      	adds	r3, #24
 800dd0e:	2200      	movs	r2, #0
 800dd10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dd12:	78f9      	ldrb	r1, [r7, #3]
 800dd14:	2300      	movs	r3, #0
 800dd16:	2200      	movs	r2, #0
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f003 ffdf 	bl	8011cdc <USBD_LL_Transmit>
 800dd1e:	e015      	b.n	800dd4c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	2200      	movs	r2, #0
 800dd24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd2e:	691b      	ldr	r3, [r3, #16]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d00b      	beq.n	800dd4c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd3a:	691b      	ldr	r3, [r3, #16]
 800dd3c:	68ba      	ldr	r2, [r7, #8]
 800dd3e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800dd42:	68ba      	ldr	r2, [r7, #8]
 800dd44:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800dd48:	78fa      	ldrb	r2, [r7, #3]
 800dd4a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800dd4c:	2300      	movs	r3, #0
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3710      	adds	r7, #16
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}

0800dd56 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dd56:	b580      	push	{r7, lr}
 800dd58:	b084      	sub	sp, #16
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	6078      	str	r0, [r7, #4]
 800dd5e:	460b      	mov	r3, r1
 800dd60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd68:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d101      	bne.n	800dd78 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dd74:	2303      	movs	r3, #3
 800dd76:	e015      	b.n	800dda4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800dd78:	78fb      	ldrb	r3, [r7, #3]
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f003 ffef 	bl	8011d60 <USBD_LL_GetRxDataSize>
 800dd82:	4602      	mov	r2, r0
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	68fa      	ldr	r2, [r7, #12]
 800dd94:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800dd98:	68fa      	ldr	r2, [r7, #12]
 800dd9a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800dd9e:	4611      	mov	r1, r2
 800dda0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800dda2:	2300      	movs	r3, #0
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3710      	adds	r7, #16
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b084      	sub	sp, #16
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ddba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d101      	bne.n	800ddc6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800ddc2:	2303      	movs	r3, #3
 800ddc4:	e01b      	b.n	800ddfe <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d015      	beq.n	800ddfc <USBD_CDC_EP0_RxReady+0x50>
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ddd6:	2bff      	cmp	r3, #255	; 0xff
 800ddd8:	d010      	beq.n	800ddfc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dde0:	689b      	ldr	r3, [r3, #8]
 800dde2:	68fa      	ldr	r2, [r7, #12]
 800dde4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800dde8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ddea:	68fa      	ldr	r2, [r7, #12]
 800ddec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ddf0:	b292      	uxth	r2, r2
 800ddf2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	22ff      	movs	r2, #255	; 0xff
 800ddf8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ddfc:	2300      	movs	r3, #0
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	3710      	adds	r7, #16
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
	...

0800de08 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800de08:	b480      	push	{r7}
 800de0a:	b083      	sub	sp, #12
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2243      	movs	r2, #67	; 0x43
 800de14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800de16:	4b03      	ldr	r3, [pc, #12]	; (800de24 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800de18:	4618      	mov	r0, r3
 800de1a:	370c      	adds	r7, #12
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr
 800de24:	20000094 	.word	0x20000094

0800de28 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800de28:	b480      	push	{r7}
 800de2a:	b083      	sub	sp, #12
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2243      	movs	r2, #67	; 0x43
 800de34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800de36:	4b03      	ldr	r3, [pc, #12]	; (800de44 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800de38:	4618      	mov	r0, r3
 800de3a:	370c      	adds	r7, #12
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr
 800de44:	20000050 	.word	0x20000050

0800de48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800de48:	b480      	push	{r7}
 800de4a:	b083      	sub	sp, #12
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2243      	movs	r2, #67	; 0x43
 800de54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800de56:	4b03      	ldr	r3, [pc, #12]	; (800de64 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800de58:	4618      	mov	r0, r3
 800de5a:	370c      	adds	r7, #12
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr
 800de64:	200000d8 	.word	0x200000d8

0800de68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800de68:	b480      	push	{r7}
 800de6a:	b083      	sub	sp, #12
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	220a      	movs	r2, #10
 800de74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800de76:	4b03      	ldr	r3, [pc, #12]	; (800de84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800de78:	4618      	mov	r0, r3
 800de7a:	370c      	adds	r7, #12
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr
 800de84:	2000000c 	.word	0x2000000c

0800de88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800de88:	b480      	push	{r7}
 800de8a:	b083      	sub	sp, #12
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d101      	bne.n	800de9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800de98:	2303      	movs	r3, #3
 800de9a:	e004      	b.n	800dea6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	683a      	ldr	r2, [r7, #0]
 800dea0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800dea4:	2300      	movs	r3, #0
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	370c      	adds	r7, #12
 800deaa:	46bd      	mov	sp, r7
 800deac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb0:	4770      	bx	lr

0800deb2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800deb2:	b480      	push	{r7}
 800deb4:	b087      	sub	sp, #28
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	60f8      	str	r0, [r7, #12]
 800deba:	60b9      	str	r1, [r7, #8]
 800debc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dec4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d101      	bne.n	800ded0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800decc:	2303      	movs	r3, #3
 800dece:	e008      	b.n	800dee2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	68ba      	ldr	r2, [r7, #8]
 800ded4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	687a      	ldr	r2, [r7, #4]
 800dedc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800dee0:	2300      	movs	r3, #0
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	371c      	adds	r7, #28
 800dee6:	46bd      	mov	sp, r7
 800dee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deec:	4770      	bx	lr

0800deee <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800deee:	b480      	push	{r7}
 800def0:	b085      	sub	sp, #20
 800def2:	af00      	add	r7, sp, #0
 800def4:	6078      	str	r0, [r7, #4]
 800def6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800defe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d101      	bne.n	800df0a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800df06:	2303      	movs	r3, #3
 800df08:	e004      	b.n	800df14 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	683a      	ldr	r2, [r7, #0]
 800df0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800df12:	2300      	movs	r3, #0
}
 800df14:	4618      	mov	r0, r3
 800df16:	3714      	adds	r7, #20
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr

0800df20 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b084      	sub	sp, #16
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df36:	2b00      	cmp	r3, #0
 800df38:	d101      	bne.n	800df3e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800df3a:	2303      	movs	r3, #3
 800df3c:	e016      	b.n	800df6c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	7c1b      	ldrb	r3, [r3, #16]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d109      	bne.n	800df5a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800df4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df50:	2101      	movs	r1, #1
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f003 fee3 	bl	8011d1e <USBD_LL_PrepareReceive>
 800df58:	e007      	b.n	800df6a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800df60:	2340      	movs	r3, #64	; 0x40
 800df62:	2101      	movs	r1, #1
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f003 feda 	bl	8011d1e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800df6a:	2300      	movs	r3, #0
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3710      	adds	r7, #16
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b086      	sub	sp, #24
 800df78:	af00      	add	r7, sp, #0
 800df7a:	60f8      	str	r0, [r7, #12]
 800df7c:	60b9      	str	r1, [r7, #8]
 800df7e:	4613      	mov	r3, r2
 800df80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d101      	bne.n	800df8c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800df88:	2303      	movs	r3, #3
 800df8a:	e01f      	b.n	800dfcc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2200      	movs	r2, #0
 800df90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	2200      	movs	r2, #0
 800df98:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d003      	beq.n	800dfb2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	68ba      	ldr	r2, [r7, #8]
 800dfae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	2201      	movs	r2, #1
 800dfb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	79fa      	ldrb	r2, [r7, #7]
 800dfbe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800dfc0:	68f8      	ldr	r0, [r7, #12]
 800dfc2:	f003 fd41 	bl	8011a48 <USBD_LL_Init>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800dfca:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfcc:	4618      	mov	r0, r3
 800dfce:	3718      	adds	r7, #24
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}

0800dfd4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b084      	sub	sp, #16
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
 800dfdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d101      	bne.n	800dfec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800dfe8:	2303      	movs	r3, #3
 800dfea:	e016      	b.n	800e01a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	683a      	ldr	r2, [r7, #0]
 800dff0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d00b      	beq.n	800e018 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e008:	f107 020e 	add.w	r2, r7, #14
 800e00c:	4610      	mov	r0, r2
 800e00e:	4798      	blx	r3
 800e010:	4602      	mov	r2, r0
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e018:	2300      	movs	r3, #0
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3710      	adds	r7, #16
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}

0800e022 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e022:	b580      	push	{r7, lr}
 800e024:	b082      	sub	sp, #8
 800e026:	af00      	add	r7, sp, #0
 800e028:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f003 fd6c 	bl	8011b08 <USBD_LL_Start>
 800e030:	4603      	mov	r3, r0
}
 800e032:	4618      	mov	r0, r3
 800e034:	3708      	adds	r7, #8
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}

0800e03a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e03a:	b480      	push	{r7}
 800e03c:	b083      	sub	sp, #12
 800e03e:	af00      	add	r7, sp, #0
 800e040:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e042:	2300      	movs	r3, #0
}
 800e044:	4618      	mov	r0, r3
 800e046:	370c      	adds	r7, #12
 800e048:	46bd      	mov	sp, r7
 800e04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04e:	4770      	bx	lr

0800e050 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b084      	sub	sp, #16
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	460b      	mov	r3, r1
 800e05a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e05c:	2303      	movs	r3, #3
 800e05e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e066:	2b00      	cmp	r3, #0
 800e068:	d009      	beq.n	800e07e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	78fa      	ldrb	r2, [r7, #3]
 800e074:	4611      	mov	r1, r2
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	4798      	blx	r3
 800e07a:	4603      	mov	r3, r0
 800e07c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e07e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e080:	4618      	mov	r0, r3
 800e082:	3710      	adds	r7, #16
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}

0800e088 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	460b      	mov	r3, r1
 800e092:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d007      	beq.n	800e0ae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0a4:	685b      	ldr	r3, [r3, #4]
 800e0a6:	78fa      	ldrb	r2, [r7, #3]
 800e0a8:	4611      	mov	r1, r2
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	4798      	blx	r3
  }

  return USBD_OK;
 800e0ae:	2300      	movs	r3, #0
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3708      	adds	r7, #8
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}

0800e0b8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b084      	sub	sp, #16
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e0c8:	6839      	ldr	r1, [r7, #0]
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f000 ff46 	bl	800ef5c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e0de:	461a      	mov	r2, r3
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e0ec:	f003 031f 	and.w	r3, r3, #31
 800e0f0:	2b02      	cmp	r3, #2
 800e0f2:	d01a      	beq.n	800e12a <USBD_LL_SetupStage+0x72>
 800e0f4:	2b02      	cmp	r3, #2
 800e0f6:	d822      	bhi.n	800e13e <USBD_LL_SetupStage+0x86>
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d002      	beq.n	800e102 <USBD_LL_SetupStage+0x4a>
 800e0fc:	2b01      	cmp	r3, #1
 800e0fe:	d00a      	beq.n	800e116 <USBD_LL_SetupStage+0x5e>
 800e100:	e01d      	b.n	800e13e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e108:	4619      	mov	r1, r3
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f000 f9ee 	bl	800e4ec <USBD_StdDevReq>
 800e110:	4603      	mov	r3, r0
 800e112:	73fb      	strb	r3, [r7, #15]
      break;
 800e114:	e020      	b.n	800e158 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e11c:	4619      	mov	r1, r3
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f000 fa52 	bl	800e5c8 <USBD_StdItfReq>
 800e124:	4603      	mov	r3, r0
 800e126:	73fb      	strb	r3, [r7, #15]
      break;
 800e128:	e016      	b.n	800e158 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e130:	4619      	mov	r1, r3
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 fa91 	bl	800e65a <USBD_StdEPReq>
 800e138:	4603      	mov	r3, r0
 800e13a:	73fb      	strb	r3, [r7, #15]
      break;
 800e13c:	e00c      	b.n	800e158 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e144:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e148:	b2db      	uxtb	r3, r3
 800e14a:	4619      	mov	r1, r3
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f003 fd3b 	bl	8011bc8 <USBD_LL_StallEP>
 800e152:	4603      	mov	r3, r0
 800e154:	73fb      	strb	r3, [r7, #15]
      break;
 800e156:	bf00      	nop
  }

  return ret;
 800e158:	7bfb      	ldrb	r3, [r7, #15]
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3710      	adds	r7, #16
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}

0800e162 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e162:	b580      	push	{r7, lr}
 800e164:	b086      	sub	sp, #24
 800e166:	af00      	add	r7, sp, #0
 800e168:	60f8      	str	r0, [r7, #12]
 800e16a:	460b      	mov	r3, r1
 800e16c:	607a      	str	r2, [r7, #4]
 800e16e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e170:	7afb      	ldrb	r3, [r7, #11]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d138      	bne.n	800e1e8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e17c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e184:	2b03      	cmp	r3, #3
 800e186:	d14a      	bne.n	800e21e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	689a      	ldr	r2, [r3, #8]
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	429a      	cmp	r2, r3
 800e192:	d913      	bls.n	800e1bc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e194:	693b      	ldr	r3, [r7, #16]
 800e196:	689a      	ldr	r2, [r3, #8]
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	68db      	ldr	r3, [r3, #12]
 800e19c:	1ad2      	subs	r2, r2, r3
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	68da      	ldr	r2, [r3, #12]
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	689b      	ldr	r3, [r3, #8]
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	bf28      	it	cs
 800e1ae:	4613      	movcs	r3, r2
 800e1b0:	461a      	mov	r2, r3
 800e1b2:	6879      	ldr	r1, [r7, #4]
 800e1b4:	68f8      	ldr	r0, [r7, #12]
 800e1b6:	f000 ffc5 	bl	800f144 <USBD_CtlContinueRx>
 800e1ba:	e030      	b.n	800e21e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	2b03      	cmp	r3, #3
 800e1c6:	d10b      	bne.n	800e1e0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1ce:	691b      	ldr	r3, [r3, #16]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d005      	beq.n	800e1e0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1da:	691b      	ldr	r3, [r3, #16]
 800e1dc:	68f8      	ldr	r0, [r7, #12]
 800e1de:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e1e0:	68f8      	ldr	r0, [r7, #12]
 800e1e2:	f000 ffc0 	bl	800f166 <USBD_CtlSendStatus>
 800e1e6:	e01a      	b.n	800e21e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1ee:	b2db      	uxtb	r3, r3
 800e1f0:	2b03      	cmp	r3, #3
 800e1f2:	d114      	bne.n	800e21e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1fa:	699b      	ldr	r3, [r3, #24]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d00e      	beq.n	800e21e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e206:	699b      	ldr	r3, [r3, #24]
 800e208:	7afa      	ldrb	r2, [r7, #11]
 800e20a:	4611      	mov	r1, r2
 800e20c:	68f8      	ldr	r0, [r7, #12]
 800e20e:	4798      	blx	r3
 800e210:	4603      	mov	r3, r0
 800e212:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e214:	7dfb      	ldrb	r3, [r7, #23]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d001      	beq.n	800e21e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800e21a:	7dfb      	ldrb	r3, [r7, #23]
 800e21c:	e000      	b.n	800e220 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800e21e:	2300      	movs	r3, #0
}
 800e220:	4618      	mov	r0, r3
 800e222:	3718      	adds	r7, #24
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}

0800e228 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b086      	sub	sp, #24
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	60f8      	str	r0, [r7, #12]
 800e230:	460b      	mov	r3, r1
 800e232:	607a      	str	r2, [r7, #4]
 800e234:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e236:	7afb      	ldrb	r3, [r7, #11]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d16b      	bne.n	800e314 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	3314      	adds	r3, #20
 800e240:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e248:	2b02      	cmp	r3, #2
 800e24a:	d156      	bne.n	800e2fa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	689a      	ldr	r2, [r3, #8]
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	68db      	ldr	r3, [r3, #12]
 800e254:	429a      	cmp	r2, r3
 800e256:	d914      	bls.n	800e282 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	689a      	ldr	r2, [r3, #8]
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	68db      	ldr	r3, [r3, #12]
 800e260:	1ad2      	subs	r2, r2, r3
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	689b      	ldr	r3, [r3, #8]
 800e26a:	461a      	mov	r2, r3
 800e26c:	6879      	ldr	r1, [r7, #4]
 800e26e:	68f8      	ldr	r0, [r7, #12]
 800e270:	f000 ff3a 	bl	800f0e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e274:	2300      	movs	r3, #0
 800e276:	2200      	movs	r2, #0
 800e278:	2100      	movs	r1, #0
 800e27a:	68f8      	ldr	r0, [r7, #12]
 800e27c:	f003 fd4f 	bl	8011d1e <USBD_LL_PrepareReceive>
 800e280:	e03b      	b.n	800e2fa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	68da      	ldr	r2, [r3, #12]
 800e286:	693b      	ldr	r3, [r7, #16]
 800e288:	689b      	ldr	r3, [r3, #8]
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d11c      	bne.n	800e2c8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e28e:	693b      	ldr	r3, [r7, #16]
 800e290:	685a      	ldr	r2, [r3, #4]
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e296:	429a      	cmp	r2, r3
 800e298:	d316      	bcc.n	800e2c8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	685a      	ldr	r2, [r3, #4]
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	d20f      	bcs.n	800e2c8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	2100      	movs	r1, #0
 800e2ac:	68f8      	ldr	r0, [r7, #12]
 800e2ae:	f000 ff1b 	bl	800f0e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	2200      	movs	r2, #0
 800e2be:	2100      	movs	r1, #0
 800e2c0:	68f8      	ldr	r0, [r7, #12]
 800e2c2:	f003 fd2c 	bl	8011d1e <USBD_LL_PrepareReceive>
 800e2c6:	e018      	b.n	800e2fa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2ce:	b2db      	uxtb	r3, r3
 800e2d0:	2b03      	cmp	r3, #3
 800e2d2:	d10b      	bne.n	800e2ec <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2da:	68db      	ldr	r3, [r3, #12]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d005      	beq.n	800e2ec <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2e6:	68db      	ldr	r3, [r3, #12]
 800e2e8:	68f8      	ldr	r0, [r7, #12]
 800e2ea:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e2ec:	2180      	movs	r1, #128	; 0x80
 800e2ee:	68f8      	ldr	r0, [r7, #12]
 800e2f0:	f003 fc6a 	bl	8011bc8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e2f4:	68f8      	ldr	r0, [r7, #12]
 800e2f6:	f000 ff49 	bl	800f18c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e300:	2b01      	cmp	r3, #1
 800e302:	d122      	bne.n	800e34a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e304:	68f8      	ldr	r0, [r7, #12]
 800e306:	f7ff fe98 	bl	800e03a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	2200      	movs	r2, #0
 800e30e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e312:	e01a      	b.n	800e34a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e31a:	b2db      	uxtb	r3, r3
 800e31c:	2b03      	cmp	r3, #3
 800e31e:	d114      	bne.n	800e34a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e326:	695b      	ldr	r3, [r3, #20]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d00e      	beq.n	800e34a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e332:	695b      	ldr	r3, [r3, #20]
 800e334:	7afa      	ldrb	r2, [r7, #11]
 800e336:	4611      	mov	r1, r2
 800e338:	68f8      	ldr	r0, [r7, #12]
 800e33a:	4798      	blx	r3
 800e33c:	4603      	mov	r3, r0
 800e33e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e340:	7dfb      	ldrb	r3, [r7, #23]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d001      	beq.n	800e34a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e346:	7dfb      	ldrb	r3, [r7, #23]
 800e348:	e000      	b.n	800e34c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e34a:	2300      	movs	r3, #0
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3718      	adds	r7, #24
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}

0800e354 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b082      	sub	sp, #8
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2201      	movs	r2, #1
 800e360:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2200      	movs	r2, #0
 800e368:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2200      	movs	r2, #0
 800e370:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2200      	movs	r2, #0
 800e376:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e380:	2b00      	cmp	r3, #0
 800e382:	d101      	bne.n	800e388 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e384:	2303      	movs	r3, #3
 800e386:	e02f      	b.n	800e3e8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d00f      	beq.n	800e3b2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d009      	beq.n	800e3b2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3a4:	685b      	ldr	r3, [r3, #4]
 800e3a6:	687a      	ldr	r2, [r7, #4]
 800e3a8:	6852      	ldr	r2, [r2, #4]
 800e3aa:	b2d2      	uxtb	r2, r2
 800e3ac:	4611      	mov	r1, r2
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e3b2:	2340      	movs	r3, #64	; 0x40
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	2100      	movs	r1, #0
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f003 fbc0 	bl	8011b3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2240      	movs	r2, #64	; 0x40
 800e3ca:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e3ce:	2340      	movs	r3, #64	; 0x40
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	2180      	movs	r1, #128	; 0x80
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f003 fbb2 	bl	8011b3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2201      	movs	r2, #1
 800e3de:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2240      	movs	r2, #64	; 0x40
 800e3e4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e3e6:	2300      	movs	r3, #0
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3708      	adds	r7, #8
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}

0800e3f0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b083      	sub	sp, #12
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
 800e3f8:	460b      	mov	r3, r1
 800e3fa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	78fa      	ldrb	r2, [r7, #3]
 800e400:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e402:	2300      	movs	r3, #0
}
 800e404:	4618      	mov	r0, r3
 800e406:	370c      	adds	r7, #12
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr

0800e410 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e410:	b480      	push	{r7}
 800e412:	b083      	sub	sp, #12
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e41e:	b2da      	uxtb	r2, r3
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2204      	movs	r2, #4
 800e42a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e42e:	2300      	movs	r3, #0
}
 800e430:	4618      	mov	r0, r3
 800e432:	370c      	adds	r7, #12
 800e434:	46bd      	mov	sp, r7
 800e436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43a:	4770      	bx	lr

0800e43c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e43c:	b480      	push	{r7}
 800e43e:	b083      	sub	sp, #12
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e44a:	b2db      	uxtb	r3, r3
 800e44c:	2b04      	cmp	r3, #4
 800e44e:	d106      	bne.n	800e45e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e456:	b2da      	uxtb	r2, r3
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e45e:	2300      	movs	r3, #0
}
 800e460:	4618      	mov	r0, r3
 800e462:	370c      	adds	r7, #12
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr

0800e46c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b082      	sub	sp, #8
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d101      	bne.n	800e482 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e47e:	2303      	movs	r3, #3
 800e480:	e012      	b.n	800e4a8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e488:	b2db      	uxtb	r3, r3
 800e48a:	2b03      	cmp	r3, #3
 800e48c:	d10b      	bne.n	800e4a6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e494:	69db      	ldr	r3, [r3, #28]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d005      	beq.n	800e4a6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4a0:	69db      	ldr	r3, [r3, #28]
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e4a6:	2300      	movs	r3, #0
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3708      	adds	r7, #8
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b087      	sub	sp, #28
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e4c2:	697b      	ldr	r3, [r7, #20]
 800e4c4:	3301      	adds	r3, #1
 800e4c6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	781b      	ldrb	r3, [r3, #0]
 800e4cc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e4ce:	8a3b      	ldrh	r3, [r7, #16]
 800e4d0:	021b      	lsls	r3, r3, #8
 800e4d2:	b21a      	sxth	r2, r3
 800e4d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e4d8:	4313      	orrs	r3, r2
 800e4da:	b21b      	sxth	r3, r3
 800e4dc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e4de:	89fb      	ldrh	r3, [r7, #14]
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	371c      	adds	r7, #28
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ea:	4770      	bx	lr

0800e4ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b084      	sub	sp, #16
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	781b      	ldrb	r3, [r3, #0]
 800e4fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e502:	2b40      	cmp	r3, #64	; 0x40
 800e504:	d005      	beq.n	800e512 <USBD_StdDevReq+0x26>
 800e506:	2b40      	cmp	r3, #64	; 0x40
 800e508:	d853      	bhi.n	800e5b2 <USBD_StdDevReq+0xc6>
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d00b      	beq.n	800e526 <USBD_StdDevReq+0x3a>
 800e50e:	2b20      	cmp	r3, #32
 800e510:	d14f      	bne.n	800e5b2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e518:	689b      	ldr	r3, [r3, #8]
 800e51a:	6839      	ldr	r1, [r7, #0]
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	4798      	blx	r3
 800e520:	4603      	mov	r3, r0
 800e522:	73fb      	strb	r3, [r7, #15]
      break;
 800e524:	e04a      	b.n	800e5bc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	785b      	ldrb	r3, [r3, #1]
 800e52a:	2b09      	cmp	r3, #9
 800e52c:	d83b      	bhi.n	800e5a6 <USBD_StdDevReq+0xba>
 800e52e:	a201      	add	r2, pc, #4	; (adr r2, 800e534 <USBD_StdDevReq+0x48>)
 800e530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e534:	0800e589 	.word	0x0800e589
 800e538:	0800e59d 	.word	0x0800e59d
 800e53c:	0800e5a7 	.word	0x0800e5a7
 800e540:	0800e593 	.word	0x0800e593
 800e544:	0800e5a7 	.word	0x0800e5a7
 800e548:	0800e567 	.word	0x0800e567
 800e54c:	0800e55d 	.word	0x0800e55d
 800e550:	0800e5a7 	.word	0x0800e5a7
 800e554:	0800e57f 	.word	0x0800e57f
 800e558:	0800e571 	.word	0x0800e571
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e55c:	6839      	ldr	r1, [r7, #0]
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f000 f9de 	bl	800e920 <USBD_GetDescriptor>
          break;
 800e564:	e024      	b.n	800e5b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e566:	6839      	ldr	r1, [r7, #0]
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f000 fb6d 	bl	800ec48 <USBD_SetAddress>
          break;
 800e56e:	e01f      	b.n	800e5b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e570:	6839      	ldr	r1, [r7, #0]
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f000 fbac 	bl	800ecd0 <USBD_SetConfig>
 800e578:	4603      	mov	r3, r0
 800e57a:	73fb      	strb	r3, [r7, #15]
          break;
 800e57c:	e018      	b.n	800e5b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e57e:	6839      	ldr	r1, [r7, #0]
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f000 fc4b 	bl	800ee1c <USBD_GetConfig>
          break;
 800e586:	e013      	b.n	800e5b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e588:	6839      	ldr	r1, [r7, #0]
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f000 fc7c 	bl	800ee88 <USBD_GetStatus>
          break;
 800e590:	e00e      	b.n	800e5b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e592:	6839      	ldr	r1, [r7, #0]
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f000 fcab 	bl	800eef0 <USBD_SetFeature>
          break;
 800e59a:	e009      	b.n	800e5b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e59c:	6839      	ldr	r1, [r7, #0]
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f000 fcba 	bl	800ef18 <USBD_ClrFeature>
          break;
 800e5a4:	e004      	b.n	800e5b0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e5a6:	6839      	ldr	r1, [r7, #0]
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f000 fd11 	bl	800efd0 <USBD_CtlError>
          break;
 800e5ae:	bf00      	nop
      }
      break;
 800e5b0:	e004      	b.n	800e5bc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e5b2:	6839      	ldr	r1, [r7, #0]
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f000 fd0b 	bl	800efd0 <USBD_CtlError>
      break;
 800e5ba:	bf00      	nop
  }

  return ret;
 800e5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3710      	adds	r7, #16
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
 800e5c6:	bf00      	nop

0800e5c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b084      	sub	sp, #16
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	781b      	ldrb	r3, [r3, #0]
 800e5da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e5de:	2b40      	cmp	r3, #64	; 0x40
 800e5e0:	d005      	beq.n	800e5ee <USBD_StdItfReq+0x26>
 800e5e2:	2b40      	cmp	r3, #64	; 0x40
 800e5e4:	d82f      	bhi.n	800e646 <USBD_StdItfReq+0x7e>
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d001      	beq.n	800e5ee <USBD_StdItfReq+0x26>
 800e5ea:	2b20      	cmp	r3, #32
 800e5ec:	d12b      	bne.n	800e646 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5f4:	b2db      	uxtb	r3, r3
 800e5f6:	3b01      	subs	r3, #1
 800e5f8:	2b02      	cmp	r3, #2
 800e5fa:	d81d      	bhi.n	800e638 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	889b      	ldrh	r3, [r3, #4]
 800e600:	b2db      	uxtb	r3, r3
 800e602:	2b01      	cmp	r3, #1
 800e604:	d813      	bhi.n	800e62e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e60c:	689b      	ldr	r3, [r3, #8]
 800e60e:	6839      	ldr	r1, [r7, #0]
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	4798      	blx	r3
 800e614:	4603      	mov	r3, r0
 800e616:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	88db      	ldrh	r3, [r3, #6]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d110      	bne.n	800e642 <USBD_StdItfReq+0x7a>
 800e620:	7bfb      	ldrb	r3, [r7, #15]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d10d      	bne.n	800e642 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	f000 fd9d 	bl	800f166 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e62c:	e009      	b.n	800e642 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e62e:	6839      	ldr	r1, [r7, #0]
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f000 fccd 	bl	800efd0 <USBD_CtlError>
          break;
 800e636:	e004      	b.n	800e642 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e638:	6839      	ldr	r1, [r7, #0]
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f000 fcc8 	bl	800efd0 <USBD_CtlError>
          break;
 800e640:	e000      	b.n	800e644 <USBD_StdItfReq+0x7c>
          break;
 800e642:	bf00      	nop
      }
      break;
 800e644:	e004      	b.n	800e650 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e646:	6839      	ldr	r1, [r7, #0]
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f000 fcc1 	bl	800efd0 <USBD_CtlError>
      break;
 800e64e:	bf00      	nop
  }

  return ret;
 800e650:	7bfb      	ldrb	r3, [r7, #15]
}
 800e652:	4618      	mov	r0, r3
 800e654:	3710      	adds	r7, #16
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}

0800e65a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e65a:	b580      	push	{r7, lr}
 800e65c:	b084      	sub	sp, #16
 800e65e:	af00      	add	r7, sp, #0
 800e660:	6078      	str	r0, [r7, #4]
 800e662:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e664:	2300      	movs	r3, #0
 800e666:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	889b      	ldrh	r3, [r3, #4]
 800e66c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e676:	2b40      	cmp	r3, #64	; 0x40
 800e678:	d007      	beq.n	800e68a <USBD_StdEPReq+0x30>
 800e67a:	2b40      	cmp	r3, #64	; 0x40
 800e67c:	f200 8145 	bhi.w	800e90a <USBD_StdEPReq+0x2b0>
 800e680:	2b00      	cmp	r3, #0
 800e682:	d00c      	beq.n	800e69e <USBD_StdEPReq+0x44>
 800e684:	2b20      	cmp	r3, #32
 800e686:	f040 8140 	bne.w	800e90a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e690:	689b      	ldr	r3, [r3, #8]
 800e692:	6839      	ldr	r1, [r7, #0]
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	4798      	blx	r3
 800e698:	4603      	mov	r3, r0
 800e69a:	73fb      	strb	r3, [r7, #15]
      break;
 800e69c:	e13a      	b.n	800e914 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	785b      	ldrb	r3, [r3, #1]
 800e6a2:	2b03      	cmp	r3, #3
 800e6a4:	d007      	beq.n	800e6b6 <USBD_StdEPReq+0x5c>
 800e6a6:	2b03      	cmp	r3, #3
 800e6a8:	f300 8129 	bgt.w	800e8fe <USBD_StdEPReq+0x2a4>
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d07f      	beq.n	800e7b0 <USBD_StdEPReq+0x156>
 800e6b0:	2b01      	cmp	r3, #1
 800e6b2:	d03c      	beq.n	800e72e <USBD_StdEPReq+0xd4>
 800e6b4:	e123      	b.n	800e8fe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6bc:	b2db      	uxtb	r3, r3
 800e6be:	2b02      	cmp	r3, #2
 800e6c0:	d002      	beq.n	800e6c8 <USBD_StdEPReq+0x6e>
 800e6c2:	2b03      	cmp	r3, #3
 800e6c4:	d016      	beq.n	800e6f4 <USBD_StdEPReq+0x9a>
 800e6c6:	e02c      	b.n	800e722 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e6c8:	7bbb      	ldrb	r3, [r7, #14]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d00d      	beq.n	800e6ea <USBD_StdEPReq+0x90>
 800e6ce:	7bbb      	ldrb	r3, [r7, #14]
 800e6d0:	2b80      	cmp	r3, #128	; 0x80
 800e6d2:	d00a      	beq.n	800e6ea <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e6d4:	7bbb      	ldrb	r3, [r7, #14]
 800e6d6:	4619      	mov	r1, r3
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f003 fa75 	bl	8011bc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e6de:	2180      	movs	r1, #128	; 0x80
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f003 fa71 	bl	8011bc8 <USBD_LL_StallEP>
 800e6e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e6e8:	e020      	b.n	800e72c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e6ea:	6839      	ldr	r1, [r7, #0]
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f000 fc6f 	bl	800efd0 <USBD_CtlError>
              break;
 800e6f2:	e01b      	b.n	800e72c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	885b      	ldrh	r3, [r3, #2]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d10e      	bne.n	800e71a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e6fc:	7bbb      	ldrb	r3, [r7, #14]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d00b      	beq.n	800e71a <USBD_StdEPReq+0xc0>
 800e702:	7bbb      	ldrb	r3, [r7, #14]
 800e704:	2b80      	cmp	r3, #128	; 0x80
 800e706:	d008      	beq.n	800e71a <USBD_StdEPReq+0xc0>
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	88db      	ldrh	r3, [r3, #6]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d104      	bne.n	800e71a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e710:	7bbb      	ldrb	r3, [r7, #14]
 800e712:	4619      	mov	r1, r3
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f003 fa57 	bl	8011bc8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f000 fd23 	bl	800f166 <USBD_CtlSendStatus>

              break;
 800e720:	e004      	b.n	800e72c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e722:	6839      	ldr	r1, [r7, #0]
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f000 fc53 	bl	800efd0 <USBD_CtlError>
              break;
 800e72a:	bf00      	nop
          }
          break;
 800e72c:	e0ec      	b.n	800e908 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e734:	b2db      	uxtb	r3, r3
 800e736:	2b02      	cmp	r3, #2
 800e738:	d002      	beq.n	800e740 <USBD_StdEPReq+0xe6>
 800e73a:	2b03      	cmp	r3, #3
 800e73c:	d016      	beq.n	800e76c <USBD_StdEPReq+0x112>
 800e73e:	e030      	b.n	800e7a2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e740:	7bbb      	ldrb	r3, [r7, #14]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d00d      	beq.n	800e762 <USBD_StdEPReq+0x108>
 800e746:	7bbb      	ldrb	r3, [r7, #14]
 800e748:	2b80      	cmp	r3, #128	; 0x80
 800e74a:	d00a      	beq.n	800e762 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e74c:	7bbb      	ldrb	r3, [r7, #14]
 800e74e:	4619      	mov	r1, r3
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f003 fa39 	bl	8011bc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e756:	2180      	movs	r1, #128	; 0x80
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f003 fa35 	bl	8011bc8 <USBD_LL_StallEP>
 800e75e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e760:	e025      	b.n	800e7ae <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e762:	6839      	ldr	r1, [r7, #0]
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f000 fc33 	bl	800efd0 <USBD_CtlError>
              break;
 800e76a:	e020      	b.n	800e7ae <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	885b      	ldrh	r3, [r3, #2]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d11b      	bne.n	800e7ac <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e774:	7bbb      	ldrb	r3, [r7, #14]
 800e776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d004      	beq.n	800e788 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e77e:	7bbb      	ldrb	r3, [r7, #14]
 800e780:	4619      	mov	r1, r3
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f003 fa3f 	bl	8011c06 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f000 fcec 	bl	800f166 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e794:	689b      	ldr	r3, [r3, #8]
 800e796:	6839      	ldr	r1, [r7, #0]
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	4798      	blx	r3
 800e79c:	4603      	mov	r3, r0
 800e79e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e7a0:	e004      	b.n	800e7ac <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e7a2:	6839      	ldr	r1, [r7, #0]
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f000 fc13 	bl	800efd0 <USBD_CtlError>
              break;
 800e7aa:	e000      	b.n	800e7ae <USBD_StdEPReq+0x154>
              break;
 800e7ac:	bf00      	nop
          }
          break;
 800e7ae:	e0ab      	b.n	800e908 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7b6:	b2db      	uxtb	r3, r3
 800e7b8:	2b02      	cmp	r3, #2
 800e7ba:	d002      	beq.n	800e7c2 <USBD_StdEPReq+0x168>
 800e7bc:	2b03      	cmp	r3, #3
 800e7be:	d032      	beq.n	800e826 <USBD_StdEPReq+0x1cc>
 800e7c0:	e097      	b.n	800e8f2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e7c2:	7bbb      	ldrb	r3, [r7, #14]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d007      	beq.n	800e7d8 <USBD_StdEPReq+0x17e>
 800e7c8:	7bbb      	ldrb	r3, [r7, #14]
 800e7ca:	2b80      	cmp	r3, #128	; 0x80
 800e7cc:	d004      	beq.n	800e7d8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e7ce:	6839      	ldr	r1, [r7, #0]
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f000 fbfd 	bl	800efd0 <USBD_CtlError>
                break;
 800e7d6:	e091      	b.n	800e8fc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e7d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	da0b      	bge.n	800e7f8 <USBD_StdEPReq+0x19e>
 800e7e0:	7bbb      	ldrb	r3, [r7, #14]
 800e7e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e7e6:	4613      	mov	r3, r2
 800e7e8:	009b      	lsls	r3, r3, #2
 800e7ea:	4413      	add	r3, r2
 800e7ec:	009b      	lsls	r3, r3, #2
 800e7ee:	3310      	adds	r3, #16
 800e7f0:	687a      	ldr	r2, [r7, #4]
 800e7f2:	4413      	add	r3, r2
 800e7f4:	3304      	adds	r3, #4
 800e7f6:	e00b      	b.n	800e810 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e7f8:	7bbb      	ldrb	r3, [r7, #14]
 800e7fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e7fe:	4613      	mov	r3, r2
 800e800:	009b      	lsls	r3, r3, #2
 800e802:	4413      	add	r3, r2
 800e804:	009b      	lsls	r3, r3, #2
 800e806:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e80a:	687a      	ldr	r2, [r7, #4]
 800e80c:	4413      	add	r3, r2
 800e80e:	3304      	adds	r3, #4
 800e810:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	2200      	movs	r2, #0
 800e816:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	2202      	movs	r2, #2
 800e81c:	4619      	mov	r1, r3
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f000 fc47 	bl	800f0b2 <USBD_CtlSendData>
              break;
 800e824:	e06a      	b.n	800e8fc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e826:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	da11      	bge.n	800e852 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e82e:	7bbb      	ldrb	r3, [r7, #14]
 800e830:	f003 020f 	and.w	r2, r3, #15
 800e834:	6879      	ldr	r1, [r7, #4]
 800e836:	4613      	mov	r3, r2
 800e838:	009b      	lsls	r3, r3, #2
 800e83a:	4413      	add	r3, r2
 800e83c:	009b      	lsls	r3, r3, #2
 800e83e:	440b      	add	r3, r1
 800e840:	3324      	adds	r3, #36	; 0x24
 800e842:	881b      	ldrh	r3, [r3, #0]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d117      	bne.n	800e878 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e848:	6839      	ldr	r1, [r7, #0]
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f000 fbc0 	bl	800efd0 <USBD_CtlError>
                  break;
 800e850:	e054      	b.n	800e8fc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e852:	7bbb      	ldrb	r3, [r7, #14]
 800e854:	f003 020f 	and.w	r2, r3, #15
 800e858:	6879      	ldr	r1, [r7, #4]
 800e85a:	4613      	mov	r3, r2
 800e85c:	009b      	lsls	r3, r3, #2
 800e85e:	4413      	add	r3, r2
 800e860:	009b      	lsls	r3, r3, #2
 800e862:	440b      	add	r3, r1
 800e864:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e868:	881b      	ldrh	r3, [r3, #0]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d104      	bne.n	800e878 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e86e:	6839      	ldr	r1, [r7, #0]
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f000 fbad 	bl	800efd0 <USBD_CtlError>
                  break;
 800e876:	e041      	b.n	800e8fc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e878:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	da0b      	bge.n	800e898 <USBD_StdEPReq+0x23e>
 800e880:	7bbb      	ldrb	r3, [r7, #14]
 800e882:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e886:	4613      	mov	r3, r2
 800e888:	009b      	lsls	r3, r3, #2
 800e88a:	4413      	add	r3, r2
 800e88c:	009b      	lsls	r3, r3, #2
 800e88e:	3310      	adds	r3, #16
 800e890:	687a      	ldr	r2, [r7, #4]
 800e892:	4413      	add	r3, r2
 800e894:	3304      	adds	r3, #4
 800e896:	e00b      	b.n	800e8b0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e898:	7bbb      	ldrb	r3, [r7, #14]
 800e89a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e89e:	4613      	mov	r3, r2
 800e8a0:	009b      	lsls	r3, r3, #2
 800e8a2:	4413      	add	r3, r2
 800e8a4:	009b      	lsls	r3, r3, #2
 800e8a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e8aa:	687a      	ldr	r2, [r7, #4]
 800e8ac:	4413      	add	r3, r2
 800e8ae:	3304      	adds	r3, #4
 800e8b0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e8b2:	7bbb      	ldrb	r3, [r7, #14]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d002      	beq.n	800e8be <USBD_StdEPReq+0x264>
 800e8b8:	7bbb      	ldrb	r3, [r7, #14]
 800e8ba:	2b80      	cmp	r3, #128	; 0x80
 800e8bc:	d103      	bne.n	800e8c6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	601a      	str	r2, [r3, #0]
 800e8c4:	e00e      	b.n	800e8e4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e8c6:	7bbb      	ldrb	r3, [r7, #14]
 800e8c8:	4619      	mov	r1, r3
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f003 f9ba 	bl	8011c44 <USBD_LL_IsStallEP>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d003      	beq.n	800e8de <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	2201      	movs	r2, #1
 800e8da:	601a      	str	r2, [r3, #0]
 800e8dc:	e002      	b.n	800e8e4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	2202      	movs	r2, #2
 800e8e8:	4619      	mov	r1, r3
 800e8ea:	6878      	ldr	r0, [r7, #4]
 800e8ec:	f000 fbe1 	bl	800f0b2 <USBD_CtlSendData>
              break;
 800e8f0:	e004      	b.n	800e8fc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e8f2:	6839      	ldr	r1, [r7, #0]
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f000 fb6b 	bl	800efd0 <USBD_CtlError>
              break;
 800e8fa:	bf00      	nop
          }
          break;
 800e8fc:	e004      	b.n	800e908 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e8fe:	6839      	ldr	r1, [r7, #0]
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	f000 fb65 	bl	800efd0 <USBD_CtlError>
          break;
 800e906:	bf00      	nop
      }
      break;
 800e908:	e004      	b.n	800e914 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e90a:	6839      	ldr	r1, [r7, #0]
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f000 fb5f 	bl	800efd0 <USBD_CtlError>
      break;
 800e912:	bf00      	nop
  }

  return ret;
 800e914:	7bfb      	ldrb	r3, [r7, #15]
}
 800e916:	4618      	mov	r0, r3
 800e918:	3710      	adds	r7, #16
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
	...

0800e920 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b084      	sub	sp, #16
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e92a:	2300      	movs	r3, #0
 800e92c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e92e:	2300      	movs	r3, #0
 800e930:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e932:	2300      	movs	r3, #0
 800e934:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	885b      	ldrh	r3, [r3, #2]
 800e93a:	0a1b      	lsrs	r3, r3, #8
 800e93c:	b29b      	uxth	r3, r3
 800e93e:	3b01      	subs	r3, #1
 800e940:	2b0e      	cmp	r3, #14
 800e942:	f200 8152 	bhi.w	800ebea <USBD_GetDescriptor+0x2ca>
 800e946:	a201      	add	r2, pc, #4	; (adr r2, 800e94c <USBD_GetDescriptor+0x2c>)
 800e948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e94c:	0800e9bd 	.word	0x0800e9bd
 800e950:	0800e9d5 	.word	0x0800e9d5
 800e954:	0800ea15 	.word	0x0800ea15
 800e958:	0800ebeb 	.word	0x0800ebeb
 800e95c:	0800ebeb 	.word	0x0800ebeb
 800e960:	0800eb8b 	.word	0x0800eb8b
 800e964:	0800ebb7 	.word	0x0800ebb7
 800e968:	0800ebeb 	.word	0x0800ebeb
 800e96c:	0800ebeb 	.word	0x0800ebeb
 800e970:	0800ebeb 	.word	0x0800ebeb
 800e974:	0800ebeb 	.word	0x0800ebeb
 800e978:	0800ebeb 	.word	0x0800ebeb
 800e97c:	0800ebeb 	.word	0x0800ebeb
 800e980:	0800ebeb 	.word	0x0800ebeb
 800e984:	0800e989 	.word	0x0800e989
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e98e:	69db      	ldr	r3, [r3, #28]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d00b      	beq.n	800e9ac <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e99a:	69db      	ldr	r3, [r3, #28]
 800e99c:	687a      	ldr	r2, [r7, #4]
 800e99e:	7c12      	ldrb	r2, [r2, #16]
 800e9a0:	f107 0108 	add.w	r1, r7, #8
 800e9a4:	4610      	mov	r0, r2
 800e9a6:	4798      	blx	r3
 800e9a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e9aa:	e126      	b.n	800ebfa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e9ac:	6839      	ldr	r1, [r7, #0]
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f000 fb0e 	bl	800efd0 <USBD_CtlError>
        err++;
 800e9b4:	7afb      	ldrb	r3, [r7, #11]
 800e9b6:	3301      	adds	r3, #1
 800e9b8:	72fb      	strb	r3, [r7, #11]
      break;
 800e9ba:	e11e      	b.n	800ebfa <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	687a      	ldr	r2, [r7, #4]
 800e9c6:	7c12      	ldrb	r2, [r2, #16]
 800e9c8:	f107 0108 	add.w	r1, r7, #8
 800e9cc:	4610      	mov	r0, r2
 800e9ce:	4798      	blx	r3
 800e9d0:	60f8      	str	r0, [r7, #12]
      break;
 800e9d2:	e112      	b.n	800ebfa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	7c1b      	ldrb	r3, [r3, #16]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d10d      	bne.n	800e9f8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9e4:	f107 0208 	add.w	r2, r7, #8
 800e9e8:	4610      	mov	r0, r2
 800e9ea:	4798      	blx	r3
 800e9ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	2202      	movs	r2, #2
 800e9f4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e9f6:	e100      	b.n	800ebfa <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea00:	f107 0208 	add.w	r2, r7, #8
 800ea04:	4610      	mov	r0, r2
 800ea06:	4798      	blx	r3
 800ea08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	3301      	adds	r3, #1
 800ea0e:	2202      	movs	r2, #2
 800ea10:	701a      	strb	r2, [r3, #0]
      break;
 800ea12:	e0f2      	b.n	800ebfa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	885b      	ldrh	r3, [r3, #2]
 800ea18:	b2db      	uxtb	r3, r3
 800ea1a:	2b05      	cmp	r3, #5
 800ea1c:	f200 80ac 	bhi.w	800eb78 <USBD_GetDescriptor+0x258>
 800ea20:	a201      	add	r2, pc, #4	; (adr r2, 800ea28 <USBD_GetDescriptor+0x108>)
 800ea22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea26:	bf00      	nop
 800ea28:	0800ea41 	.word	0x0800ea41
 800ea2c:	0800ea75 	.word	0x0800ea75
 800ea30:	0800eaa9 	.word	0x0800eaa9
 800ea34:	0800eadd 	.word	0x0800eadd
 800ea38:	0800eb11 	.word	0x0800eb11
 800ea3c:	0800eb45 	.word	0x0800eb45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea46:	685b      	ldr	r3, [r3, #4]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d00b      	beq.n	800ea64 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	687a      	ldr	r2, [r7, #4]
 800ea56:	7c12      	ldrb	r2, [r2, #16]
 800ea58:	f107 0108 	add.w	r1, r7, #8
 800ea5c:	4610      	mov	r0, r2
 800ea5e:	4798      	blx	r3
 800ea60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ea62:	e091      	b.n	800eb88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ea64:	6839      	ldr	r1, [r7, #0]
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	f000 fab2 	bl	800efd0 <USBD_CtlError>
            err++;
 800ea6c:	7afb      	ldrb	r3, [r7, #11]
 800ea6e:	3301      	adds	r3, #1
 800ea70:	72fb      	strb	r3, [r7, #11]
          break;
 800ea72:	e089      	b.n	800eb88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea7a:	689b      	ldr	r3, [r3, #8]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d00b      	beq.n	800ea98 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea86:	689b      	ldr	r3, [r3, #8]
 800ea88:	687a      	ldr	r2, [r7, #4]
 800ea8a:	7c12      	ldrb	r2, [r2, #16]
 800ea8c:	f107 0108 	add.w	r1, r7, #8
 800ea90:	4610      	mov	r0, r2
 800ea92:	4798      	blx	r3
 800ea94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ea96:	e077      	b.n	800eb88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ea98:	6839      	ldr	r1, [r7, #0]
 800ea9a:	6878      	ldr	r0, [r7, #4]
 800ea9c:	f000 fa98 	bl	800efd0 <USBD_CtlError>
            err++;
 800eaa0:	7afb      	ldrb	r3, [r7, #11]
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	72fb      	strb	r3, [r7, #11]
          break;
 800eaa6:	e06f      	b.n	800eb88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eaae:	68db      	ldr	r3, [r3, #12]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d00b      	beq.n	800eacc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eaba:	68db      	ldr	r3, [r3, #12]
 800eabc:	687a      	ldr	r2, [r7, #4]
 800eabe:	7c12      	ldrb	r2, [r2, #16]
 800eac0:	f107 0108 	add.w	r1, r7, #8
 800eac4:	4610      	mov	r0, r2
 800eac6:	4798      	blx	r3
 800eac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eaca:	e05d      	b.n	800eb88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eacc:	6839      	ldr	r1, [r7, #0]
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f000 fa7e 	bl	800efd0 <USBD_CtlError>
            err++;
 800ead4:	7afb      	ldrb	r3, [r7, #11]
 800ead6:	3301      	adds	r3, #1
 800ead8:	72fb      	strb	r3, [r7, #11]
          break;
 800eada:	e055      	b.n	800eb88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eae2:	691b      	ldr	r3, [r3, #16]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d00b      	beq.n	800eb00 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eaee:	691b      	ldr	r3, [r3, #16]
 800eaf0:	687a      	ldr	r2, [r7, #4]
 800eaf2:	7c12      	ldrb	r2, [r2, #16]
 800eaf4:	f107 0108 	add.w	r1, r7, #8
 800eaf8:	4610      	mov	r0, r2
 800eafa:	4798      	blx	r3
 800eafc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eafe:	e043      	b.n	800eb88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb00:	6839      	ldr	r1, [r7, #0]
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f000 fa64 	bl	800efd0 <USBD_CtlError>
            err++;
 800eb08:	7afb      	ldrb	r3, [r7, #11]
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	72fb      	strb	r3, [r7, #11]
          break;
 800eb0e:	e03b      	b.n	800eb88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb16:	695b      	ldr	r3, [r3, #20]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d00b      	beq.n	800eb34 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb22:	695b      	ldr	r3, [r3, #20]
 800eb24:	687a      	ldr	r2, [r7, #4]
 800eb26:	7c12      	ldrb	r2, [r2, #16]
 800eb28:	f107 0108 	add.w	r1, r7, #8
 800eb2c:	4610      	mov	r0, r2
 800eb2e:	4798      	blx	r3
 800eb30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb32:	e029      	b.n	800eb88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb34:	6839      	ldr	r1, [r7, #0]
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f000 fa4a 	bl	800efd0 <USBD_CtlError>
            err++;
 800eb3c:	7afb      	ldrb	r3, [r7, #11]
 800eb3e:	3301      	adds	r3, #1
 800eb40:	72fb      	strb	r3, [r7, #11]
          break;
 800eb42:	e021      	b.n	800eb88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb4a:	699b      	ldr	r3, [r3, #24]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d00b      	beq.n	800eb68 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb56:	699b      	ldr	r3, [r3, #24]
 800eb58:	687a      	ldr	r2, [r7, #4]
 800eb5a:	7c12      	ldrb	r2, [r2, #16]
 800eb5c:	f107 0108 	add.w	r1, r7, #8
 800eb60:	4610      	mov	r0, r2
 800eb62:	4798      	blx	r3
 800eb64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb66:	e00f      	b.n	800eb88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb68:	6839      	ldr	r1, [r7, #0]
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f000 fa30 	bl	800efd0 <USBD_CtlError>
            err++;
 800eb70:	7afb      	ldrb	r3, [r7, #11]
 800eb72:	3301      	adds	r3, #1
 800eb74:	72fb      	strb	r3, [r7, #11]
          break;
 800eb76:	e007      	b.n	800eb88 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800eb78:	6839      	ldr	r1, [r7, #0]
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f000 fa28 	bl	800efd0 <USBD_CtlError>
          err++;
 800eb80:	7afb      	ldrb	r3, [r7, #11]
 800eb82:	3301      	adds	r3, #1
 800eb84:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800eb86:	bf00      	nop
      }
      break;
 800eb88:	e037      	b.n	800ebfa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	7c1b      	ldrb	r3, [r3, #16]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d109      	bne.n	800eba6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb9a:	f107 0208 	add.w	r2, r7, #8
 800eb9e:	4610      	mov	r0, r2
 800eba0:	4798      	blx	r3
 800eba2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eba4:	e029      	b.n	800ebfa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800eba6:	6839      	ldr	r1, [r7, #0]
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f000 fa11 	bl	800efd0 <USBD_CtlError>
        err++;
 800ebae:	7afb      	ldrb	r3, [r7, #11]
 800ebb0:	3301      	adds	r3, #1
 800ebb2:	72fb      	strb	r3, [r7, #11]
      break;
 800ebb4:	e021      	b.n	800ebfa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	7c1b      	ldrb	r3, [r3, #16]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d10d      	bne.n	800ebda <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebc6:	f107 0208 	add.w	r2, r7, #8
 800ebca:	4610      	mov	r0, r2
 800ebcc:	4798      	blx	r3
 800ebce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	2207      	movs	r2, #7
 800ebd6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ebd8:	e00f      	b.n	800ebfa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ebda:	6839      	ldr	r1, [r7, #0]
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f000 f9f7 	bl	800efd0 <USBD_CtlError>
        err++;
 800ebe2:	7afb      	ldrb	r3, [r7, #11]
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	72fb      	strb	r3, [r7, #11]
      break;
 800ebe8:	e007      	b.n	800ebfa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ebea:	6839      	ldr	r1, [r7, #0]
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f000 f9ef 	bl	800efd0 <USBD_CtlError>
      err++;
 800ebf2:	7afb      	ldrb	r3, [r7, #11]
 800ebf4:	3301      	adds	r3, #1
 800ebf6:	72fb      	strb	r3, [r7, #11]
      break;
 800ebf8:	bf00      	nop
  }

  if (err != 0U)
 800ebfa:	7afb      	ldrb	r3, [r7, #11]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d11e      	bne.n	800ec3e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	88db      	ldrh	r3, [r3, #6]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d016      	beq.n	800ec36 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ec08:	893b      	ldrh	r3, [r7, #8]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d00e      	beq.n	800ec2c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	88da      	ldrh	r2, [r3, #6]
 800ec12:	893b      	ldrh	r3, [r7, #8]
 800ec14:	4293      	cmp	r3, r2
 800ec16:	bf28      	it	cs
 800ec18:	4613      	movcs	r3, r2
 800ec1a:	b29b      	uxth	r3, r3
 800ec1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ec1e:	893b      	ldrh	r3, [r7, #8]
 800ec20:	461a      	mov	r2, r3
 800ec22:	68f9      	ldr	r1, [r7, #12]
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f000 fa44 	bl	800f0b2 <USBD_CtlSendData>
 800ec2a:	e009      	b.n	800ec40 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ec2c:	6839      	ldr	r1, [r7, #0]
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f000 f9ce 	bl	800efd0 <USBD_CtlError>
 800ec34:	e004      	b.n	800ec40 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f000 fa95 	bl	800f166 <USBD_CtlSendStatus>
 800ec3c:	e000      	b.n	800ec40 <USBD_GetDescriptor+0x320>
    return;
 800ec3e:	bf00      	nop
  }
}
 800ec40:	3710      	adds	r7, #16
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}
 800ec46:	bf00      	nop

0800ec48 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b084      	sub	sp, #16
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
 800ec50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	889b      	ldrh	r3, [r3, #4]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d131      	bne.n	800ecbe <USBD_SetAddress+0x76>
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	88db      	ldrh	r3, [r3, #6]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d12d      	bne.n	800ecbe <USBD_SetAddress+0x76>
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	885b      	ldrh	r3, [r3, #2]
 800ec66:	2b7f      	cmp	r3, #127	; 0x7f
 800ec68:	d829      	bhi.n	800ecbe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	885b      	ldrh	r3, [r3, #2]
 800ec6e:	b2db      	uxtb	r3, r3
 800ec70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec7c:	b2db      	uxtb	r3, r3
 800ec7e:	2b03      	cmp	r3, #3
 800ec80:	d104      	bne.n	800ec8c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ec82:	6839      	ldr	r1, [r7, #0]
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f000 f9a3 	bl	800efd0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec8a:	e01d      	b.n	800ecc8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	7bfa      	ldrb	r2, [r7, #15]
 800ec90:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ec94:	7bfb      	ldrb	r3, [r7, #15]
 800ec96:	4619      	mov	r1, r3
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f003 f800 	bl	8011c9e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f000 fa61 	bl	800f166 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800eca4:	7bfb      	ldrb	r3, [r7, #15]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d004      	beq.n	800ecb4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2202      	movs	r2, #2
 800ecae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecb2:	e009      	b.n	800ecc8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecbc:	e004      	b.n	800ecc8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ecbe:	6839      	ldr	r1, [r7, #0]
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f000 f985 	bl	800efd0 <USBD_CtlError>
  }
}
 800ecc6:	bf00      	nop
 800ecc8:	bf00      	nop
 800ecca:	3710      	adds	r7, #16
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b084      	sub	sp, #16
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	885b      	ldrh	r3, [r3, #2]
 800ece2:	b2da      	uxtb	r2, r3
 800ece4:	4b4c      	ldr	r3, [pc, #304]	; (800ee18 <USBD_SetConfig+0x148>)
 800ece6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ece8:	4b4b      	ldr	r3, [pc, #300]	; (800ee18 <USBD_SetConfig+0x148>)
 800ecea:	781b      	ldrb	r3, [r3, #0]
 800ecec:	2b01      	cmp	r3, #1
 800ecee:	d905      	bls.n	800ecfc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ecf0:	6839      	ldr	r1, [r7, #0]
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f000 f96c 	bl	800efd0 <USBD_CtlError>
    return USBD_FAIL;
 800ecf8:	2303      	movs	r3, #3
 800ecfa:	e088      	b.n	800ee0e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed02:	b2db      	uxtb	r3, r3
 800ed04:	2b02      	cmp	r3, #2
 800ed06:	d002      	beq.n	800ed0e <USBD_SetConfig+0x3e>
 800ed08:	2b03      	cmp	r3, #3
 800ed0a:	d025      	beq.n	800ed58 <USBD_SetConfig+0x88>
 800ed0c:	e071      	b.n	800edf2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ed0e:	4b42      	ldr	r3, [pc, #264]	; (800ee18 <USBD_SetConfig+0x148>)
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d01c      	beq.n	800ed50 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ed16:	4b40      	ldr	r3, [pc, #256]	; (800ee18 <USBD_SetConfig+0x148>)
 800ed18:	781b      	ldrb	r3, [r3, #0]
 800ed1a:	461a      	mov	r2, r3
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ed20:	4b3d      	ldr	r3, [pc, #244]	; (800ee18 <USBD_SetConfig+0x148>)
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	4619      	mov	r1, r3
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f7ff f992 	bl	800e050 <USBD_SetClassConfig>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ed30:	7bfb      	ldrb	r3, [r7, #15]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d004      	beq.n	800ed40 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ed36:	6839      	ldr	r1, [r7, #0]
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f000 f949 	bl	800efd0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ed3e:	e065      	b.n	800ee0c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f000 fa10 	bl	800f166 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2203      	movs	r2, #3
 800ed4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ed4e:	e05d      	b.n	800ee0c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	f000 fa08 	bl	800f166 <USBD_CtlSendStatus>
      break;
 800ed56:	e059      	b.n	800ee0c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ed58:	4b2f      	ldr	r3, [pc, #188]	; (800ee18 <USBD_SetConfig+0x148>)
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d112      	bne.n	800ed86 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2202      	movs	r2, #2
 800ed64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ed68:	4b2b      	ldr	r3, [pc, #172]	; (800ee18 <USBD_SetConfig+0x148>)
 800ed6a:	781b      	ldrb	r3, [r3, #0]
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ed72:	4b29      	ldr	r3, [pc, #164]	; (800ee18 <USBD_SetConfig+0x148>)
 800ed74:	781b      	ldrb	r3, [r3, #0]
 800ed76:	4619      	mov	r1, r3
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f7ff f985 	bl	800e088 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f000 f9f1 	bl	800f166 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ed84:	e042      	b.n	800ee0c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ed86:	4b24      	ldr	r3, [pc, #144]	; (800ee18 <USBD_SetConfig+0x148>)
 800ed88:	781b      	ldrb	r3, [r3, #0]
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	685b      	ldr	r3, [r3, #4]
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d02a      	beq.n	800edea <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	685b      	ldr	r3, [r3, #4]
 800ed98:	b2db      	uxtb	r3, r3
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f7ff f973 	bl	800e088 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800eda2:	4b1d      	ldr	r3, [pc, #116]	; (800ee18 <USBD_SetConfig+0x148>)
 800eda4:	781b      	ldrb	r3, [r3, #0]
 800eda6:	461a      	mov	r2, r3
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800edac:	4b1a      	ldr	r3, [pc, #104]	; (800ee18 <USBD_SetConfig+0x148>)
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	4619      	mov	r1, r3
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f7ff f94c 	bl	800e050 <USBD_SetClassConfig>
 800edb8:	4603      	mov	r3, r0
 800edba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800edbc:	7bfb      	ldrb	r3, [r7, #15]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d00f      	beq.n	800ede2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800edc2:	6839      	ldr	r1, [r7, #0]
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f000 f903 	bl	800efd0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	685b      	ldr	r3, [r3, #4]
 800edce:	b2db      	uxtb	r3, r3
 800edd0:	4619      	mov	r1, r3
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f7ff f958 	bl	800e088 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2202      	movs	r2, #2
 800eddc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ede0:	e014      	b.n	800ee0c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f000 f9bf 	bl	800f166 <USBD_CtlSendStatus>
      break;
 800ede8:	e010      	b.n	800ee0c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f000 f9bb 	bl	800f166 <USBD_CtlSendStatus>
      break;
 800edf0:	e00c      	b.n	800ee0c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800edf2:	6839      	ldr	r1, [r7, #0]
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f000 f8eb 	bl	800efd0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800edfa:	4b07      	ldr	r3, [pc, #28]	; (800ee18 <USBD_SetConfig+0x148>)
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	4619      	mov	r1, r3
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f7ff f941 	bl	800e088 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ee06:	2303      	movs	r3, #3
 800ee08:	73fb      	strb	r3, [r7, #15]
      break;
 800ee0a:	bf00      	nop
  }

  return ret;
 800ee0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	3710      	adds	r7, #16
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}
 800ee16:	bf00      	nop
 800ee18:	20000960 	.word	0x20000960

0800ee1c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b082      	sub	sp, #8
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	88db      	ldrh	r3, [r3, #6]
 800ee2a:	2b01      	cmp	r3, #1
 800ee2c:	d004      	beq.n	800ee38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ee2e:	6839      	ldr	r1, [r7, #0]
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f000 f8cd 	bl	800efd0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ee36:	e023      	b.n	800ee80 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee3e:	b2db      	uxtb	r3, r3
 800ee40:	2b02      	cmp	r3, #2
 800ee42:	dc02      	bgt.n	800ee4a <USBD_GetConfig+0x2e>
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	dc03      	bgt.n	800ee50 <USBD_GetConfig+0x34>
 800ee48:	e015      	b.n	800ee76 <USBD_GetConfig+0x5a>
 800ee4a:	2b03      	cmp	r3, #3
 800ee4c:	d00b      	beq.n	800ee66 <USBD_GetConfig+0x4a>
 800ee4e:	e012      	b.n	800ee76 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2200      	movs	r2, #0
 800ee54:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	3308      	adds	r3, #8
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	4619      	mov	r1, r3
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f000 f927 	bl	800f0b2 <USBD_CtlSendData>
        break;
 800ee64:	e00c      	b.n	800ee80 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	3304      	adds	r3, #4
 800ee6a:	2201      	movs	r2, #1
 800ee6c:	4619      	mov	r1, r3
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f000 f91f 	bl	800f0b2 <USBD_CtlSendData>
        break;
 800ee74:	e004      	b.n	800ee80 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ee76:	6839      	ldr	r1, [r7, #0]
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f000 f8a9 	bl	800efd0 <USBD_CtlError>
        break;
 800ee7e:	bf00      	nop
}
 800ee80:	bf00      	nop
 800ee82:	3708      	adds	r7, #8
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}

0800ee88 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b082      	sub	sp, #8
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee98:	b2db      	uxtb	r3, r3
 800ee9a:	3b01      	subs	r3, #1
 800ee9c:	2b02      	cmp	r3, #2
 800ee9e:	d81e      	bhi.n	800eede <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	88db      	ldrh	r3, [r3, #6]
 800eea4:	2b02      	cmp	r3, #2
 800eea6:	d004      	beq.n	800eeb2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800eea8:	6839      	ldr	r1, [r7, #0]
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f000 f890 	bl	800efd0 <USBD_CtlError>
        break;
 800eeb0:	e01a      	b.n	800eee8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2201      	movs	r2, #1
 800eeb6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d005      	beq.n	800eece <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	68db      	ldr	r3, [r3, #12]
 800eec6:	f043 0202 	orr.w	r2, r3, #2
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	330c      	adds	r3, #12
 800eed2:	2202      	movs	r2, #2
 800eed4:	4619      	mov	r1, r3
 800eed6:	6878      	ldr	r0, [r7, #4]
 800eed8:	f000 f8eb 	bl	800f0b2 <USBD_CtlSendData>
      break;
 800eedc:	e004      	b.n	800eee8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800eede:	6839      	ldr	r1, [r7, #0]
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f000 f875 	bl	800efd0 <USBD_CtlError>
      break;
 800eee6:	bf00      	nop
  }
}
 800eee8:	bf00      	nop
 800eeea:	3708      	adds	r7, #8
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}

0800eef0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b082      	sub	sp, #8
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
 800eef8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	885b      	ldrh	r3, [r3, #2]
 800eefe:	2b01      	cmp	r3, #1
 800ef00:	d106      	bne.n	800ef10 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	2201      	movs	r2, #1
 800ef06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f000 f92b 	bl	800f166 <USBD_CtlSendStatus>
  }
}
 800ef10:	bf00      	nop
 800ef12:	3708      	adds	r7, #8
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b082      	sub	sp, #8
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
 800ef20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef28:	b2db      	uxtb	r3, r3
 800ef2a:	3b01      	subs	r3, #1
 800ef2c:	2b02      	cmp	r3, #2
 800ef2e:	d80b      	bhi.n	800ef48 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	885b      	ldrh	r3, [r3, #2]
 800ef34:	2b01      	cmp	r3, #1
 800ef36:	d10c      	bne.n	800ef52 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f000 f910 	bl	800f166 <USBD_CtlSendStatus>
      }
      break;
 800ef46:	e004      	b.n	800ef52 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ef48:	6839      	ldr	r1, [r7, #0]
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f000 f840 	bl	800efd0 <USBD_CtlError>
      break;
 800ef50:	e000      	b.n	800ef54 <USBD_ClrFeature+0x3c>
      break;
 800ef52:	bf00      	nop
  }
}
 800ef54:	bf00      	nop
 800ef56:	3708      	adds	r7, #8
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}

0800ef5c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b084      	sub	sp, #16
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	781a      	ldrb	r2, [r3, #0]
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	3301      	adds	r3, #1
 800ef76:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	781a      	ldrb	r2, [r3, #0]
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	3301      	adds	r3, #1
 800ef84:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ef86:	68f8      	ldr	r0, [r7, #12]
 800ef88:	f7ff fa92 	bl	800e4b0 <SWAPBYTE>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	461a      	mov	r2, r3
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	3301      	adds	r3, #1
 800ef98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	3301      	adds	r3, #1
 800ef9e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800efa0:	68f8      	ldr	r0, [r7, #12]
 800efa2:	f7ff fa85 	bl	800e4b0 <SWAPBYTE>
 800efa6:	4603      	mov	r3, r0
 800efa8:	461a      	mov	r2, r3
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	3301      	adds	r3, #1
 800efb2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	3301      	adds	r3, #1
 800efb8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800efba:	68f8      	ldr	r0, [r7, #12]
 800efbc:	f7ff fa78 	bl	800e4b0 <SWAPBYTE>
 800efc0:	4603      	mov	r3, r0
 800efc2:	461a      	mov	r2, r3
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	80da      	strh	r2, [r3, #6]
}
 800efc8:	bf00      	nop
 800efca:	3710      	adds	r7, #16
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}

0800efd0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b082      	sub	sp, #8
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800efda:	2180      	movs	r1, #128	; 0x80
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f002 fdf3 	bl	8011bc8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800efe2:	2100      	movs	r1, #0
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	f002 fdef 	bl	8011bc8 <USBD_LL_StallEP>
}
 800efea:	bf00      	nop
 800efec:	3708      	adds	r7, #8
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}

0800eff2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800eff2:	b580      	push	{r7, lr}
 800eff4:	b086      	sub	sp, #24
 800eff6:	af00      	add	r7, sp, #0
 800eff8:	60f8      	str	r0, [r7, #12]
 800effa:	60b9      	str	r1, [r7, #8]
 800effc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800effe:	2300      	movs	r3, #0
 800f000:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d036      	beq.n	800f076 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f00c:	6938      	ldr	r0, [r7, #16]
 800f00e:	f000 f836 	bl	800f07e <USBD_GetLen>
 800f012:	4603      	mov	r3, r0
 800f014:	3301      	adds	r3, #1
 800f016:	b29b      	uxth	r3, r3
 800f018:	005b      	lsls	r3, r3, #1
 800f01a:	b29a      	uxth	r2, r3
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f020:	7dfb      	ldrb	r3, [r7, #23]
 800f022:	68ba      	ldr	r2, [r7, #8]
 800f024:	4413      	add	r3, r2
 800f026:	687a      	ldr	r2, [r7, #4]
 800f028:	7812      	ldrb	r2, [r2, #0]
 800f02a:	701a      	strb	r2, [r3, #0]
  idx++;
 800f02c:	7dfb      	ldrb	r3, [r7, #23]
 800f02e:	3301      	adds	r3, #1
 800f030:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f032:	7dfb      	ldrb	r3, [r7, #23]
 800f034:	68ba      	ldr	r2, [r7, #8]
 800f036:	4413      	add	r3, r2
 800f038:	2203      	movs	r2, #3
 800f03a:	701a      	strb	r2, [r3, #0]
  idx++;
 800f03c:	7dfb      	ldrb	r3, [r7, #23]
 800f03e:	3301      	adds	r3, #1
 800f040:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f042:	e013      	b.n	800f06c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f044:	7dfb      	ldrb	r3, [r7, #23]
 800f046:	68ba      	ldr	r2, [r7, #8]
 800f048:	4413      	add	r3, r2
 800f04a:	693a      	ldr	r2, [r7, #16]
 800f04c:	7812      	ldrb	r2, [r2, #0]
 800f04e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	3301      	adds	r3, #1
 800f054:	613b      	str	r3, [r7, #16]
    idx++;
 800f056:	7dfb      	ldrb	r3, [r7, #23]
 800f058:	3301      	adds	r3, #1
 800f05a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f05c:	7dfb      	ldrb	r3, [r7, #23]
 800f05e:	68ba      	ldr	r2, [r7, #8]
 800f060:	4413      	add	r3, r2
 800f062:	2200      	movs	r2, #0
 800f064:	701a      	strb	r2, [r3, #0]
    idx++;
 800f066:	7dfb      	ldrb	r3, [r7, #23]
 800f068:	3301      	adds	r3, #1
 800f06a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f06c:	693b      	ldr	r3, [r7, #16]
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d1e7      	bne.n	800f044 <USBD_GetString+0x52>
 800f074:	e000      	b.n	800f078 <USBD_GetString+0x86>
    return;
 800f076:	bf00      	nop
  }
}
 800f078:	3718      	adds	r7, #24
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}

0800f07e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f07e:	b480      	push	{r7}
 800f080:	b085      	sub	sp, #20
 800f082:	af00      	add	r7, sp, #0
 800f084:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f086:	2300      	movs	r3, #0
 800f088:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f08e:	e005      	b.n	800f09c <USBD_GetLen+0x1e>
  {
    len++;
 800f090:	7bfb      	ldrb	r3, [r7, #15]
 800f092:	3301      	adds	r3, #1
 800f094:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	3301      	adds	r3, #1
 800f09a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	781b      	ldrb	r3, [r3, #0]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d1f5      	bne.n	800f090 <USBD_GetLen+0x12>
  }

  return len;
 800f0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	3714      	adds	r7, #20
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b0:	4770      	bx	lr

0800f0b2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f0b2:	b580      	push	{r7, lr}
 800f0b4:	b084      	sub	sp, #16
 800f0b6:	af00      	add	r7, sp, #0
 800f0b8:	60f8      	str	r0, [r7, #12]
 800f0ba:	60b9      	str	r1, [r7, #8]
 800f0bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	2202      	movs	r2, #2
 800f0c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	687a      	ldr	r2, [r7, #4]
 800f0ca:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	687a      	ldr	r2, [r7, #4]
 800f0d0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	68ba      	ldr	r2, [r7, #8]
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	68f8      	ldr	r0, [r7, #12]
 800f0da:	f002 fdff 	bl	8011cdc <USBD_LL_Transmit>

  return USBD_OK;
 800f0de:	2300      	movs	r3, #0
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3710      	adds	r7, #16
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}

0800f0e8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b084      	sub	sp, #16
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	60f8      	str	r0, [r7, #12]
 800f0f0:	60b9      	str	r1, [r7, #8]
 800f0f2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	68ba      	ldr	r2, [r7, #8]
 800f0f8:	2100      	movs	r1, #0
 800f0fa:	68f8      	ldr	r0, [r7, #12]
 800f0fc:	f002 fdee 	bl	8011cdc <USBD_LL_Transmit>

  return USBD_OK;
 800f100:	2300      	movs	r3, #0
}
 800f102:	4618      	mov	r0, r3
 800f104:	3710      	adds	r7, #16
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}

0800f10a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f10a:	b580      	push	{r7, lr}
 800f10c:	b084      	sub	sp, #16
 800f10e:	af00      	add	r7, sp, #0
 800f110:	60f8      	str	r0, [r7, #12]
 800f112:	60b9      	str	r1, [r7, #8]
 800f114:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	2203      	movs	r2, #3
 800f11a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	687a      	ldr	r2, [r7, #4]
 800f122:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	687a      	ldr	r2, [r7, #4]
 800f12a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	68ba      	ldr	r2, [r7, #8]
 800f132:	2100      	movs	r1, #0
 800f134:	68f8      	ldr	r0, [r7, #12]
 800f136:	f002 fdf2 	bl	8011d1e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f13a:	2300      	movs	r3, #0
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3710      	adds	r7, #16
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}

0800f144 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b084      	sub	sp, #16
 800f148:	af00      	add	r7, sp, #0
 800f14a:	60f8      	str	r0, [r7, #12]
 800f14c:	60b9      	str	r1, [r7, #8]
 800f14e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	68ba      	ldr	r2, [r7, #8]
 800f154:	2100      	movs	r1, #0
 800f156:	68f8      	ldr	r0, [r7, #12]
 800f158:	f002 fde1 	bl	8011d1e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f15c:	2300      	movs	r3, #0
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3710      	adds	r7, #16
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}

0800f166 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f166:	b580      	push	{r7, lr}
 800f168:	b082      	sub	sp, #8
 800f16a:	af00      	add	r7, sp, #0
 800f16c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2204      	movs	r2, #4
 800f172:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f176:	2300      	movs	r3, #0
 800f178:	2200      	movs	r2, #0
 800f17a:	2100      	movs	r1, #0
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f002 fdad 	bl	8011cdc <USBD_LL_Transmit>

  return USBD_OK;
 800f182:	2300      	movs	r3, #0
}
 800f184:	4618      	mov	r0, r3
 800f186:	3708      	adds	r7, #8
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}

0800f18c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b082      	sub	sp, #8
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2205      	movs	r2, #5
 800f198:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f19c:	2300      	movs	r3, #0
 800f19e:	2200      	movs	r2, #0
 800f1a0:	2100      	movs	r1, #0
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f002 fdbb 	bl	8011d1e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f1a8:	2300      	movs	r3, #0
}
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	3708      	adds	r7, #8
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bd80      	pop	{r7, pc}

0800f1b2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f1b2:	b480      	push	{r7}
 800f1b4:	b085      	sub	sp, #20
 800f1b6:	af00      	add	r7, sp, #0
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f1bc:	2300      	movs	r3, #0
 800f1be:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f1c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f1c4:	2b84      	cmp	r3, #132	; 0x84
 800f1c6:	d005      	beq.n	800f1d4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f1c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	4413      	add	r3, r2
 800f1d0:	3303      	adds	r3, #3
 800f1d2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3714      	adds	r7, #20
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e0:	4770      	bx	lr

0800f1e2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f1e2:	b580      	push	{r7, lr}
 800f1e4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f1e6:	f000 ff73 	bl	80100d0 <vTaskStartScheduler>
  
  return osOK;
 800f1ea:	2300      	movs	r3, #0
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	bd80      	pop	{r7, pc}

0800f1f0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1f2:	b087      	sub	sp, #28
 800f1f4:	af02      	add	r7, sp, #8
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	685c      	ldr	r4, [r3, #4]
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f206:	b29e      	uxth	r6, r3
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f20e:	4618      	mov	r0, r3
 800f210:	f7ff ffcf 	bl	800f1b2 <makeFreeRtosPriority>
 800f214:	4602      	mov	r2, r0
 800f216:	f107 030c 	add.w	r3, r7, #12
 800f21a:	9301      	str	r3, [sp, #4]
 800f21c:	9200      	str	r2, [sp, #0]
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	4632      	mov	r2, r6
 800f222:	4629      	mov	r1, r5
 800f224:	4620      	mov	r0, r4
 800f226:	f000 fdd5 	bl	800fdd4 <xTaskCreate>
 800f22a:	4603      	mov	r3, r0
 800f22c:	2b01      	cmp	r3, #1
 800f22e:	d001      	beq.n	800f234 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800f230:	2300      	movs	r3, #0
 800f232:	e000      	b.n	800f236 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800f234:	68fb      	ldr	r3, [r7, #12]
}
 800f236:	4618      	mov	r0, r3
 800f238:	3714      	adds	r7, #20
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f23e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f23e:	b580      	push	{r7, lr}
 800f240:	b084      	sub	sp, #16
 800f242:	af00      	add	r7, sp, #0
 800f244:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d001      	beq.n	800f254 <osDelay+0x16>
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	e000      	b.n	800f256 <osDelay+0x18>
 800f254:	2301      	movs	r3, #1
 800f256:	4618      	mov	r0, r3
 800f258:	f000 ff06 	bl	8010068 <vTaskDelay>
  
  return osOK;
 800f25c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3710      	adds	r7, #16
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}

0800f266 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f266:	b480      	push	{r7}
 800f268:	b083      	sub	sp, #12
 800f26a:	af00      	add	r7, sp, #0
 800f26c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f103 0208 	add.w	r2, r3, #8
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f27e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f103 0208 	add.w	r2, r3, #8
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	f103 0208 	add.w	r2, r3, #8
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2200      	movs	r2, #0
 800f298:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f29a:	bf00      	nop
 800f29c:	370c      	adds	r7, #12
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a4:	4770      	bx	lr

0800f2a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f2a6:	b480      	push	{r7}
 800f2a8:	b083      	sub	sp, #12
 800f2aa:	af00      	add	r7, sp, #0
 800f2ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f2b4:	bf00      	nop
 800f2b6:	370c      	adds	r7, #12
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2be:	4770      	bx	lr

0800f2c0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b085      	sub	sp, #20
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	685b      	ldr	r3, [r3, #4]
 800f2ce:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	68fa      	ldr	r2, [r7, #12]
 800f2d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	689a      	ldr	r2, [r3, #8]
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	689b      	ldr	r3, [r3, #8]
 800f2e2:	683a      	ldr	r2, [r7, #0]
 800f2e4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	683a      	ldr	r2, [r7, #0]
 800f2ea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	687a      	ldr	r2, [r7, #4]
 800f2f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	1c5a      	adds	r2, r3, #1
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	601a      	str	r2, [r3, #0]
}
 800f2fc:	bf00      	nop
 800f2fe:	3714      	adds	r7, #20
 800f300:	46bd      	mov	sp, r7
 800f302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f306:	4770      	bx	lr

0800f308 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f308:	b480      	push	{r7}
 800f30a:	b085      	sub	sp, #20
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
 800f310:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f31e:	d103      	bne.n	800f328 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	691b      	ldr	r3, [r3, #16]
 800f324:	60fb      	str	r3, [r7, #12]
 800f326:	e00c      	b.n	800f342 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	3308      	adds	r3, #8
 800f32c:	60fb      	str	r3, [r7, #12]
 800f32e:	e002      	b.n	800f336 <vListInsert+0x2e>
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	685b      	ldr	r3, [r3, #4]
 800f334:	60fb      	str	r3, [r7, #12]
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	685b      	ldr	r3, [r3, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	68ba      	ldr	r2, [r7, #8]
 800f33e:	429a      	cmp	r2, r3
 800f340:	d2f6      	bcs.n	800f330 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	685a      	ldr	r2, [r3, #4]
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	685b      	ldr	r3, [r3, #4]
 800f34e:	683a      	ldr	r2, [r7, #0]
 800f350:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	68fa      	ldr	r2, [r7, #12]
 800f356:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	683a      	ldr	r2, [r7, #0]
 800f35c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	687a      	ldr	r2, [r7, #4]
 800f362:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	1c5a      	adds	r2, r3, #1
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	601a      	str	r2, [r3, #0]
}
 800f36e:	bf00      	nop
 800f370:	3714      	adds	r7, #20
 800f372:	46bd      	mov	sp, r7
 800f374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f378:	4770      	bx	lr

0800f37a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f37a:	b480      	push	{r7}
 800f37c:	b085      	sub	sp, #20
 800f37e:	af00      	add	r7, sp, #0
 800f380:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	691b      	ldr	r3, [r3, #16]
 800f386:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	685b      	ldr	r3, [r3, #4]
 800f38c:	687a      	ldr	r2, [r7, #4]
 800f38e:	6892      	ldr	r2, [r2, #8]
 800f390:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	689b      	ldr	r3, [r3, #8]
 800f396:	687a      	ldr	r2, [r7, #4]
 800f398:	6852      	ldr	r2, [r2, #4]
 800f39a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	685b      	ldr	r3, [r3, #4]
 800f3a0:	687a      	ldr	r2, [r7, #4]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d103      	bne.n	800f3ae <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	689a      	ldr	r2, [r3, #8]
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	1e5a      	subs	r2, r3, #1
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	681b      	ldr	r3, [r3, #0]
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3714      	adds	r7, #20
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3cc:	4770      	bx	lr
	...

0800f3d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b084      	sub	sp, #16
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d10a      	bne.n	800f3fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e8:	f383 8811 	msr	BASEPRI, r3
 800f3ec:	f3bf 8f6f 	isb	sy
 800f3f0:	f3bf 8f4f 	dsb	sy
 800f3f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f3f6:	bf00      	nop
 800f3f8:	e7fe      	b.n	800f3f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f3fa:	f001 fd93 	bl	8010f24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681a      	ldr	r2, [r3, #0]
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f406:	68f9      	ldr	r1, [r7, #12]
 800f408:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f40a:	fb01 f303 	mul.w	r3, r1, r3
 800f40e:	441a      	add	r2, r3
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	2200      	movs	r2, #0
 800f418:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	681a      	ldr	r2, [r3, #0]
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681a      	ldr	r2, [r3, #0]
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f42a:	3b01      	subs	r3, #1
 800f42c:	68f9      	ldr	r1, [r7, #12]
 800f42e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f430:	fb01 f303 	mul.w	r3, r1, r3
 800f434:	441a      	add	r2, r3
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	22ff      	movs	r2, #255	; 0xff
 800f43e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	22ff      	movs	r2, #255	; 0xff
 800f446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d114      	bne.n	800f47a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	691b      	ldr	r3, [r3, #16]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d01a      	beq.n	800f48e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	3310      	adds	r3, #16
 800f45c:	4618      	mov	r0, r3
 800f45e:	f001 f86f 	bl	8010540 <xTaskRemoveFromEventList>
 800f462:	4603      	mov	r3, r0
 800f464:	2b00      	cmp	r3, #0
 800f466:	d012      	beq.n	800f48e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f468:	4b0c      	ldr	r3, [pc, #48]	; (800f49c <xQueueGenericReset+0xcc>)
 800f46a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f46e:	601a      	str	r2, [r3, #0]
 800f470:	f3bf 8f4f 	dsb	sy
 800f474:	f3bf 8f6f 	isb	sy
 800f478:	e009      	b.n	800f48e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	3310      	adds	r3, #16
 800f47e:	4618      	mov	r0, r3
 800f480:	f7ff fef1 	bl	800f266 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	3324      	adds	r3, #36	; 0x24
 800f488:	4618      	mov	r0, r3
 800f48a:	f7ff feec 	bl	800f266 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f48e:	f001 fd79 	bl	8010f84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f492:	2301      	movs	r3, #1
}
 800f494:	4618      	mov	r0, r3
 800f496:	3710      	adds	r7, #16
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}
 800f49c:	e000ed04 	.word	0xe000ed04

0800f4a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b08a      	sub	sp, #40	; 0x28
 800f4a4:	af02      	add	r7, sp, #8
 800f4a6:	60f8      	str	r0, [r7, #12]
 800f4a8:	60b9      	str	r1, [r7, #8]
 800f4aa:	4613      	mov	r3, r2
 800f4ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d10a      	bne.n	800f4ca <xQueueGenericCreate+0x2a>
	__asm volatile
 800f4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4b8:	f383 8811 	msr	BASEPRI, r3
 800f4bc:	f3bf 8f6f 	isb	sy
 800f4c0:	f3bf 8f4f 	dsb	sy
 800f4c4:	613b      	str	r3, [r7, #16]
}
 800f4c6:	bf00      	nop
 800f4c8:	e7fe      	b.n	800f4c8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	68ba      	ldr	r2, [r7, #8]
 800f4ce:	fb02 f303 	mul.w	r3, r2, r3
 800f4d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	3348      	adds	r3, #72	; 0x48
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f001 fe05 	bl	80110e8 <pvPortMalloc>
 800f4de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f4e0:	69bb      	ldr	r3, [r7, #24]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d00d      	beq.n	800f502 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f4e6:	69bb      	ldr	r3, [r7, #24]
 800f4e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f4ea:	697b      	ldr	r3, [r7, #20]
 800f4ec:	3348      	adds	r3, #72	; 0x48
 800f4ee:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f4f0:	79fa      	ldrb	r2, [r7, #7]
 800f4f2:	69bb      	ldr	r3, [r7, #24]
 800f4f4:	9300      	str	r3, [sp, #0]
 800f4f6:	4613      	mov	r3, r2
 800f4f8:	697a      	ldr	r2, [r7, #20]
 800f4fa:	68b9      	ldr	r1, [r7, #8]
 800f4fc:	68f8      	ldr	r0, [r7, #12]
 800f4fe:	f000 f805 	bl	800f50c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f502:	69bb      	ldr	r3, [r7, #24]
	}
 800f504:	4618      	mov	r0, r3
 800f506:	3720      	adds	r7, #32
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}

0800f50c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b084      	sub	sp, #16
 800f510:	af00      	add	r7, sp, #0
 800f512:	60f8      	str	r0, [r7, #12]
 800f514:	60b9      	str	r1, [r7, #8]
 800f516:	607a      	str	r2, [r7, #4]
 800f518:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d103      	bne.n	800f528 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f520:	69bb      	ldr	r3, [r7, #24]
 800f522:	69ba      	ldr	r2, [r7, #24]
 800f524:	601a      	str	r2, [r3, #0]
 800f526:	e002      	b.n	800f52e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f528:	69bb      	ldr	r3, [r7, #24]
 800f52a:	687a      	ldr	r2, [r7, #4]
 800f52c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f52e:	69bb      	ldr	r3, [r7, #24]
 800f530:	68fa      	ldr	r2, [r7, #12]
 800f532:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f534:	69bb      	ldr	r3, [r7, #24]
 800f536:	68ba      	ldr	r2, [r7, #8]
 800f538:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f53a:	2101      	movs	r1, #1
 800f53c:	69b8      	ldr	r0, [r7, #24]
 800f53e:	f7ff ff47 	bl	800f3d0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f542:	bf00      	nop
 800f544:	3710      	adds	r7, #16
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}

0800f54a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f54a:	b580      	push	{r7, lr}
 800f54c:	b082      	sub	sp, #8
 800f54e:	af00      	add	r7, sp, #0
 800f550:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d00e      	beq.n	800f576 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2200      	movs	r2, #0
 800f55c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2200      	movs	r2, #0
 800f562:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2200      	movs	r2, #0
 800f568:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f56a:	2300      	movs	r3, #0
 800f56c:	2200      	movs	r2, #0
 800f56e:	2100      	movs	r1, #0
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f000 f81d 	bl	800f5b0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f576:	bf00      	nop
 800f578:	3708      	adds	r7, #8
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}

0800f57e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f57e:	b580      	push	{r7, lr}
 800f580:	b086      	sub	sp, #24
 800f582:	af00      	add	r7, sp, #0
 800f584:	4603      	mov	r3, r0
 800f586:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f588:	2301      	movs	r3, #1
 800f58a:	617b      	str	r3, [r7, #20]
 800f58c:	2300      	movs	r3, #0
 800f58e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f590:	79fb      	ldrb	r3, [r7, #7]
 800f592:	461a      	mov	r2, r3
 800f594:	6939      	ldr	r1, [r7, #16]
 800f596:	6978      	ldr	r0, [r7, #20]
 800f598:	f7ff ff82 	bl	800f4a0 <xQueueGenericCreate>
 800f59c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f59e:	68f8      	ldr	r0, [r7, #12]
 800f5a0:	f7ff ffd3 	bl	800f54a <prvInitialiseMutex>

		return xNewQueue;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
	}
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	3718      	adds	r7, #24
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}
	...

0800f5b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b08e      	sub	sp, #56	; 0x38
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	60f8      	str	r0, [r7, #12]
 800f5b8:	60b9      	str	r1, [r7, #8]
 800f5ba:	607a      	str	r2, [r7, #4]
 800f5bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d10a      	bne.n	800f5e2 <xQueueGenericSend+0x32>
	__asm volatile
 800f5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d0:	f383 8811 	msr	BASEPRI, r3
 800f5d4:	f3bf 8f6f 	isb	sy
 800f5d8:	f3bf 8f4f 	dsb	sy
 800f5dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f5de:	bf00      	nop
 800f5e0:	e7fe      	b.n	800f5e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d103      	bne.n	800f5f0 <xQueueGenericSend+0x40>
 800f5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d101      	bne.n	800f5f4 <xQueueGenericSend+0x44>
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	e000      	b.n	800f5f6 <xQueueGenericSend+0x46>
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d10a      	bne.n	800f610 <xQueueGenericSend+0x60>
	__asm volatile
 800f5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5fe:	f383 8811 	msr	BASEPRI, r3
 800f602:	f3bf 8f6f 	isb	sy
 800f606:	f3bf 8f4f 	dsb	sy
 800f60a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f60c:	bf00      	nop
 800f60e:	e7fe      	b.n	800f60e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	2b02      	cmp	r3, #2
 800f614:	d103      	bne.n	800f61e <xQueueGenericSend+0x6e>
 800f616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f61a:	2b01      	cmp	r3, #1
 800f61c:	d101      	bne.n	800f622 <xQueueGenericSend+0x72>
 800f61e:	2301      	movs	r3, #1
 800f620:	e000      	b.n	800f624 <xQueueGenericSend+0x74>
 800f622:	2300      	movs	r3, #0
 800f624:	2b00      	cmp	r3, #0
 800f626:	d10a      	bne.n	800f63e <xQueueGenericSend+0x8e>
	__asm volatile
 800f628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f62c:	f383 8811 	msr	BASEPRI, r3
 800f630:	f3bf 8f6f 	isb	sy
 800f634:	f3bf 8f4f 	dsb	sy
 800f638:	623b      	str	r3, [r7, #32]
}
 800f63a:	bf00      	nop
 800f63c:	e7fe      	b.n	800f63c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f63e:	f001 f921 	bl	8010884 <xTaskGetSchedulerState>
 800f642:	4603      	mov	r3, r0
 800f644:	2b00      	cmp	r3, #0
 800f646:	d102      	bne.n	800f64e <xQueueGenericSend+0x9e>
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d101      	bne.n	800f652 <xQueueGenericSend+0xa2>
 800f64e:	2301      	movs	r3, #1
 800f650:	e000      	b.n	800f654 <xQueueGenericSend+0xa4>
 800f652:	2300      	movs	r3, #0
 800f654:	2b00      	cmp	r3, #0
 800f656:	d10a      	bne.n	800f66e <xQueueGenericSend+0xbe>
	__asm volatile
 800f658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f65c:	f383 8811 	msr	BASEPRI, r3
 800f660:	f3bf 8f6f 	isb	sy
 800f664:	f3bf 8f4f 	dsb	sy
 800f668:	61fb      	str	r3, [r7, #28]
}
 800f66a:	bf00      	nop
 800f66c:	e7fe      	b.n	800f66c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f66e:	f001 fc59 	bl	8010f24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d302      	bcc.n	800f684 <xQueueGenericSend+0xd4>
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	2b02      	cmp	r3, #2
 800f682:	d129      	bne.n	800f6d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f684:	683a      	ldr	r2, [r7, #0]
 800f686:	68b9      	ldr	r1, [r7, #8]
 800f688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f68a:	f000 fa93 	bl	800fbb4 <prvCopyDataToQueue>
 800f68e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f694:	2b00      	cmp	r3, #0
 800f696:	d010      	beq.n	800f6ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f69a:	3324      	adds	r3, #36	; 0x24
 800f69c:	4618      	mov	r0, r3
 800f69e:	f000 ff4f 	bl	8010540 <xTaskRemoveFromEventList>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d013      	beq.n	800f6d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f6a8:	4b3f      	ldr	r3, [pc, #252]	; (800f7a8 <xQueueGenericSend+0x1f8>)
 800f6aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6ae:	601a      	str	r2, [r3, #0]
 800f6b0:	f3bf 8f4f 	dsb	sy
 800f6b4:	f3bf 8f6f 	isb	sy
 800f6b8:	e00a      	b.n	800f6d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d007      	beq.n	800f6d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f6c0:	4b39      	ldr	r3, [pc, #228]	; (800f7a8 <xQueueGenericSend+0x1f8>)
 800f6c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6c6:	601a      	str	r2, [r3, #0]
 800f6c8:	f3bf 8f4f 	dsb	sy
 800f6cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f6d0:	f001 fc58 	bl	8010f84 <vPortExitCritical>
				return pdPASS;
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	e063      	b.n	800f7a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d103      	bne.n	800f6e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f6de:	f001 fc51 	bl	8010f84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	e05c      	b.n	800f7a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f6e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d106      	bne.n	800f6fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f6ec:	f107 0314 	add.w	r3, r7, #20
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f000 ff87 	bl	8010604 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f6fa:	f001 fc43 	bl	8010f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f6fe:	f000 fd37 	bl	8010170 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f702:	f001 fc0f 	bl	8010f24 <vPortEnterCritical>
 800f706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f708:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f70c:	b25b      	sxtb	r3, r3
 800f70e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f712:	d103      	bne.n	800f71c <xQueueGenericSend+0x16c>
 800f714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f716:	2200      	movs	r2, #0
 800f718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f71e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f722:	b25b      	sxtb	r3, r3
 800f724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f728:	d103      	bne.n	800f732 <xQueueGenericSend+0x182>
 800f72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f72c:	2200      	movs	r2, #0
 800f72e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f732:	f001 fc27 	bl	8010f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f736:	1d3a      	adds	r2, r7, #4
 800f738:	f107 0314 	add.w	r3, r7, #20
 800f73c:	4611      	mov	r1, r2
 800f73e:	4618      	mov	r0, r3
 800f740:	f000 ff76 	bl	8010630 <xTaskCheckForTimeOut>
 800f744:	4603      	mov	r3, r0
 800f746:	2b00      	cmp	r3, #0
 800f748:	d124      	bne.n	800f794 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f74a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f74c:	f000 fb2a 	bl	800fda4 <prvIsQueueFull>
 800f750:	4603      	mov	r3, r0
 800f752:	2b00      	cmp	r3, #0
 800f754:	d018      	beq.n	800f788 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f758:	3310      	adds	r3, #16
 800f75a:	687a      	ldr	r2, [r7, #4]
 800f75c:	4611      	mov	r1, r2
 800f75e:	4618      	mov	r0, r3
 800f760:	f000 feca 	bl	80104f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f766:	f000 fab5 	bl	800fcd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f76a:	f000 fd0f 	bl	801018c <xTaskResumeAll>
 800f76e:	4603      	mov	r3, r0
 800f770:	2b00      	cmp	r3, #0
 800f772:	f47f af7c 	bne.w	800f66e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f776:	4b0c      	ldr	r3, [pc, #48]	; (800f7a8 <xQueueGenericSend+0x1f8>)
 800f778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f77c:	601a      	str	r2, [r3, #0]
 800f77e:	f3bf 8f4f 	dsb	sy
 800f782:	f3bf 8f6f 	isb	sy
 800f786:	e772      	b.n	800f66e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f78a:	f000 faa3 	bl	800fcd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f78e:	f000 fcfd 	bl	801018c <xTaskResumeAll>
 800f792:	e76c      	b.n	800f66e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f796:	f000 fa9d 	bl	800fcd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f79a:	f000 fcf7 	bl	801018c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f79e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	3738      	adds	r7, #56	; 0x38
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}
 800f7a8:	e000ed04 	.word	0xe000ed04

0800f7ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b08c      	sub	sp, #48	; 0x30
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	60f8      	str	r0, [r7, #12]
 800f7b4:	60b9      	str	r1, [r7, #8]
 800f7b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d10a      	bne.n	800f7dc <xQueueReceive+0x30>
	__asm volatile
 800f7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ca:	f383 8811 	msr	BASEPRI, r3
 800f7ce:	f3bf 8f6f 	isb	sy
 800f7d2:	f3bf 8f4f 	dsb	sy
 800f7d6:	623b      	str	r3, [r7, #32]
}
 800f7d8:	bf00      	nop
 800f7da:	e7fe      	b.n	800f7da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d103      	bne.n	800f7ea <xQueueReceive+0x3e>
 800f7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d101      	bne.n	800f7ee <xQueueReceive+0x42>
 800f7ea:	2301      	movs	r3, #1
 800f7ec:	e000      	b.n	800f7f0 <xQueueReceive+0x44>
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d10a      	bne.n	800f80a <xQueueReceive+0x5e>
	__asm volatile
 800f7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7f8:	f383 8811 	msr	BASEPRI, r3
 800f7fc:	f3bf 8f6f 	isb	sy
 800f800:	f3bf 8f4f 	dsb	sy
 800f804:	61fb      	str	r3, [r7, #28]
}
 800f806:	bf00      	nop
 800f808:	e7fe      	b.n	800f808 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f80a:	f001 f83b 	bl	8010884 <xTaskGetSchedulerState>
 800f80e:	4603      	mov	r3, r0
 800f810:	2b00      	cmp	r3, #0
 800f812:	d102      	bne.n	800f81a <xQueueReceive+0x6e>
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d101      	bne.n	800f81e <xQueueReceive+0x72>
 800f81a:	2301      	movs	r3, #1
 800f81c:	e000      	b.n	800f820 <xQueueReceive+0x74>
 800f81e:	2300      	movs	r3, #0
 800f820:	2b00      	cmp	r3, #0
 800f822:	d10a      	bne.n	800f83a <xQueueReceive+0x8e>
	__asm volatile
 800f824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f828:	f383 8811 	msr	BASEPRI, r3
 800f82c:	f3bf 8f6f 	isb	sy
 800f830:	f3bf 8f4f 	dsb	sy
 800f834:	61bb      	str	r3, [r7, #24]
}
 800f836:	bf00      	nop
 800f838:	e7fe      	b.n	800f838 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f83a:	f001 fb73 	bl	8010f24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f842:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f846:	2b00      	cmp	r3, #0
 800f848:	d01f      	beq.n	800f88a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f84a:	68b9      	ldr	r1, [r7, #8]
 800f84c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f84e:	f000 fa1b 	bl	800fc88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f854:	1e5a      	subs	r2, r3, #1
 800f856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f858:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f85c:	691b      	ldr	r3, [r3, #16]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d00f      	beq.n	800f882 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f864:	3310      	adds	r3, #16
 800f866:	4618      	mov	r0, r3
 800f868:	f000 fe6a 	bl	8010540 <xTaskRemoveFromEventList>
 800f86c:	4603      	mov	r3, r0
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d007      	beq.n	800f882 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f872:	4b3d      	ldr	r3, [pc, #244]	; (800f968 <xQueueReceive+0x1bc>)
 800f874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f878:	601a      	str	r2, [r3, #0]
 800f87a:	f3bf 8f4f 	dsb	sy
 800f87e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f882:	f001 fb7f 	bl	8010f84 <vPortExitCritical>
				return pdPASS;
 800f886:	2301      	movs	r3, #1
 800f888:	e069      	b.n	800f95e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d103      	bne.n	800f898 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f890:	f001 fb78 	bl	8010f84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f894:	2300      	movs	r3, #0
 800f896:	e062      	b.n	800f95e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d106      	bne.n	800f8ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f89e:	f107 0310 	add.w	r3, r7, #16
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f000 feae 	bl	8010604 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f8ac:	f001 fb6a 	bl	8010f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f8b0:	f000 fc5e 	bl	8010170 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f8b4:	f001 fb36 	bl	8010f24 <vPortEnterCritical>
 800f8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f8be:	b25b      	sxtb	r3, r3
 800f8c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f8c4:	d103      	bne.n	800f8ce <xQueueReceive+0x122>
 800f8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f8d4:	b25b      	sxtb	r3, r3
 800f8d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f8da:	d103      	bne.n	800f8e4 <xQueueReceive+0x138>
 800f8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8de:	2200      	movs	r2, #0
 800f8e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f8e4:	f001 fb4e 	bl	8010f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f8e8:	1d3a      	adds	r2, r7, #4
 800f8ea:	f107 0310 	add.w	r3, r7, #16
 800f8ee:	4611      	mov	r1, r2
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f000 fe9d 	bl	8010630 <xTaskCheckForTimeOut>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d123      	bne.n	800f944 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f8fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8fe:	f000 fa3b 	bl	800fd78 <prvIsQueueEmpty>
 800f902:	4603      	mov	r3, r0
 800f904:	2b00      	cmp	r3, #0
 800f906:	d017      	beq.n	800f938 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f90a:	3324      	adds	r3, #36	; 0x24
 800f90c:	687a      	ldr	r2, [r7, #4]
 800f90e:	4611      	mov	r1, r2
 800f910:	4618      	mov	r0, r3
 800f912:	f000 fdf1 	bl	80104f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f918:	f000 f9dc 	bl	800fcd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f91c:	f000 fc36 	bl	801018c <xTaskResumeAll>
 800f920:	4603      	mov	r3, r0
 800f922:	2b00      	cmp	r3, #0
 800f924:	d189      	bne.n	800f83a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f926:	4b10      	ldr	r3, [pc, #64]	; (800f968 <xQueueReceive+0x1bc>)
 800f928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f92c:	601a      	str	r2, [r3, #0]
 800f92e:	f3bf 8f4f 	dsb	sy
 800f932:	f3bf 8f6f 	isb	sy
 800f936:	e780      	b.n	800f83a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f93a:	f000 f9cb 	bl	800fcd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f93e:	f000 fc25 	bl	801018c <xTaskResumeAll>
 800f942:	e77a      	b.n	800f83a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f946:	f000 f9c5 	bl	800fcd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f94a:	f000 fc1f 	bl	801018c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f94e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f950:	f000 fa12 	bl	800fd78 <prvIsQueueEmpty>
 800f954:	4603      	mov	r3, r0
 800f956:	2b00      	cmp	r3, #0
 800f958:	f43f af6f 	beq.w	800f83a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f95c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f95e:	4618      	mov	r0, r3
 800f960:	3730      	adds	r7, #48	; 0x30
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}
 800f966:	bf00      	nop
 800f968:	e000ed04 	.word	0xe000ed04

0800f96c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b08e      	sub	sp, #56	; 0x38
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
 800f974:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f976:	2300      	movs	r3, #0
 800f978:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f97e:	2300      	movs	r3, #0
 800f980:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f984:	2b00      	cmp	r3, #0
 800f986:	d10a      	bne.n	800f99e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800f988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f98c:	f383 8811 	msr	BASEPRI, r3
 800f990:	f3bf 8f6f 	isb	sy
 800f994:	f3bf 8f4f 	dsb	sy
 800f998:	623b      	str	r3, [r7, #32]
}
 800f99a:	bf00      	nop
 800f99c:	e7fe      	b.n	800f99c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d00a      	beq.n	800f9bc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9aa:	f383 8811 	msr	BASEPRI, r3
 800f9ae:	f3bf 8f6f 	isb	sy
 800f9b2:	f3bf 8f4f 	dsb	sy
 800f9b6:	61fb      	str	r3, [r7, #28]
}
 800f9b8:	bf00      	nop
 800f9ba:	e7fe      	b.n	800f9ba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f9bc:	f000 ff62 	bl	8010884 <xTaskGetSchedulerState>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d102      	bne.n	800f9cc <xQueueSemaphoreTake+0x60>
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d101      	bne.n	800f9d0 <xQueueSemaphoreTake+0x64>
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	e000      	b.n	800f9d2 <xQueueSemaphoreTake+0x66>
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d10a      	bne.n	800f9ec <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9da:	f383 8811 	msr	BASEPRI, r3
 800f9de:	f3bf 8f6f 	isb	sy
 800f9e2:	f3bf 8f4f 	dsb	sy
 800f9e6:	61bb      	str	r3, [r7, #24]
}
 800f9e8:	bf00      	nop
 800f9ea:	e7fe      	b.n	800f9ea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f9ec:	f001 fa9a 	bl	8010f24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9f4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d024      	beq.n	800fa46 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9fe:	1e5a      	subs	r2, r3, #1
 800fa00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa02:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fa04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d104      	bne.n	800fa16 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fa0c:	f001 f8e2 	bl	8010bd4 <pvTaskIncrementMutexHeldCount>
 800fa10:	4602      	mov	r2, r0
 800fa12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa14:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fa16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa18:	691b      	ldr	r3, [r3, #16]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d00f      	beq.n	800fa3e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fa1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa20:	3310      	adds	r3, #16
 800fa22:	4618      	mov	r0, r3
 800fa24:	f000 fd8c 	bl	8010540 <xTaskRemoveFromEventList>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d007      	beq.n	800fa3e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fa2e:	4b54      	ldr	r3, [pc, #336]	; (800fb80 <xQueueSemaphoreTake+0x214>)
 800fa30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa34:	601a      	str	r2, [r3, #0]
 800fa36:	f3bf 8f4f 	dsb	sy
 800fa3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fa3e:	f001 faa1 	bl	8010f84 <vPortExitCritical>
				return pdPASS;
 800fa42:	2301      	movs	r3, #1
 800fa44:	e097      	b.n	800fb76 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d111      	bne.n	800fa70 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fa4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d00a      	beq.n	800fa68 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800fa52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa56:	f383 8811 	msr	BASEPRI, r3
 800fa5a:	f3bf 8f6f 	isb	sy
 800fa5e:	f3bf 8f4f 	dsb	sy
 800fa62:	617b      	str	r3, [r7, #20]
}
 800fa64:	bf00      	nop
 800fa66:	e7fe      	b.n	800fa66 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fa68:	f001 fa8c 	bl	8010f84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	e082      	b.n	800fb76 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fa70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d106      	bne.n	800fa84 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fa76:	f107 030c 	add.w	r3, r7, #12
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	f000 fdc2 	bl	8010604 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fa80:	2301      	movs	r3, #1
 800fa82:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fa84:	f001 fa7e 	bl	8010f84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fa88:	f000 fb72 	bl	8010170 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fa8c:	f001 fa4a 	bl	8010f24 <vPortEnterCritical>
 800fa90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fa96:	b25b      	sxtb	r3, r3
 800fa98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa9c:	d103      	bne.n	800faa6 <xQueueSemaphoreTake+0x13a>
 800fa9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa0:	2200      	movs	r2, #0
 800faa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800faa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800faac:	b25b      	sxtb	r3, r3
 800faae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fab2:	d103      	bne.n	800fabc <xQueueSemaphoreTake+0x150>
 800fab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fab6:	2200      	movs	r2, #0
 800fab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fabc:	f001 fa62 	bl	8010f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fac0:	463a      	mov	r2, r7
 800fac2:	f107 030c 	add.w	r3, r7, #12
 800fac6:	4611      	mov	r1, r2
 800fac8:	4618      	mov	r0, r3
 800faca:	f000 fdb1 	bl	8010630 <xTaskCheckForTimeOut>
 800face:	4603      	mov	r3, r0
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d132      	bne.n	800fb3a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fad4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fad6:	f000 f94f 	bl	800fd78 <prvIsQueueEmpty>
 800fada:	4603      	mov	r3, r0
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d026      	beq.n	800fb2e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d109      	bne.n	800fafc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800fae8:	f001 fa1c 	bl	8010f24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800faec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faee:	689b      	ldr	r3, [r3, #8]
 800faf0:	4618      	mov	r0, r3
 800faf2:	f000 fee5 	bl	80108c0 <xTaskPriorityInherit>
 800faf6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800faf8:	f001 fa44 	bl	8010f84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fafe:	3324      	adds	r3, #36	; 0x24
 800fb00:	683a      	ldr	r2, [r7, #0]
 800fb02:	4611      	mov	r1, r2
 800fb04:	4618      	mov	r0, r3
 800fb06:	f000 fcf7 	bl	80104f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fb0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb0c:	f000 f8e2 	bl	800fcd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fb10:	f000 fb3c 	bl	801018c <xTaskResumeAll>
 800fb14:	4603      	mov	r3, r0
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	f47f af68 	bne.w	800f9ec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800fb1c:	4b18      	ldr	r3, [pc, #96]	; (800fb80 <xQueueSemaphoreTake+0x214>)
 800fb1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb22:	601a      	str	r2, [r3, #0]
 800fb24:	f3bf 8f4f 	dsb	sy
 800fb28:	f3bf 8f6f 	isb	sy
 800fb2c:	e75e      	b.n	800f9ec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fb2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb30:	f000 f8d0 	bl	800fcd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fb34:	f000 fb2a 	bl	801018c <xTaskResumeAll>
 800fb38:	e758      	b.n	800f9ec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fb3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb3c:	f000 f8ca 	bl	800fcd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fb40:	f000 fb24 	bl	801018c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fb44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb46:	f000 f917 	bl	800fd78 <prvIsQueueEmpty>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	f43f af4d 	beq.w	800f9ec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d00d      	beq.n	800fb74 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800fb58:	f001 f9e4 	bl	8010f24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fb5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb5e:	f000 f811 	bl	800fb84 <prvGetDisinheritPriorityAfterTimeout>
 800fb62:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb66:	689b      	ldr	r3, [r3, #8]
 800fb68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f000 ffa4 	bl	8010ab8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fb70:	f001 fa08 	bl	8010f84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fb74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	3738      	adds	r7, #56	; 0x38
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}
 800fb7e:	bf00      	nop
 800fb80:	e000ed04 	.word	0xe000ed04

0800fb84 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fb84:	b480      	push	{r7}
 800fb86:	b085      	sub	sp, #20
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d006      	beq.n	800fba2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	f1c3 0307 	rsb	r3, r3, #7
 800fb9e:	60fb      	str	r3, [r7, #12]
 800fba0:	e001      	b.n	800fba6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fba2:	2300      	movs	r3, #0
 800fba4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800fba6:	68fb      	ldr	r3, [r7, #12]
	}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3714      	adds	r7, #20
 800fbac:	46bd      	mov	sp, r7
 800fbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb2:	4770      	bx	lr

0800fbb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b086      	sub	sp, #24
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	60f8      	str	r0, [r7, #12]
 800fbbc:	60b9      	str	r1, [r7, #8]
 800fbbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d10d      	bne.n	800fbee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d14d      	bne.n	800fc76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	689b      	ldr	r3, [r3, #8]
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f000 fee4 	bl	80109ac <xTaskPriorityDisinherit>
 800fbe4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	2200      	movs	r2, #0
 800fbea:	609a      	str	r2, [r3, #8]
 800fbec:	e043      	b.n	800fc76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d119      	bne.n	800fc28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	6858      	ldr	r0, [r3, #4]
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	68b9      	ldr	r1, [r7, #8]
 800fc00:	f002 fa65 	bl	80120ce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	685a      	ldr	r2, [r3, #4]
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc0c:	441a      	add	r2, r3
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	685a      	ldr	r2, [r3, #4]
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	689b      	ldr	r3, [r3, #8]
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	d32b      	bcc.n	800fc76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	681a      	ldr	r2, [r3, #0]
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	605a      	str	r2, [r3, #4]
 800fc26:	e026      	b.n	800fc76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	68d8      	ldr	r0, [r3, #12]
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc30:	461a      	mov	r2, r3
 800fc32:	68b9      	ldr	r1, [r7, #8]
 800fc34:	f002 fa4b 	bl	80120ce <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	68da      	ldr	r2, [r3, #12]
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc40:	425b      	negs	r3, r3
 800fc42:	441a      	add	r2, r3
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	68da      	ldr	r2, [r3, #12]
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d207      	bcs.n	800fc64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	689a      	ldr	r2, [r3, #8]
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc5c:	425b      	negs	r3, r3
 800fc5e:	441a      	add	r2, r3
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2b02      	cmp	r3, #2
 800fc68:	d105      	bne.n	800fc76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fc6a:	693b      	ldr	r3, [r7, #16]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d002      	beq.n	800fc76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fc70:	693b      	ldr	r3, [r7, #16]
 800fc72:	3b01      	subs	r3, #1
 800fc74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fc76:	693b      	ldr	r3, [r7, #16]
 800fc78:	1c5a      	adds	r2, r3, #1
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fc7e:	697b      	ldr	r3, [r7, #20]
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	3718      	adds	r7, #24
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}

0800fc88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b082      	sub	sp, #8
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
 800fc90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d018      	beq.n	800fccc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	68da      	ldr	r2, [r3, #12]
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fca2:	441a      	add	r2, r3
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	68da      	ldr	r2, [r3, #12]
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	689b      	ldr	r3, [r3, #8]
 800fcb0:	429a      	cmp	r2, r3
 800fcb2:	d303      	bcc.n	800fcbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681a      	ldr	r2, [r3, #0]
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	68d9      	ldr	r1, [r3, #12]
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcc4:	461a      	mov	r2, r3
 800fcc6:	6838      	ldr	r0, [r7, #0]
 800fcc8:	f002 fa01 	bl	80120ce <memcpy>
	}
}
 800fccc:	bf00      	nop
 800fcce:	3708      	adds	r7, #8
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}

0800fcd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b084      	sub	sp, #16
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fcdc:	f001 f922 	bl	8010f24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fce6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fce8:	e011      	b.n	800fd0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d012      	beq.n	800fd18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	3324      	adds	r3, #36	; 0x24
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f000 fc22 	bl	8010540 <xTaskRemoveFromEventList>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d001      	beq.n	800fd06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fd02:	f000 fcf7 	bl	80106f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fd06:	7bfb      	ldrb	r3, [r7, #15]
 800fd08:	3b01      	subs	r3, #1
 800fd0a:	b2db      	uxtb	r3, r3
 800fd0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fd0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	dce9      	bgt.n	800fcea <prvUnlockQueue+0x16>
 800fd16:	e000      	b.n	800fd1a <prvUnlockQueue+0x46>
					break;
 800fd18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	22ff      	movs	r2, #255	; 0xff
 800fd1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fd22:	f001 f92f 	bl	8010f84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fd26:	f001 f8fd 	bl	8010f24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fd30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fd32:	e011      	b.n	800fd58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	691b      	ldr	r3, [r3, #16]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d012      	beq.n	800fd62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	3310      	adds	r3, #16
 800fd40:	4618      	mov	r0, r3
 800fd42:	f000 fbfd 	bl	8010540 <xTaskRemoveFromEventList>
 800fd46:	4603      	mov	r3, r0
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d001      	beq.n	800fd50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fd4c:	f000 fcd2 	bl	80106f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fd50:	7bbb      	ldrb	r3, [r7, #14]
 800fd52:	3b01      	subs	r3, #1
 800fd54:	b2db      	uxtb	r3, r3
 800fd56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fd58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	dce9      	bgt.n	800fd34 <prvUnlockQueue+0x60>
 800fd60:	e000      	b.n	800fd64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fd62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	22ff      	movs	r2, #255	; 0xff
 800fd68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fd6c:	f001 f90a 	bl	8010f84 <vPortExitCritical>
}
 800fd70:	bf00      	nop
 800fd72:	3710      	adds	r7, #16
 800fd74:	46bd      	mov	sp, r7
 800fd76:	bd80      	pop	{r7, pc}

0800fd78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b084      	sub	sp, #16
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fd80:	f001 f8d0 	bl	8010f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d102      	bne.n	800fd92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fd8c:	2301      	movs	r3, #1
 800fd8e:	60fb      	str	r3, [r7, #12]
 800fd90:	e001      	b.n	800fd96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fd92:	2300      	movs	r3, #0
 800fd94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fd96:	f001 f8f5 	bl	8010f84 <vPortExitCritical>

	return xReturn;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
}
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	3710      	adds	r7, #16
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}

0800fda4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b084      	sub	sp, #16
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fdac:	f001 f8ba 	bl	8010f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdb8:	429a      	cmp	r2, r3
 800fdba:	d102      	bne.n	800fdc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	60fb      	str	r3, [r7, #12]
 800fdc0:	e001      	b.n	800fdc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fdc6:	f001 f8dd 	bl	8010f84 <vPortExitCritical>

	return xReturn;
 800fdca:	68fb      	ldr	r3, [r7, #12]
}
 800fdcc:	4618      	mov	r0, r3
 800fdce:	3710      	adds	r7, #16
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}

0800fdd4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b08c      	sub	sp, #48	; 0x30
 800fdd8:	af04      	add	r7, sp, #16
 800fdda:	60f8      	str	r0, [r7, #12]
 800fddc:	60b9      	str	r1, [r7, #8]
 800fdde:	603b      	str	r3, [r7, #0]
 800fde0:	4613      	mov	r3, r2
 800fde2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fde4:	88fb      	ldrh	r3, [r7, #6]
 800fde6:	009b      	lsls	r3, r3, #2
 800fde8:	4618      	mov	r0, r3
 800fdea:	f001 f97d 	bl	80110e8 <pvPortMalloc>
 800fdee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d00e      	beq.n	800fe14 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fdf6:	20b4      	movs	r0, #180	; 0xb4
 800fdf8:	f001 f976 	bl	80110e8 <pvPortMalloc>
 800fdfc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fdfe:	69fb      	ldr	r3, [r7, #28]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d003      	beq.n	800fe0c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fe04:	69fb      	ldr	r3, [r7, #28]
 800fe06:	697a      	ldr	r2, [r7, #20]
 800fe08:	631a      	str	r2, [r3, #48]	; 0x30
 800fe0a:	e005      	b.n	800fe18 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fe0c:	6978      	ldr	r0, [r7, #20]
 800fe0e:	f001 fa37 	bl	8011280 <vPortFree>
 800fe12:	e001      	b.n	800fe18 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fe14:	2300      	movs	r3, #0
 800fe16:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fe18:	69fb      	ldr	r3, [r7, #28]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d013      	beq.n	800fe46 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fe1e:	88fa      	ldrh	r2, [r7, #6]
 800fe20:	2300      	movs	r3, #0
 800fe22:	9303      	str	r3, [sp, #12]
 800fe24:	69fb      	ldr	r3, [r7, #28]
 800fe26:	9302      	str	r3, [sp, #8]
 800fe28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe2a:	9301      	str	r3, [sp, #4]
 800fe2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe2e:	9300      	str	r3, [sp, #0]
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	68b9      	ldr	r1, [r7, #8]
 800fe34:	68f8      	ldr	r0, [r7, #12]
 800fe36:	f000 f80f 	bl	800fe58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fe3a:	69f8      	ldr	r0, [r7, #28]
 800fe3c:	f000 f8aa 	bl	800ff94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fe40:	2301      	movs	r3, #1
 800fe42:	61bb      	str	r3, [r7, #24]
 800fe44:	e002      	b.n	800fe4c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fe46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fe4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fe4c:	69bb      	ldr	r3, [r7, #24]
	}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	3720      	adds	r7, #32
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}
	...

0800fe58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b088      	sub	sp, #32
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	60f8      	str	r0, [r7, #12]
 800fe60:	60b9      	str	r1, [r7, #8]
 800fe62:	607a      	str	r2, [r7, #4]
 800fe64:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fe66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fe70:	3b01      	subs	r3, #1
 800fe72:	009b      	lsls	r3, r3, #2
 800fe74:	4413      	add	r3, r2
 800fe76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fe78:	69bb      	ldr	r3, [r7, #24]
 800fe7a:	f023 0307 	bic.w	r3, r3, #7
 800fe7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fe80:	69bb      	ldr	r3, [r7, #24]
 800fe82:	f003 0307 	and.w	r3, r3, #7
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d00a      	beq.n	800fea0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800fe8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe8e:	f383 8811 	msr	BASEPRI, r3
 800fe92:	f3bf 8f6f 	isb	sy
 800fe96:	f3bf 8f4f 	dsb	sy
 800fe9a:	617b      	str	r3, [r7, #20]
}
 800fe9c:	bf00      	nop
 800fe9e:	e7fe      	b.n	800fe9e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d01f      	beq.n	800fee6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fea6:	2300      	movs	r3, #0
 800fea8:	61fb      	str	r3, [r7, #28]
 800feaa:	e012      	b.n	800fed2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800feac:	68ba      	ldr	r2, [r7, #8]
 800feae:	69fb      	ldr	r3, [r7, #28]
 800feb0:	4413      	add	r3, r2
 800feb2:	7819      	ldrb	r1, [r3, #0]
 800feb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800feb6:	69fb      	ldr	r3, [r7, #28]
 800feb8:	4413      	add	r3, r2
 800feba:	3334      	adds	r3, #52	; 0x34
 800febc:	460a      	mov	r2, r1
 800febe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fec0:	68ba      	ldr	r2, [r7, #8]
 800fec2:	69fb      	ldr	r3, [r7, #28]
 800fec4:	4413      	add	r3, r2
 800fec6:	781b      	ldrb	r3, [r3, #0]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d006      	beq.n	800feda <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fecc:	69fb      	ldr	r3, [r7, #28]
 800fece:	3301      	adds	r3, #1
 800fed0:	61fb      	str	r3, [r7, #28]
 800fed2:	69fb      	ldr	r3, [r7, #28]
 800fed4:	2b0f      	cmp	r3, #15
 800fed6:	d9e9      	bls.n	800feac <prvInitialiseNewTask+0x54>
 800fed8:	e000      	b.n	800fedc <prvInitialiseNewTask+0x84>
			{
				break;
 800feda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fede:	2200      	movs	r2, #0
 800fee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fee4:	e003      	b.n	800feee <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fee8:	2200      	movs	r2, #0
 800feea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800feee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef0:	2b06      	cmp	r3, #6
 800fef2:	d901      	bls.n	800fef8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fef4:	2306      	movs	r3, #6
 800fef6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fefa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fefc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff02:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ff04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff06:	2200      	movs	r2, #0
 800ff08:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ff0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff0c:	3304      	adds	r3, #4
 800ff0e:	4618      	mov	r0, r3
 800ff10:	f7ff f9c9 	bl	800f2a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ff14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff16:	3318      	adds	r3, #24
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f7ff f9c4 	bl	800f2a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ff1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff26:	f1c3 0207 	rsb	r2, r3, #7
 800ff2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ff2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ff34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff36:	2200      	movs	r2, #0
 800ff38:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ff3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff3e:	2200      	movs	r2, #0
 800ff40:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ff44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff46:	334c      	adds	r3, #76	; 0x4c
 800ff48:	2260      	movs	r2, #96	; 0x60
 800ff4a:	2100      	movs	r1, #0
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f002 f8cc 	bl	80120ea <memset>
 800ff52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff54:	4a0c      	ldr	r2, [pc, #48]	; (800ff88 <prvInitialiseNewTask+0x130>)
 800ff56:	651a      	str	r2, [r3, #80]	; 0x50
 800ff58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff5a:	4a0c      	ldr	r2, [pc, #48]	; (800ff8c <prvInitialiseNewTask+0x134>)
 800ff5c:	655a      	str	r2, [r3, #84]	; 0x54
 800ff5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff60:	4a0b      	ldr	r2, [pc, #44]	; (800ff90 <prvInitialiseNewTask+0x138>)
 800ff62:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ff64:	683a      	ldr	r2, [r7, #0]
 800ff66:	68f9      	ldr	r1, [r7, #12]
 800ff68:	69b8      	ldr	r0, [r7, #24]
 800ff6a:	f000 fead 	bl	8010cc8 <pxPortInitialiseStack>
 800ff6e:	4602      	mov	r2, r0
 800ff70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ff74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d002      	beq.n	800ff80 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ff7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ff80:	bf00      	nop
 800ff82:	3720      	adds	r7, #32
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd80      	pop	{r7, pc}
 800ff88:	0801534c 	.word	0x0801534c
 800ff8c:	0801536c 	.word	0x0801536c
 800ff90:	0801532c 	.word	0x0801532c

0800ff94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b082      	sub	sp, #8
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ff9c:	f000 ffc2 	bl	8010f24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ffa0:	4b2a      	ldr	r3, [pc, #168]	; (801004c <prvAddNewTaskToReadyList+0xb8>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	3301      	adds	r3, #1
 800ffa6:	4a29      	ldr	r2, [pc, #164]	; (801004c <prvAddNewTaskToReadyList+0xb8>)
 800ffa8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ffaa:	4b29      	ldr	r3, [pc, #164]	; (8010050 <prvAddNewTaskToReadyList+0xbc>)
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d109      	bne.n	800ffc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ffb2:	4a27      	ldr	r2, [pc, #156]	; (8010050 <prvAddNewTaskToReadyList+0xbc>)
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ffb8:	4b24      	ldr	r3, [pc, #144]	; (801004c <prvAddNewTaskToReadyList+0xb8>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	2b01      	cmp	r3, #1
 800ffbe:	d110      	bne.n	800ffe2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ffc0:	f000 fbbc 	bl	801073c <prvInitialiseTaskLists>
 800ffc4:	e00d      	b.n	800ffe2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ffc6:	4b23      	ldr	r3, [pc, #140]	; (8010054 <prvAddNewTaskToReadyList+0xc0>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d109      	bne.n	800ffe2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ffce:	4b20      	ldr	r3, [pc, #128]	; (8010050 <prvAddNewTaskToReadyList+0xbc>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d802      	bhi.n	800ffe2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ffdc:	4a1c      	ldr	r2, [pc, #112]	; (8010050 <prvAddNewTaskToReadyList+0xbc>)
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ffe2:	4b1d      	ldr	r3, [pc, #116]	; (8010058 <prvAddNewTaskToReadyList+0xc4>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	3301      	adds	r3, #1
 800ffe8:	4a1b      	ldr	r2, [pc, #108]	; (8010058 <prvAddNewTaskToReadyList+0xc4>)
 800ffea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fff0:	2201      	movs	r2, #1
 800fff2:	409a      	lsls	r2, r3
 800fff4:	4b19      	ldr	r3, [pc, #100]	; (801005c <prvAddNewTaskToReadyList+0xc8>)
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	4313      	orrs	r3, r2
 800fffa:	4a18      	ldr	r2, [pc, #96]	; (801005c <prvAddNewTaskToReadyList+0xc8>)
 800fffc:	6013      	str	r3, [r2, #0]
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010002:	4613      	mov	r3, r2
 8010004:	009b      	lsls	r3, r3, #2
 8010006:	4413      	add	r3, r2
 8010008:	009b      	lsls	r3, r3, #2
 801000a:	4a15      	ldr	r2, [pc, #84]	; (8010060 <prvAddNewTaskToReadyList+0xcc>)
 801000c:	441a      	add	r2, r3
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	3304      	adds	r3, #4
 8010012:	4619      	mov	r1, r3
 8010014:	4610      	mov	r0, r2
 8010016:	f7ff f953 	bl	800f2c0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801001a:	f000 ffb3 	bl	8010f84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801001e:	4b0d      	ldr	r3, [pc, #52]	; (8010054 <prvAddNewTaskToReadyList+0xc0>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d00e      	beq.n	8010044 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010026:	4b0a      	ldr	r3, [pc, #40]	; (8010050 <prvAddNewTaskToReadyList+0xbc>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010030:	429a      	cmp	r2, r3
 8010032:	d207      	bcs.n	8010044 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010034:	4b0b      	ldr	r3, [pc, #44]	; (8010064 <prvAddNewTaskToReadyList+0xd0>)
 8010036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801003a:	601a      	str	r2, [r3, #0]
 801003c:	f3bf 8f4f 	dsb	sy
 8010040:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010044:	bf00      	nop
 8010046:	3708      	adds	r7, #8
 8010048:	46bd      	mov	sp, r7
 801004a:	bd80      	pop	{r7, pc}
 801004c:	20000a64 	.word	0x20000a64
 8010050:	20000964 	.word	0x20000964
 8010054:	20000a70 	.word	0x20000a70
 8010058:	20000a80 	.word	0x20000a80
 801005c:	20000a6c 	.word	0x20000a6c
 8010060:	20000968 	.word	0x20000968
 8010064:	e000ed04 	.word	0xe000ed04

08010068 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010068:	b580      	push	{r7, lr}
 801006a:	b084      	sub	sp, #16
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010070:	2300      	movs	r3, #0
 8010072:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d017      	beq.n	80100aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801007a:	4b13      	ldr	r3, [pc, #76]	; (80100c8 <vTaskDelay+0x60>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d00a      	beq.n	8010098 <vTaskDelay+0x30>
	__asm volatile
 8010082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010086:	f383 8811 	msr	BASEPRI, r3
 801008a:	f3bf 8f6f 	isb	sy
 801008e:	f3bf 8f4f 	dsb	sy
 8010092:	60bb      	str	r3, [r7, #8]
}
 8010094:	bf00      	nop
 8010096:	e7fe      	b.n	8010096 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010098:	f000 f86a 	bl	8010170 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801009c:	2100      	movs	r1, #0
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f000 fdac 	bl	8010bfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80100a4:	f000 f872 	bl	801018c <xTaskResumeAll>
 80100a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d107      	bne.n	80100c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80100b0:	4b06      	ldr	r3, [pc, #24]	; (80100cc <vTaskDelay+0x64>)
 80100b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100b6:	601a      	str	r2, [r3, #0]
 80100b8:	f3bf 8f4f 	dsb	sy
 80100bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80100c0:	bf00      	nop
 80100c2:	3710      	adds	r7, #16
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}
 80100c8:	20000a8c 	.word	0x20000a8c
 80100cc:	e000ed04 	.word	0xe000ed04

080100d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b086      	sub	sp, #24
 80100d4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80100d6:	4b1e      	ldr	r3, [pc, #120]	; (8010150 <vTaskStartScheduler+0x80>)
 80100d8:	9301      	str	r3, [sp, #4]
 80100da:	2300      	movs	r3, #0
 80100dc:	9300      	str	r3, [sp, #0]
 80100de:	2300      	movs	r3, #0
 80100e0:	2280      	movs	r2, #128	; 0x80
 80100e2:	491c      	ldr	r1, [pc, #112]	; (8010154 <vTaskStartScheduler+0x84>)
 80100e4:	481c      	ldr	r0, [pc, #112]	; (8010158 <vTaskStartScheduler+0x88>)
 80100e6:	f7ff fe75 	bl	800fdd4 <xTaskCreate>
 80100ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	2b01      	cmp	r3, #1
 80100f0:	d11b      	bne.n	801012a <vTaskStartScheduler+0x5a>
	__asm volatile
 80100f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100f6:	f383 8811 	msr	BASEPRI, r3
 80100fa:	f3bf 8f6f 	isb	sy
 80100fe:	f3bf 8f4f 	dsb	sy
 8010102:	60bb      	str	r3, [r7, #8]
}
 8010104:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010106:	4b15      	ldr	r3, [pc, #84]	; (801015c <vTaskStartScheduler+0x8c>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	334c      	adds	r3, #76	; 0x4c
 801010c:	4a14      	ldr	r2, [pc, #80]	; (8010160 <vTaskStartScheduler+0x90>)
 801010e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010110:	4b14      	ldr	r3, [pc, #80]	; (8010164 <vTaskStartScheduler+0x94>)
 8010112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010116:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010118:	4b13      	ldr	r3, [pc, #76]	; (8010168 <vTaskStartScheduler+0x98>)
 801011a:	2201      	movs	r2, #1
 801011c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801011e:	4b13      	ldr	r3, [pc, #76]	; (801016c <vTaskStartScheduler+0x9c>)
 8010120:	2200      	movs	r2, #0
 8010122:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010124:	f000 fe5c 	bl	8010de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010128:	e00e      	b.n	8010148 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010130:	d10a      	bne.n	8010148 <vTaskStartScheduler+0x78>
	__asm volatile
 8010132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010136:	f383 8811 	msr	BASEPRI, r3
 801013a:	f3bf 8f6f 	isb	sy
 801013e:	f3bf 8f4f 	dsb	sy
 8010142:	607b      	str	r3, [r7, #4]
}
 8010144:	bf00      	nop
 8010146:	e7fe      	b.n	8010146 <vTaskStartScheduler+0x76>
}
 8010148:	bf00      	nop
 801014a:	3710      	adds	r7, #16
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}
 8010150:	20000a88 	.word	0x20000a88
 8010154:	08015298 	.word	0x08015298
 8010158:	0801070d 	.word	0x0801070d
 801015c:	20000964 	.word	0x20000964
 8010160:	20000188 	.word	0x20000188
 8010164:	20000a84 	.word	0x20000a84
 8010168:	20000a70 	.word	0x20000a70
 801016c:	20000a68 	.word	0x20000a68

08010170 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010170:	b480      	push	{r7}
 8010172:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010174:	4b04      	ldr	r3, [pc, #16]	; (8010188 <vTaskSuspendAll+0x18>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	3301      	adds	r3, #1
 801017a:	4a03      	ldr	r2, [pc, #12]	; (8010188 <vTaskSuspendAll+0x18>)
 801017c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801017e:	bf00      	nop
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr
 8010188:	20000a8c 	.word	0x20000a8c

0801018c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b084      	sub	sp, #16
 8010190:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010192:	2300      	movs	r3, #0
 8010194:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010196:	2300      	movs	r3, #0
 8010198:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801019a:	4b41      	ldr	r3, [pc, #260]	; (80102a0 <xTaskResumeAll+0x114>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d10a      	bne.n	80101b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80101a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a6:	f383 8811 	msr	BASEPRI, r3
 80101aa:	f3bf 8f6f 	isb	sy
 80101ae:	f3bf 8f4f 	dsb	sy
 80101b2:	603b      	str	r3, [r7, #0]
}
 80101b4:	bf00      	nop
 80101b6:	e7fe      	b.n	80101b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80101b8:	f000 feb4 	bl	8010f24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80101bc:	4b38      	ldr	r3, [pc, #224]	; (80102a0 <xTaskResumeAll+0x114>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	3b01      	subs	r3, #1
 80101c2:	4a37      	ldr	r2, [pc, #220]	; (80102a0 <xTaskResumeAll+0x114>)
 80101c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80101c6:	4b36      	ldr	r3, [pc, #216]	; (80102a0 <xTaskResumeAll+0x114>)
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d161      	bne.n	8010292 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80101ce:	4b35      	ldr	r3, [pc, #212]	; (80102a4 <xTaskResumeAll+0x118>)
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d05d      	beq.n	8010292 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80101d6:	e02e      	b.n	8010236 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101d8:	4b33      	ldr	r3, [pc, #204]	; (80102a8 <xTaskResumeAll+0x11c>)
 80101da:	68db      	ldr	r3, [r3, #12]
 80101dc:	68db      	ldr	r3, [r3, #12]
 80101de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	3318      	adds	r3, #24
 80101e4:	4618      	mov	r0, r3
 80101e6:	f7ff f8c8 	bl	800f37a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	3304      	adds	r3, #4
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7ff f8c3 	bl	800f37a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101f8:	2201      	movs	r2, #1
 80101fa:	409a      	lsls	r2, r3
 80101fc:	4b2b      	ldr	r3, [pc, #172]	; (80102ac <xTaskResumeAll+0x120>)
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	4313      	orrs	r3, r2
 8010202:	4a2a      	ldr	r2, [pc, #168]	; (80102ac <xTaskResumeAll+0x120>)
 8010204:	6013      	str	r3, [r2, #0]
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801020a:	4613      	mov	r3, r2
 801020c:	009b      	lsls	r3, r3, #2
 801020e:	4413      	add	r3, r2
 8010210:	009b      	lsls	r3, r3, #2
 8010212:	4a27      	ldr	r2, [pc, #156]	; (80102b0 <xTaskResumeAll+0x124>)
 8010214:	441a      	add	r2, r3
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	3304      	adds	r3, #4
 801021a:	4619      	mov	r1, r3
 801021c:	4610      	mov	r0, r2
 801021e:	f7ff f84f 	bl	800f2c0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010226:	4b23      	ldr	r3, [pc, #140]	; (80102b4 <xTaskResumeAll+0x128>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801022c:	429a      	cmp	r2, r3
 801022e:	d302      	bcc.n	8010236 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8010230:	4b21      	ldr	r3, [pc, #132]	; (80102b8 <xTaskResumeAll+0x12c>)
 8010232:	2201      	movs	r2, #1
 8010234:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010236:	4b1c      	ldr	r3, [pc, #112]	; (80102a8 <xTaskResumeAll+0x11c>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d1cc      	bne.n	80101d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d001      	beq.n	8010248 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010244:	f000 fafe 	bl	8010844 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010248:	4b1c      	ldr	r3, [pc, #112]	; (80102bc <xTaskResumeAll+0x130>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d010      	beq.n	8010276 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010254:	f000 f836 	bl	80102c4 <xTaskIncrementTick>
 8010258:	4603      	mov	r3, r0
 801025a:	2b00      	cmp	r3, #0
 801025c:	d002      	beq.n	8010264 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801025e:	4b16      	ldr	r3, [pc, #88]	; (80102b8 <xTaskResumeAll+0x12c>)
 8010260:	2201      	movs	r2, #1
 8010262:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	3b01      	subs	r3, #1
 8010268:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d1f1      	bne.n	8010254 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8010270:	4b12      	ldr	r3, [pc, #72]	; (80102bc <xTaskResumeAll+0x130>)
 8010272:	2200      	movs	r2, #0
 8010274:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010276:	4b10      	ldr	r3, [pc, #64]	; (80102b8 <xTaskResumeAll+0x12c>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d009      	beq.n	8010292 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801027e:	2301      	movs	r3, #1
 8010280:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010282:	4b0f      	ldr	r3, [pc, #60]	; (80102c0 <xTaskResumeAll+0x134>)
 8010284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010288:	601a      	str	r2, [r3, #0]
 801028a:	f3bf 8f4f 	dsb	sy
 801028e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010292:	f000 fe77 	bl	8010f84 <vPortExitCritical>

	return xAlreadyYielded;
 8010296:	68bb      	ldr	r3, [r7, #8]
}
 8010298:	4618      	mov	r0, r3
 801029a:	3710      	adds	r7, #16
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}
 80102a0:	20000a8c 	.word	0x20000a8c
 80102a4:	20000a64 	.word	0x20000a64
 80102a8:	20000a24 	.word	0x20000a24
 80102ac:	20000a6c 	.word	0x20000a6c
 80102b0:	20000968 	.word	0x20000968
 80102b4:	20000964 	.word	0x20000964
 80102b8:	20000a78 	.word	0x20000a78
 80102bc:	20000a74 	.word	0x20000a74
 80102c0:	e000ed04 	.word	0xe000ed04

080102c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b086      	sub	sp, #24
 80102c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80102ca:	2300      	movs	r3, #0
 80102cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80102ce:	4b4e      	ldr	r3, [pc, #312]	; (8010408 <xTaskIncrementTick+0x144>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	f040 808e 	bne.w	80103f4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80102d8:	4b4c      	ldr	r3, [pc, #304]	; (801040c <xTaskIncrementTick+0x148>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	3301      	adds	r3, #1
 80102de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80102e0:	4a4a      	ldr	r2, [pc, #296]	; (801040c <xTaskIncrementTick+0x148>)
 80102e2:	693b      	ldr	r3, [r7, #16]
 80102e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80102e6:	693b      	ldr	r3, [r7, #16]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d120      	bne.n	801032e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80102ec:	4b48      	ldr	r3, [pc, #288]	; (8010410 <xTaskIncrementTick+0x14c>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d00a      	beq.n	801030c <xTaskIncrementTick+0x48>
	__asm volatile
 80102f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102fa:	f383 8811 	msr	BASEPRI, r3
 80102fe:	f3bf 8f6f 	isb	sy
 8010302:	f3bf 8f4f 	dsb	sy
 8010306:	603b      	str	r3, [r7, #0]
}
 8010308:	bf00      	nop
 801030a:	e7fe      	b.n	801030a <xTaskIncrementTick+0x46>
 801030c:	4b40      	ldr	r3, [pc, #256]	; (8010410 <xTaskIncrementTick+0x14c>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	60fb      	str	r3, [r7, #12]
 8010312:	4b40      	ldr	r3, [pc, #256]	; (8010414 <xTaskIncrementTick+0x150>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	4a3e      	ldr	r2, [pc, #248]	; (8010410 <xTaskIncrementTick+0x14c>)
 8010318:	6013      	str	r3, [r2, #0]
 801031a:	4a3e      	ldr	r2, [pc, #248]	; (8010414 <xTaskIncrementTick+0x150>)
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	6013      	str	r3, [r2, #0]
 8010320:	4b3d      	ldr	r3, [pc, #244]	; (8010418 <xTaskIncrementTick+0x154>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	3301      	adds	r3, #1
 8010326:	4a3c      	ldr	r2, [pc, #240]	; (8010418 <xTaskIncrementTick+0x154>)
 8010328:	6013      	str	r3, [r2, #0]
 801032a:	f000 fa8b 	bl	8010844 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801032e:	4b3b      	ldr	r3, [pc, #236]	; (801041c <xTaskIncrementTick+0x158>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	693a      	ldr	r2, [r7, #16]
 8010334:	429a      	cmp	r2, r3
 8010336:	d348      	bcc.n	80103ca <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010338:	4b35      	ldr	r3, [pc, #212]	; (8010410 <xTaskIncrementTick+0x14c>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d104      	bne.n	801034c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010342:	4b36      	ldr	r3, [pc, #216]	; (801041c <xTaskIncrementTick+0x158>)
 8010344:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010348:	601a      	str	r2, [r3, #0]
					break;
 801034a:	e03e      	b.n	80103ca <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801034c:	4b30      	ldr	r3, [pc, #192]	; (8010410 <xTaskIncrementTick+0x14c>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	68db      	ldr	r3, [r3, #12]
 8010352:	68db      	ldr	r3, [r3, #12]
 8010354:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	685b      	ldr	r3, [r3, #4]
 801035a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801035c:	693a      	ldr	r2, [r7, #16]
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	429a      	cmp	r2, r3
 8010362:	d203      	bcs.n	801036c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010364:	4a2d      	ldr	r2, [pc, #180]	; (801041c <xTaskIncrementTick+0x158>)
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801036a:	e02e      	b.n	80103ca <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	3304      	adds	r3, #4
 8010370:	4618      	mov	r0, r3
 8010372:	f7ff f802 	bl	800f37a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801037a:	2b00      	cmp	r3, #0
 801037c:	d004      	beq.n	8010388 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	3318      	adds	r3, #24
 8010382:	4618      	mov	r0, r3
 8010384:	f7fe fff9 	bl	800f37a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010388:	68bb      	ldr	r3, [r7, #8]
 801038a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801038c:	2201      	movs	r2, #1
 801038e:	409a      	lsls	r2, r3
 8010390:	4b23      	ldr	r3, [pc, #140]	; (8010420 <xTaskIncrementTick+0x15c>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	4313      	orrs	r3, r2
 8010396:	4a22      	ldr	r2, [pc, #136]	; (8010420 <xTaskIncrementTick+0x15c>)
 8010398:	6013      	str	r3, [r2, #0]
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801039e:	4613      	mov	r3, r2
 80103a0:	009b      	lsls	r3, r3, #2
 80103a2:	4413      	add	r3, r2
 80103a4:	009b      	lsls	r3, r3, #2
 80103a6:	4a1f      	ldr	r2, [pc, #124]	; (8010424 <xTaskIncrementTick+0x160>)
 80103a8:	441a      	add	r2, r3
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	3304      	adds	r3, #4
 80103ae:	4619      	mov	r1, r3
 80103b0:	4610      	mov	r0, r2
 80103b2:	f7fe ff85 	bl	800f2c0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103ba:	4b1b      	ldr	r3, [pc, #108]	; (8010428 <xTaskIncrementTick+0x164>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d3b9      	bcc.n	8010338 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80103c4:	2301      	movs	r3, #1
 80103c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80103c8:	e7b6      	b.n	8010338 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80103ca:	4b17      	ldr	r3, [pc, #92]	; (8010428 <xTaskIncrementTick+0x164>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103d0:	4914      	ldr	r1, [pc, #80]	; (8010424 <xTaskIncrementTick+0x160>)
 80103d2:	4613      	mov	r3, r2
 80103d4:	009b      	lsls	r3, r3, #2
 80103d6:	4413      	add	r3, r2
 80103d8:	009b      	lsls	r3, r3, #2
 80103da:	440b      	add	r3, r1
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	2b01      	cmp	r3, #1
 80103e0:	d901      	bls.n	80103e6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80103e2:	2301      	movs	r3, #1
 80103e4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80103e6:	4b11      	ldr	r3, [pc, #68]	; (801042c <xTaskIncrementTick+0x168>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d007      	beq.n	80103fe <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80103ee:	2301      	movs	r3, #1
 80103f0:	617b      	str	r3, [r7, #20]
 80103f2:	e004      	b.n	80103fe <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80103f4:	4b0e      	ldr	r3, [pc, #56]	; (8010430 <xTaskIncrementTick+0x16c>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	3301      	adds	r3, #1
 80103fa:	4a0d      	ldr	r2, [pc, #52]	; (8010430 <xTaskIncrementTick+0x16c>)
 80103fc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80103fe:	697b      	ldr	r3, [r7, #20]
}
 8010400:	4618      	mov	r0, r3
 8010402:	3718      	adds	r7, #24
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}
 8010408:	20000a8c 	.word	0x20000a8c
 801040c:	20000a68 	.word	0x20000a68
 8010410:	20000a1c 	.word	0x20000a1c
 8010414:	20000a20 	.word	0x20000a20
 8010418:	20000a7c 	.word	0x20000a7c
 801041c:	20000a84 	.word	0x20000a84
 8010420:	20000a6c 	.word	0x20000a6c
 8010424:	20000968 	.word	0x20000968
 8010428:	20000964 	.word	0x20000964
 801042c:	20000a78 	.word	0x20000a78
 8010430:	20000a74 	.word	0x20000a74

08010434 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010434:	b480      	push	{r7}
 8010436:	b087      	sub	sp, #28
 8010438:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801043a:	4b29      	ldr	r3, [pc, #164]	; (80104e0 <vTaskSwitchContext+0xac>)
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d003      	beq.n	801044a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010442:	4b28      	ldr	r3, [pc, #160]	; (80104e4 <vTaskSwitchContext+0xb0>)
 8010444:	2201      	movs	r2, #1
 8010446:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010448:	e044      	b.n	80104d4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 801044a:	4b26      	ldr	r3, [pc, #152]	; (80104e4 <vTaskSwitchContext+0xb0>)
 801044c:	2200      	movs	r2, #0
 801044e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010450:	4b25      	ldr	r3, [pc, #148]	; (80104e8 <vTaskSwitchContext+0xb4>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	fab3 f383 	clz	r3, r3
 801045c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801045e:	7afb      	ldrb	r3, [r7, #11]
 8010460:	f1c3 031f 	rsb	r3, r3, #31
 8010464:	617b      	str	r3, [r7, #20]
 8010466:	4921      	ldr	r1, [pc, #132]	; (80104ec <vTaskSwitchContext+0xb8>)
 8010468:	697a      	ldr	r2, [r7, #20]
 801046a:	4613      	mov	r3, r2
 801046c:	009b      	lsls	r3, r3, #2
 801046e:	4413      	add	r3, r2
 8010470:	009b      	lsls	r3, r3, #2
 8010472:	440b      	add	r3, r1
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d10a      	bne.n	8010490 <vTaskSwitchContext+0x5c>
	__asm volatile
 801047a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801047e:	f383 8811 	msr	BASEPRI, r3
 8010482:	f3bf 8f6f 	isb	sy
 8010486:	f3bf 8f4f 	dsb	sy
 801048a:	607b      	str	r3, [r7, #4]
}
 801048c:	bf00      	nop
 801048e:	e7fe      	b.n	801048e <vTaskSwitchContext+0x5a>
 8010490:	697a      	ldr	r2, [r7, #20]
 8010492:	4613      	mov	r3, r2
 8010494:	009b      	lsls	r3, r3, #2
 8010496:	4413      	add	r3, r2
 8010498:	009b      	lsls	r3, r3, #2
 801049a:	4a14      	ldr	r2, [pc, #80]	; (80104ec <vTaskSwitchContext+0xb8>)
 801049c:	4413      	add	r3, r2
 801049e:	613b      	str	r3, [r7, #16]
 80104a0:	693b      	ldr	r3, [r7, #16]
 80104a2:	685b      	ldr	r3, [r3, #4]
 80104a4:	685a      	ldr	r2, [r3, #4]
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	605a      	str	r2, [r3, #4]
 80104aa:	693b      	ldr	r3, [r7, #16]
 80104ac:	685a      	ldr	r2, [r3, #4]
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	3308      	adds	r3, #8
 80104b2:	429a      	cmp	r2, r3
 80104b4:	d104      	bne.n	80104c0 <vTaskSwitchContext+0x8c>
 80104b6:	693b      	ldr	r3, [r7, #16]
 80104b8:	685b      	ldr	r3, [r3, #4]
 80104ba:	685a      	ldr	r2, [r3, #4]
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	605a      	str	r2, [r3, #4]
 80104c0:	693b      	ldr	r3, [r7, #16]
 80104c2:	685b      	ldr	r3, [r3, #4]
 80104c4:	68db      	ldr	r3, [r3, #12]
 80104c6:	4a0a      	ldr	r2, [pc, #40]	; (80104f0 <vTaskSwitchContext+0xbc>)
 80104c8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80104ca:	4b09      	ldr	r3, [pc, #36]	; (80104f0 <vTaskSwitchContext+0xbc>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	334c      	adds	r3, #76	; 0x4c
 80104d0:	4a08      	ldr	r2, [pc, #32]	; (80104f4 <vTaskSwitchContext+0xc0>)
 80104d2:	6013      	str	r3, [r2, #0]
}
 80104d4:	bf00      	nop
 80104d6:	371c      	adds	r7, #28
 80104d8:	46bd      	mov	sp, r7
 80104da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104de:	4770      	bx	lr
 80104e0:	20000a8c 	.word	0x20000a8c
 80104e4:	20000a78 	.word	0x20000a78
 80104e8:	20000a6c 	.word	0x20000a6c
 80104ec:	20000968 	.word	0x20000968
 80104f0:	20000964 	.word	0x20000964
 80104f4:	20000188 	.word	0x20000188

080104f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b084      	sub	sp, #16
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
 8010500:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d10a      	bne.n	801051e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801050c:	f383 8811 	msr	BASEPRI, r3
 8010510:	f3bf 8f6f 	isb	sy
 8010514:	f3bf 8f4f 	dsb	sy
 8010518:	60fb      	str	r3, [r7, #12]
}
 801051a:	bf00      	nop
 801051c:	e7fe      	b.n	801051c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801051e:	4b07      	ldr	r3, [pc, #28]	; (801053c <vTaskPlaceOnEventList+0x44>)
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	3318      	adds	r3, #24
 8010524:	4619      	mov	r1, r3
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f7fe feee 	bl	800f308 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801052c:	2101      	movs	r1, #1
 801052e:	6838      	ldr	r0, [r7, #0]
 8010530:	f000 fb64 	bl	8010bfc <prvAddCurrentTaskToDelayedList>
}
 8010534:	bf00      	nop
 8010536:	3710      	adds	r7, #16
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}
 801053c:	20000964 	.word	0x20000964

08010540 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b086      	sub	sp, #24
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	68db      	ldr	r3, [r3, #12]
 801054c:	68db      	ldr	r3, [r3, #12]
 801054e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010550:	693b      	ldr	r3, [r7, #16]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d10a      	bne.n	801056c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010556:	f04f 0350 	mov.w	r3, #80	; 0x50
 801055a:	f383 8811 	msr	BASEPRI, r3
 801055e:	f3bf 8f6f 	isb	sy
 8010562:	f3bf 8f4f 	dsb	sy
 8010566:	60fb      	str	r3, [r7, #12]
}
 8010568:	bf00      	nop
 801056a:	e7fe      	b.n	801056a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801056c:	693b      	ldr	r3, [r7, #16]
 801056e:	3318      	adds	r3, #24
 8010570:	4618      	mov	r0, r3
 8010572:	f7fe ff02 	bl	800f37a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010576:	4b1d      	ldr	r3, [pc, #116]	; (80105ec <xTaskRemoveFromEventList+0xac>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d11c      	bne.n	80105b8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801057e:	693b      	ldr	r3, [r7, #16]
 8010580:	3304      	adds	r3, #4
 8010582:	4618      	mov	r0, r3
 8010584:	f7fe fef9 	bl	800f37a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010588:	693b      	ldr	r3, [r7, #16]
 801058a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801058c:	2201      	movs	r2, #1
 801058e:	409a      	lsls	r2, r3
 8010590:	4b17      	ldr	r3, [pc, #92]	; (80105f0 <xTaskRemoveFromEventList+0xb0>)
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	4313      	orrs	r3, r2
 8010596:	4a16      	ldr	r2, [pc, #88]	; (80105f0 <xTaskRemoveFromEventList+0xb0>)
 8010598:	6013      	str	r3, [r2, #0]
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801059e:	4613      	mov	r3, r2
 80105a0:	009b      	lsls	r3, r3, #2
 80105a2:	4413      	add	r3, r2
 80105a4:	009b      	lsls	r3, r3, #2
 80105a6:	4a13      	ldr	r2, [pc, #76]	; (80105f4 <xTaskRemoveFromEventList+0xb4>)
 80105a8:	441a      	add	r2, r3
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	3304      	adds	r3, #4
 80105ae:	4619      	mov	r1, r3
 80105b0:	4610      	mov	r0, r2
 80105b2:	f7fe fe85 	bl	800f2c0 <vListInsertEnd>
 80105b6:	e005      	b.n	80105c4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80105b8:	693b      	ldr	r3, [r7, #16]
 80105ba:	3318      	adds	r3, #24
 80105bc:	4619      	mov	r1, r3
 80105be:	480e      	ldr	r0, [pc, #56]	; (80105f8 <xTaskRemoveFromEventList+0xb8>)
 80105c0:	f7fe fe7e 	bl	800f2c0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80105c4:	693b      	ldr	r3, [r7, #16]
 80105c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105c8:	4b0c      	ldr	r3, [pc, #48]	; (80105fc <xTaskRemoveFromEventList+0xbc>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105ce:	429a      	cmp	r2, r3
 80105d0:	d905      	bls.n	80105de <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80105d2:	2301      	movs	r3, #1
 80105d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80105d6:	4b0a      	ldr	r3, [pc, #40]	; (8010600 <xTaskRemoveFromEventList+0xc0>)
 80105d8:	2201      	movs	r2, #1
 80105da:	601a      	str	r2, [r3, #0]
 80105dc:	e001      	b.n	80105e2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80105de:	2300      	movs	r3, #0
 80105e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80105e2:	697b      	ldr	r3, [r7, #20]
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	3718      	adds	r7, #24
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}
 80105ec:	20000a8c 	.word	0x20000a8c
 80105f0:	20000a6c 	.word	0x20000a6c
 80105f4:	20000968 	.word	0x20000968
 80105f8:	20000a24 	.word	0x20000a24
 80105fc:	20000964 	.word	0x20000964
 8010600:	20000a78 	.word	0x20000a78

08010604 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010604:	b480      	push	{r7}
 8010606:	b083      	sub	sp, #12
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801060c:	4b06      	ldr	r3, [pc, #24]	; (8010628 <vTaskInternalSetTimeOutState+0x24>)
 801060e:	681a      	ldr	r2, [r3, #0]
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010614:	4b05      	ldr	r3, [pc, #20]	; (801062c <vTaskInternalSetTimeOutState+0x28>)
 8010616:	681a      	ldr	r2, [r3, #0]
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	605a      	str	r2, [r3, #4]
}
 801061c:	bf00      	nop
 801061e:	370c      	adds	r7, #12
 8010620:	46bd      	mov	sp, r7
 8010622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010626:	4770      	bx	lr
 8010628:	20000a7c 	.word	0x20000a7c
 801062c:	20000a68 	.word	0x20000a68

08010630 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b088      	sub	sp, #32
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
 8010638:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d10a      	bne.n	8010656 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010644:	f383 8811 	msr	BASEPRI, r3
 8010648:	f3bf 8f6f 	isb	sy
 801064c:	f3bf 8f4f 	dsb	sy
 8010650:	613b      	str	r3, [r7, #16]
}
 8010652:	bf00      	nop
 8010654:	e7fe      	b.n	8010654 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d10a      	bne.n	8010672 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801065c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010660:	f383 8811 	msr	BASEPRI, r3
 8010664:	f3bf 8f6f 	isb	sy
 8010668:	f3bf 8f4f 	dsb	sy
 801066c:	60fb      	str	r3, [r7, #12]
}
 801066e:	bf00      	nop
 8010670:	e7fe      	b.n	8010670 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010672:	f000 fc57 	bl	8010f24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010676:	4b1d      	ldr	r3, [pc, #116]	; (80106ec <xTaskCheckForTimeOut+0xbc>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	685b      	ldr	r3, [r3, #4]
 8010680:	69ba      	ldr	r2, [r7, #24]
 8010682:	1ad3      	subs	r3, r2, r3
 8010684:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010686:	683b      	ldr	r3, [r7, #0]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801068e:	d102      	bne.n	8010696 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010690:	2300      	movs	r3, #0
 8010692:	61fb      	str	r3, [r7, #28]
 8010694:	e023      	b.n	80106de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681a      	ldr	r2, [r3, #0]
 801069a:	4b15      	ldr	r3, [pc, #84]	; (80106f0 <xTaskCheckForTimeOut+0xc0>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	429a      	cmp	r2, r3
 80106a0:	d007      	beq.n	80106b2 <xTaskCheckForTimeOut+0x82>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	685b      	ldr	r3, [r3, #4]
 80106a6:	69ba      	ldr	r2, [r7, #24]
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d302      	bcc.n	80106b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80106ac:	2301      	movs	r3, #1
 80106ae:	61fb      	str	r3, [r7, #28]
 80106b0:	e015      	b.n	80106de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	697a      	ldr	r2, [r7, #20]
 80106b8:	429a      	cmp	r2, r3
 80106ba:	d20b      	bcs.n	80106d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80106bc:	683b      	ldr	r3, [r7, #0]
 80106be:	681a      	ldr	r2, [r3, #0]
 80106c0:	697b      	ldr	r3, [r7, #20]
 80106c2:	1ad2      	subs	r2, r2, r3
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f7ff ff9b 	bl	8010604 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80106ce:	2300      	movs	r3, #0
 80106d0:	61fb      	str	r3, [r7, #28]
 80106d2:	e004      	b.n	80106de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	2200      	movs	r2, #0
 80106d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80106da:	2301      	movs	r3, #1
 80106dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80106de:	f000 fc51 	bl	8010f84 <vPortExitCritical>

	return xReturn;
 80106e2:	69fb      	ldr	r3, [r7, #28]
}
 80106e4:	4618      	mov	r0, r3
 80106e6:	3720      	adds	r7, #32
 80106e8:	46bd      	mov	sp, r7
 80106ea:	bd80      	pop	{r7, pc}
 80106ec:	20000a68 	.word	0x20000a68
 80106f0:	20000a7c 	.word	0x20000a7c

080106f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80106f4:	b480      	push	{r7}
 80106f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80106f8:	4b03      	ldr	r3, [pc, #12]	; (8010708 <vTaskMissedYield+0x14>)
 80106fa:	2201      	movs	r2, #1
 80106fc:	601a      	str	r2, [r3, #0]
}
 80106fe:	bf00      	nop
 8010700:	46bd      	mov	sp, r7
 8010702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010706:	4770      	bx	lr
 8010708:	20000a78 	.word	0x20000a78

0801070c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b082      	sub	sp, #8
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010714:	f000 f852 	bl	80107bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010718:	4b06      	ldr	r3, [pc, #24]	; (8010734 <prvIdleTask+0x28>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	2b01      	cmp	r3, #1
 801071e:	d9f9      	bls.n	8010714 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010720:	4b05      	ldr	r3, [pc, #20]	; (8010738 <prvIdleTask+0x2c>)
 8010722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010726:	601a      	str	r2, [r3, #0]
 8010728:	f3bf 8f4f 	dsb	sy
 801072c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010730:	e7f0      	b.n	8010714 <prvIdleTask+0x8>
 8010732:	bf00      	nop
 8010734:	20000968 	.word	0x20000968
 8010738:	e000ed04 	.word	0xe000ed04

0801073c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b082      	sub	sp, #8
 8010740:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010742:	2300      	movs	r3, #0
 8010744:	607b      	str	r3, [r7, #4]
 8010746:	e00c      	b.n	8010762 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010748:	687a      	ldr	r2, [r7, #4]
 801074a:	4613      	mov	r3, r2
 801074c:	009b      	lsls	r3, r3, #2
 801074e:	4413      	add	r3, r2
 8010750:	009b      	lsls	r3, r3, #2
 8010752:	4a12      	ldr	r2, [pc, #72]	; (801079c <prvInitialiseTaskLists+0x60>)
 8010754:	4413      	add	r3, r2
 8010756:	4618      	mov	r0, r3
 8010758:	f7fe fd85 	bl	800f266 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	3301      	adds	r3, #1
 8010760:	607b      	str	r3, [r7, #4]
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2b06      	cmp	r3, #6
 8010766:	d9ef      	bls.n	8010748 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010768:	480d      	ldr	r0, [pc, #52]	; (80107a0 <prvInitialiseTaskLists+0x64>)
 801076a:	f7fe fd7c 	bl	800f266 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801076e:	480d      	ldr	r0, [pc, #52]	; (80107a4 <prvInitialiseTaskLists+0x68>)
 8010770:	f7fe fd79 	bl	800f266 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010774:	480c      	ldr	r0, [pc, #48]	; (80107a8 <prvInitialiseTaskLists+0x6c>)
 8010776:	f7fe fd76 	bl	800f266 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801077a:	480c      	ldr	r0, [pc, #48]	; (80107ac <prvInitialiseTaskLists+0x70>)
 801077c:	f7fe fd73 	bl	800f266 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010780:	480b      	ldr	r0, [pc, #44]	; (80107b0 <prvInitialiseTaskLists+0x74>)
 8010782:	f7fe fd70 	bl	800f266 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010786:	4b0b      	ldr	r3, [pc, #44]	; (80107b4 <prvInitialiseTaskLists+0x78>)
 8010788:	4a05      	ldr	r2, [pc, #20]	; (80107a0 <prvInitialiseTaskLists+0x64>)
 801078a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801078c:	4b0a      	ldr	r3, [pc, #40]	; (80107b8 <prvInitialiseTaskLists+0x7c>)
 801078e:	4a05      	ldr	r2, [pc, #20]	; (80107a4 <prvInitialiseTaskLists+0x68>)
 8010790:	601a      	str	r2, [r3, #0]
}
 8010792:	bf00      	nop
 8010794:	3708      	adds	r7, #8
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}
 801079a:	bf00      	nop
 801079c:	20000968 	.word	0x20000968
 80107a0:	200009f4 	.word	0x200009f4
 80107a4:	20000a08 	.word	0x20000a08
 80107a8:	20000a24 	.word	0x20000a24
 80107ac:	20000a38 	.word	0x20000a38
 80107b0:	20000a50 	.word	0x20000a50
 80107b4:	20000a1c 	.word	0x20000a1c
 80107b8:	20000a20 	.word	0x20000a20

080107bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b082      	sub	sp, #8
 80107c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80107c2:	e019      	b.n	80107f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80107c4:	f000 fbae 	bl	8010f24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107c8:	4b10      	ldr	r3, [pc, #64]	; (801080c <prvCheckTasksWaitingTermination+0x50>)
 80107ca:	68db      	ldr	r3, [r3, #12]
 80107cc:	68db      	ldr	r3, [r3, #12]
 80107ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	3304      	adds	r3, #4
 80107d4:	4618      	mov	r0, r3
 80107d6:	f7fe fdd0 	bl	800f37a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80107da:	4b0d      	ldr	r3, [pc, #52]	; (8010810 <prvCheckTasksWaitingTermination+0x54>)
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	3b01      	subs	r3, #1
 80107e0:	4a0b      	ldr	r2, [pc, #44]	; (8010810 <prvCheckTasksWaitingTermination+0x54>)
 80107e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80107e4:	4b0b      	ldr	r3, [pc, #44]	; (8010814 <prvCheckTasksWaitingTermination+0x58>)
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	3b01      	subs	r3, #1
 80107ea:	4a0a      	ldr	r2, [pc, #40]	; (8010814 <prvCheckTasksWaitingTermination+0x58>)
 80107ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80107ee:	f000 fbc9 	bl	8010f84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80107f2:	6878      	ldr	r0, [r7, #4]
 80107f4:	f000 f810 	bl	8010818 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80107f8:	4b06      	ldr	r3, [pc, #24]	; (8010814 <prvCheckTasksWaitingTermination+0x58>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d1e1      	bne.n	80107c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010800:	bf00      	nop
 8010802:	bf00      	nop
 8010804:	3708      	adds	r7, #8
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}
 801080a:	bf00      	nop
 801080c:	20000a38 	.word	0x20000a38
 8010810:	20000a64 	.word	0x20000a64
 8010814:	20000a4c 	.word	0x20000a4c

08010818 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010818:	b580      	push	{r7, lr}
 801081a:	b082      	sub	sp, #8
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	334c      	adds	r3, #76	; 0x4c
 8010824:	4618      	mov	r0, r3
 8010826:	f002 fa03 	bl	8012c30 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801082e:	4618      	mov	r0, r3
 8010830:	f000 fd26 	bl	8011280 <vPortFree>
			vPortFree( pxTCB );
 8010834:	6878      	ldr	r0, [r7, #4]
 8010836:	f000 fd23 	bl	8011280 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801083a:	bf00      	nop
 801083c:	3708      	adds	r7, #8
 801083e:	46bd      	mov	sp, r7
 8010840:	bd80      	pop	{r7, pc}
	...

08010844 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010844:	b480      	push	{r7}
 8010846:	b083      	sub	sp, #12
 8010848:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801084a:	4b0c      	ldr	r3, [pc, #48]	; (801087c <prvResetNextTaskUnblockTime+0x38>)
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d104      	bne.n	801085e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010854:	4b0a      	ldr	r3, [pc, #40]	; (8010880 <prvResetNextTaskUnblockTime+0x3c>)
 8010856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801085a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801085c:	e008      	b.n	8010870 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801085e:	4b07      	ldr	r3, [pc, #28]	; (801087c <prvResetNextTaskUnblockTime+0x38>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	68db      	ldr	r3, [r3, #12]
 8010864:	68db      	ldr	r3, [r3, #12]
 8010866:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	685b      	ldr	r3, [r3, #4]
 801086c:	4a04      	ldr	r2, [pc, #16]	; (8010880 <prvResetNextTaskUnblockTime+0x3c>)
 801086e:	6013      	str	r3, [r2, #0]
}
 8010870:	bf00      	nop
 8010872:	370c      	adds	r7, #12
 8010874:	46bd      	mov	sp, r7
 8010876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087a:	4770      	bx	lr
 801087c:	20000a1c 	.word	0x20000a1c
 8010880:	20000a84 	.word	0x20000a84

08010884 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010884:	b480      	push	{r7}
 8010886:	b083      	sub	sp, #12
 8010888:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801088a:	4b0b      	ldr	r3, [pc, #44]	; (80108b8 <xTaskGetSchedulerState+0x34>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d102      	bne.n	8010898 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010892:	2301      	movs	r3, #1
 8010894:	607b      	str	r3, [r7, #4]
 8010896:	e008      	b.n	80108aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010898:	4b08      	ldr	r3, [pc, #32]	; (80108bc <xTaskGetSchedulerState+0x38>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d102      	bne.n	80108a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80108a0:	2302      	movs	r3, #2
 80108a2:	607b      	str	r3, [r7, #4]
 80108a4:	e001      	b.n	80108aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80108a6:	2300      	movs	r3, #0
 80108a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80108aa:	687b      	ldr	r3, [r7, #4]
	}
 80108ac:	4618      	mov	r0, r3
 80108ae:	370c      	adds	r7, #12
 80108b0:	46bd      	mov	sp, r7
 80108b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b6:	4770      	bx	lr
 80108b8:	20000a70 	.word	0x20000a70
 80108bc:	20000a8c 	.word	0x20000a8c

080108c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b084      	sub	sp, #16
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80108cc:	2300      	movs	r3, #0
 80108ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d05e      	beq.n	8010994 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108da:	4b31      	ldr	r3, [pc, #196]	; (80109a0 <xTaskPriorityInherit+0xe0>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108e0:	429a      	cmp	r2, r3
 80108e2:	d24e      	bcs.n	8010982 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	699b      	ldr	r3, [r3, #24]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	db06      	blt.n	80108fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108ec:	4b2c      	ldr	r3, [pc, #176]	; (80109a0 <xTaskPriorityInherit+0xe0>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108f2:	f1c3 0207 	rsb	r2, r3, #7
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	6959      	ldr	r1, [r3, #20]
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010902:	4613      	mov	r3, r2
 8010904:	009b      	lsls	r3, r3, #2
 8010906:	4413      	add	r3, r2
 8010908:	009b      	lsls	r3, r3, #2
 801090a:	4a26      	ldr	r2, [pc, #152]	; (80109a4 <xTaskPriorityInherit+0xe4>)
 801090c:	4413      	add	r3, r2
 801090e:	4299      	cmp	r1, r3
 8010910:	d12f      	bne.n	8010972 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	3304      	adds	r3, #4
 8010916:	4618      	mov	r0, r3
 8010918:	f7fe fd2f 	bl	800f37a <uxListRemove>
 801091c:	4603      	mov	r3, r0
 801091e:	2b00      	cmp	r3, #0
 8010920:	d10a      	bne.n	8010938 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8010922:	68bb      	ldr	r3, [r7, #8]
 8010924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010926:	2201      	movs	r2, #1
 8010928:	fa02 f303 	lsl.w	r3, r2, r3
 801092c:	43da      	mvns	r2, r3
 801092e:	4b1e      	ldr	r3, [pc, #120]	; (80109a8 <xTaskPriorityInherit+0xe8>)
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	4013      	ands	r3, r2
 8010934:	4a1c      	ldr	r2, [pc, #112]	; (80109a8 <xTaskPriorityInherit+0xe8>)
 8010936:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010938:	4b19      	ldr	r3, [pc, #100]	; (80109a0 <xTaskPriorityInherit+0xe0>)
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801093e:	68bb      	ldr	r3, [r7, #8]
 8010940:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010946:	2201      	movs	r2, #1
 8010948:	409a      	lsls	r2, r3
 801094a:	4b17      	ldr	r3, [pc, #92]	; (80109a8 <xTaskPriorityInherit+0xe8>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	4313      	orrs	r3, r2
 8010950:	4a15      	ldr	r2, [pc, #84]	; (80109a8 <xTaskPriorityInherit+0xe8>)
 8010952:	6013      	str	r3, [r2, #0]
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010958:	4613      	mov	r3, r2
 801095a:	009b      	lsls	r3, r3, #2
 801095c:	4413      	add	r3, r2
 801095e:	009b      	lsls	r3, r3, #2
 8010960:	4a10      	ldr	r2, [pc, #64]	; (80109a4 <xTaskPriorityInherit+0xe4>)
 8010962:	441a      	add	r2, r3
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	3304      	adds	r3, #4
 8010968:	4619      	mov	r1, r3
 801096a:	4610      	mov	r0, r2
 801096c:	f7fe fca8 	bl	800f2c0 <vListInsertEnd>
 8010970:	e004      	b.n	801097c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010972:	4b0b      	ldr	r3, [pc, #44]	; (80109a0 <xTaskPriorityInherit+0xe0>)
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801097c:	2301      	movs	r3, #1
 801097e:	60fb      	str	r3, [r7, #12]
 8010980:	e008      	b.n	8010994 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010982:	68bb      	ldr	r3, [r7, #8]
 8010984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010986:	4b06      	ldr	r3, [pc, #24]	; (80109a0 <xTaskPriorityInherit+0xe0>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801098c:	429a      	cmp	r2, r3
 801098e:	d201      	bcs.n	8010994 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010990:	2301      	movs	r3, #1
 8010992:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010994:	68fb      	ldr	r3, [r7, #12]
	}
 8010996:	4618      	mov	r0, r3
 8010998:	3710      	adds	r7, #16
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}
 801099e:	bf00      	nop
 80109a0:	20000964 	.word	0x20000964
 80109a4:	20000968 	.word	0x20000968
 80109a8:	20000a6c 	.word	0x20000a6c

080109ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b086      	sub	sp, #24
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80109b8:	2300      	movs	r3, #0
 80109ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d06e      	beq.n	8010aa0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80109c2:	4b3a      	ldr	r3, [pc, #232]	; (8010aac <xTaskPriorityDisinherit+0x100>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	693a      	ldr	r2, [r7, #16]
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d00a      	beq.n	80109e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80109cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109d0:	f383 8811 	msr	BASEPRI, r3
 80109d4:	f3bf 8f6f 	isb	sy
 80109d8:	f3bf 8f4f 	dsb	sy
 80109dc:	60fb      	str	r3, [r7, #12]
}
 80109de:	bf00      	nop
 80109e0:	e7fe      	b.n	80109e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80109e2:	693b      	ldr	r3, [r7, #16]
 80109e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d10a      	bne.n	8010a00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80109ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ee:	f383 8811 	msr	BASEPRI, r3
 80109f2:	f3bf 8f6f 	isb	sy
 80109f6:	f3bf 8f4f 	dsb	sy
 80109fa:	60bb      	str	r3, [r7, #8]
}
 80109fc:	bf00      	nop
 80109fe:	e7fe      	b.n	80109fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010a00:	693b      	ldr	r3, [r7, #16]
 8010a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a04:	1e5a      	subs	r2, r3, #1
 8010a06:	693b      	ldr	r3, [r7, #16]
 8010a08:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010a0a:	693b      	ldr	r3, [r7, #16]
 8010a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a0e:	693b      	ldr	r3, [r7, #16]
 8010a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d044      	beq.n	8010aa0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010a16:	693b      	ldr	r3, [r7, #16]
 8010a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d140      	bne.n	8010aa0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a1e:	693b      	ldr	r3, [r7, #16]
 8010a20:	3304      	adds	r3, #4
 8010a22:	4618      	mov	r0, r3
 8010a24:	f7fe fca9 	bl	800f37a <uxListRemove>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d115      	bne.n	8010a5a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010a2e:	693b      	ldr	r3, [r7, #16]
 8010a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a32:	491f      	ldr	r1, [pc, #124]	; (8010ab0 <xTaskPriorityDisinherit+0x104>)
 8010a34:	4613      	mov	r3, r2
 8010a36:	009b      	lsls	r3, r3, #2
 8010a38:	4413      	add	r3, r2
 8010a3a:	009b      	lsls	r3, r3, #2
 8010a3c:	440b      	add	r3, r1
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d10a      	bne.n	8010a5a <xTaskPriorityDisinherit+0xae>
 8010a44:	693b      	ldr	r3, [r7, #16]
 8010a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a48:	2201      	movs	r2, #1
 8010a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8010a4e:	43da      	mvns	r2, r3
 8010a50:	4b18      	ldr	r3, [pc, #96]	; (8010ab4 <xTaskPriorityDisinherit+0x108>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	4013      	ands	r3, r2
 8010a56:	4a17      	ldr	r2, [pc, #92]	; (8010ab4 <xTaskPriorityDisinherit+0x108>)
 8010a58:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010a5a:	693b      	ldr	r3, [r7, #16]
 8010a5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a5e:	693b      	ldr	r3, [r7, #16]
 8010a60:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a62:	693b      	ldr	r3, [r7, #16]
 8010a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a66:	f1c3 0207 	rsb	r2, r3, #7
 8010a6a:	693b      	ldr	r3, [r7, #16]
 8010a6c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010a6e:	693b      	ldr	r3, [r7, #16]
 8010a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a72:	2201      	movs	r2, #1
 8010a74:	409a      	lsls	r2, r3
 8010a76:	4b0f      	ldr	r3, [pc, #60]	; (8010ab4 <xTaskPriorityDisinherit+0x108>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	4313      	orrs	r3, r2
 8010a7c:	4a0d      	ldr	r2, [pc, #52]	; (8010ab4 <xTaskPriorityDisinherit+0x108>)
 8010a7e:	6013      	str	r3, [r2, #0]
 8010a80:	693b      	ldr	r3, [r7, #16]
 8010a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a84:	4613      	mov	r3, r2
 8010a86:	009b      	lsls	r3, r3, #2
 8010a88:	4413      	add	r3, r2
 8010a8a:	009b      	lsls	r3, r3, #2
 8010a8c:	4a08      	ldr	r2, [pc, #32]	; (8010ab0 <xTaskPriorityDisinherit+0x104>)
 8010a8e:	441a      	add	r2, r3
 8010a90:	693b      	ldr	r3, [r7, #16]
 8010a92:	3304      	adds	r3, #4
 8010a94:	4619      	mov	r1, r3
 8010a96:	4610      	mov	r0, r2
 8010a98:	f7fe fc12 	bl	800f2c0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010a9c:	2301      	movs	r3, #1
 8010a9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010aa0:	697b      	ldr	r3, [r7, #20]
	}
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	3718      	adds	r7, #24
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}
 8010aaa:	bf00      	nop
 8010aac:	20000964 	.word	0x20000964
 8010ab0:	20000968 	.word	0x20000968
 8010ab4:	20000a6c 	.word	0x20000a6c

08010ab8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b088      	sub	sp, #32
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
 8010ac0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010ac6:	2301      	movs	r3, #1
 8010ac8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d077      	beq.n	8010bc0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010ad0:	69bb      	ldr	r3, [r7, #24]
 8010ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d10a      	bne.n	8010aee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8010ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010adc:	f383 8811 	msr	BASEPRI, r3
 8010ae0:	f3bf 8f6f 	isb	sy
 8010ae4:	f3bf 8f4f 	dsb	sy
 8010ae8:	60fb      	str	r3, [r7, #12]
}
 8010aea:	bf00      	nop
 8010aec:	e7fe      	b.n	8010aec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010aee:	69bb      	ldr	r3, [r7, #24]
 8010af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010af2:	683a      	ldr	r2, [r7, #0]
 8010af4:	429a      	cmp	r2, r3
 8010af6:	d902      	bls.n	8010afe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	61fb      	str	r3, [r7, #28]
 8010afc:	e002      	b.n	8010b04 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010afe:	69bb      	ldr	r3, [r7, #24]
 8010b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b02:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010b04:	69bb      	ldr	r3, [r7, #24]
 8010b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b08:	69fa      	ldr	r2, [r7, #28]
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d058      	beq.n	8010bc0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010b0e:	69bb      	ldr	r3, [r7, #24]
 8010b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010b12:	697a      	ldr	r2, [r7, #20]
 8010b14:	429a      	cmp	r2, r3
 8010b16:	d153      	bne.n	8010bc0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010b18:	4b2b      	ldr	r3, [pc, #172]	; (8010bc8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	69ba      	ldr	r2, [r7, #24]
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	d10a      	bne.n	8010b38 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8010b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b26:	f383 8811 	msr	BASEPRI, r3
 8010b2a:	f3bf 8f6f 	isb	sy
 8010b2e:	f3bf 8f4f 	dsb	sy
 8010b32:	60bb      	str	r3, [r7, #8]
}
 8010b34:	bf00      	nop
 8010b36:	e7fe      	b.n	8010b36 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010b38:	69bb      	ldr	r3, [r7, #24]
 8010b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b3c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010b3e:	69bb      	ldr	r3, [r7, #24]
 8010b40:	69fa      	ldr	r2, [r7, #28]
 8010b42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010b44:	69bb      	ldr	r3, [r7, #24]
 8010b46:	699b      	ldr	r3, [r3, #24]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	db04      	blt.n	8010b56 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b4c:	69fb      	ldr	r3, [r7, #28]
 8010b4e:	f1c3 0207 	rsb	r2, r3, #7
 8010b52:	69bb      	ldr	r3, [r7, #24]
 8010b54:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010b56:	69bb      	ldr	r3, [r7, #24]
 8010b58:	6959      	ldr	r1, [r3, #20]
 8010b5a:	693a      	ldr	r2, [r7, #16]
 8010b5c:	4613      	mov	r3, r2
 8010b5e:	009b      	lsls	r3, r3, #2
 8010b60:	4413      	add	r3, r2
 8010b62:	009b      	lsls	r3, r3, #2
 8010b64:	4a19      	ldr	r2, [pc, #100]	; (8010bcc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8010b66:	4413      	add	r3, r2
 8010b68:	4299      	cmp	r1, r3
 8010b6a:	d129      	bne.n	8010bc0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010b6c:	69bb      	ldr	r3, [r7, #24]
 8010b6e:	3304      	adds	r3, #4
 8010b70:	4618      	mov	r0, r3
 8010b72:	f7fe fc02 	bl	800f37a <uxListRemove>
 8010b76:	4603      	mov	r3, r0
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d10a      	bne.n	8010b92 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8010b7c:	69bb      	ldr	r3, [r7, #24]
 8010b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b80:	2201      	movs	r2, #1
 8010b82:	fa02 f303 	lsl.w	r3, r2, r3
 8010b86:	43da      	mvns	r2, r3
 8010b88:	4b11      	ldr	r3, [pc, #68]	; (8010bd0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	4013      	ands	r3, r2
 8010b8e:	4a10      	ldr	r2, [pc, #64]	; (8010bd0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010b90:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010b92:	69bb      	ldr	r3, [r7, #24]
 8010b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b96:	2201      	movs	r2, #1
 8010b98:	409a      	lsls	r2, r3
 8010b9a:	4b0d      	ldr	r3, [pc, #52]	; (8010bd0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	4313      	orrs	r3, r2
 8010ba0:	4a0b      	ldr	r2, [pc, #44]	; (8010bd0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010ba2:	6013      	str	r3, [r2, #0]
 8010ba4:	69bb      	ldr	r3, [r7, #24]
 8010ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ba8:	4613      	mov	r3, r2
 8010baa:	009b      	lsls	r3, r3, #2
 8010bac:	4413      	add	r3, r2
 8010bae:	009b      	lsls	r3, r3, #2
 8010bb0:	4a06      	ldr	r2, [pc, #24]	; (8010bcc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8010bb2:	441a      	add	r2, r3
 8010bb4:	69bb      	ldr	r3, [r7, #24]
 8010bb6:	3304      	adds	r3, #4
 8010bb8:	4619      	mov	r1, r3
 8010bba:	4610      	mov	r0, r2
 8010bbc:	f7fe fb80 	bl	800f2c0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010bc0:	bf00      	nop
 8010bc2:	3720      	adds	r7, #32
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}
 8010bc8:	20000964 	.word	0x20000964
 8010bcc:	20000968 	.word	0x20000968
 8010bd0:	20000a6c 	.word	0x20000a6c

08010bd4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010bd4:	b480      	push	{r7}
 8010bd6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010bd8:	4b07      	ldr	r3, [pc, #28]	; (8010bf8 <pvTaskIncrementMutexHeldCount+0x24>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d004      	beq.n	8010bea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010be0:	4b05      	ldr	r3, [pc, #20]	; (8010bf8 <pvTaskIncrementMutexHeldCount+0x24>)
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010be6:	3201      	adds	r2, #1
 8010be8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8010bea:	4b03      	ldr	r3, [pc, #12]	; (8010bf8 <pvTaskIncrementMutexHeldCount+0x24>)
 8010bec:	681b      	ldr	r3, [r3, #0]
	}
 8010bee:	4618      	mov	r0, r3
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf6:	4770      	bx	lr
 8010bf8:	20000964 	.word	0x20000964

08010bfc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b084      	sub	sp, #16
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
 8010c04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010c06:	4b29      	ldr	r3, [pc, #164]	; (8010cac <prvAddCurrentTaskToDelayedList+0xb0>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010c0c:	4b28      	ldr	r3, [pc, #160]	; (8010cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	3304      	adds	r3, #4
 8010c12:	4618      	mov	r0, r3
 8010c14:	f7fe fbb1 	bl	800f37a <uxListRemove>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d10b      	bne.n	8010c36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010c1e:	4b24      	ldr	r3, [pc, #144]	; (8010cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c24:	2201      	movs	r2, #1
 8010c26:	fa02 f303 	lsl.w	r3, r2, r3
 8010c2a:	43da      	mvns	r2, r3
 8010c2c:	4b21      	ldr	r3, [pc, #132]	; (8010cb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	4013      	ands	r3, r2
 8010c32:	4a20      	ldr	r2, [pc, #128]	; (8010cb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010c34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c3c:	d10a      	bne.n	8010c54 <prvAddCurrentTaskToDelayedList+0x58>
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d007      	beq.n	8010c54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c44:	4b1a      	ldr	r3, [pc, #104]	; (8010cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	3304      	adds	r3, #4
 8010c4a:	4619      	mov	r1, r3
 8010c4c:	481a      	ldr	r0, [pc, #104]	; (8010cb8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010c4e:	f7fe fb37 	bl	800f2c0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010c52:	e026      	b.n	8010ca2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010c54:	68fa      	ldr	r2, [r7, #12]
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	4413      	add	r3, r2
 8010c5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010c5c:	4b14      	ldr	r3, [pc, #80]	; (8010cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	68ba      	ldr	r2, [r7, #8]
 8010c62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010c64:	68ba      	ldr	r2, [r7, #8]
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	429a      	cmp	r2, r3
 8010c6a:	d209      	bcs.n	8010c80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c6c:	4b13      	ldr	r3, [pc, #76]	; (8010cbc <prvAddCurrentTaskToDelayedList+0xc0>)
 8010c6e:	681a      	ldr	r2, [r3, #0]
 8010c70:	4b0f      	ldr	r3, [pc, #60]	; (8010cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	3304      	adds	r3, #4
 8010c76:	4619      	mov	r1, r3
 8010c78:	4610      	mov	r0, r2
 8010c7a:	f7fe fb45 	bl	800f308 <vListInsert>
}
 8010c7e:	e010      	b.n	8010ca2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c80:	4b0f      	ldr	r3, [pc, #60]	; (8010cc0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010c82:	681a      	ldr	r2, [r3, #0]
 8010c84:	4b0a      	ldr	r3, [pc, #40]	; (8010cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	3304      	adds	r3, #4
 8010c8a:	4619      	mov	r1, r3
 8010c8c:	4610      	mov	r0, r2
 8010c8e:	f7fe fb3b 	bl	800f308 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010c92:	4b0c      	ldr	r3, [pc, #48]	; (8010cc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	68ba      	ldr	r2, [r7, #8]
 8010c98:	429a      	cmp	r2, r3
 8010c9a:	d202      	bcs.n	8010ca2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010c9c:	4a09      	ldr	r2, [pc, #36]	; (8010cc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	6013      	str	r3, [r2, #0]
}
 8010ca2:	bf00      	nop
 8010ca4:	3710      	adds	r7, #16
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	bd80      	pop	{r7, pc}
 8010caa:	bf00      	nop
 8010cac:	20000a68 	.word	0x20000a68
 8010cb0:	20000964 	.word	0x20000964
 8010cb4:	20000a6c 	.word	0x20000a6c
 8010cb8:	20000a50 	.word	0x20000a50
 8010cbc:	20000a20 	.word	0x20000a20
 8010cc0:	20000a1c 	.word	0x20000a1c
 8010cc4:	20000a84 	.word	0x20000a84

08010cc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010cc8:	b480      	push	{r7}
 8010cca:	b085      	sub	sp, #20
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	60f8      	str	r0, [r7, #12]
 8010cd0:	60b9      	str	r1, [r7, #8]
 8010cd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	3b04      	subs	r3, #4
 8010cd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010ce0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	3b04      	subs	r3, #4
 8010ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010ce8:	68bb      	ldr	r3, [r7, #8]
 8010cea:	f023 0201 	bic.w	r2, r3, #1
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	3b04      	subs	r3, #4
 8010cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010cf8:	4a0c      	ldr	r2, [pc, #48]	; (8010d2c <pxPortInitialiseStack+0x64>)
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	3b14      	subs	r3, #20
 8010d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010d04:	687a      	ldr	r2, [r7, #4]
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	3b04      	subs	r3, #4
 8010d0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	f06f 0202 	mvn.w	r2, #2
 8010d16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	3b20      	subs	r3, #32
 8010d1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010d1e:	68fb      	ldr	r3, [r7, #12]
}
 8010d20:	4618      	mov	r0, r3
 8010d22:	3714      	adds	r7, #20
 8010d24:	46bd      	mov	sp, r7
 8010d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2a:	4770      	bx	lr
 8010d2c:	08010d31 	.word	0x08010d31

08010d30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010d30:	b480      	push	{r7}
 8010d32:	b085      	sub	sp, #20
 8010d34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010d36:	2300      	movs	r3, #0
 8010d38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010d3a:	4b12      	ldr	r3, [pc, #72]	; (8010d84 <prvTaskExitError+0x54>)
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010d42:	d00a      	beq.n	8010d5a <prvTaskExitError+0x2a>
	__asm volatile
 8010d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d48:	f383 8811 	msr	BASEPRI, r3
 8010d4c:	f3bf 8f6f 	isb	sy
 8010d50:	f3bf 8f4f 	dsb	sy
 8010d54:	60fb      	str	r3, [r7, #12]
}
 8010d56:	bf00      	nop
 8010d58:	e7fe      	b.n	8010d58 <prvTaskExitError+0x28>
	__asm volatile
 8010d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d5e:	f383 8811 	msr	BASEPRI, r3
 8010d62:	f3bf 8f6f 	isb	sy
 8010d66:	f3bf 8f4f 	dsb	sy
 8010d6a:	60bb      	str	r3, [r7, #8]
}
 8010d6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010d6e:	bf00      	nop
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d0fc      	beq.n	8010d70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010d76:	bf00      	nop
 8010d78:	bf00      	nop
 8010d7a:	3714      	adds	r7, #20
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d82:	4770      	bx	lr
 8010d84:	2000011c 	.word	0x2000011c
	...

08010d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010d90:	4b07      	ldr	r3, [pc, #28]	; (8010db0 <pxCurrentTCBConst2>)
 8010d92:	6819      	ldr	r1, [r3, #0]
 8010d94:	6808      	ldr	r0, [r1, #0]
 8010d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d9a:	f380 8809 	msr	PSP, r0
 8010d9e:	f3bf 8f6f 	isb	sy
 8010da2:	f04f 0000 	mov.w	r0, #0
 8010da6:	f380 8811 	msr	BASEPRI, r0
 8010daa:	4770      	bx	lr
 8010dac:	f3af 8000 	nop.w

08010db0 <pxCurrentTCBConst2>:
 8010db0:	20000964 	.word	0x20000964
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010db4:	bf00      	nop
 8010db6:	bf00      	nop

08010db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010db8:	4808      	ldr	r0, [pc, #32]	; (8010ddc <prvPortStartFirstTask+0x24>)
 8010dba:	6800      	ldr	r0, [r0, #0]
 8010dbc:	6800      	ldr	r0, [r0, #0]
 8010dbe:	f380 8808 	msr	MSP, r0
 8010dc2:	f04f 0000 	mov.w	r0, #0
 8010dc6:	f380 8814 	msr	CONTROL, r0
 8010dca:	b662      	cpsie	i
 8010dcc:	b661      	cpsie	f
 8010dce:	f3bf 8f4f 	dsb	sy
 8010dd2:	f3bf 8f6f 	isb	sy
 8010dd6:	df00      	svc	0
 8010dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010dda:	bf00      	nop
 8010ddc:	e000ed08 	.word	0xe000ed08

08010de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b086      	sub	sp, #24
 8010de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010de6:	4b46      	ldr	r3, [pc, #280]	; (8010f00 <xPortStartScheduler+0x120>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	4a46      	ldr	r2, [pc, #280]	; (8010f04 <xPortStartScheduler+0x124>)
 8010dec:	4293      	cmp	r3, r2
 8010dee:	d10a      	bne.n	8010e06 <xPortStartScheduler+0x26>
	__asm volatile
 8010df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010df4:	f383 8811 	msr	BASEPRI, r3
 8010df8:	f3bf 8f6f 	isb	sy
 8010dfc:	f3bf 8f4f 	dsb	sy
 8010e00:	613b      	str	r3, [r7, #16]
}
 8010e02:	bf00      	nop
 8010e04:	e7fe      	b.n	8010e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010e06:	4b3e      	ldr	r3, [pc, #248]	; (8010f00 <xPortStartScheduler+0x120>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	4a3f      	ldr	r2, [pc, #252]	; (8010f08 <xPortStartScheduler+0x128>)
 8010e0c:	4293      	cmp	r3, r2
 8010e0e:	d10a      	bne.n	8010e26 <xPortStartScheduler+0x46>
	__asm volatile
 8010e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e14:	f383 8811 	msr	BASEPRI, r3
 8010e18:	f3bf 8f6f 	isb	sy
 8010e1c:	f3bf 8f4f 	dsb	sy
 8010e20:	60fb      	str	r3, [r7, #12]
}
 8010e22:	bf00      	nop
 8010e24:	e7fe      	b.n	8010e24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010e26:	4b39      	ldr	r3, [pc, #228]	; (8010f0c <xPortStartScheduler+0x12c>)
 8010e28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010e2a:	697b      	ldr	r3, [r7, #20]
 8010e2c:	781b      	ldrb	r3, [r3, #0]
 8010e2e:	b2db      	uxtb	r3, r3
 8010e30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	22ff      	movs	r2, #255	; 0xff
 8010e36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	781b      	ldrb	r3, [r3, #0]
 8010e3c:	b2db      	uxtb	r3, r3
 8010e3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010e40:	78fb      	ldrb	r3, [r7, #3]
 8010e42:	b2db      	uxtb	r3, r3
 8010e44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010e48:	b2da      	uxtb	r2, r3
 8010e4a:	4b31      	ldr	r3, [pc, #196]	; (8010f10 <xPortStartScheduler+0x130>)
 8010e4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010e4e:	4b31      	ldr	r3, [pc, #196]	; (8010f14 <xPortStartScheduler+0x134>)
 8010e50:	2207      	movs	r2, #7
 8010e52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010e54:	e009      	b.n	8010e6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010e56:	4b2f      	ldr	r3, [pc, #188]	; (8010f14 <xPortStartScheduler+0x134>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	3b01      	subs	r3, #1
 8010e5c:	4a2d      	ldr	r2, [pc, #180]	; (8010f14 <xPortStartScheduler+0x134>)
 8010e5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010e60:	78fb      	ldrb	r3, [r7, #3]
 8010e62:	b2db      	uxtb	r3, r3
 8010e64:	005b      	lsls	r3, r3, #1
 8010e66:	b2db      	uxtb	r3, r3
 8010e68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010e6a:	78fb      	ldrb	r3, [r7, #3]
 8010e6c:	b2db      	uxtb	r3, r3
 8010e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e72:	2b80      	cmp	r3, #128	; 0x80
 8010e74:	d0ef      	beq.n	8010e56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010e76:	4b27      	ldr	r3, [pc, #156]	; (8010f14 <xPortStartScheduler+0x134>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	f1c3 0307 	rsb	r3, r3, #7
 8010e7e:	2b04      	cmp	r3, #4
 8010e80:	d00a      	beq.n	8010e98 <xPortStartScheduler+0xb8>
	__asm volatile
 8010e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e86:	f383 8811 	msr	BASEPRI, r3
 8010e8a:	f3bf 8f6f 	isb	sy
 8010e8e:	f3bf 8f4f 	dsb	sy
 8010e92:	60bb      	str	r3, [r7, #8]
}
 8010e94:	bf00      	nop
 8010e96:	e7fe      	b.n	8010e96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010e98:	4b1e      	ldr	r3, [pc, #120]	; (8010f14 <xPortStartScheduler+0x134>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	021b      	lsls	r3, r3, #8
 8010e9e:	4a1d      	ldr	r2, [pc, #116]	; (8010f14 <xPortStartScheduler+0x134>)
 8010ea0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010ea2:	4b1c      	ldr	r3, [pc, #112]	; (8010f14 <xPortStartScheduler+0x134>)
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010eaa:	4a1a      	ldr	r2, [pc, #104]	; (8010f14 <xPortStartScheduler+0x134>)
 8010eac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	b2da      	uxtb	r2, r3
 8010eb2:	697b      	ldr	r3, [r7, #20]
 8010eb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010eb6:	4b18      	ldr	r3, [pc, #96]	; (8010f18 <xPortStartScheduler+0x138>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	4a17      	ldr	r2, [pc, #92]	; (8010f18 <xPortStartScheduler+0x138>)
 8010ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010ec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010ec2:	4b15      	ldr	r3, [pc, #84]	; (8010f18 <xPortStartScheduler+0x138>)
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	4a14      	ldr	r2, [pc, #80]	; (8010f18 <xPortStartScheduler+0x138>)
 8010ec8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010ecc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010ece:	f000 f8dd 	bl	801108c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010ed2:	4b12      	ldr	r3, [pc, #72]	; (8010f1c <xPortStartScheduler+0x13c>)
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010ed8:	f000 f8fc 	bl	80110d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010edc:	4b10      	ldr	r3, [pc, #64]	; (8010f20 <xPortStartScheduler+0x140>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	4a0f      	ldr	r2, [pc, #60]	; (8010f20 <xPortStartScheduler+0x140>)
 8010ee2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010ee6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010ee8:	f7ff ff66 	bl	8010db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010eec:	f7ff faa2 	bl	8010434 <vTaskSwitchContext>
	prvTaskExitError();
 8010ef0:	f7ff ff1e 	bl	8010d30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010ef4:	2300      	movs	r3, #0
}
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	3718      	adds	r7, #24
 8010efa:	46bd      	mov	sp, r7
 8010efc:	bd80      	pop	{r7, pc}
 8010efe:	bf00      	nop
 8010f00:	e000ed00 	.word	0xe000ed00
 8010f04:	410fc271 	.word	0x410fc271
 8010f08:	410fc270 	.word	0x410fc270
 8010f0c:	e000e400 	.word	0xe000e400
 8010f10:	20000a90 	.word	0x20000a90
 8010f14:	20000a94 	.word	0x20000a94
 8010f18:	e000ed20 	.word	0xe000ed20
 8010f1c:	2000011c 	.word	0x2000011c
 8010f20:	e000ef34 	.word	0xe000ef34

08010f24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010f24:	b480      	push	{r7}
 8010f26:	b083      	sub	sp, #12
 8010f28:	af00      	add	r7, sp, #0
	__asm volatile
 8010f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f2e:	f383 8811 	msr	BASEPRI, r3
 8010f32:	f3bf 8f6f 	isb	sy
 8010f36:	f3bf 8f4f 	dsb	sy
 8010f3a:	607b      	str	r3, [r7, #4]
}
 8010f3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010f3e:	4b0f      	ldr	r3, [pc, #60]	; (8010f7c <vPortEnterCritical+0x58>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	3301      	adds	r3, #1
 8010f44:	4a0d      	ldr	r2, [pc, #52]	; (8010f7c <vPortEnterCritical+0x58>)
 8010f46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010f48:	4b0c      	ldr	r3, [pc, #48]	; (8010f7c <vPortEnterCritical+0x58>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	2b01      	cmp	r3, #1
 8010f4e:	d10f      	bne.n	8010f70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010f50:	4b0b      	ldr	r3, [pc, #44]	; (8010f80 <vPortEnterCritical+0x5c>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	b2db      	uxtb	r3, r3
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d00a      	beq.n	8010f70 <vPortEnterCritical+0x4c>
	__asm volatile
 8010f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f5e:	f383 8811 	msr	BASEPRI, r3
 8010f62:	f3bf 8f6f 	isb	sy
 8010f66:	f3bf 8f4f 	dsb	sy
 8010f6a:	603b      	str	r3, [r7, #0]
}
 8010f6c:	bf00      	nop
 8010f6e:	e7fe      	b.n	8010f6e <vPortEnterCritical+0x4a>
	}
}
 8010f70:	bf00      	nop
 8010f72:	370c      	adds	r7, #12
 8010f74:	46bd      	mov	sp, r7
 8010f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7a:	4770      	bx	lr
 8010f7c:	2000011c 	.word	0x2000011c
 8010f80:	e000ed04 	.word	0xe000ed04

08010f84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010f84:	b480      	push	{r7}
 8010f86:	b083      	sub	sp, #12
 8010f88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010f8a:	4b12      	ldr	r3, [pc, #72]	; (8010fd4 <vPortExitCritical+0x50>)
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d10a      	bne.n	8010fa8 <vPortExitCritical+0x24>
	__asm volatile
 8010f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f96:	f383 8811 	msr	BASEPRI, r3
 8010f9a:	f3bf 8f6f 	isb	sy
 8010f9e:	f3bf 8f4f 	dsb	sy
 8010fa2:	607b      	str	r3, [r7, #4]
}
 8010fa4:	bf00      	nop
 8010fa6:	e7fe      	b.n	8010fa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010fa8:	4b0a      	ldr	r3, [pc, #40]	; (8010fd4 <vPortExitCritical+0x50>)
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	3b01      	subs	r3, #1
 8010fae:	4a09      	ldr	r2, [pc, #36]	; (8010fd4 <vPortExitCritical+0x50>)
 8010fb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010fb2:	4b08      	ldr	r3, [pc, #32]	; (8010fd4 <vPortExitCritical+0x50>)
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d105      	bne.n	8010fc6 <vPortExitCritical+0x42>
 8010fba:	2300      	movs	r3, #0
 8010fbc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010fc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010fc6:	bf00      	nop
 8010fc8:	370c      	adds	r7, #12
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd0:	4770      	bx	lr
 8010fd2:	bf00      	nop
 8010fd4:	2000011c 	.word	0x2000011c
	...

08010fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010fe0:	f3ef 8009 	mrs	r0, PSP
 8010fe4:	f3bf 8f6f 	isb	sy
 8010fe8:	4b15      	ldr	r3, [pc, #84]	; (8011040 <pxCurrentTCBConst>)
 8010fea:	681a      	ldr	r2, [r3, #0]
 8010fec:	f01e 0f10 	tst.w	lr, #16
 8010ff0:	bf08      	it	eq
 8010ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ffa:	6010      	str	r0, [r2, #0]
 8010ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011000:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011004:	f380 8811 	msr	BASEPRI, r0
 8011008:	f3bf 8f4f 	dsb	sy
 801100c:	f3bf 8f6f 	isb	sy
 8011010:	f7ff fa10 	bl	8010434 <vTaskSwitchContext>
 8011014:	f04f 0000 	mov.w	r0, #0
 8011018:	f380 8811 	msr	BASEPRI, r0
 801101c:	bc09      	pop	{r0, r3}
 801101e:	6819      	ldr	r1, [r3, #0]
 8011020:	6808      	ldr	r0, [r1, #0]
 8011022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011026:	f01e 0f10 	tst.w	lr, #16
 801102a:	bf08      	it	eq
 801102c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011030:	f380 8809 	msr	PSP, r0
 8011034:	f3bf 8f6f 	isb	sy
 8011038:	4770      	bx	lr
 801103a:	bf00      	nop
 801103c:	f3af 8000 	nop.w

08011040 <pxCurrentTCBConst>:
 8011040:	20000964 	.word	0x20000964
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011044:	bf00      	nop
 8011046:	bf00      	nop

08011048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b082      	sub	sp, #8
 801104c:	af00      	add	r7, sp, #0
	__asm volatile
 801104e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011052:	f383 8811 	msr	BASEPRI, r3
 8011056:	f3bf 8f6f 	isb	sy
 801105a:	f3bf 8f4f 	dsb	sy
 801105e:	607b      	str	r3, [r7, #4]
}
 8011060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011062:	f7ff f92f 	bl	80102c4 <xTaskIncrementTick>
 8011066:	4603      	mov	r3, r0
 8011068:	2b00      	cmp	r3, #0
 801106a:	d003      	beq.n	8011074 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801106c:	4b06      	ldr	r3, [pc, #24]	; (8011088 <SysTick_Handler+0x40>)
 801106e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011072:	601a      	str	r2, [r3, #0]
 8011074:	2300      	movs	r3, #0
 8011076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	f383 8811 	msr	BASEPRI, r3
}
 801107e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011080:	bf00      	nop
 8011082:	3708      	adds	r7, #8
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}
 8011088:	e000ed04 	.word	0xe000ed04

0801108c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801108c:	b480      	push	{r7}
 801108e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011090:	4b0b      	ldr	r3, [pc, #44]	; (80110c0 <vPortSetupTimerInterrupt+0x34>)
 8011092:	2200      	movs	r2, #0
 8011094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011096:	4b0b      	ldr	r3, [pc, #44]	; (80110c4 <vPortSetupTimerInterrupt+0x38>)
 8011098:	2200      	movs	r2, #0
 801109a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801109c:	4b0a      	ldr	r3, [pc, #40]	; (80110c8 <vPortSetupTimerInterrupt+0x3c>)
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	4a0a      	ldr	r2, [pc, #40]	; (80110cc <vPortSetupTimerInterrupt+0x40>)
 80110a2:	fba2 2303 	umull	r2, r3, r2, r3
 80110a6:	099b      	lsrs	r3, r3, #6
 80110a8:	4a09      	ldr	r2, [pc, #36]	; (80110d0 <vPortSetupTimerInterrupt+0x44>)
 80110aa:	3b01      	subs	r3, #1
 80110ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80110ae:	4b04      	ldr	r3, [pc, #16]	; (80110c0 <vPortSetupTimerInterrupt+0x34>)
 80110b0:	2207      	movs	r2, #7
 80110b2:	601a      	str	r2, [r3, #0]
}
 80110b4:	bf00      	nop
 80110b6:	46bd      	mov	sp, r7
 80110b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110bc:	4770      	bx	lr
 80110be:	bf00      	nop
 80110c0:	e000e010 	.word	0xe000e010
 80110c4:	e000e018 	.word	0xe000e018
 80110c8:	20000000 	.word	0x20000000
 80110cc:	10624dd3 	.word	0x10624dd3
 80110d0:	e000e014 	.word	0xe000e014

080110d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80110d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80110e4 <vPortEnableVFP+0x10>
 80110d8:	6801      	ldr	r1, [r0, #0]
 80110da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80110de:	6001      	str	r1, [r0, #0]
 80110e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80110e2:	bf00      	nop
 80110e4:	e000ed88 	.word	0xe000ed88

080110e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b08a      	sub	sp, #40	; 0x28
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80110f0:	2300      	movs	r3, #0
 80110f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80110f4:	f7ff f83c 	bl	8010170 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80110f8:	4b5b      	ldr	r3, [pc, #364]	; (8011268 <pvPortMalloc+0x180>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d101      	bne.n	8011104 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011100:	f000 f920 	bl	8011344 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011104:	4b59      	ldr	r3, [pc, #356]	; (801126c <pvPortMalloc+0x184>)
 8011106:	681a      	ldr	r2, [r3, #0]
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	4013      	ands	r3, r2
 801110c:	2b00      	cmp	r3, #0
 801110e:	f040 8093 	bne.w	8011238 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d01d      	beq.n	8011154 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011118:	2208      	movs	r2, #8
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	4413      	add	r3, r2
 801111e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f003 0307 	and.w	r3, r3, #7
 8011126:	2b00      	cmp	r3, #0
 8011128:	d014      	beq.n	8011154 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	f023 0307 	bic.w	r3, r3, #7
 8011130:	3308      	adds	r3, #8
 8011132:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f003 0307 	and.w	r3, r3, #7
 801113a:	2b00      	cmp	r3, #0
 801113c:	d00a      	beq.n	8011154 <pvPortMalloc+0x6c>
	__asm volatile
 801113e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011142:	f383 8811 	msr	BASEPRI, r3
 8011146:	f3bf 8f6f 	isb	sy
 801114a:	f3bf 8f4f 	dsb	sy
 801114e:	617b      	str	r3, [r7, #20]
}
 8011150:	bf00      	nop
 8011152:	e7fe      	b.n	8011152 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d06e      	beq.n	8011238 <pvPortMalloc+0x150>
 801115a:	4b45      	ldr	r3, [pc, #276]	; (8011270 <pvPortMalloc+0x188>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	687a      	ldr	r2, [r7, #4]
 8011160:	429a      	cmp	r2, r3
 8011162:	d869      	bhi.n	8011238 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011164:	4b43      	ldr	r3, [pc, #268]	; (8011274 <pvPortMalloc+0x18c>)
 8011166:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011168:	4b42      	ldr	r3, [pc, #264]	; (8011274 <pvPortMalloc+0x18c>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801116e:	e004      	b.n	801117a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011172:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801117c:	685b      	ldr	r3, [r3, #4]
 801117e:	687a      	ldr	r2, [r7, #4]
 8011180:	429a      	cmp	r2, r3
 8011182:	d903      	bls.n	801118c <pvPortMalloc+0xa4>
 8011184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d1f1      	bne.n	8011170 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801118c:	4b36      	ldr	r3, [pc, #216]	; (8011268 <pvPortMalloc+0x180>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011192:	429a      	cmp	r2, r3
 8011194:	d050      	beq.n	8011238 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011196:	6a3b      	ldr	r3, [r7, #32]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	2208      	movs	r2, #8
 801119c:	4413      	add	r3, r2
 801119e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80111a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111a2:	681a      	ldr	r2, [r3, #0]
 80111a4:	6a3b      	ldr	r3, [r7, #32]
 80111a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80111a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111aa:	685a      	ldr	r2, [r3, #4]
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	1ad2      	subs	r2, r2, r3
 80111b0:	2308      	movs	r3, #8
 80111b2:	005b      	lsls	r3, r3, #1
 80111b4:	429a      	cmp	r2, r3
 80111b6:	d91f      	bls.n	80111f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80111b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	4413      	add	r3, r2
 80111be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80111c0:	69bb      	ldr	r3, [r7, #24]
 80111c2:	f003 0307 	and.w	r3, r3, #7
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d00a      	beq.n	80111e0 <pvPortMalloc+0xf8>
	__asm volatile
 80111ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111ce:	f383 8811 	msr	BASEPRI, r3
 80111d2:	f3bf 8f6f 	isb	sy
 80111d6:	f3bf 8f4f 	dsb	sy
 80111da:	613b      	str	r3, [r7, #16]
}
 80111dc:	bf00      	nop
 80111de:	e7fe      	b.n	80111de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80111e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111e2:	685a      	ldr	r2, [r3, #4]
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	1ad2      	subs	r2, r2, r3
 80111e8:	69bb      	ldr	r3, [r7, #24]
 80111ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80111ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ee:	687a      	ldr	r2, [r7, #4]
 80111f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80111f2:	69b8      	ldr	r0, [r7, #24]
 80111f4:	f000 f908 	bl	8011408 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80111f8:	4b1d      	ldr	r3, [pc, #116]	; (8011270 <pvPortMalloc+0x188>)
 80111fa:	681a      	ldr	r2, [r3, #0]
 80111fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111fe:	685b      	ldr	r3, [r3, #4]
 8011200:	1ad3      	subs	r3, r2, r3
 8011202:	4a1b      	ldr	r2, [pc, #108]	; (8011270 <pvPortMalloc+0x188>)
 8011204:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011206:	4b1a      	ldr	r3, [pc, #104]	; (8011270 <pvPortMalloc+0x188>)
 8011208:	681a      	ldr	r2, [r3, #0]
 801120a:	4b1b      	ldr	r3, [pc, #108]	; (8011278 <pvPortMalloc+0x190>)
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	429a      	cmp	r2, r3
 8011210:	d203      	bcs.n	801121a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011212:	4b17      	ldr	r3, [pc, #92]	; (8011270 <pvPortMalloc+0x188>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	4a18      	ldr	r2, [pc, #96]	; (8011278 <pvPortMalloc+0x190>)
 8011218:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801121c:	685a      	ldr	r2, [r3, #4]
 801121e:	4b13      	ldr	r3, [pc, #76]	; (801126c <pvPortMalloc+0x184>)
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	431a      	orrs	r2, r3
 8011224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011226:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801122a:	2200      	movs	r2, #0
 801122c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801122e:	4b13      	ldr	r3, [pc, #76]	; (801127c <pvPortMalloc+0x194>)
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	3301      	adds	r3, #1
 8011234:	4a11      	ldr	r2, [pc, #68]	; (801127c <pvPortMalloc+0x194>)
 8011236:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011238:	f7fe ffa8 	bl	801018c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801123c:	69fb      	ldr	r3, [r7, #28]
 801123e:	f003 0307 	and.w	r3, r3, #7
 8011242:	2b00      	cmp	r3, #0
 8011244:	d00a      	beq.n	801125c <pvPortMalloc+0x174>
	__asm volatile
 8011246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801124a:	f383 8811 	msr	BASEPRI, r3
 801124e:	f3bf 8f6f 	isb	sy
 8011252:	f3bf 8f4f 	dsb	sy
 8011256:	60fb      	str	r3, [r7, #12]
}
 8011258:	bf00      	nop
 801125a:	e7fe      	b.n	801125a <pvPortMalloc+0x172>
	return pvReturn;
 801125c:	69fb      	ldr	r3, [r7, #28]
}
 801125e:	4618      	mov	r0, r3
 8011260:	3728      	adds	r7, #40	; 0x28
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}
 8011266:	bf00      	nop
 8011268:	20001aa0 	.word	0x20001aa0
 801126c:	20001ab4 	.word	0x20001ab4
 8011270:	20001aa4 	.word	0x20001aa4
 8011274:	20001a98 	.word	0x20001a98
 8011278:	20001aa8 	.word	0x20001aa8
 801127c:	20001aac 	.word	0x20001aac

08011280 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b086      	sub	sp, #24
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d04d      	beq.n	801132e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011292:	2308      	movs	r3, #8
 8011294:	425b      	negs	r3, r3
 8011296:	697a      	ldr	r2, [r7, #20]
 8011298:	4413      	add	r3, r2
 801129a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801129c:	697b      	ldr	r3, [r7, #20]
 801129e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80112a0:	693b      	ldr	r3, [r7, #16]
 80112a2:	685a      	ldr	r2, [r3, #4]
 80112a4:	4b24      	ldr	r3, [pc, #144]	; (8011338 <vPortFree+0xb8>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	4013      	ands	r3, r2
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d10a      	bne.n	80112c4 <vPortFree+0x44>
	__asm volatile
 80112ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112b2:	f383 8811 	msr	BASEPRI, r3
 80112b6:	f3bf 8f6f 	isb	sy
 80112ba:	f3bf 8f4f 	dsb	sy
 80112be:	60fb      	str	r3, [r7, #12]
}
 80112c0:	bf00      	nop
 80112c2:	e7fe      	b.n	80112c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80112c4:	693b      	ldr	r3, [r7, #16]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d00a      	beq.n	80112e2 <vPortFree+0x62>
	__asm volatile
 80112cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112d0:	f383 8811 	msr	BASEPRI, r3
 80112d4:	f3bf 8f6f 	isb	sy
 80112d8:	f3bf 8f4f 	dsb	sy
 80112dc:	60bb      	str	r3, [r7, #8]
}
 80112de:	bf00      	nop
 80112e0:	e7fe      	b.n	80112e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80112e2:	693b      	ldr	r3, [r7, #16]
 80112e4:	685a      	ldr	r2, [r3, #4]
 80112e6:	4b14      	ldr	r3, [pc, #80]	; (8011338 <vPortFree+0xb8>)
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	4013      	ands	r3, r2
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d01e      	beq.n	801132e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80112f0:	693b      	ldr	r3, [r7, #16]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d11a      	bne.n	801132e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80112f8:	693b      	ldr	r3, [r7, #16]
 80112fa:	685a      	ldr	r2, [r3, #4]
 80112fc:	4b0e      	ldr	r3, [pc, #56]	; (8011338 <vPortFree+0xb8>)
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	43db      	mvns	r3, r3
 8011302:	401a      	ands	r2, r3
 8011304:	693b      	ldr	r3, [r7, #16]
 8011306:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011308:	f7fe ff32 	bl	8010170 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801130c:	693b      	ldr	r3, [r7, #16]
 801130e:	685a      	ldr	r2, [r3, #4]
 8011310:	4b0a      	ldr	r3, [pc, #40]	; (801133c <vPortFree+0xbc>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	4413      	add	r3, r2
 8011316:	4a09      	ldr	r2, [pc, #36]	; (801133c <vPortFree+0xbc>)
 8011318:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801131a:	6938      	ldr	r0, [r7, #16]
 801131c:	f000 f874 	bl	8011408 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011320:	4b07      	ldr	r3, [pc, #28]	; (8011340 <vPortFree+0xc0>)
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	3301      	adds	r3, #1
 8011326:	4a06      	ldr	r2, [pc, #24]	; (8011340 <vPortFree+0xc0>)
 8011328:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801132a:	f7fe ff2f 	bl	801018c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801132e:	bf00      	nop
 8011330:	3718      	adds	r7, #24
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}
 8011336:	bf00      	nop
 8011338:	20001ab4 	.word	0x20001ab4
 801133c:	20001aa4 	.word	0x20001aa4
 8011340:	20001ab0 	.word	0x20001ab0

08011344 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011344:	b480      	push	{r7}
 8011346:	b085      	sub	sp, #20
 8011348:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801134a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801134e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011350:	4b27      	ldr	r3, [pc, #156]	; (80113f0 <prvHeapInit+0xac>)
 8011352:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	f003 0307 	and.w	r3, r3, #7
 801135a:	2b00      	cmp	r3, #0
 801135c:	d00c      	beq.n	8011378 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	3307      	adds	r3, #7
 8011362:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	f023 0307 	bic.w	r3, r3, #7
 801136a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801136c:	68ba      	ldr	r2, [r7, #8]
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	1ad3      	subs	r3, r2, r3
 8011372:	4a1f      	ldr	r2, [pc, #124]	; (80113f0 <prvHeapInit+0xac>)
 8011374:	4413      	add	r3, r2
 8011376:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801137c:	4a1d      	ldr	r2, [pc, #116]	; (80113f4 <prvHeapInit+0xb0>)
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011382:	4b1c      	ldr	r3, [pc, #112]	; (80113f4 <prvHeapInit+0xb0>)
 8011384:	2200      	movs	r2, #0
 8011386:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	68ba      	ldr	r2, [r7, #8]
 801138c:	4413      	add	r3, r2
 801138e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011390:	2208      	movs	r2, #8
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	1a9b      	subs	r3, r3, r2
 8011396:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	f023 0307 	bic.w	r3, r3, #7
 801139e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	4a15      	ldr	r2, [pc, #84]	; (80113f8 <prvHeapInit+0xb4>)
 80113a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80113a6:	4b14      	ldr	r3, [pc, #80]	; (80113f8 <prvHeapInit+0xb4>)
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	2200      	movs	r2, #0
 80113ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80113ae:	4b12      	ldr	r3, [pc, #72]	; (80113f8 <prvHeapInit+0xb4>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	2200      	movs	r2, #0
 80113b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	68fa      	ldr	r2, [r7, #12]
 80113be:	1ad2      	subs	r2, r2, r3
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80113c4:	4b0c      	ldr	r3, [pc, #48]	; (80113f8 <prvHeapInit+0xb4>)
 80113c6:	681a      	ldr	r2, [r3, #0]
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	685b      	ldr	r3, [r3, #4]
 80113d0:	4a0a      	ldr	r2, [pc, #40]	; (80113fc <prvHeapInit+0xb8>)
 80113d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	685b      	ldr	r3, [r3, #4]
 80113d8:	4a09      	ldr	r2, [pc, #36]	; (8011400 <prvHeapInit+0xbc>)
 80113da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80113dc:	4b09      	ldr	r3, [pc, #36]	; (8011404 <prvHeapInit+0xc0>)
 80113de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80113e2:	601a      	str	r2, [r3, #0]
}
 80113e4:	bf00      	nop
 80113e6:	3714      	adds	r7, #20
 80113e8:	46bd      	mov	sp, r7
 80113ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ee:	4770      	bx	lr
 80113f0:	20000a98 	.word	0x20000a98
 80113f4:	20001a98 	.word	0x20001a98
 80113f8:	20001aa0 	.word	0x20001aa0
 80113fc:	20001aa8 	.word	0x20001aa8
 8011400:	20001aa4 	.word	0x20001aa4
 8011404:	20001ab4 	.word	0x20001ab4

08011408 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011408:	b480      	push	{r7}
 801140a:	b085      	sub	sp, #20
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011410:	4b28      	ldr	r3, [pc, #160]	; (80114b4 <prvInsertBlockIntoFreeList+0xac>)
 8011412:	60fb      	str	r3, [r7, #12]
 8011414:	e002      	b.n	801141c <prvInsertBlockIntoFreeList+0x14>
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	60fb      	str	r3, [r7, #12]
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	687a      	ldr	r2, [r7, #4]
 8011422:	429a      	cmp	r2, r3
 8011424:	d8f7      	bhi.n	8011416 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	685b      	ldr	r3, [r3, #4]
 801142e:	68ba      	ldr	r2, [r7, #8]
 8011430:	4413      	add	r3, r2
 8011432:	687a      	ldr	r2, [r7, #4]
 8011434:	429a      	cmp	r2, r3
 8011436:	d108      	bne.n	801144a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	685a      	ldr	r2, [r3, #4]
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	685b      	ldr	r3, [r3, #4]
 8011440:	441a      	add	r2, r3
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	685b      	ldr	r3, [r3, #4]
 8011452:	68ba      	ldr	r2, [r7, #8]
 8011454:	441a      	add	r2, r3
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	429a      	cmp	r2, r3
 801145c:	d118      	bne.n	8011490 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	681a      	ldr	r2, [r3, #0]
 8011462:	4b15      	ldr	r3, [pc, #84]	; (80114b8 <prvInsertBlockIntoFreeList+0xb0>)
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	429a      	cmp	r2, r3
 8011468:	d00d      	beq.n	8011486 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	685a      	ldr	r2, [r3, #4]
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	685b      	ldr	r3, [r3, #4]
 8011474:	441a      	add	r2, r3
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	681a      	ldr	r2, [r3, #0]
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	601a      	str	r2, [r3, #0]
 8011484:	e008      	b.n	8011498 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011486:	4b0c      	ldr	r3, [pc, #48]	; (80114b8 <prvInsertBlockIntoFreeList+0xb0>)
 8011488:	681a      	ldr	r2, [r3, #0]
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	601a      	str	r2, [r3, #0]
 801148e:	e003      	b.n	8011498 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	681a      	ldr	r2, [r3, #0]
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011498:	68fa      	ldr	r2, [r7, #12]
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	429a      	cmp	r2, r3
 801149e:	d002      	beq.n	80114a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	687a      	ldr	r2, [r7, #4]
 80114a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80114a6:	bf00      	nop
 80114a8:	3714      	adds	r7, #20
 80114aa:	46bd      	mov	sp, r7
 80114ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b0:	4770      	bx	lr
 80114b2:	bf00      	nop
 80114b4:	20001a98 	.word	0x20001a98
 80114b8:	20001aa0 	.word	0x20001aa0

080114bc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80114c0:	2200      	movs	r2, #0
 80114c2:	4912      	ldr	r1, [pc, #72]	; (801150c <MX_USB_Device_Init+0x50>)
 80114c4:	4812      	ldr	r0, [pc, #72]	; (8011510 <MX_USB_Device_Init+0x54>)
 80114c6:	f7fc fd55 	bl	800df74 <USBD_Init>
 80114ca:	4603      	mov	r3, r0
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d001      	beq.n	80114d4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80114d0:	f7f0 fbf6 	bl	8001cc0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80114d4:	490f      	ldr	r1, [pc, #60]	; (8011514 <MX_USB_Device_Init+0x58>)
 80114d6:	480e      	ldr	r0, [pc, #56]	; (8011510 <MX_USB_Device_Init+0x54>)
 80114d8:	f7fc fd7c 	bl	800dfd4 <USBD_RegisterClass>
 80114dc:	4603      	mov	r3, r0
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d001      	beq.n	80114e6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80114e2:	f7f0 fbed 	bl	8001cc0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80114e6:	490c      	ldr	r1, [pc, #48]	; (8011518 <MX_USB_Device_Init+0x5c>)
 80114e8:	4809      	ldr	r0, [pc, #36]	; (8011510 <MX_USB_Device_Init+0x54>)
 80114ea:	f7fc fccd 	bl	800de88 <USBD_CDC_RegisterInterface>
 80114ee:	4603      	mov	r3, r0
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d001      	beq.n	80114f8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80114f4:	f7f0 fbe4 	bl	8001cc0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80114f8:	4805      	ldr	r0, [pc, #20]	; (8011510 <MX_USB_Device_Init+0x54>)
 80114fa:	f7fc fd92 	bl	800e022 <USBD_Start>
 80114fe:	4603      	mov	r3, r0
 8011500:	2b00      	cmp	r3, #0
 8011502:	d001      	beq.n	8011508 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8011504:	f7f0 fbdc 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8011508:	bf00      	nop
 801150a:	bd80      	pop	{r7, pc}
 801150c:	20000134 	.word	0x20000134
 8011510:	20001ab8 	.word	0x20001ab8
 8011514:	20000018 	.word	0x20000018
 8011518:	20000120 	.word	0x20000120

0801151c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011520:	2200      	movs	r2, #0
 8011522:	4905      	ldr	r1, [pc, #20]	; (8011538 <CDC_Init_FS+0x1c>)
 8011524:	4805      	ldr	r0, [pc, #20]	; (801153c <CDC_Init_FS+0x20>)
 8011526:	f7fc fcc4 	bl	800deb2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801152a:	4905      	ldr	r1, [pc, #20]	; (8011540 <CDC_Init_FS+0x24>)
 801152c:	4803      	ldr	r0, [pc, #12]	; (801153c <CDC_Init_FS+0x20>)
 801152e:	f7fc fcde 	bl	800deee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011532:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011534:	4618      	mov	r0, r3
 8011536:	bd80      	pop	{r7, pc}
 8011538:	20002588 	.word	0x20002588
 801153c:	20001ab8 	.word	0x20001ab8
 8011540:	20001d88 	.word	0x20001d88

08011544 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011544:	b480      	push	{r7}
 8011546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011548:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801154a:	4618      	mov	r0, r3
 801154c:	46bd      	mov	sp, r7
 801154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011552:	4770      	bx	lr

08011554 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011554:	b480      	push	{r7}
 8011556:	b083      	sub	sp, #12
 8011558:	af00      	add	r7, sp, #0
 801155a:	4603      	mov	r3, r0
 801155c:	6039      	str	r1, [r7, #0]
 801155e:	71fb      	strb	r3, [r7, #7]
 8011560:	4613      	mov	r3, r2
 8011562:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011564:	79fb      	ldrb	r3, [r7, #7]
 8011566:	2b23      	cmp	r3, #35	; 0x23
 8011568:	d84a      	bhi.n	8011600 <CDC_Control_FS+0xac>
 801156a:	a201      	add	r2, pc, #4	; (adr r2, 8011570 <CDC_Control_FS+0x1c>)
 801156c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011570:	08011601 	.word	0x08011601
 8011574:	08011601 	.word	0x08011601
 8011578:	08011601 	.word	0x08011601
 801157c:	08011601 	.word	0x08011601
 8011580:	08011601 	.word	0x08011601
 8011584:	08011601 	.word	0x08011601
 8011588:	08011601 	.word	0x08011601
 801158c:	08011601 	.word	0x08011601
 8011590:	08011601 	.word	0x08011601
 8011594:	08011601 	.word	0x08011601
 8011598:	08011601 	.word	0x08011601
 801159c:	08011601 	.word	0x08011601
 80115a0:	08011601 	.word	0x08011601
 80115a4:	08011601 	.word	0x08011601
 80115a8:	08011601 	.word	0x08011601
 80115ac:	08011601 	.word	0x08011601
 80115b0:	08011601 	.word	0x08011601
 80115b4:	08011601 	.word	0x08011601
 80115b8:	08011601 	.word	0x08011601
 80115bc:	08011601 	.word	0x08011601
 80115c0:	08011601 	.word	0x08011601
 80115c4:	08011601 	.word	0x08011601
 80115c8:	08011601 	.word	0x08011601
 80115cc:	08011601 	.word	0x08011601
 80115d0:	08011601 	.word	0x08011601
 80115d4:	08011601 	.word	0x08011601
 80115d8:	08011601 	.word	0x08011601
 80115dc:	08011601 	.word	0x08011601
 80115e0:	08011601 	.word	0x08011601
 80115e4:	08011601 	.word	0x08011601
 80115e8:	08011601 	.word	0x08011601
 80115ec:	08011601 	.word	0x08011601
 80115f0:	08011601 	.word	0x08011601
 80115f4:	08011601 	.word	0x08011601
 80115f8:	08011601 	.word	0x08011601
 80115fc:	08011601 	.word	0x08011601
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011600:	bf00      	nop
  }

  return (USBD_OK);
 8011602:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011604:	4618      	mov	r0, r3
 8011606:	370c      	adds	r7, #12
 8011608:	46bd      	mov	sp, r7
 801160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160e:	4770      	bx	lr

08011610 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b082      	sub	sp, #8
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
 8011618:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801161a:	6879      	ldr	r1, [r7, #4]
 801161c:	4805      	ldr	r0, [pc, #20]	; (8011634 <CDC_Receive_FS+0x24>)
 801161e:	f7fc fc66 	bl	800deee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011622:	4804      	ldr	r0, [pc, #16]	; (8011634 <CDC_Receive_FS+0x24>)
 8011624:	f7fc fc7c 	bl	800df20 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011628:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801162a:	4618      	mov	r0, r3
 801162c:	3708      	adds	r7, #8
 801162e:	46bd      	mov	sp, r7
 8011630:	bd80      	pop	{r7, pc}
 8011632:	bf00      	nop
 8011634:	20001ab8 	.word	0x20001ab8

08011638 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011638:	b480      	push	{r7}
 801163a:	b087      	sub	sp, #28
 801163c:	af00      	add	r7, sp, #0
 801163e:	60f8      	str	r0, [r7, #12]
 8011640:	60b9      	str	r1, [r7, #8]
 8011642:	4613      	mov	r3, r2
 8011644:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011646:	2300      	movs	r3, #0
 8011648:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801164a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801164e:	4618      	mov	r0, r3
 8011650:	371c      	adds	r7, #28
 8011652:	46bd      	mov	sp, r7
 8011654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011658:	4770      	bx	lr
	...

0801165c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801165c:	b480      	push	{r7}
 801165e:	b083      	sub	sp, #12
 8011660:	af00      	add	r7, sp, #0
 8011662:	4603      	mov	r3, r0
 8011664:	6039      	str	r1, [r7, #0]
 8011666:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	2212      	movs	r2, #18
 801166c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801166e:	4b03      	ldr	r3, [pc, #12]	; (801167c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8011670:	4618      	mov	r0, r3
 8011672:	370c      	adds	r7, #12
 8011674:	46bd      	mov	sp, r7
 8011676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167a:	4770      	bx	lr
 801167c:	20000154 	.word	0x20000154

08011680 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011680:	b480      	push	{r7}
 8011682:	b083      	sub	sp, #12
 8011684:	af00      	add	r7, sp, #0
 8011686:	4603      	mov	r3, r0
 8011688:	6039      	str	r1, [r7, #0]
 801168a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	2204      	movs	r2, #4
 8011690:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011692:	4b03      	ldr	r3, [pc, #12]	; (80116a0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8011694:	4618      	mov	r0, r3
 8011696:	370c      	adds	r7, #12
 8011698:	46bd      	mov	sp, r7
 801169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169e:	4770      	bx	lr
 80116a0:	20000168 	.word	0x20000168

080116a4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b082      	sub	sp, #8
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	4603      	mov	r3, r0
 80116ac:	6039      	str	r1, [r7, #0]
 80116ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80116b0:	79fb      	ldrb	r3, [r7, #7]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d105      	bne.n	80116c2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80116b6:	683a      	ldr	r2, [r7, #0]
 80116b8:	4907      	ldr	r1, [pc, #28]	; (80116d8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80116ba:	4808      	ldr	r0, [pc, #32]	; (80116dc <USBD_CDC_ProductStrDescriptor+0x38>)
 80116bc:	f7fd fc99 	bl	800eff2 <USBD_GetString>
 80116c0:	e004      	b.n	80116cc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80116c2:	683a      	ldr	r2, [r7, #0]
 80116c4:	4904      	ldr	r1, [pc, #16]	; (80116d8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80116c6:	4805      	ldr	r0, [pc, #20]	; (80116dc <USBD_CDC_ProductStrDescriptor+0x38>)
 80116c8:	f7fd fc93 	bl	800eff2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80116cc:	4b02      	ldr	r3, [pc, #8]	; (80116d8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80116ce:	4618      	mov	r0, r3
 80116d0:	3708      	adds	r7, #8
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}
 80116d6:	bf00      	nop
 80116d8:	20002d88 	.word	0x20002d88
 80116dc:	080152a0 	.word	0x080152a0

080116e0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b082      	sub	sp, #8
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	4603      	mov	r3, r0
 80116e8:	6039      	str	r1, [r7, #0]
 80116ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80116ec:	683a      	ldr	r2, [r7, #0]
 80116ee:	4904      	ldr	r1, [pc, #16]	; (8011700 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80116f0:	4804      	ldr	r0, [pc, #16]	; (8011704 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80116f2:	f7fd fc7e 	bl	800eff2 <USBD_GetString>
  return USBD_StrDesc;
 80116f6:	4b02      	ldr	r3, [pc, #8]	; (8011700 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80116f8:	4618      	mov	r0, r3
 80116fa:	3708      	adds	r7, #8
 80116fc:	46bd      	mov	sp, r7
 80116fe:	bd80      	pop	{r7, pc}
 8011700:	20002d88 	.word	0x20002d88
 8011704:	080152b8 	.word	0x080152b8

08011708 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af00      	add	r7, sp, #0
 801170e:	4603      	mov	r3, r0
 8011710:	6039      	str	r1, [r7, #0]
 8011712:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011714:	683b      	ldr	r3, [r7, #0]
 8011716:	221a      	movs	r2, #26
 8011718:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801171a:	f000 f843 	bl	80117a4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801171e:	4b02      	ldr	r3, [pc, #8]	; (8011728 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8011720:	4618      	mov	r0, r3
 8011722:	3708      	adds	r7, #8
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}
 8011728:	2000016c 	.word	0x2000016c

0801172c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b082      	sub	sp, #8
 8011730:	af00      	add	r7, sp, #0
 8011732:	4603      	mov	r3, r0
 8011734:	6039      	str	r1, [r7, #0]
 8011736:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011738:	79fb      	ldrb	r3, [r7, #7]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d105      	bne.n	801174a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801173e:	683a      	ldr	r2, [r7, #0]
 8011740:	4907      	ldr	r1, [pc, #28]	; (8011760 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011742:	4808      	ldr	r0, [pc, #32]	; (8011764 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011744:	f7fd fc55 	bl	800eff2 <USBD_GetString>
 8011748:	e004      	b.n	8011754 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801174a:	683a      	ldr	r2, [r7, #0]
 801174c:	4904      	ldr	r1, [pc, #16]	; (8011760 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801174e:	4805      	ldr	r0, [pc, #20]	; (8011764 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011750:	f7fd fc4f 	bl	800eff2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011754:	4b02      	ldr	r3, [pc, #8]	; (8011760 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8011756:	4618      	mov	r0, r3
 8011758:	3708      	adds	r7, #8
 801175a:	46bd      	mov	sp, r7
 801175c:	bd80      	pop	{r7, pc}
 801175e:	bf00      	nop
 8011760:	20002d88 	.word	0x20002d88
 8011764:	080152cc 	.word	0x080152cc

08011768 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b082      	sub	sp, #8
 801176c:	af00      	add	r7, sp, #0
 801176e:	4603      	mov	r3, r0
 8011770:	6039      	str	r1, [r7, #0]
 8011772:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011774:	79fb      	ldrb	r3, [r7, #7]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d105      	bne.n	8011786 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801177a:	683a      	ldr	r2, [r7, #0]
 801177c:	4907      	ldr	r1, [pc, #28]	; (801179c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801177e:	4808      	ldr	r0, [pc, #32]	; (80117a0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011780:	f7fd fc37 	bl	800eff2 <USBD_GetString>
 8011784:	e004      	b.n	8011790 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011786:	683a      	ldr	r2, [r7, #0]
 8011788:	4904      	ldr	r1, [pc, #16]	; (801179c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801178a:	4805      	ldr	r0, [pc, #20]	; (80117a0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801178c:	f7fd fc31 	bl	800eff2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011790:	4b02      	ldr	r3, [pc, #8]	; (801179c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8011792:	4618      	mov	r0, r3
 8011794:	3708      	adds	r7, #8
 8011796:	46bd      	mov	sp, r7
 8011798:	bd80      	pop	{r7, pc}
 801179a:	bf00      	nop
 801179c:	20002d88 	.word	0x20002d88
 80117a0:	080152d8 	.word	0x080152d8

080117a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b084      	sub	sp, #16
 80117a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80117aa:	4b0f      	ldr	r3, [pc, #60]	; (80117e8 <Get_SerialNum+0x44>)
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80117b0:	4b0e      	ldr	r3, [pc, #56]	; (80117ec <Get_SerialNum+0x48>)
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80117b6:	4b0e      	ldr	r3, [pc, #56]	; (80117f0 <Get_SerialNum+0x4c>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80117bc:	68fa      	ldr	r2, [r7, #12]
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	4413      	add	r3, r2
 80117c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d009      	beq.n	80117de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80117ca:	2208      	movs	r2, #8
 80117cc:	4909      	ldr	r1, [pc, #36]	; (80117f4 <Get_SerialNum+0x50>)
 80117ce:	68f8      	ldr	r0, [r7, #12]
 80117d0:	f000 f814 	bl	80117fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80117d4:	2204      	movs	r2, #4
 80117d6:	4908      	ldr	r1, [pc, #32]	; (80117f8 <Get_SerialNum+0x54>)
 80117d8:	68b8      	ldr	r0, [r7, #8]
 80117da:	f000 f80f 	bl	80117fc <IntToUnicode>
  }
}
 80117de:	bf00      	nop
 80117e0:	3710      	adds	r7, #16
 80117e2:	46bd      	mov	sp, r7
 80117e4:	bd80      	pop	{r7, pc}
 80117e6:	bf00      	nop
 80117e8:	1fff7590 	.word	0x1fff7590
 80117ec:	1fff7594 	.word	0x1fff7594
 80117f0:	1fff7598 	.word	0x1fff7598
 80117f4:	2000016e 	.word	0x2000016e
 80117f8:	2000017e 	.word	0x2000017e

080117fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80117fc:	b480      	push	{r7}
 80117fe:	b087      	sub	sp, #28
 8011800:	af00      	add	r7, sp, #0
 8011802:	60f8      	str	r0, [r7, #12]
 8011804:	60b9      	str	r1, [r7, #8]
 8011806:	4613      	mov	r3, r2
 8011808:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801180a:	2300      	movs	r3, #0
 801180c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801180e:	2300      	movs	r3, #0
 8011810:	75fb      	strb	r3, [r7, #23]
 8011812:	e027      	b.n	8011864 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	0f1b      	lsrs	r3, r3, #28
 8011818:	2b09      	cmp	r3, #9
 801181a:	d80b      	bhi.n	8011834 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	0f1b      	lsrs	r3, r3, #28
 8011820:	b2da      	uxtb	r2, r3
 8011822:	7dfb      	ldrb	r3, [r7, #23]
 8011824:	005b      	lsls	r3, r3, #1
 8011826:	4619      	mov	r1, r3
 8011828:	68bb      	ldr	r3, [r7, #8]
 801182a:	440b      	add	r3, r1
 801182c:	3230      	adds	r2, #48	; 0x30
 801182e:	b2d2      	uxtb	r2, r2
 8011830:	701a      	strb	r2, [r3, #0]
 8011832:	e00a      	b.n	801184a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	0f1b      	lsrs	r3, r3, #28
 8011838:	b2da      	uxtb	r2, r3
 801183a:	7dfb      	ldrb	r3, [r7, #23]
 801183c:	005b      	lsls	r3, r3, #1
 801183e:	4619      	mov	r1, r3
 8011840:	68bb      	ldr	r3, [r7, #8]
 8011842:	440b      	add	r3, r1
 8011844:	3237      	adds	r2, #55	; 0x37
 8011846:	b2d2      	uxtb	r2, r2
 8011848:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	011b      	lsls	r3, r3, #4
 801184e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011850:	7dfb      	ldrb	r3, [r7, #23]
 8011852:	005b      	lsls	r3, r3, #1
 8011854:	3301      	adds	r3, #1
 8011856:	68ba      	ldr	r2, [r7, #8]
 8011858:	4413      	add	r3, r2
 801185a:	2200      	movs	r2, #0
 801185c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801185e:	7dfb      	ldrb	r3, [r7, #23]
 8011860:	3301      	adds	r3, #1
 8011862:	75fb      	strb	r3, [r7, #23]
 8011864:	7dfa      	ldrb	r2, [r7, #23]
 8011866:	79fb      	ldrb	r3, [r7, #7]
 8011868:	429a      	cmp	r2, r3
 801186a:	d3d3      	bcc.n	8011814 <IntToUnicode+0x18>
  }
}
 801186c:	bf00      	nop
 801186e:	bf00      	nop
 8011870:	371c      	adds	r7, #28
 8011872:	46bd      	mov	sp, r7
 8011874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011878:	4770      	bx	lr
	...

0801187c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b098      	sub	sp, #96	; 0x60
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8011884:	f107 030c 	add.w	r3, r7, #12
 8011888:	2254      	movs	r2, #84	; 0x54
 801188a:	2100      	movs	r1, #0
 801188c:	4618      	mov	r0, r3
 801188e:	f000 fc2c 	bl	80120ea <memset>
  if(pcdHandle->Instance==USB)
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	4a15      	ldr	r2, [pc, #84]	; (80118ec <HAL_PCD_MspInit+0x70>)
 8011898:	4293      	cmp	r3, r2
 801189a:	d122      	bne.n	80118e2 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801189c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80118a0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80118a2:	2300      	movs	r3, #0
 80118a4:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80118a6:	f107 030c 	add.w	r3, r7, #12
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7f6 fc68 	bl	8008180 <HAL_RCCEx_PeriphCLKConfig>
 80118b0:	4603      	mov	r3, r0
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d001      	beq.n	80118ba <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80118b6:	f7f0 fa03 	bl	8001cc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80118ba:	4b0d      	ldr	r3, [pc, #52]	; (80118f0 <HAL_PCD_MspInit+0x74>)
 80118bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118be:	4a0c      	ldr	r2, [pc, #48]	; (80118f0 <HAL_PCD_MspInit+0x74>)
 80118c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80118c4:	6593      	str	r3, [r2, #88]	; 0x58
 80118c6:	4b0a      	ldr	r3, [pc, #40]	; (80118f0 <HAL_PCD_MspInit+0x74>)
 80118c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80118ce:	60bb      	str	r3, [r7, #8]
 80118d0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 80118d2:	2200      	movs	r2, #0
 80118d4:	2105      	movs	r1, #5
 80118d6:	2014      	movs	r0, #20
 80118d8:	f7f2 ffea 	bl	80048b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80118dc:	2014      	movs	r0, #20
 80118de:	f7f3 f801 	bl	80048e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80118e2:	bf00      	nop
 80118e4:	3760      	adds	r7, #96	; 0x60
 80118e6:	46bd      	mov	sp, r7
 80118e8:	bd80      	pop	{r7, pc}
 80118ea:	bf00      	nop
 80118ec:	40005c00 	.word	0x40005c00
 80118f0:	40021000 	.word	0x40021000

080118f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b082      	sub	sp, #8
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8011908:	4619      	mov	r1, r3
 801190a:	4610      	mov	r0, r2
 801190c:	f7fc fbd4 	bl	800e0b8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8011910:	bf00      	nop
 8011912:	3708      	adds	r7, #8
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}

08011918 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b082      	sub	sp, #8
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
 8011920:	460b      	mov	r3, r1
 8011922:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 801192a:	78fa      	ldrb	r2, [r7, #3]
 801192c:	6879      	ldr	r1, [r7, #4]
 801192e:	4613      	mov	r3, r2
 8011930:	009b      	lsls	r3, r3, #2
 8011932:	4413      	add	r3, r2
 8011934:	00db      	lsls	r3, r3, #3
 8011936:	440b      	add	r3, r1
 8011938:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801193c:	681a      	ldr	r2, [r3, #0]
 801193e:	78fb      	ldrb	r3, [r7, #3]
 8011940:	4619      	mov	r1, r3
 8011942:	f7fc fc0e 	bl	800e162 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8011946:	bf00      	nop
 8011948:	3708      	adds	r7, #8
 801194a:	46bd      	mov	sp, r7
 801194c:	bd80      	pop	{r7, pc}

0801194e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801194e:	b580      	push	{r7, lr}
 8011950:	b082      	sub	sp, #8
 8011952:	af00      	add	r7, sp, #0
 8011954:	6078      	str	r0, [r7, #4]
 8011956:	460b      	mov	r3, r1
 8011958:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8011960:	78fa      	ldrb	r2, [r7, #3]
 8011962:	6879      	ldr	r1, [r7, #4]
 8011964:	4613      	mov	r3, r2
 8011966:	009b      	lsls	r3, r3, #2
 8011968:	4413      	add	r3, r2
 801196a:	00db      	lsls	r3, r3, #3
 801196c:	440b      	add	r3, r1
 801196e:	333c      	adds	r3, #60	; 0x3c
 8011970:	681a      	ldr	r2, [r3, #0]
 8011972:	78fb      	ldrb	r3, [r7, #3]
 8011974:	4619      	mov	r1, r3
 8011976:	f7fc fc57 	bl	800e228 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801197a:	bf00      	nop
 801197c:	3708      	adds	r7, #8
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}

08011982 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011982:	b580      	push	{r7, lr}
 8011984:	b082      	sub	sp, #8
 8011986:	af00      	add	r7, sp, #0
 8011988:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011990:	4618      	mov	r0, r3
 8011992:	f7fc fd6b 	bl	800e46c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8011996:	bf00      	nop
 8011998:	3708      	adds	r7, #8
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}

0801199e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801199e:	b580      	push	{r7, lr}
 80119a0:	b084      	sub	sp, #16
 80119a2:	af00      	add	r7, sp, #0
 80119a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80119a6:	2301      	movs	r3, #1
 80119a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	689b      	ldr	r3, [r3, #8]
 80119ae:	2b02      	cmp	r3, #2
 80119b0:	d001      	beq.n	80119b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80119b2:	f7f0 f985 	bl	8001cc0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80119bc:	7bfa      	ldrb	r2, [r7, #15]
 80119be:	4611      	mov	r1, r2
 80119c0:	4618      	mov	r0, r3
 80119c2:	f7fc fd15 	bl	800e3f0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80119cc:	4618      	mov	r0, r3
 80119ce:	f7fc fcc1 	bl	800e354 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80119d2:	bf00      	nop
 80119d4:	3710      	adds	r7, #16
 80119d6:	46bd      	mov	sp, r7
 80119d8:	bd80      	pop	{r7, pc}
	...

080119dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119dc:	b580      	push	{r7, lr}
 80119de:	b082      	sub	sp, #8
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7fc fd10 	bl	800e410 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	699b      	ldr	r3, [r3, #24]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d005      	beq.n	8011a04 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80119f8:	4b04      	ldr	r3, [pc, #16]	; (8011a0c <HAL_PCD_SuspendCallback+0x30>)
 80119fa:	691b      	ldr	r3, [r3, #16]
 80119fc:	4a03      	ldr	r2, [pc, #12]	; (8011a0c <HAL_PCD_SuspendCallback+0x30>)
 80119fe:	f043 0306 	orr.w	r3, r3, #6
 8011a02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8011a04:	bf00      	nop
 8011a06:	3708      	adds	r7, #8
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	bd80      	pop	{r7, pc}
 8011a0c:	e000ed00 	.word	0xe000ed00

08011a10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b082      	sub	sp, #8
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	699b      	ldr	r3, [r3, #24]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d007      	beq.n	8011a30 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011a20:	4b08      	ldr	r3, [pc, #32]	; (8011a44 <HAL_PCD_ResumeCallback+0x34>)
 8011a22:	691b      	ldr	r3, [r3, #16]
 8011a24:	4a07      	ldr	r2, [pc, #28]	; (8011a44 <HAL_PCD_ResumeCallback+0x34>)
 8011a26:	f023 0306 	bic.w	r3, r3, #6
 8011a2a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8011a2c:	f000 f9fa 	bl	8011e24 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011a36:	4618      	mov	r0, r3
 8011a38:	f7fc fd00 	bl	800e43c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8011a3c:	bf00      	nop
 8011a3e:	3708      	adds	r7, #8
 8011a40:	46bd      	mov	sp, r7
 8011a42:	bd80      	pop	{r7, pc}
 8011a44:	e000ed00 	.word	0xe000ed00

08011a48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b082      	sub	sp, #8
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8011a50:	4a2b      	ldr	r2, [pc, #172]	; (8011b00 <USBD_LL_Init+0xb8>)
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	4a29      	ldr	r2, [pc, #164]	; (8011b00 <USBD_LL_Init+0xb8>)
 8011a5c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8011a60:	4b27      	ldr	r3, [pc, #156]	; (8011b00 <USBD_LL_Init+0xb8>)
 8011a62:	4a28      	ldr	r2, [pc, #160]	; (8011b04 <USBD_LL_Init+0xbc>)
 8011a64:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8011a66:	4b26      	ldr	r3, [pc, #152]	; (8011b00 <USBD_LL_Init+0xb8>)
 8011a68:	2208      	movs	r2, #8
 8011a6a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011a6c:	4b24      	ldr	r3, [pc, #144]	; (8011b00 <USBD_LL_Init+0xb8>)
 8011a6e:	2202      	movs	r2, #2
 8011a70:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011a72:	4b23      	ldr	r3, [pc, #140]	; (8011b00 <USBD_LL_Init+0xb8>)
 8011a74:	2202      	movs	r2, #2
 8011a76:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8011a78:	4b21      	ldr	r3, [pc, #132]	; (8011b00 <USBD_LL_Init+0xb8>)
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8011a7e:	4b20      	ldr	r3, [pc, #128]	; (8011b00 <USBD_LL_Init+0xb8>)
 8011a80:	2200      	movs	r2, #0
 8011a82:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011a84:	4b1e      	ldr	r3, [pc, #120]	; (8011b00 <USBD_LL_Init+0xb8>)
 8011a86:	2200      	movs	r2, #0
 8011a88:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8011a8a:	4b1d      	ldr	r3, [pc, #116]	; (8011b00 <USBD_LL_Init+0xb8>)
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8011a90:	481b      	ldr	r0, [pc, #108]	; (8011b00 <USBD_LL_Init+0xb8>)
 8011a92:	f7f4 f83c 	bl	8005b0e <HAL_PCD_Init>
 8011a96:	4603      	mov	r3, r0
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d001      	beq.n	8011aa0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8011a9c:	f7f0 f910 	bl	8001cc0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011aa6:	2318      	movs	r3, #24
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	2100      	movs	r1, #0
 8011aac:	f7f5 fcf5 	bl	800749a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011ab6:	2358      	movs	r3, #88	; 0x58
 8011ab8:	2200      	movs	r2, #0
 8011aba:	2180      	movs	r1, #128	; 0x80
 8011abc:	f7f5 fced 	bl	800749a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011ac6:	23c0      	movs	r3, #192	; 0xc0
 8011ac8:	2200      	movs	r2, #0
 8011aca:	2181      	movs	r1, #129	; 0x81
 8011acc:	f7f5 fce5 	bl	800749a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011ad6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8011ada:	2200      	movs	r2, #0
 8011adc:	2101      	movs	r1, #1
 8011ade:	f7f5 fcdc 	bl	800749a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011ae8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011aec:	2200      	movs	r2, #0
 8011aee:	2182      	movs	r1, #130	; 0x82
 8011af0:	f7f5 fcd3 	bl	800749a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8011af4:	2300      	movs	r3, #0
}
 8011af6:	4618      	mov	r0, r3
 8011af8:	3708      	adds	r7, #8
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd80      	pop	{r7, pc}
 8011afe:	bf00      	nop
 8011b00:	20002f88 	.word	0x20002f88
 8011b04:	40005c00 	.word	0x40005c00

08011b08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b084      	sub	sp, #16
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b10:	2300      	movs	r3, #0
 8011b12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b14:	2300      	movs	r3, #0
 8011b16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f7f4 f8da 	bl	8005cd8 <HAL_PCD_Start>
 8011b24:	4603      	mov	r3, r0
 8011b26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b28:	7bfb      	ldrb	r3, [r7, #15]
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f000 f980 	bl	8011e30 <USBD_Get_USB_Status>
 8011b30:	4603      	mov	r3, r0
 8011b32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b34:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b36:	4618      	mov	r0, r3
 8011b38:	3710      	adds	r7, #16
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	bd80      	pop	{r7, pc}

08011b3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011b3e:	b580      	push	{r7, lr}
 8011b40:	b084      	sub	sp, #16
 8011b42:	af00      	add	r7, sp, #0
 8011b44:	6078      	str	r0, [r7, #4]
 8011b46:	4608      	mov	r0, r1
 8011b48:	4611      	mov	r1, r2
 8011b4a:	461a      	mov	r2, r3
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	70fb      	strb	r3, [r7, #3]
 8011b50:	460b      	mov	r3, r1
 8011b52:	70bb      	strb	r3, [r7, #2]
 8011b54:	4613      	mov	r3, r2
 8011b56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b58:	2300      	movs	r3, #0
 8011b5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011b66:	78bb      	ldrb	r3, [r7, #2]
 8011b68:	883a      	ldrh	r2, [r7, #0]
 8011b6a:	78f9      	ldrb	r1, [r7, #3]
 8011b6c:	f7f4 fa22 	bl	8005fb4 <HAL_PCD_EP_Open>
 8011b70:	4603      	mov	r3, r0
 8011b72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b74:	7bfb      	ldrb	r3, [r7, #15]
 8011b76:	4618      	mov	r0, r3
 8011b78:	f000 f95a 	bl	8011e30 <USBD_Get_USB_Status>
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b80:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b82:	4618      	mov	r0, r3
 8011b84:	3710      	adds	r7, #16
 8011b86:	46bd      	mov	sp, r7
 8011b88:	bd80      	pop	{r7, pc}

08011b8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b8a:	b580      	push	{r7, lr}
 8011b8c:	b084      	sub	sp, #16
 8011b8e:	af00      	add	r7, sp, #0
 8011b90:	6078      	str	r0, [r7, #4]
 8011b92:	460b      	mov	r3, r1
 8011b94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b96:	2300      	movs	r3, #0
 8011b98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011ba4:	78fa      	ldrb	r2, [r7, #3]
 8011ba6:	4611      	mov	r1, r2
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f7f4 fa69 	bl	8006080 <HAL_PCD_EP_Close>
 8011bae:	4603      	mov	r3, r0
 8011bb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011bb2:	7bfb      	ldrb	r3, [r7, #15]
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	f000 f93b 	bl	8011e30 <USBD_Get_USB_Status>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011bbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	3710      	adds	r7, #16
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bd80      	pop	{r7, pc}

08011bc8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b084      	sub	sp, #16
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
 8011bd0:	460b      	mov	r3, r1
 8011bd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bd8:	2300      	movs	r3, #0
 8011bda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011be2:	78fa      	ldrb	r2, [r7, #3]
 8011be4:	4611      	mov	r1, r2
 8011be6:	4618      	mov	r0, r3
 8011be8:	f7f4 fb2a 	bl	8006240 <HAL_PCD_EP_SetStall>
 8011bec:	4603      	mov	r3, r0
 8011bee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011bf0:	7bfb      	ldrb	r3, [r7, #15]
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f000 f91c 	bl	8011e30 <USBD_Get_USB_Status>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011bfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8011bfe:	4618      	mov	r0, r3
 8011c00:	3710      	adds	r7, #16
 8011c02:	46bd      	mov	sp, r7
 8011c04:	bd80      	pop	{r7, pc}

08011c06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c06:	b580      	push	{r7, lr}
 8011c08:	b084      	sub	sp, #16
 8011c0a:	af00      	add	r7, sp, #0
 8011c0c:	6078      	str	r0, [r7, #4]
 8011c0e:	460b      	mov	r3, r1
 8011c10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c12:	2300      	movs	r3, #0
 8011c14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c16:	2300      	movs	r3, #0
 8011c18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011c20:	78fa      	ldrb	r2, [r7, #3]
 8011c22:	4611      	mov	r1, r2
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7f4 fb5d 	bl	80062e4 <HAL_PCD_EP_ClrStall>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c2e:	7bfb      	ldrb	r3, [r7, #15]
 8011c30:	4618      	mov	r0, r3
 8011c32:	f000 f8fd 	bl	8011e30 <USBD_Get_USB_Status>
 8011c36:	4603      	mov	r3, r0
 8011c38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	3710      	adds	r7, #16
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bd80      	pop	{r7, pc}

08011c44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c44:	b480      	push	{r7}
 8011c46:	b085      	sub	sp, #20
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
 8011c4c:	460b      	mov	r3, r1
 8011c4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011c56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011c58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	da0c      	bge.n	8011c7a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011c60:	78fb      	ldrb	r3, [r7, #3]
 8011c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c66:	68f9      	ldr	r1, [r7, #12]
 8011c68:	1c5a      	adds	r2, r3, #1
 8011c6a:	4613      	mov	r3, r2
 8011c6c:	009b      	lsls	r3, r3, #2
 8011c6e:	4413      	add	r3, r2
 8011c70:	00db      	lsls	r3, r3, #3
 8011c72:	440b      	add	r3, r1
 8011c74:	3302      	adds	r3, #2
 8011c76:	781b      	ldrb	r3, [r3, #0]
 8011c78:	e00b      	b.n	8011c92 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011c7a:	78fb      	ldrb	r3, [r7, #3]
 8011c7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011c80:	68f9      	ldr	r1, [r7, #12]
 8011c82:	4613      	mov	r3, r2
 8011c84:	009b      	lsls	r3, r3, #2
 8011c86:	4413      	add	r3, r2
 8011c88:	00db      	lsls	r3, r3, #3
 8011c8a:	440b      	add	r3, r1
 8011c8c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8011c90:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011c92:	4618      	mov	r0, r3
 8011c94:	3714      	adds	r7, #20
 8011c96:	46bd      	mov	sp, r7
 8011c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9c:	4770      	bx	lr

08011c9e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011c9e:	b580      	push	{r7, lr}
 8011ca0:	b084      	sub	sp, #16
 8011ca2:	af00      	add	r7, sp, #0
 8011ca4:	6078      	str	r0, [r7, #4]
 8011ca6:	460b      	mov	r3, r1
 8011ca8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011caa:	2300      	movs	r3, #0
 8011cac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cae:	2300      	movs	r3, #0
 8011cb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011cb8:	78fa      	ldrb	r2, [r7, #3]
 8011cba:	4611      	mov	r1, r2
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f7f4 f954 	bl	8005f6a <HAL_PCD_SetAddress>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011cc6:	7bfb      	ldrb	r3, [r7, #15]
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f000 f8b1 	bl	8011e30 <USBD_Get_USB_Status>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011cd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	3710      	adds	r7, #16
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	bd80      	pop	{r7, pc}

08011cdc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b086      	sub	sp, #24
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	60f8      	str	r0, [r7, #12]
 8011ce4:	607a      	str	r2, [r7, #4]
 8011ce6:	603b      	str	r3, [r7, #0]
 8011ce8:	460b      	mov	r3, r1
 8011cea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cec:	2300      	movs	r3, #0
 8011cee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011cfa:	7af9      	ldrb	r1, [r7, #11]
 8011cfc:	683b      	ldr	r3, [r7, #0]
 8011cfe:	687a      	ldr	r2, [r7, #4]
 8011d00:	f7f4 fa5b 	bl	80061ba <HAL_PCD_EP_Transmit>
 8011d04:	4603      	mov	r3, r0
 8011d06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d08:	7dfb      	ldrb	r3, [r7, #23]
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	f000 f890 	bl	8011e30 <USBD_Get_USB_Status>
 8011d10:	4603      	mov	r3, r0
 8011d12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011d14:	7dbb      	ldrb	r3, [r7, #22]
}
 8011d16:	4618      	mov	r0, r3
 8011d18:	3718      	adds	r7, #24
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}

08011d1e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011d1e:	b580      	push	{r7, lr}
 8011d20:	b086      	sub	sp, #24
 8011d22:	af00      	add	r7, sp, #0
 8011d24:	60f8      	str	r0, [r7, #12]
 8011d26:	607a      	str	r2, [r7, #4]
 8011d28:	603b      	str	r3, [r7, #0]
 8011d2a:	460b      	mov	r3, r1
 8011d2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d2e:	2300      	movs	r3, #0
 8011d30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d32:	2300      	movs	r3, #0
 8011d34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011d3c:	7af9      	ldrb	r1, [r7, #11]
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	687a      	ldr	r2, [r7, #4]
 8011d42:	f7f4 f9e5 	bl	8006110 <HAL_PCD_EP_Receive>
 8011d46:	4603      	mov	r3, r0
 8011d48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d4a:	7dfb      	ldrb	r3, [r7, #23]
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f000 f86f 	bl	8011e30 <USBD_Get_USB_Status>
 8011d52:	4603      	mov	r3, r0
 8011d54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011d56:	7dbb      	ldrb	r3, [r7, #22]
}
 8011d58:	4618      	mov	r0, r3
 8011d5a:	3718      	adds	r7, #24
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	bd80      	pop	{r7, pc}

08011d60 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b082      	sub	sp, #8
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
 8011d68:	460b      	mov	r3, r1
 8011d6a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011d72:	78fa      	ldrb	r2, [r7, #3]
 8011d74:	4611      	mov	r1, r2
 8011d76:	4618      	mov	r0, r3
 8011d78:	f7f4 fa07 	bl	800618a <HAL_PCD_EP_GetRxCount>
 8011d7c:	4603      	mov	r3, r0
}
 8011d7e:	4618      	mov	r0, r3
 8011d80:	3708      	adds	r7, #8
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}
	...

08011d88 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b082      	sub	sp, #8
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
 8011d90:	460b      	mov	r3, r1
 8011d92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011d94:	78fb      	ldrb	r3, [r7, #3]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d002      	beq.n	8011da0 <HAL_PCDEx_LPM_Callback+0x18>
 8011d9a:	2b01      	cmp	r3, #1
 8011d9c:	d013      	beq.n	8011dc6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8011d9e:	e023      	b.n	8011de8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	699b      	ldr	r3, [r3, #24]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d007      	beq.n	8011db8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011da8:	f000 f83c 	bl	8011e24 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011dac:	4b10      	ldr	r3, [pc, #64]	; (8011df0 <HAL_PCDEx_LPM_Callback+0x68>)
 8011dae:	691b      	ldr	r3, [r3, #16]
 8011db0:	4a0f      	ldr	r2, [pc, #60]	; (8011df0 <HAL_PCDEx_LPM_Callback+0x68>)
 8011db2:	f023 0306 	bic.w	r3, r3, #6
 8011db6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f7fc fb3c 	bl	800e43c <USBD_LL_Resume>
    break;
 8011dc4:	e010      	b.n	8011de8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011dcc:	4618      	mov	r0, r3
 8011dce:	f7fc fb1f 	bl	800e410 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	699b      	ldr	r3, [r3, #24]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d005      	beq.n	8011de6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011dda:	4b05      	ldr	r3, [pc, #20]	; (8011df0 <HAL_PCDEx_LPM_Callback+0x68>)
 8011ddc:	691b      	ldr	r3, [r3, #16]
 8011dde:	4a04      	ldr	r2, [pc, #16]	; (8011df0 <HAL_PCDEx_LPM_Callback+0x68>)
 8011de0:	f043 0306 	orr.w	r3, r3, #6
 8011de4:	6113      	str	r3, [r2, #16]
    break;
 8011de6:	bf00      	nop
}
 8011de8:	bf00      	nop
 8011dea:	3708      	adds	r7, #8
 8011dec:	46bd      	mov	sp, r7
 8011dee:	bd80      	pop	{r7, pc}
 8011df0:	e000ed00 	.word	0xe000ed00

08011df4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011df4:	b480      	push	{r7}
 8011df6:	b083      	sub	sp, #12
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011dfc:	4b03      	ldr	r3, [pc, #12]	; (8011e0c <USBD_static_malloc+0x18>)
}
 8011dfe:	4618      	mov	r0, r3
 8011e00:	370c      	adds	r7, #12
 8011e02:	46bd      	mov	sp, r7
 8011e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e08:	4770      	bx	lr
 8011e0a:	bf00      	nop
 8011e0c:	2000327c 	.word	0x2000327c

08011e10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011e10:	b480      	push	{r7}
 8011e12:	b083      	sub	sp, #12
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]

}
 8011e18:	bf00      	nop
 8011e1a:	370c      	adds	r7, #12
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e22:	4770      	bx	lr

08011e24 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011e28:	f7ef feda 	bl	8001be0 <SystemClock_Config>
}
 8011e2c:	bf00      	nop
 8011e2e:	bd80      	pop	{r7, pc}

08011e30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011e30:	b480      	push	{r7}
 8011e32:	b085      	sub	sp, #20
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	4603      	mov	r3, r0
 8011e38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011e3e:	79fb      	ldrb	r3, [r7, #7]
 8011e40:	2b03      	cmp	r3, #3
 8011e42:	d817      	bhi.n	8011e74 <USBD_Get_USB_Status+0x44>
 8011e44:	a201      	add	r2, pc, #4	; (adr r2, 8011e4c <USBD_Get_USB_Status+0x1c>)
 8011e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e4a:	bf00      	nop
 8011e4c:	08011e5d 	.word	0x08011e5d
 8011e50:	08011e63 	.word	0x08011e63
 8011e54:	08011e69 	.word	0x08011e69
 8011e58:	08011e6f 	.word	0x08011e6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8011e60:	e00b      	b.n	8011e7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011e62:	2303      	movs	r3, #3
 8011e64:	73fb      	strb	r3, [r7, #15]
    break;
 8011e66:	e008      	b.n	8011e7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011e68:	2301      	movs	r3, #1
 8011e6a:	73fb      	strb	r3, [r7, #15]
    break;
 8011e6c:	e005      	b.n	8011e7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011e6e:	2303      	movs	r3, #3
 8011e70:	73fb      	strb	r3, [r7, #15]
    break;
 8011e72:	e002      	b.n	8011e7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011e74:	2303      	movs	r3, #3
 8011e76:	73fb      	strb	r3, [r7, #15]
    break;
 8011e78:	bf00      	nop
  }
  return usb_status;
 8011e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	3714      	adds	r7, #20
 8011e80:	46bd      	mov	sp, r7
 8011e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e86:	4770      	bx	lr

08011e88 <__errno>:
 8011e88:	4b01      	ldr	r3, [pc, #4]	; (8011e90 <__errno+0x8>)
 8011e8a:	6818      	ldr	r0, [r3, #0]
 8011e8c:	4770      	bx	lr
 8011e8e:	bf00      	nop
 8011e90:	20000188 	.word	0x20000188

08011e94 <std>:
 8011e94:	2300      	movs	r3, #0
 8011e96:	b510      	push	{r4, lr}
 8011e98:	4604      	mov	r4, r0
 8011e9a:	e9c0 3300 	strd	r3, r3, [r0]
 8011e9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011ea2:	6083      	str	r3, [r0, #8]
 8011ea4:	8181      	strh	r1, [r0, #12]
 8011ea6:	6643      	str	r3, [r0, #100]	; 0x64
 8011ea8:	81c2      	strh	r2, [r0, #14]
 8011eaa:	6183      	str	r3, [r0, #24]
 8011eac:	4619      	mov	r1, r3
 8011eae:	2208      	movs	r2, #8
 8011eb0:	305c      	adds	r0, #92	; 0x5c
 8011eb2:	f000 f91a 	bl	80120ea <memset>
 8011eb6:	4b05      	ldr	r3, [pc, #20]	; (8011ecc <std+0x38>)
 8011eb8:	6263      	str	r3, [r4, #36]	; 0x24
 8011eba:	4b05      	ldr	r3, [pc, #20]	; (8011ed0 <std+0x3c>)
 8011ebc:	62a3      	str	r3, [r4, #40]	; 0x28
 8011ebe:	4b05      	ldr	r3, [pc, #20]	; (8011ed4 <std+0x40>)
 8011ec0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011ec2:	4b05      	ldr	r3, [pc, #20]	; (8011ed8 <std+0x44>)
 8011ec4:	6224      	str	r4, [r4, #32]
 8011ec6:	6323      	str	r3, [r4, #48]	; 0x30
 8011ec8:	bd10      	pop	{r4, pc}
 8011eca:	bf00      	nop
 8011ecc:	08012db1 	.word	0x08012db1
 8011ed0:	08012dd3 	.word	0x08012dd3
 8011ed4:	08012e0b 	.word	0x08012e0b
 8011ed8:	08012e2f 	.word	0x08012e2f

08011edc <_cleanup_r>:
 8011edc:	4901      	ldr	r1, [pc, #4]	; (8011ee4 <_cleanup_r+0x8>)
 8011ede:	f000 b8af 	b.w	8012040 <_fwalk_reent>
 8011ee2:	bf00      	nop
 8011ee4:	08013e01 	.word	0x08013e01

08011ee8 <__sfmoreglue>:
 8011ee8:	b570      	push	{r4, r5, r6, lr}
 8011eea:	2268      	movs	r2, #104	; 0x68
 8011eec:	1e4d      	subs	r5, r1, #1
 8011eee:	4355      	muls	r5, r2
 8011ef0:	460e      	mov	r6, r1
 8011ef2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011ef6:	f000 f921 	bl	801213c <_malloc_r>
 8011efa:	4604      	mov	r4, r0
 8011efc:	b140      	cbz	r0, 8011f10 <__sfmoreglue+0x28>
 8011efe:	2100      	movs	r1, #0
 8011f00:	e9c0 1600 	strd	r1, r6, [r0]
 8011f04:	300c      	adds	r0, #12
 8011f06:	60a0      	str	r0, [r4, #8]
 8011f08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011f0c:	f000 f8ed 	bl	80120ea <memset>
 8011f10:	4620      	mov	r0, r4
 8011f12:	bd70      	pop	{r4, r5, r6, pc}

08011f14 <__sfp_lock_acquire>:
 8011f14:	4801      	ldr	r0, [pc, #4]	; (8011f1c <__sfp_lock_acquire+0x8>)
 8011f16:	f000 b8d8 	b.w	80120ca <__retarget_lock_acquire_recursive>
 8011f1a:	bf00      	nop
 8011f1c:	2000349d 	.word	0x2000349d

08011f20 <__sfp_lock_release>:
 8011f20:	4801      	ldr	r0, [pc, #4]	; (8011f28 <__sfp_lock_release+0x8>)
 8011f22:	f000 b8d3 	b.w	80120cc <__retarget_lock_release_recursive>
 8011f26:	bf00      	nop
 8011f28:	2000349d 	.word	0x2000349d

08011f2c <__sinit_lock_acquire>:
 8011f2c:	4801      	ldr	r0, [pc, #4]	; (8011f34 <__sinit_lock_acquire+0x8>)
 8011f2e:	f000 b8cc 	b.w	80120ca <__retarget_lock_acquire_recursive>
 8011f32:	bf00      	nop
 8011f34:	2000349e 	.word	0x2000349e

08011f38 <__sinit_lock_release>:
 8011f38:	4801      	ldr	r0, [pc, #4]	; (8011f40 <__sinit_lock_release+0x8>)
 8011f3a:	f000 b8c7 	b.w	80120cc <__retarget_lock_release_recursive>
 8011f3e:	bf00      	nop
 8011f40:	2000349e 	.word	0x2000349e

08011f44 <__sinit>:
 8011f44:	b510      	push	{r4, lr}
 8011f46:	4604      	mov	r4, r0
 8011f48:	f7ff fff0 	bl	8011f2c <__sinit_lock_acquire>
 8011f4c:	69a3      	ldr	r3, [r4, #24]
 8011f4e:	b11b      	cbz	r3, 8011f58 <__sinit+0x14>
 8011f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f54:	f7ff bff0 	b.w	8011f38 <__sinit_lock_release>
 8011f58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011f5c:	6523      	str	r3, [r4, #80]	; 0x50
 8011f5e:	4b13      	ldr	r3, [pc, #76]	; (8011fac <__sinit+0x68>)
 8011f60:	4a13      	ldr	r2, [pc, #76]	; (8011fb0 <__sinit+0x6c>)
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	62a2      	str	r2, [r4, #40]	; 0x28
 8011f66:	42a3      	cmp	r3, r4
 8011f68:	bf04      	itt	eq
 8011f6a:	2301      	moveq	r3, #1
 8011f6c:	61a3      	streq	r3, [r4, #24]
 8011f6e:	4620      	mov	r0, r4
 8011f70:	f000 f820 	bl	8011fb4 <__sfp>
 8011f74:	6060      	str	r0, [r4, #4]
 8011f76:	4620      	mov	r0, r4
 8011f78:	f000 f81c 	bl	8011fb4 <__sfp>
 8011f7c:	60a0      	str	r0, [r4, #8]
 8011f7e:	4620      	mov	r0, r4
 8011f80:	f000 f818 	bl	8011fb4 <__sfp>
 8011f84:	2200      	movs	r2, #0
 8011f86:	60e0      	str	r0, [r4, #12]
 8011f88:	2104      	movs	r1, #4
 8011f8a:	6860      	ldr	r0, [r4, #4]
 8011f8c:	f7ff ff82 	bl	8011e94 <std>
 8011f90:	68a0      	ldr	r0, [r4, #8]
 8011f92:	2201      	movs	r2, #1
 8011f94:	2109      	movs	r1, #9
 8011f96:	f7ff ff7d 	bl	8011e94 <std>
 8011f9a:	68e0      	ldr	r0, [r4, #12]
 8011f9c:	2202      	movs	r2, #2
 8011f9e:	2112      	movs	r1, #18
 8011fa0:	f7ff ff78 	bl	8011e94 <std>
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	61a3      	str	r3, [r4, #24]
 8011fa8:	e7d2      	b.n	8011f50 <__sinit+0xc>
 8011faa:	bf00      	nop
 8011fac:	0801538c 	.word	0x0801538c
 8011fb0:	08011edd 	.word	0x08011edd

08011fb4 <__sfp>:
 8011fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fb6:	4607      	mov	r7, r0
 8011fb8:	f7ff ffac 	bl	8011f14 <__sfp_lock_acquire>
 8011fbc:	4b1e      	ldr	r3, [pc, #120]	; (8012038 <__sfp+0x84>)
 8011fbe:	681e      	ldr	r6, [r3, #0]
 8011fc0:	69b3      	ldr	r3, [r6, #24]
 8011fc2:	b913      	cbnz	r3, 8011fca <__sfp+0x16>
 8011fc4:	4630      	mov	r0, r6
 8011fc6:	f7ff ffbd 	bl	8011f44 <__sinit>
 8011fca:	3648      	adds	r6, #72	; 0x48
 8011fcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011fd0:	3b01      	subs	r3, #1
 8011fd2:	d503      	bpl.n	8011fdc <__sfp+0x28>
 8011fd4:	6833      	ldr	r3, [r6, #0]
 8011fd6:	b30b      	cbz	r3, 801201c <__sfp+0x68>
 8011fd8:	6836      	ldr	r6, [r6, #0]
 8011fda:	e7f7      	b.n	8011fcc <__sfp+0x18>
 8011fdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011fe0:	b9d5      	cbnz	r5, 8012018 <__sfp+0x64>
 8011fe2:	4b16      	ldr	r3, [pc, #88]	; (801203c <__sfp+0x88>)
 8011fe4:	60e3      	str	r3, [r4, #12]
 8011fe6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011fea:	6665      	str	r5, [r4, #100]	; 0x64
 8011fec:	f000 f86c 	bl	80120c8 <__retarget_lock_init_recursive>
 8011ff0:	f7ff ff96 	bl	8011f20 <__sfp_lock_release>
 8011ff4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011ff8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011ffc:	6025      	str	r5, [r4, #0]
 8011ffe:	61a5      	str	r5, [r4, #24]
 8012000:	2208      	movs	r2, #8
 8012002:	4629      	mov	r1, r5
 8012004:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012008:	f000 f86f 	bl	80120ea <memset>
 801200c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012010:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012014:	4620      	mov	r0, r4
 8012016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012018:	3468      	adds	r4, #104	; 0x68
 801201a:	e7d9      	b.n	8011fd0 <__sfp+0x1c>
 801201c:	2104      	movs	r1, #4
 801201e:	4638      	mov	r0, r7
 8012020:	f7ff ff62 	bl	8011ee8 <__sfmoreglue>
 8012024:	4604      	mov	r4, r0
 8012026:	6030      	str	r0, [r6, #0]
 8012028:	2800      	cmp	r0, #0
 801202a:	d1d5      	bne.n	8011fd8 <__sfp+0x24>
 801202c:	f7ff ff78 	bl	8011f20 <__sfp_lock_release>
 8012030:	230c      	movs	r3, #12
 8012032:	603b      	str	r3, [r7, #0]
 8012034:	e7ee      	b.n	8012014 <__sfp+0x60>
 8012036:	bf00      	nop
 8012038:	0801538c 	.word	0x0801538c
 801203c:	ffff0001 	.word	0xffff0001

08012040 <_fwalk_reent>:
 8012040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012044:	4606      	mov	r6, r0
 8012046:	4688      	mov	r8, r1
 8012048:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801204c:	2700      	movs	r7, #0
 801204e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012052:	f1b9 0901 	subs.w	r9, r9, #1
 8012056:	d505      	bpl.n	8012064 <_fwalk_reent+0x24>
 8012058:	6824      	ldr	r4, [r4, #0]
 801205a:	2c00      	cmp	r4, #0
 801205c:	d1f7      	bne.n	801204e <_fwalk_reent+0xe>
 801205e:	4638      	mov	r0, r7
 8012060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012064:	89ab      	ldrh	r3, [r5, #12]
 8012066:	2b01      	cmp	r3, #1
 8012068:	d907      	bls.n	801207a <_fwalk_reent+0x3a>
 801206a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801206e:	3301      	adds	r3, #1
 8012070:	d003      	beq.n	801207a <_fwalk_reent+0x3a>
 8012072:	4629      	mov	r1, r5
 8012074:	4630      	mov	r0, r6
 8012076:	47c0      	blx	r8
 8012078:	4307      	orrs	r7, r0
 801207a:	3568      	adds	r5, #104	; 0x68
 801207c:	e7e9      	b.n	8012052 <_fwalk_reent+0x12>
	...

08012080 <__libc_init_array>:
 8012080:	b570      	push	{r4, r5, r6, lr}
 8012082:	4d0d      	ldr	r5, [pc, #52]	; (80120b8 <__libc_init_array+0x38>)
 8012084:	4c0d      	ldr	r4, [pc, #52]	; (80120bc <__libc_init_array+0x3c>)
 8012086:	1b64      	subs	r4, r4, r5
 8012088:	10a4      	asrs	r4, r4, #2
 801208a:	2600      	movs	r6, #0
 801208c:	42a6      	cmp	r6, r4
 801208e:	d109      	bne.n	80120a4 <__libc_init_array+0x24>
 8012090:	4d0b      	ldr	r5, [pc, #44]	; (80120c0 <__libc_init_array+0x40>)
 8012092:	4c0c      	ldr	r4, [pc, #48]	; (80120c4 <__libc_init_array+0x44>)
 8012094:	f002 ff3c 	bl	8014f10 <_init>
 8012098:	1b64      	subs	r4, r4, r5
 801209a:	10a4      	asrs	r4, r4, #2
 801209c:	2600      	movs	r6, #0
 801209e:	42a6      	cmp	r6, r4
 80120a0:	d105      	bne.n	80120ae <__libc_init_array+0x2e>
 80120a2:	bd70      	pop	{r4, r5, r6, pc}
 80120a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80120a8:	4798      	blx	r3
 80120aa:	3601      	adds	r6, #1
 80120ac:	e7ee      	b.n	801208c <__libc_init_array+0xc>
 80120ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80120b2:	4798      	blx	r3
 80120b4:	3601      	adds	r6, #1
 80120b6:	e7f2      	b.n	801209e <__libc_init_array+0x1e>
 80120b8:	0801570c 	.word	0x0801570c
 80120bc:	0801570c 	.word	0x0801570c
 80120c0:	0801570c 	.word	0x0801570c
 80120c4:	08015710 	.word	0x08015710

080120c8 <__retarget_lock_init_recursive>:
 80120c8:	4770      	bx	lr

080120ca <__retarget_lock_acquire_recursive>:
 80120ca:	4770      	bx	lr

080120cc <__retarget_lock_release_recursive>:
 80120cc:	4770      	bx	lr

080120ce <memcpy>:
 80120ce:	440a      	add	r2, r1
 80120d0:	4291      	cmp	r1, r2
 80120d2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80120d6:	d100      	bne.n	80120da <memcpy+0xc>
 80120d8:	4770      	bx	lr
 80120da:	b510      	push	{r4, lr}
 80120dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80120e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80120e4:	4291      	cmp	r1, r2
 80120e6:	d1f9      	bne.n	80120dc <memcpy+0xe>
 80120e8:	bd10      	pop	{r4, pc}

080120ea <memset>:
 80120ea:	4402      	add	r2, r0
 80120ec:	4603      	mov	r3, r0
 80120ee:	4293      	cmp	r3, r2
 80120f0:	d100      	bne.n	80120f4 <memset+0xa>
 80120f2:	4770      	bx	lr
 80120f4:	f803 1b01 	strb.w	r1, [r3], #1
 80120f8:	e7f9      	b.n	80120ee <memset+0x4>
	...

080120fc <sbrk_aligned>:
 80120fc:	b570      	push	{r4, r5, r6, lr}
 80120fe:	4e0e      	ldr	r6, [pc, #56]	; (8012138 <sbrk_aligned+0x3c>)
 8012100:	460c      	mov	r4, r1
 8012102:	6831      	ldr	r1, [r6, #0]
 8012104:	4605      	mov	r5, r0
 8012106:	b911      	cbnz	r1, 801210e <sbrk_aligned+0x12>
 8012108:	f000 fdee 	bl	8012ce8 <_sbrk_r>
 801210c:	6030      	str	r0, [r6, #0]
 801210e:	4621      	mov	r1, r4
 8012110:	4628      	mov	r0, r5
 8012112:	f000 fde9 	bl	8012ce8 <_sbrk_r>
 8012116:	1c43      	adds	r3, r0, #1
 8012118:	d00a      	beq.n	8012130 <sbrk_aligned+0x34>
 801211a:	1cc4      	adds	r4, r0, #3
 801211c:	f024 0403 	bic.w	r4, r4, #3
 8012120:	42a0      	cmp	r0, r4
 8012122:	d007      	beq.n	8012134 <sbrk_aligned+0x38>
 8012124:	1a21      	subs	r1, r4, r0
 8012126:	4628      	mov	r0, r5
 8012128:	f000 fdde 	bl	8012ce8 <_sbrk_r>
 801212c:	3001      	adds	r0, #1
 801212e:	d101      	bne.n	8012134 <sbrk_aligned+0x38>
 8012130:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8012134:	4620      	mov	r0, r4
 8012136:	bd70      	pop	{r4, r5, r6, pc}
 8012138:	200034a4 	.word	0x200034a4

0801213c <_malloc_r>:
 801213c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012140:	1ccd      	adds	r5, r1, #3
 8012142:	f025 0503 	bic.w	r5, r5, #3
 8012146:	3508      	adds	r5, #8
 8012148:	2d0c      	cmp	r5, #12
 801214a:	bf38      	it	cc
 801214c:	250c      	movcc	r5, #12
 801214e:	2d00      	cmp	r5, #0
 8012150:	4607      	mov	r7, r0
 8012152:	db01      	blt.n	8012158 <_malloc_r+0x1c>
 8012154:	42a9      	cmp	r1, r5
 8012156:	d905      	bls.n	8012164 <_malloc_r+0x28>
 8012158:	230c      	movs	r3, #12
 801215a:	603b      	str	r3, [r7, #0]
 801215c:	2600      	movs	r6, #0
 801215e:	4630      	mov	r0, r6
 8012160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012164:	4e2e      	ldr	r6, [pc, #184]	; (8012220 <_malloc_r+0xe4>)
 8012166:	f001 ff0b 	bl	8013f80 <__malloc_lock>
 801216a:	6833      	ldr	r3, [r6, #0]
 801216c:	461c      	mov	r4, r3
 801216e:	bb34      	cbnz	r4, 80121be <_malloc_r+0x82>
 8012170:	4629      	mov	r1, r5
 8012172:	4638      	mov	r0, r7
 8012174:	f7ff ffc2 	bl	80120fc <sbrk_aligned>
 8012178:	1c43      	adds	r3, r0, #1
 801217a:	4604      	mov	r4, r0
 801217c:	d14d      	bne.n	801221a <_malloc_r+0xde>
 801217e:	6834      	ldr	r4, [r6, #0]
 8012180:	4626      	mov	r6, r4
 8012182:	2e00      	cmp	r6, #0
 8012184:	d140      	bne.n	8012208 <_malloc_r+0xcc>
 8012186:	6823      	ldr	r3, [r4, #0]
 8012188:	4631      	mov	r1, r6
 801218a:	4638      	mov	r0, r7
 801218c:	eb04 0803 	add.w	r8, r4, r3
 8012190:	f000 fdaa 	bl	8012ce8 <_sbrk_r>
 8012194:	4580      	cmp	r8, r0
 8012196:	d13a      	bne.n	801220e <_malloc_r+0xd2>
 8012198:	6821      	ldr	r1, [r4, #0]
 801219a:	3503      	adds	r5, #3
 801219c:	1a6d      	subs	r5, r5, r1
 801219e:	f025 0503 	bic.w	r5, r5, #3
 80121a2:	3508      	adds	r5, #8
 80121a4:	2d0c      	cmp	r5, #12
 80121a6:	bf38      	it	cc
 80121a8:	250c      	movcc	r5, #12
 80121aa:	4629      	mov	r1, r5
 80121ac:	4638      	mov	r0, r7
 80121ae:	f7ff ffa5 	bl	80120fc <sbrk_aligned>
 80121b2:	3001      	adds	r0, #1
 80121b4:	d02b      	beq.n	801220e <_malloc_r+0xd2>
 80121b6:	6823      	ldr	r3, [r4, #0]
 80121b8:	442b      	add	r3, r5
 80121ba:	6023      	str	r3, [r4, #0]
 80121bc:	e00e      	b.n	80121dc <_malloc_r+0xa0>
 80121be:	6822      	ldr	r2, [r4, #0]
 80121c0:	1b52      	subs	r2, r2, r5
 80121c2:	d41e      	bmi.n	8012202 <_malloc_r+0xc6>
 80121c4:	2a0b      	cmp	r2, #11
 80121c6:	d916      	bls.n	80121f6 <_malloc_r+0xba>
 80121c8:	1961      	adds	r1, r4, r5
 80121ca:	42a3      	cmp	r3, r4
 80121cc:	6025      	str	r5, [r4, #0]
 80121ce:	bf18      	it	ne
 80121d0:	6059      	strne	r1, [r3, #4]
 80121d2:	6863      	ldr	r3, [r4, #4]
 80121d4:	bf08      	it	eq
 80121d6:	6031      	streq	r1, [r6, #0]
 80121d8:	5162      	str	r2, [r4, r5]
 80121da:	604b      	str	r3, [r1, #4]
 80121dc:	4638      	mov	r0, r7
 80121de:	f104 060b 	add.w	r6, r4, #11
 80121e2:	f001 fed3 	bl	8013f8c <__malloc_unlock>
 80121e6:	f026 0607 	bic.w	r6, r6, #7
 80121ea:	1d23      	adds	r3, r4, #4
 80121ec:	1af2      	subs	r2, r6, r3
 80121ee:	d0b6      	beq.n	801215e <_malloc_r+0x22>
 80121f0:	1b9b      	subs	r3, r3, r6
 80121f2:	50a3      	str	r3, [r4, r2]
 80121f4:	e7b3      	b.n	801215e <_malloc_r+0x22>
 80121f6:	6862      	ldr	r2, [r4, #4]
 80121f8:	42a3      	cmp	r3, r4
 80121fa:	bf0c      	ite	eq
 80121fc:	6032      	streq	r2, [r6, #0]
 80121fe:	605a      	strne	r2, [r3, #4]
 8012200:	e7ec      	b.n	80121dc <_malloc_r+0xa0>
 8012202:	4623      	mov	r3, r4
 8012204:	6864      	ldr	r4, [r4, #4]
 8012206:	e7b2      	b.n	801216e <_malloc_r+0x32>
 8012208:	4634      	mov	r4, r6
 801220a:	6876      	ldr	r6, [r6, #4]
 801220c:	e7b9      	b.n	8012182 <_malloc_r+0x46>
 801220e:	230c      	movs	r3, #12
 8012210:	603b      	str	r3, [r7, #0]
 8012212:	4638      	mov	r0, r7
 8012214:	f001 feba 	bl	8013f8c <__malloc_unlock>
 8012218:	e7a1      	b.n	801215e <_malloc_r+0x22>
 801221a:	6025      	str	r5, [r4, #0]
 801221c:	e7de      	b.n	80121dc <_malloc_r+0xa0>
 801221e:	bf00      	nop
 8012220:	200034a0 	.word	0x200034a0

08012224 <__cvt>:
 8012224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012228:	ec55 4b10 	vmov	r4, r5, d0
 801222c:	2d00      	cmp	r5, #0
 801222e:	460e      	mov	r6, r1
 8012230:	4619      	mov	r1, r3
 8012232:	462b      	mov	r3, r5
 8012234:	bfbb      	ittet	lt
 8012236:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801223a:	461d      	movlt	r5, r3
 801223c:	2300      	movge	r3, #0
 801223e:	232d      	movlt	r3, #45	; 0x2d
 8012240:	700b      	strb	r3, [r1, #0]
 8012242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012244:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012248:	4691      	mov	r9, r2
 801224a:	f023 0820 	bic.w	r8, r3, #32
 801224e:	bfbc      	itt	lt
 8012250:	4622      	movlt	r2, r4
 8012252:	4614      	movlt	r4, r2
 8012254:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012258:	d005      	beq.n	8012266 <__cvt+0x42>
 801225a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801225e:	d100      	bne.n	8012262 <__cvt+0x3e>
 8012260:	3601      	adds	r6, #1
 8012262:	2102      	movs	r1, #2
 8012264:	e000      	b.n	8012268 <__cvt+0x44>
 8012266:	2103      	movs	r1, #3
 8012268:	ab03      	add	r3, sp, #12
 801226a:	9301      	str	r3, [sp, #4]
 801226c:	ab02      	add	r3, sp, #8
 801226e:	9300      	str	r3, [sp, #0]
 8012270:	ec45 4b10 	vmov	d0, r4, r5
 8012274:	4653      	mov	r3, sl
 8012276:	4632      	mov	r2, r6
 8012278:	f000 ff4e 	bl	8013118 <_dtoa_r>
 801227c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012280:	4607      	mov	r7, r0
 8012282:	d102      	bne.n	801228a <__cvt+0x66>
 8012284:	f019 0f01 	tst.w	r9, #1
 8012288:	d022      	beq.n	80122d0 <__cvt+0xac>
 801228a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801228e:	eb07 0906 	add.w	r9, r7, r6
 8012292:	d110      	bne.n	80122b6 <__cvt+0x92>
 8012294:	783b      	ldrb	r3, [r7, #0]
 8012296:	2b30      	cmp	r3, #48	; 0x30
 8012298:	d10a      	bne.n	80122b0 <__cvt+0x8c>
 801229a:	2200      	movs	r2, #0
 801229c:	2300      	movs	r3, #0
 801229e:	4620      	mov	r0, r4
 80122a0:	4629      	mov	r1, r5
 80122a2:	f7ee fc39 	bl	8000b18 <__aeabi_dcmpeq>
 80122a6:	b918      	cbnz	r0, 80122b0 <__cvt+0x8c>
 80122a8:	f1c6 0601 	rsb	r6, r6, #1
 80122ac:	f8ca 6000 	str.w	r6, [sl]
 80122b0:	f8da 3000 	ldr.w	r3, [sl]
 80122b4:	4499      	add	r9, r3
 80122b6:	2200      	movs	r2, #0
 80122b8:	2300      	movs	r3, #0
 80122ba:	4620      	mov	r0, r4
 80122bc:	4629      	mov	r1, r5
 80122be:	f7ee fc2b 	bl	8000b18 <__aeabi_dcmpeq>
 80122c2:	b108      	cbz	r0, 80122c8 <__cvt+0xa4>
 80122c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80122c8:	2230      	movs	r2, #48	; 0x30
 80122ca:	9b03      	ldr	r3, [sp, #12]
 80122cc:	454b      	cmp	r3, r9
 80122ce:	d307      	bcc.n	80122e0 <__cvt+0xbc>
 80122d0:	9b03      	ldr	r3, [sp, #12]
 80122d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80122d4:	1bdb      	subs	r3, r3, r7
 80122d6:	4638      	mov	r0, r7
 80122d8:	6013      	str	r3, [r2, #0]
 80122da:	b004      	add	sp, #16
 80122dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122e0:	1c59      	adds	r1, r3, #1
 80122e2:	9103      	str	r1, [sp, #12]
 80122e4:	701a      	strb	r2, [r3, #0]
 80122e6:	e7f0      	b.n	80122ca <__cvt+0xa6>

080122e8 <__exponent>:
 80122e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122ea:	4603      	mov	r3, r0
 80122ec:	2900      	cmp	r1, #0
 80122ee:	bfb8      	it	lt
 80122f0:	4249      	neglt	r1, r1
 80122f2:	f803 2b02 	strb.w	r2, [r3], #2
 80122f6:	bfb4      	ite	lt
 80122f8:	222d      	movlt	r2, #45	; 0x2d
 80122fa:	222b      	movge	r2, #43	; 0x2b
 80122fc:	2909      	cmp	r1, #9
 80122fe:	7042      	strb	r2, [r0, #1]
 8012300:	dd2a      	ble.n	8012358 <__exponent+0x70>
 8012302:	f10d 0407 	add.w	r4, sp, #7
 8012306:	46a4      	mov	ip, r4
 8012308:	270a      	movs	r7, #10
 801230a:	46a6      	mov	lr, r4
 801230c:	460a      	mov	r2, r1
 801230e:	fb91 f6f7 	sdiv	r6, r1, r7
 8012312:	fb07 1516 	mls	r5, r7, r6, r1
 8012316:	3530      	adds	r5, #48	; 0x30
 8012318:	2a63      	cmp	r2, #99	; 0x63
 801231a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801231e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012322:	4631      	mov	r1, r6
 8012324:	dcf1      	bgt.n	801230a <__exponent+0x22>
 8012326:	3130      	adds	r1, #48	; 0x30
 8012328:	f1ae 0502 	sub.w	r5, lr, #2
 801232c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012330:	1c44      	adds	r4, r0, #1
 8012332:	4629      	mov	r1, r5
 8012334:	4561      	cmp	r1, ip
 8012336:	d30a      	bcc.n	801234e <__exponent+0x66>
 8012338:	f10d 0209 	add.w	r2, sp, #9
 801233c:	eba2 020e 	sub.w	r2, r2, lr
 8012340:	4565      	cmp	r5, ip
 8012342:	bf88      	it	hi
 8012344:	2200      	movhi	r2, #0
 8012346:	4413      	add	r3, r2
 8012348:	1a18      	subs	r0, r3, r0
 801234a:	b003      	add	sp, #12
 801234c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801234e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012352:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012356:	e7ed      	b.n	8012334 <__exponent+0x4c>
 8012358:	2330      	movs	r3, #48	; 0x30
 801235a:	3130      	adds	r1, #48	; 0x30
 801235c:	7083      	strb	r3, [r0, #2]
 801235e:	70c1      	strb	r1, [r0, #3]
 8012360:	1d03      	adds	r3, r0, #4
 8012362:	e7f1      	b.n	8012348 <__exponent+0x60>

08012364 <_printf_float>:
 8012364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012368:	ed2d 8b02 	vpush	{d8}
 801236c:	b08d      	sub	sp, #52	; 0x34
 801236e:	460c      	mov	r4, r1
 8012370:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012374:	4616      	mov	r6, r2
 8012376:	461f      	mov	r7, r3
 8012378:	4605      	mov	r5, r0
 801237a:	f001 fd7d 	bl	8013e78 <_localeconv_r>
 801237e:	f8d0 a000 	ldr.w	sl, [r0]
 8012382:	4650      	mov	r0, sl
 8012384:	f7ed ff4c 	bl	8000220 <strlen>
 8012388:	2300      	movs	r3, #0
 801238a:	930a      	str	r3, [sp, #40]	; 0x28
 801238c:	6823      	ldr	r3, [r4, #0]
 801238e:	9305      	str	r3, [sp, #20]
 8012390:	f8d8 3000 	ldr.w	r3, [r8]
 8012394:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012398:	3307      	adds	r3, #7
 801239a:	f023 0307 	bic.w	r3, r3, #7
 801239e:	f103 0208 	add.w	r2, r3, #8
 80123a2:	f8c8 2000 	str.w	r2, [r8]
 80123a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80123ae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80123b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80123b6:	9307      	str	r3, [sp, #28]
 80123b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80123bc:	ee08 0a10 	vmov	s16, r0
 80123c0:	4b9f      	ldr	r3, [pc, #636]	; (8012640 <_printf_float+0x2dc>)
 80123c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80123c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80123ca:	f7ee fbd7 	bl	8000b7c <__aeabi_dcmpun>
 80123ce:	bb88      	cbnz	r0, 8012434 <_printf_float+0xd0>
 80123d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80123d4:	4b9a      	ldr	r3, [pc, #616]	; (8012640 <_printf_float+0x2dc>)
 80123d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80123da:	f7ee fbb1 	bl	8000b40 <__aeabi_dcmple>
 80123de:	bb48      	cbnz	r0, 8012434 <_printf_float+0xd0>
 80123e0:	2200      	movs	r2, #0
 80123e2:	2300      	movs	r3, #0
 80123e4:	4640      	mov	r0, r8
 80123e6:	4649      	mov	r1, r9
 80123e8:	f7ee fba0 	bl	8000b2c <__aeabi_dcmplt>
 80123ec:	b110      	cbz	r0, 80123f4 <_printf_float+0x90>
 80123ee:	232d      	movs	r3, #45	; 0x2d
 80123f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80123f4:	4b93      	ldr	r3, [pc, #588]	; (8012644 <_printf_float+0x2e0>)
 80123f6:	4894      	ldr	r0, [pc, #592]	; (8012648 <_printf_float+0x2e4>)
 80123f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80123fc:	bf94      	ite	ls
 80123fe:	4698      	movls	r8, r3
 8012400:	4680      	movhi	r8, r0
 8012402:	2303      	movs	r3, #3
 8012404:	6123      	str	r3, [r4, #16]
 8012406:	9b05      	ldr	r3, [sp, #20]
 8012408:	f023 0204 	bic.w	r2, r3, #4
 801240c:	6022      	str	r2, [r4, #0]
 801240e:	f04f 0900 	mov.w	r9, #0
 8012412:	9700      	str	r7, [sp, #0]
 8012414:	4633      	mov	r3, r6
 8012416:	aa0b      	add	r2, sp, #44	; 0x2c
 8012418:	4621      	mov	r1, r4
 801241a:	4628      	mov	r0, r5
 801241c:	f000 f9d8 	bl	80127d0 <_printf_common>
 8012420:	3001      	adds	r0, #1
 8012422:	f040 8090 	bne.w	8012546 <_printf_float+0x1e2>
 8012426:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801242a:	b00d      	add	sp, #52	; 0x34
 801242c:	ecbd 8b02 	vpop	{d8}
 8012430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012434:	4642      	mov	r2, r8
 8012436:	464b      	mov	r3, r9
 8012438:	4640      	mov	r0, r8
 801243a:	4649      	mov	r1, r9
 801243c:	f7ee fb9e 	bl	8000b7c <__aeabi_dcmpun>
 8012440:	b140      	cbz	r0, 8012454 <_printf_float+0xf0>
 8012442:	464b      	mov	r3, r9
 8012444:	2b00      	cmp	r3, #0
 8012446:	bfbc      	itt	lt
 8012448:	232d      	movlt	r3, #45	; 0x2d
 801244a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801244e:	487f      	ldr	r0, [pc, #508]	; (801264c <_printf_float+0x2e8>)
 8012450:	4b7f      	ldr	r3, [pc, #508]	; (8012650 <_printf_float+0x2ec>)
 8012452:	e7d1      	b.n	80123f8 <_printf_float+0x94>
 8012454:	6863      	ldr	r3, [r4, #4]
 8012456:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801245a:	9206      	str	r2, [sp, #24]
 801245c:	1c5a      	adds	r2, r3, #1
 801245e:	d13f      	bne.n	80124e0 <_printf_float+0x17c>
 8012460:	2306      	movs	r3, #6
 8012462:	6063      	str	r3, [r4, #4]
 8012464:	9b05      	ldr	r3, [sp, #20]
 8012466:	6861      	ldr	r1, [r4, #4]
 8012468:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801246c:	2300      	movs	r3, #0
 801246e:	9303      	str	r3, [sp, #12]
 8012470:	ab0a      	add	r3, sp, #40	; 0x28
 8012472:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012476:	ab09      	add	r3, sp, #36	; 0x24
 8012478:	ec49 8b10 	vmov	d0, r8, r9
 801247c:	9300      	str	r3, [sp, #0]
 801247e:	6022      	str	r2, [r4, #0]
 8012480:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012484:	4628      	mov	r0, r5
 8012486:	f7ff fecd 	bl	8012224 <__cvt>
 801248a:	9b06      	ldr	r3, [sp, #24]
 801248c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801248e:	2b47      	cmp	r3, #71	; 0x47
 8012490:	4680      	mov	r8, r0
 8012492:	d108      	bne.n	80124a6 <_printf_float+0x142>
 8012494:	1cc8      	adds	r0, r1, #3
 8012496:	db02      	blt.n	801249e <_printf_float+0x13a>
 8012498:	6863      	ldr	r3, [r4, #4]
 801249a:	4299      	cmp	r1, r3
 801249c:	dd41      	ble.n	8012522 <_printf_float+0x1be>
 801249e:	f1ab 0b02 	sub.w	fp, fp, #2
 80124a2:	fa5f fb8b 	uxtb.w	fp, fp
 80124a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80124aa:	d820      	bhi.n	80124ee <_printf_float+0x18a>
 80124ac:	3901      	subs	r1, #1
 80124ae:	465a      	mov	r2, fp
 80124b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80124b4:	9109      	str	r1, [sp, #36]	; 0x24
 80124b6:	f7ff ff17 	bl	80122e8 <__exponent>
 80124ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80124bc:	1813      	adds	r3, r2, r0
 80124be:	2a01      	cmp	r2, #1
 80124c0:	4681      	mov	r9, r0
 80124c2:	6123      	str	r3, [r4, #16]
 80124c4:	dc02      	bgt.n	80124cc <_printf_float+0x168>
 80124c6:	6822      	ldr	r2, [r4, #0]
 80124c8:	07d2      	lsls	r2, r2, #31
 80124ca:	d501      	bpl.n	80124d0 <_printf_float+0x16c>
 80124cc:	3301      	adds	r3, #1
 80124ce:	6123      	str	r3, [r4, #16]
 80124d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d09c      	beq.n	8012412 <_printf_float+0xae>
 80124d8:	232d      	movs	r3, #45	; 0x2d
 80124da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80124de:	e798      	b.n	8012412 <_printf_float+0xae>
 80124e0:	9a06      	ldr	r2, [sp, #24]
 80124e2:	2a47      	cmp	r2, #71	; 0x47
 80124e4:	d1be      	bne.n	8012464 <_printf_float+0x100>
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d1bc      	bne.n	8012464 <_printf_float+0x100>
 80124ea:	2301      	movs	r3, #1
 80124ec:	e7b9      	b.n	8012462 <_printf_float+0xfe>
 80124ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80124f2:	d118      	bne.n	8012526 <_printf_float+0x1c2>
 80124f4:	2900      	cmp	r1, #0
 80124f6:	6863      	ldr	r3, [r4, #4]
 80124f8:	dd0b      	ble.n	8012512 <_printf_float+0x1ae>
 80124fa:	6121      	str	r1, [r4, #16]
 80124fc:	b913      	cbnz	r3, 8012504 <_printf_float+0x1a0>
 80124fe:	6822      	ldr	r2, [r4, #0]
 8012500:	07d0      	lsls	r0, r2, #31
 8012502:	d502      	bpl.n	801250a <_printf_float+0x1a6>
 8012504:	3301      	adds	r3, #1
 8012506:	440b      	add	r3, r1
 8012508:	6123      	str	r3, [r4, #16]
 801250a:	65a1      	str	r1, [r4, #88]	; 0x58
 801250c:	f04f 0900 	mov.w	r9, #0
 8012510:	e7de      	b.n	80124d0 <_printf_float+0x16c>
 8012512:	b913      	cbnz	r3, 801251a <_printf_float+0x1b6>
 8012514:	6822      	ldr	r2, [r4, #0]
 8012516:	07d2      	lsls	r2, r2, #31
 8012518:	d501      	bpl.n	801251e <_printf_float+0x1ba>
 801251a:	3302      	adds	r3, #2
 801251c:	e7f4      	b.n	8012508 <_printf_float+0x1a4>
 801251e:	2301      	movs	r3, #1
 8012520:	e7f2      	b.n	8012508 <_printf_float+0x1a4>
 8012522:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012528:	4299      	cmp	r1, r3
 801252a:	db05      	blt.n	8012538 <_printf_float+0x1d4>
 801252c:	6823      	ldr	r3, [r4, #0]
 801252e:	6121      	str	r1, [r4, #16]
 8012530:	07d8      	lsls	r0, r3, #31
 8012532:	d5ea      	bpl.n	801250a <_printf_float+0x1a6>
 8012534:	1c4b      	adds	r3, r1, #1
 8012536:	e7e7      	b.n	8012508 <_printf_float+0x1a4>
 8012538:	2900      	cmp	r1, #0
 801253a:	bfd4      	ite	le
 801253c:	f1c1 0202 	rsble	r2, r1, #2
 8012540:	2201      	movgt	r2, #1
 8012542:	4413      	add	r3, r2
 8012544:	e7e0      	b.n	8012508 <_printf_float+0x1a4>
 8012546:	6823      	ldr	r3, [r4, #0]
 8012548:	055a      	lsls	r2, r3, #21
 801254a:	d407      	bmi.n	801255c <_printf_float+0x1f8>
 801254c:	6923      	ldr	r3, [r4, #16]
 801254e:	4642      	mov	r2, r8
 8012550:	4631      	mov	r1, r6
 8012552:	4628      	mov	r0, r5
 8012554:	47b8      	blx	r7
 8012556:	3001      	adds	r0, #1
 8012558:	d12c      	bne.n	80125b4 <_printf_float+0x250>
 801255a:	e764      	b.n	8012426 <_printf_float+0xc2>
 801255c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012560:	f240 80e0 	bls.w	8012724 <_printf_float+0x3c0>
 8012564:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012568:	2200      	movs	r2, #0
 801256a:	2300      	movs	r3, #0
 801256c:	f7ee fad4 	bl	8000b18 <__aeabi_dcmpeq>
 8012570:	2800      	cmp	r0, #0
 8012572:	d034      	beq.n	80125de <_printf_float+0x27a>
 8012574:	4a37      	ldr	r2, [pc, #220]	; (8012654 <_printf_float+0x2f0>)
 8012576:	2301      	movs	r3, #1
 8012578:	4631      	mov	r1, r6
 801257a:	4628      	mov	r0, r5
 801257c:	47b8      	blx	r7
 801257e:	3001      	adds	r0, #1
 8012580:	f43f af51 	beq.w	8012426 <_printf_float+0xc2>
 8012584:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012588:	429a      	cmp	r2, r3
 801258a:	db02      	blt.n	8012592 <_printf_float+0x22e>
 801258c:	6823      	ldr	r3, [r4, #0]
 801258e:	07d8      	lsls	r0, r3, #31
 8012590:	d510      	bpl.n	80125b4 <_printf_float+0x250>
 8012592:	ee18 3a10 	vmov	r3, s16
 8012596:	4652      	mov	r2, sl
 8012598:	4631      	mov	r1, r6
 801259a:	4628      	mov	r0, r5
 801259c:	47b8      	blx	r7
 801259e:	3001      	adds	r0, #1
 80125a0:	f43f af41 	beq.w	8012426 <_printf_float+0xc2>
 80125a4:	f04f 0800 	mov.w	r8, #0
 80125a8:	f104 091a 	add.w	r9, r4, #26
 80125ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125ae:	3b01      	subs	r3, #1
 80125b0:	4543      	cmp	r3, r8
 80125b2:	dc09      	bgt.n	80125c8 <_printf_float+0x264>
 80125b4:	6823      	ldr	r3, [r4, #0]
 80125b6:	079b      	lsls	r3, r3, #30
 80125b8:	f100 8105 	bmi.w	80127c6 <_printf_float+0x462>
 80125bc:	68e0      	ldr	r0, [r4, #12]
 80125be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125c0:	4298      	cmp	r0, r3
 80125c2:	bfb8      	it	lt
 80125c4:	4618      	movlt	r0, r3
 80125c6:	e730      	b.n	801242a <_printf_float+0xc6>
 80125c8:	2301      	movs	r3, #1
 80125ca:	464a      	mov	r2, r9
 80125cc:	4631      	mov	r1, r6
 80125ce:	4628      	mov	r0, r5
 80125d0:	47b8      	blx	r7
 80125d2:	3001      	adds	r0, #1
 80125d4:	f43f af27 	beq.w	8012426 <_printf_float+0xc2>
 80125d8:	f108 0801 	add.w	r8, r8, #1
 80125dc:	e7e6      	b.n	80125ac <_printf_float+0x248>
 80125de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	dc39      	bgt.n	8012658 <_printf_float+0x2f4>
 80125e4:	4a1b      	ldr	r2, [pc, #108]	; (8012654 <_printf_float+0x2f0>)
 80125e6:	2301      	movs	r3, #1
 80125e8:	4631      	mov	r1, r6
 80125ea:	4628      	mov	r0, r5
 80125ec:	47b8      	blx	r7
 80125ee:	3001      	adds	r0, #1
 80125f0:	f43f af19 	beq.w	8012426 <_printf_float+0xc2>
 80125f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80125f8:	4313      	orrs	r3, r2
 80125fa:	d102      	bne.n	8012602 <_printf_float+0x29e>
 80125fc:	6823      	ldr	r3, [r4, #0]
 80125fe:	07d9      	lsls	r1, r3, #31
 8012600:	d5d8      	bpl.n	80125b4 <_printf_float+0x250>
 8012602:	ee18 3a10 	vmov	r3, s16
 8012606:	4652      	mov	r2, sl
 8012608:	4631      	mov	r1, r6
 801260a:	4628      	mov	r0, r5
 801260c:	47b8      	blx	r7
 801260e:	3001      	adds	r0, #1
 8012610:	f43f af09 	beq.w	8012426 <_printf_float+0xc2>
 8012614:	f04f 0900 	mov.w	r9, #0
 8012618:	f104 0a1a 	add.w	sl, r4, #26
 801261c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801261e:	425b      	negs	r3, r3
 8012620:	454b      	cmp	r3, r9
 8012622:	dc01      	bgt.n	8012628 <_printf_float+0x2c4>
 8012624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012626:	e792      	b.n	801254e <_printf_float+0x1ea>
 8012628:	2301      	movs	r3, #1
 801262a:	4652      	mov	r2, sl
 801262c:	4631      	mov	r1, r6
 801262e:	4628      	mov	r0, r5
 8012630:	47b8      	blx	r7
 8012632:	3001      	adds	r0, #1
 8012634:	f43f aef7 	beq.w	8012426 <_printf_float+0xc2>
 8012638:	f109 0901 	add.w	r9, r9, #1
 801263c:	e7ee      	b.n	801261c <_printf_float+0x2b8>
 801263e:	bf00      	nop
 8012640:	7fefffff 	.word	0x7fefffff
 8012644:	08015390 	.word	0x08015390
 8012648:	08015394 	.word	0x08015394
 801264c:	0801539c 	.word	0x0801539c
 8012650:	08015398 	.word	0x08015398
 8012654:	080153a0 	.word	0x080153a0
 8012658:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801265a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801265c:	429a      	cmp	r2, r3
 801265e:	bfa8      	it	ge
 8012660:	461a      	movge	r2, r3
 8012662:	2a00      	cmp	r2, #0
 8012664:	4691      	mov	r9, r2
 8012666:	dc37      	bgt.n	80126d8 <_printf_float+0x374>
 8012668:	f04f 0b00 	mov.w	fp, #0
 801266c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012670:	f104 021a 	add.w	r2, r4, #26
 8012674:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012676:	9305      	str	r3, [sp, #20]
 8012678:	eba3 0309 	sub.w	r3, r3, r9
 801267c:	455b      	cmp	r3, fp
 801267e:	dc33      	bgt.n	80126e8 <_printf_float+0x384>
 8012680:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012684:	429a      	cmp	r2, r3
 8012686:	db3b      	blt.n	8012700 <_printf_float+0x39c>
 8012688:	6823      	ldr	r3, [r4, #0]
 801268a:	07da      	lsls	r2, r3, #31
 801268c:	d438      	bmi.n	8012700 <_printf_float+0x39c>
 801268e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012690:	9a05      	ldr	r2, [sp, #20]
 8012692:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012694:	1a9a      	subs	r2, r3, r2
 8012696:	eba3 0901 	sub.w	r9, r3, r1
 801269a:	4591      	cmp	r9, r2
 801269c:	bfa8      	it	ge
 801269e:	4691      	movge	r9, r2
 80126a0:	f1b9 0f00 	cmp.w	r9, #0
 80126a4:	dc35      	bgt.n	8012712 <_printf_float+0x3ae>
 80126a6:	f04f 0800 	mov.w	r8, #0
 80126aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80126ae:	f104 0a1a 	add.w	sl, r4, #26
 80126b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80126b6:	1a9b      	subs	r3, r3, r2
 80126b8:	eba3 0309 	sub.w	r3, r3, r9
 80126bc:	4543      	cmp	r3, r8
 80126be:	f77f af79 	ble.w	80125b4 <_printf_float+0x250>
 80126c2:	2301      	movs	r3, #1
 80126c4:	4652      	mov	r2, sl
 80126c6:	4631      	mov	r1, r6
 80126c8:	4628      	mov	r0, r5
 80126ca:	47b8      	blx	r7
 80126cc:	3001      	adds	r0, #1
 80126ce:	f43f aeaa 	beq.w	8012426 <_printf_float+0xc2>
 80126d2:	f108 0801 	add.w	r8, r8, #1
 80126d6:	e7ec      	b.n	80126b2 <_printf_float+0x34e>
 80126d8:	4613      	mov	r3, r2
 80126da:	4631      	mov	r1, r6
 80126dc:	4642      	mov	r2, r8
 80126de:	4628      	mov	r0, r5
 80126e0:	47b8      	blx	r7
 80126e2:	3001      	adds	r0, #1
 80126e4:	d1c0      	bne.n	8012668 <_printf_float+0x304>
 80126e6:	e69e      	b.n	8012426 <_printf_float+0xc2>
 80126e8:	2301      	movs	r3, #1
 80126ea:	4631      	mov	r1, r6
 80126ec:	4628      	mov	r0, r5
 80126ee:	9205      	str	r2, [sp, #20]
 80126f0:	47b8      	blx	r7
 80126f2:	3001      	adds	r0, #1
 80126f4:	f43f ae97 	beq.w	8012426 <_printf_float+0xc2>
 80126f8:	9a05      	ldr	r2, [sp, #20]
 80126fa:	f10b 0b01 	add.w	fp, fp, #1
 80126fe:	e7b9      	b.n	8012674 <_printf_float+0x310>
 8012700:	ee18 3a10 	vmov	r3, s16
 8012704:	4652      	mov	r2, sl
 8012706:	4631      	mov	r1, r6
 8012708:	4628      	mov	r0, r5
 801270a:	47b8      	blx	r7
 801270c:	3001      	adds	r0, #1
 801270e:	d1be      	bne.n	801268e <_printf_float+0x32a>
 8012710:	e689      	b.n	8012426 <_printf_float+0xc2>
 8012712:	9a05      	ldr	r2, [sp, #20]
 8012714:	464b      	mov	r3, r9
 8012716:	4442      	add	r2, r8
 8012718:	4631      	mov	r1, r6
 801271a:	4628      	mov	r0, r5
 801271c:	47b8      	blx	r7
 801271e:	3001      	adds	r0, #1
 8012720:	d1c1      	bne.n	80126a6 <_printf_float+0x342>
 8012722:	e680      	b.n	8012426 <_printf_float+0xc2>
 8012724:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012726:	2a01      	cmp	r2, #1
 8012728:	dc01      	bgt.n	801272e <_printf_float+0x3ca>
 801272a:	07db      	lsls	r3, r3, #31
 801272c:	d538      	bpl.n	80127a0 <_printf_float+0x43c>
 801272e:	2301      	movs	r3, #1
 8012730:	4642      	mov	r2, r8
 8012732:	4631      	mov	r1, r6
 8012734:	4628      	mov	r0, r5
 8012736:	47b8      	blx	r7
 8012738:	3001      	adds	r0, #1
 801273a:	f43f ae74 	beq.w	8012426 <_printf_float+0xc2>
 801273e:	ee18 3a10 	vmov	r3, s16
 8012742:	4652      	mov	r2, sl
 8012744:	4631      	mov	r1, r6
 8012746:	4628      	mov	r0, r5
 8012748:	47b8      	blx	r7
 801274a:	3001      	adds	r0, #1
 801274c:	f43f ae6b 	beq.w	8012426 <_printf_float+0xc2>
 8012750:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012754:	2200      	movs	r2, #0
 8012756:	2300      	movs	r3, #0
 8012758:	f7ee f9de 	bl	8000b18 <__aeabi_dcmpeq>
 801275c:	b9d8      	cbnz	r0, 8012796 <_printf_float+0x432>
 801275e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012760:	f108 0201 	add.w	r2, r8, #1
 8012764:	3b01      	subs	r3, #1
 8012766:	4631      	mov	r1, r6
 8012768:	4628      	mov	r0, r5
 801276a:	47b8      	blx	r7
 801276c:	3001      	adds	r0, #1
 801276e:	d10e      	bne.n	801278e <_printf_float+0x42a>
 8012770:	e659      	b.n	8012426 <_printf_float+0xc2>
 8012772:	2301      	movs	r3, #1
 8012774:	4652      	mov	r2, sl
 8012776:	4631      	mov	r1, r6
 8012778:	4628      	mov	r0, r5
 801277a:	47b8      	blx	r7
 801277c:	3001      	adds	r0, #1
 801277e:	f43f ae52 	beq.w	8012426 <_printf_float+0xc2>
 8012782:	f108 0801 	add.w	r8, r8, #1
 8012786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012788:	3b01      	subs	r3, #1
 801278a:	4543      	cmp	r3, r8
 801278c:	dcf1      	bgt.n	8012772 <_printf_float+0x40e>
 801278e:	464b      	mov	r3, r9
 8012790:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012794:	e6dc      	b.n	8012550 <_printf_float+0x1ec>
 8012796:	f04f 0800 	mov.w	r8, #0
 801279a:	f104 0a1a 	add.w	sl, r4, #26
 801279e:	e7f2      	b.n	8012786 <_printf_float+0x422>
 80127a0:	2301      	movs	r3, #1
 80127a2:	4642      	mov	r2, r8
 80127a4:	e7df      	b.n	8012766 <_printf_float+0x402>
 80127a6:	2301      	movs	r3, #1
 80127a8:	464a      	mov	r2, r9
 80127aa:	4631      	mov	r1, r6
 80127ac:	4628      	mov	r0, r5
 80127ae:	47b8      	blx	r7
 80127b0:	3001      	adds	r0, #1
 80127b2:	f43f ae38 	beq.w	8012426 <_printf_float+0xc2>
 80127b6:	f108 0801 	add.w	r8, r8, #1
 80127ba:	68e3      	ldr	r3, [r4, #12]
 80127bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80127be:	1a5b      	subs	r3, r3, r1
 80127c0:	4543      	cmp	r3, r8
 80127c2:	dcf0      	bgt.n	80127a6 <_printf_float+0x442>
 80127c4:	e6fa      	b.n	80125bc <_printf_float+0x258>
 80127c6:	f04f 0800 	mov.w	r8, #0
 80127ca:	f104 0919 	add.w	r9, r4, #25
 80127ce:	e7f4      	b.n	80127ba <_printf_float+0x456>

080127d0 <_printf_common>:
 80127d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127d4:	4616      	mov	r6, r2
 80127d6:	4699      	mov	r9, r3
 80127d8:	688a      	ldr	r2, [r1, #8]
 80127da:	690b      	ldr	r3, [r1, #16]
 80127dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80127e0:	4293      	cmp	r3, r2
 80127e2:	bfb8      	it	lt
 80127e4:	4613      	movlt	r3, r2
 80127e6:	6033      	str	r3, [r6, #0]
 80127e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80127ec:	4607      	mov	r7, r0
 80127ee:	460c      	mov	r4, r1
 80127f0:	b10a      	cbz	r2, 80127f6 <_printf_common+0x26>
 80127f2:	3301      	adds	r3, #1
 80127f4:	6033      	str	r3, [r6, #0]
 80127f6:	6823      	ldr	r3, [r4, #0]
 80127f8:	0699      	lsls	r1, r3, #26
 80127fa:	bf42      	ittt	mi
 80127fc:	6833      	ldrmi	r3, [r6, #0]
 80127fe:	3302      	addmi	r3, #2
 8012800:	6033      	strmi	r3, [r6, #0]
 8012802:	6825      	ldr	r5, [r4, #0]
 8012804:	f015 0506 	ands.w	r5, r5, #6
 8012808:	d106      	bne.n	8012818 <_printf_common+0x48>
 801280a:	f104 0a19 	add.w	sl, r4, #25
 801280e:	68e3      	ldr	r3, [r4, #12]
 8012810:	6832      	ldr	r2, [r6, #0]
 8012812:	1a9b      	subs	r3, r3, r2
 8012814:	42ab      	cmp	r3, r5
 8012816:	dc26      	bgt.n	8012866 <_printf_common+0x96>
 8012818:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801281c:	1e13      	subs	r3, r2, #0
 801281e:	6822      	ldr	r2, [r4, #0]
 8012820:	bf18      	it	ne
 8012822:	2301      	movne	r3, #1
 8012824:	0692      	lsls	r2, r2, #26
 8012826:	d42b      	bmi.n	8012880 <_printf_common+0xb0>
 8012828:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801282c:	4649      	mov	r1, r9
 801282e:	4638      	mov	r0, r7
 8012830:	47c0      	blx	r8
 8012832:	3001      	adds	r0, #1
 8012834:	d01e      	beq.n	8012874 <_printf_common+0xa4>
 8012836:	6823      	ldr	r3, [r4, #0]
 8012838:	68e5      	ldr	r5, [r4, #12]
 801283a:	6832      	ldr	r2, [r6, #0]
 801283c:	f003 0306 	and.w	r3, r3, #6
 8012840:	2b04      	cmp	r3, #4
 8012842:	bf08      	it	eq
 8012844:	1aad      	subeq	r5, r5, r2
 8012846:	68a3      	ldr	r3, [r4, #8]
 8012848:	6922      	ldr	r2, [r4, #16]
 801284a:	bf0c      	ite	eq
 801284c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012850:	2500      	movne	r5, #0
 8012852:	4293      	cmp	r3, r2
 8012854:	bfc4      	itt	gt
 8012856:	1a9b      	subgt	r3, r3, r2
 8012858:	18ed      	addgt	r5, r5, r3
 801285a:	2600      	movs	r6, #0
 801285c:	341a      	adds	r4, #26
 801285e:	42b5      	cmp	r5, r6
 8012860:	d11a      	bne.n	8012898 <_printf_common+0xc8>
 8012862:	2000      	movs	r0, #0
 8012864:	e008      	b.n	8012878 <_printf_common+0xa8>
 8012866:	2301      	movs	r3, #1
 8012868:	4652      	mov	r2, sl
 801286a:	4649      	mov	r1, r9
 801286c:	4638      	mov	r0, r7
 801286e:	47c0      	blx	r8
 8012870:	3001      	adds	r0, #1
 8012872:	d103      	bne.n	801287c <_printf_common+0xac>
 8012874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801287c:	3501      	adds	r5, #1
 801287e:	e7c6      	b.n	801280e <_printf_common+0x3e>
 8012880:	18e1      	adds	r1, r4, r3
 8012882:	1c5a      	adds	r2, r3, #1
 8012884:	2030      	movs	r0, #48	; 0x30
 8012886:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801288a:	4422      	add	r2, r4
 801288c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012890:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012894:	3302      	adds	r3, #2
 8012896:	e7c7      	b.n	8012828 <_printf_common+0x58>
 8012898:	2301      	movs	r3, #1
 801289a:	4622      	mov	r2, r4
 801289c:	4649      	mov	r1, r9
 801289e:	4638      	mov	r0, r7
 80128a0:	47c0      	blx	r8
 80128a2:	3001      	adds	r0, #1
 80128a4:	d0e6      	beq.n	8012874 <_printf_common+0xa4>
 80128a6:	3601      	adds	r6, #1
 80128a8:	e7d9      	b.n	801285e <_printf_common+0x8e>
	...

080128ac <_printf_i>:
 80128ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80128b0:	7e0f      	ldrb	r7, [r1, #24]
 80128b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80128b4:	2f78      	cmp	r7, #120	; 0x78
 80128b6:	4691      	mov	r9, r2
 80128b8:	4680      	mov	r8, r0
 80128ba:	460c      	mov	r4, r1
 80128bc:	469a      	mov	sl, r3
 80128be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80128c2:	d807      	bhi.n	80128d4 <_printf_i+0x28>
 80128c4:	2f62      	cmp	r7, #98	; 0x62
 80128c6:	d80a      	bhi.n	80128de <_printf_i+0x32>
 80128c8:	2f00      	cmp	r7, #0
 80128ca:	f000 80d8 	beq.w	8012a7e <_printf_i+0x1d2>
 80128ce:	2f58      	cmp	r7, #88	; 0x58
 80128d0:	f000 80a3 	beq.w	8012a1a <_printf_i+0x16e>
 80128d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80128d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80128dc:	e03a      	b.n	8012954 <_printf_i+0xa8>
 80128de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80128e2:	2b15      	cmp	r3, #21
 80128e4:	d8f6      	bhi.n	80128d4 <_printf_i+0x28>
 80128e6:	a101      	add	r1, pc, #4	; (adr r1, 80128ec <_printf_i+0x40>)
 80128e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80128ec:	08012945 	.word	0x08012945
 80128f0:	08012959 	.word	0x08012959
 80128f4:	080128d5 	.word	0x080128d5
 80128f8:	080128d5 	.word	0x080128d5
 80128fc:	080128d5 	.word	0x080128d5
 8012900:	080128d5 	.word	0x080128d5
 8012904:	08012959 	.word	0x08012959
 8012908:	080128d5 	.word	0x080128d5
 801290c:	080128d5 	.word	0x080128d5
 8012910:	080128d5 	.word	0x080128d5
 8012914:	080128d5 	.word	0x080128d5
 8012918:	08012a65 	.word	0x08012a65
 801291c:	08012989 	.word	0x08012989
 8012920:	08012a47 	.word	0x08012a47
 8012924:	080128d5 	.word	0x080128d5
 8012928:	080128d5 	.word	0x080128d5
 801292c:	08012a87 	.word	0x08012a87
 8012930:	080128d5 	.word	0x080128d5
 8012934:	08012989 	.word	0x08012989
 8012938:	080128d5 	.word	0x080128d5
 801293c:	080128d5 	.word	0x080128d5
 8012940:	08012a4f 	.word	0x08012a4f
 8012944:	682b      	ldr	r3, [r5, #0]
 8012946:	1d1a      	adds	r2, r3, #4
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	602a      	str	r2, [r5, #0]
 801294c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012950:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012954:	2301      	movs	r3, #1
 8012956:	e0a3      	b.n	8012aa0 <_printf_i+0x1f4>
 8012958:	6820      	ldr	r0, [r4, #0]
 801295a:	6829      	ldr	r1, [r5, #0]
 801295c:	0606      	lsls	r6, r0, #24
 801295e:	f101 0304 	add.w	r3, r1, #4
 8012962:	d50a      	bpl.n	801297a <_printf_i+0xce>
 8012964:	680e      	ldr	r6, [r1, #0]
 8012966:	602b      	str	r3, [r5, #0]
 8012968:	2e00      	cmp	r6, #0
 801296a:	da03      	bge.n	8012974 <_printf_i+0xc8>
 801296c:	232d      	movs	r3, #45	; 0x2d
 801296e:	4276      	negs	r6, r6
 8012970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012974:	485e      	ldr	r0, [pc, #376]	; (8012af0 <_printf_i+0x244>)
 8012976:	230a      	movs	r3, #10
 8012978:	e019      	b.n	80129ae <_printf_i+0x102>
 801297a:	680e      	ldr	r6, [r1, #0]
 801297c:	602b      	str	r3, [r5, #0]
 801297e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012982:	bf18      	it	ne
 8012984:	b236      	sxthne	r6, r6
 8012986:	e7ef      	b.n	8012968 <_printf_i+0xbc>
 8012988:	682b      	ldr	r3, [r5, #0]
 801298a:	6820      	ldr	r0, [r4, #0]
 801298c:	1d19      	adds	r1, r3, #4
 801298e:	6029      	str	r1, [r5, #0]
 8012990:	0601      	lsls	r1, r0, #24
 8012992:	d501      	bpl.n	8012998 <_printf_i+0xec>
 8012994:	681e      	ldr	r6, [r3, #0]
 8012996:	e002      	b.n	801299e <_printf_i+0xf2>
 8012998:	0646      	lsls	r6, r0, #25
 801299a:	d5fb      	bpl.n	8012994 <_printf_i+0xe8>
 801299c:	881e      	ldrh	r6, [r3, #0]
 801299e:	4854      	ldr	r0, [pc, #336]	; (8012af0 <_printf_i+0x244>)
 80129a0:	2f6f      	cmp	r7, #111	; 0x6f
 80129a2:	bf0c      	ite	eq
 80129a4:	2308      	moveq	r3, #8
 80129a6:	230a      	movne	r3, #10
 80129a8:	2100      	movs	r1, #0
 80129aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80129ae:	6865      	ldr	r5, [r4, #4]
 80129b0:	60a5      	str	r5, [r4, #8]
 80129b2:	2d00      	cmp	r5, #0
 80129b4:	bfa2      	ittt	ge
 80129b6:	6821      	ldrge	r1, [r4, #0]
 80129b8:	f021 0104 	bicge.w	r1, r1, #4
 80129bc:	6021      	strge	r1, [r4, #0]
 80129be:	b90e      	cbnz	r6, 80129c4 <_printf_i+0x118>
 80129c0:	2d00      	cmp	r5, #0
 80129c2:	d04d      	beq.n	8012a60 <_printf_i+0x1b4>
 80129c4:	4615      	mov	r5, r2
 80129c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80129ca:	fb03 6711 	mls	r7, r3, r1, r6
 80129ce:	5dc7      	ldrb	r7, [r0, r7]
 80129d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80129d4:	4637      	mov	r7, r6
 80129d6:	42bb      	cmp	r3, r7
 80129d8:	460e      	mov	r6, r1
 80129da:	d9f4      	bls.n	80129c6 <_printf_i+0x11a>
 80129dc:	2b08      	cmp	r3, #8
 80129de:	d10b      	bne.n	80129f8 <_printf_i+0x14c>
 80129e0:	6823      	ldr	r3, [r4, #0]
 80129e2:	07de      	lsls	r6, r3, #31
 80129e4:	d508      	bpl.n	80129f8 <_printf_i+0x14c>
 80129e6:	6923      	ldr	r3, [r4, #16]
 80129e8:	6861      	ldr	r1, [r4, #4]
 80129ea:	4299      	cmp	r1, r3
 80129ec:	bfde      	ittt	le
 80129ee:	2330      	movle	r3, #48	; 0x30
 80129f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80129f4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80129f8:	1b52      	subs	r2, r2, r5
 80129fa:	6122      	str	r2, [r4, #16]
 80129fc:	f8cd a000 	str.w	sl, [sp]
 8012a00:	464b      	mov	r3, r9
 8012a02:	aa03      	add	r2, sp, #12
 8012a04:	4621      	mov	r1, r4
 8012a06:	4640      	mov	r0, r8
 8012a08:	f7ff fee2 	bl	80127d0 <_printf_common>
 8012a0c:	3001      	adds	r0, #1
 8012a0e:	d14c      	bne.n	8012aaa <_printf_i+0x1fe>
 8012a10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a14:	b004      	add	sp, #16
 8012a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a1a:	4835      	ldr	r0, [pc, #212]	; (8012af0 <_printf_i+0x244>)
 8012a1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012a20:	6829      	ldr	r1, [r5, #0]
 8012a22:	6823      	ldr	r3, [r4, #0]
 8012a24:	f851 6b04 	ldr.w	r6, [r1], #4
 8012a28:	6029      	str	r1, [r5, #0]
 8012a2a:	061d      	lsls	r5, r3, #24
 8012a2c:	d514      	bpl.n	8012a58 <_printf_i+0x1ac>
 8012a2e:	07df      	lsls	r7, r3, #31
 8012a30:	bf44      	itt	mi
 8012a32:	f043 0320 	orrmi.w	r3, r3, #32
 8012a36:	6023      	strmi	r3, [r4, #0]
 8012a38:	b91e      	cbnz	r6, 8012a42 <_printf_i+0x196>
 8012a3a:	6823      	ldr	r3, [r4, #0]
 8012a3c:	f023 0320 	bic.w	r3, r3, #32
 8012a40:	6023      	str	r3, [r4, #0]
 8012a42:	2310      	movs	r3, #16
 8012a44:	e7b0      	b.n	80129a8 <_printf_i+0xfc>
 8012a46:	6823      	ldr	r3, [r4, #0]
 8012a48:	f043 0320 	orr.w	r3, r3, #32
 8012a4c:	6023      	str	r3, [r4, #0]
 8012a4e:	2378      	movs	r3, #120	; 0x78
 8012a50:	4828      	ldr	r0, [pc, #160]	; (8012af4 <_printf_i+0x248>)
 8012a52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012a56:	e7e3      	b.n	8012a20 <_printf_i+0x174>
 8012a58:	0659      	lsls	r1, r3, #25
 8012a5a:	bf48      	it	mi
 8012a5c:	b2b6      	uxthmi	r6, r6
 8012a5e:	e7e6      	b.n	8012a2e <_printf_i+0x182>
 8012a60:	4615      	mov	r5, r2
 8012a62:	e7bb      	b.n	80129dc <_printf_i+0x130>
 8012a64:	682b      	ldr	r3, [r5, #0]
 8012a66:	6826      	ldr	r6, [r4, #0]
 8012a68:	6961      	ldr	r1, [r4, #20]
 8012a6a:	1d18      	adds	r0, r3, #4
 8012a6c:	6028      	str	r0, [r5, #0]
 8012a6e:	0635      	lsls	r5, r6, #24
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	d501      	bpl.n	8012a78 <_printf_i+0x1cc>
 8012a74:	6019      	str	r1, [r3, #0]
 8012a76:	e002      	b.n	8012a7e <_printf_i+0x1d2>
 8012a78:	0670      	lsls	r0, r6, #25
 8012a7a:	d5fb      	bpl.n	8012a74 <_printf_i+0x1c8>
 8012a7c:	8019      	strh	r1, [r3, #0]
 8012a7e:	2300      	movs	r3, #0
 8012a80:	6123      	str	r3, [r4, #16]
 8012a82:	4615      	mov	r5, r2
 8012a84:	e7ba      	b.n	80129fc <_printf_i+0x150>
 8012a86:	682b      	ldr	r3, [r5, #0]
 8012a88:	1d1a      	adds	r2, r3, #4
 8012a8a:	602a      	str	r2, [r5, #0]
 8012a8c:	681d      	ldr	r5, [r3, #0]
 8012a8e:	6862      	ldr	r2, [r4, #4]
 8012a90:	2100      	movs	r1, #0
 8012a92:	4628      	mov	r0, r5
 8012a94:	f7ed fbcc 	bl	8000230 <memchr>
 8012a98:	b108      	cbz	r0, 8012a9e <_printf_i+0x1f2>
 8012a9a:	1b40      	subs	r0, r0, r5
 8012a9c:	6060      	str	r0, [r4, #4]
 8012a9e:	6863      	ldr	r3, [r4, #4]
 8012aa0:	6123      	str	r3, [r4, #16]
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012aa8:	e7a8      	b.n	80129fc <_printf_i+0x150>
 8012aaa:	6923      	ldr	r3, [r4, #16]
 8012aac:	462a      	mov	r2, r5
 8012aae:	4649      	mov	r1, r9
 8012ab0:	4640      	mov	r0, r8
 8012ab2:	47d0      	blx	sl
 8012ab4:	3001      	adds	r0, #1
 8012ab6:	d0ab      	beq.n	8012a10 <_printf_i+0x164>
 8012ab8:	6823      	ldr	r3, [r4, #0]
 8012aba:	079b      	lsls	r3, r3, #30
 8012abc:	d413      	bmi.n	8012ae6 <_printf_i+0x23a>
 8012abe:	68e0      	ldr	r0, [r4, #12]
 8012ac0:	9b03      	ldr	r3, [sp, #12]
 8012ac2:	4298      	cmp	r0, r3
 8012ac4:	bfb8      	it	lt
 8012ac6:	4618      	movlt	r0, r3
 8012ac8:	e7a4      	b.n	8012a14 <_printf_i+0x168>
 8012aca:	2301      	movs	r3, #1
 8012acc:	4632      	mov	r2, r6
 8012ace:	4649      	mov	r1, r9
 8012ad0:	4640      	mov	r0, r8
 8012ad2:	47d0      	blx	sl
 8012ad4:	3001      	adds	r0, #1
 8012ad6:	d09b      	beq.n	8012a10 <_printf_i+0x164>
 8012ad8:	3501      	adds	r5, #1
 8012ada:	68e3      	ldr	r3, [r4, #12]
 8012adc:	9903      	ldr	r1, [sp, #12]
 8012ade:	1a5b      	subs	r3, r3, r1
 8012ae0:	42ab      	cmp	r3, r5
 8012ae2:	dcf2      	bgt.n	8012aca <_printf_i+0x21e>
 8012ae4:	e7eb      	b.n	8012abe <_printf_i+0x212>
 8012ae6:	2500      	movs	r5, #0
 8012ae8:	f104 0619 	add.w	r6, r4, #25
 8012aec:	e7f5      	b.n	8012ada <_printf_i+0x22e>
 8012aee:	bf00      	nop
 8012af0:	080153a2 	.word	0x080153a2
 8012af4:	080153b3 	.word	0x080153b3

08012af8 <iprintf>:
 8012af8:	b40f      	push	{r0, r1, r2, r3}
 8012afa:	4b0a      	ldr	r3, [pc, #40]	; (8012b24 <iprintf+0x2c>)
 8012afc:	b513      	push	{r0, r1, r4, lr}
 8012afe:	681c      	ldr	r4, [r3, #0]
 8012b00:	b124      	cbz	r4, 8012b0c <iprintf+0x14>
 8012b02:	69a3      	ldr	r3, [r4, #24]
 8012b04:	b913      	cbnz	r3, 8012b0c <iprintf+0x14>
 8012b06:	4620      	mov	r0, r4
 8012b08:	f7ff fa1c 	bl	8011f44 <__sinit>
 8012b0c:	ab05      	add	r3, sp, #20
 8012b0e:	9a04      	ldr	r2, [sp, #16]
 8012b10:	68a1      	ldr	r1, [r4, #8]
 8012b12:	9301      	str	r3, [sp, #4]
 8012b14:	4620      	mov	r0, r4
 8012b16:	f001 ffab 	bl	8014a70 <_vfiprintf_r>
 8012b1a:	b002      	add	sp, #8
 8012b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b20:	b004      	add	sp, #16
 8012b22:	4770      	bx	lr
 8012b24:	20000188 	.word	0x20000188

08012b28 <_puts_r>:
 8012b28:	b570      	push	{r4, r5, r6, lr}
 8012b2a:	460e      	mov	r6, r1
 8012b2c:	4605      	mov	r5, r0
 8012b2e:	b118      	cbz	r0, 8012b38 <_puts_r+0x10>
 8012b30:	6983      	ldr	r3, [r0, #24]
 8012b32:	b90b      	cbnz	r3, 8012b38 <_puts_r+0x10>
 8012b34:	f7ff fa06 	bl	8011f44 <__sinit>
 8012b38:	69ab      	ldr	r3, [r5, #24]
 8012b3a:	68ac      	ldr	r4, [r5, #8]
 8012b3c:	b913      	cbnz	r3, 8012b44 <_puts_r+0x1c>
 8012b3e:	4628      	mov	r0, r5
 8012b40:	f7ff fa00 	bl	8011f44 <__sinit>
 8012b44:	4b2c      	ldr	r3, [pc, #176]	; (8012bf8 <_puts_r+0xd0>)
 8012b46:	429c      	cmp	r4, r3
 8012b48:	d120      	bne.n	8012b8c <_puts_r+0x64>
 8012b4a:	686c      	ldr	r4, [r5, #4]
 8012b4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012b4e:	07db      	lsls	r3, r3, #31
 8012b50:	d405      	bmi.n	8012b5e <_puts_r+0x36>
 8012b52:	89a3      	ldrh	r3, [r4, #12]
 8012b54:	0598      	lsls	r0, r3, #22
 8012b56:	d402      	bmi.n	8012b5e <_puts_r+0x36>
 8012b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012b5a:	f7ff fab6 	bl	80120ca <__retarget_lock_acquire_recursive>
 8012b5e:	89a3      	ldrh	r3, [r4, #12]
 8012b60:	0719      	lsls	r1, r3, #28
 8012b62:	d51d      	bpl.n	8012ba0 <_puts_r+0x78>
 8012b64:	6923      	ldr	r3, [r4, #16]
 8012b66:	b1db      	cbz	r3, 8012ba0 <_puts_r+0x78>
 8012b68:	3e01      	subs	r6, #1
 8012b6a:	68a3      	ldr	r3, [r4, #8]
 8012b6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012b70:	3b01      	subs	r3, #1
 8012b72:	60a3      	str	r3, [r4, #8]
 8012b74:	bb39      	cbnz	r1, 8012bc6 <_puts_r+0x9e>
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	da38      	bge.n	8012bec <_puts_r+0xc4>
 8012b7a:	4622      	mov	r2, r4
 8012b7c:	210a      	movs	r1, #10
 8012b7e:	4628      	mov	r0, r5
 8012b80:	f000 f95a 	bl	8012e38 <__swbuf_r>
 8012b84:	3001      	adds	r0, #1
 8012b86:	d011      	beq.n	8012bac <_puts_r+0x84>
 8012b88:	250a      	movs	r5, #10
 8012b8a:	e011      	b.n	8012bb0 <_puts_r+0x88>
 8012b8c:	4b1b      	ldr	r3, [pc, #108]	; (8012bfc <_puts_r+0xd4>)
 8012b8e:	429c      	cmp	r4, r3
 8012b90:	d101      	bne.n	8012b96 <_puts_r+0x6e>
 8012b92:	68ac      	ldr	r4, [r5, #8]
 8012b94:	e7da      	b.n	8012b4c <_puts_r+0x24>
 8012b96:	4b1a      	ldr	r3, [pc, #104]	; (8012c00 <_puts_r+0xd8>)
 8012b98:	429c      	cmp	r4, r3
 8012b9a:	bf08      	it	eq
 8012b9c:	68ec      	ldreq	r4, [r5, #12]
 8012b9e:	e7d5      	b.n	8012b4c <_puts_r+0x24>
 8012ba0:	4621      	mov	r1, r4
 8012ba2:	4628      	mov	r0, r5
 8012ba4:	f000 f9ac 	bl	8012f00 <__swsetup_r>
 8012ba8:	2800      	cmp	r0, #0
 8012baa:	d0dd      	beq.n	8012b68 <_puts_r+0x40>
 8012bac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8012bb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012bb2:	07da      	lsls	r2, r3, #31
 8012bb4:	d405      	bmi.n	8012bc2 <_puts_r+0x9a>
 8012bb6:	89a3      	ldrh	r3, [r4, #12]
 8012bb8:	059b      	lsls	r3, r3, #22
 8012bba:	d402      	bmi.n	8012bc2 <_puts_r+0x9a>
 8012bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012bbe:	f7ff fa85 	bl	80120cc <__retarget_lock_release_recursive>
 8012bc2:	4628      	mov	r0, r5
 8012bc4:	bd70      	pop	{r4, r5, r6, pc}
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	da04      	bge.n	8012bd4 <_puts_r+0xac>
 8012bca:	69a2      	ldr	r2, [r4, #24]
 8012bcc:	429a      	cmp	r2, r3
 8012bce:	dc06      	bgt.n	8012bde <_puts_r+0xb6>
 8012bd0:	290a      	cmp	r1, #10
 8012bd2:	d004      	beq.n	8012bde <_puts_r+0xb6>
 8012bd4:	6823      	ldr	r3, [r4, #0]
 8012bd6:	1c5a      	adds	r2, r3, #1
 8012bd8:	6022      	str	r2, [r4, #0]
 8012bda:	7019      	strb	r1, [r3, #0]
 8012bdc:	e7c5      	b.n	8012b6a <_puts_r+0x42>
 8012bde:	4622      	mov	r2, r4
 8012be0:	4628      	mov	r0, r5
 8012be2:	f000 f929 	bl	8012e38 <__swbuf_r>
 8012be6:	3001      	adds	r0, #1
 8012be8:	d1bf      	bne.n	8012b6a <_puts_r+0x42>
 8012bea:	e7df      	b.n	8012bac <_puts_r+0x84>
 8012bec:	6823      	ldr	r3, [r4, #0]
 8012bee:	250a      	movs	r5, #10
 8012bf0:	1c5a      	adds	r2, r3, #1
 8012bf2:	6022      	str	r2, [r4, #0]
 8012bf4:	701d      	strb	r5, [r3, #0]
 8012bf6:	e7db      	b.n	8012bb0 <_puts_r+0x88>
 8012bf8:	0801534c 	.word	0x0801534c
 8012bfc:	0801536c 	.word	0x0801536c
 8012c00:	0801532c 	.word	0x0801532c

08012c04 <puts>:
 8012c04:	4b02      	ldr	r3, [pc, #8]	; (8012c10 <puts+0xc>)
 8012c06:	4601      	mov	r1, r0
 8012c08:	6818      	ldr	r0, [r3, #0]
 8012c0a:	f7ff bf8d 	b.w	8012b28 <_puts_r>
 8012c0e:	bf00      	nop
 8012c10:	20000188 	.word	0x20000188

08012c14 <cleanup_glue>:
 8012c14:	b538      	push	{r3, r4, r5, lr}
 8012c16:	460c      	mov	r4, r1
 8012c18:	6809      	ldr	r1, [r1, #0]
 8012c1a:	4605      	mov	r5, r0
 8012c1c:	b109      	cbz	r1, 8012c22 <cleanup_glue+0xe>
 8012c1e:	f7ff fff9 	bl	8012c14 <cleanup_glue>
 8012c22:	4621      	mov	r1, r4
 8012c24:	4628      	mov	r0, r5
 8012c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c2a:	f001 bd4f 	b.w	80146cc <_free_r>
	...

08012c30 <_reclaim_reent>:
 8012c30:	4b2c      	ldr	r3, [pc, #176]	; (8012ce4 <_reclaim_reent+0xb4>)
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	4283      	cmp	r3, r0
 8012c36:	b570      	push	{r4, r5, r6, lr}
 8012c38:	4604      	mov	r4, r0
 8012c3a:	d051      	beq.n	8012ce0 <_reclaim_reent+0xb0>
 8012c3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012c3e:	b143      	cbz	r3, 8012c52 <_reclaim_reent+0x22>
 8012c40:	68db      	ldr	r3, [r3, #12]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d14a      	bne.n	8012cdc <_reclaim_reent+0xac>
 8012c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012c48:	6819      	ldr	r1, [r3, #0]
 8012c4a:	b111      	cbz	r1, 8012c52 <_reclaim_reent+0x22>
 8012c4c:	4620      	mov	r0, r4
 8012c4e:	f001 fd3d 	bl	80146cc <_free_r>
 8012c52:	6961      	ldr	r1, [r4, #20]
 8012c54:	b111      	cbz	r1, 8012c5c <_reclaim_reent+0x2c>
 8012c56:	4620      	mov	r0, r4
 8012c58:	f001 fd38 	bl	80146cc <_free_r>
 8012c5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012c5e:	b111      	cbz	r1, 8012c66 <_reclaim_reent+0x36>
 8012c60:	4620      	mov	r0, r4
 8012c62:	f001 fd33 	bl	80146cc <_free_r>
 8012c66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012c68:	b111      	cbz	r1, 8012c70 <_reclaim_reent+0x40>
 8012c6a:	4620      	mov	r0, r4
 8012c6c:	f001 fd2e 	bl	80146cc <_free_r>
 8012c70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012c72:	b111      	cbz	r1, 8012c7a <_reclaim_reent+0x4a>
 8012c74:	4620      	mov	r0, r4
 8012c76:	f001 fd29 	bl	80146cc <_free_r>
 8012c7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012c7c:	b111      	cbz	r1, 8012c84 <_reclaim_reent+0x54>
 8012c7e:	4620      	mov	r0, r4
 8012c80:	f001 fd24 	bl	80146cc <_free_r>
 8012c84:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012c86:	b111      	cbz	r1, 8012c8e <_reclaim_reent+0x5e>
 8012c88:	4620      	mov	r0, r4
 8012c8a:	f001 fd1f 	bl	80146cc <_free_r>
 8012c8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012c90:	b111      	cbz	r1, 8012c98 <_reclaim_reent+0x68>
 8012c92:	4620      	mov	r0, r4
 8012c94:	f001 fd1a 	bl	80146cc <_free_r>
 8012c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c9a:	b111      	cbz	r1, 8012ca2 <_reclaim_reent+0x72>
 8012c9c:	4620      	mov	r0, r4
 8012c9e:	f001 fd15 	bl	80146cc <_free_r>
 8012ca2:	69a3      	ldr	r3, [r4, #24]
 8012ca4:	b1e3      	cbz	r3, 8012ce0 <_reclaim_reent+0xb0>
 8012ca6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012ca8:	4620      	mov	r0, r4
 8012caa:	4798      	blx	r3
 8012cac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012cae:	b1b9      	cbz	r1, 8012ce0 <_reclaim_reent+0xb0>
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012cb6:	f7ff bfad 	b.w	8012c14 <cleanup_glue>
 8012cba:	5949      	ldr	r1, [r1, r5]
 8012cbc:	b941      	cbnz	r1, 8012cd0 <_reclaim_reent+0xa0>
 8012cbe:	3504      	adds	r5, #4
 8012cc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012cc2:	2d80      	cmp	r5, #128	; 0x80
 8012cc4:	68d9      	ldr	r1, [r3, #12]
 8012cc6:	d1f8      	bne.n	8012cba <_reclaim_reent+0x8a>
 8012cc8:	4620      	mov	r0, r4
 8012cca:	f001 fcff 	bl	80146cc <_free_r>
 8012cce:	e7ba      	b.n	8012c46 <_reclaim_reent+0x16>
 8012cd0:	680e      	ldr	r6, [r1, #0]
 8012cd2:	4620      	mov	r0, r4
 8012cd4:	f001 fcfa 	bl	80146cc <_free_r>
 8012cd8:	4631      	mov	r1, r6
 8012cda:	e7ef      	b.n	8012cbc <_reclaim_reent+0x8c>
 8012cdc:	2500      	movs	r5, #0
 8012cde:	e7ef      	b.n	8012cc0 <_reclaim_reent+0x90>
 8012ce0:	bd70      	pop	{r4, r5, r6, pc}
 8012ce2:	bf00      	nop
 8012ce4:	20000188 	.word	0x20000188

08012ce8 <_sbrk_r>:
 8012ce8:	b538      	push	{r3, r4, r5, lr}
 8012cea:	4d06      	ldr	r5, [pc, #24]	; (8012d04 <_sbrk_r+0x1c>)
 8012cec:	2300      	movs	r3, #0
 8012cee:	4604      	mov	r4, r0
 8012cf0:	4608      	mov	r0, r1
 8012cf2:	602b      	str	r3, [r5, #0]
 8012cf4:	f7ef f942 	bl	8001f7c <_sbrk>
 8012cf8:	1c43      	adds	r3, r0, #1
 8012cfa:	d102      	bne.n	8012d02 <_sbrk_r+0x1a>
 8012cfc:	682b      	ldr	r3, [r5, #0]
 8012cfe:	b103      	cbz	r3, 8012d02 <_sbrk_r+0x1a>
 8012d00:	6023      	str	r3, [r4, #0]
 8012d02:	bd38      	pop	{r3, r4, r5, pc}
 8012d04:	200034a8 	.word	0x200034a8

08012d08 <sniprintf>:
 8012d08:	b40c      	push	{r2, r3}
 8012d0a:	b530      	push	{r4, r5, lr}
 8012d0c:	4b17      	ldr	r3, [pc, #92]	; (8012d6c <sniprintf+0x64>)
 8012d0e:	1e0c      	subs	r4, r1, #0
 8012d10:	681d      	ldr	r5, [r3, #0]
 8012d12:	b09d      	sub	sp, #116	; 0x74
 8012d14:	da08      	bge.n	8012d28 <sniprintf+0x20>
 8012d16:	238b      	movs	r3, #139	; 0x8b
 8012d18:	602b      	str	r3, [r5, #0]
 8012d1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d1e:	b01d      	add	sp, #116	; 0x74
 8012d20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d24:	b002      	add	sp, #8
 8012d26:	4770      	bx	lr
 8012d28:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012d2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012d30:	bf14      	ite	ne
 8012d32:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8012d36:	4623      	moveq	r3, r4
 8012d38:	9304      	str	r3, [sp, #16]
 8012d3a:	9307      	str	r3, [sp, #28]
 8012d3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d40:	9002      	str	r0, [sp, #8]
 8012d42:	9006      	str	r0, [sp, #24]
 8012d44:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012d48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012d4a:	ab21      	add	r3, sp, #132	; 0x84
 8012d4c:	a902      	add	r1, sp, #8
 8012d4e:	4628      	mov	r0, r5
 8012d50:	9301      	str	r3, [sp, #4]
 8012d52:	f001 fd63 	bl	801481c <_svfiprintf_r>
 8012d56:	1c43      	adds	r3, r0, #1
 8012d58:	bfbc      	itt	lt
 8012d5a:	238b      	movlt	r3, #139	; 0x8b
 8012d5c:	602b      	strlt	r3, [r5, #0]
 8012d5e:	2c00      	cmp	r4, #0
 8012d60:	d0dd      	beq.n	8012d1e <sniprintf+0x16>
 8012d62:	9b02      	ldr	r3, [sp, #8]
 8012d64:	2200      	movs	r2, #0
 8012d66:	701a      	strb	r2, [r3, #0]
 8012d68:	e7d9      	b.n	8012d1e <sniprintf+0x16>
 8012d6a:	bf00      	nop
 8012d6c:	20000188 	.word	0x20000188

08012d70 <siprintf>:
 8012d70:	b40e      	push	{r1, r2, r3}
 8012d72:	b500      	push	{lr}
 8012d74:	b09c      	sub	sp, #112	; 0x70
 8012d76:	ab1d      	add	r3, sp, #116	; 0x74
 8012d78:	9002      	str	r0, [sp, #8]
 8012d7a:	9006      	str	r0, [sp, #24]
 8012d7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012d80:	4809      	ldr	r0, [pc, #36]	; (8012da8 <siprintf+0x38>)
 8012d82:	9107      	str	r1, [sp, #28]
 8012d84:	9104      	str	r1, [sp, #16]
 8012d86:	4909      	ldr	r1, [pc, #36]	; (8012dac <siprintf+0x3c>)
 8012d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d8c:	9105      	str	r1, [sp, #20]
 8012d8e:	6800      	ldr	r0, [r0, #0]
 8012d90:	9301      	str	r3, [sp, #4]
 8012d92:	a902      	add	r1, sp, #8
 8012d94:	f001 fd42 	bl	801481c <_svfiprintf_r>
 8012d98:	9b02      	ldr	r3, [sp, #8]
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	701a      	strb	r2, [r3, #0]
 8012d9e:	b01c      	add	sp, #112	; 0x70
 8012da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012da4:	b003      	add	sp, #12
 8012da6:	4770      	bx	lr
 8012da8:	20000188 	.word	0x20000188
 8012dac:	ffff0208 	.word	0xffff0208

08012db0 <__sread>:
 8012db0:	b510      	push	{r4, lr}
 8012db2:	460c      	mov	r4, r1
 8012db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012db8:	f001 ff8a 	bl	8014cd0 <_read_r>
 8012dbc:	2800      	cmp	r0, #0
 8012dbe:	bfab      	itete	ge
 8012dc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012dc2:	89a3      	ldrhlt	r3, [r4, #12]
 8012dc4:	181b      	addge	r3, r3, r0
 8012dc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012dca:	bfac      	ite	ge
 8012dcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8012dce:	81a3      	strhlt	r3, [r4, #12]
 8012dd0:	bd10      	pop	{r4, pc}

08012dd2 <__swrite>:
 8012dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dd6:	461f      	mov	r7, r3
 8012dd8:	898b      	ldrh	r3, [r1, #12]
 8012dda:	05db      	lsls	r3, r3, #23
 8012ddc:	4605      	mov	r5, r0
 8012dde:	460c      	mov	r4, r1
 8012de0:	4616      	mov	r6, r2
 8012de2:	d505      	bpl.n	8012df0 <__swrite+0x1e>
 8012de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012de8:	2302      	movs	r3, #2
 8012dea:	2200      	movs	r2, #0
 8012dec:	f001 f848 	bl	8013e80 <_lseek_r>
 8012df0:	89a3      	ldrh	r3, [r4, #12]
 8012df2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012df6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012dfa:	81a3      	strh	r3, [r4, #12]
 8012dfc:	4632      	mov	r2, r6
 8012dfe:	463b      	mov	r3, r7
 8012e00:	4628      	mov	r0, r5
 8012e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e06:	f000 b869 	b.w	8012edc <_write_r>

08012e0a <__sseek>:
 8012e0a:	b510      	push	{r4, lr}
 8012e0c:	460c      	mov	r4, r1
 8012e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e12:	f001 f835 	bl	8013e80 <_lseek_r>
 8012e16:	1c43      	adds	r3, r0, #1
 8012e18:	89a3      	ldrh	r3, [r4, #12]
 8012e1a:	bf15      	itete	ne
 8012e1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8012e1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012e22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012e26:	81a3      	strheq	r3, [r4, #12]
 8012e28:	bf18      	it	ne
 8012e2a:	81a3      	strhne	r3, [r4, #12]
 8012e2c:	bd10      	pop	{r4, pc}

08012e2e <__sclose>:
 8012e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e32:	f000 b8d3 	b.w	8012fdc <_close_r>
	...

08012e38 <__swbuf_r>:
 8012e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e3a:	460e      	mov	r6, r1
 8012e3c:	4614      	mov	r4, r2
 8012e3e:	4605      	mov	r5, r0
 8012e40:	b118      	cbz	r0, 8012e4a <__swbuf_r+0x12>
 8012e42:	6983      	ldr	r3, [r0, #24]
 8012e44:	b90b      	cbnz	r3, 8012e4a <__swbuf_r+0x12>
 8012e46:	f7ff f87d 	bl	8011f44 <__sinit>
 8012e4a:	4b21      	ldr	r3, [pc, #132]	; (8012ed0 <__swbuf_r+0x98>)
 8012e4c:	429c      	cmp	r4, r3
 8012e4e:	d12b      	bne.n	8012ea8 <__swbuf_r+0x70>
 8012e50:	686c      	ldr	r4, [r5, #4]
 8012e52:	69a3      	ldr	r3, [r4, #24]
 8012e54:	60a3      	str	r3, [r4, #8]
 8012e56:	89a3      	ldrh	r3, [r4, #12]
 8012e58:	071a      	lsls	r2, r3, #28
 8012e5a:	d52f      	bpl.n	8012ebc <__swbuf_r+0x84>
 8012e5c:	6923      	ldr	r3, [r4, #16]
 8012e5e:	b36b      	cbz	r3, 8012ebc <__swbuf_r+0x84>
 8012e60:	6923      	ldr	r3, [r4, #16]
 8012e62:	6820      	ldr	r0, [r4, #0]
 8012e64:	1ac0      	subs	r0, r0, r3
 8012e66:	6963      	ldr	r3, [r4, #20]
 8012e68:	b2f6      	uxtb	r6, r6
 8012e6a:	4283      	cmp	r3, r0
 8012e6c:	4637      	mov	r7, r6
 8012e6e:	dc04      	bgt.n	8012e7a <__swbuf_r+0x42>
 8012e70:	4621      	mov	r1, r4
 8012e72:	4628      	mov	r0, r5
 8012e74:	f000 ffc4 	bl	8013e00 <_fflush_r>
 8012e78:	bb30      	cbnz	r0, 8012ec8 <__swbuf_r+0x90>
 8012e7a:	68a3      	ldr	r3, [r4, #8]
 8012e7c:	3b01      	subs	r3, #1
 8012e7e:	60a3      	str	r3, [r4, #8]
 8012e80:	6823      	ldr	r3, [r4, #0]
 8012e82:	1c5a      	adds	r2, r3, #1
 8012e84:	6022      	str	r2, [r4, #0]
 8012e86:	701e      	strb	r6, [r3, #0]
 8012e88:	6963      	ldr	r3, [r4, #20]
 8012e8a:	3001      	adds	r0, #1
 8012e8c:	4283      	cmp	r3, r0
 8012e8e:	d004      	beq.n	8012e9a <__swbuf_r+0x62>
 8012e90:	89a3      	ldrh	r3, [r4, #12]
 8012e92:	07db      	lsls	r3, r3, #31
 8012e94:	d506      	bpl.n	8012ea4 <__swbuf_r+0x6c>
 8012e96:	2e0a      	cmp	r6, #10
 8012e98:	d104      	bne.n	8012ea4 <__swbuf_r+0x6c>
 8012e9a:	4621      	mov	r1, r4
 8012e9c:	4628      	mov	r0, r5
 8012e9e:	f000 ffaf 	bl	8013e00 <_fflush_r>
 8012ea2:	b988      	cbnz	r0, 8012ec8 <__swbuf_r+0x90>
 8012ea4:	4638      	mov	r0, r7
 8012ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ea8:	4b0a      	ldr	r3, [pc, #40]	; (8012ed4 <__swbuf_r+0x9c>)
 8012eaa:	429c      	cmp	r4, r3
 8012eac:	d101      	bne.n	8012eb2 <__swbuf_r+0x7a>
 8012eae:	68ac      	ldr	r4, [r5, #8]
 8012eb0:	e7cf      	b.n	8012e52 <__swbuf_r+0x1a>
 8012eb2:	4b09      	ldr	r3, [pc, #36]	; (8012ed8 <__swbuf_r+0xa0>)
 8012eb4:	429c      	cmp	r4, r3
 8012eb6:	bf08      	it	eq
 8012eb8:	68ec      	ldreq	r4, [r5, #12]
 8012eba:	e7ca      	b.n	8012e52 <__swbuf_r+0x1a>
 8012ebc:	4621      	mov	r1, r4
 8012ebe:	4628      	mov	r0, r5
 8012ec0:	f000 f81e 	bl	8012f00 <__swsetup_r>
 8012ec4:	2800      	cmp	r0, #0
 8012ec6:	d0cb      	beq.n	8012e60 <__swbuf_r+0x28>
 8012ec8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012ecc:	e7ea      	b.n	8012ea4 <__swbuf_r+0x6c>
 8012ece:	bf00      	nop
 8012ed0:	0801534c 	.word	0x0801534c
 8012ed4:	0801536c 	.word	0x0801536c
 8012ed8:	0801532c 	.word	0x0801532c

08012edc <_write_r>:
 8012edc:	b538      	push	{r3, r4, r5, lr}
 8012ede:	4d07      	ldr	r5, [pc, #28]	; (8012efc <_write_r+0x20>)
 8012ee0:	4604      	mov	r4, r0
 8012ee2:	4608      	mov	r0, r1
 8012ee4:	4611      	mov	r1, r2
 8012ee6:	2200      	movs	r2, #0
 8012ee8:	602a      	str	r2, [r5, #0]
 8012eea:	461a      	mov	r2, r3
 8012eec:	f7ee fff5 	bl	8001eda <_write>
 8012ef0:	1c43      	adds	r3, r0, #1
 8012ef2:	d102      	bne.n	8012efa <_write_r+0x1e>
 8012ef4:	682b      	ldr	r3, [r5, #0]
 8012ef6:	b103      	cbz	r3, 8012efa <_write_r+0x1e>
 8012ef8:	6023      	str	r3, [r4, #0]
 8012efa:	bd38      	pop	{r3, r4, r5, pc}
 8012efc:	200034a8 	.word	0x200034a8

08012f00 <__swsetup_r>:
 8012f00:	4b32      	ldr	r3, [pc, #200]	; (8012fcc <__swsetup_r+0xcc>)
 8012f02:	b570      	push	{r4, r5, r6, lr}
 8012f04:	681d      	ldr	r5, [r3, #0]
 8012f06:	4606      	mov	r6, r0
 8012f08:	460c      	mov	r4, r1
 8012f0a:	b125      	cbz	r5, 8012f16 <__swsetup_r+0x16>
 8012f0c:	69ab      	ldr	r3, [r5, #24]
 8012f0e:	b913      	cbnz	r3, 8012f16 <__swsetup_r+0x16>
 8012f10:	4628      	mov	r0, r5
 8012f12:	f7ff f817 	bl	8011f44 <__sinit>
 8012f16:	4b2e      	ldr	r3, [pc, #184]	; (8012fd0 <__swsetup_r+0xd0>)
 8012f18:	429c      	cmp	r4, r3
 8012f1a:	d10f      	bne.n	8012f3c <__swsetup_r+0x3c>
 8012f1c:	686c      	ldr	r4, [r5, #4]
 8012f1e:	89a3      	ldrh	r3, [r4, #12]
 8012f20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012f24:	0719      	lsls	r1, r3, #28
 8012f26:	d42c      	bmi.n	8012f82 <__swsetup_r+0x82>
 8012f28:	06dd      	lsls	r5, r3, #27
 8012f2a:	d411      	bmi.n	8012f50 <__swsetup_r+0x50>
 8012f2c:	2309      	movs	r3, #9
 8012f2e:	6033      	str	r3, [r6, #0]
 8012f30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012f34:	81a3      	strh	r3, [r4, #12]
 8012f36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f3a:	e03e      	b.n	8012fba <__swsetup_r+0xba>
 8012f3c:	4b25      	ldr	r3, [pc, #148]	; (8012fd4 <__swsetup_r+0xd4>)
 8012f3e:	429c      	cmp	r4, r3
 8012f40:	d101      	bne.n	8012f46 <__swsetup_r+0x46>
 8012f42:	68ac      	ldr	r4, [r5, #8]
 8012f44:	e7eb      	b.n	8012f1e <__swsetup_r+0x1e>
 8012f46:	4b24      	ldr	r3, [pc, #144]	; (8012fd8 <__swsetup_r+0xd8>)
 8012f48:	429c      	cmp	r4, r3
 8012f4a:	bf08      	it	eq
 8012f4c:	68ec      	ldreq	r4, [r5, #12]
 8012f4e:	e7e6      	b.n	8012f1e <__swsetup_r+0x1e>
 8012f50:	0758      	lsls	r0, r3, #29
 8012f52:	d512      	bpl.n	8012f7a <__swsetup_r+0x7a>
 8012f54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012f56:	b141      	cbz	r1, 8012f6a <__swsetup_r+0x6a>
 8012f58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012f5c:	4299      	cmp	r1, r3
 8012f5e:	d002      	beq.n	8012f66 <__swsetup_r+0x66>
 8012f60:	4630      	mov	r0, r6
 8012f62:	f001 fbb3 	bl	80146cc <_free_r>
 8012f66:	2300      	movs	r3, #0
 8012f68:	6363      	str	r3, [r4, #52]	; 0x34
 8012f6a:	89a3      	ldrh	r3, [r4, #12]
 8012f6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012f70:	81a3      	strh	r3, [r4, #12]
 8012f72:	2300      	movs	r3, #0
 8012f74:	6063      	str	r3, [r4, #4]
 8012f76:	6923      	ldr	r3, [r4, #16]
 8012f78:	6023      	str	r3, [r4, #0]
 8012f7a:	89a3      	ldrh	r3, [r4, #12]
 8012f7c:	f043 0308 	orr.w	r3, r3, #8
 8012f80:	81a3      	strh	r3, [r4, #12]
 8012f82:	6923      	ldr	r3, [r4, #16]
 8012f84:	b94b      	cbnz	r3, 8012f9a <__swsetup_r+0x9a>
 8012f86:	89a3      	ldrh	r3, [r4, #12]
 8012f88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012f90:	d003      	beq.n	8012f9a <__swsetup_r+0x9a>
 8012f92:	4621      	mov	r1, r4
 8012f94:	4630      	mov	r0, r6
 8012f96:	f000 ffab 	bl	8013ef0 <__smakebuf_r>
 8012f9a:	89a0      	ldrh	r0, [r4, #12]
 8012f9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012fa0:	f010 0301 	ands.w	r3, r0, #1
 8012fa4:	d00a      	beq.n	8012fbc <__swsetup_r+0xbc>
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	60a3      	str	r3, [r4, #8]
 8012faa:	6963      	ldr	r3, [r4, #20]
 8012fac:	425b      	negs	r3, r3
 8012fae:	61a3      	str	r3, [r4, #24]
 8012fb0:	6923      	ldr	r3, [r4, #16]
 8012fb2:	b943      	cbnz	r3, 8012fc6 <__swsetup_r+0xc6>
 8012fb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012fb8:	d1ba      	bne.n	8012f30 <__swsetup_r+0x30>
 8012fba:	bd70      	pop	{r4, r5, r6, pc}
 8012fbc:	0781      	lsls	r1, r0, #30
 8012fbe:	bf58      	it	pl
 8012fc0:	6963      	ldrpl	r3, [r4, #20]
 8012fc2:	60a3      	str	r3, [r4, #8]
 8012fc4:	e7f4      	b.n	8012fb0 <__swsetup_r+0xb0>
 8012fc6:	2000      	movs	r0, #0
 8012fc8:	e7f7      	b.n	8012fba <__swsetup_r+0xba>
 8012fca:	bf00      	nop
 8012fcc:	20000188 	.word	0x20000188
 8012fd0:	0801534c 	.word	0x0801534c
 8012fd4:	0801536c 	.word	0x0801536c
 8012fd8:	0801532c 	.word	0x0801532c

08012fdc <_close_r>:
 8012fdc:	b538      	push	{r3, r4, r5, lr}
 8012fde:	4d06      	ldr	r5, [pc, #24]	; (8012ff8 <_close_r+0x1c>)
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	4604      	mov	r4, r0
 8012fe4:	4608      	mov	r0, r1
 8012fe6:	602b      	str	r3, [r5, #0]
 8012fe8:	f7ee ff93 	bl	8001f12 <_close>
 8012fec:	1c43      	adds	r3, r0, #1
 8012fee:	d102      	bne.n	8012ff6 <_close_r+0x1a>
 8012ff0:	682b      	ldr	r3, [r5, #0]
 8012ff2:	b103      	cbz	r3, 8012ff6 <_close_r+0x1a>
 8012ff4:	6023      	str	r3, [r4, #0]
 8012ff6:	bd38      	pop	{r3, r4, r5, pc}
 8012ff8:	200034a8 	.word	0x200034a8

08012ffc <quorem>:
 8012ffc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013000:	6903      	ldr	r3, [r0, #16]
 8013002:	690c      	ldr	r4, [r1, #16]
 8013004:	42a3      	cmp	r3, r4
 8013006:	4607      	mov	r7, r0
 8013008:	f2c0 8081 	blt.w	801310e <quorem+0x112>
 801300c:	3c01      	subs	r4, #1
 801300e:	f101 0814 	add.w	r8, r1, #20
 8013012:	f100 0514 	add.w	r5, r0, #20
 8013016:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801301a:	9301      	str	r3, [sp, #4]
 801301c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013020:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013024:	3301      	adds	r3, #1
 8013026:	429a      	cmp	r2, r3
 8013028:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801302c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013030:	fbb2 f6f3 	udiv	r6, r2, r3
 8013034:	d331      	bcc.n	801309a <quorem+0x9e>
 8013036:	f04f 0e00 	mov.w	lr, #0
 801303a:	4640      	mov	r0, r8
 801303c:	46ac      	mov	ip, r5
 801303e:	46f2      	mov	sl, lr
 8013040:	f850 2b04 	ldr.w	r2, [r0], #4
 8013044:	b293      	uxth	r3, r2
 8013046:	fb06 e303 	mla	r3, r6, r3, lr
 801304a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801304e:	b29b      	uxth	r3, r3
 8013050:	ebaa 0303 	sub.w	r3, sl, r3
 8013054:	f8dc a000 	ldr.w	sl, [ip]
 8013058:	0c12      	lsrs	r2, r2, #16
 801305a:	fa13 f38a 	uxtah	r3, r3, sl
 801305e:	fb06 e202 	mla	r2, r6, r2, lr
 8013062:	9300      	str	r3, [sp, #0]
 8013064:	9b00      	ldr	r3, [sp, #0]
 8013066:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801306a:	b292      	uxth	r2, r2
 801306c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013070:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013074:	f8bd 3000 	ldrh.w	r3, [sp]
 8013078:	4581      	cmp	r9, r0
 801307a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801307e:	f84c 3b04 	str.w	r3, [ip], #4
 8013082:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013086:	d2db      	bcs.n	8013040 <quorem+0x44>
 8013088:	f855 300b 	ldr.w	r3, [r5, fp]
 801308c:	b92b      	cbnz	r3, 801309a <quorem+0x9e>
 801308e:	9b01      	ldr	r3, [sp, #4]
 8013090:	3b04      	subs	r3, #4
 8013092:	429d      	cmp	r5, r3
 8013094:	461a      	mov	r2, r3
 8013096:	d32e      	bcc.n	80130f6 <quorem+0xfa>
 8013098:	613c      	str	r4, [r7, #16]
 801309a:	4638      	mov	r0, r7
 801309c:	f001 f9fe 	bl	801449c <__mcmp>
 80130a0:	2800      	cmp	r0, #0
 80130a2:	db24      	blt.n	80130ee <quorem+0xf2>
 80130a4:	3601      	adds	r6, #1
 80130a6:	4628      	mov	r0, r5
 80130a8:	f04f 0c00 	mov.w	ip, #0
 80130ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80130b0:	f8d0 e000 	ldr.w	lr, [r0]
 80130b4:	b293      	uxth	r3, r2
 80130b6:	ebac 0303 	sub.w	r3, ip, r3
 80130ba:	0c12      	lsrs	r2, r2, #16
 80130bc:	fa13 f38e 	uxtah	r3, r3, lr
 80130c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80130c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80130c8:	b29b      	uxth	r3, r3
 80130ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80130ce:	45c1      	cmp	r9, r8
 80130d0:	f840 3b04 	str.w	r3, [r0], #4
 80130d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80130d8:	d2e8      	bcs.n	80130ac <quorem+0xb0>
 80130da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80130de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80130e2:	b922      	cbnz	r2, 80130ee <quorem+0xf2>
 80130e4:	3b04      	subs	r3, #4
 80130e6:	429d      	cmp	r5, r3
 80130e8:	461a      	mov	r2, r3
 80130ea:	d30a      	bcc.n	8013102 <quorem+0x106>
 80130ec:	613c      	str	r4, [r7, #16]
 80130ee:	4630      	mov	r0, r6
 80130f0:	b003      	add	sp, #12
 80130f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130f6:	6812      	ldr	r2, [r2, #0]
 80130f8:	3b04      	subs	r3, #4
 80130fa:	2a00      	cmp	r2, #0
 80130fc:	d1cc      	bne.n	8013098 <quorem+0x9c>
 80130fe:	3c01      	subs	r4, #1
 8013100:	e7c7      	b.n	8013092 <quorem+0x96>
 8013102:	6812      	ldr	r2, [r2, #0]
 8013104:	3b04      	subs	r3, #4
 8013106:	2a00      	cmp	r2, #0
 8013108:	d1f0      	bne.n	80130ec <quorem+0xf0>
 801310a:	3c01      	subs	r4, #1
 801310c:	e7eb      	b.n	80130e6 <quorem+0xea>
 801310e:	2000      	movs	r0, #0
 8013110:	e7ee      	b.n	80130f0 <quorem+0xf4>
 8013112:	0000      	movs	r0, r0
 8013114:	0000      	movs	r0, r0
	...

08013118 <_dtoa_r>:
 8013118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801311c:	ed2d 8b04 	vpush	{d8-d9}
 8013120:	ec57 6b10 	vmov	r6, r7, d0
 8013124:	b093      	sub	sp, #76	; 0x4c
 8013126:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013128:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801312c:	9106      	str	r1, [sp, #24]
 801312e:	ee10 aa10 	vmov	sl, s0
 8013132:	4604      	mov	r4, r0
 8013134:	9209      	str	r2, [sp, #36]	; 0x24
 8013136:	930c      	str	r3, [sp, #48]	; 0x30
 8013138:	46bb      	mov	fp, r7
 801313a:	b975      	cbnz	r5, 801315a <_dtoa_r+0x42>
 801313c:	2010      	movs	r0, #16
 801313e:	f000 ff17 	bl	8013f70 <malloc>
 8013142:	4602      	mov	r2, r0
 8013144:	6260      	str	r0, [r4, #36]	; 0x24
 8013146:	b920      	cbnz	r0, 8013152 <_dtoa_r+0x3a>
 8013148:	4ba7      	ldr	r3, [pc, #668]	; (80133e8 <_dtoa_r+0x2d0>)
 801314a:	21ea      	movs	r1, #234	; 0xea
 801314c:	48a7      	ldr	r0, [pc, #668]	; (80133ec <_dtoa_r+0x2d4>)
 801314e:	f001 fdd1 	bl	8014cf4 <__assert_func>
 8013152:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013156:	6005      	str	r5, [r0, #0]
 8013158:	60c5      	str	r5, [r0, #12]
 801315a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801315c:	6819      	ldr	r1, [r3, #0]
 801315e:	b151      	cbz	r1, 8013176 <_dtoa_r+0x5e>
 8013160:	685a      	ldr	r2, [r3, #4]
 8013162:	604a      	str	r2, [r1, #4]
 8013164:	2301      	movs	r3, #1
 8013166:	4093      	lsls	r3, r2
 8013168:	608b      	str	r3, [r1, #8]
 801316a:	4620      	mov	r0, r4
 801316c:	f000 ff54 	bl	8014018 <_Bfree>
 8013170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013172:	2200      	movs	r2, #0
 8013174:	601a      	str	r2, [r3, #0]
 8013176:	1e3b      	subs	r3, r7, #0
 8013178:	bfaa      	itet	ge
 801317a:	2300      	movge	r3, #0
 801317c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8013180:	f8c8 3000 	strge.w	r3, [r8]
 8013184:	4b9a      	ldr	r3, [pc, #616]	; (80133f0 <_dtoa_r+0x2d8>)
 8013186:	bfbc      	itt	lt
 8013188:	2201      	movlt	r2, #1
 801318a:	f8c8 2000 	strlt.w	r2, [r8]
 801318e:	ea33 030b 	bics.w	r3, r3, fp
 8013192:	d11b      	bne.n	80131cc <_dtoa_r+0xb4>
 8013194:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013196:	f242 730f 	movw	r3, #9999	; 0x270f
 801319a:	6013      	str	r3, [r2, #0]
 801319c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80131a0:	4333      	orrs	r3, r6
 80131a2:	f000 8592 	beq.w	8013cca <_dtoa_r+0xbb2>
 80131a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80131a8:	b963      	cbnz	r3, 80131c4 <_dtoa_r+0xac>
 80131aa:	4b92      	ldr	r3, [pc, #584]	; (80133f4 <_dtoa_r+0x2dc>)
 80131ac:	e022      	b.n	80131f4 <_dtoa_r+0xdc>
 80131ae:	4b92      	ldr	r3, [pc, #584]	; (80133f8 <_dtoa_r+0x2e0>)
 80131b0:	9301      	str	r3, [sp, #4]
 80131b2:	3308      	adds	r3, #8
 80131b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80131b6:	6013      	str	r3, [r2, #0]
 80131b8:	9801      	ldr	r0, [sp, #4]
 80131ba:	b013      	add	sp, #76	; 0x4c
 80131bc:	ecbd 8b04 	vpop	{d8-d9}
 80131c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131c4:	4b8b      	ldr	r3, [pc, #556]	; (80133f4 <_dtoa_r+0x2dc>)
 80131c6:	9301      	str	r3, [sp, #4]
 80131c8:	3303      	adds	r3, #3
 80131ca:	e7f3      	b.n	80131b4 <_dtoa_r+0x9c>
 80131cc:	2200      	movs	r2, #0
 80131ce:	2300      	movs	r3, #0
 80131d0:	4650      	mov	r0, sl
 80131d2:	4659      	mov	r1, fp
 80131d4:	f7ed fca0 	bl	8000b18 <__aeabi_dcmpeq>
 80131d8:	ec4b ab19 	vmov	d9, sl, fp
 80131dc:	4680      	mov	r8, r0
 80131de:	b158      	cbz	r0, 80131f8 <_dtoa_r+0xe0>
 80131e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80131e2:	2301      	movs	r3, #1
 80131e4:	6013      	str	r3, [r2, #0]
 80131e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	f000 856b 	beq.w	8013cc4 <_dtoa_r+0xbac>
 80131ee:	4883      	ldr	r0, [pc, #524]	; (80133fc <_dtoa_r+0x2e4>)
 80131f0:	6018      	str	r0, [r3, #0]
 80131f2:	1e43      	subs	r3, r0, #1
 80131f4:	9301      	str	r3, [sp, #4]
 80131f6:	e7df      	b.n	80131b8 <_dtoa_r+0xa0>
 80131f8:	ec4b ab10 	vmov	d0, sl, fp
 80131fc:	aa10      	add	r2, sp, #64	; 0x40
 80131fe:	a911      	add	r1, sp, #68	; 0x44
 8013200:	4620      	mov	r0, r4
 8013202:	f001 f9f1 	bl	80145e8 <__d2b>
 8013206:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801320a:	ee08 0a10 	vmov	s16, r0
 801320e:	2d00      	cmp	r5, #0
 8013210:	f000 8084 	beq.w	801331c <_dtoa_r+0x204>
 8013214:	ee19 3a90 	vmov	r3, s19
 8013218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801321c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013220:	4656      	mov	r6, sl
 8013222:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013226:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801322a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801322e:	4b74      	ldr	r3, [pc, #464]	; (8013400 <_dtoa_r+0x2e8>)
 8013230:	2200      	movs	r2, #0
 8013232:	4630      	mov	r0, r6
 8013234:	4639      	mov	r1, r7
 8013236:	f7ed f84f 	bl	80002d8 <__aeabi_dsub>
 801323a:	a365      	add	r3, pc, #404	; (adr r3, 80133d0 <_dtoa_r+0x2b8>)
 801323c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013240:	f7ed fa02 	bl	8000648 <__aeabi_dmul>
 8013244:	a364      	add	r3, pc, #400	; (adr r3, 80133d8 <_dtoa_r+0x2c0>)
 8013246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801324a:	f7ed f847 	bl	80002dc <__adddf3>
 801324e:	4606      	mov	r6, r0
 8013250:	4628      	mov	r0, r5
 8013252:	460f      	mov	r7, r1
 8013254:	f7ed f98e 	bl	8000574 <__aeabi_i2d>
 8013258:	a361      	add	r3, pc, #388	; (adr r3, 80133e0 <_dtoa_r+0x2c8>)
 801325a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801325e:	f7ed f9f3 	bl	8000648 <__aeabi_dmul>
 8013262:	4602      	mov	r2, r0
 8013264:	460b      	mov	r3, r1
 8013266:	4630      	mov	r0, r6
 8013268:	4639      	mov	r1, r7
 801326a:	f7ed f837 	bl	80002dc <__adddf3>
 801326e:	4606      	mov	r6, r0
 8013270:	460f      	mov	r7, r1
 8013272:	f7ed fc99 	bl	8000ba8 <__aeabi_d2iz>
 8013276:	2200      	movs	r2, #0
 8013278:	9000      	str	r0, [sp, #0]
 801327a:	2300      	movs	r3, #0
 801327c:	4630      	mov	r0, r6
 801327e:	4639      	mov	r1, r7
 8013280:	f7ed fc54 	bl	8000b2c <__aeabi_dcmplt>
 8013284:	b150      	cbz	r0, 801329c <_dtoa_r+0x184>
 8013286:	9800      	ldr	r0, [sp, #0]
 8013288:	f7ed f974 	bl	8000574 <__aeabi_i2d>
 801328c:	4632      	mov	r2, r6
 801328e:	463b      	mov	r3, r7
 8013290:	f7ed fc42 	bl	8000b18 <__aeabi_dcmpeq>
 8013294:	b910      	cbnz	r0, 801329c <_dtoa_r+0x184>
 8013296:	9b00      	ldr	r3, [sp, #0]
 8013298:	3b01      	subs	r3, #1
 801329a:	9300      	str	r3, [sp, #0]
 801329c:	9b00      	ldr	r3, [sp, #0]
 801329e:	2b16      	cmp	r3, #22
 80132a0:	d85a      	bhi.n	8013358 <_dtoa_r+0x240>
 80132a2:	9a00      	ldr	r2, [sp, #0]
 80132a4:	4b57      	ldr	r3, [pc, #348]	; (8013404 <_dtoa_r+0x2ec>)
 80132a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80132aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ae:	ec51 0b19 	vmov	r0, r1, d9
 80132b2:	f7ed fc3b 	bl	8000b2c <__aeabi_dcmplt>
 80132b6:	2800      	cmp	r0, #0
 80132b8:	d050      	beq.n	801335c <_dtoa_r+0x244>
 80132ba:	9b00      	ldr	r3, [sp, #0]
 80132bc:	3b01      	subs	r3, #1
 80132be:	9300      	str	r3, [sp, #0]
 80132c0:	2300      	movs	r3, #0
 80132c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80132c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80132c6:	1b5d      	subs	r5, r3, r5
 80132c8:	1e6b      	subs	r3, r5, #1
 80132ca:	9305      	str	r3, [sp, #20]
 80132cc:	bf45      	ittet	mi
 80132ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80132d2:	9304      	strmi	r3, [sp, #16]
 80132d4:	2300      	movpl	r3, #0
 80132d6:	2300      	movmi	r3, #0
 80132d8:	bf4c      	ite	mi
 80132da:	9305      	strmi	r3, [sp, #20]
 80132dc:	9304      	strpl	r3, [sp, #16]
 80132de:	9b00      	ldr	r3, [sp, #0]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	db3d      	blt.n	8013360 <_dtoa_r+0x248>
 80132e4:	9b05      	ldr	r3, [sp, #20]
 80132e6:	9a00      	ldr	r2, [sp, #0]
 80132e8:	920a      	str	r2, [sp, #40]	; 0x28
 80132ea:	4413      	add	r3, r2
 80132ec:	9305      	str	r3, [sp, #20]
 80132ee:	2300      	movs	r3, #0
 80132f0:	9307      	str	r3, [sp, #28]
 80132f2:	9b06      	ldr	r3, [sp, #24]
 80132f4:	2b09      	cmp	r3, #9
 80132f6:	f200 8089 	bhi.w	801340c <_dtoa_r+0x2f4>
 80132fa:	2b05      	cmp	r3, #5
 80132fc:	bfc4      	itt	gt
 80132fe:	3b04      	subgt	r3, #4
 8013300:	9306      	strgt	r3, [sp, #24]
 8013302:	9b06      	ldr	r3, [sp, #24]
 8013304:	f1a3 0302 	sub.w	r3, r3, #2
 8013308:	bfcc      	ite	gt
 801330a:	2500      	movgt	r5, #0
 801330c:	2501      	movle	r5, #1
 801330e:	2b03      	cmp	r3, #3
 8013310:	f200 8087 	bhi.w	8013422 <_dtoa_r+0x30a>
 8013314:	e8df f003 	tbb	[pc, r3]
 8013318:	59383a2d 	.word	0x59383a2d
 801331c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8013320:	441d      	add	r5, r3
 8013322:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013326:	2b20      	cmp	r3, #32
 8013328:	bfc1      	itttt	gt
 801332a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801332e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013332:	fa0b f303 	lslgt.w	r3, fp, r3
 8013336:	fa26 f000 	lsrgt.w	r0, r6, r0
 801333a:	bfda      	itte	le
 801333c:	f1c3 0320 	rsble	r3, r3, #32
 8013340:	fa06 f003 	lslle.w	r0, r6, r3
 8013344:	4318      	orrgt	r0, r3
 8013346:	f7ed f905 	bl	8000554 <__aeabi_ui2d>
 801334a:	2301      	movs	r3, #1
 801334c:	4606      	mov	r6, r0
 801334e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013352:	3d01      	subs	r5, #1
 8013354:	930e      	str	r3, [sp, #56]	; 0x38
 8013356:	e76a      	b.n	801322e <_dtoa_r+0x116>
 8013358:	2301      	movs	r3, #1
 801335a:	e7b2      	b.n	80132c2 <_dtoa_r+0x1aa>
 801335c:	900b      	str	r0, [sp, #44]	; 0x2c
 801335e:	e7b1      	b.n	80132c4 <_dtoa_r+0x1ac>
 8013360:	9b04      	ldr	r3, [sp, #16]
 8013362:	9a00      	ldr	r2, [sp, #0]
 8013364:	1a9b      	subs	r3, r3, r2
 8013366:	9304      	str	r3, [sp, #16]
 8013368:	4253      	negs	r3, r2
 801336a:	9307      	str	r3, [sp, #28]
 801336c:	2300      	movs	r3, #0
 801336e:	930a      	str	r3, [sp, #40]	; 0x28
 8013370:	e7bf      	b.n	80132f2 <_dtoa_r+0x1da>
 8013372:	2300      	movs	r3, #0
 8013374:	9308      	str	r3, [sp, #32]
 8013376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013378:	2b00      	cmp	r3, #0
 801337a:	dc55      	bgt.n	8013428 <_dtoa_r+0x310>
 801337c:	2301      	movs	r3, #1
 801337e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013382:	461a      	mov	r2, r3
 8013384:	9209      	str	r2, [sp, #36]	; 0x24
 8013386:	e00c      	b.n	80133a2 <_dtoa_r+0x28a>
 8013388:	2301      	movs	r3, #1
 801338a:	e7f3      	b.n	8013374 <_dtoa_r+0x25c>
 801338c:	2300      	movs	r3, #0
 801338e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013390:	9308      	str	r3, [sp, #32]
 8013392:	9b00      	ldr	r3, [sp, #0]
 8013394:	4413      	add	r3, r2
 8013396:	9302      	str	r3, [sp, #8]
 8013398:	3301      	adds	r3, #1
 801339a:	2b01      	cmp	r3, #1
 801339c:	9303      	str	r3, [sp, #12]
 801339e:	bfb8      	it	lt
 80133a0:	2301      	movlt	r3, #1
 80133a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80133a4:	2200      	movs	r2, #0
 80133a6:	6042      	str	r2, [r0, #4]
 80133a8:	2204      	movs	r2, #4
 80133aa:	f102 0614 	add.w	r6, r2, #20
 80133ae:	429e      	cmp	r6, r3
 80133b0:	6841      	ldr	r1, [r0, #4]
 80133b2:	d93d      	bls.n	8013430 <_dtoa_r+0x318>
 80133b4:	4620      	mov	r0, r4
 80133b6:	f000 fdef 	bl	8013f98 <_Balloc>
 80133ba:	9001      	str	r0, [sp, #4]
 80133bc:	2800      	cmp	r0, #0
 80133be:	d13b      	bne.n	8013438 <_dtoa_r+0x320>
 80133c0:	4b11      	ldr	r3, [pc, #68]	; (8013408 <_dtoa_r+0x2f0>)
 80133c2:	4602      	mov	r2, r0
 80133c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80133c8:	e6c0      	b.n	801314c <_dtoa_r+0x34>
 80133ca:	2301      	movs	r3, #1
 80133cc:	e7df      	b.n	801338e <_dtoa_r+0x276>
 80133ce:	bf00      	nop
 80133d0:	636f4361 	.word	0x636f4361
 80133d4:	3fd287a7 	.word	0x3fd287a7
 80133d8:	8b60c8b3 	.word	0x8b60c8b3
 80133dc:	3fc68a28 	.word	0x3fc68a28
 80133e0:	509f79fb 	.word	0x509f79fb
 80133e4:	3fd34413 	.word	0x3fd34413
 80133e8:	080153d1 	.word	0x080153d1
 80133ec:	080153e8 	.word	0x080153e8
 80133f0:	7ff00000 	.word	0x7ff00000
 80133f4:	080153cd 	.word	0x080153cd
 80133f8:	080153c4 	.word	0x080153c4
 80133fc:	080153a1 	.word	0x080153a1
 8013400:	3ff80000 	.word	0x3ff80000
 8013404:	080154d8 	.word	0x080154d8
 8013408:	08015443 	.word	0x08015443
 801340c:	2501      	movs	r5, #1
 801340e:	2300      	movs	r3, #0
 8013410:	9306      	str	r3, [sp, #24]
 8013412:	9508      	str	r5, [sp, #32]
 8013414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013418:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801341c:	2200      	movs	r2, #0
 801341e:	2312      	movs	r3, #18
 8013420:	e7b0      	b.n	8013384 <_dtoa_r+0x26c>
 8013422:	2301      	movs	r3, #1
 8013424:	9308      	str	r3, [sp, #32]
 8013426:	e7f5      	b.n	8013414 <_dtoa_r+0x2fc>
 8013428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801342a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801342e:	e7b8      	b.n	80133a2 <_dtoa_r+0x28a>
 8013430:	3101      	adds	r1, #1
 8013432:	6041      	str	r1, [r0, #4]
 8013434:	0052      	lsls	r2, r2, #1
 8013436:	e7b8      	b.n	80133aa <_dtoa_r+0x292>
 8013438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801343a:	9a01      	ldr	r2, [sp, #4]
 801343c:	601a      	str	r2, [r3, #0]
 801343e:	9b03      	ldr	r3, [sp, #12]
 8013440:	2b0e      	cmp	r3, #14
 8013442:	f200 809d 	bhi.w	8013580 <_dtoa_r+0x468>
 8013446:	2d00      	cmp	r5, #0
 8013448:	f000 809a 	beq.w	8013580 <_dtoa_r+0x468>
 801344c:	9b00      	ldr	r3, [sp, #0]
 801344e:	2b00      	cmp	r3, #0
 8013450:	dd32      	ble.n	80134b8 <_dtoa_r+0x3a0>
 8013452:	4ab7      	ldr	r2, [pc, #732]	; (8013730 <_dtoa_r+0x618>)
 8013454:	f003 030f 	and.w	r3, r3, #15
 8013458:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801345c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013460:	9b00      	ldr	r3, [sp, #0]
 8013462:	05d8      	lsls	r0, r3, #23
 8013464:	ea4f 1723 	mov.w	r7, r3, asr #4
 8013468:	d516      	bpl.n	8013498 <_dtoa_r+0x380>
 801346a:	4bb2      	ldr	r3, [pc, #712]	; (8013734 <_dtoa_r+0x61c>)
 801346c:	ec51 0b19 	vmov	r0, r1, d9
 8013470:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013474:	f7ed fa12 	bl	800089c <__aeabi_ddiv>
 8013478:	f007 070f 	and.w	r7, r7, #15
 801347c:	4682      	mov	sl, r0
 801347e:	468b      	mov	fp, r1
 8013480:	2503      	movs	r5, #3
 8013482:	4eac      	ldr	r6, [pc, #688]	; (8013734 <_dtoa_r+0x61c>)
 8013484:	b957      	cbnz	r7, 801349c <_dtoa_r+0x384>
 8013486:	4642      	mov	r2, r8
 8013488:	464b      	mov	r3, r9
 801348a:	4650      	mov	r0, sl
 801348c:	4659      	mov	r1, fp
 801348e:	f7ed fa05 	bl	800089c <__aeabi_ddiv>
 8013492:	4682      	mov	sl, r0
 8013494:	468b      	mov	fp, r1
 8013496:	e028      	b.n	80134ea <_dtoa_r+0x3d2>
 8013498:	2502      	movs	r5, #2
 801349a:	e7f2      	b.n	8013482 <_dtoa_r+0x36a>
 801349c:	07f9      	lsls	r1, r7, #31
 801349e:	d508      	bpl.n	80134b2 <_dtoa_r+0x39a>
 80134a0:	4640      	mov	r0, r8
 80134a2:	4649      	mov	r1, r9
 80134a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80134a8:	f7ed f8ce 	bl	8000648 <__aeabi_dmul>
 80134ac:	3501      	adds	r5, #1
 80134ae:	4680      	mov	r8, r0
 80134b0:	4689      	mov	r9, r1
 80134b2:	107f      	asrs	r7, r7, #1
 80134b4:	3608      	adds	r6, #8
 80134b6:	e7e5      	b.n	8013484 <_dtoa_r+0x36c>
 80134b8:	f000 809b 	beq.w	80135f2 <_dtoa_r+0x4da>
 80134bc:	9b00      	ldr	r3, [sp, #0]
 80134be:	4f9d      	ldr	r7, [pc, #628]	; (8013734 <_dtoa_r+0x61c>)
 80134c0:	425e      	negs	r6, r3
 80134c2:	4b9b      	ldr	r3, [pc, #620]	; (8013730 <_dtoa_r+0x618>)
 80134c4:	f006 020f 	and.w	r2, r6, #15
 80134c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80134cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134d0:	ec51 0b19 	vmov	r0, r1, d9
 80134d4:	f7ed f8b8 	bl	8000648 <__aeabi_dmul>
 80134d8:	1136      	asrs	r6, r6, #4
 80134da:	4682      	mov	sl, r0
 80134dc:	468b      	mov	fp, r1
 80134de:	2300      	movs	r3, #0
 80134e0:	2502      	movs	r5, #2
 80134e2:	2e00      	cmp	r6, #0
 80134e4:	d17a      	bne.n	80135dc <_dtoa_r+0x4c4>
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d1d3      	bne.n	8013492 <_dtoa_r+0x37a>
 80134ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	f000 8082 	beq.w	80135f6 <_dtoa_r+0x4de>
 80134f2:	4b91      	ldr	r3, [pc, #580]	; (8013738 <_dtoa_r+0x620>)
 80134f4:	2200      	movs	r2, #0
 80134f6:	4650      	mov	r0, sl
 80134f8:	4659      	mov	r1, fp
 80134fa:	f7ed fb17 	bl	8000b2c <__aeabi_dcmplt>
 80134fe:	2800      	cmp	r0, #0
 8013500:	d079      	beq.n	80135f6 <_dtoa_r+0x4de>
 8013502:	9b03      	ldr	r3, [sp, #12]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d076      	beq.n	80135f6 <_dtoa_r+0x4de>
 8013508:	9b02      	ldr	r3, [sp, #8]
 801350a:	2b00      	cmp	r3, #0
 801350c:	dd36      	ble.n	801357c <_dtoa_r+0x464>
 801350e:	9b00      	ldr	r3, [sp, #0]
 8013510:	4650      	mov	r0, sl
 8013512:	4659      	mov	r1, fp
 8013514:	1e5f      	subs	r7, r3, #1
 8013516:	2200      	movs	r2, #0
 8013518:	4b88      	ldr	r3, [pc, #544]	; (801373c <_dtoa_r+0x624>)
 801351a:	f7ed f895 	bl	8000648 <__aeabi_dmul>
 801351e:	9e02      	ldr	r6, [sp, #8]
 8013520:	4682      	mov	sl, r0
 8013522:	468b      	mov	fp, r1
 8013524:	3501      	adds	r5, #1
 8013526:	4628      	mov	r0, r5
 8013528:	f7ed f824 	bl	8000574 <__aeabi_i2d>
 801352c:	4652      	mov	r2, sl
 801352e:	465b      	mov	r3, fp
 8013530:	f7ed f88a 	bl	8000648 <__aeabi_dmul>
 8013534:	4b82      	ldr	r3, [pc, #520]	; (8013740 <_dtoa_r+0x628>)
 8013536:	2200      	movs	r2, #0
 8013538:	f7ec fed0 	bl	80002dc <__adddf3>
 801353c:	46d0      	mov	r8, sl
 801353e:	46d9      	mov	r9, fp
 8013540:	4682      	mov	sl, r0
 8013542:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8013546:	2e00      	cmp	r6, #0
 8013548:	d158      	bne.n	80135fc <_dtoa_r+0x4e4>
 801354a:	4b7e      	ldr	r3, [pc, #504]	; (8013744 <_dtoa_r+0x62c>)
 801354c:	2200      	movs	r2, #0
 801354e:	4640      	mov	r0, r8
 8013550:	4649      	mov	r1, r9
 8013552:	f7ec fec1 	bl	80002d8 <__aeabi_dsub>
 8013556:	4652      	mov	r2, sl
 8013558:	465b      	mov	r3, fp
 801355a:	4680      	mov	r8, r0
 801355c:	4689      	mov	r9, r1
 801355e:	f7ed fb03 	bl	8000b68 <__aeabi_dcmpgt>
 8013562:	2800      	cmp	r0, #0
 8013564:	f040 8295 	bne.w	8013a92 <_dtoa_r+0x97a>
 8013568:	4652      	mov	r2, sl
 801356a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801356e:	4640      	mov	r0, r8
 8013570:	4649      	mov	r1, r9
 8013572:	f7ed fadb 	bl	8000b2c <__aeabi_dcmplt>
 8013576:	2800      	cmp	r0, #0
 8013578:	f040 8289 	bne.w	8013a8e <_dtoa_r+0x976>
 801357c:	ec5b ab19 	vmov	sl, fp, d9
 8013580:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013582:	2b00      	cmp	r3, #0
 8013584:	f2c0 8148 	blt.w	8013818 <_dtoa_r+0x700>
 8013588:	9a00      	ldr	r2, [sp, #0]
 801358a:	2a0e      	cmp	r2, #14
 801358c:	f300 8144 	bgt.w	8013818 <_dtoa_r+0x700>
 8013590:	4b67      	ldr	r3, [pc, #412]	; (8013730 <_dtoa_r+0x618>)
 8013592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013596:	e9d3 8900 	ldrd	r8, r9, [r3]
 801359a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801359c:	2b00      	cmp	r3, #0
 801359e:	f280 80d5 	bge.w	801374c <_dtoa_r+0x634>
 80135a2:	9b03      	ldr	r3, [sp, #12]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	f300 80d1 	bgt.w	801374c <_dtoa_r+0x634>
 80135aa:	f040 826f 	bne.w	8013a8c <_dtoa_r+0x974>
 80135ae:	4b65      	ldr	r3, [pc, #404]	; (8013744 <_dtoa_r+0x62c>)
 80135b0:	2200      	movs	r2, #0
 80135b2:	4640      	mov	r0, r8
 80135b4:	4649      	mov	r1, r9
 80135b6:	f7ed f847 	bl	8000648 <__aeabi_dmul>
 80135ba:	4652      	mov	r2, sl
 80135bc:	465b      	mov	r3, fp
 80135be:	f7ed fac9 	bl	8000b54 <__aeabi_dcmpge>
 80135c2:	9e03      	ldr	r6, [sp, #12]
 80135c4:	4637      	mov	r7, r6
 80135c6:	2800      	cmp	r0, #0
 80135c8:	f040 8245 	bne.w	8013a56 <_dtoa_r+0x93e>
 80135cc:	9d01      	ldr	r5, [sp, #4]
 80135ce:	2331      	movs	r3, #49	; 0x31
 80135d0:	f805 3b01 	strb.w	r3, [r5], #1
 80135d4:	9b00      	ldr	r3, [sp, #0]
 80135d6:	3301      	adds	r3, #1
 80135d8:	9300      	str	r3, [sp, #0]
 80135da:	e240      	b.n	8013a5e <_dtoa_r+0x946>
 80135dc:	07f2      	lsls	r2, r6, #31
 80135de:	d505      	bpl.n	80135ec <_dtoa_r+0x4d4>
 80135e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80135e4:	f7ed f830 	bl	8000648 <__aeabi_dmul>
 80135e8:	3501      	adds	r5, #1
 80135ea:	2301      	movs	r3, #1
 80135ec:	1076      	asrs	r6, r6, #1
 80135ee:	3708      	adds	r7, #8
 80135f0:	e777      	b.n	80134e2 <_dtoa_r+0x3ca>
 80135f2:	2502      	movs	r5, #2
 80135f4:	e779      	b.n	80134ea <_dtoa_r+0x3d2>
 80135f6:	9f00      	ldr	r7, [sp, #0]
 80135f8:	9e03      	ldr	r6, [sp, #12]
 80135fa:	e794      	b.n	8013526 <_dtoa_r+0x40e>
 80135fc:	9901      	ldr	r1, [sp, #4]
 80135fe:	4b4c      	ldr	r3, [pc, #304]	; (8013730 <_dtoa_r+0x618>)
 8013600:	4431      	add	r1, r6
 8013602:	910d      	str	r1, [sp, #52]	; 0x34
 8013604:	9908      	ldr	r1, [sp, #32]
 8013606:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801360a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801360e:	2900      	cmp	r1, #0
 8013610:	d043      	beq.n	801369a <_dtoa_r+0x582>
 8013612:	494d      	ldr	r1, [pc, #308]	; (8013748 <_dtoa_r+0x630>)
 8013614:	2000      	movs	r0, #0
 8013616:	f7ed f941 	bl	800089c <__aeabi_ddiv>
 801361a:	4652      	mov	r2, sl
 801361c:	465b      	mov	r3, fp
 801361e:	f7ec fe5b 	bl	80002d8 <__aeabi_dsub>
 8013622:	9d01      	ldr	r5, [sp, #4]
 8013624:	4682      	mov	sl, r0
 8013626:	468b      	mov	fp, r1
 8013628:	4649      	mov	r1, r9
 801362a:	4640      	mov	r0, r8
 801362c:	f7ed fabc 	bl	8000ba8 <__aeabi_d2iz>
 8013630:	4606      	mov	r6, r0
 8013632:	f7ec ff9f 	bl	8000574 <__aeabi_i2d>
 8013636:	4602      	mov	r2, r0
 8013638:	460b      	mov	r3, r1
 801363a:	4640      	mov	r0, r8
 801363c:	4649      	mov	r1, r9
 801363e:	f7ec fe4b 	bl	80002d8 <__aeabi_dsub>
 8013642:	3630      	adds	r6, #48	; 0x30
 8013644:	f805 6b01 	strb.w	r6, [r5], #1
 8013648:	4652      	mov	r2, sl
 801364a:	465b      	mov	r3, fp
 801364c:	4680      	mov	r8, r0
 801364e:	4689      	mov	r9, r1
 8013650:	f7ed fa6c 	bl	8000b2c <__aeabi_dcmplt>
 8013654:	2800      	cmp	r0, #0
 8013656:	d163      	bne.n	8013720 <_dtoa_r+0x608>
 8013658:	4642      	mov	r2, r8
 801365a:	464b      	mov	r3, r9
 801365c:	4936      	ldr	r1, [pc, #216]	; (8013738 <_dtoa_r+0x620>)
 801365e:	2000      	movs	r0, #0
 8013660:	f7ec fe3a 	bl	80002d8 <__aeabi_dsub>
 8013664:	4652      	mov	r2, sl
 8013666:	465b      	mov	r3, fp
 8013668:	f7ed fa60 	bl	8000b2c <__aeabi_dcmplt>
 801366c:	2800      	cmp	r0, #0
 801366e:	f040 80b5 	bne.w	80137dc <_dtoa_r+0x6c4>
 8013672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013674:	429d      	cmp	r5, r3
 8013676:	d081      	beq.n	801357c <_dtoa_r+0x464>
 8013678:	4b30      	ldr	r3, [pc, #192]	; (801373c <_dtoa_r+0x624>)
 801367a:	2200      	movs	r2, #0
 801367c:	4650      	mov	r0, sl
 801367e:	4659      	mov	r1, fp
 8013680:	f7ec ffe2 	bl	8000648 <__aeabi_dmul>
 8013684:	4b2d      	ldr	r3, [pc, #180]	; (801373c <_dtoa_r+0x624>)
 8013686:	4682      	mov	sl, r0
 8013688:	468b      	mov	fp, r1
 801368a:	4640      	mov	r0, r8
 801368c:	4649      	mov	r1, r9
 801368e:	2200      	movs	r2, #0
 8013690:	f7ec ffda 	bl	8000648 <__aeabi_dmul>
 8013694:	4680      	mov	r8, r0
 8013696:	4689      	mov	r9, r1
 8013698:	e7c6      	b.n	8013628 <_dtoa_r+0x510>
 801369a:	4650      	mov	r0, sl
 801369c:	4659      	mov	r1, fp
 801369e:	f7ec ffd3 	bl	8000648 <__aeabi_dmul>
 80136a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80136a4:	9d01      	ldr	r5, [sp, #4]
 80136a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80136a8:	4682      	mov	sl, r0
 80136aa:	468b      	mov	fp, r1
 80136ac:	4649      	mov	r1, r9
 80136ae:	4640      	mov	r0, r8
 80136b0:	f7ed fa7a 	bl	8000ba8 <__aeabi_d2iz>
 80136b4:	4606      	mov	r6, r0
 80136b6:	f7ec ff5d 	bl	8000574 <__aeabi_i2d>
 80136ba:	3630      	adds	r6, #48	; 0x30
 80136bc:	4602      	mov	r2, r0
 80136be:	460b      	mov	r3, r1
 80136c0:	4640      	mov	r0, r8
 80136c2:	4649      	mov	r1, r9
 80136c4:	f7ec fe08 	bl	80002d8 <__aeabi_dsub>
 80136c8:	f805 6b01 	strb.w	r6, [r5], #1
 80136cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80136ce:	429d      	cmp	r5, r3
 80136d0:	4680      	mov	r8, r0
 80136d2:	4689      	mov	r9, r1
 80136d4:	f04f 0200 	mov.w	r2, #0
 80136d8:	d124      	bne.n	8013724 <_dtoa_r+0x60c>
 80136da:	4b1b      	ldr	r3, [pc, #108]	; (8013748 <_dtoa_r+0x630>)
 80136dc:	4650      	mov	r0, sl
 80136de:	4659      	mov	r1, fp
 80136e0:	f7ec fdfc 	bl	80002dc <__adddf3>
 80136e4:	4602      	mov	r2, r0
 80136e6:	460b      	mov	r3, r1
 80136e8:	4640      	mov	r0, r8
 80136ea:	4649      	mov	r1, r9
 80136ec:	f7ed fa3c 	bl	8000b68 <__aeabi_dcmpgt>
 80136f0:	2800      	cmp	r0, #0
 80136f2:	d173      	bne.n	80137dc <_dtoa_r+0x6c4>
 80136f4:	4652      	mov	r2, sl
 80136f6:	465b      	mov	r3, fp
 80136f8:	4913      	ldr	r1, [pc, #76]	; (8013748 <_dtoa_r+0x630>)
 80136fa:	2000      	movs	r0, #0
 80136fc:	f7ec fdec 	bl	80002d8 <__aeabi_dsub>
 8013700:	4602      	mov	r2, r0
 8013702:	460b      	mov	r3, r1
 8013704:	4640      	mov	r0, r8
 8013706:	4649      	mov	r1, r9
 8013708:	f7ed fa10 	bl	8000b2c <__aeabi_dcmplt>
 801370c:	2800      	cmp	r0, #0
 801370e:	f43f af35 	beq.w	801357c <_dtoa_r+0x464>
 8013712:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013714:	1e6b      	subs	r3, r5, #1
 8013716:	930f      	str	r3, [sp, #60]	; 0x3c
 8013718:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801371c:	2b30      	cmp	r3, #48	; 0x30
 801371e:	d0f8      	beq.n	8013712 <_dtoa_r+0x5fa>
 8013720:	9700      	str	r7, [sp, #0]
 8013722:	e049      	b.n	80137b8 <_dtoa_r+0x6a0>
 8013724:	4b05      	ldr	r3, [pc, #20]	; (801373c <_dtoa_r+0x624>)
 8013726:	f7ec ff8f 	bl	8000648 <__aeabi_dmul>
 801372a:	4680      	mov	r8, r0
 801372c:	4689      	mov	r9, r1
 801372e:	e7bd      	b.n	80136ac <_dtoa_r+0x594>
 8013730:	080154d8 	.word	0x080154d8
 8013734:	080154b0 	.word	0x080154b0
 8013738:	3ff00000 	.word	0x3ff00000
 801373c:	40240000 	.word	0x40240000
 8013740:	401c0000 	.word	0x401c0000
 8013744:	40140000 	.word	0x40140000
 8013748:	3fe00000 	.word	0x3fe00000
 801374c:	9d01      	ldr	r5, [sp, #4]
 801374e:	4656      	mov	r6, sl
 8013750:	465f      	mov	r7, fp
 8013752:	4642      	mov	r2, r8
 8013754:	464b      	mov	r3, r9
 8013756:	4630      	mov	r0, r6
 8013758:	4639      	mov	r1, r7
 801375a:	f7ed f89f 	bl	800089c <__aeabi_ddiv>
 801375e:	f7ed fa23 	bl	8000ba8 <__aeabi_d2iz>
 8013762:	4682      	mov	sl, r0
 8013764:	f7ec ff06 	bl	8000574 <__aeabi_i2d>
 8013768:	4642      	mov	r2, r8
 801376a:	464b      	mov	r3, r9
 801376c:	f7ec ff6c 	bl	8000648 <__aeabi_dmul>
 8013770:	4602      	mov	r2, r0
 8013772:	460b      	mov	r3, r1
 8013774:	4630      	mov	r0, r6
 8013776:	4639      	mov	r1, r7
 8013778:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801377c:	f7ec fdac 	bl	80002d8 <__aeabi_dsub>
 8013780:	f805 6b01 	strb.w	r6, [r5], #1
 8013784:	9e01      	ldr	r6, [sp, #4]
 8013786:	9f03      	ldr	r7, [sp, #12]
 8013788:	1bae      	subs	r6, r5, r6
 801378a:	42b7      	cmp	r7, r6
 801378c:	4602      	mov	r2, r0
 801378e:	460b      	mov	r3, r1
 8013790:	d135      	bne.n	80137fe <_dtoa_r+0x6e6>
 8013792:	f7ec fda3 	bl	80002dc <__adddf3>
 8013796:	4642      	mov	r2, r8
 8013798:	464b      	mov	r3, r9
 801379a:	4606      	mov	r6, r0
 801379c:	460f      	mov	r7, r1
 801379e:	f7ed f9e3 	bl	8000b68 <__aeabi_dcmpgt>
 80137a2:	b9d0      	cbnz	r0, 80137da <_dtoa_r+0x6c2>
 80137a4:	4642      	mov	r2, r8
 80137a6:	464b      	mov	r3, r9
 80137a8:	4630      	mov	r0, r6
 80137aa:	4639      	mov	r1, r7
 80137ac:	f7ed f9b4 	bl	8000b18 <__aeabi_dcmpeq>
 80137b0:	b110      	cbz	r0, 80137b8 <_dtoa_r+0x6a0>
 80137b2:	f01a 0f01 	tst.w	sl, #1
 80137b6:	d110      	bne.n	80137da <_dtoa_r+0x6c2>
 80137b8:	4620      	mov	r0, r4
 80137ba:	ee18 1a10 	vmov	r1, s16
 80137be:	f000 fc2b 	bl	8014018 <_Bfree>
 80137c2:	2300      	movs	r3, #0
 80137c4:	9800      	ldr	r0, [sp, #0]
 80137c6:	702b      	strb	r3, [r5, #0]
 80137c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80137ca:	3001      	adds	r0, #1
 80137cc:	6018      	str	r0, [r3, #0]
 80137ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	f43f acf1 	beq.w	80131b8 <_dtoa_r+0xa0>
 80137d6:	601d      	str	r5, [r3, #0]
 80137d8:	e4ee      	b.n	80131b8 <_dtoa_r+0xa0>
 80137da:	9f00      	ldr	r7, [sp, #0]
 80137dc:	462b      	mov	r3, r5
 80137de:	461d      	mov	r5, r3
 80137e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80137e4:	2a39      	cmp	r2, #57	; 0x39
 80137e6:	d106      	bne.n	80137f6 <_dtoa_r+0x6de>
 80137e8:	9a01      	ldr	r2, [sp, #4]
 80137ea:	429a      	cmp	r2, r3
 80137ec:	d1f7      	bne.n	80137de <_dtoa_r+0x6c6>
 80137ee:	9901      	ldr	r1, [sp, #4]
 80137f0:	2230      	movs	r2, #48	; 0x30
 80137f2:	3701      	adds	r7, #1
 80137f4:	700a      	strb	r2, [r1, #0]
 80137f6:	781a      	ldrb	r2, [r3, #0]
 80137f8:	3201      	adds	r2, #1
 80137fa:	701a      	strb	r2, [r3, #0]
 80137fc:	e790      	b.n	8013720 <_dtoa_r+0x608>
 80137fe:	4ba6      	ldr	r3, [pc, #664]	; (8013a98 <_dtoa_r+0x980>)
 8013800:	2200      	movs	r2, #0
 8013802:	f7ec ff21 	bl	8000648 <__aeabi_dmul>
 8013806:	2200      	movs	r2, #0
 8013808:	2300      	movs	r3, #0
 801380a:	4606      	mov	r6, r0
 801380c:	460f      	mov	r7, r1
 801380e:	f7ed f983 	bl	8000b18 <__aeabi_dcmpeq>
 8013812:	2800      	cmp	r0, #0
 8013814:	d09d      	beq.n	8013752 <_dtoa_r+0x63a>
 8013816:	e7cf      	b.n	80137b8 <_dtoa_r+0x6a0>
 8013818:	9a08      	ldr	r2, [sp, #32]
 801381a:	2a00      	cmp	r2, #0
 801381c:	f000 80d7 	beq.w	80139ce <_dtoa_r+0x8b6>
 8013820:	9a06      	ldr	r2, [sp, #24]
 8013822:	2a01      	cmp	r2, #1
 8013824:	f300 80ba 	bgt.w	801399c <_dtoa_r+0x884>
 8013828:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801382a:	2a00      	cmp	r2, #0
 801382c:	f000 80b2 	beq.w	8013994 <_dtoa_r+0x87c>
 8013830:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013834:	9e07      	ldr	r6, [sp, #28]
 8013836:	9d04      	ldr	r5, [sp, #16]
 8013838:	9a04      	ldr	r2, [sp, #16]
 801383a:	441a      	add	r2, r3
 801383c:	9204      	str	r2, [sp, #16]
 801383e:	9a05      	ldr	r2, [sp, #20]
 8013840:	2101      	movs	r1, #1
 8013842:	441a      	add	r2, r3
 8013844:	4620      	mov	r0, r4
 8013846:	9205      	str	r2, [sp, #20]
 8013848:	f000 fc9e 	bl	8014188 <__i2b>
 801384c:	4607      	mov	r7, r0
 801384e:	2d00      	cmp	r5, #0
 8013850:	dd0c      	ble.n	801386c <_dtoa_r+0x754>
 8013852:	9b05      	ldr	r3, [sp, #20]
 8013854:	2b00      	cmp	r3, #0
 8013856:	dd09      	ble.n	801386c <_dtoa_r+0x754>
 8013858:	42ab      	cmp	r3, r5
 801385a:	9a04      	ldr	r2, [sp, #16]
 801385c:	bfa8      	it	ge
 801385e:	462b      	movge	r3, r5
 8013860:	1ad2      	subs	r2, r2, r3
 8013862:	9204      	str	r2, [sp, #16]
 8013864:	9a05      	ldr	r2, [sp, #20]
 8013866:	1aed      	subs	r5, r5, r3
 8013868:	1ad3      	subs	r3, r2, r3
 801386a:	9305      	str	r3, [sp, #20]
 801386c:	9b07      	ldr	r3, [sp, #28]
 801386e:	b31b      	cbz	r3, 80138b8 <_dtoa_r+0x7a0>
 8013870:	9b08      	ldr	r3, [sp, #32]
 8013872:	2b00      	cmp	r3, #0
 8013874:	f000 80af 	beq.w	80139d6 <_dtoa_r+0x8be>
 8013878:	2e00      	cmp	r6, #0
 801387a:	dd13      	ble.n	80138a4 <_dtoa_r+0x78c>
 801387c:	4639      	mov	r1, r7
 801387e:	4632      	mov	r2, r6
 8013880:	4620      	mov	r0, r4
 8013882:	f000 fd41 	bl	8014308 <__pow5mult>
 8013886:	ee18 2a10 	vmov	r2, s16
 801388a:	4601      	mov	r1, r0
 801388c:	4607      	mov	r7, r0
 801388e:	4620      	mov	r0, r4
 8013890:	f000 fc90 	bl	80141b4 <__multiply>
 8013894:	ee18 1a10 	vmov	r1, s16
 8013898:	4680      	mov	r8, r0
 801389a:	4620      	mov	r0, r4
 801389c:	f000 fbbc 	bl	8014018 <_Bfree>
 80138a0:	ee08 8a10 	vmov	s16, r8
 80138a4:	9b07      	ldr	r3, [sp, #28]
 80138a6:	1b9a      	subs	r2, r3, r6
 80138a8:	d006      	beq.n	80138b8 <_dtoa_r+0x7a0>
 80138aa:	ee18 1a10 	vmov	r1, s16
 80138ae:	4620      	mov	r0, r4
 80138b0:	f000 fd2a 	bl	8014308 <__pow5mult>
 80138b4:	ee08 0a10 	vmov	s16, r0
 80138b8:	2101      	movs	r1, #1
 80138ba:	4620      	mov	r0, r4
 80138bc:	f000 fc64 	bl	8014188 <__i2b>
 80138c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	4606      	mov	r6, r0
 80138c6:	f340 8088 	ble.w	80139da <_dtoa_r+0x8c2>
 80138ca:	461a      	mov	r2, r3
 80138cc:	4601      	mov	r1, r0
 80138ce:	4620      	mov	r0, r4
 80138d0:	f000 fd1a 	bl	8014308 <__pow5mult>
 80138d4:	9b06      	ldr	r3, [sp, #24]
 80138d6:	2b01      	cmp	r3, #1
 80138d8:	4606      	mov	r6, r0
 80138da:	f340 8081 	ble.w	80139e0 <_dtoa_r+0x8c8>
 80138de:	f04f 0800 	mov.w	r8, #0
 80138e2:	6933      	ldr	r3, [r6, #16]
 80138e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80138e8:	6918      	ldr	r0, [r3, #16]
 80138ea:	f000 fbfd 	bl	80140e8 <__hi0bits>
 80138ee:	f1c0 0020 	rsb	r0, r0, #32
 80138f2:	9b05      	ldr	r3, [sp, #20]
 80138f4:	4418      	add	r0, r3
 80138f6:	f010 001f 	ands.w	r0, r0, #31
 80138fa:	f000 8092 	beq.w	8013a22 <_dtoa_r+0x90a>
 80138fe:	f1c0 0320 	rsb	r3, r0, #32
 8013902:	2b04      	cmp	r3, #4
 8013904:	f340 808a 	ble.w	8013a1c <_dtoa_r+0x904>
 8013908:	f1c0 001c 	rsb	r0, r0, #28
 801390c:	9b04      	ldr	r3, [sp, #16]
 801390e:	4403      	add	r3, r0
 8013910:	9304      	str	r3, [sp, #16]
 8013912:	9b05      	ldr	r3, [sp, #20]
 8013914:	4403      	add	r3, r0
 8013916:	4405      	add	r5, r0
 8013918:	9305      	str	r3, [sp, #20]
 801391a:	9b04      	ldr	r3, [sp, #16]
 801391c:	2b00      	cmp	r3, #0
 801391e:	dd07      	ble.n	8013930 <_dtoa_r+0x818>
 8013920:	ee18 1a10 	vmov	r1, s16
 8013924:	461a      	mov	r2, r3
 8013926:	4620      	mov	r0, r4
 8013928:	f000 fd48 	bl	80143bc <__lshift>
 801392c:	ee08 0a10 	vmov	s16, r0
 8013930:	9b05      	ldr	r3, [sp, #20]
 8013932:	2b00      	cmp	r3, #0
 8013934:	dd05      	ble.n	8013942 <_dtoa_r+0x82a>
 8013936:	4631      	mov	r1, r6
 8013938:	461a      	mov	r2, r3
 801393a:	4620      	mov	r0, r4
 801393c:	f000 fd3e 	bl	80143bc <__lshift>
 8013940:	4606      	mov	r6, r0
 8013942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013944:	2b00      	cmp	r3, #0
 8013946:	d06e      	beq.n	8013a26 <_dtoa_r+0x90e>
 8013948:	ee18 0a10 	vmov	r0, s16
 801394c:	4631      	mov	r1, r6
 801394e:	f000 fda5 	bl	801449c <__mcmp>
 8013952:	2800      	cmp	r0, #0
 8013954:	da67      	bge.n	8013a26 <_dtoa_r+0x90e>
 8013956:	9b00      	ldr	r3, [sp, #0]
 8013958:	3b01      	subs	r3, #1
 801395a:	ee18 1a10 	vmov	r1, s16
 801395e:	9300      	str	r3, [sp, #0]
 8013960:	220a      	movs	r2, #10
 8013962:	2300      	movs	r3, #0
 8013964:	4620      	mov	r0, r4
 8013966:	f000 fb79 	bl	801405c <__multadd>
 801396a:	9b08      	ldr	r3, [sp, #32]
 801396c:	ee08 0a10 	vmov	s16, r0
 8013970:	2b00      	cmp	r3, #0
 8013972:	f000 81b1 	beq.w	8013cd8 <_dtoa_r+0xbc0>
 8013976:	2300      	movs	r3, #0
 8013978:	4639      	mov	r1, r7
 801397a:	220a      	movs	r2, #10
 801397c:	4620      	mov	r0, r4
 801397e:	f000 fb6d 	bl	801405c <__multadd>
 8013982:	9b02      	ldr	r3, [sp, #8]
 8013984:	2b00      	cmp	r3, #0
 8013986:	4607      	mov	r7, r0
 8013988:	f300 808e 	bgt.w	8013aa8 <_dtoa_r+0x990>
 801398c:	9b06      	ldr	r3, [sp, #24]
 801398e:	2b02      	cmp	r3, #2
 8013990:	dc51      	bgt.n	8013a36 <_dtoa_r+0x91e>
 8013992:	e089      	b.n	8013aa8 <_dtoa_r+0x990>
 8013994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013996:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801399a:	e74b      	b.n	8013834 <_dtoa_r+0x71c>
 801399c:	9b03      	ldr	r3, [sp, #12]
 801399e:	1e5e      	subs	r6, r3, #1
 80139a0:	9b07      	ldr	r3, [sp, #28]
 80139a2:	42b3      	cmp	r3, r6
 80139a4:	bfbf      	itttt	lt
 80139a6:	9b07      	ldrlt	r3, [sp, #28]
 80139a8:	9607      	strlt	r6, [sp, #28]
 80139aa:	1af2      	sublt	r2, r6, r3
 80139ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80139ae:	bfb6      	itet	lt
 80139b0:	189b      	addlt	r3, r3, r2
 80139b2:	1b9e      	subge	r6, r3, r6
 80139b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80139b6:	9b03      	ldr	r3, [sp, #12]
 80139b8:	bfb8      	it	lt
 80139ba:	2600      	movlt	r6, #0
 80139bc:	2b00      	cmp	r3, #0
 80139be:	bfb7      	itett	lt
 80139c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80139c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80139c8:	1a9d      	sublt	r5, r3, r2
 80139ca:	2300      	movlt	r3, #0
 80139cc:	e734      	b.n	8013838 <_dtoa_r+0x720>
 80139ce:	9e07      	ldr	r6, [sp, #28]
 80139d0:	9d04      	ldr	r5, [sp, #16]
 80139d2:	9f08      	ldr	r7, [sp, #32]
 80139d4:	e73b      	b.n	801384e <_dtoa_r+0x736>
 80139d6:	9a07      	ldr	r2, [sp, #28]
 80139d8:	e767      	b.n	80138aa <_dtoa_r+0x792>
 80139da:	9b06      	ldr	r3, [sp, #24]
 80139dc:	2b01      	cmp	r3, #1
 80139de:	dc18      	bgt.n	8013a12 <_dtoa_r+0x8fa>
 80139e0:	f1ba 0f00 	cmp.w	sl, #0
 80139e4:	d115      	bne.n	8013a12 <_dtoa_r+0x8fa>
 80139e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80139ea:	b993      	cbnz	r3, 8013a12 <_dtoa_r+0x8fa>
 80139ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80139f0:	0d1b      	lsrs	r3, r3, #20
 80139f2:	051b      	lsls	r3, r3, #20
 80139f4:	b183      	cbz	r3, 8013a18 <_dtoa_r+0x900>
 80139f6:	9b04      	ldr	r3, [sp, #16]
 80139f8:	3301      	adds	r3, #1
 80139fa:	9304      	str	r3, [sp, #16]
 80139fc:	9b05      	ldr	r3, [sp, #20]
 80139fe:	3301      	adds	r3, #1
 8013a00:	9305      	str	r3, [sp, #20]
 8013a02:	f04f 0801 	mov.w	r8, #1
 8013a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	f47f af6a 	bne.w	80138e2 <_dtoa_r+0x7ca>
 8013a0e:	2001      	movs	r0, #1
 8013a10:	e76f      	b.n	80138f2 <_dtoa_r+0x7da>
 8013a12:	f04f 0800 	mov.w	r8, #0
 8013a16:	e7f6      	b.n	8013a06 <_dtoa_r+0x8ee>
 8013a18:	4698      	mov	r8, r3
 8013a1a:	e7f4      	b.n	8013a06 <_dtoa_r+0x8ee>
 8013a1c:	f43f af7d 	beq.w	801391a <_dtoa_r+0x802>
 8013a20:	4618      	mov	r0, r3
 8013a22:	301c      	adds	r0, #28
 8013a24:	e772      	b.n	801390c <_dtoa_r+0x7f4>
 8013a26:	9b03      	ldr	r3, [sp, #12]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	dc37      	bgt.n	8013a9c <_dtoa_r+0x984>
 8013a2c:	9b06      	ldr	r3, [sp, #24]
 8013a2e:	2b02      	cmp	r3, #2
 8013a30:	dd34      	ble.n	8013a9c <_dtoa_r+0x984>
 8013a32:	9b03      	ldr	r3, [sp, #12]
 8013a34:	9302      	str	r3, [sp, #8]
 8013a36:	9b02      	ldr	r3, [sp, #8]
 8013a38:	b96b      	cbnz	r3, 8013a56 <_dtoa_r+0x93e>
 8013a3a:	4631      	mov	r1, r6
 8013a3c:	2205      	movs	r2, #5
 8013a3e:	4620      	mov	r0, r4
 8013a40:	f000 fb0c 	bl	801405c <__multadd>
 8013a44:	4601      	mov	r1, r0
 8013a46:	4606      	mov	r6, r0
 8013a48:	ee18 0a10 	vmov	r0, s16
 8013a4c:	f000 fd26 	bl	801449c <__mcmp>
 8013a50:	2800      	cmp	r0, #0
 8013a52:	f73f adbb 	bgt.w	80135cc <_dtoa_r+0x4b4>
 8013a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a58:	9d01      	ldr	r5, [sp, #4]
 8013a5a:	43db      	mvns	r3, r3
 8013a5c:	9300      	str	r3, [sp, #0]
 8013a5e:	f04f 0800 	mov.w	r8, #0
 8013a62:	4631      	mov	r1, r6
 8013a64:	4620      	mov	r0, r4
 8013a66:	f000 fad7 	bl	8014018 <_Bfree>
 8013a6a:	2f00      	cmp	r7, #0
 8013a6c:	f43f aea4 	beq.w	80137b8 <_dtoa_r+0x6a0>
 8013a70:	f1b8 0f00 	cmp.w	r8, #0
 8013a74:	d005      	beq.n	8013a82 <_dtoa_r+0x96a>
 8013a76:	45b8      	cmp	r8, r7
 8013a78:	d003      	beq.n	8013a82 <_dtoa_r+0x96a>
 8013a7a:	4641      	mov	r1, r8
 8013a7c:	4620      	mov	r0, r4
 8013a7e:	f000 facb 	bl	8014018 <_Bfree>
 8013a82:	4639      	mov	r1, r7
 8013a84:	4620      	mov	r0, r4
 8013a86:	f000 fac7 	bl	8014018 <_Bfree>
 8013a8a:	e695      	b.n	80137b8 <_dtoa_r+0x6a0>
 8013a8c:	2600      	movs	r6, #0
 8013a8e:	4637      	mov	r7, r6
 8013a90:	e7e1      	b.n	8013a56 <_dtoa_r+0x93e>
 8013a92:	9700      	str	r7, [sp, #0]
 8013a94:	4637      	mov	r7, r6
 8013a96:	e599      	b.n	80135cc <_dtoa_r+0x4b4>
 8013a98:	40240000 	.word	0x40240000
 8013a9c:	9b08      	ldr	r3, [sp, #32]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	f000 80ca 	beq.w	8013c38 <_dtoa_r+0xb20>
 8013aa4:	9b03      	ldr	r3, [sp, #12]
 8013aa6:	9302      	str	r3, [sp, #8]
 8013aa8:	2d00      	cmp	r5, #0
 8013aaa:	dd05      	ble.n	8013ab8 <_dtoa_r+0x9a0>
 8013aac:	4639      	mov	r1, r7
 8013aae:	462a      	mov	r2, r5
 8013ab0:	4620      	mov	r0, r4
 8013ab2:	f000 fc83 	bl	80143bc <__lshift>
 8013ab6:	4607      	mov	r7, r0
 8013ab8:	f1b8 0f00 	cmp.w	r8, #0
 8013abc:	d05b      	beq.n	8013b76 <_dtoa_r+0xa5e>
 8013abe:	6879      	ldr	r1, [r7, #4]
 8013ac0:	4620      	mov	r0, r4
 8013ac2:	f000 fa69 	bl	8013f98 <_Balloc>
 8013ac6:	4605      	mov	r5, r0
 8013ac8:	b928      	cbnz	r0, 8013ad6 <_dtoa_r+0x9be>
 8013aca:	4b87      	ldr	r3, [pc, #540]	; (8013ce8 <_dtoa_r+0xbd0>)
 8013acc:	4602      	mov	r2, r0
 8013ace:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013ad2:	f7ff bb3b 	b.w	801314c <_dtoa_r+0x34>
 8013ad6:	693a      	ldr	r2, [r7, #16]
 8013ad8:	3202      	adds	r2, #2
 8013ada:	0092      	lsls	r2, r2, #2
 8013adc:	f107 010c 	add.w	r1, r7, #12
 8013ae0:	300c      	adds	r0, #12
 8013ae2:	f7fe faf4 	bl	80120ce <memcpy>
 8013ae6:	2201      	movs	r2, #1
 8013ae8:	4629      	mov	r1, r5
 8013aea:	4620      	mov	r0, r4
 8013aec:	f000 fc66 	bl	80143bc <__lshift>
 8013af0:	9b01      	ldr	r3, [sp, #4]
 8013af2:	f103 0901 	add.w	r9, r3, #1
 8013af6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8013afa:	4413      	add	r3, r2
 8013afc:	9305      	str	r3, [sp, #20]
 8013afe:	f00a 0301 	and.w	r3, sl, #1
 8013b02:	46b8      	mov	r8, r7
 8013b04:	9304      	str	r3, [sp, #16]
 8013b06:	4607      	mov	r7, r0
 8013b08:	4631      	mov	r1, r6
 8013b0a:	ee18 0a10 	vmov	r0, s16
 8013b0e:	f7ff fa75 	bl	8012ffc <quorem>
 8013b12:	4641      	mov	r1, r8
 8013b14:	9002      	str	r0, [sp, #8]
 8013b16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8013b1a:	ee18 0a10 	vmov	r0, s16
 8013b1e:	f000 fcbd 	bl	801449c <__mcmp>
 8013b22:	463a      	mov	r2, r7
 8013b24:	9003      	str	r0, [sp, #12]
 8013b26:	4631      	mov	r1, r6
 8013b28:	4620      	mov	r0, r4
 8013b2a:	f000 fcd3 	bl	80144d4 <__mdiff>
 8013b2e:	68c2      	ldr	r2, [r0, #12]
 8013b30:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8013b34:	4605      	mov	r5, r0
 8013b36:	bb02      	cbnz	r2, 8013b7a <_dtoa_r+0xa62>
 8013b38:	4601      	mov	r1, r0
 8013b3a:	ee18 0a10 	vmov	r0, s16
 8013b3e:	f000 fcad 	bl	801449c <__mcmp>
 8013b42:	4602      	mov	r2, r0
 8013b44:	4629      	mov	r1, r5
 8013b46:	4620      	mov	r0, r4
 8013b48:	9207      	str	r2, [sp, #28]
 8013b4a:	f000 fa65 	bl	8014018 <_Bfree>
 8013b4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8013b52:	ea43 0102 	orr.w	r1, r3, r2
 8013b56:	9b04      	ldr	r3, [sp, #16]
 8013b58:	430b      	orrs	r3, r1
 8013b5a:	464d      	mov	r5, r9
 8013b5c:	d10f      	bne.n	8013b7e <_dtoa_r+0xa66>
 8013b5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013b62:	d02a      	beq.n	8013bba <_dtoa_r+0xaa2>
 8013b64:	9b03      	ldr	r3, [sp, #12]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	dd02      	ble.n	8013b70 <_dtoa_r+0xa58>
 8013b6a:	9b02      	ldr	r3, [sp, #8]
 8013b6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8013b70:	f88b a000 	strb.w	sl, [fp]
 8013b74:	e775      	b.n	8013a62 <_dtoa_r+0x94a>
 8013b76:	4638      	mov	r0, r7
 8013b78:	e7ba      	b.n	8013af0 <_dtoa_r+0x9d8>
 8013b7a:	2201      	movs	r2, #1
 8013b7c:	e7e2      	b.n	8013b44 <_dtoa_r+0xa2c>
 8013b7e:	9b03      	ldr	r3, [sp, #12]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	db04      	blt.n	8013b8e <_dtoa_r+0xa76>
 8013b84:	9906      	ldr	r1, [sp, #24]
 8013b86:	430b      	orrs	r3, r1
 8013b88:	9904      	ldr	r1, [sp, #16]
 8013b8a:	430b      	orrs	r3, r1
 8013b8c:	d122      	bne.n	8013bd4 <_dtoa_r+0xabc>
 8013b8e:	2a00      	cmp	r2, #0
 8013b90:	ddee      	ble.n	8013b70 <_dtoa_r+0xa58>
 8013b92:	ee18 1a10 	vmov	r1, s16
 8013b96:	2201      	movs	r2, #1
 8013b98:	4620      	mov	r0, r4
 8013b9a:	f000 fc0f 	bl	80143bc <__lshift>
 8013b9e:	4631      	mov	r1, r6
 8013ba0:	ee08 0a10 	vmov	s16, r0
 8013ba4:	f000 fc7a 	bl	801449c <__mcmp>
 8013ba8:	2800      	cmp	r0, #0
 8013baa:	dc03      	bgt.n	8013bb4 <_dtoa_r+0xa9c>
 8013bac:	d1e0      	bne.n	8013b70 <_dtoa_r+0xa58>
 8013bae:	f01a 0f01 	tst.w	sl, #1
 8013bb2:	d0dd      	beq.n	8013b70 <_dtoa_r+0xa58>
 8013bb4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013bb8:	d1d7      	bne.n	8013b6a <_dtoa_r+0xa52>
 8013bba:	2339      	movs	r3, #57	; 0x39
 8013bbc:	f88b 3000 	strb.w	r3, [fp]
 8013bc0:	462b      	mov	r3, r5
 8013bc2:	461d      	mov	r5, r3
 8013bc4:	3b01      	subs	r3, #1
 8013bc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013bca:	2a39      	cmp	r2, #57	; 0x39
 8013bcc:	d071      	beq.n	8013cb2 <_dtoa_r+0xb9a>
 8013bce:	3201      	adds	r2, #1
 8013bd0:	701a      	strb	r2, [r3, #0]
 8013bd2:	e746      	b.n	8013a62 <_dtoa_r+0x94a>
 8013bd4:	2a00      	cmp	r2, #0
 8013bd6:	dd07      	ble.n	8013be8 <_dtoa_r+0xad0>
 8013bd8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013bdc:	d0ed      	beq.n	8013bba <_dtoa_r+0xaa2>
 8013bde:	f10a 0301 	add.w	r3, sl, #1
 8013be2:	f88b 3000 	strb.w	r3, [fp]
 8013be6:	e73c      	b.n	8013a62 <_dtoa_r+0x94a>
 8013be8:	9b05      	ldr	r3, [sp, #20]
 8013bea:	f809 ac01 	strb.w	sl, [r9, #-1]
 8013bee:	4599      	cmp	r9, r3
 8013bf0:	d047      	beq.n	8013c82 <_dtoa_r+0xb6a>
 8013bf2:	ee18 1a10 	vmov	r1, s16
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	220a      	movs	r2, #10
 8013bfa:	4620      	mov	r0, r4
 8013bfc:	f000 fa2e 	bl	801405c <__multadd>
 8013c00:	45b8      	cmp	r8, r7
 8013c02:	ee08 0a10 	vmov	s16, r0
 8013c06:	f04f 0300 	mov.w	r3, #0
 8013c0a:	f04f 020a 	mov.w	r2, #10
 8013c0e:	4641      	mov	r1, r8
 8013c10:	4620      	mov	r0, r4
 8013c12:	d106      	bne.n	8013c22 <_dtoa_r+0xb0a>
 8013c14:	f000 fa22 	bl	801405c <__multadd>
 8013c18:	4680      	mov	r8, r0
 8013c1a:	4607      	mov	r7, r0
 8013c1c:	f109 0901 	add.w	r9, r9, #1
 8013c20:	e772      	b.n	8013b08 <_dtoa_r+0x9f0>
 8013c22:	f000 fa1b 	bl	801405c <__multadd>
 8013c26:	4639      	mov	r1, r7
 8013c28:	4680      	mov	r8, r0
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	220a      	movs	r2, #10
 8013c2e:	4620      	mov	r0, r4
 8013c30:	f000 fa14 	bl	801405c <__multadd>
 8013c34:	4607      	mov	r7, r0
 8013c36:	e7f1      	b.n	8013c1c <_dtoa_r+0xb04>
 8013c38:	9b03      	ldr	r3, [sp, #12]
 8013c3a:	9302      	str	r3, [sp, #8]
 8013c3c:	9d01      	ldr	r5, [sp, #4]
 8013c3e:	ee18 0a10 	vmov	r0, s16
 8013c42:	4631      	mov	r1, r6
 8013c44:	f7ff f9da 	bl	8012ffc <quorem>
 8013c48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8013c4c:	9b01      	ldr	r3, [sp, #4]
 8013c4e:	f805 ab01 	strb.w	sl, [r5], #1
 8013c52:	1aea      	subs	r2, r5, r3
 8013c54:	9b02      	ldr	r3, [sp, #8]
 8013c56:	4293      	cmp	r3, r2
 8013c58:	dd09      	ble.n	8013c6e <_dtoa_r+0xb56>
 8013c5a:	ee18 1a10 	vmov	r1, s16
 8013c5e:	2300      	movs	r3, #0
 8013c60:	220a      	movs	r2, #10
 8013c62:	4620      	mov	r0, r4
 8013c64:	f000 f9fa 	bl	801405c <__multadd>
 8013c68:	ee08 0a10 	vmov	s16, r0
 8013c6c:	e7e7      	b.n	8013c3e <_dtoa_r+0xb26>
 8013c6e:	9b02      	ldr	r3, [sp, #8]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	bfc8      	it	gt
 8013c74:	461d      	movgt	r5, r3
 8013c76:	9b01      	ldr	r3, [sp, #4]
 8013c78:	bfd8      	it	le
 8013c7a:	2501      	movle	r5, #1
 8013c7c:	441d      	add	r5, r3
 8013c7e:	f04f 0800 	mov.w	r8, #0
 8013c82:	ee18 1a10 	vmov	r1, s16
 8013c86:	2201      	movs	r2, #1
 8013c88:	4620      	mov	r0, r4
 8013c8a:	f000 fb97 	bl	80143bc <__lshift>
 8013c8e:	4631      	mov	r1, r6
 8013c90:	ee08 0a10 	vmov	s16, r0
 8013c94:	f000 fc02 	bl	801449c <__mcmp>
 8013c98:	2800      	cmp	r0, #0
 8013c9a:	dc91      	bgt.n	8013bc0 <_dtoa_r+0xaa8>
 8013c9c:	d102      	bne.n	8013ca4 <_dtoa_r+0xb8c>
 8013c9e:	f01a 0f01 	tst.w	sl, #1
 8013ca2:	d18d      	bne.n	8013bc0 <_dtoa_r+0xaa8>
 8013ca4:	462b      	mov	r3, r5
 8013ca6:	461d      	mov	r5, r3
 8013ca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013cac:	2a30      	cmp	r2, #48	; 0x30
 8013cae:	d0fa      	beq.n	8013ca6 <_dtoa_r+0xb8e>
 8013cb0:	e6d7      	b.n	8013a62 <_dtoa_r+0x94a>
 8013cb2:	9a01      	ldr	r2, [sp, #4]
 8013cb4:	429a      	cmp	r2, r3
 8013cb6:	d184      	bne.n	8013bc2 <_dtoa_r+0xaaa>
 8013cb8:	9b00      	ldr	r3, [sp, #0]
 8013cba:	3301      	adds	r3, #1
 8013cbc:	9300      	str	r3, [sp, #0]
 8013cbe:	2331      	movs	r3, #49	; 0x31
 8013cc0:	7013      	strb	r3, [r2, #0]
 8013cc2:	e6ce      	b.n	8013a62 <_dtoa_r+0x94a>
 8013cc4:	4b09      	ldr	r3, [pc, #36]	; (8013cec <_dtoa_r+0xbd4>)
 8013cc6:	f7ff ba95 	b.w	80131f4 <_dtoa_r+0xdc>
 8013cca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	f47f aa6e 	bne.w	80131ae <_dtoa_r+0x96>
 8013cd2:	4b07      	ldr	r3, [pc, #28]	; (8013cf0 <_dtoa_r+0xbd8>)
 8013cd4:	f7ff ba8e 	b.w	80131f4 <_dtoa_r+0xdc>
 8013cd8:	9b02      	ldr	r3, [sp, #8]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	dcae      	bgt.n	8013c3c <_dtoa_r+0xb24>
 8013cde:	9b06      	ldr	r3, [sp, #24]
 8013ce0:	2b02      	cmp	r3, #2
 8013ce2:	f73f aea8 	bgt.w	8013a36 <_dtoa_r+0x91e>
 8013ce6:	e7a9      	b.n	8013c3c <_dtoa_r+0xb24>
 8013ce8:	08015443 	.word	0x08015443
 8013cec:	080153a0 	.word	0x080153a0
 8013cf0:	080153c4 	.word	0x080153c4

08013cf4 <__sflush_r>:
 8013cf4:	898a      	ldrh	r2, [r1, #12]
 8013cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cfa:	4605      	mov	r5, r0
 8013cfc:	0710      	lsls	r0, r2, #28
 8013cfe:	460c      	mov	r4, r1
 8013d00:	d458      	bmi.n	8013db4 <__sflush_r+0xc0>
 8013d02:	684b      	ldr	r3, [r1, #4]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	dc05      	bgt.n	8013d14 <__sflush_r+0x20>
 8013d08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	dc02      	bgt.n	8013d14 <__sflush_r+0x20>
 8013d0e:	2000      	movs	r0, #0
 8013d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d16:	2e00      	cmp	r6, #0
 8013d18:	d0f9      	beq.n	8013d0e <__sflush_r+0x1a>
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013d20:	682f      	ldr	r7, [r5, #0]
 8013d22:	602b      	str	r3, [r5, #0]
 8013d24:	d032      	beq.n	8013d8c <__sflush_r+0x98>
 8013d26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013d28:	89a3      	ldrh	r3, [r4, #12]
 8013d2a:	075a      	lsls	r2, r3, #29
 8013d2c:	d505      	bpl.n	8013d3a <__sflush_r+0x46>
 8013d2e:	6863      	ldr	r3, [r4, #4]
 8013d30:	1ac0      	subs	r0, r0, r3
 8013d32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013d34:	b10b      	cbz	r3, 8013d3a <__sflush_r+0x46>
 8013d36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013d38:	1ac0      	subs	r0, r0, r3
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	4602      	mov	r2, r0
 8013d3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d40:	6a21      	ldr	r1, [r4, #32]
 8013d42:	4628      	mov	r0, r5
 8013d44:	47b0      	blx	r6
 8013d46:	1c43      	adds	r3, r0, #1
 8013d48:	89a3      	ldrh	r3, [r4, #12]
 8013d4a:	d106      	bne.n	8013d5a <__sflush_r+0x66>
 8013d4c:	6829      	ldr	r1, [r5, #0]
 8013d4e:	291d      	cmp	r1, #29
 8013d50:	d82c      	bhi.n	8013dac <__sflush_r+0xb8>
 8013d52:	4a2a      	ldr	r2, [pc, #168]	; (8013dfc <__sflush_r+0x108>)
 8013d54:	40ca      	lsrs	r2, r1
 8013d56:	07d6      	lsls	r6, r2, #31
 8013d58:	d528      	bpl.n	8013dac <__sflush_r+0xb8>
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	6062      	str	r2, [r4, #4]
 8013d5e:	04d9      	lsls	r1, r3, #19
 8013d60:	6922      	ldr	r2, [r4, #16]
 8013d62:	6022      	str	r2, [r4, #0]
 8013d64:	d504      	bpl.n	8013d70 <__sflush_r+0x7c>
 8013d66:	1c42      	adds	r2, r0, #1
 8013d68:	d101      	bne.n	8013d6e <__sflush_r+0x7a>
 8013d6a:	682b      	ldr	r3, [r5, #0]
 8013d6c:	b903      	cbnz	r3, 8013d70 <__sflush_r+0x7c>
 8013d6e:	6560      	str	r0, [r4, #84]	; 0x54
 8013d70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d72:	602f      	str	r7, [r5, #0]
 8013d74:	2900      	cmp	r1, #0
 8013d76:	d0ca      	beq.n	8013d0e <__sflush_r+0x1a>
 8013d78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d7c:	4299      	cmp	r1, r3
 8013d7e:	d002      	beq.n	8013d86 <__sflush_r+0x92>
 8013d80:	4628      	mov	r0, r5
 8013d82:	f000 fca3 	bl	80146cc <_free_r>
 8013d86:	2000      	movs	r0, #0
 8013d88:	6360      	str	r0, [r4, #52]	; 0x34
 8013d8a:	e7c1      	b.n	8013d10 <__sflush_r+0x1c>
 8013d8c:	6a21      	ldr	r1, [r4, #32]
 8013d8e:	2301      	movs	r3, #1
 8013d90:	4628      	mov	r0, r5
 8013d92:	47b0      	blx	r6
 8013d94:	1c41      	adds	r1, r0, #1
 8013d96:	d1c7      	bne.n	8013d28 <__sflush_r+0x34>
 8013d98:	682b      	ldr	r3, [r5, #0]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d0c4      	beq.n	8013d28 <__sflush_r+0x34>
 8013d9e:	2b1d      	cmp	r3, #29
 8013da0:	d001      	beq.n	8013da6 <__sflush_r+0xb2>
 8013da2:	2b16      	cmp	r3, #22
 8013da4:	d101      	bne.n	8013daa <__sflush_r+0xb6>
 8013da6:	602f      	str	r7, [r5, #0]
 8013da8:	e7b1      	b.n	8013d0e <__sflush_r+0x1a>
 8013daa:	89a3      	ldrh	r3, [r4, #12]
 8013dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013db0:	81a3      	strh	r3, [r4, #12]
 8013db2:	e7ad      	b.n	8013d10 <__sflush_r+0x1c>
 8013db4:	690f      	ldr	r7, [r1, #16]
 8013db6:	2f00      	cmp	r7, #0
 8013db8:	d0a9      	beq.n	8013d0e <__sflush_r+0x1a>
 8013dba:	0793      	lsls	r3, r2, #30
 8013dbc:	680e      	ldr	r6, [r1, #0]
 8013dbe:	bf08      	it	eq
 8013dc0:	694b      	ldreq	r3, [r1, #20]
 8013dc2:	600f      	str	r7, [r1, #0]
 8013dc4:	bf18      	it	ne
 8013dc6:	2300      	movne	r3, #0
 8013dc8:	eba6 0807 	sub.w	r8, r6, r7
 8013dcc:	608b      	str	r3, [r1, #8]
 8013dce:	f1b8 0f00 	cmp.w	r8, #0
 8013dd2:	dd9c      	ble.n	8013d0e <__sflush_r+0x1a>
 8013dd4:	6a21      	ldr	r1, [r4, #32]
 8013dd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013dd8:	4643      	mov	r3, r8
 8013dda:	463a      	mov	r2, r7
 8013ddc:	4628      	mov	r0, r5
 8013dde:	47b0      	blx	r6
 8013de0:	2800      	cmp	r0, #0
 8013de2:	dc06      	bgt.n	8013df2 <__sflush_r+0xfe>
 8013de4:	89a3      	ldrh	r3, [r4, #12]
 8013de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013dea:	81a3      	strh	r3, [r4, #12]
 8013dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013df0:	e78e      	b.n	8013d10 <__sflush_r+0x1c>
 8013df2:	4407      	add	r7, r0
 8013df4:	eba8 0800 	sub.w	r8, r8, r0
 8013df8:	e7e9      	b.n	8013dce <__sflush_r+0xda>
 8013dfa:	bf00      	nop
 8013dfc:	20400001 	.word	0x20400001

08013e00 <_fflush_r>:
 8013e00:	b538      	push	{r3, r4, r5, lr}
 8013e02:	690b      	ldr	r3, [r1, #16]
 8013e04:	4605      	mov	r5, r0
 8013e06:	460c      	mov	r4, r1
 8013e08:	b913      	cbnz	r3, 8013e10 <_fflush_r+0x10>
 8013e0a:	2500      	movs	r5, #0
 8013e0c:	4628      	mov	r0, r5
 8013e0e:	bd38      	pop	{r3, r4, r5, pc}
 8013e10:	b118      	cbz	r0, 8013e1a <_fflush_r+0x1a>
 8013e12:	6983      	ldr	r3, [r0, #24]
 8013e14:	b90b      	cbnz	r3, 8013e1a <_fflush_r+0x1a>
 8013e16:	f7fe f895 	bl	8011f44 <__sinit>
 8013e1a:	4b14      	ldr	r3, [pc, #80]	; (8013e6c <_fflush_r+0x6c>)
 8013e1c:	429c      	cmp	r4, r3
 8013e1e:	d11b      	bne.n	8013e58 <_fflush_r+0x58>
 8013e20:	686c      	ldr	r4, [r5, #4]
 8013e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d0ef      	beq.n	8013e0a <_fflush_r+0xa>
 8013e2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013e2c:	07d0      	lsls	r0, r2, #31
 8013e2e:	d404      	bmi.n	8013e3a <_fflush_r+0x3a>
 8013e30:	0599      	lsls	r1, r3, #22
 8013e32:	d402      	bmi.n	8013e3a <_fflush_r+0x3a>
 8013e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e36:	f7fe f948 	bl	80120ca <__retarget_lock_acquire_recursive>
 8013e3a:	4628      	mov	r0, r5
 8013e3c:	4621      	mov	r1, r4
 8013e3e:	f7ff ff59 	bl	8013cf4 <__sflush_r>
 8013e42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e44:	07da      	lsls	r2, r3, #31
 8013e46:	4605      	mov	r5, r0
 8013e48:	d4e0      	bmi.n	8013e0c <_fflush_r+0xc>
 8013e4a:	89a3      	ldrh	r3, [r4, #12]
 8013e4c:	059b      	lsls	r3, r3, #22
 8013e4e:	d4dd      	bmi.n	8013e0c <_fflush_r+0xc>
 8013e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e52:	f7fe f93b 	bl	80120cc <__retarget_lock_release_recursive>
 8013e56:	e7d9      	b.n	8013e0c <_fflush_r+0xc>
 8013e58:	4b05      	ldr	r3, [pc, #20]	; (8013e70 <_fflush_r+0x70>)
 8013e5a:	429c      	cmp	r4, r3
 8013e5c:	d101      	bne.n	8013e62 <_fflush_r+0x62>
 8013e5e:	68ac      	ldr	r4, [r5, #8]
 8013e60:	e7df      	b.n	8013e22 <_fflush_r+0x22>
 8013e62:	4b04      	ldr	r3, [pc, #16]	; (8013e74 <_fflush_r+0x74>)
 8013e64:	429c      	cmp	r4, r3
 8013e66:	bf08      	it	eq
 8013e68:	68ec      	ldreq	r4, [r5, #12]
 8013e6a:	e7da      	b.n	8013e22 <_fflush_r+0x22>
 8013e6c:	0801534c 	.word	0x0801534c
 8013e70:	0801536c 	.word	0x0801536c
 8013e74:	0801532c 	.word	0x0801532c

08013e78 <_localeconv_r>:
 8013e78:	4800      	ldr	r0, [pc, #0]	; (8013e7c <_localeconv_r+0x4>)
 8013e7a:	4770      	bx	lr
 8013e7c:	200002dc 	.word	0x200002dc

08013e80 <_lseek_r>:
 8013e80:	b538      	push	{r3, r4, r5, lr}
 8013e82:	4d07      	ldr	r5, [pc, #28]	; (8013ea0 <_lseek_r+0x20>)
 8013e84:	4604      	mov	r4, r0
 8013e86:	4608      	mov	r0, r1
 8013e88:	4611      	mov	r1, r2
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	602a      	str	r2, [r5, #0]
 8013e8e:	461a      	mov	r2, r3
 8013e90:	f7ee f866 	bl	8001f60 <_lseek>
 8013e94:	1c43      	adds	r3, r0, #1
 8013e96:	d102      	bne.n	8013e9e <_lseek_r+0x1e>
 8013e98:	682b      	ldr	r3, [r5, #0]
 8013e9a:	b103      	cbz	r3, 8013e9e <_lseek_r+0x1e>
 8013e9c:	6023      	str	r3, [r4, #0]
 8013e9e:	bd38      	pop	{r3, r4, r5, pc}
 8013ea0:	200034a8 	.word	0x200034a8

08013ea4 <__swhatbuf_r>:
 8013ea4:	b570      	push	{r4, r5, r6, lr}
 8013ea6:	460e      	mov	r6, r1
 8013ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013eac:	2900      	cmp	r1, #0
 8013eae:	b096      	sub	sp, #88	; 0x58
 8013eb0:	4614      	mov	r4, r2
 8013eb2:	461d      	mov	r5, r3
 8013eb4:	da08      	bge.n	8013ec8 <__swhatbuf_r+0x24>
 8013eb6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013eba:	2200      	movs	r2, #0
 8013ebc:	602a      	str	r2, [r5, #0]
 8013ebe:	061a      	lsls	r2, r3, #24
 8013ec0:	d410      	bmi.n	8013ee4 <__swhatbuf_r+0x40>
 8013ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013ec6:	e00e      	b.n	8013ee6 <__swhatbuf_r+0x42>
 8013ec8:	466a      	mov	r2, sp
 8013eca:	f000 ff43 	bl	8014d54 <_fstat_r>
 8013ece:	2800      	cmp	r0, #0
 8013ed0:	dbf1      	blt.n	8013eb6 <__swhatbuf_r+0x12>
 8013ed2:	9a01      	ldr	r2, [sp, #4]
 8013ed4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013ed8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013edc:	425a      	negs	r2, r3
 8013ede:	415a      	adcs	r2, r3
 8013ee0:	602a      	str	r2, [r5, #0]
 8013ee2:	e7ee      	b.n	8013ec2 <__swhatbuf_r+0x1e>
 8013ee4:	2340      	movs	r3, #64	; 0x40
 8013ee6:	2000      	movs	r0, #0
 8013ee8:	6023      	str	r3, [r4, #0]
 8013eea:	b016      	add	sp, #88	; 0x58
 8013eec:	bd70      	pop	{r4, r5, r6, pc}
	...

08013ef0 <__smakebuf_r>:
 8013ef0:	898b      	ldrh	r3, [r1, #12]
 8013ef2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013ef4:	079d      	lsls	r5, r3, #30
 8013ef6:	4606      	mov	r6, r0
 8013ef8:	460c      	mov	r4, r1
 8013efa:	d507      	bpl.n	8013f0c <__smakebuf_r+0x1c>
 8013efc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013f00:	6023      	str	r3, [r4, #0]
 8013f02:	6123      	str	r3, [r4, #16]
 8013f04:	2301      	movs	r3, #1
 8013f06:	6163      	str	r3, [r4, #20]
 8013f08:	b002      	add	sp, #8
 8013f0a:	bd70      	pop	{r4, r5, r6, pc}
 8013f0c:	ab01      	add	r3, sp, #4
 8013f0e:	466a      	mov	r2, sp
 8013f10:	f7ff ffc8 	bl	8013ea4 <__swhatbuf_r>
 8013f14:	9900      	ldr	r1, [sp, #0]
 8013f16:	4605      	mov	r5, r0
 8013f18:	4630      	mov	r0, r6
 8013f1a:	f7fe f90f 	bl	801213c <_malloc_r>
 8013f1e:	b948      	cbnz	r0, 8013f34 <__smakebuf_r+0x44>
 8013f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f24:	059a      	lsls	r2, r3, #22
 8013f26:	d4ef      	bmi.n	8013f08 <__smakebuf_r+0x18>
 8013f28:	f023 0303 	bic.w	r3, r3, #3
 8013f2c:	f043 0302 	orr.w	r3, r3, #2
 8013f30:	81a3      	strh	r3, [r4, #12]
 8013f32:	e7e3      	b.n	8013efc <__smakebuf_r+0xc>
 8013f34:	4b0d      	ldr	r3, [pc, #52]	; (8013f6c <__smakebuf_r+0x7c>)
 8013f36:	62b3      	str	r3, [r6, #40]	; 0x28
 8013f38:	89a3      	ldrh	r3, [r4, #12]
 8013f3a:	6020      	str	r0, [r4, #0]
 8013f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f40:	81a3      	strh	r3, [r4, #12]
 8013f42:	9b00      	ldr	r3, [sp, #0]
 8013f44:	6163      	str	r3, [r4, #20]
 8013f46:	9b01      	ldr	r3, [sp, #4]
 8013f48:	6120      	str	r0, [r4, #16]
 8013f4a:	b15b      	cbz	r3, 8013f64 <__smakebuf_r+0x74>
 8013f4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f50:	4630      	mov	r0, r6
 8013f52:	f000 ff11 	bl	8014d78 <_isatty_r>
 8013f56:	b128      	cbz	r0, 8013f64 <__smakebuf_r+0x74>
 8013f58:	89a3      	ldrh	r3, [r4, #12]
 8013f5a:	f023 0303 	bic.w	r3, r3, #3
 8013f5e:	f043 0301 	orr.w	r3, r3, #1
 8013f62:	81a3      	strh	r3, [r4, #12]
 8013f64:	89a0      	ldrh	r0, [r4, #12]
 8013f66:	4305      	orrs	r5, r0
 8013f68:	81a5      	strh	r5, [r4, #12]
 8013f6a:	e7cd      	b.n	8013f08 <__smakebuf_r+0x18>
 8013f6c:	08011edd 	.word	0x08011edd

08013f70 <malloc>:
 8013f70:	4b02      	ldr	r3, [pc, #8]	; (8013f7c <malloc+0xc>)
 8013f72:	4601      	mov	r1, r0
 8013f74:	6818      	ldr	r0, [r3, #0]
 8013f76:	f7fe b8e1 	b.w	801213c <_malloc_r>
 8013f7a:	bf00      	nop
 8013f7c:	20000188 	.word	0x20000188

08013f80 <__malloc_lock>:
 8013f80:	4801      	ldr	r0, [pc, #4]	; (8013f88 <__malloc_lock+0x8>)
 8013f82:	f7fe b8a2 	b.w	80120ca <__retarget_lock_acquire_recursive>
 8013f86:	bf00      	nop
 8013f88:	2000349c 	.word	0x2000349c

08013f8c <__malloc_unlock>:
 8013f8c:	4801      	ldr	r0, [pc, #4]	; (8013f94 <__malloc_unlock+0x8>)
 8013f8e:	f7fe b89d 	b.w	80120cc <__retarget_lock_release_recursive>
 8013f92:	bf00      	nop
 8013f94:	2000349c 	.word	0x2000349c

08013f98 <_Balloc>:
 8013f98:	b570      	push	{r4, r5, r6, lr}
 8013f9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013f9c:	4604      	mov	r4, r0
 8013f9e:	460d      	mov	r5, r1
 8013fa0:	b976      	cbnz	r6, 8013fc0 <_Balloc+0x28>
 8013fa2:	2010      	movs	r0, #16
 8013fa4:	f7ff ffe4 	bl	8013f70 <malloc>
 8013fa8:	4602      	mov	r2, r0
 8013faa:	6260      	str	r0, [r4, #36]	; 0x24
 8013fac:	b920      	cbnz	r0, 8013fb8 <_Balloc+0x20>
 8013fae:	4b18      	ldr	r3, [pc, #96]	; (8014010 <_Balloc+0x78>)
 8013fb0:	4818      	ldr	r0, [pc, #96]	; (8014014 <_Balloc+0x7c>)
 8013fb2:	2166      	movs	r1, #102	; 0x66
 8013fb4:	f000 fe9e 	bl	8014cf4 <__assert_func>
 8013fb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013fbc:	6006      	str	r6, [r0, #0]
 8013fbe:	60c6      	str	r6, [r0, #12]
 8013fc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013fc2:	68f3      	ldr	r3, [r6, #12]
 8013fc4:	b183      	cbz	r3, 8013fe8 <_Balloc+0x50>
 8013fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013fc8:	68db      	ldr	r3, [r3, #12]
 8013fca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013fce:	b9b8      	cbnz	r0, 8014000 <_Balloc+0x68>
 8013fd0:	2101      	movs	r1, #1
 8013fd2:	fa01 f605 	lsl.w	r6, r1, r5
 8013fd6:	1d72      	adds	r2, r6, #5
 8013fd8:	0092      	lsls	r2, r2, #2
 8013fda:	4620      	mov	r0, r4
 8013fdc:	f000 fb60 	bl	80146a0 <_calloc_r>
 8013fe0:	b160      	cbz	r0, 8013ffc <_Balloc+0x64>
 8013fe2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013fe6:	e00e      	b.n	8014006 <_Balloc+0x6e>
 8013fe8:	2221      	movs	r2, #33	; 0x21
 8013fea:	2104      	movs	r1, #4
 8013fec:	4620      	mov	r0, r4
 8013fee:	f000 fb57 	bl	80146a0 <_calloc_r>
 8013ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ff4:	60f0      	str	r0, [r6, #12]
 8013ff6:	68db      	ldr	r3, [r3, #12]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d1e4      	bne.n	8013fc6 <_Balloc+0x2e>
 8013ffc:	2000      	movs	r0, #0
 8013ffe:	bd70      	pop	{r4, r5, r6, pc}
 8014000:	6802      	ldr	r2, [r0, #0]
 8014002:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014006:	2300      	movs	r3, #0
 8014008:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801400c:	e7f7      	b.n	8013ffe <_Balloc+0x66>
 801400e:	bf00      	nop
 8014010:	080153d1 	.word	0x080153d1
 8014014:	08015454 	.word	0x08015454

08014018 <_Bfree>:
 8014018:	b570      	push	{r4, r5, r6, lr}
 801401a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801401c:	4605      	mov	r5, r0
 801401e:	460c      	mov	r4, r1
 8014020:	b976      	cbnz	r6, 8014040 <_Bfree+0x28>
 8014022:	2010      	movs	r0, #16
 8014024:	f7ff ffa4 	bl	8013f70 <malloc>
 8014028:	4602      	mov	r2, r0
 801402a:	6268      	str	r0, [r5, #36]	; 0x24
 801402c:	b920      	cbnz	r0, 8014038 <_Bfree+0x20>
 801402e:	4b09      	ldr	r3, [pc, #36]	; (8014054 <_Bfree+0x3c>)
 8014030:	4809      	ldr	r0, [pc, #36]	; (8014058 <_Bfree+0x40>)
 8014032:	218a      	movs	r1, #138	; 0x8a
 8014034:	f000 fe5e 	bl	8014cf4 <__assert_func>
 8014038:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801403c:	6006      	str	r6, [r0, #0]
 801403e:	60c6      	str	r6, [r0, #12]
 8014040:	b13c      	cbz	r4, 8014052 <_Bfree+0x3a>
 8014042:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014044:	6862      	ldr	r2, [r4, #4]
 8014046:	68db      	ldr	r3, [r3, #12]
 8014048:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801404c:	6021      	str	r1, [r4, #0]
 801404e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014052:	bd70      	pop	{r4, r5, r6, pc}
 8014054:	080153d1 	.word	0x080153d1
 8014058:	08015454 	.word	0x08015454

0801405c <__multadd>:
 801405c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014060:	690d      	ldr	r5, [r1, #16]
 8014062:	4607      	mov	r7, r0
 8014064:	460c      	mov	r4, r1
 8014066:	461e      	mov	r6, r3
 8014068:	f101 0c14 	add.w	ip, r1, #20
 801406c:	2000      	movs	r0, #0
 801406e:	f8dc 3000 	ldr.w	r3, [ip]
 8014072:	b299      	uxth	r1, r3
 8014074:	fb02 6101 	mla	r1, r2, r1, r6
 8014078:	0c1e      	lsrs	r6, r3, #16
 801407a:	0c0b      	lsrs	r3, r1, #16
 801407c:	fb02 3306 	mla	r3, r2, r6, r3
 8014080:	b289      	uxth	r1, r1
 8014082:	3001      	adds	r0, #1
 8014084:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014088:	4285      	cmp	r5, r0
 801408a:	f84c 1b04 	str.w	r1, [ip], #4
 801408e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014092:	dcec      	bgt.n	801406e <__multadd+0x12>
 8014094:	b30e      	cbz	r6, 80140da <__multadd+0x7e>
 8014096:	68a3      	ldr	r3, [r4, #8]
 8014098:	42ab      	cmp	r3, r5
 801409a:	dc19      	bgt.n	80140d0 <__multadd+0x74>
 801409c:	6861      	ldr	r1, [r4, #4]
 801409e:	4638      	mov	r0, r7
 80140a0:	3101      	adds	r1, #1
 80140a2:	f7ff ff79 	bl	8013f98 <_Balloc>
 80140a6:	4680      	mov	r8, r0
 80140a8:	b928      	cbnz	r0, 80140b6 <__multadd+0x5a>
 80140aa:	4602      	mov	r2, r0
 80140ac:	4b0c      	ldr	r3, [pc, #48]	; (80140e0 <__multadd+0x84>)
 80140ae:	480d      	ldr	r0, [pc, #52]	; (80140e4 <__multadd+0x88>)
 80140b0:	21b5      	movs	r1, #181	; 0xb5
 80140b2:	f000 fe1f 	bl	8014cf4 <__assert_func>
 80140b6:	6922      	ldr	r2, [r4, #16]
 80140b8:	3202      	adds	r2, #2
 80140ba:	f104 010c 	add.w	r1, r4, #12
 80140be:	0092      	lsls	r2, r2, #2
 80140c0:	300c      	adds	r0, #12
 80140c2:	f7fe f804 	bl	80120ce <memcpy>
 80140c6:	4621      	mov	r1, r4
 80140c8:	4638      	mov	r0, r7
 80140ca:	f7ff ffa5 	bl	8014018 <_Bfree>
 80140ce:	4644      	mov	r4, r8
 80140d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80140d4:	3501      	adds	r5, #1
 80140d6:	615e      	str	r6, [r3, #20]
 80140d8:	6125      	str	r5, [r4, #16]
 80140da:	4620      	mov	r0, r4
 80140dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140e0:	08015443 	.word	0x08015443
 80140e4:	08015454 	.word	0x08015454

080140e8 <__hi0bits>:
 80140e8:	0c03      	lsrs	r3, r0, #16
 80140ea:	041b      	lsls	r3, r3, #16
 80140ec:	b9d3      	cbnz	r3, 8014124 <__hi0bits+0x3c>
 80140ee:	0400      	lsls	r0, r0, #16
 80140f0:	2310      	movs	r3, #16
 80140f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80140f6:	bf04      	itt	eq
 80140f8:	0200      	lsleq	r0, r0, #8
 80140fa:	3308      	addeq	r3, #8
 80140fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014100:	bf04      	itt	eq
 8014102:	0100      	lsleq	r0, r0, #4
 8014104:	3304      	addeq	r3, #4
 8014106:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801410a:	bf04      	itt	eq
 801410c:	0080      	lsleq	r0, r0, #2
 801410e:	3302      	addeq	r3, #2
 8014110:	2800      	cmp	r0, #0
 8014112:	db05      	blt.n	8014120 <__hi0bits+0x38>
 8014114:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014118:	f103 0301 	add.w	r3, r3, #1
 801411c:	bf08      	it	eq
 801411e:	2320      	moveq	r3, #32
 8014120:	4618      	mov	r0, r3
 8014122:	4770      	bx	lr
 8014124:	2300      	movs	r3, #0
 8014126:	e7e4      	b.n	80140f2 <__hi0bits+0xa>

08014128 <__lo0bits>:
 8014128:	6803      	ldr	r3, [r0, #0]
 801412a:	f013 0207 	ands.w	r2, r3, #7
 801412e:	4601      	mov	r1, r0
 8014130:	d00b      	beq.n	801414a <__lo0bits+0x22>
 8014132:	07da      	lsls	r2, r3, #31
 8014134:	d423      	bmi.n	801417e <__lo0bits+0x56>
 8014136:	0798      	lsls	r0, r3, #30
 8014138:	bf49      	itett	mi
 801413a:	085b      	lsrmi	r3, r3, #1
 801413c:	089b      	lsrpl	r3, r3, #2
 801413e:	2001      	movmi	r0, #1
 8014140:	600b      	strmi	r3, [r1, #0]
 8014142:	bf5c      	itt	pl
 8014144:	600b      	strpl	r3, [r1, #0]
 8014146:	2002      	movpl	r0, #2
 8014148:	4770      	bx	lr
 801414a:	b298      	uxth	r0, r3
 801414c:	b9a8      	cbnz	r0, 801417a <__lo0bits+0x52>
 801414e:	0c1b      	lsrs	r3, r3, #16
 8014150:	2010      	movs	r0, #16
 8014152:	b2da      	uxtb	r2, r3
 8014154:	b90a      	cbnz	r2, 801415a <__lo0bits+0x32>
 8014156:	3008      	adds	r0, #8
 8014158:	0a1b      	lsrs	r3, r3, #8
 801415a:	071a      	lsls	r2, r3, #28
 801415c:	bf04      	itt	eq
 801415e:	091b      	lsreq	r3, r3, #4
 8014160:	3004      	addeq	r0, #4
 8014162:	079a      	lsls	r2, r3, #30
 8014164:	bf04      	itt	eq
 8014166:	089b      	lsreq	r3, r3, #2
 8014168:	3002      	addeq	r0, #2
 801416a:	07da      	lsls	r2, r3, #31
 801416c:	d403      	bmi.n	8014176 <__lo0bits+0x4e>
 801416e:	085b      	lsrs	r3, r3, #1
 8014170:	f100 0001 	add.w	r0, r0, #1
 8014174:	d005      	beq.n	8014182 <__lo0bits+0x5a>
 8014176:	600b      	str	r3, [r1, #0]
 8014178:	4770      	bx	lr
 801417a:	4610      	mov	r0, r2
 801417c:	e7e9      	b.n	8014152 <__lo0bits+0x2a>
 801417e:	2000      	movs	r0, #0
 8014180:	4770      	bx	lr
 8014182:	2020      	movs	r0, #32
 8014184:	4770      	bx	lr
	...

08014188 <__i2b>:
 8014188:	b510      	push	{r4, lr}
 801418a:	460c      	mov	r4, r1
 801418c:	2101      	movs	r1, #1
 801418e:	f7ff ff03 	bl	8013f98 <_Balloc>
 8014192:	4602      	mov	r2, r0
 8014194:	b928      	cbnz	r0, 80141a2 <__i2b+0x1a>
 8014196:	4b05      	ldr	r3, [pc, #20]	; (80141ac <__i2b+0x24>)
 8014198:	4805      	ldr	r0, [pc, #20]	; (80141b0 <__i2b+0x28>)
 801419a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801419e:	f000 fda9 	bl	8014cf4 <__assert_func>
 80141a2:	2301      	movs	r3, #1
 80141a4:	6144      	str	r4, [r0, #20]
 80141a6:	6103      	str	r3, [r0, #16]
 80141a8:	bd10      	pop	{r4, pc}
 80141aa:	bf00      	nop
 80141ac:	08015443 	.word	0x08015443
 80141b0:	08015454 	.word	0x08015454

080141b4 <__multiply>:
 80141b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141b8:	4691      	mov	r9, r2
 80141ba:	690a      	ldr	r2, [r1, #16]
 80141bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80141c0:	429a      	cmp	r2, r3
 80141c2:	bfb8      	it	lt
 80141c4:	460b      	movlt	r3, r1
 80141c6:	460c      	mov	r4, r1
 80141c8:	bfbc      	itt	lt
 80141ca:	464c      	movlt	r4, r9
 80141cc:	4699      	movlt	r9, r3
 80141ce:	6927      	ldr	r7, [r4, #16]
 80141d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80141d4:	68a3      	ldr	r3, [r4, #8]
 80141d6:	6861      	ldr	r1, [r4, #4]
 80141d8:	eb07 060a 	add.w	r6, r7, sl
 80141dc:	42b3      	cmp	r3, r6
 80141de:	b085      	sub	sp, #20
 80141e0:	bfb8      	it	lt
 80141e2:	3101      	addlt	r1, #1
 80141e4:	f7ff fed8 	bl	8013f98 <_Balloc>
 80141e8:	b930      	cbnz	r0, 80141f8 <__multiply+0x44>
 80141ea:	4602      	mov	r2, r0
 80141ec:	4b44      	ldr	r3, [pc, #272]	; (8014300 <__multiply+0x14c>)
 80141ee:	4845      	ldr	r0, [pc, #276]	; (8014304 <__multiply+0x150>)
 80141f0:	f240 115d 	movw	r1, #349	; 0x15d
 80141f4:	f000 fd7e 	bl	8014cf4 <__assert_func>
 80141f8:	f100 0514 	add.w	r5, r0, #20
 80141fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014200:	462b      	mov	r3, r5
 8014202:	2200      	movs	r2, #0
 8014204:	4543      	cmp	r3, r8
 8014206:	d321      	bcc.n	801424c <__multiply+0x98>
 8014208:	f104 0314 	add.w	r3, r4, #20
 801420c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014210:	f109 0314 	add.w	r3, r9, #20
 8014214:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014218:	9202      	str	r2, [sp, #8]
 801421a:	1b3a      	subs	r2, r7, r4
 801421c:	3a15      	subs	r2, #21
 801421e:	f022 0203 	bic.w	r2, r2, #3
 8014222:	3204      	adds	r2, #4
 8014224:	f104 0115 	add.w	r1, r4, #21
 8014228:	428f      	cmp	r7, r1
 801422a:	bf38      	it	cc
 801422c:	2204      	movcc	r2, #4
 801422e:	9201      	str	r2, [sp, #4]
 8014230:	9a02      	ldr	r2, [sp, #8]
 8014232:	9303      	str	r3, [sp, #12]
 8014234:	429a      	cmp	r2, r3
 8014236:	d80c      	bhi.n	8014252 <__multiply+0x9e>
 8014238:	2e00      	cmp	r6, #0
 801423a:	dd03      	ble.n	8014244 <__multiply+0x90>
 801423c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014240:	2b00      	cmp	r3, #0
 8014242:	d05a      	beq.n	80142fa <__multiply+0x146>
 8014244:	6106      	str	r6, [r0, #16]
 8014246:	b005      	add	sp, #20
 8014248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801424c:	f843 2b04 	str.w	r2, [r3], #4
 8014250:	e7d8      	b.n	8014204 <__multiply+0x50>
 8014252:	f8b3 a000 	ldrh.w	sl, [r3]
 8014256:	f1ba 0f00 	cmp.w	sl, #0
 801425a:	d024      	beq.n	80142a6 <__multiply+0xf2>
 801425c:	f104 0e14 	add.w	lr, r4, #20
 8014260:	46a9      	mov	r9, r5
 8014262:	f04f 0c00 	mov.w	ip, #0
 8014266:	f85e 2b04 	ldr.w	r2, [lr], #4
 801426a:	f8d9 1000 	ldr.w	r1, [r9]
 801426e:	fa1f fb82 	uxth.w	fp, r2
 8014272:	b289      	uxth	r1, r1
 8014274:	fb0a 110b 	mla	r1, sl, fp, r1
 8014278:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801427c:	f8d9 2000 	ldr.w	r2, [r9]
 8014280:	4461      	add	r1, ip
 8014282:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014286:	fb0a c20b 	mla	r2, sl, fp, ip
 801428a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801428e:	b289      	uxth	r1, r1
 8014290:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014294:	4577      	cmp	r7, lr
 8014296:	f849 1b04 	str.w	r1, [r9], #4
 801429a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801429e:	d8e2      	bhi.n	8014266 <__multiply+0xb2>
 80142a0:	9a01      	ldr	r2, [sp, #4]
 80142a2:	f845 c002 	str.w	ip, [r5, r2]
 80142a6:	9a03      	ldr	r2, [sp, #12]
 80142a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80142ac:	3304      	adds	r3, #4
 80142ae:	f1b9 0f00 	cmp.w	r9, #0
 80142b2:	d020      	beq.n	80142f6 <__multiply+0x142>
 80142b4:	6829      	ldr	r1, [r5, #0]
 80142b6:	f104 0c14 	add.w	ip, r4, #20
 80142ba:	46ae      	mov	lr, r5
 80142bc:	f04f 0a00 	mov.w	sl, #0
 80142c0:	f8bc b000 	ldrh.w	fp, [ip]
 80142c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80142c8:	fb09 220b 	mla	r2, r9, fp, r2
 80142cc:	4492      	add	sl, r2
 80142ce:	b289      	uxth	r1, r1
 80142d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80142d4:	f84e 1b04 	str.w	r1, [lr], #4
 80142d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80142dc:	f8be 1000 	ldrh.w	r1, [lr]
 80142e0:	0c12      	lsrs	r2, r2, #16
 80142e2:	fb09 1102 	mla	r1, r9, r2, r1
 80142e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80142ea:	4567      	cmp	r7, ip
 80142ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80142f0:	d8e6      	bhi.n	80142c0 <__multiply+0x10c>
 80142f2:	9a01      	ldr	r2, [sp, #4]
 80142f4:	50a9      	str	r1, [r5, r2]
 80142f6:	3504      	adds	r5, #4
 80142f8:	e79a      	b.n	8014230 <__multiply+0x7c>
 80142fa:	3e01      	subs	r6, #1
 80142fc:	e79c      	b.n	8014238 <__multiply+0x84>
 80142fe:	bf00      	nop
 8014300:	08015443 	.word	0x08015443
 8014304:	08015454 	.word	0x08015454

08014308 <__pow5mult>:
 8014308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801430c:	4615      	mov	r5, r2
 801430e:	f012 0203 	ands.w	r2, r2, #3
 8014312:	4606      	mov	r6, r0
 8014314:	460f      	mov	r7, r1
 8014316:	d007      	beq.n	8014328 <__pow5mult+0x20>
 8014318:	4c25      	ldr	r4, [pc, #148]	; (80143b0 <__pow5mult+0xa8>)
 801431a:	3a01      	subs	r2, #1
 801431c:	2300      	movs	r3, #0
 801431e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014322:	f7ff fe9b 	bl	801405c <__multadd>
 8014326:	4607      	mov	r7, r0
 8014328:	10ad      	asrs	r5, r5, #2
 801432a:	d03d      	beq.n	80143a8 <__pow5mult+0xa0>
 801432c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801432e:	b97c      	cbnz	r4, 8014350 <__pow5mult+0x48>
 8014330:	2010      	movs	r0, #16
 8014332:	f7ff fe1d 	bl	8013f70 <malloc>
 8014336:	4602      	mov	r2, r0
 8014338:	6270      	str	r0, [r6, #36]	; 0x24
 801433a:	b928      	cbnz	r0, 8014348 <__pow5mult+0x40>
 801433c:	4b1d      	ldr	r3, [pc, #116]	; (80143b4 <__pow5mult+0xac>)
 801433e:	481e      	ldr	r0, [pc, #120]	; (80143b8 <__pow5mult+0xb0>)
 8014340:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014344:	f000 fcd6 	bl	8014cf4 <__assert_func>
 8014348:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801434c:	6004      	str	r4, [r0, #0]
 801434e:	60c4      	str	r4, [r0, #12]
 8014350:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014354:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014358:	b94c      	cbnz	r4, 801436e <__pow5mult+0x66>
 801435a:	f240 2171 	movw	r1, #625	; 0x271
 801435e:	4630      	mov	r0, r6
 8014360:	f7ff ff12 	bl	8014188 <__i2b>
 8014364:	2300      	movs	r3, #0
 8014366:	f8c8 0008 	str.w	r0, [r8, #8]
 801436a:	4604      	mov	r4, r0
 801436c:	6003      	str	r3, [r0, #0]
 801436e:	f04f 0900 	mov.w	r9, #0
 8014372:	07eb      	lsls	r3, r5, #31
 8014374:	d50a      	bpl.n	801438c <__pow5mult+0x84>
 8014376:	4639      	mov	r1, r7
 8014378:	4622      	mov	r2, r4
 801437a:	4630      	mov	r0, r6
 801437c:	f7ff ff1a 	bl	80141b4 <__multiply>
 8014380:	4639      	mov	r1, r7
 8014382:	4680      	mov	r8, r0
 8014384:	4630      	mov	r0, r6
 8014386:	f7ff fe47 	bl	8014018 <_Bfree>
 801438a:	4647      	mov	r7, r8
 801438c:	106d      	asrs	r5, r5, #1
 801438e:	d00b      	beq.n	80143a8 <__pow5mult+0xa0>
 8014390:	6820      	ldr	r0, [r4, #0]
 8014392:	b938      	cbnz	r0, 80143a4 <__pow5mult+0x9c>
 8014394:	4622      	mov	r2, r4
 8014396:	4621      	mov	r1, r4
 8014398:	4630      	mov	r0, r6
 801439a:	f7ff ff0b 	bl	80141b4 <__multiply>
 801439e:	6020      	str	r0, [r4, #0]
 80143a0:	f8c0 9000 	str.w	r9, [r0]
 80143a4:	4604      	mov	r4, r0
 80143a6:	e7e4      	b.n	8014372 <__pow5mult+0x6a>
 80143a8:	4638      	mov	r0, r7
 80143aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143ae:	bf00      	nop
 80143b0:	080155a0 	.word	0x080155a0
 80143b4:	080153d1 	.word	0x080153d1
 80143b8:	08015454 	.word	0x08015454

080143bc <__lshift>:
 80143bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143c0:	460c      	mov	r4, r1
 80143c2:	6849      	ldr	r1, [r1, #4]
 80143c4:	6923      	ldr	r3, [r4, #16]
 80143c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80143ca:	68a3      	ldr	r3, [r4, #8]
 80143cc:	4607      	mov	r7, r0
 80143ce:	4691      	mov	r9, r2
 80143d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80143d4:	f108 0601 	add.w	r6, r8, #1
 80143d8:	42b3      	cmp	r3, r6
 80143da:	db0b      	blt.n	80143f4 <__lshift+0x38>
 80143dc:	4638      	mov	r0, r7
 80143de:	f7ff fddb 	bl	8013f98 <_Balloc>
 80143e2:	4605      	mov	r5, r0
 80143e4:	b948      	cbnz	r0, 80143fa <__lshift+0x3e>
 80143e6:	4602      	mov	r2, r0
 80143e8:	4b2a      	ldr	r3, [pc, #168]	; (8014494 <__lshift+0xd8>)
 80143ea:	482b      	ldr	r0, [pc, #172]	; (8014498 <__lshift+0xdc>)
 80143ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80143f0:	f000 fc80 	bl	8014cf4 <__assert_func>
 80143f4:	3101      	adds	r1, #1
 80143f6:	005b      	lsls	r3, r3, #1
 80143f8:	e7ee      	b.n	80143d8 <__lshift+0x1c>
 80143fa:	2300      	movs	r3, #0
 80143fc:	f100 0114 	add.w	r1, r0, #20
 8014400:	f100 0210 	add.w	r2, r0, #16
 8014404:	4618      	mov	r0, r3
 8014406:	4553      	cmp	r3, sl
 8014408:	db37      	blt.n	801447a <__lshift+0xbe>
 801440a:	6920      	ldr	r0, [r4, #16]
 801440c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014410:	f104 0314 	add.w	r3, r4, #20
 8014414:	f019 091f 	ands.w	r9, r9, #31
 8014418:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801441c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014420:	d02f      	beq.n	8014482 <__lshift+0xc6>
 8014422:	f1c9 0e20 	rsb	lr, r9, #32
 8014426:	468a      	mov	sl, r1
 8014428:	f04f 0c00 	mov.w	ip, #0
 801442c:	681a      	ldr	r2, [r3, #0]
 801442e:	fa02 f209 	lsl.w	r2, r2, r9
 8014432:	ea42 020c 	orr.w	r2, r2, ip
 8014436:	f84a 2b04 	str.w	r2, [sl], #4
 801443a:	f853 2b04 	ldr.w	r2, [r3], #4
 801443e:	4298      	cmp	r0, r3
 8014440:	fa22 fc0e 	lsr.w	ip, r2, lr
 8014444:	d8f2      	bhi.n	801442c <__lshift+0x70>
 8014446:	1b03      	subs	r3, r0, r4
 8014448:	3b15      	subs	r3, #21
 801444a:	f023 0303 	bic.w	r3, r3, #3
 801444e:	3304      	adds	r3, #4
 8014450:	f104 0215 	add.w	r2, r4, #21
 8014454:	4290      	cmp	r0, r2
 8014456:	bf38      	it	cc
 8014458:	2304      	movcc	r3, #4
 801445a:	f841 c003 	str.w	ip, [r1, r3]
 801445e:	f1bc 0f00 	cmp.w	ip, #0
 8014462:	d001      	beq.n	8014468 <__lshift+0xac>
 8014464:	f108 0602 	add.w	r6, r8, #2
 8014468:	3e01      	subs	r6, #1
 801446a:	4638      	mov	r0, r7
 801446c:	612e      	str	r6, [r5, #16]
 801446e:	4621      	mov	r1, r4
 8014470:	f7ff fdd2 	bl	8014018 <_Bfree>
 8014474:	4628      	mov	r0, r5
 8014476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801447a:	f842 0f04 	str.w	r0, [r2, #4]!
 801447e:	3301      	adds	r3, #1
 8014480:	e7c1      	b.n	8014406 <__lshift+0x4a>
 8014482:	3904      	subs	r1, #4
 8014484:	f853 2b04 	ldr.w	r2, [r3], #4
 8014488:	f841 2f04 	str.w	r2, [r1, #4]!
 801448c:	4298      	cmp	r0, r3
 801448e:	d8f9      	bhi.n	8014484 <__lshift+0xc8>
 8014490:	e7ea      	b.n	8014468 <__lshift+0xac>
 8014492:	bf00      	nop
 8014494:	08015443 	.word	0x08015443
 8014498:	08015454 	.word	0x08015454

0801449c <__mcmp>:
 801449c:	b530      	push	{r4, r5, lr}
 801449e:	6902      	ldr	r2, [r0, #16]
 80144a0:	690c      	ldr	r4, [r1, #16]
 80144a2:	1b12      	subs	r2, r2, r4
 80144a4:	d10e      	bne.n	80144c4 <__mcmp+0x28>
 80144a6:	f100 0314 	add.w	r3, r0, #20
 80144aa:	3114      	adds	r1, #20
 80144ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80144b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80144b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80144b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80144bc:	42a5      	cmp	r5, r4
 80144be:	d003      	beq.n	80144c8 <__mcmp+0x2c>
 80144c0:	d305      	bcc.n	80144ce <__mcmp+0x32>
 80144c2:	2201      	movs	r2, #1
 80144c4:	4610      	mov	r0, r2
 80144c6:	bd30      	pop	{r4, r5, pc}
 80144c8:	4283      	cmp	r3, r0
 80144ca:	d3f3      	bcc.n	80144b4 <__mcmp+0x18>
 80144cc:	e7fa      	b.n	80144c4 <__mcmp+0x28>
 80144ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80144d2:	e7f7      	b.n	80144c4 <__mcmp+0x28>

080144d4 <__mdiff>:
 80144d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144d8:	460c      	mov	r4, r1
 80144da:	4606      	mov	r6, r0
 80144dc:	4611      	mov	r1, r2
 80144de:	4620      	mov	r0, r4
 80144e0:	4690      	mov	r8, r2
 80144e2:	f7ff ffdb 	bl	801449c <__mcmp>
 80144e6:	1e05      	subs	r5, r0, #0
 80144e8:	d110      	bne.n	801450c <__mdiff+0x38>
 80144ea:	4629      	mov	r1, r5
 80144ec:	4630      	mov	r0, r6
 80144ee:	f7ff fd53 	bl	8013f98 <_Balloc>
 80144f2:	b930      	cbnz	r0, 8014502 <__mdiff+0x2e>
 80144f4:	4b3a      	ldr	r3, [pc, #232]	; (80145e0 <__mdiff+0x10c>)
 80144f6:	4602      	mov	r2, r0
 80144f8:	f240 2132 	movw	r1, #562	; 0x232
 80144fc:	4839      	ldr	r0, [pc, #228]	; (80145e4 <__mdiff+0x110>)
 80144fe:	f000 fbf9 	bl	8014cf4 <__assert_func>
 8014502:	2301      	movs	r3, #1
 8014504:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014508:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801450c:	bfa4      	itt	ge
 801450e:	4643      	movge	r3, r8
 8014510:	46a0      	movge	r8, r4
 8014512:	4630      	mov	r0, r6
 8014514:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014518:	bfa6      	itte	ge
 801451a:	461c      	movge	r4, r3
 801451c:	2500      	movge	r5, #0
 801451e:	2501      	movlt	r5, #1
 8014520:	f7ff fd3a 	bl	8013f98 <_Balloc>
 8014524:	b920      	cbnz	r0, 8014530 <__mdiff+0x5c>
 8014526:	4b2e      	ldr	r3, [pc, #184]	; (80145e0 <__mdiff+0x10c>)
 8014528:	4602      	mov	r2, r0
 801452a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801452e:	e7e5      	b.n	80144fc <__mdiff+0x28>
 8014530:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014534:	6926      	ldr	r6, [r4, #16]
 8014536:	60c5      	str	r5, [r0, #12]
 8014538:	f104 0914 	add.w	r9, r4, #20
 801453c:	f108 0514 	add.w	r5, r8, #20
 8014540:	f100 0e14 	add.w	lr, r0, #20
 8014544:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014548:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801454c:	f108 0210 	add.w	r2, r8, #16
 8014550:	46f2      	mov	sl, lr
 8014552:	2100      	movs	r1, #0
 8014554:	f859 3b04 	ldr.w	r3, [r9], #4
 8014558:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801455c:	fa1f f883 	uxth.w	r8, r3
 8014560:	fa11 f18b 	uxtah	r1, r1, fp
 8014564:	0c1b      	lsrs	r3, r3, #16
 8014566:	eba1 0808 	sub.w	r8, r1, r8
 801456a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801456e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014572:	fa1f f888 	uxth.w	r8, r8
 8014576:	1419      	asrs	r1, r3, #16
 8014578:	454e      	cmp	r6, r9
 801457a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801457e:	f84a 3b04 	str.w	r3, [sl], #4
 8014582:	d8e7      	bhi.n	8014554 <__mdiff+0x80>
 8014584:	1b33      	subs	r3, r6, r4
 8014586:	3b15      	subs	r3, #21
 8014588:	f023 0303 	bic.w	r3, r3, #3
 801458c:	3304      	adds	r3, #4
 801458e:	3415      	adds	r4, #21
 8014590:	42a6      	cmp	r6, r4
 8014592:	bf38      	it	cc
 8014594:	2304      	movcc	r3, #4
 8014596:	441d      	add	r5, r3
 8014598:	4473      	add	r3, lr
 801459a:	469e      	mov	lr, r3
 801459c:	462e      	mov	r6, r5
 801459e:	4566      	cmp	r6, ip
 80145a0:	d30e      	bcc.n	80145c0 <__mdiff+0xec>
 80145a2:	f10c 0203 	add.w	r2, ip, #3
 80145a6:	1b52      	subs	r2, r2, r5
 80145a8:	f022 0203 	bic.w	r2, r2, #3
 80145ac:	3d03      	subs	r5, #3
 80145ae:	45ac      	cmp	ip, r5
 80145b0:	bf38      	it	cc
 80145b2:	2200      	movcc	r2, #0
 80145b4:	441a      	add	r2, r3
 80145b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80145ba:	b17b      	cbz	r3, 80145dc <__mdiff+0x108>
 80145bc:	6107      	str	r7, [r0, #16]
 80145be:	e7a3      	b.n	8014508 <__mdiff+0x34>
 80145c0:	f856 8b04 	ldr.w	r8, [r6], #4
 80145c4:	fa11 f288 	uxtah	r2, r1, r8
 80145c8:	1414      	asrs	r4, r2, #16
 80145ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80145ce:	b292      	uxth	r2, r2
 80145d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80145d4:	f84e 2b04 	str.w	r2, [lr], #4
 80145d8:	1421      	asrs	r1, r4, #16
 80145da:	e7e0      	b.n	801459e <__mdiff+0xca>
 80145dc:	3f01      	subs	r7, #1
 80145de:	e7ea      	b.n	80145b6 <__mdiff+0xe2>
 80145e0:	08015443 	.word	0x08015443
 80145e4:	08015454 	.word	0x08015454

080145e8 <__d2b>:
 80145e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80145ec:	4689      	mov	r9, r1
 80145ee:	2101      	movs	r1, #1
 80145f0:	ec57 6b10 	vmov	r6, r7, d0
 80145f4:	4690      	mov	r8, r2
 80145f6:	f7ff fccf 	bl	8013f98 <_Balloc>
 80145fa:	4604      	mov	r4, r0
 80145fc:	b930      	cbnz	r0, 801460c <__d2b+0x24>
 80145fe:	4602      	mov	r2, r0
 8014600:	4b25      	ldr	r3, [pc, #148]	; (8014698 <__d2b+0xb0>)
 8014602:	4826      	ldr	r0, [pc, #152]	; (801469c <__d2b+0xb4>)
 8014604:	f240 310a 	movw	r1, #778	; 0x30a
 8014608:	f000 fb74 	bl	8014cf4 <__assert_func>
 801460c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014610:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014614:	bb35      	cbnz	r5, 8014664 <__d2b+0x7c>
 8014616:	2e00      	cmp	r6, #0
 8014618:	9301      	str	r3, [sp, #4]
 801461a:	d028      	beq.n	801466e <__d2b+0x86>
 801461c:	4668      	mov	r0, sp
 801461e:	9600      	str	r6, [sp, #0]
 8014620:	f7ff fd82 	bl	8014128 <__lo0bits>
 8014624:	9900      	ldr	r1, [sp, #0]
 8014626:	b300      	cbz	r0, 801466a <__d2b+0x82>
 8014628:	9a01      	ldr	r2, [sp, #4]
 801462a:	f1c0 0320 	rsb	r3, r0, #32
 801462e:	fa02 f303 	lsl.w	r3, r2, r3
 8014632:	430b      	orrs	r3, r1
 8014634:	40c2      	lsrs	r2, r0
 8014636:	6163      	str	r3, [r4, #20]
 8014638:	9201      	str	r2, [sp, #4]
 801463a:	9b01      	ldr	r3, [sp, #4]
 801463c:	61a3      	str	r3, [r4, #24]
 801463e:	2b00      	cmp	r3, #0
 8014640:	bf14      	ite	ne
 8014642:	2202      	movne	r2, #2
 8014644:	2201      	moveq	r2, #1
 8014646:	6122      	str	r2, [r4, #16]
 8014648:	b1d5      	cbz	r5, 8014680 <__d2b+0x98>
 801464a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801464e:	4405      	add	r5, r0
 8014650:	f8c9 5000 	str.w	r5, [r9]
 8014654:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014658:	f8c8 0000 	str.w	r0, [r8]
 801465c:	4620      	mov	r0, r4
 801465e:	b003      	add	sp, #12
 8014660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014668:	e7d5      	b.n	8014616 <__d2b+0x2e>
 801466a:	6161      	str	r1, [r4, #20]
 801466c:	e7e5      	b.n	801463a <__d2b+0x52>
 801466e:	a801      	add	r0, sp, #4
 8014670:	f7ff fd5a 	bl	8014128 <__lo0bits>
 8014674:	9b01      	ldr	r3, [sp, #4]
 8014676:	6163      	str	r3, [r4, #20]
 8014678:	2201      	movs	r2, #1
 801467a:	6122      	str	r2, [r4, #16]
 801467c:	3020      	adds	r0, #32
 801467e:	e7e3      	b.n	8014648 <__d2b+0x60>
 8014680:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014684:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014688:	f8c9 0000 	str.w	r0, [r9]
 801468c:	6918      	ldr	r0, [r3, #16]
 801468e:	f7ff fd2b 	bl	80140e8 <__hi0bits>
 8014692:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014696:	e7df      	b.n	8014658 <__d2b+0x70>
 8014698:	08015443 	.word	0x08015443
 801469c:	08015454 	.word	0x08015454

080146a0 <_calloc_r>:
 80146a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80146a2:	fba1 2402 	umull	r2, r4, r1, r2
 80146a6:	b94c      	cbnz	r4, 80146bc <_calloc_r+0x1c>
 80146a8:	4611      	mov	r1, r2
 80146aa:	9201      	str	r2, [sp, #4]
 80146ac:	f7fd fd46 	bl	801213c <_malloc_r>
 80146b0:	9a01      	ldr	r2, [sp, #4]
 80146b2:	4605      	mov	r5, r0
 80146b4:	b930      	cbnz	r0, 80146c4 <_calloc_r+0x24>
 80146b6:	4628      	mov	r0, r5
 80146b8:	b003      	add	sp, #12
 80146ba:	bd30      	pop	{r4, r5, pc}
 80146bc:	220c      	movs	r2, #12
 80146be:	6002      	str	r2, [r0, #0]
 80146c0:	2500      	movs	r5, #0
 80146c2:	e7f8      	b.n	80146b6 <_calloc_r+0x16>
 80146c4:	4621      	mov	r1, r4
 80146c6:	f7fd fd10 	bl	80120ea <memset>
 80146ca:	e7f4      	b.n	80146b6 <_calloc_r+0x16>

080146cc <_free_r>:
 80146cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80146ce:	2900      	cmp	r1, #0
 80146d0:	d044      	beq.n	801475c <_free_r+0x90>
 80146d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80146d6:	9001      	str	r0, [sp, #4]
 80146d8:	2b00      	cmp	r3, #0
 80146da:	f1a1 0404 	sub.w	r4, r1, #4
 80146de:	bfb8      	it	lt
 80146e0:	18e4      	addlt	r4, r4, r3
 80146e2:	f7ff fc4d 	bl	8013f80 <__malloc_lock>
 80146e6:	4a1e      	ldr	r2, [pc, #120]	; (8014760 <_free_r+0x94>)
 80146e8:	9801      	ldr	r0, [sp, #4]
 80146ea:	6813      	ldr	r3, [r2, #0]
 80146ec:	b933      	cbnz	r3, 80146fc <_free_r+0x30>
 80146ee:	6063      	str	r3, [r4, #4]
 80146f0:	6014      	str	r4, [r2, #0]
 80146f2:	b003      	add	sp, #12
 80146f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80146f8:	f7ff bc48 	b.w	8013f8c <__malloc_unlock>
 80146fc:	42a3      	cmp	r3, r4
 80146fe:	d908      	bls.n	8014712 <_free_r+0x46>
 8014700:	6825      	ldr	r5, [r4, #0]
 8014702:	1961      	adds	r1, r4, r5
 8014704:	428b      	cmp	r3, r1
 8014706:	bf01      	itttt	eq
 8014708:	6819      	ldreq	r1, [r3, #0]
 801470a:	685b      	ldreq	r3, [r3, #4]
 801470c:	1949      	addeq	r1, r1, r5
 801470e:	6021      	streq	r1, [r4, #0]
 8014710:	e7ed      	b.n	80146ee <_free_r+0x22>
 8014712:	461a      	mov	r2, r3
 8014714:	685b      	ldr	r3, [r3, #4]
 8014716:	b10b      	cbz	r3, 801471c <_free_r+0x50>
 8014718:	42a3      	cmp	r3, r4
 801471a:	d9fa      	bls.n	8014712 <_free_r+0x46>
 801471c:	6811      	ldr	r1, [r2, #0]
 801471e:	1855      	adds	r5, r2, r1
 8014720:	42a5      	cmp	r5, r4
 8014722:	d10b      	bne.n	801473c <_free_r+0x70>
 8014724:	6824      	ldr	r4, [r4, #0]
 8014726:	4421      	add	r1, r4
 8014728:	1854      	adds	r4, r2, r1
 801472a:	42a3      	cmp	r3, r4
 801472c:	6011      	str	r1, [r2, #0]
 801472e:	d1e0      	bne.n	80146f2 <_free_r+0x26>
 8014730:	681c      	ldr	r4, [r3, #0]
 8014732:	685b      	ldr	r3, [r3, #4]
 8014734:	6053      	str	r3, [r2, #4]
 8014736:	4421      	add	r1, r4
 8014738:	6011      	str	r1, [r2, #0]
 801473a:	e7da      	b.n	80146f2 <_free_r+0x26>
 801473c:	d902      	bls.n	8014744 <_free_r+0x78>
 801473e:	230c      	movs	r3, #12
 8014740:	6003      	str	r3, [r0, #0]
 8014742:	e7d6      	b.n	80146f2 <_free_r+0x26>
 8014744:	6825      	ldr	r5, [r4, #0]
 8014746:	1961      	adds	r1, r4, r5
 8014748:	428b      	cmp	r3, r1
 801474a:	bf04      	itt	eq
 801474c:	6819      	ldreq	r1, [r3, #0]
 801474e:	685b      	ldreq	r3, [r3, #4]
 8014750:	6063      	str	r3, [r4, #4]
 8014752:	bf04      	itt	eq
 8014754:	1949      	addeq	r1, r1, r5
 8014756:	6021      	streq	r1, [r4, #0]
 8014758:	6054      	str	r4, [r2, #4]
 801475a:	e7ca      	b.n	80146f2 <_free_r+0x26>
 801475c:	b003      	add	sp, #12
 801475e:	bd30      	pop	{r4, r5, pc}
 8014760:	200034a0 	.word	0x200034a0

08014764 <__ssputs_r>:
 8014764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014768:	688e      	ldr	r6, [r1, #8]
 801476a:	429e      	cmp	r6, r3
 801476c:	4682      	mov	sl, r0
 801476e:	460c      	mov	r4, r1
 8014770:	4690      	mov	r8, r2
 8014772:	461f      	mov	r7, r3
 8014774:	d838      	bhi.n	80147e8 <__ssputs_r+0x84>
 8014776:	898a      	ldrh	r2, [r1, #12]
 8014778:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801477c:	d032      	beq.n	80147e4 <__ssputs_r+0x80>
 801477e:	6825      	ldr	r5, [r4, #0]
 8014780:	6909      	ldr	r1, [r1, #16]
 8014782:	eba5 0901 	sub.w	r9, r5, r1
 8014786:	6965      	ldr	r5, [r4, #20]
 8014788:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801478c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014790:	3301      	adds	r3, #1
 8014792:	444b      	add	r3, r9
 8014794:	106d      	asrs	r5, r5, #1
 8014796:	429d      	cmp	r5, r3
 8014798:	bf38      	it	cc
 801479a:	461d      	movcc	r5, r3
 801479c:	0553      	lsls	r3, r2, #21
 801479e:	d531      	bpl.n	8014804 <__ssputs_r+0xa0>
 80147a0:	4629      	mov	r1, r5
 80147a2:	f7fd fccb 	bl	801213c <_malloc_r>
 80147a6:	4606      	mov	r6, r0
 80147a8:	b950      	cbnz	r0, 80147c0 <__ssputs_r+0x5c>
 80147aa:	230c      	movs	r3, #12
 80147ac:	f8ca 3000 	str.w	r3, [sl]
 80147b0:	89a3      	ldrh	r3, [r4, #12]
 80147b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80147b6:	81a3      	strh	r3, [r4, #12]
 80147b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80147bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147c0:	6921      	ldr	r1, [r4, #16]
 80147c2:	464a      	mov	r2, r9
 80147c4:	f7fd fc83 	bl	80120ce <memcpy>
 80147c8:	89a3      	ldrh	r3, [r4, #12]
 80147ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80147ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80147d2:	81a3      	strh	r3, [r4, #12]
 80147d4:	6126      	str	r6, [r4, #16]
 80147d6:	6165      	str	r5, [r4, #20]
 80147d8:	444e      	add	r6, r9
 80147da:	eba5 0509 	sub.w	r5, r5, r9
 80147de:	6026      	str	r6, [r4, #0]
 80147e0:	60a5      	str	r5, [r4, #8]
 80147e2:	463e      	mov	r6, r7
 80147e4:	42be      	cmp	r6, r7
 80147e6:	d900      	bls.n	80147ea <__ssputs_r+0x86>
 80147e8:	463e      	mov	r6, r7
 80147ea:	6820      	ldr	r0, [r4, #0]
 80147ec:	4632      	mov	r2, r6
 80147ee:	4641      	mov	r1, r8
 80147f0:	f000 fae4 	bl	8014dbc <memmove>
 80147f4:	68a3      	ldr	r3, [r4, #8]
 80147f6:	1b9b      	subs	r3, r3, r6
 80147f8:	60a3      	str	r3, [r4, #8]
 80147fa:	6823      	ldr	r3, [r4, #0]
 80147fc:	4433      	add	r3, r6
 80147fe:	6023      	str	r3, [r4, #0]
 8014800:	2000      	movs	r0, #0
 8014802:	e7db      	b.n	80147bc <__ssputs_r+0x58>
 8014804:	462a      	mov	r2, r5
 8014806:	f000 faf3 	bl	8014df0 <_realloc_r>
 801480a:	4606      	mov	r6, r0
 801480c:	2800      	cmp	r0, #0
 801480e:	d1e1      	bne.n	80147d4 <__ssputs_r+0x70>
 8014810:	6921      	ldr	r1, [r4, #16]
 8014812:	4650      	mov	r0, sl
 8014814:	f7ff ff5a 	bl	80146cc <_free_r>
 8014818:	e7c7      	b.n	80147aa <__ssputs_r+0x46>
	...

0801481c <_svfiprintf_r>:
 801481c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014820:	4698      	mov	r8, r3
 8014822:	898b      	ldrh	r3, [r1, #12]
 8014824:	061b      	lsls	r3, r3, #24
 8014826:	b09d      	sub	sp, #116	; 0x74
 8014828:	4607      	mov	r7, r0
 801482a:	460d      	mov	r5, r1
 801482c:	4614      	mov	r4, r2
 801482e:	d50e      	bpl.n	801484e <_svfiprintf_r+0x32>
 8014830:	690b      	ldr	r3, [r1, #16]
 8014832:	b963      	cbnz	r3, 801484e <_svfiprintf_r+0x32>
 8014834:	2140      	movs	r1, #64	; 0x40
 8014836:	f7fd fc81 	bl	801213c <_malloc_r>
 801483a:	6028      	str	r0, [r5, #0]
 801483c:	6128      	str	r0, [r5, #16]
 801483e:	b920      	cbnz	r0, 801484a <_svfiprintf_r+0x2e>
 8014840:	230c      	movs	r3, #12
 8014842:	603b      	str	r3, [r7, #0]
 8014844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014848:	e0d1      	b.n	80149ee <_svfiprintf_r+0x1d2>
 801484a:	2340      	movs	r3, #64	; 0x40
 801484c:	616b      	str	r3, [r5, #20]
 801484e:	2300      	movs	r3, #0
 8014850:	9309      	str	r3, [sp, #36]	; 0x24
 8014852:	2320      	movs	r3, #32
 8014854:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014858:	f8cd 800c 	str.w	r8, [sp, #12]
 801485c:	2330      	movs	r3, #48	; 0x30
 801485e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014a08 <_svfiprintf_r+0x1ec>
 8014862:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014866:	f04f 0901 	mov.w	r9, #1
 801486a:	4623      	mov	r3, r4
 801486c:	469a      	mov	sl, r3
 801486e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014872:	b10a      	cbz	r2, 8014878 <_svfiprintf_r+0x5c>
 8014874:	2a25      	cmp	r2, #37	; 0x25
 8014876:	d1f9      	bne.n	801486c <_svfiprintf_r+0x50>
 8014878:	ebba 0b04 	subs.w	fp, sl, r4
 801487c:	d00b      	beq.n	8014896 <_svfiprintf_r+0x7a>
 801487e:	465b      	mov	r3, fp
 8014880:	4622      	mov	r2, r4
 8014882:	4629      	mov	r1, r5
 8014884:	4638      	mov	r0, r7
 8014886:	f7ff ff6d 	bl	8014764 <__ssputs_r>
 801488a:	3001      	adds	r0, #1
 801488c:	f000 80aa 	beq.w	80149e4 <_svfiprintf_r+0x1c8>
 8014890:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014892:	445a      	add	r2, fp
 8014894:	9209      	str	r2, [sp, #36]	; 0x24
 8014896:	f89a 3000 	ldrb.w	r3, [sl]
 801489a:	2b00      	cmp	r3, #0
 801489c:	f000 80a2 	beq.w	80149e4 <_svfiprintf_r+0x1c8>
 80148a0:	2300      	movs	r3, #0
 80148a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80148a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80148aa:	f10a 0a01 	add.w	sl, sl, #1
 80148ae:	9304      	str	r3, [sp, #16]
 80148b0:	9307      	str	r3, [sp, #28]
 80148b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80148b6:	931a      	str	r3, [sp, #104]	; 0x68
 80148b8:	4654      	mov	r4, sl
 80148ba:	2205      	movs	r2, #5
 80148bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148c0:	4851      	ldr	r0, [pc, #324]	; (8014a08 <_svfiprintf_r+0x1ec>)
 80148c2:	f7eb fcb5 	bl	8000230 <memchr>
 80148c6:	9a04      	ldr	r2, [sp, #16]
 80148c8:	b9d8      	cbnz	r0, 8014902 <_svfiprintf_r+0xe6>
 80148ca:	06d0      	lsls	r0, r2, #27
 80148cc:	bf44      	itt	mi
 80148ce:	2320      	movmi	r3, #32
 80148d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80148d4:	0711      	lsls	r1, r2, #28
 80148d6:	bf44      	itt	mi
 80148d8:	232b      	movmi	r3, #43	; 0x2b
 80148da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80148de:	f89a 3000 	ldrb.w	r3, [sl]
 80148e2:	2b2a      	cmp	r3, #42	; 0x2a
 80148e4:	d015      	beq.n	8014912 <_svfiprintf_r+0xf6>
 80148e6:	9a07      	ldr	r2, [sp, #28]
 80148e8:	4654      	mov	r4, sl
 80148ea:	2000      	movs	r0, #0
 80148ec:	f04f 0c0a 	mov.w	ip, #10
 80148f0:	4621      	mov	r1, r4
 80148f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80148f6:	3b30      	subs	r3, #48	; 0x30
 80148f8:	2b09      	cmp	r3, #9
 80148fa:	d94e      	bls.n	801499a <_svfiprintf_r+0x17e>
 80148fc:	b1b0      	cbz	r0, 801492c <_svfiprintf_r+0x110>
 80148fe:	9207      	str	r2, [sp, #28]
 8014900:	e014      	b.n	801492c <_svfiprintf_r+0x110>
 8014902:	eba0 0308 	sub.w	r3, r0, r8
 8014906:	fa09 f303 	lsl.w	r3, r9, r3
 801490a:	4313      	orrs	r3, r2
 801490c:	9304      	str	r3, [sp, #16]
 801490e:	46a2      	mov	sl, r4
 8014910:	e7d2      	b.n	80148b8 <_svfiprintf_r+0x9c>
 8014912:	9b03      	ldr	r3, [sp, #12]
 8014914:	1d19      	adds	r1, r3, #4
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	9103      	str	r1, [sp, #12]
 801491a:	2b00      	cmp	r3, #0
 801491c:	bfbb      	ittet	lt
 801491e:	425b      	neglt	r3, r3
 8014920:	f042 0202 	orrlt.w	r2, r2, #2
 8014924:	9307      	strge	r3, [sp, #28]
 8014926:	9307      	strlt	r3, [sp, #28]
 8014928:	bfb8      	it	lt
 801492a:	9204      	strlt	r2, [sp, #16]
 801492c:	7823      	ldrb	r3, [r4, #0]
 801492e:	2b2e      	cmp	r3, #46	; 0x2e
 8014930:	d10c      	bne.n	801494c <_svfiprintf_r+0x130>
 8014932:	7863      	ldrb	r3, [r4, #1]
 8014934:	2b2a      	cmp	r3, #42	; 0x2a
 8014936:	d135      	bne.n	80149a4 <_svfiprintf_r+0x188>
 8014938:	9b03      	ldr	r3, [sp, #12]
 801493a:	1d1a      	adds	r2, r3, #4
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	9203      	str	r2, [sp, #12]
 8014940:	2b00      	cmp	r3, #0
 8014942:	bfb8      	it	lt
 8014944:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014948:	3402      	adds	r4, #2
 801494a:	9305      	str	r3, [sp, #20]
 801494c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014a18 <_svfiprintf_r+0x1fc>
 8014950:	7821      	ldrb	r1, [r4, #0]
 8014952:	2203      	movs	r2, #3
 8014954:	4650      	mov	r0, sl
 8014956:	f7eb fc6b 	bl	8000230 <memchr>
 801495a:	b140      	cbz	r0, 801496e <_svfiprintf_r+0x152>
 801495c:	2340      	movs	r3, #64	; 0x40
 801495e:	eba0 000a 	sub.w	r0, r0, sl
 8014962:	fa03 f000 	lsl.w	r0, r3, r0
 8014966:	9b04      	ldr	r3, [sp, #16]
 8014968:	4303      	orrs	r3, r0
 801496a:	3401      	adds	r4, #1
 801496c:	9304      	str	r3, [sp, #16]
 801496e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014972:	4826      	ldr	r0, [pc, #152]	; (8014a0c <_svfiprintf_r+0x1f0>)
 8014974:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014978:	2206      	movs	r2, #6
 801497a:	f7eb fc59 	bl	8000230 <memchr>
 801497e:	2800      	cmp	r0, #0
 8014980:	d038      	beq.n	80149f4 <_svfiprintf_r+0x1d8>
 8014982:	4b23      	ldr	r3, [pc, #140]	; (8014a10 <_svfiprintf_r+0x1f4>)
 8014984:	bb1b      	cbnz	r3, 80149ce <_svfiprintf_r+0x1b2>
 8014986:	9b03      	ldr	r3, [sp, #12]
 8014988:	3307      	adds	r3, #7
 801498a:	f023 0307 	bic.w	r3, r3, #7
 801498e:	3308      	adds	r3, #8
 8014990:	9303      	str	r3, [sp, #12]
 8014992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014994:	4433      	add	r3, r6
 8014996:	9309      	str	r3, [sp, #36]	; 0x24
 8014998:	e767      	b.n	801486a <_svfiprintf_r+0x4e>
 801499a:	fb0c 3202 	mla	r2, ip, r2, r3
 801499e:	460c      	mov	r4, r1
 80149a0:	2001      	movs	r0, #1
 80149a2:	e7a5      	b.n	80148f0 <_svfiprintf_r+0xd4>
 80149a4:	2300      	movs	r3, #0
 80149a6:	3401      	adds	r4, #1
 80149a8:	9305      	str	r3, [sp, #20]
 80149aa:	4619      	mov	r1, r3
 80149ac:	f04f 0c0a 	mov.w	ip, #10
 80149b0:	4620      	mov	r0, r4
 80149b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80149b6:	3a30      	subs	r2, #48	; 0x30
 80149b8:	2a09      	cmp	r2, #9
 80149ba:	d903      	bls.n	80149c4 <_svfiprintf_r+0x1a8>
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d0c5      	beq.n	801494c <_svfiprintf_r+0x130>
 80149c0:	9105      	str	r1, [sp, #20]
 80149c2:	e7c3      	b.n	801494c <_svfiprintf_r+0x130>
 80149c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80149c8:	4604      	mov	r4, r0
 80149ca:	2301      	movs	r3, #1
 80149cc:	e7f0      	b.n	80149b0 <_svfiprintf_r+0x194>
 80149ce:	ab03      	add	r3, sp, #12
 80149d0:	9300      	str	r3, [sp, #0]
 80149d2:	462a      	mov	r2, r5
 80149d4:	4b0f      	ldr	r3, [pc, #60]	; (8014a14 <_svfiprintf_r+0x1f8>)
 80149d6:	a904      	add	r1, sp, #16
 80149d8:	4638      	mov	r0, r7
 80149da:	f7fd fcc3 	bl	8012364 <_printf_float>
 80149de:	1c42      	adds	r2, r0, #1
 80149e0:	4606      	mov	r6, r0
 80149e2:	d1d6      	bne.n	8014992 <_svfiprintf_r+0x176>
 80149e4:	89ab      	ldrh	r3, [r5, #12]
 80149e6:	065b      	lsls	r3, r3, #25
 80149e8:	f53f af2c 	bmi.w	8014844 <_svfiprintf_r+0x28>
 80149ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80149ee:	b01d      	add	sp, #116	; 0x74
 80149f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149f4:	ab03      	add	r3, sp, #12
 80149f6:	9300      	str	r3, [sp, #0]
 80149f8:	462a      	mov	r2, r5
 80149fa:	4b06      	ldr	r3, [pc, #24]	; (8014a14 <_svfiprintf_r+0x1f8>)
 80149fc:	a904      	add	r1, sp, #16
 80149fe:	4638      	mov	r0, r7
 8014a00:	f7fd ff54 	bl	80128ac <_printf_i>
 8014a04:	e7eb      	b.n	80149de <_svfiprintf_r+0x1c2>
 8014a06:	bf00      	nop
 8014a08:	080155ac 	.word	0x080155ac
 8014a0c:	080155b6 	.word	0x080155b6
 8014a10:	08012365 	.word	0x08012365
 8014a14:	08014765 	.word	0x08014765
 8014a18:	080155b2 	.word	0x080155b2

08014a1c <__sfputc_r>:
 8014a1c:	6893      	ldr	r3, [r2, #8]
 8014a1e:	3b01      	subs	r3, #1
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	b410      	push	{r4}
 8014a24:	6093      	str	r3, [r2, #8]
 8014a26:	da08      	bge.n	8014a3a <__sfputc_r+0x1e>
 8014a28:	6994      	ldr	r4, [r2, #24]
 8014a2a:	42a3      	cmp	r3, r4
 8014a2c:	db01      	blt.n	8014a32 <__sfputc_r+0x16>
 8014a2e:	290a      	cmp	r1, #10
 8014a30:	d103      	bne.n	8014a3a <__sfputc_r+0x1e>
 8014a32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a36:	f7fe b9ff 	b.w	8012e38 <__swbuf_r>
 8014a3a:	6813      	ldr	r3, [r2, #0]
 8014a3c:	1c58      	adds	r0, r3, #1
 8014a3e:	6010      	str	r0, [r2, #0]
 8014a40:	7019      	strb	r1, [r3, #0]
 8014a42:	4608      	mov	r0, r1
 8014a44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a48:	4770      	bx	lr

08014a4a <__sfputs_r>:
 8014a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a4c:	4606      	mov	r6, r0
 8014a4e:	460f      	mov	r7, r1
 8014a50:	4614      	mov	r4, r2
 8014a52:	18d5      	adds	r5, r2, r3
 8014a54:	42ac      	cmp	r4, r5
 8014a56:	d101      	bne.n	8014a5c <__sfputs_r+0x12>
 8014a58:	2000      	movs	r0, #0
 8014a5a:	e007      	b.n	8014a6c <__sfputs_r+0x22>
 8014a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a60:	463a      	mov	r2, r7
 8014a62:	4630      	mov	r0, r6
 8014a64:	f7ff ffda 	bl	8014a1c <__sfputc_r>
 8014a68:	1c43      	adds	r3, r0, #1
 8014a6a:	d1f3      	bne.n	8014a54 <__sfputs_r+0xa>
 8014a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014a70 <_vfiprintf_r>:
 8014a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a74:	460d      	mov	r5, r1
 8014a76:	b09d      	sub	sp, #116	; 0x74
 8014a78:	4614      	mov	r4, r2
 8014a7a:	4698      	mov	r8, r3
 8014a7c:	4606      	mov	r6, r0
 8014a7e:	b118      	cbz	r0, 8014a88 <_vfiprintf_r+0x18>
 8014a80:	6983      	ldr	r3, [r0, #24]
 8014a82:	b90b      	cbnz	r3, 8014a88 <_vfiprintf_r+0x18>
 8014a84:	f7fd fa5e 	bl	8011f44 <__sinit>
 8014a88:	4b89      	ldr	r3, [pc, #548]	; (8014cb0 <_vfiprintf_r+0x240>)
 8014a8a:	429d      	cmp	r5, r3
 8014a8c:	d11b      	bne.n	8014ac6 <_vfiprintf_r+0x56>
 8014a8e:	6875      	ldr	r5, [r6, #4]
 8014a90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a92:	07d9      	lsls	r1, r3, #31
 8014a94:	d405      	bmi.n	8014aa2 <_vfiprintf_r+0x32>
 8014a96:	89ab      	ldrh	r3, [r5, #12]
 8014a98:	059a      	lsls	r2, r3, #22
 8014a9a:	d402      	bmi.n	8014aa2 <_vfiprintf_r+0x32>
 8014a9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a9e:	f7fd fb14 	bl	80120ca <__retarget_lock_acquire_recursive>
 8014aa2:	89ab      	ldrh	r3, [r5, #12]
 8014aa4:	071b      	lsls	r3, r3, #28
 8014aa6:	d501      	bpl.n	8014aac <_vfiprintf_r+0x3c>
 8014aa8:	692b      	ldr	r3, [r5, #16]
 8014aaa:	b9eb      	cbnz	r3, 8014ae8 <_vfiprintf_r+0x78>
 8014aac:	4629      	mov	r1, r5
 8014aae:	4630      	mov	r0, r6
 8014ab0:	f7fe fa26 	bl	8012f00 <__swsetup_r>
 8014ab4:	b1c0      	cbz	r0, 8014ae8 <_vfiprintf_r+0x78>
 8014ab6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014ab8:	07dc      	lsls	r4, r3, #31
 8014aba:	d50e      	bpl.n	8014ada <_vfiprintf_r+0x6a>
 8014abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014ac0:	b01d      	add	sp, #116	; 0x74
 8014ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ac6:	4b7b      	ldr	r3, [pc, #492]	; (8014cb4 <_vfiprintf_r+0x244>)
 8014ac8:	429d      	cmp	r5, r3
 8014aca:	d101      	bne.n	8014ad0 <_vfiprintf_r+0x60>
 8014acc:	68b5      	ldr	r5, [r6, #8]
 8014ace:	e7df      	b.n	8014a90 <_vfiprintf_r+0x20>
 8014ad0:	4b79      	ldr	r3, [pc, #484]	; (8014cb8 <_vfiprintf_r+0x248>)
 8014ad2:	429d      	cmp	r5, r3
 8014ad4:	bf08      	it	eq
 8014ad6:	68f5      	ldreq	r5, [r6, #12]
 8014ad8:	e7da      	b.n	8014a90 <_vfiprintf_r+0x20>
 8014ada:	89ab      	ldrh	r3, [r5, #12]
 8014adc:	0598      	lsls	r0, r3, #22
 8014ade:	d4ed      	bmi.n	8014abc <_vfiprintf_r+0x4c>
 8014ae0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014ae2:	f7fd faf3 	bl	80120cc <__retarget_lock_release_recursive>
 8014ae6:	e7e9      	b.n	8014abc <_vfiprintf_r+0x4c>
 8014ae8:	2300      	movs	r3, #0
 8014aea:	9309      	str	r3, [sp, #36]	; 0x24
 8014aec:	2320      	movs	r3, #32
 8014aee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014af2:	f8cd 800c 	str.w	r8, [sp, #12]
 8014af6:	2330      	movs	r3, #48	; 0x30
 8014af8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014cbc <_vfiprintf_r+0x24c>
 8014afc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014b00:	f04f 0901 	mov.w	r9, #1
 8014b04:	4623      	mov	r3, r4
 8014b06:	469a      	mov	sl, r3
 8014b08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b0c:	b10a      	cbz	r2, 8014b12 <_vfiprintf_r+0xa2>
 8014b0e:	2a25      	cmp	r2, #37	; 0x25
 8014b10:	d1f9      	bne.n	8014b06 <_vfiprintf_r+0x96>
 8014b12:	ebba 0b04 	subs.w	fp, sl, r4
 8014b16:	d00b      	beq.n	8014b30 <_vfiprintf_r+0xc0>
 8014b18:	465b      	mov	r3, fp
 8014b1a:	4622      	mov	r2, r4
 8014b1c:	4629      	mov	r1, r5
 8014b1e:	4630      	mov	r0, r6
 8014b20:	f7ff ff93 	bl	8014a4a <__sfputs_r>
 8014b24:	3001      	adds	r0, #1
 8014b26:	f000 80aa 	beq.w	8014c7e <_vfiprintf_r+0x20e>
 8014b2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b2c:	445a      	add	r2, fp
 8014b2e:	9209      	str	r2, [sp, #36]	; 0x24
 8014b30:	f89a 3000 	ldrb.w	r3, [sl]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	f000 80a2 	beq.w	8014c7e <_vfiprintf_r+0x20e>
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014b40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b44:	f10a 0a01 	add.w	sl, sl, #1
 8014b48:	9304      	str	r3, [sp, #16]
 8014b4a:	9307      	str	r3, [sp, #28]
 8014b4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014b50:	931a      	str	r3, [sp, #104]	; 0x68
 8014b52:	4654      	mov	r4, sl
 8014b54:	2205      	movs	r2, #5
 8014b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b5a:	4858      	ldr	r0, [pc, #352]	; (8014cbc <_vfiprintf_r+0x24c>)
 8014b5c:	f7eb fb68 	bl	8000230 <memchr>
 8014b60:	9a04      	ldr	r2, [sp, #16]
 8014b62:	b9d8      	cbnz	r0, 8014b9c <_vfiprintf_r+0x12c>
 8014b64:	06d1      	lsls	r1, r2, #27
 8014b66:	bf44      	itt	mi
 8014b68:	2320      	movmi	r3, #32
 8014b6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b6e:	0713      	lsls	r3, r2, #28
 8014b70:	bf44      	itt	mi
 8014b72:	232b      	movmi	r3, #43	; 0x2b
 8014b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b78:	f89a 3000 	ldrb.w	r3, [sl]
 8014b7c:	2b2a      	cmp	r3, #42	; 0x2a
 8014b7e:	d015      	beq.n	8014bac <_vfiprintf_r+0x13c>
 8014b80:	9a07      	ldr	r2, [sp, #28]
 8014b82:	4654      	mov	r4, sl
 8014b84:	2000      	movs	r0, #0
 8014b86:	f04f 0c0a 	mov.w	ip, #10
 8014b8a:	4621      	mov	r1, r4
 8014b8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b90:	3b30      	subs	r3, #48	; 0x30
 8014b92:	2b09      	cmp	r3, #9
 8014b94:	d94e      	bls.n	8014c34 <_vfiprintf_r+0x1c4>
 8014b96:	b1b0      	cbz	r0, 8014bc6 <_vfiprintf_r+0x156>
 8014b98:	9207      	str	r2, [sp, #28]
 8014b9a:	e014      	b.n	8014bc6 <_vfiprintf_r+0x156>
 8014b9c:	eba0 0308 	sub.w	r3, r0, r8
 8014ba0:	fa09 f303 	lsl.w	r3, r9, r3
 8014ba4:	4313      	orrs	r3, r2
 8014ba6:	9304      	str	r3, [sp, #16]
 8014ba8:	46a2      	mov	sl, r4
 8014baa:	e7d2      	b.n	8014b52 <_vfiprintf_r+0xe2>
 8014bac:	9b03      	ldr	r3, [sp, #12]
 8014bae:	1d19      	adds	r1, r3, #4
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	9103      	str	r1, [sp, #12]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	bfbb      	ittet	lt
 8014bb8:	425b      	neglt	r3, r3
 8014bba:	f042 0202 	orrlt.w	r2, r2, #2
 8014bbe:	9307      	strge	r3, [sp, #28]
 8014bc0:	9307      	strlt	r3, [sp, #28]
 8014bc2:	bfb8      	it	lt
 8014bc4:	9204      	strlt	r2, [sp, #16]
 8014bc6:	7823      	ldrb	r3, [r4, #0]
 8014bc8:	2b2e      	cmp	r3, #46	; 0x2e
 8014bca:	d10c      	bne.n	8014be6 <_vfiprintf_r+0x176>
 8014bcc:	7863      	ldrb	r3, [r4, #1]
 8014bce:	2b2a      	cmp	r3, #42	; 0x2a
 8014bd0:	d135      	bne.n	8014c3e <_vfiprintf_r+0x1ce>
 8014bd2:	9b03      	ldr	r3, [sp, #12]
 8014bd4:	1d1a      	adds	r2, r3, #4
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	9203      	str	r2, [sp, #12]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	bfb8      	it	lt
 8014bde:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014be2:	3402      	adds	r4, #2
 8014be4:	9305      	str	r3, [sp, #20]
 8014be6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014ccc <_vfiprintf_r+0x25c>
 8014bea:	7821      	ldrb	r1, [r4, #0]
 8014bec:	2203      	movs	r2, #3
 8014bee:	4650      	mov	r0, sl
 8014bf0:	f7eb fb1e 	bl	8000230 <memchr>
 8014bf4:	b140      	cbz	r0, 8014c08 <_vfiprintf_r+0x198>
 8014bf6:	2340      	movs	r3, #64	; 0x40
 8014bf8:	eba0 000a 	sub.w	r0, r0, sl
 8014bfc:	fa03 f000 	lsl.w	r0, r3, r0
 8014c00:	9b04      	ldr	r3, [sp, #16]
 8014c02:	4303      	orrs	r3, r0
 8014c04:	3401      	adds	r4, #1
 8014c06:	9304      	str	r3, [sp, #16]
 8014c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c0c:	482c      	ldr	r0, [pc, #176]	; (8014cc0 <_vfiprintf_r+0x250>)
 8014c0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014c12:	2206      	movs	r2, #6
 8014c14:	f7eb fb0c 	bl	8000230 <memchr>
 8014c18:	2800      	cmp	r0, #0
 8014c1a:	d03f      	beq.n	8014c9c <_vfiprintf_r+0x22c>
 8014c1c:	4b29      	ldr	r3, [pc, #164]	; (8014cc4 <_vfiprintf_r+0x254>)
 8014c1e:	bb1b      	cbnz	r3, 8014c68 <_vfiprintf_r+0x1f8>
 8014c20:	9b03      	ldr	r3, [sp, #12]
 8014c22:	3307      	adds	r3, #7
 8014c24:	f023 0307 	bic.w	r3, r3, #7
 8014c28:	3308      	adds	r3, #8
 8014c2a:	9303      	str	r3, [sp, #12]
 8014c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c2e:	443b      	add	r3, r7
 8014c30:	9309      	str	r3, [sp, #36]	; 0x24
 8014c32:	e767      	b.n	8014b04 <_vfiprintf_r+0x94>
 8014c34:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c38:	460c      	mov	r4, r1
 8014c3a:	2001      	movs	r0, #1
 8014c3c:	e7a5      	b.n	8014b8a <_vfiprintf_r+0x11a>
 8014c3e:	2300      	movs	r3, #0
 8014c40:	3401      	adds	r4, #1
 8014c42:	9305      	str	r3, [sp, #20]
 8014c44:	4619      	mov	r1, r3
 8014c46:	f04f 0c0a 	mov.w	ip, #10
 8014c4a:	4620      	mov	r0, r4
 8014c4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c50:	3a30      	subs	r2, #48	; 0x30
 8014c52:	2a09      	cmp	r2, #9
 8014c54:	d903      	bls.n	8014c5e <_vfiprintf_r+0x1ee>
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d0c5      	beq.n	8014be6 <_vfiprintf_r+0x176>
 8014c5a:	9105      	str	r1, [sp, #20]
 8014c5c:	e7c3      	b.n	8014be6 <_vfiprintf_r+0x176>
 8014c5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c62:	4604      	mov	r4, r0
 8014c64:	2301      	movs	r3, #1
 8014c66:	e7f0      	b.n	8014c4a <_vfiprintf_r+0x1da>
 8014c68:	ab03      	add	r3, sp, #12
 8014c6a:	9300      	str	r3, [sp, #0]
 8014c6c:	462a      	mov	r2, r5
 8014c6e:	4b16      	ldr	r3, [pc, #88]	; (8014cc8 <_vfiprintf_r+0x258>)
 8014c70:	a904      	add	r1, sp, #16
 8014c72:	4630      	mov	r0, r6
 8014c74:	f7fd fb76 	bl	8012364 <_printf_float>
 8014c78:	4607      	mov	r7, r0
 8014c7a:	1c78      	adds	r0, r7, #1
 8014c7c:	d1d6      	bne.n	8014c2c <_vfiprintf_r+0x1bc>
 8014c7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014c80:	07d9      	lsls	r1, r3, #31
 8014c82:	d405      	bmi.n	8014c90 <_vfiprintf_r+0x220>
 8014c84:	89ab      	ldrh	r3, [r5, #12]
 8014c86:	059a      	lsls	r2, r3, #22
 8014c88:	d402      	bmi.n	8014c90 <_vfiprintf_r+0x220>
 8014c8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014c8c:	f7fd fa1e 	bl	80120cc <__retarget_lock_release_recursive>
 8014c90:	89ab      	ldrh	r3, [r5, #12]
 8014c92:	065b      	lsls	r3, r3, #25
 8014c94:	f53f af12 	bmi.w	8014abc <_vfiprintf_r+0x4c>
 8014c98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014c9a:	e711      	b.n	8014ac0 <_vfiprintf_r+0x50>
 8014c9c:	ab03      	add	r3, sp, #12
 8014c9e:	9300      	str	r3, [sp, #0]
 8014ca0:	462a      	mov	r2, r5
 8014ca2:	4b09      	ldr	r3, [pc, #36]	; (8014cc8 <_vfiprintf_r+0x258>)
 8014ca4:	a904      	add	r1, sp, #16
 8014ca6:	4630      	mov	r0, r6
 8014ca8:	f7fd fe00 	bl	80128ac <_printf_i>
 8014cac:	e7e4      	b.n	8014c78 <_vfiprintf_r+0x208>
 8014cae:	bf00      	nop
 8014cb0:	0801534c 	.word	0x0801534c
 8014cb4:	0801536c 	.word	0x0801536c
 8014cb8:	0801532c 	.word	0x0801532c
 8014cbc:	080155ac 	.word	0x080155ac
 8014cc0:	080155b6 	.word	0x080155b6
 8014cc4:	08012365 	.word	0x08012365
 8014cc8:	08014a4b 	.word	0x08014a4b
 8014ccc:	080155b2 	.word	0x080155b2

08014cd0 <_read_r>:
 8014cd0:	b538      	push	{r3, r4, r5, lr}
 8014cd2:	4d07      	ldr	r5, [pc, #28]	; (8014cf0 <_read_r+0x20>)
 8014cd4:	4604      	mov	r4, r0
 8014cd6:	4608      	mov	r0, r1
 8014cd8:	4611      	mov	r1, r2
 8014cda:	2200      	movs	r2, #0
 8014cdc:	602a      	str	r2, [r5, #0]
 8014cde:	461a      	mov	r2, r3
 8014ce0:	f7ed f8de 	bl	8001ea0 <_read>
 8014ce4:	1c43      	adds	r3, r0, #1
 8014ce6:	d102      	bne.n	8014cee <_read_r+0x1e>
 8014ce8:	682b      	ldr	r3, [r5, #0]
 8014cea:	b103      	cbz	r3, 8014cee <_read_r+0x1e>
 8014cec:	6023      	str	r3, [r4, #0]
 8014cee:	bd38      	pop	{r3, r4, r5, pc}
 8014cf0:	200034a8 	.word	0x200034a8

08014cf4 <__assert_func>:
 8014cf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014cf6:	4614      	mov	r4, r2
 8014cf8:	461a      	mov	r2, r3
 8014cfa:	4b09      	ldr	r3, [pc, #36]	; (8014d20 <__assert_func+0x2c>)
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	4605      	mov	r5, r0
 8014d00:	68d8      	ldr	r0, [r3, #12]
 8014d02:	b14c      	cbz	r4, 8014d18 <__assert_func+0x24>
 8014d04:	4b07      	ldr	r3, [pc, #28]	; (8014d24 <__assert_func+0x30>)
 8014d06:	9100      	str	r1, [sp, #0]
 8014d08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014d0c:	4906      	ldr	r1, [pc, #24]	; (8014d28 <__assert_func+0x34>)
 8014d0e:	462b      	mov	r3, r5
 8014d10:	f000 f80e 	bl	8014d30 <fiprintf>
 8014d14:	f000 f8a8 	bl	8014e68 <abort>
 8014d18:	4b04      	ldr	r3, [pc, #16]	; (8014d2c <__assert_func+0x38>)
 8014d1a:	461c      	mov	r4, r3
 8014d1c:	e7f3      	b.n	8014d06 <__assert_func+0x12>
 8014d1e:	bf00      	nop
 8014d20:	20000188 	.word	0x20000188
 8014d24:	080155bd 	.word	0x080155bd
 8014d28:	080155ca 	.word	0x080155ca
 8014d2c:	080155f8 	.word	0x080155f8

08014d30 <fiprintf>:
 8014d30:	b40e      	push	{r1, r2, r3}
 8014d32:	b503      	push	{r0, r1, lr}
 8014d34:	4601      	mov	r1, r0
 8014d36:	ab03      	add	r3, sp, #12
 8014d38:	4805      	ldr	r0, [pc, #20]	; (8014d50 <fiprintf+0x20>)
 8014d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d3e:	6800      	ldr	r0, [r0, #0]
 8014d40:	9301      	str	r3, [sp, #4]
 8014d42:	f7ff fe95 	bl	8014a70 <_vfiprintf_r>
 8014d46:	b002      	add	sp, #8
 8014d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8014d4c:	b003      	add	sp, #12
 8014d4e:	4770      	bx	lr
 8014d50:	20000188 	.word	0x20000188

08014d54 <_fstat_r>:
 8014d54:	b538      	push	{r3, r4, r5, lr}
 8014d56:	4d07      	ldr	r5, [pc, #28]	; (8014d74 <_fstat_r+0x20>)
 8014d58:	2300      	movs	r3, #0
 8014d5a:	4604      	mov	r4, r0
 8014d5c:	4608      	mov	r0, r1
 8014d5e:	4611      	mov	r1, r2
 8014d60:	602b      	str	r3, [r5, #0]
 8014d62:	f7ed f8e2 	bl	8001f2a <_fstat>
 8014d66:	1c43      	adds	r3, r0, #1
 8014d68:	d102      	bne.n	8014d70 <_fstat_r+0x1c>
 8014d6a:	682b      	ldr	r3, [r5, #0]
 8014d6c:	b103      	cbz	r3, 8014d70 <_fstat_r+0x1c>
 8014d6e:	6023      	str	r3, [r4, #0]
 8014d70:	bd38      	pop	{r3, r4, r5, pc}
 8014d72:	bf00      	nop
 8014d74:	200034a8 	.word	0x200034a8

08014d78 <_isatty_r>:
 8014d78:	b538      	push	{r3, r4, r5, lr}
 8014d7a:	4d06      	ldr	r5, [pc, #24]	; (8014d94 <_isatty_r+0x1c>)
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	4604      	mov	r4, r0
 8014d80:	4608      	mov	r0, r1
 8014d82:	602b      	str	r3, [r5, #0]
 8014d84:	f7ed f8e1 	bl	8001f4a <_isatty>
 8014d88:	1c43      	adds	r3, r0, #1
 8014d8a:	d102      	bne.n	8014d92 <_isatty_r+0x1a>
 8014d8c:	682b      	ldr	r3, [r5, #0]
 8014d8e:	b103      	cbz	r3, 8014d92 <_isatty_r+0x1a>
 8014d90:	6023      	str	r3, [r4, #0]
 8014d92:	bd38      	pop	{r3, r4, r5, pc}
 8014d94:	200034a8 	.word	0x200034a8

08014d98 <__ascii_mbtowc>:
 8014d98:	b082      	sub	sp, #8
 8014d9a:	b901      	cbnz	r1, 8014d9e <__ascii_mbtowc+0x6>
 8014d9c:	a901      	add	r1, sp, #4
 8014d9e:	b142      	cbz	r2, 8014db2 <__ascii_mbtowc+0x1a>
 8014da0:	b14b      	cbz	r3, 8014db6 <__ascii_mbtowc+0x1e>
 8014da2:	7813      	ldrb	r3, [r2, #0]
 8014da4:	600b      	str	r3, [r1, #0]
 8014da6:	7812      	ldrb	r2, [r2, #0]
 8014da8:	1e10      	subs	r0, r2, #0
 8014daa:	bf18      	it	ne
 8014dac:	2001      	movne	r0, #1
 8014dae:	b002      	add	sp, #8
 8014db0:	4770      	bx	lr
 8014db2:	4610      	mov	r0, r2
 8014db4:	e7fb      	b.n	8014dae <__ascii_mbtowc+0x16>
 8014db6:	f06f 0001 	mvn.w	r0, #1
 8014dba:	e7f8      	b.n	8014dae <__ascii_mbtowc+0x16>

08014dbc <memmove>:
 8014dbc:	4288      	cmp	r0, r1
 8014dbe:	b510      	push	{r4, lr}
 8014dc0:	eb01 0402 	add.w	r4, r1, r2
 8014dc4:	d902      	bls.n	8014dcc <memmove+0x10>
 8014dc6:	4284      	cmp	r4, r0
 8014dc8:	4623      	mov	r3, r4
 8014dca:	d807      	bhi.n	8014ddc <memmove+0x20>
 8014dcc:	1e43      	subs	r3, r0, #1
 8014dce:	42a1      	cmp	r1, r4
 8014dd0:	d008      	beq.n	8014de4 <memmove+0x28>
 8014dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014dd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014dda:	e7f8      	b.n	8014dce <memmove+0x12>
 8014ddc:	4402      	add	r2, r0
 8014dde:	4601      	mov	r1, r0
 8014de0:	428a      	cmp	r2, r1
 8014de2:	d100      	bne.n	8014de6 <memmove+0x2a>
 8014de4:	bd10      	pop	{r4, pc}
 8014de6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014dea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014dee:	e7f7      	b.n	8014de0 <memmove+0x24>

08014df0 <_realloc_r>:
 8014df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014df4:	4680      	mov	r8, r0
 8014df6:	4614      	mov	r4, r2
 8014df8:	460e      	mov	r6, r1
 8014dfa:	b921      	cbnz	r1, 8014e06 <_realloc_r+0x16>
 8014dfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e00:	4611      	mov	r1, r2
 8014e02:	f7fd b99b 	b.w	801213c <_malloc_r>
 8014e06:	b92a      	cbnz	r2, 8014e14 <_realloc_r+0x24>
 8014e08:	f7ff fc60 	bl	80146cc <_free_r>
 8014e0c:	4625      	mov	r5, r4
 8014e0e:	4628      	mov	r0, r5
 8014e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e14:	f000 f82f 	bl	8014e76 <_malloc_usable_size_r>
 8014e18:	4284      	cmp	r4, r0
 8014e1a:	4607      	mov	r7, r0
 8014e1c:	d802      	bhi.n	8014e24 <_realloc_r+0x34>
 8014e1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014e22:	d812      	bhi.n	8014e4a <_realloc_r+0x5a>
 8014e24:	4621      	mov	r1, r4
 8014e26:	4640      	mov	r0, r8
 8014e28:	f7fd f988 	bl	801213c <_malloc_r>
 8014e2c:	4605      	mov	r5, r0
 8014e2e:	2800      	cmp	r0, #0
 8014e30:	d0ed      	beq.n	8014e0e <_realloc_r+0x1e>
 8014e32:	42bc      	cmp	r4, r7
 8014e34:	4622      	mov	r2, r4
 8014e36:	4631      	mov	r1, r6
 8014e38:	bf28      	it	cs
 8014e3a:	463a      	movcs	r2, r7
 8014e3c:	f7fd f947 	bl	80120ce <memcpy>
 8014e40:	4631      	mov	r1, r6
 8014e42:	4640      	mov	r0, r8
 8014e44:	f7ff fc42 	bl	80146cc <_free_r>
 8014e48:	e7e1      	b.n	8014e0e <_realloc_r+0x1e>
 8014e4a:	4635      	mov	r5, r6
 8014e4c:	e7df      	b.n	8014e0e <_realloc_r+0x1e>

08014e4e <__ascii_wctomb>:
 8014e4e:	b149      	cbz	r1, 8014e64 <__ascii_wctomb+0x16>
 8014e50:	2aff      	cmp	r2, #255	; 0xff
 8014e52:	bf85      	ittet	hi
 8014e54:	238a      	movhi	r3, #138	; 0x8a
 8014e56:	6003      	strhi	r3, [r0, #0]
 8014e58:	700a      	strbls	r2, [r1, #0]
 8014e5a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8014e5e:	bf98      	it	ls
 8014e60:	2001      	movls	r0, #1
 8014e62:	4770      	bx	lr
 8014e64:	4608      	mov	r0, r1
 8014e66:	4770      	bx	lr

08014e68 <abort>:
 8014e68:	b508      	push	{r3, lr}
 8014e6a:	2006      	movs	r0, #6
 8014e6c:	f000 f834 	bl	8014ed8 <raise>
 8014e70:	2001      	movs	r0, #1
 8014e72:	f7ed f80b 	bl	8001e8c <_exit>

08014e76 <_malloc_usable_size_r>:
 8014e76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014e7a:	1f18      	subs	r0, r3, #4
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	bfbc      	itt	lt
 8014e80:	580b      	ldrlt	r3, [r1, r0]
 8014e82:	18c0      	addlt	r0, r0, r3
 8014e84:	4770      	bx	lr

08014e86 <_raise_r>:
 8014e86:	291f      	cmp	r1, #31
 8014e88:	b538      	push	{r3, r4, r5, lr}
 8014e8a:	4604      	mov	r4, r0
 8014e8c:	460d      	mov	r5, r1
 8014e8e:	d904      	bls.n	8014e9a <_raise_r+0x14>
 8014e90:	2316      	movs	r3, #22
 8014e92:	6003      	str	r3, [r0, #0]
 8014e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014e98:	bd38      	pop	{r3, r4, r5, pc}
 8014e9a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014e9c:	b112      	cbz	r2, 8014ea4 <_raise_r+0x1e>
 8014e9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014ea2:	b94b      	cbnz	r3, 8014eb8 <_raise_r+0x32>
 8014ea4:	4620      	mov	r0, r4
 8014ea6:	f000 f831 	bl	8014f0c <_getpid_r>
 8014eaa:	462a      	mov	r2, r5
 8014eac:	4601      	mov	r1, r0
 8014eae:	4620      	mov	r0, r4
 8014eb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014eb4:	f000 b818 	b.w	8014ee8 <_kill_r>
 8014eb8:	2b01      	cmp	r3, #1
 8014eba:	d00a      	beq.n	8014ed2 <_raise_r+0x4c>
 8014ebc:	1c59      	adds	r1, r3, #1
 8014ebe:	d103      	bne.n	8014ec8 <_raise_r+0x42>
 8014ec0:	2316      	movs	r3, #22
 8014ec2:	6003      	str	r3, [r0, #0]
 8014ec4:	2001      	movs	r0, #1
 8014ec6:	e7e7      	b.n	8014e98 <_raise_r+0x12>
 8014ec8:	2400      	movs	r4, #0
 8014eca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014ece:	4628      	mov	r0, r5
 8014ed0:	4798      	blx	r3
 8014ed2:	2000      	movs	r0, #0
 8014ed4:	e7e0      	b.n	8014e98 <_raise_r+0x12>
	...

08014ed8 <raise>:
 8014ed8:	4b02      	ldr	r3, [pc, #8]	; (8014ee4 <raise+0xc>)
 8014eda:	4601      	mov	r1, r0
 8014edc:	6818      	ldr	r0, [r3, #0]
 8014ede:	f7ff bfd2 	b.w	8014e86 <_raise_r>
 8014ee2:	bf00      	nop
 8014ee4:	20000188 	.word	0x20000188

08014ee8 <_kill_r>:
 8014ee8:	b538      	push	{r3, r4, r5, lr}
 8014eea:	4d07      	ldr	r5, [pc, #28]	; (8014f08 <_kill_r+0x20>)
 8014eec:	2300      	movs	r3, #0
 8014eee:	4604      	mov	r4, r0
 8014ef0:	4608      	mov	r0, r1
 8014ef2:	4611      	mov	r1, r2
 8014ef4:	602b      	str	r3, [r5, #0]
 8014ef6:	f7ec ffb9 	bl	8001e6c <_kill>
 8014efa:	1c43      	adds	r3, r0, #1
 8014efc:	d102      	bne.n	8014f04 <_kill_r+0x1c>
 8014efe:	682b      	ldr	r3, [r5, #0]
 8014f00:	b103      	cbz	r3, 8014f04 <_kill_r+0x1c>
 8014f02:	6023      	str	r3, [r4, #0]
 8014f04:	bd38      	pop	{r3, r4, r5, pc}
 8014f06:	bf00      	nop
 8014f08:	200034a8 	.word	0x200034a8

08014f0c <_getpid_r>:
 8014f0c:	f7ec bfa6 	b.w	8001e5c <_getpid>

08014f10 <_init>:
 8014f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f12:	bf00      	nop
 8014f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f16:	bc08      	pop	{r3}
 8014f18:	469e      	mov	lr, r3
 8014f1a:	4770      	bx	lr

08014f1c <_fini>:
 8014f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f1e:	bf00      	nop
 8014f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f22:	bc08      	pop	{r3}
 8014f24:	469e      	mov	lr, r3
 8014f26:	4770      	bx	lr
