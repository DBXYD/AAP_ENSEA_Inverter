
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091dc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  080093bc  080093bc  000193bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009520  08009520  00020124  2**0
                  CONTENTS
  4 .ARM          00000008  08009520  08009520  00019520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009528  08009528  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009528  08009528  00019528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800952c  0800952c  0001952c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  08009530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000124  08009654  00020124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  08009654  00020630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a0fb  00000000  00000000  00020197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035ff  00000000  00000000  0003a292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f8  00000000  00000000  0003d898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010fc  00000000  00000000  0003ee90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a127  00000000  00000000  0003ff8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019f70  00000000  00000000  0006a0b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001145c4  00000000  00000000  00084023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006848  00000000  00000000  001985e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0019ee30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000124 	.word	0x20000124
 80001fc:	00000000 	.word	0x00000000
 8000200:	080093a4 	.word	0x080093a4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000128 	.word	0x20000128
 800021c:	080093a4 	.word	0x080093a4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	; 0x30
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2220      	movs	r2, #32
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f007 fe18 	bl	800823a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060a:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800060c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000610:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000612:	4b30      	ldr	r3, [pc, #192]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000614:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000618:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061a:	4b2e      	ldr	r3, [pc, #184]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000620:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000626:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000634:	2204      	movs	r2, #4
 8000636:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800063a:	2200      	movs	r2, #0
 800063c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800063e:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000646:	2201      	movs	r2, #1
 8000648:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800065a:	2200      	movs	r2, #0
 800065c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000666:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000668:	2200      	movs	r2, #0
 800066a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800066e:	2200      	movs	r2, #0
 8000670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000674:	4817      	ldr	r0, [pc, #92]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000676:	f001 fb0b 	bl	8001c90 <HAL_ADC_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000680:	f000 faac 	bl	8000bdc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068c:	4619      	mov	r1, r3
 800068e:	4811      	ldr	r0, [pc, #68]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000690:	f002 f926 	bl	80028e0 <HAL_ADCEx_MultiModeConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800069a:	f000 fa9f 	bl	8000bdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_ADC1_Init+0xec>)
 80006a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a2:	2306      	movs	r3, #6
 80006a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006aa:	237f      	movs	r3, #127	; 0x7f
 80006ac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ae:	2304      	movs	r3, #4
 80006b0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	4619      	mov	r1, r3
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <MX_ADC1_Init+0xe8>)
 80006bc:	f001 fcaa 	bl	8002014 <HAL_ADC_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006c6:	f000 fa89 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	3730      	adds	r7, #48	; 0x30
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000140 	.word	0x20000140
 80006d8:	21800100 	.word	0x21800100

080006dc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2220      	movs	r2, #32
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f007 fda6 	bl	800823a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006ee:	4b2b      	ldr	r3, [pc, #172]	; (800079c <MX_ADC2_Init+0xc0>)
 80006f0:	4a2b      	ldr	r2, [pc, #172]	; (80007a0 <MX_ADC2_Init+0xc4>)
 80006f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f4:	4b29      	ldr	r3, [pc, #164]	; (800079c <MX_ADC2_Init+0xc0>)
 80006f6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006fa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006fc:	4b27      	ldr	r3, [pc, #156]	; (800079c <MX_ADC2_Init+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000702:	4b26      	ldr	r3, [pc, #152]	; (800079c <MX_ADC2_Init+0xc0>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <MX_ADC2_Init+0xc0>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <MX_ADC2_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000714:	4b21      	ldr	r3, [pc, #132]	; (800079c <MX_ADC2_Init+0xc0>)
 8000716:	2204      	movs	r2, #4
 8000718:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <MX_ADC2_Init+0xc0>)
 800071c:	2200      	movs	r2, #0
 800071e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <MX_ADC2_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_ADC2_Init+0xc0>)
 8000728:	2201      	movs	r2, #1
 800072a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_ADC2_Init+0xc0>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_ADC2_Init+0xc0>)
 800073c:	2200      	movs	r2, #0
 800073e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_ADC2_Init+0xc0>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_ADC2_Init+0xc0>)
 800074a:	2200      	movs	r2, #0
 800074c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_ADC2_Init+0xc0>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000756:	4811      	ldr	r0, [pc, #68]	; (800079c <MX_ADC2_Init+0xc0>)
 8000758:	f001 fa9a 	bl	8001c90 <HAL_ADC_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000762:	f000 fa3b 	bl	8000bdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_ADC2_Init+0xc8>)
 8000768:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076a:	2306      	movs	r3, #6
 800076c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000772:	237f      	movs	r3, #127	; 0x7f
 8000774:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000776:	2304      	movs	r3, #4
 8000778:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800077e:	463b      	mov	r3, r7
 8000780:	4619      	mov	r1, r3
 8000782:	4806      	ldr	r0, [pc, #24]	; (800079c <MX_ADC2_Init+0xc0>)
 8000784:	f001 fc46 	bl	8002014 <HAL_ADC_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800078e:	f000 fa25 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	3720      	adds	r7, #32
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200001ac 	.word	0x200001ac
 80007a0:	50000100 	.word	0x50000100
 80007a4:	19200040 	.word	0x19200040

080007a8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b0a4      	sub	sp, #144	; 0x90
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c4:	2254      	movs	r2, #84	; 0x54
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f007 fd36 	bl	800823a <memset>
  if(adcHandle->Instance==ADC1)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007d6:	d174      	bne.n	80008c2 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007de:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007e8:	4618      	mov	r0, r3
 80007ea:	f003 faf9 	bl	8003de0 <HAL_RCCEx_PeriphCLKConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007f4:	f000 f9f2 	bl	8000bdc <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007f8:	4b63      	ldr	r3, [pc, #396]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	4a62      	ldr	r2, [pc, #392]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 8000800:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000802:	4b61      	ldr	r3, [pc, #388]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d10b      	bne.n	8000822 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800080a:	4b60      	ldr	r3, [pc, #384]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a5f      	ldr	r2, [pc, #380]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000810:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b5d      	ldr	r3, [pc, #372]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
 8000820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b5a      	ldr	r3, [pc, #360]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a59      	ldr	r2, [pc, #356]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b57      	ldr	r3, [pc, #348]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	623b      	str	r3, [r7, #32]
 8000838:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b54      	ldr	r3, [pc, #336]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a53      	ldr	r2, [pc, #332]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b51      	ldr	r3, [pc, #324]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	61fb      	str	r3, [r7, #28]
 8000850:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b4e      	ldr	r3, [pc, #312]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a4d      	ldr	r2, [pc, #308]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b4b      	ldr	r3, [pc, #300]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	61bb      	str	r3, [r7, #24]
 8000868:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800086a:	2304      	movs	r3, #4
 800086c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086e:	2303      	movs	r3, #3
 8000870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800087e:	4619      	mov	r1, r3
 8000880:	4843      	ldr	r0, [pc, #268]	; (8000990 <HAL_ADC_MspInit+0x1e8>)
 8000882:	f002 fad5 	bl	8002e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8000886:	2302      	movs	r3, #2
 8000888:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088a:	2303      	movs	r3, #3
 800088c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800089a:	4619      	mov	r1, r3
 800089c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a0:	f002 fac6 	bl	8002e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008a4:	2303      	movs	r3, #3
 80008a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a8:	2303      	movs	r3, #3
 80008aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008b8:	4619      	mov	r1, r3
 80008ba:	4836      	ldr	r0, [pc, #216]	; (8000994 <HAL_ADC_MspInit+0x1ec>)
 80008bc:	f002 fab8 	bl	8002e30 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008c0:	e05e      	b.n	8000980 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a34      	ldr	r2, [pc, #208]	; (8000998 <HAL_ADC_MspInit+0x1f0>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d159      	bne.n	8000980 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008d2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 fa7f 	bl	8003de0 <HAL_RCCEx_PeriphCLKConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80008e8:	f000 f978 	bl	8000bdc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008ec:	4b26      	ldr	r3, [pc, #152]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	4a25      	ldr	r2, [pc, #148]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80008f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008f6:	4b24      	ldr	r3, [pc, #144]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d10b      	bne.n	8000916 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008fe:	4b23      	ldr	r3, [pc, #140]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a22      	ldr	r2, [pc, #136]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000904:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	4b1d      	ldr	r3, [pc, #116]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a1c      	ldr	r2, [pc, #112]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	4a16      	ldr	r2, [pc, #88]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000946:	230b      	movs	r3, #11
 8000948:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094a:	2303      	movs	r3, #3
 800094c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000956:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800095a:	4619      	mov	r1, r3
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <HAL_ADC_MspInit+0x1e8>)
 800095e:	f002 fa67 	bl	8002e30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000962:	2301      	movs	r3, #1
 8000964:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000966:	2303      	movs	r3, #3
 8000968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000976:	4619      	mov	r1, r3
 8000978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097c:	f002 fa58 	bl	8002e30 <HAL_GPIO_Init>
}
 8000980:	bf00      	nop
 8000982:	3790      	adds	r7, #144	; 0x90
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000218 	.word	0x20000218
 800098c:	40021000 	.word	0x40021000
 8000990:	48000800 	.word	0x48000800
 8000994:	48000400 	.word	0x48000400
 8000998:	50000100 	.word	0x50000100

0800099c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	4b3f      	ldr	r3, [pc, #252]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a3e      	ldr	r2, [pc, #248]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b3c      	ldr	r3, [pc, #240]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ca:	4b39      	ldr	r3, [pc, #228]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	4a38      	ldr	r2, [pc, #224]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009d0:	f043 0320 	orr.w	r3, r3, #32
 80009d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d6:	4b36      	ldr	r3, [pc, #216]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	f003 0320 	and.w	r3, r3, #32
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	4b33      	ldr	r3, [pc, #204]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4a32      	ldr	r2, [pc, #200]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ee:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	4a2c      	ldr	r2, [pc, #176]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a06:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4a26      	ldr	r2, [pc, #152]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2120      	movs	r1, #32
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a32:	f002 fb7f 	bl	8003134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2104      	movs	r1, #4
 8000a3a:	481e      	ldr	r0, [pc, #120]	; (8000ab4 <MX_GPIO_Init+0x118>)
 8000a3c:	f002 fb7a 	bl	8003134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4818      	ldr	r0, [pc, #96]	; (8000ab8 <MX_GPIO_Init+0x11c>)
 8000a58:	f002 f9ea 	bl	8002e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a76:	f002 f9db 	bl	8002e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <MX_GPIO_Init+0x118>)
 8000a92:	f002 f9cd 	bl	8002e30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2028      	movs	r0, #40	; 0x28
 8000a9c:	f002 f8e0 	bl	8002c60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aa0:	2028      	movs	r0, #40	; 0x28
 8000aa2:	f002 f8f7 	bl	8002c94 <HAL_NVIC_EnableIRQ>

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	48000c00 	.word	0x48000c00
 8000ab8:	48000800 	.word	0x48000800

08000abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac0:	f000 fed5 	bl	800186e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac4:	f000 f82e 	bl	8000b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac8:	f7ff ff68 	bl	800099c <MX_GPIO_Init>
  MX_ADC2_Init();
 8000acc:	f7ff fe06 	bl	80006dc <MX_ADC2_Init>
  MX_ADC1_Init();
 8000ad0:	f7ff fd8c 	bl	80005ec <MX_ADC1_Init>
  MX_TIM1_Init();
 8000ad4:	f000 fa42 	bl	8000f5c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ad8:	f000 fb08 	bl	80010ec <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000adc:	f000 fc3c 	bl	8001358 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000ae0:	f000 fc86 	bl	80013f0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	Shell_Init();
 8000ae4:	f000 fd78 	bl	80015d8 <Shell_Init>
//	Motor_Init();
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ae8:	2100      	movs	r1, #0
 8000aea:	480d      	ldr	r0, [pc, #52]	; (8000b20 <main+0x64>)
 8000aec:	f003 fcf8 	bl	80044e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000af0:	2104      	movs	r1, #4
 8000af2:	480b      	ldr	r0, [pc, #44]	; (8000b20 <main+0x64>)
 8000af4:	f003 fcf4 	bl	80044e0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000af8:	2100      	movs	r1, #0
 8000afa:	4809      	ldr	r0, [pc, #36]	; (8000b20 <main+0x64>)
 8000afc:	f004 ff8a 	bl	8005a14 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000b00:	2104      	movs	r1, #4
 8000b02:	4807      	ldr	r0, [pc, #28]	; (8000b20 <main+0x64>)
 8000b04:	f004 ff86 	bl	8005a14 <HAL_TIMEx_PWMN_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 800);
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <main+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000b10:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 223);
 8000b12:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <main+0x64>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	22df      	movs	r2, #223	; 0xdf
 8000b18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 8000b1a:	f000 fd9d 	bl	8001658 <Shell_Loop>
 8000b1e:	e7fc      	b.n	8000b1a <main+0x5e>
 8000b20:	2000026c 	.word	0x2000026c

08000b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b094      	sub	sp, #80	; 0x50
 8000b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2a:	f107 0318 	add.w	r3, r7, #24
 8000b2e:	2238      	movs	r2, #56	; 0x38
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f007 fb81 	bl	800823a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b46:	2000      	movs	r0, #0
 8000b48:	f002 fb30 	bl	80031ac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b54:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b56:	2302      	movs	r3, #2
 8000b58:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000b5e:	2306      	movs	r3, #6
 8000b60:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000b62:	2355      	movs	r3, #85	; 0x55
 8000b64:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b66:	2302      	movs	r3, #2
 8000b68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b72:	f107 0318 	add.w	r3, r7, #24
 8000b76:	4618      	mov	r0, r3
 8000b78:	f002 fbcc 	bl	8003314 <HAL_RCC_OscConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000b82:	f000 f82b 	bl	8000bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b86:	230f      	movs	r3, #15
 8000b88:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	2104      	movs	r1, #4
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f002 fed0 	bl	8003944 <HAL_RCC_ClockConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000baa:	f000 f817 	bl	8000bdc <Error_Handler>
  }
}
 8000bae:	bf00      	nop
 8000bb0:	3750      	adds	r7, #80	; 0x50
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d101      	bne.n	8000bce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bca:	f000 fe69 	bl	80018a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40001000 	.word	0x40001000

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000be4:	e7fe      	b.n	8000be4 <Error_Handler+0x8>
	...

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <HAL_MspInit+0x44>)
 8000bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <HAL_MspInit+0x44>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <HAL_MspInit+0x44>)
 8000bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <HAL_MspInit+0x44>)
 8000c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0a:	4a08      	ldr	r2, [pc, #32]	; (8000c2c <HAL_MspInit+0x44>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c10:	6593      	str	r3, [r2, #88]	; 0x58
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_MspInit+0x44>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c1e:	f002 fb69 	bl	80032f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40021000 	.word	0x40021000

08000c30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08c      	sub	sp, #48	; 0x30
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c40:	4b2c      	ldr	r3, [pc, #176]	; (8000cf4 <HAL_InitTick+0xc4>)
 8000c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c44:	4a2b      	ldr	r2, [pc, #172]	; (8000cf4 <HAL_InitTick+0xc4>)
 8000c46:	f043 0310 	orr.w	r3, r3, #16
 8000c4a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c4c:	4b29      	ldr	r3, [pc, #164]	; (8000cf4 <HAL_InitTick+0xc4>)
 8000c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c50:	f003 0310 	and.w	r3, r3, #16
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c58:	f107 020c 	add.w	r2, r7, #12
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4611      	mov	r1, r2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f003 f844 	bl	8003cf0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c68:	f003 f816 	bl	8003c98 <HAL_RCC_GetPCLK1Freq>
 8000c6c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c70:	4a21      	ldr	r2, [pc, #132]	; (8000cf8 <HAL_InitTick+0xc8>)
 8000c72:	fba2 2303 	umull	r2, r3, r2, r3
 8000c76:	0c9b      	lsrs	r3, r3, #18
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <HAL_InitTick+0xcc>)
 8000c7e:	4a20      	ldr	r2, [pc, #128]	; (8000d00 <HAL_InitTick+0xd0>)
 8000c80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <HAL_InitTick+0xcc>)
 8000c84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c88:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c8a:	4a1c      	ldr	r2, [pc, #112]	; (8000cfc <HAL_InitTick+0xcc>)
 8000c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <HAL_InitTick+0xcc>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <HAL_InitTick+0xcc>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000c9c:	4817      	ldr	r0, [pc, #92]	; (8000cfc <HAL_InitTick+0xcc>)
 8000c9e:	f003 faed 	bl	800427c <HAL_TIM_Base_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ca8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d11b      	bne.n	8000ce8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cb0:	4812      	ldr	r0, [pc, #72]	; (8000cfc <HAL_InitTick+0xcc>)
 8000cb2:	f003 fb3b 	bl	800432c <HAL_TIM_Base_Start_IT>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000cbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d111      	bne.n	8000ce8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f001 ffe5 	bl	8002c94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b0f      	cmp	r3, #15
 8000cce:	d808      	bhi.n	8000ce2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	2036      	movs	r0, #54	; 0x36
 8000cd6:	f001 ffc3 	bl	8002c60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <HAL_InitTick+0xd4>)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	e002      	b.n	8000ce8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ce8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3730      	adds	r7, #48	; 0x30
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	431bde83 	.word	0x431bde83
 8000cfc:	2000021c 	.word	0x2000021c
 8000d00:	40001000 	.word	0x40001000
 8000d04:	200000c0 	.word	0x200000c0

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <NMI_Handler+0x4>

08000d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <USART2_IRQHandler+0x10>)
 8000d66:	f005 fa07 	bl	8006178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000304 	.word	0x20000304

08000d74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <USART3_IRQHandler+0x10>)
 8000d7a:	f005 f9fd 	bl	8006178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000394 	.word	0x20000394

08000d88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000d8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d90:	f002 f9e8 	bl	8003164 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <TIM6_DAC_IRQHandler+0x10>)
 8000d9e:	f003 fcb1 	bl	8004704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000021c 	.word	0x2000021c

08000dac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return 1;
 8000db0:	2301      	movs	r3, #1
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <_kill>:

int _kill(int pid, int sig)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000dc6:	f007 fae3 	bl	8008390 <__errno>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2216      	movs	r2, #22
 8000dce:	601a      	str	r2, [r3, #0]
  return -1;
 8000dd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <_exit>:

void _exit (int status)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000de4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ffe7 	bl	8000dbc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000dee:	e7fe      	b.n	8000dee <_exit+0x12>

08000df0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	e00a      	b.n	8000e18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e02:	f3af 8000 	nop.w
 8000e06:	4601      	mov	r1, r0
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	1c5a      	adds	r2, r3, #1
 8000e0c:	60ba      	str	r2, [r7, #8]
 8000e0e:	b2ca      	uxtb	r2, r1
 8000e10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	3301      	adds	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	dbf0      	blt.n	8000e02 <_read+0x12>
  }

  return len;
 8000e20:	687b      	ldr	r3, [r7, #4]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	60f8      	str	r0, [r7, #12]
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	e009      	b.n	8000e50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	1c5a      	adds	r2, r3, #1
 8000e40:	60ba      	str	r2, [r7, #8]
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	dbf1      	blt.n	8000e3c <_write+0x12>
  }
  return len;
 8000e58:	687b      	ldr	r3, [r7, #4]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_close>:

int _close(int file)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
 8000e82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e8a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <_isatty>:

int _isatty(int file)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ea2:	2301      	movs	r3, #1
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed4:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <_sbrk+0x5c>)
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <_sbrk+0x60>)
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee0:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d102      	bne.n	8000eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <_sbrk+0x64>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <_sbrk+0x68>)
 8000eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d207      	bcs.n	8000f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000efc:	f007 fa48 	bl	8008390 <__errno>
 8000f00:	4603      	mov	r3, r0
 8000f02:	220c      	movs	r2, #12
 8000f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f0a:	e009      	b.n	8000f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f12:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <_sbrk+0x64>)
 8000f1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20020000 	.word	0x20020000
 8000f2c:	00000400 	.word	0x00000400
 8000f30:	20000268 	.word	0x20000268
 8000f34:	20000630 	.word	0x20000630

08000f38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <SystemInit+0x20>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <SystemInit+0x20>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b09c      	sub	sp, #112	; 0x70
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f62:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
 8000f8c:	615a      	str	r2, [r3, #20]
 8000f8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2234      	movs	r2, #52	; 0x34
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f007 f94f 	bl	800823a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f9c:	4b51      	ldr	r3, [pc, #324]	; (80010e4 <MX_TIM1_Init+0x188>)
 8000f9e:	4a52      	ldr	r2, [pc, #328]	; (80010e8 <MX_TIM1_Init+0x18c>)
 8000fa0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9-1;
 8000fa2:	4b50      	ldr	r3, [pc, #320]	; (80010e4 <MX_TIM1_Init+0x188>)
 8000fa4:	2208      	movs	r2, #8
 8000fa6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000fa8:	4b4e      	ldr	r3, [pc, #312]	; (80010e4 <MX_TIM1_Init+0x188>)
 8000faa:	2220      	movs	r2, #32
 8000fac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8000fae:	4b4d      	ldr	r3, [pc, #308]	; (80010e4 <MX_TIM1_Init+0x188>)
 8000fb0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000fb4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb6:	4b4b      	ldr	r3, [pc, #300]	; (80010e4 <MX_TIM1_Init+0x188>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fbc:	4b49      	ldr	r3, [pc, #292]	; (80010e4 <MX_TIM1_Init+0x188>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc2:	4b48      	ldr	r3, [pc, #288]	; (80010e4 <MX_TIM1_Init+0x188>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fc8:	4846      	ldr	r0, [pc, #280]	; (80010e4 <MX_TIM1_Init+0x188>)
 8000fca:	f003 f957 	bl	800427c <HAL_TIM_Base_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000fd4:	f7ff fe02 	bl	8000bdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fdc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fde:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	483f      	ldr	r0, [pc, #252]	; (80010e4 <MX_TIM1_Init+0x188>)
 8000fe6:	f003 fe21 	bl	8004c2c <HAL_TIM_ConfigClockSource>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ff0:	f7ff fdf4 	bl	8000bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ff4:	483b      	ldr	r0, [pc, #236]	; (80010e4 <MX_TIM1_Init+0x188>)
 8000ff6:	f003 fa11 	bl	800441c <HAL_TIM_PWM_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001000:	f7ff fdec 	bl	8000bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001004:	2300      	movs	r3, #0
 8001006:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001008:	2300      	movs	r3, #0
 800100a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001010:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001014:	4619      	mov	r1, r3
 8001016:	4833      	ldr	r0, [pc, #204]	; (80010e4 <MX_TIM1_Init+0x188>)
 8001018:	f004 fdbe 	bl	8005b98 <HAL_TIMEx_MasterConfigSynchronization>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001022:	f7ff fddb 	bl	8000bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001026:	2360      	movs	r3, #96	; 0x60
 8001028:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800102e:	2300      	movs	r3, #0
 8001030:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001032:	2300      	movs	r3, #0
 8001034:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800103e:	2300      	movs	r3, #0
 8001040:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001042:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001046:	2200      	movs	r2, #0
 8001048:	4619      	mov	r1, r3
 800104a:	4826      	ldr	r0, [pc, #152]	; (80010e4 <MX_TIM1_Init+0x188>)
 800104c:	f003 fcda 	bl	8004a04 <HAL_TIM_PWM_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001056:	f7ff fdc1 	bl	8000bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800105a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800105e:	2204      	movs	r2, #4
 8001060:	4619      	mov	r1, r3
 8001062:	4820      	ldr	r0, [pc, #128]	; (80010e4 <MX_TIM1_Init+0x188>)
 8001064:	f003 fcce 	bl	8004a04 <HAL_TIM_PWM_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800106e:	f7ff fdb5 	bl	8000bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001072:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001076:	2208      	movs	r2, #8
 8001078:	4619      	mov	r1, r3
 800107a:	481a      	ldr	r0, [pc, #104]	; (80010e4 <MX_TIM1_Init+0x188>)
 800107c:	f003 fcc2 	bl	8004a04 <HAL_TIM_PWM_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001086:	f7ff fda9 	bl	8000bdc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 8001096:	2364      	movs	r3, #100	; 0x64
 8001098:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800109e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80010ba:	2300      	movs	r3, #0
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	4619      	mov	r1, r3
 80010c6:	4807      	ldr	r0, [pc, #28]	; (80010e4 <MX_TIM1_Init+0x188>)
 80010c8:	f004 fdfc 	bl	8005cc4 <HAL_TIMEx_ConfigBreakDeadTime>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80010d2:	f7ff fd83 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010d6:	4803      	ldr	r0, [pc, #12]	; (80010e4 <MX_TIM1_Init+0x188>)
 80010d8:	f000 f8d6 	bl	8001288 <HAL_TIM_MspPostInit>

}
 80010dc:	bf00      	nop
 80010de:	3770      	adds	r7, #112	; 0x70
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	2000026c 	.word	0x2000026c
 80010e8:	40012c00 	.word	0x40012c00

080010ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80010f2:	f107 0310 	add.w	r3, r7, #16
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <MX_TIM3_Init+0x90>)
 800110c:	4a1c      	ldr	r2, [pc, #112]	; (8001180 <MX_TIM3_Init+0x94>)
 800110e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <MX_TIM3_Init+0x90>)
 8001112:	2200      	movs	r2, #0
 8001114:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <MX_TIM3_Init+0x90>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <MX_TIM3_Init+0x90>)
 800111e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001122:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <MX_TIM3_Init+0x90>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_TIM3_Init+0x90>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	4619      	mov	r1, r3
 8001146:	480d      	ldr	r0, [pc, #52]	; (800117c <MX_TIM3_Init+0x90>)
 8001148:	f004 fbb5 	bl	80058b6 <HAL_TIMEx_HallSensor_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001152:	f7ff fd43 	bl	8000bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001156:	2350      	movs	r3, #80	; 0x50
 8001158:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	4619      	mov	r1, r3
 8001162:	4806      	ldr	r0, [pc, #24]	; (800117c <MX_TIM3_Init+0x90>)
 8001164:	f004 fd18 	bl	8005b98 <HAL_TIMEx_MasterConfigSynchronization>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800116e:	f7ff fd35 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	3720      	adds	r7, #32
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200002b8 	.word	0x200002b8
 8001180:	40000400 	.word	0x40000400

08001184 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <HAL_TIM_Base_MspInit+0x38>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d10b      	bne.n	80011ae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_TIM_Base_MspInit+0x3c>)
 8001198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119a:	4a09      	ldr	r2, [pc, #36]	; (80011c0 <HAL_TIM_Base_MspInit+0x3c>)
 800119c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011a0:	6613      	str	r3, [r2, #96]	; 0x60
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <HAL_TIM_Base_MspInit+0x3c>)
 80011a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80011ae:	bf00      	nop
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40012c00 	.word	0x40012c00
 80011c0:	40021000 	.word	0x40021000

080011c4 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a26      	ldr	r2, [pc, #152]	; (800127c <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d145      	bne.n	8001272 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011e6:	4b26      	ldr	r3, [pc, #152]	; (8001280 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ea:	4a25      	ldr	r2, [pc, #148]	; (8001280 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	6593      	str	r3, [r2, #88]	; 0x58
 80011f2:	4b23      	ldr	r3, [pc, #140]	; (8001280 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	4a1f      	ldr	r2, [pc, #124]	; (8001280 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	4a19      	ldr	r2, [pc, #100]	; (8001280 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800122e:	2350      	movs	r3, #80	; 0x50
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800123e:	2302      	movs	r3, #2
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124c:	f001 fdf0 	bl	8002e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001262:	2302      	movs	r3, #2
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 800126e:	f001 fddf 	bl	8002e30 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	; 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40000400 	.word	0x40000400
 8001280:	40021000 	.word	0x40021000
 8001284:	48000800 	.word	0x48000800

08001288 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a29      	ldr	r2, [pc, #164]	; (800134c <HAL_TIM_MspPostInit+0xc4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d14b      	bne.n	8001342 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	4b29      	ldr	r3, [pc, #164]	; (8001350 <HAL_TIM_MspPostInit+0xc8>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	4a28      	ldr	r2, [pc, #160]	; (8001350 <HAL_TIM_MspPostInit+0xc8>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b6:	4b26      	ldr	r3, [pc, #152]	; (8001350 <HAL_TIM_MspPostInit+0xc8>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	4b23      	ldr	r3, [pc, #140]	; (8001350 <HAL_TIM_MspPostInit+0xc8>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	4a22      	ldr	r2, [pc, #136]	; (8001350 <HAL_TIM_MspPostInit+0xc8>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ce:	4b20      	ldr	r3, [pc, #128]	; (8001350 <HAL_TIM_MspPostInit+0xc8>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 80012da:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80012de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80012ec:	2306      	movs	r3, #6
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	4817      	ldr	r0, [pc, #92]	; (8001354 <HAL_TIM_MspPostInit+0xcc>)
 80012f8:	f001 fd9a 	bl	8002e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 80012fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800130e:	2304      	movs	r3, #4
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	4619      	mov	r1, r3
 8001318:	480e      	ldr	r0, [pc, #56]	; (8001354 <HAL_TIM_MspPostInit+0xcc>)
 800131a:	f001 fd89 	bl	8002e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 800131e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001330:	2306      	movs	r3, #6
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4619      	mov	r1, r3
 800133a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133e:	f001 fd77 	bl	8002e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	3728      	adds	r7, #40	; 0x28
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40012c00 	.word	0x40012c00
 8001350:	40021000 	.word	0x40021000
 8001354:	48000400 	.word	0x48000400

08001358 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800135c:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <MX_USART2_UART_Init+0x90>)
 800135e:	4a23      	ldr	r2, [pc, #140]	; (80013ec <MX_USART2_UART_Init+0x94>)
 8001360:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001362:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <MX_USART2_UART_Init+0x90>)
 8001364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001368:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800136a:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <MX_USART2_UART_Init+0x90>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001370:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <MX_USART2_UART_Init+0x90>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001376:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <MX_USART2_UART_Init+0x90>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800137c:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <MX_USART2_UART_Init+0x90>)
 800137e:	220c      	movs	r2, #12
 8001380:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001382:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <MX_USART2_UART_Init+0x90>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001388:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <MX_USART2_UART_Init+0x90>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800138e:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <MX_USART2_UART_Init+0x90>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <MX_USART2_UART_Init+0x90>)
 8001396:	2200      	movs	r2, #0
 8001398:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <MX_USART2_UART_Init+0x90>)
 800139c:	2200      	movs	r2, #0
 800139e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013a0:	4811      	ldr	r0, [pc, #68]	; (80013e8 <MX_USART2_UART_Init+0x90>)
 80013a2:	f004 fdac 	bl	8005efe <HAL_UART_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013ac:	f7ff fc16 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b0:	2100      	movs	r1, #0
 80013b2:	480d      	ldr	r0, [pc, #52]	; (80013e8 <MX_USART2_UART_Init+0x90>)
 80013b4:	f006 fd4f 	bl	8007e56 <HAL_UARTEx_SetTxFifoThreshold>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80013be:	f7ff fc0d 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c2:	2100      	movs	r1, #0
 80013c4:	4808      	ldr	r0, [pc, #32]	; (80013e8 <MX_USART2_UART_Init+0x90>)
 80013c6:	f006 fd84 	bl	8007ed2 <HAL_UARTEx_SetRxFifoThreshold>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80013d0:	f7ff fc04 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <MX_USART2_UART_Init+0x90>)
 80013d6:	f006 fd05 	bl	8007de4 <HAL_UARTEx_DisableFifoMode>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80013e0:	f7ff fbfc 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000304 	.word	0x20000304
 80013ec:	40004400 	.word	0x40004400

080013f0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013f4:	4b22      	ldr	r3, [pc, #136]	; (8001480 <MX_USART3_UART_Init+0x90>)
 80013f6:	4a23      	ldr	r2, [pc, #140]	; (8001484 <MX_USART3_UART_Init+0x94>)
 80013f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013fa:	4b21      	ldr	r3, [pc, #132]	; (8001480 <MX_USART3_UART_Init+0x90>)
 80013fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001400:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001402:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <MX_USART3_UART_Init+0x90>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001408:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <MX_USART3_UART_Init+0x90>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <MX_USART3_UART_Init+0x90>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001414:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <MX_USART3_UART_Init+0x90>)
 8001416:	220c      	movs	r2, #12
 8001418:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <MX_USART3_UART_Init+0x90>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <MX_USART3_UART_Init+0x90>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <MX_USART3_UART_Init+0x90>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_USART3_UART_Init+0x90>)
 800142e:	2200      	movs	r2, #0
 8001430:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <MX_USART3_UART_Init+0x90>)
 8001434:	2200      	movs	r2, #0
 8001436:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001438:	4811      	ldr	r0, [pc, #68]	; (8001480 <MX_USART3_UART_Init+0x90>)
 800143a:	f004 fd60 	bl	8005efe <HAL_UART_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001444:	f7ff fbca 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001448:	2100      	movs	r1, #0
 800144a:	480d      	ldr	r0, [pc, #52]	; (8001480 <MX_USART3_UART_Init+0x90>)
 800144c:	f006 fd03 	bl	8007e56 <HAL_UARTEx_SetTxFifoThreshold>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001456:	f7ff fbc1 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800145a:	2100      	movs	r1, #0
 800145c:	4808      	ldr	r0, [pc, #32]	; (8001480 <MX_USART3_UART_Init+0x90>)
 800145e:	f006 fd38 	bl	8007ed2 <HAL_UARTEx_SetRxFifoThreshold>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001468:	f7ff fbb8 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800146c:	4804      	ldr	r0, [pc, #16]	; (8001480 <MX_USART3_UART_Init+0x90>)
 800146e:	f006 fcb9 	bl	8007de4 <HAL_UARTEx_DisableFifoMode>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001478:	f7ff fbb0 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000394 	.word	0x20000394
 8001484:	40004800 	.word	0x40004800

08001488 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b0a0      	sub	sp, #128	; 0x80
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a0:	f107 0318 	add.w	r3, r7, #24
 80014a4:	2254      	movs	r2, #84	; 0x54
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f006 fec6 	bl	800823a <memset>
  if(uartHandle->Instance==USART2)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a45      	ldr	r2, [pc, #276]	; (80015c8 <HAL_UART_MspInit+0x140>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d13f      	bne.n	8001538 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014b8:	2302      	movs	r3, #2
 80014ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c0:	f107 0318 	add.w	r3, r7, #24
 80014c4:	4618      	mov	r0, r3
 80014c6:	f002 fc8b 	bl	8003de0 <HAL_RCCEx_PeriphCLKConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014d0:	f7ff fb84 	bl	8000bdc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014d4:	4b3d      	ldr	r3, [pc, #244]	; (80015cc <HAL_UART_MspInit+0x144>)
 80014d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d8:	4a3c      	ldr	r2, [pc, #240]	; (80015cc <HAL_UART_MspInit+0x144>)
 80014da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014de:	6593      	str	r3, [r2, #88]	; 0x58
 80014e0:	4b3a      	ldr	r3, [pc, #232]	; (80015cc <HAL_UART_MspInit+0x144>)
 80014e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	4b37      	ldr	r3, [pc, #220]	; (80015cc <HAL_UART_MspInit+0x144>)
 80014ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f0:	4a36      	ldr	r2, [pc, #216]	; (80015cc <HAL_UART_MspInit+0x144>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f8:	4b34      	ldr	r3, [pc, #208]	; (80015cc <HAL_UART_MspInit+0x144>)
 80014fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001504:	230c      	movs	r3, #12
 8001506:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001514:	2307      	movs	r3, #7
 8001516:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800151c:	4619      	mov	r1, r3
 800151e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001522:	f001 fc85 	bl	8002e30 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	2026      	movs	r0, #38	; 0x26
 800152c:	f001 fb98 	bl	8002c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001530:	2026      	movs	r0, #38	; 0x26
 8001532:	f001 fbaf 	bl	8002c94 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001536:	e043      	b.n	80015c0 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a24      	ldr	r2, [pc, #144]	; (80015d0 <HAL_UART_MspInit+0x148>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d13e      	bne.n	80015c0 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001542:	2304      	movs	r3, #4
 8001544:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800154a:	f107 0318 	add.w	r3, r7, #24
 800154e:	4618      	mov	r0, r3
 8001550:	f002 fc46 	bl	8003de0 <HAL_RCCEx_PeriphCLKConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800155a:	f7ff fb3f 	bl	8000bdc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800155e:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <HAL_UART_MspInit+0x144>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001562:	4a1a      	ldr	r2, [pc, #104]	; (80015cc <HAL_UART_MspInit+0x144>)
 8001564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001568:	6593      	str	r3, [r2, #88]	; 0x58
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <HAL_UART_MspInit+0x144>)
 800156c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <HAL_UART_MspInit+0x144>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	4a14      	ldr	r2, [pc, #80]	; (80015cc <HAL_UART_MspInit+0x144>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_UART_MspInit+0x144>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800158e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001592:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015a0:	2307      	movs	r3, #7
 80015a2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015a8:	4619      	mov	r1, r3
 80015aa:	480a      	ldr	r0, [pc, #40]	; (80015d4 <HAL_UART_MspInit+0x14c>)
 80015ac:	f001 fc40 	bl	8002e30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2100      	movs	r1, #0
 80015b4:	2027      	movs	r0, #39	; 0x27
 80015b6:	f001 fb53 	bl	8002c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015ba:	2027      	movs	r0, #39	; 0x27
 80015bc:	f001 fb6a 	bl	8002c94 <HAL_NVIC_EnableIRQ>
}
 80015c0:	bf00      	nop
 80015c2:	3780      	adds	r7, #128	; 0x80
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40004400 	.word	0x40004400
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40004800 	.word	0x40004800
 80015d4:	48000800 	.word	0x48000800

080015d8 <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 80015dc:	2224      	movs	r2, #36	; 0x24
 80015de:	2100      	movs	r1, #0
 80015e0:	4816      	ldr	r0, [pc, #88]	; (800163c <Shell_Init+0x64>)
 80015e2:	f006 fe2a 	bl	800823a <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 80015e6:	2240      	movs	r2, #64	; 0x40
 80015e8:	2100      	movs	r1, #0
 80015ea:	4815      	ldr	r0, [pc, #84]	; (8001640 <Shell_Init+0x68>)
 80015ec:	f006 fe25 	bl	800823a <memset>
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <Shell_Init+0x6c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 80015f6:	2240      	movs	r2, #64	; 0x40
 80015f8:	2100      	movs	r1, #0
 80015fa:	4813      	ldr	r0, [pc, #76]	; (8001648 <Shell_Init+0x70>)
 80015fc:	f006 fe1d 	bl	800823a <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001600:	2201      	movs	r2, #1
 8001602:	4910      	ldr	r1, [pc, #64]	; (8001644 <Shell_Init+0x6c>)
 8001604:	4811      	ldr	r0, [pc, #68]	; (800164c <Shell_Init+0x74>)
 8001606:	f004 fd61 	bl	80060cc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 800160a:	4811      	ldr	r0, [pc, #68]	; (8001650 <Shell_Init+0x78>)
 800160c:	f7fe fe12 	bl	8000234 <strlen>
 8001610:	4603      	mov	r3, r0
 8001612:	b29a      	uxth	r2, r3
 8001614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001618:	490d      	ldr	r1, [pc, #52]	; (8001650 <Shell_Init+0x78>)
 800161a:	480c      	ldr	r0, [pc, #48]	; (800164c <Shell_Init+0x74>)
 800161c:	f004 fcbf 	bl	8005f9e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8001620:	480c      	ldr	r0, [pc, #48]	; (8001654 <Shell_Init+0x7c>)
 8001622:	f7fe fe07 	bl	8000234 <strlen>
 8001626:	4603      	mov	r3, r0
 8001628:	b29a      	uxth	r2, r3
 800162a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800162e:	4909      	ldr	r1, [pc, #36]	; (8001654 <Shell_Init+0x7c>)
 8001630:	4806      	ldr	r0, [pc, #24]	; (800164c <Shell_Init+0x74>)
 8001632:	f004 fcb4 	bl	8005f9e <HAL_UART_Transmit>
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200004b0 	.word	0x200004b0
 8001640:	2000046c 	.word	0x2000046c
 8001644:	20000428 	.word	0x20000428
 8001648:	2000042c 	.word	0x2000042c
 800164c:	20000304 	.word	0x20000304
 8001650:	20000020 	.word	0x20000020
 8001654:	20000004 	.word	0x20000004

08001658 <Shell_Loop>:

void Shell_Loop(void){
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 800165e:	4b51      	ldr	r3, [pc, #324]	; (80017a4 <Shell_Loop+0x14c>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d05b      	beq.n	800171e <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 8001666:	4b50      	ldr	r3, [pc, #320]	; (80017a8 <Shell_Loop+0x150>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b08      	cmp	r3, #8
 800166c:	d034      	beq.n	80016d8 <Shell_Loop+0x80>
 800166e:	2b0d      	cmp	r3, #13
 8001670:	d142      	bne.n	80016f8 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001676:	2203      	movs	r2, #3
 8001678:	494c      	ldr	r1, [pc, #304]	; (80017ac <Shell_Loop+0x154>)
 800167a:	484d      	ldr	r0, [pc, #308]	; (80017b0 <Shell_Loop+0x158>)
 800167c:	f004 fc8f 	bl	8005f9e <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8001680:	4b4c      	ldr	r3, [pc, #304]	; (80017b4 <Shell_Loop+0x15c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a4c      	ldr	r2, [pc, #304]	; (80017b8 <Shell_Loop+0x160>)
 8001686:	2100      	movs	r1, #0
 8001688:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 800168a:	4b4c      	ldr	r3, [pc, #304]	; (80017bc <Shell_Loop+0x164>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8001690:	494b      	ldr	r1, [pc, #300]	; (80017c0 <Shell_Loop+0x168>)
 8001692:	4849      	ldr	r0, [pc, #292]	; (80017b8 <Shell_Loop+0x160>)
 8001694:	f006 fdda 	bl	800824c <strtok>
 8001698:	4603      	mov	r3, r0
 800169a:	4a4a      	ldr	r2, [pc, #296]	; (80017c4 <Shell_Loop+0x16c>)
 800169c:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800169e:	e010      	b.n	80016c2 <Shell_Loop+0x6a>
				argv[argc++] = token;
 80016a0:	4b46      	ldr	r3, [pc, #280]	; (80017bc <Shell_Loop+0x164>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	4945      	ldr	r1, [pc, #276]	; (80017bc <Shell_Loop+0x164>)
 80016a8:	600a      	str	r2, [r1, #0]
 80016aa:	4a46      	ldr	r2, [pc, #280]	; (80017c4 <Shell_Loop+0x16c>)
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	4946      	ldr	r1, [pc, #280]	; (80017c8 <Shell_Loop+0x170>)
 80016b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 80016b4:	4942      	ldr	r1, [pc, #264]	; (80017c0 <Shell_Loop+0x168>)
 80016b6:	2000      	movs	r0, #0
 80016b8:	f006 fdc8 	bl	800824c <strtok>
 80016bc:	4603      	mov	r3, r0
 80016be:	4a41      	ldr	r2, [pc, #260]	; (80017c4 <Shell_Loop+0x16c>)
 80016c0:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80016c2:	4b40      	ldr	r3, [pc, #256]	; (80017c4 <Shell_Loop+0x16c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1ea      	bne.n	80016a0 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 80016ca:	4b3a      	ldr	r3, [pc, #232]	; (80017b4 <Shell_Loop+0x15c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 80016d0:	4b3e      	ldr	r3, [pc, #248]	; (80017cc <Shell_Loop+0x174>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]
			break;
 80016d6:	e01f      	b.n	8001718 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 80016d8:	4b36      	ldr	r3, [pc, #216]	; (80017b4 <Shell_Loop+0x15c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	1e5a      	subs	r2, r3, #1
 80016de:	4935      	ldr	r1, [pc, #212]	; (80017b4 <Shell_Loop+0x15c>)
 80016e0:	600a      	str	r2, [r1, #0]
 80016e2:	4a35      	ldr	r2, [pc, #212]	; (80017b8 <Shell_Loop+0x160>)
 80016e4:	2100      	movs	r1, #0
 80016e6:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ec:	2204      	movs	r2, #4
 80016ee:	4938      	ldr	r1, [pc, #224]	; (80017d0 <Shell_Loop+0x178>)
 80016f0:	482f      	ldr	r0, [pc, #188]	; (80017b0 <Shell_Loop+0x158>)
 80016f2:	f004 fc54 	bl	8005f9e <HAL_UART_Transmit>
			break;
 80016f6:	e00f      	b.n	8001718 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80016f8:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <Shell_Loop+0x15c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	492d      	ldr	r1, [pc, #180]	; (80017b4 <Shell_Loop+0x15c>)
 8001700:	600a      	str	r2, [r1, #0]
 8001702:	4a29      	ldr	r2, [pc, #164]	; (80017a8 <Shell_Loop+0x150>)
 8001704:	7811      	ldrb	r1, [r2, #0]
 8001706:	4a2c      	ldr	r2, [pc, #176]	; (80017b8 <Shell_Loop+0x160>)
 8001708:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 800170a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800170e:	2201      	movs	r2, #1
 8001710:	4925      	ldr	r1, [pc, #148]	; (80017a8 <Shell_Loop+0x150>)
 8001712:	4827      	ldr	r0, [pc, #156]	; (80017b0 <Shell_Loop+0x158>)
 8001714:	f004 fc43 	bl	8005f9e <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <Shell_Loop+0x14c>)
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 800171e:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <Shell_Loop+0x174>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d039      	beq.n	800179a <Shell_Loop+0x142>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 8001726:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <Shell_Loop+0x170>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	492a      	ldr	r1, [pc, #168]	; (80017d4 <Shell_Loop+0x17c>)
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fd77 	bl	8000220 <strcmp>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d107      	bne.n	8001748 <Shell_Loop+0xf0>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 8001738:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800173c:	221a      	movs	r2, #26
 800173e:	4926      	ldr	r1, [pc, #152]	; (80017d8 <Shell_Loop+0x180>)
 8001740:	481b      	ldr	r0, [pc, #108]	; (80017b0 <Shell_Loop+0x158>)
 8001742:	f004 fc2c 	bl	8005f9e <HAL_UART_Transmit>
 8001746:	e01e      	b.n	8001786 <Shell_Loop+0x12e>
		}
		else if(strcmp(argv[0],"help")==0){
 8001748:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <Shell_Loop+0x170>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4923      	ldr	r1, [pc, #140]	; (80017dc <Shell_Loop+0x184>)
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe fd66 	bl	8000220 <strcmp>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d10e      	bne.n	8001778 <Shell_Loop+0x120>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 800175a:	4a21      	ldr	r2, [pc, #132]	; (80017e0 <Shell_Loop+0x188>)
 800175c:	2140      	movs	r1, #64	; 0x40
 800175e:	4821      	ldr	r0, [pc, #132]	; (80017e4 <Shell_Loop+0x18c>)
 8001760:	f006 fcf4 	bl	800814c <sniprintf>
 8001764:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	b29a      	uxth	r2, r3
 800176a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800176e:	491d      	ldr	r1, [pc, #116]	; (80017e4 <Shell_Loop+0x18c>)
 8001770:	480f      	ldr	r0, [pc, #60]	; (80017b0 <Shell_Loop+0x158>)
 8001772:	f004 fc14 	bl	8005f9e <HAL_UART_Transmit>
 8001776:	e006      	b.n	8001786 <Shell_Loop+0x12e>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800177c:	2214      	movs	r2, #20
 800177e:	491a      	ldr	r1, [pc, #104]	; (80017e8 <Shell_Loop+0x190>)
 8001780:	480b      	ldr	r0, [pc, #44]	; (80017b0 <Shell_Loop+0x158>)
 8001782:	f004 fc0c 	bl	8005f9e <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800178a:	221c      	movs	r2, #28
 800178c:	4917      	ldr	r1, [pc, #92]	; (80017ec <Shell_Loop+0x194>)
 800178e:	4808      	ldr	r0, [pc, #32]	; (80017b0 <Shell_Loop+0x158>)
 8001790:	f004 fc05 	bl	8005f9e <HAL_UART_Transmit>
		newCmdReady = 0;
 8001794:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <Shell_Loop+0x174>)
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
	}
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000424 	.word	0x20000424
 80017a8:	20000428 	.word	0x20000428
 80017ac:	20000088 	.word	0x20000088
 80017b0:	20000304 	.word	0x20000304
 80017b4:	200004ac 	.word	0x200004ac
 80017b8:	2000046c 	.word	0x2000046c
 80017bc:	200004d4 	.word	0x200004d4
 80017c0:	080093bc 	.word	0x080093bc
 80017c4:	200004d8 	.word	0x200004d8
 80017c8:	200004b0 	.word	0x200004b0
 80017cc:	200004dc 	.word	0x200004dc
 80017d0:	2000008c 	.word	0x2000008c
 80017d4:	080093c0 	.word	0x080093c0
 80017d8:	200000a4 	.word	0x200000a4
 80017dc:	080093d0 	.word	0x080093d0
 80017e0:	080093d8 	.word	0x080093d8
 80017e4:	2000042c 	.word	0x2000042c
 80017e8:	20000090 	.word	0x20000090
 80017ec:	20000004 	.word	0x20000004

080017f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_UART_RxCpltCallback+0x20>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80017fe:	2201      	movs	r2, #1
 8001800:	4904      	ldr	r1, [pc, #16]	; (8001814 <HAL_UART_RxCpltCallback+0x24>)
 8001802:	4805      	ldr	r0, [pc, #20]	; (8001818 <HAL_UART_RxCpltCallback+0x28>)
 8001804:	f004 fc62 	bl	80060cc <HAL_UART_Receive_IT>
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000424 	.word	0x20000424
 8001814:	20000428 	.word	0x20000428
 8001818:	20000304 	.word	0x20000304

0800181c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800181c:	480d      	ldr	r0, [pc, #52]	; (8001854 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800181e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001820:	480d      	ldr	r0, [pc, #52]	; (8001858 <LoopForever+0x6>)
  ldr r1, =_edata
 8001822:	490e      	ldr	r1, [pc, #56]	; (800185c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001824:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <LoopForever+0xe>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001828:	e002      	b.n	8001830 <LoopCopyDataInit>

0800182a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800182c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182e:	3304      	adds	r3, #4

08001830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001834:	d3f9      	bcc.n	800182a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001836:	4a0b      	ldr	r2, [pc, #44]	; (8001864 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001838:	4c0b      	ldr	r4, [pc, #44]	; (8001868 <LoopForever+0x16>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800183c:	e001      	b.n	8001842 <LoopFillZerobss>

0800183e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001840:	3204      	adds	r2, #4

08001842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001844:	d3fb      	bcc.n	800183e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001846:	f7ff fb77 	bl	8000f38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800184a:	f006 fda7 	bl	800839c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800184e:	f7ff f935 	bl	8000abc <main>

08001852 <LoopForever>:

LoopForever:
    b LoopForever
 8001852:	e7fe      	b.n	8001852 <LoopForever>
  ldr   r0, =_estack
 8001854:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800185c:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8001860:	08009530 	.word	0x08009530
  ldr r2, =_sbss
 8001864:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 8001868:	20000630 	.word	0x20000630

0800186c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800186c:	e7fe      	b.n	800186c <ADC1_2_IRQHandler>

0800186e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001878:	2003      	movs	r0, #3
 800187a:	f001 f9e6 	bl	8002c4a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800187e:	200f      	movs	r0, #15
 8001880:	f7ff f9d6 	bl	8000c30 <HAL_InitTick>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	71fb      	strb	r3, [r7, #7]
 800188e:	e001      	b.n	8001894 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001890:	f7ff f9aa 	bl	8000be8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001894:	79fb      	ldrb	r3, [r7, #7]

}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_IncTick+0x1c>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HAL_IncTick+0x20>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4413      	add	r3, r2
 80018ae:	4a03      	ldr	r2, [pc, #12]	; (80018bc <HAL_IncTick+0x1c>)
 80018b0:	6013      	str	r3, [r2, #0]
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	200004e0 	.word	0x200004e0
 80018c0:	200000c4 	.word	0x200000c4

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <HAL_GetTick+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	200004e0 	.word	0x200004e0

080018dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	431a      	orrs	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	609a      	str	r2, [r3, #8]
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	609a      	str	r2, [r3, #8]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001944:	b480      	push	{r7}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3360      	adds	r3, #96	; 0x60
 8001956:	461a      	mov	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <LL_ADC_SetOffset+0x44>)
 8001966:	4013      	ands	r3, r2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	4313      	orrs	r3, r2
 8001974:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800197c:	bf00      	nop
 800197e:	371c      	adds	r7, #28
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	03fff000 	.word	0x03fff000

0800198c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3360      	adds	r3, #96	; 0x60
 800199a:	461a      	mov	r2, r3
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3360      	adds	r3, #96	; 0x60
 80019c8:	461a      	mov	r2, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	431a      	orrs	r2, r3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019e2:	bf00      	nop
 80019e4:	371c      	adds	r7, #28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b087      	sub	sp, #28
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3360      	adds	r3, #96	; 0x60
 80019fe:	461a      	mov	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a18:	bf00      	nop
 8001a1a:	371c      	adds	r7, #28
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	3360      	adds	r3, #96	; 0x60
 8001a34:	461a      	mov	r2, r3
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001a4e:	bf00      	nop
 8001a50:	371c      	adds	r7, #28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	615a      	str	r2, [r3, #20]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3330      	adds	r3, #48	; 0x30
 8001a90:	461a      	mov	r2, r3
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	4413      	add	r3, r2
 8001a9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	f003 031f 	and.w	r3, r3, #31
 8001aaa:	211f      	movs	r1, #31
 8001aac:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	0e9b      	lsrs	r3, r3, #26
 8001ab8:	f003 011f 	and.w	r1, r3, #31
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	f003 031f 	and.w	r3, r3, #31
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001acc:	bf00      	nop
 8001ace:	371c      	adds	r7, #28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	3314      	adds	r3, #20
 8001ae8:	461a      	mov	r2, r3
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	0e5b      	lsrs	r3, r3, #25
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	4413      	add	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	0d1b      	lsrs	r3, r3, #20
 8001b00:	f003 031f 	and.w	r3, r3, #31
 8001b04:	2107      	movs	r1, #7
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	401a      	ands	r2, r3
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	0d1b      	lsrs	r3, r3, #20
 8001b12:	f003 031f 	and.w	r3, r3, #31
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b22:	bf00      	nop
 8001b24:	371c      	adds	r7, #28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a0f      	ldr	r2, [pc, #60]	; (8001b7c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d10a      	bne.n	8001b5a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b50:	431a      	orrs	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001b58:	e00a      	b.n	8001b70 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b66:	43db      	mvns	r3, r3
 8001b68:	401a      	ands	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001b70:	bf00      	nop
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	407f0000 	.word	0x407f0000

08001b80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6093      	str	r3, [r2, #8]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bb8:	d101      	bne.n	8001bbe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001bdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001be0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c08:	d101      	bne.n	8001c0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <LL_ADC_IsEnabled+0x18>
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <LL_ADC_IsEnabled+0x1a>
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d101      	bne.n	8001c5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d101      	bne.n	8001c80 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c90:	b590      	push	{r4, r7, lr}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e1af      	b.n	800200a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d109      	bne.n	8001ccc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7fe fd75 	bl	80007a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff67 	bl	8001ba4 <LL_ADC_IsDeepPowerDownEnabled>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d004      	beq.n	8001ce6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff4d 	bl	8001b80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff82 	bl	8001bf4 <LL_ADC_IsInternalRegulatorEnabled>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d115      	bne.n	8001d22 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ff66 	bl	8001bcc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d00:	4b9f      	ldr	r3, [pc, #636]	; (8001f80 <HAL_ADC_Init+0x2f0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	099b      	lsrs	r3, r3, #6
 8001d06:	4a9f      	ldr	r2, [pc, #636]	; (8001f84 <HAL_ADC_Init+0x2f4>)
 8001d08:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0c:	099b      	lsrs	r3, r3, #6
 8001d0e:	3301      	adds	r3, #1
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d14:	e002      	b.n	8001d1c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f9      	bne.n	8001d16 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ff64 	bl	8001bf4 <LL_ADC_IsInternalRegulatorEnabled>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10d      	bne.n	8001d4e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d36:	f043 0210 	orr.w	r2, r3, #16
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d42:	f043 0201 	orr.w	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff75 	bl	8001c42 <LL_ADC_REG_IsConversionOngoing>
 8001d58:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f040 8148 	bne.w	8001ff8 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f040 8144 	bne.w	8001ff8 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d74:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d78:	f043 0202 	orr.w	r2, r3, #2
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff49 	bl	8001c1c <LL_ADC_IsEnabled>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d141      	bne.n	8001e14 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d98:	d004      	beq.n	8001da4 <HAL_ADC_Init+0x114>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a7a      	ldr	r2, [pc, #488]	; (8001f88 <HAL_ADC_Init+0x2f8>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d10f      	bne.n	8001dc4 <HAL_ADC_Init+0x134>
 8001da4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001da8:	f7ff ff38 	bl	8001c1c <LL_ADC_IsEnabled>
 8001dac:	4604      	mov	r4, r0
 8001dae:	4876      	ldr	r0, [pc, #472]	; (8001f88 <HAL_ADC_Init+0x2f8>)
 8001db0:	f7ff ff34 	bl	8001c1c <LL_ADC_IsEnabled>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4323      	orrs	r3, r4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bf0c      	ite	eq
 8001dbc:	2301      	moveq	r3, #1
 8001dbe:	2300      	movne	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	e012      	b.n	8001dea <HAL_ADC_Init+0x15a>
 8001dc4:	4871      	ldr	r0, [pc, #452]	; (8001f8c <HAL_ADC_Init+0x2fc>)
 8001dc6:	f7ff ff29 	bl	8001c1c <LL_ADC_IsEnabled>
 8001dca:	4604      	mov	r4, r0
 8001dcc:	4870      	ldr	r0, [pc, #448]	; (8001f90 <HAL_ADC_Init+0x300>)
 8001dce:	f7ff ff25 	bl	8001c1c <LL_ADC_IsEnabled>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	431c      	orrs	r4, r3
 8001dd6:	486f      	ldr	r0, [pc, #444]	; (8001f94 <HAL_ADC_Init+0x304>)
 8001dd8:	f7ff ff20 	bl	8001c1c <LL_ADC_IsEnabled>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4323      	orrs	r3, r4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	bf0c      	ite	eq
 8001de4:	2301      	moveq	r3, #1
 8001de6:	2300      	movne	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d012      	beq.n	8001e14 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001df6:	d004      	beq.n	8001e02 <HAL_ADC_Init+0x172>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a62      	ldr	r2, [pc, #392]	; (8001f88 <HAL_ADC_Init+0x2f8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d101      	bne.n	8001e06 <HAL_ADC_Init+0x176>
 8001e02:	4a65      	ldr	r2, [pc, #404]	; (8001f98 <HAL_ADC_Init+0x308>)
 8001e04:	e000      	b.n	8001e08 <HAL_ADC_Init+0x178>
 8001e06:	4a65      	ldr	r2, [pc, #404]	; (8001f9c <HAL_ADC_Init+0x30c>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4610      	mov	r0, r2
 8001e10:	f7ff fd64 	bl	80018dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7f5b      	ldrb	r3, [r3, #29]
 8001e18:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e1e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001e24:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001e2a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e32:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d106      	bne.n	8001e50 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e46:	3b01      	subs	r3, #1
 8001e48:	045b      	lsls	r3, r3, #17
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d009      	beq.n	8001e6c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	4b4b      	ldr	r3, [pc, #300]	; (8001fa0 <HAL_ADC_Init+0x310>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	69b9      	ldr	r1, [r7, #24]
 8001e7c:	430b      	orrs	r3, r1
 8001e7e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fed1 	bl	8001c42 <LL_ADC_REG_IsConversionOngoing>
 8001ea0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fede 	bl	8001c68 <LL_ADC_INJ_IsConversionOngoing>
 8001eac:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d17f      	bne.n	8001fb4 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d17c      	bne.n	8001fb4 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ebe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ec6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ed6:	f023 0302 	bic.w	r3, r3, #2
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6812      	ldr	r2, [r2, #0]
 8001ede:	69b9      	ldr	r1, [r7, #24]
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d017      	beq.n	8001f1c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691a      	ldr	r2, [r3, #16]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001efa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f04:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6911      	ldr	r1, [r2, #16]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	430b      	orrs	r3, r1
 8001f16:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001f1a:	e013      	b.n	8001f44 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691a      	ldr	r2, [r3, #16]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f2a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f40:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d12a      	bne.n	8001fa4 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f58:	f023 0304 	bic.w	r3, r3, #4
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f64:	4311      	orrs	r1, r2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f6a:	4311      	orrs	r1, r2
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f70:	430a      	orrs	r2, r1
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f042 0201 	orr.w	r2, r2, #1
 8001f7c:	611a      	str	r2, [r3, #16]
 8001f7e:	e019      	b.n	8001fb4 <HAL_ADC_Init+0x324>
 8001f80:	20000000 	.word	0x20000000
 8001f84:	053e2d63 	.word	0x053e2d63
 8001f88:	50000100 	.word	0x50000100
 8001f8c:	50000400 	.word	0x50000400
 8001f90:	50000500 	.word	0x50000500
 8001f94:	50000600 	.word	0x50000600
 8001f98:	50000300 	.word	0x50000300
 8001f9c:	50000700 	.word	0x50000700
 8001fa0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691a      	ldr	r2, [r3, #16]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0201 	bic.w	r2, r2, #1
 8001fb2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d10c      	bne.n	8001fd6 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f023 010f 	bic.w	r1, r3, #15
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	1e5a      	subs	r2, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	631a      	str	r2, [r3, #48]	; 0x30
 8001fd4:	e007      	b.n	8001fe6 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 020f 	bic.w	r2, r2, #15
 8001fe4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fea:	f023 0303 	bic.w	r3, r3, #3
 8001fee:	f043 0201 	orr.w	r2, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ff6:	e007      	b.n	8002008 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffc:	f043 0210 	orr.w	r2, r3, #16
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002008:	7ffb      	ldrb	r3, [r7, #31]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3724      	adds	r7, #36	; 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd90      	pop	{r4, r7, pc}
 8002012:	bf00      	nop

08002014 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b0b6      	sub	sp, #216	; 0xd8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800202e:	2b01      	cmp	r3, #1
 8002030:	d102      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x24>
 8002032:	2302      	movs	r3, #2
 8002034:	f000 bc13 	b.w	800285e <HAL_ADC_ConfigChannel+0x84a>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fdfc 	bl	8001c42 <LL_ADC_REG_IsConversionOngoing>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	f040 83f3 	bne.w	8002838 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6818      	ldr	r0, [r3, #0]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	6859      	ldr	r1, [r3, #4]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	f7ff fd0e 	bl	8001a80 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fdea 	bl	8001c42 <LL_ADC_REG_IsConversionOngoing>
 800206e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fdf6 	bl	8001c68 <LL_ADC_INJ_IsConversionOngoing>
 800207c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002080:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002084:	2b00      	cmp	r3, #0
 8002086:	f040 81d9 	bne.w	800243c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800208a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800208e:	2b00      	cmp	r3, #0
 8002090:	f040 81d4 	bne.w	800243c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800209c:	d10f      	bne.n	80020be <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6818      	ldr	r0, [r3, #0]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2200      	movs	r2, #0
 80020a8:	4619      	mov	r1, r3
 80020aa:	f7ff fd15 	bl	8001ad8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fccf 	bl	8001a5a <LL_ADC_SetSamplingTimeCommonConfig>
 80020bc:	e00e      	b.n	80020dc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	6819      	ldr	r1, [r3, #0]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	461a      	mov	r2, r3
 80020cc:	f7ff fd04 	bl	8001ad8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff fcbf 	bl	8001a5a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	695a      	ldr	r2, [r3, #20]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	08db      	lsrs	r3, r3, #3
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d022      	beq.n	8002144 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6818      	ldr	r0, [r3, #0]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	6919      	ldr	r1, [r3, #16]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800210e:	f7ff fc19 	bl	8001944 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	6919      	ldr	r1, [r3, #16]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	461a      	mov	r2, r3
 8002120:	f7ff fc65 	bl	80019ee <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	6919      	ldr	r1, [r3, #16]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	7f1b      	ldrb	r3, [r3, #28]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d102      	bne.n	800213a <HAL_ADC_ConfigChannel+0x126>
 8002134:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002138:	e000      	b.n	800213c <HAL_ADC_ConfigChannel+0x128>
 800213a:	2300      	movs	r3, #0
 800213c:	461a      	mov	r2, r3
 800213e:	f7ff fc71 	bl	8001a24 <LL_ADC_SetOffsetSaturation>
 8002142:	e17b      	b.n	800243c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2100      	movs	r1, #0
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fc1e 	bl	800198c <LL_ADC_GetOffsetChannel>
 8002150:	4603      	mov	r3, r0
 8002152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10a      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x15c>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2100      	movs	r1, #0
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fc13 	bl	800198c <LL_ADC_GetOffsetChannel>
 8002166:	4603      	mov	r3, r0
 8002168:	0e9b      	lsrs	r3, r3, #26
 800216a:	f003 021f 	and.w	r2, r3, #31
 800216e:	e01e      	b.n	80021ae <HAL_ADC_ConfigChannel+0x19a>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fc08 	bl	800198c <LL_ADC_GetOffsetChannel>
 800217c:	4603      	mov	r3, r0
 800217e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800218e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002192:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002196:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800219e:	2320      	movs	r3, #32
 80021a0:	e004      	b.n	80021ac <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80021a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021a6:	fab3 f383 	clz	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d105      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x1b2>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	0e9b      	lsrs	r3, r3, #26
 80021c0:	f003 031f 	and.w	r3, r3, #31
 80021c4:	e018      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x1e4>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80021da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80021e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80021ea:	2320      	movs	r3, #32
 80021ec:	e004      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80021ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021f2:	fab3 f383 	clz	r3, r3
 80021f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d106      	bne.n	800220a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2200      	movs	r2, #0
 8002202:	2100      	movs	r1, #0
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fbd7 	bl	80019b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2101      	movs	r1, #1
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fbbb 	bl	800198c <LL_ADC_GetOffsetChannel>
 8002216:	4603      	mov	r3, r0
 8002218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10a      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x222>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2101      	movs	r1, #1
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fbb0 	bl	800198c <LL_ADC_GetOffsetChannel>
 800222c:	4603      	mov	r3, r0
 800222e:	0e9b      	lsrs	r3, r3, #26
 8002230:	f003 021f 	and.w	r2, r3, #31
 8002234:	e01e      	b.n	8002274 <HAL_ADC_ConfigChannel+0x260>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2101      	movs	r1, #1
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fba5 	bl	800198c <LL_ADC_GetOffsetChannel>
 8002242:	4603      	mov	r3, r0
 8002244:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800224c:	fa93 f3a3 	rbit	r3, r3
 8002250:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002254:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002258:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800225c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002264:	2320      	movs	r3, #32
 8002266:	e004      	b.n	8002272 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002268:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	b2db      	uxtb	r3, r3
 8002272:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227c:	2b00      	cmp	r3, #0
 800227e:	d105      	bne.n	800228c <HAL_ADC_ConfigChannel+0x278>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	0e9b      	lsrs	r3, r3, #26
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	e018      	b.n	80022be <HAL_ADC_ConfigChannel+0x2aa>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002298:	fa93 f3a3 	rbit	r3, r3
 800229c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80022a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80022a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80022b0:	2320      	movs	r3, #32
 80022b2:	e004      	b.n	80022be <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80022b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022be:	429a      	cmp	r2, r3
 80022c0:	d106      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2200      	movs	r2, #0
 80022c8:	2101      	movs	r1, #1
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fb74 	bl	80019b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2102      	movs	r1, #2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fb58 	bl	800198c <LL_ADC_GetOffsetChannel>
 80022dc:	4603      	mov	r3, r0
 80022de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10a      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x2e8>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2102      	movs	r1, #2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fb4d 	bl	800198c <LL_ADC_GetOffsetChannel>
 80022f2:	4603      	mov	r3, r0
 80022f4:	0e9b      	lsrs	r3, r3, #26
 80022f6:	f003 021f 	and.w	r2, r3, #31
 80022fa:	e01e      	b.n	800233a <HAL_ADC_ConfigChannel+0x326>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2102      	movs	r1, #2
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fb42 	bl	800198c <LL_ADC_GetOffsetChannel>
 8002308:	4603      	mov	r3, r0
 800230a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800231a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800231e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002322:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800232a:	2320      	movs	r3, #32
 800232c:	e004      	b.n	8002338 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800232e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002342:	2b00      	cmp	r3, #0
 8002344:	d105      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x33e>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	0e9b      	lsrs	r3, r3, #26
 800234c:	f003 031f 	and.w	r3, r3, #31
 8002350:	e016      	b.n	8002380 <HAL_ADC_ConfigChannel+0x36c>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800235e:	fa93 f3a3 	rbit	r3, r3
 8002362:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002364:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002366:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800236a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002372:	2320      	movs	r3, #32
 8002374:	e004      	b.n	8002380 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002376:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800237a:	fab3 f383 	clz	r3, r3
 800237e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002380:	429a      	cmp	r2, r3
 8002382:	d106      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2200      	movs	r2, #0
 800238a:	2102      	movs	r1, #2
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fb13 	bl	80019b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2103      	movs	r1, #3
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff faf7 	bl	800198c <LL_ADC_GetOffsetChannel>
 800239e:	4603      	mov	r3, r0
 80023a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10a      	bne.n	80023be <HAL_ADC_ConfigChannel+0x3aa>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2103      	movs	r1, #3
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff faec 	bl	800198c <LL_ADC_GetOffsetChannel>
 80023b4:	4603      	mov	r3, r0
 80023b6:	0e9b      	lsrs	r3, r3, #26
 80023b8:	f003 021f 	and.w	r2, r3, #31
 80023bc:	e017      	b.n	80023ee <HAL_ADC_ConfigChannel+0x3da>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2103      	movs	r1, #3
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fae1 	bl	800198c <LL_ADC_GetOffsetChannel>
 80023ca:	4603      	mov	r3, r0
 80023cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023d0:	fa93 f3a3 	rbit	r3, r3
 80023d4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80023d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023d8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80023da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80023e0:	2320      	movs	r3, #32
 80023e2:	e003      	b.n	80023ec <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80023e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d105      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x3f2>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	0e9b      	lsrs	r3, r3, #26
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	e011      	b.n	800242a <HAL_ADC_ConfigChannel+0x416>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002416:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800241e:	2320      	movs	r3, #32
 8002420:	e003      	b.n	800242a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002424:	fab3 f383 	clz	r3, r3
 8002428:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800242a:	429a      	cmp	r2, r3
 800242c:	d106      	bne.n	800243c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2200      	movs	r2, #0
 8002434:	2103      	movs	r1, #3
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fabe 	bl	80019b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fbeb 	bl	8001c1c <LL_ADC_IsEnabled>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	f040 813d 	bne.w	80026c8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	6819      	ldr	r1, [r3, #0]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	461a      	mov	r2, r3
 800245c:	f7ff fb68 	bl	8001b30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4aa2      	ldr	r2, [pc, #648]	; (80026f0 <HAL_ADC_ConfigChannel+0x6dc>)
 8002466:	4293      	cmp	r3, r2
 8002468:	f040 812e 	bne.w	80026c8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10b      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x480>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	0e9b      	lsrs	r3, r3, #26
 8002482:	3301      	adds	r3, #1
 8002484:	f003 031f 	and.w	r3, r3, #31
 8002488:	2b09      	cmp	r3, #9
 800248a:	bf94      	ite	ls
 800248c:	2301      	movls	r3, #1
 800248e:	2300      	movhi	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	e019      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x4b4>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800249c:	fa93 f3a3 	rbit	r3, r3
 80024a0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80024a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024a4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80024a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80024ac:	2320      	movs	r3, #32
 80024ae:	e003      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80024b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	3301      	adds	r3, #1
 80024ba:	f003 031f 	and.w	r3, r3, #31
 80024be:	2b09      	cmp	r3, #9
 80024c0:	bf94      	ite	ls
 80024c2:	2301      	movls	r3, #1
 80024c4:	2300      	movhi	r3, #0
 80024c6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d079      	beq.n	80025c0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d107      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x4d4>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	0e9b      	lsrs	r3, r3, #26
 80024de:	3301      	adds	r3, #1
 80024e0:	069b      	lsls	r3, r3, #26
 80024e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024e6:	e015      	b.n	8002514 <HAL_ADC_ConfigChannel+0x500>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024f0:	fa93 f3a3 	rbit	r3, r3
 80024f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80024fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002500:	2320      	movs	r3, #32
 8002502:	e003      	b.n	800250c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002506:	fab3 f383 	clz	r3, r3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	3301      	adds	r3, #1
 800250e:	069b      	lsls	r3, r3, #26
 8002510:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251c:	2b00      	cmp	r3, #0
 800251e:	d109      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x520>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	0e9b      	lsrs	r3, r3, #26
 8002526:	3301      	adds	r3, #1
 8002528:	f003 031f 	and.w	r3, r3, #31
 800252c:	2101      	movs	r1, #1
 800252e:	fa01 f303 	lsl.w	r3, r1, r3
 8002532:	e017      	b.n	8002564 <HAL_ADC_ConfigChannel+0x550>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800253c:	fa93 f3a3 	rbit	r3, r3
 8002540:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002544:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800254c:	2320      	movs	r3, #32
 800254e:	e003      	b.n	8002558 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002552:	fab3 f383 	clz	r3, r3
 8002556:	b2db      	uxtb	r3, r3
 8002558:	3301      	adds	r3, #1
 800255a:	f003 031f 	and.w	r3, r3, #31
 800255e:	2101      	movs	r1, #1
 8002560:	fa01 f303 	lsl.w	r3, r1, r3
 8002564:	ea42 0103 	orr.w	r1, r2, r3
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10a      	bne.n	800258a <HAL_ADC_ConfigChannel+0x576>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	0e9b      	lsrs	r3, r3, #26
 800257a:	3301      	adds	r3, #1
 800257c:	f003 021f 	and.w	r2, r3, #31
 8002580:	4613      	mov	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4413      	add	r3, r2
 8002586:	051b      	lsls	r3, r3, #20
 8002588:	e018      	b.n	80025bc <HAL_ADC_ConfigChannel+0x5a8>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800259c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80025a2:	2320      	movs	r3, #32
 80025a4:	e003      	b.n	80025ae <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80025a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025a8:	fab3 f383 	clz	r3, r3
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	3301      	adds	r3, #1
 80025b0:	f003 021f 	and.w	r2, r3, #31
 80025b4:	4613      	mov	r3, r2
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4413      	add	r3, r2
 80025ba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025bc:	430b      	orrs	r3, r1
 80025be:	e07e      	b.n	80026be <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d107      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x5c8>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	0e9b      	lsrs	r3, r3, #26
 80025d2:	3301      	adds	r3, #1
 80025d4:	069b      	lsls	r3, r3, #26
 80025d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025da:	e015      	b.n	8002608 <HAL_ADC_ConfigChannel+0x5f4>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80025ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ec:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80025ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80025f4:	2320      	movs	r3, #32
 80025f6:	e003      	b.n	8002600 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80025f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	3301      	adds	r3, #1
 8002602:	069b      	lsls	r3, r3, #26
 8002604:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002610:	2b00      	cmp	r3, #0
 8002612:	d109      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x614>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	0e9b      	lsrs	r3, r3, #26
 800261a:	3301      	adds	r3, #1
 800261c:	f003 031f 	and.w	r3, r3, #31
 8002620:	2101      	movs	r1, #1
 8002622:	fa01 f303 	lsl.w	r3, r1, r3
 8002626:	e017      	b.n	8002658 <HAL_ADC_ConfigChannel+0x644>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	fa93 f3a3 	rbit	r3, r3
 8002634:	61fb      	str	r3, [r7, #28]
  return result;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002640:	2320      	movs	r3, #32
 8002642:	e003      	b.n	800264c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	3301      	adds	r3, #1
 800264e:	f003 031f 	and.w	r3, r3, #31
 8002652:	2101      	movs	r1, #1
 8002654:	fa01 f303 	lsl.w	r3, r1, r3
 8002658:	ea42 0103 	orr.w	r1, r2, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10d      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x670>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	0e9b      	lsrs	r3, r3, #26
 800266e:	3301      	adds	r3, #1
 8002670:	f003 021f 	and.w	r2, r3, #31
 8002674:	4613      	mov	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4413      	add	r3, r2
 800267a:	3b1e      	subs	r3, #30
 800267c:	051b      	lsls	r3, r3, #20
 800267e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002682:	e01b      	b.n	80026bc <HAL_ADC_ConfigChannel+0x6a8>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	fa93 f3a3 	rbit	r3, r3
 8002690:	613b      	str	r3, [r7, #16]
  return result;
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800269c:	2320      	movs	r3, #32
 800269e:	e003      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	3301      	adds	r3, #1
 80026aa:	f003 021f 	and.w	r2, r3, #31
 80026ae:	4613      	mov	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	3b1e      	subs	r3, #30
 80026b6:	051b      	lsls	r3, r3, #20
 80026b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026bc:	430b      	orrs	r3, r1
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	6892      	ldr	r2, [r2, #8]
 80026c2:	4619      	mov	r1, r3
 80026c4:	f7ff fa08 	bl	8001ad8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <HAL_ADC_ConfigChannel+0x6e0>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80be 	beq.w	8002852 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026de:	d004      	beq.n	80026ea <HAL_ADC_ConfigChannel+0x6d6>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <HAL_ADC_ConfigChannel+0x6e4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d10a      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x6ec>
 80026ea:	4b04      	ldr	r3, [pc, #16]	; (80026fc <HAL_ADC_ConfigChannel+0x6e8>)
 80026ec:	e009      	b.n	8002702 <HAL_ADC_ConfigChannel+0x6ee>
 80026ee:	bf00      	nop
 80026f0:	407f0000 	.word	0x407f0000
 80026f4:	80080000 	.word	0x80080000
 80026f8:	50000100 	.word	0x50000100
 80026fc:	50000300 	.word	0x50000300
 8002700:	4b59      	ldr	r3, [pc, #356]	; (8002868 <HAL_ADC_ConfigChannel+0x854>)
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff f910 	bl	8001928 <LL_ADC_GetCommonPathInternalCh>
 8002708:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a56      	ldr	r2, [pc, #344]	; (800286c <HAL_ADC_ConfigChannel+0x858>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d004      	beq.n	8002720 <HAL_ADC_ConfigChannel+0x70c>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a55      	ldr	r2, [pc, #340]	; (8002870 <HAL_ADC_ConfigChannel+0x85c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d13a      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002720:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002724:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d134      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002734:	d005      	beq.n	8002742 <HAL_ADC_ConfigChannel+0x72e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a4e      	ldr	r2, [pc, #312]	; (8002874 <HAL_ADC_ConfigChannel+0x860>)
 800273c:	4293      	cmp	r3, r2
 800273e:	f040 8085 	bne.w	800284c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800274a:	d004      	beq.n	8002756 <HAL_ADC_ConfigChannel+0x742>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a49      	ldr	r2, [pc, #292]	; (8002878 <HAL_ADC_ConfigChannel+0x864>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d101      	bne.n	800275a <HAL_ADC_ConfigChannel+0x746>
 8002756:	4a49      	ldr	r2, [pc, #292]	; (800287c <HAL_ADC_ConfigChannel+0x868>)
 8002758:	e000      	b.n	800275c <HAL_ADC_ConfigChannel+0x748>
 800275a:	4a43      	ldr	r2, [pc, #268]	; (8002868 <HAL_ADC_ConfigChannel+0x854>)
 800275c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002760:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002764:	4619      	mov	r1, r3
 8002766:	4610      	mov	r0, r2
 8002768:	f7ff f8cb 	bl	8001902 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800276c:	4b44      	ldr	r3, [pc, #272]	; (8002880 <HAL_ADC_ConfigChannel+0x86c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	099b      	lsrs	r3, r3, #6
 8002772:	4a44      	ldr	r2, [pc, #272]	; (8002884 <HAL_ADC_ConfigChannel+0x870>)
 8002774:	fba2 2303 	umull	r2, r3, r2, r3
 8002778:	099b      	lsrs	r3, r3, #6
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	4613      	mov	r3, r2
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002786:	e002      	b.n	800278e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	3b01      	subs	r3, #1
 800278c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f9      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002794:	e05a      	b.n	800284c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a3b      	ldr	r2, [pc, #236]	; (8002888 <HAL_ADC_ConfigChannel+0x874>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d125      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x7d8>
 80027a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d11f      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a31      	ldr	r2, [pc, #196]	; (8002878 <HAL_ADC_ConfigChannel+0x864>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d104      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x7ac>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a34      	ldr	r2, [pc, #208]	; (800288c <HAL_ADC_ConfigChannel+0x878>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d047      	beq.n	8002850 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027c8:	d004      	beq.n	80027d4 <HAL_ADC_ConfigChannel+0x7c0>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a2a      	ldr	r2, [pc, #168]	; (8002878 <HAL_ADC_ConfigChannel+0x864>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x7c4>
 80027d4:	4a29      	ldr	r2, [pc, #164]	; (800287c <HAL_ADC_ConfigChannel+0x868>)
 80027d6:	e000      	b.n	80027da <HAL_ADC_ConfigChannel+0x7c6>
 80027d8:	4a23      	ldr	r2, [pc, #140]	; (8002868 <HAL_ADC_ConfigChannel+0x854>)
 80027da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027e2:	4619      	mov	r1, r3
 80027e4:	4610      	mov	r0, r2
 80027e6:	f7ff f88c 	bl	8001902 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027ea:	e031      	b.n	8002850 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a27      	ldr	r2, [pc, #156]	; (8002890 <HAL_ADC_ConfigChannel+0x87c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d12d      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d127      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a1c      	ldr	r2, [pc, #112]	; (8002878 <HAL_ADC_ConfigChannel+0x864>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d022      	beq.n	8002852 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002814:	d004      	beq.n	8002820 <HAL_ADC_ConfigChannel+0x80c>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a17      	ldr	r2, [pc, #92]	; (8002878 <HAL_ADC_ConfigChannel+0x864>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d101      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x810>
 8002820:	4a16      	ldr	r2, [pc, #88]	; (800287c <HAL_ADC_ConfigChannel+0x868>)
 8002822:	e000      	b.n	8002826 <HAL_ADC_ConfigChannel+0x812>
 8002824:	4a10      	ldr	r2, [pc, #64]	; (8002868 <HAL_ADC_ConfigChannel+0x854>)
 8002826:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800282a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800282e:	4619      	mov	r1, r3
 8002830:	4610      	mov	r0, r2
 8002832:	f7ff f866 	bl	8001902 <LL_ADC_SetCommonPathInternalCh>
 8002836:	e00c      	b.n	8002852 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283c:	f043 0220 	orr.w	r2, r3, #32
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800284a:	e002      	b.n	8002852 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800284c:	bf00      	nop
 800284e:	e000      	b.n	8002852 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002850:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800285a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800285e:	4618      	mov	r0, r3
 8002860:	37d8      	adds	r7, #216	; 0xd8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	50000700 	.word	0x50000700
 800286c:	c3210000 	.word	0xc3210000
 8002870:	90c00010 	.word	0x90c00010
 8002874:	50000600 	.word	0x50000600
 8002878:	50000100 	.word	0x50000100
 800287c:	50000300 	.word	0x50000300
 8002880:	20000000 	.word	0x20000000
 8002884:	053e2d63 	.word	0x053e2d63
 8002888:	c7520000 	.word	0xc7520000
 800288c:	50000500 	.word	0x50000500
 8002890:	cb840000 	.word	0xcb840000

08002894 <LL_ADC_IsEnabled>:
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <LL_ADC_IsEnabled+0x18>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <LL_ADC_IsEnabled+0x1a>
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <LL_ADC_REG_IsConversionOngoing>:
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d101      	bne.n	80028d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80028e0:	b590      	push	{r4, r7, lr}
 80028e2:	b0a1      	sub	sp, #132	; 0x84
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d101      	bne.n	80028fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028fa:	2302      	movs	r3, #2
 80028fc:	e0e7      	b.n	8002ace <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002906:	2300      	movs	r3, #0
 8002908:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800290a:	2300      	movs	r3, #0
 800290c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002916:	d102      	bne.n	800291e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002918:	4b6f      	ldr	r3, [pc, #444]	; (8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	e009      	b.n	8002932 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a6e      	ldr	r2, [pc, #440]	; (8002adc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d102      	bne.n	800292e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002928:	4b6d      	ldr	r3, [pc, #436]	; (8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	e001      	b.n	8002932 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800292e:	2300      	movs	r3, #0
 8002930:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10b      	bne.n	8002950 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293c:	f043 0220 	orr.w	r2, r3, #32
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0be      	b.n	8002ace <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff ffb1 	bl	80028ba <LL_ADC_REG_IsConversionOngoing>
 8002958:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff ffab 	bl	80028ba <LL_ADC_REG_IsConversionOngoing>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	f040 80a0 	bne.w	8002aac <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800296c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800296e:	2b00      	cmp	r3, #0
 8002970:	f040 809c 	bne.w	8002aac <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800297c:	d004      	beq.n	8002988 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a55      	ldr	r2, [pc, #340]	; (8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d101      	bne.n	800298c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002988:	4b56      	ldr	r3, [pc, #344]	; (8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800298a:	e000      	b.n	800298e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800298c:	4b56      	ldr	r3, [pc, #344]	; (8002ae8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800298e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d04b      	beq.n	8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002998:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029aa:	035b      	lsls	r3, r3, #13
 80029ac:	430b      	orrs	r3, r1
 80029ae:	431a      	orrs	r2, r3
 80029b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029bc:	d004      	beq.n	80029c8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a45      	ldr	r2, [pc, #276]	; (8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d10f      	bne.n	80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80029c8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80029cc:	f7ff ff62 	bl	8002894 <LL_ADC_IsEnabled>
 80029d0:	4604      	mov	r4, r0
 80029d2:	4841      	ldr	r0, [pc, #260]	; (8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029d4:	f7ff ff5e 	bl	8002894 <LL_ADC_IsEnabled>
 80029d8:	4603      	mov	r3, r0
 80029da:	4323      	orrs	r3, r4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	bf0c      	ite	eq
 80029e0:	2301      	moveq	r3, #1
 80029e2:	2300      	movne	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	e012      	b.n	8002a0e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80029e8:	483c      	ldr	r0, [pc, #240]	; (8002adc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80029ea:	f7ff ff53 	bl	8002894 <LL_ADC_IsEnabled>
 80029ee:	4604      	mov	r4, r0
 80029f0:	483b      	ldr	r0, [pc, #236]	; (8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80029f2:	f7ff ff4f 	bl	8002894 <LL_ADC_IsEnabled>
 80029f6:	4603      	mov	r3, r0
 80029f8:	431c      	orrs	r4, r3
 80029fa:	483c      	ldr	r0, [pc, #240]	; (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80029fc:	f7ff ff4a 	bl	8002894 <LL_ADC_IsEnabled>
 8002a00:	4603      	mov	r3, r0
 8002a02:	4323      	orrs	r3, r4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	bf0c      	ite	eq
 8002a08:	2301      	moveq	r3, #1
 8002a0a:	2300      	movne	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d056      	beq.n	8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a1a:	f023 030f 	bic.w	r3, r3, #15
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	6811      	ldr	r1, [r2, #0]
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	6892      	ldr	r2, [r2, #8]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a2c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a2e:	e047      	b.n	8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a3a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a44:	d004      	beq.n	8002a50 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a23      	ldr	r2, [pc, #140]	; (8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d10f      	bne.n	8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002a50:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a54:	f7ff ff1e 	bl	8002894 <LL_ADC_IsEnabled>
 8002a58:	4604      	mov	r4, r0
 8002a5a:	481f      	ldr	r0, [pc, #124]	; (8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a5c:	f7ff ff1a 	bl	8002894 <LL_ADC_IsEnabled>
 8002a60:	4603      	mov	r3, r0
 8002a62:	4323      	orrs	r3, r4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	bf0c      	ite	eq
 8002a68:	2301      	moveq	r3, #1
 8002a6a:	2300      	movne	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	e012      	b.n	8002a96 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002a70:	481a      	ldr	r0, [pc, #104]	; (8002adc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a72:	f7ff ff0f 	bl	8002894 <LL_ADC_IsEnabled>
 8002a76:	4604      	mov	r4, r0
 8002a78:	4819      	ldr	r0, [pc, #100]	; (8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a7a:	f7ff ff0b 	bl	8002894 <LL_ADC_IsEnabled>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	431c      	orrs	r4, r3
 8002a82:	481a      	ldr	r0, [pc, #104]	; (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002a84:	f7ff ff06 	bl	8002894 <LL_ADC_IsEnabled>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4323      	orrs	r3, r4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bf0c      	ite	eq
 8002a90:	2301      	moveq	r3, #1
 8002a92:	2300      	movne	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d012      	beq.n	8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002aa2:	f023 030f 	bic.w	r3, r3, #15
 8002aa6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002aa8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002aaa:	e009      	b.n	8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab0:	f043 0220 	orr.w	r2, r3, #32
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002abe:	e000      	b.n	8002ac2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ac0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002aca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3784      	adds	r7, #132	; 0x84
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd90      	pop	{r4, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	50000100 	.word	0x50000100
 8002adc:	50000400 	.word	0x50000400
 8002ae0:	50000500 	.word	0x50000500
 8002ae4:	50000300 	.word	0x50000300
 8002ae8:	50000700 	.word	0x50000700
 8002aec:	50000600 	.word	0x50000600

08002af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b22:	4a04      	ldr	r2, [pc, #16]	; (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	60d3      	str	r3, [r2, #12]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b3c:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <__NVIC_GetPriorityGrouping+0x18>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	f003 0307 	and.w	r3, r3, #7
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	db0b      	blt.n	8002b7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	f003 021f 	and.w	r2, r3, #31
 8002b6c:	4907      	ldr	r1, [pc, #28]	; (8002b8c <__NVIC_EnableIRQ+0x38>)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	2001      	movs	r0, #1
 8002b76:	fa00 f202 	lsl.w	r2, r0, r2
 8002b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	e000e100 	.word	0xe000e100

08002b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	6039      	str	r1, [r7, #0]
 8002b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	db0a      	blt.n	8002bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	490c      	ldr	r1, [pc, #48]	; (8002bdc <__NVIC_SetPriority+0x4c>)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	0112      	lsls	r2, r2, #4
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb8:	e00a      	b.n	8002bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	4908      	ldr	r1, [pc, #32]	; (8002be0 <__NVIC_SetPriority+0x50>)
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	3b04      	subs	r3, #4
 8002bc8:	0112      	lsls	r2, r2, #4
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	440b      	add	r3, r1
 8002bce:	761a      	strb	r2, [r3, #24]
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000e100 	.word	0xe000e100
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b089      	sub	sp, #36	; 0x24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f1c3 0307 	rsb	r3, r3, #7
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	bf28      	it	cs
 8002c02:	2304      	movcs	r3, #4
 8002c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	2b06      	cmp	r3, #6
 8002c0c:	d902      	bls.n	8002c14 <NVIC_EncodePriority+0x30>
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3b03      	subs	r3, #3
 8002c12:	e000      	b.n	8002c16 <NVIC_EncodePriority+0x32>
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43da      	mvns	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	401a      	ands	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	43d9      	mvns	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c3c:	4313      	orrs	r3, r2
         );
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3724      	adds	r7, #36	; 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff ff4c 	bl	8002af0 <__NVIC_SetPriorityGrouping>
}
 8002c58:	bf00      	nop
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c6e:	f7ff ff63 	bl	8002b38 <__NVIC_GetPriorityGrouping>
 8002c72:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	68b9      	ldr	r1, [r7, #8]
 8002c78:	6978      	ldr	r0, [r7, #20]
 8002c7a:	f7ff ffb3 	bl	8002be4 <NVIC_EncodePriority>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c84:	4611      	mov	r1, r2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff ff82 	bl	8002b90 <__NVIC_SetPriority>
}
 8002c8c:	bf00      	nop
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff ff56 	bl	8002b54 <__NVIC_EnableIRQ>
}
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d005      	beq.n	8002cd4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2204      	movs	r2, #4
 8002ccc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
 8002cd2:	e037      	b.n	8002d44 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 020e 	bic.w	r2, r2, #14
 8002ce2:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cf2:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0201 	bic.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d08:	f003 021f 	and.w	r2, r3, #31
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	2101      	movs	r1, #1
 8002d12:	fa01 f202 	lsl.w	r2, r1, r2
 8002d16:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d20:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00c      	beq.n	8002d44 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d38:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d42:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b084      	sub	sp, #16
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d00d      	beq.n	8002d96 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
 8002d94:	e047      	b.n	8002e26 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 020e 	bic.w	r2, r2, #14
 8002da4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0201 	bic.w	r2, r2, #1
 8002db4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	f003 021f 	and.w	r2, r3, #31
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002de2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00c      	beq.n	8002e06 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dfa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e04:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	4798      	blx	r3
    }
  }
  return status;
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e3e:	e15a      	b.n	80030f6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	2101      	movs	r1, #1
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 814c 	beq.w	80030f0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d005      	beq.n	8002e70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d130      	bne.n	8002ed2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	2203      	movs	r2, #3
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4013      	ands	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	091b      	lsrs	r3, r3, #4
 8002ebc:	f003 0201 	and.w	r2, r3, #1
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d017      	beq.n	8002f0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	2203      	movs	r2, #3
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d123      	bne.n	8002f62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	08da      	lsrs	r2, r3, #3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3208      	adds	r2, #8
 8002f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	220f      	movs	r2, #15
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	08da      	lsrs	r2, r3, #3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3208      	adds	r2, #8
 8002f5c:	6939      	ldr	r1, [r7, #16]
 8002f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	2203      	movs	r2, #3
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	43db      	mvns	r3, r3
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4013      	ands	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f003 0203 	and.w	r2, r3, #3
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 80a6 	beq.w	80030f0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fa4:	4b5b      	ldr	r3, [pc, #364]	; (8003114 <HAL_GPIO_Init+0x2e4>)
 8002fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa8:	4a5a      	ldr	r2, [pc, #360]	; (8003114 <HAL_GPIO_Init+0x2e4>)
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	6613      	str	r3, [r2, #96]	; 0x60
 8002fb0:	4b58      	ldr	r3, [pc, #352]	; (8003114 <HAL_GPIO_Init+0x2e4>)
 8002fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fbc:	4a56      	ldr	r2, [pc, #344]	; (8003118 <HAL_GPIO_Init+0x2e8>)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	089b      	lsrs	r3, r3, #2
 8002fc2:	3302      	adds	r3, #2
 8002fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	220f      	movs	r2, #15
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fe6:	d01f      	beq.n	8003028 <HAL_GPIO_Init+0x1f8>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a4c      	ldr	r2, [pc, #304]	; (800311c <HAL_GPIO_Init+0x2ec>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d019      	beq.n	8003024 <HAL_GPIO_Init+0x1f4>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a4b      	ldr	r2, [pc, #300]	; (8003120 <HAL_GPIO_Init+0x2f0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d013      	beq.n	8003020 <HAL_GPIO_Init+0x1f0>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a4a      	ldr	r2, [pc, #296]	; (8003124 <HAL_GPIO_Init+0x2f4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00d      	beq.n	800301c <HAL_GPIO_Init+0x1ec>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a49      	ldr	r2, [pc, #292]	; (8003128 <HAL_GPIO_Init+0x2f8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d007      	beq.n	8003018 <HAL_GPIO_Init+0x1e8>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a48      	ldr	r2, [pc, #288]	; (800312c <HAL_GPIO_Init+0x2fc>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d101      	bne.n	8003014 <HAL_GPIO_Init+0x1e4>
 8003010:	2305      	movs	r3, #5
 8003012:	e00a      	b.n	800302a <HAL_GPIO_Init+0x1fa>
 8003014:	2306      	movs	r3, #6
 8003016:	e008      	b.n	800302a <HAL_GPIO_Init+0x1fa>
 8003018:	2304      	movs	r3, #4
 800301a:	e006      	b.n	800302a <HAL_GPIO_Init+0x1fa>
 800301c:	2303      	movs	r3, #3
 800301e:	e004      	b.n	800302a <HAL_GPIO_Init+0x1fa>
 8003020:	2302      	movs	r3, #2
 8003022:	e002      	b.n	800302a <HAL_GPIO_Init+0x1fa>
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <HAL_GPIO_Init+0x1fa>
 8003028:	2300      	movs	r3, #0
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	f002 0203 	and.w	r2, r2, #3
 8003030:	0092      	lsls	r2, r2, #2
 8003032:	4093      	lsls	r3, r2
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800303a:	4937      	ldr	r1, [pc, #220]	; (8003118 <HAL_GPIO_Init+0x2e8>)
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	089b      	lsrs	r3, r3, #2
 8003040:	3302      	adds	r3, #2
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003048:	4b39      	ldr	r3, [pc, #228]	; (8003130 <HAL_GPIO_Init+0x300>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	43db      	mvns	r3, r3
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4013      	ands	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4313      	orrs	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800306c:	4a30      	ldr	r2, [pc, #192]	; (8003130 <HAL_GPIO_Init+0x300>)
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003072:	4b2f      	ldr	r3, [pc, #188]	; (8003130 <HAL_GPIO_Init+0x300>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	43db      	mvns	r3, r3
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4013      	ands	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003096:	4a26      	ldr	r2, [pc, #152]	; (8003130 <HAL_GPIO_Init+0x300>)
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800309c:	4b24      	ldr	r3, [pc, #144]	; (8003130 <HAL_GPIO_Init+0x300>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4013      	ands	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4313      	orrs	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030c0:	4a1b      	ldr	r2, [pc, #108]	; (8003130 <HAL_GPIO_Init+0x300>)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030c6:	4b1a      	ldr	r3, [pc, #104]	; (8003130 <HAL_GPIO_Init+0x300>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4013      	ands	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030ea:	4a11      	ldr	r2, [pc, #68]	; (8003130 <HAL_GPIO_Init+0x300>)
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	3301      	adds	r3, #1
 80030f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	f47f ae9d 	bne.w	8002e40 <HAL_GPIO_Init+0x10>
  }
}
 8003106:	bf00      	nop
 8003108:	bf00      	nop
 800310a:	371c      	adds	r7, #28
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	40021000 	.word	0x40021000
 8003118:	40010000 	.word	0x40010000
 800311c:	48000400 	.word	0x48000400
 8003120:	48000800 	.word	0x48000800
 8003124:	48000c00 	.word	0x48000c00
 8003128:	48001000 	.word	0x48001000
 800312c:	48001400 	.word	0x48001400
 8003130:	40010400 	.word	0x40010400

08003134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	807b      	strh	r3, [r7, #2]
 8003140:	4613      	mov	r3, r2
 8003142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003144:	787b      	ldrb	r3, [r7, #1]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800314a:	887a      	ldrh	r2, [r7, #2]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003150:	e002      	b.n	8003158 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800316e:	4b08      	ldr	r3, [pc, #32]	; (8003190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003170:	695a      	ldr	r2, [r3, #20]
 8003172:	88fb      	ldrh	r3, [r7, #6]
 8003174:	4013      	ands	r3, r2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d006      	beq.n	8003188 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800317a:	4a05      	ldr	r2, [pc, #20]	; (8003190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003180:	88fb      	ldrh	r3, [r7, #6]
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f806 	bl	8003194 <HAL_GPIO_EXTI_Callback>
  }
}
 8003188:	bf00      	nop
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40010400 	.word	0x40010400

08003194 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d141      	bne.n	800323e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031ba:	4b4b      	ldr	r3, [pc, #300]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c6:	d131      	bne.n	800322c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031c8:	4b47      	ldr	r3, [pc, #284]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ce:	4a46      	ldr	r2, [pc, #280]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031d8:	4b43      	ldr	r3, [pc, #268]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031e0:	4a41      	ldr	r2, [pc, #260]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031e8:	4b40      	ldr	r3, [pc, #256]	; (80032ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2232      	movs	r2, #50	; 0x32
 80031ee:	fb02 f303 	mul.w	r3, r2, r3
 80031f2:	4a3f      	ldr	r2, [pc, #252]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031f4:	fba2 2303 	umull	r2, r3, r2, r3
 80031f8:	0c9b      	lsrs	r3, r3, #18
 80031fa:	3301      	adds	r3, #1
 80031fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031fe:	e002      	b.n	8003206 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3b01      	subs	r3, #1
 8003204:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003206:	4b38      	ldr	r3, [pc, #224]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003212:	d102      	bne.n	800321a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f2      	bne.n	8003200 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800321a:	4b33      	ldr	r3, [pc, #204]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003226:	d158      	bne.n	80032da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e057      	b.n	80032dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800322c:	4b2e      	ldr	r3, [pc, #184]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800322e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003232:	4a2d      	ldr	r2, [pc, #180]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003238:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800323c:	e04d      	b.n	80032da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003244:	d141      	bne.n	80032ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003246:	4b28      	ldr	r3, [pc, #160]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800324e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003252:	d131      	bne.n	80032b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003254:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800325a:	4a23      	ldr	r2, [pc, #140]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003260:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003264:	4b20      	ldr	r3, [pc, #128]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800326c:	4a1e      	ldr	r2, [pc, #120]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003272:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003274:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2232      	movs	r2, #50	; 0x32
 800327a:	fb02 f303 	mul.w	r3, r2, r3
 800327e:	4a1c      	ldr	r2, [pc, #112]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003280:	fba2 2303 	umull	r2, r3, r2, r3
 8003284:	0c9b      	lsrs	r3, r3, #18
 8003286:	3301      	adds	r3, #1
 8003288:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800328a:	e002      	b.n	8003292 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	3b01      	subs	r3, #1
 8003290:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003292:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329e:	d102      	bne.n	80032a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f2      	bne.n	800328c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032a6:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b2:	d112      	bne.n	80032da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e011      	b.n	80032dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032be:	4a0a      	ldr	r2, [pc, #40]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032c8:	e007      	b.n	80032da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032ca:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032d2:	4a05      	ldr	r2, [pc, #20]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	40007000 	.word	0x40007000
 80032ec:	20000000 	.word	0x20000000
 80032f0:	431bde83 	.word	0x431bde83

080032f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80032f8:	4b05      	ldr	r3, [pc, #20]	; (8003310 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	4a04      	ldr	r2, [pc, #16]	; (8003310 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003302:	6093      	str	r3, [r2, #8]
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40007000 	.word	0x40007000

08003314 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e306      	b.n	8003934 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d075      	beq.n	800341e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003332:	4b97      	ldr	r3, [pc, #604]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 030c 	and.w	r3, r3, #12
 800333a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800333c:	4b94      	ldr	r3, [pc, #592]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f003 0303 	and.w	r3, r3, #3
 8003344:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	2b0c      	cmp	r3, #12
 800334a:	d102      	bne.n	8003352 <HAL_RCC_OscConfig+0x3e>
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2b03      	cmp	r3, #3
 8003350:	d002      	beq.n	8003358 <HAL_RCC_OscConfig+0x44>
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	2b08      	cmp	r3, #8
 8003356:	d10b      	bne.n	8003370 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003358:	4b8d      	ldr	r3, [pc, #564]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d05b      	beq.n	800341c <HAL_RCC_OscConfig+0x108>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d157      	bne.n	800341c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e2e1      	b.n	8003934 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003378:	d106      	bne.n	8003388 <HAL_RCC_OscConfig+0x74>
 800337a:	4b85      	ldr	r3, [pc, #532]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a84      	ldr	r2, [pc, #528]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 8003380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	e01d      	b.n	80033c4 <HAL_RCC_OscConfig+0xb0>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003390:	d10c      	bne.n	80033ac <HAL_RCC_OscConfig+0x98>
 8003392:	4b7f      	ldr	r3, [pc, #508]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a7e      	ldr	r2, [pc, #504]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 8003398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	4b7c      	ldr	r3, [pc, #496]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a7b      	ldr	r2, [pc, #492]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 80033a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	e00b      	b.n	80033c4 <HAL_RCC_OscConfig+0xb0>
 80033ac:	4b78      	ldr	r3, [pc, #480]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a77      	ldr	r2, [pc, #476]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 80033b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	4b75      	ldr	r3, [pc, #468]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a74      	ldr	r2, [pc, #464]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 80033be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d013      	beq.n	80033f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fe fa7a 	bl	80018c4 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d4:	f7fe fa76 	bl	80018c4 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	; 0x64
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e2a6      	b.n	8003934 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033e6:	4b6a      	ldr	r3, [pc, #424]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0xc0>
 80033f2:	e014      	b.n	800341e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fe fa66 	bl	80018c4 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033fc:	f7fe fa62 	bl	80018c4 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b64      	cmp	r3, #100	; 0x64
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e292      	b.n	8003934 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800340e:	4b60      	ldr	r3, [pc, #384]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0xe8>
 800341a:	e000      	b.n	800341e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800341c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d075      	beq.n	8003516 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800342a:	4b59      	ldr	r3, [pc, #356]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
 8003432:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003434:	4b56      	ldr	r3, [pc, #344]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	2b0c      	cmp	r3, #12
 8003442:	d102      	bne.n	800344a <HAL_RCC_OscConfig+0x136>
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d002      	beq.n	8003450 <HAL_RCC_OscConfig+0x13c>
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	2b04      	cmp	r3, #4
 800344e:	d11f      	bne.n	8003490 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003450:	4b4f      	ldr	r3, [pc, #316]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_RCC_OscConfig+0x154>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e265      	b.n	8003934 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003468:	4b49      	ldr	r3, [pc, #292]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	061b      	lsls	r3, r3, #24
 8003476:	4946      	ldr	r1, [pc, #280]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 8003478:	4313      	orrs	r3, r2
 800347a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800347c:	4b45      	ldr	r3, [pc, #276]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f7fd fbd5 	bl	8000c30 <HAL_InitTick>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d043      	beq.n	8003514 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e251      	b.n	8003934 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d023      	beq.n	80034e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003498:	4b3d      	ldr	r3, [pc, #244]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a3c      	ldr	r2, [pc, #240]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 800349e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fe fa0e 	bl	80018c4 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ac:	f7fe fa0a 	bl	80018c4 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e23a      	b.n	8003934 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034be:	4b34      	ldr	r3, [pc, #208]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ca:	4b31      	ldr	r3, [pc, #196]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	061b      	lsls	r3, r3, #24
 80034d8:	492d      	ldr	r1, [pc, #180]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	604b      	str	r3, [r1, #4]
 80034de:	e01a      	b.n	8003516 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034e0:	4b2b      	ldr	r3, [pc, #172]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a2a      	ldr	r2, [pc, #168]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 80034e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ec:	f7fe f9ea 	bl	80018c4 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f4:	f7fe f9e6 	bl	80018c4 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e216      	b.n	8003934 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003506:	4b22      	ldr	r3, [pc, #136]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x1e0>
 8003512:	e000      	b.n	8003516 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003514:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d041      	beq.n	80035a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d01c      	beq.n	8003564 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800352a:	4b19      	ldr	r3, [pc, #100]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 800352c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003530:	4a17      	ldr	r2, [pc, #92]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353a:	f7fe f9c3 	bl	80018c4 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003542:	f7fe f9bf 	bl	80018c4 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e1ef      	b.n	8003934 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003554:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 8003556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0ef      	beq.n	8003542 <HAL_RCC_OscConfig+0x22e>
 8003562:	e020      	b.n	80035a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003564:	4b0a      	ldr	r3, [pc, #40]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 8003566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800356a:	4a09      	ldr	r2, [pc, #36]	; (8003590 <HAL_RCC_OscConfig+0x27c>)
 800356c:	f023 0301 	bic.w	r3, r3, #1
 8003570:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003574:	f7fe f9a6 	bl	80018c4 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800357a:	e00d      	b.n	8003598 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800357c:	f7fe f9a2 	bl	80018c4 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d906      	bls.n	8003598 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e1d2      	b.n	8003934 <HAL_RCC_OscConfig+0x620>
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000
 8003594:	200000c0 	.word	0x200000c0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003598:	4b8c      	ldr	r3, [pc, #560]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 800359a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1ea      	bne.n	800357c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 80a6 	beq.w	8003700 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035b4:	2300      	movs	r3, #0
 80035b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035b8:	4b84      	ldr	r3, [pc, #528]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 80035ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_RCC_OscConfig+0x2b4>
 80035c4:	2301      	movs	r3, #1
 80035c6:	e000      	b.n	80035ca <HAL_RCC_OscConfig+0x2b6>
 80035c8:	2300      	movs	r3, #0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00d      	beq.n	80035ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ce:	4b7f      	ldr	r3, [pc, #508]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 80035d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d2:	4a7e      	ldr	r2, [pc, #504]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 80035d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d8:	6593      	str	r3, [r2, #88]	; 0x58
 80035da:	4b7c      	ldr	r3, [pc, #496]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 80035dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035e6:	2301      	movs	r3, #1
 80035e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ea:	4b79      	ldr	r3, [pc, #484]	; (80037d0 <HAL_RCC_OscConfig+0x4bc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d118      	bne.n	8003628 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035f6:	4b76      	ldr	r3, [pc, #472]	; (80037d0 <HAL_RCC_OscConfig+0x4bc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a75      	ldr	r2, [pc, #468]	; (80037d0 <HAL_RCC_OscConfig+0x4bc>)
 80035fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003602:	f7fe f95f 	bl	80018c4 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800360a:	f7fe f95b 	bl	80018c4 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e18b      	b.n	8003934 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800361c:	4b6c      	ldr	r3, [pc, #432]	; (80037d0 <HAL_RCC_OscConfig+0x4bc>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0f0      	beq.n	800360a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d108      	bne.n	8003642 <HAL_RCC_OscConfig+0x32e>
 8003630:	4b66      	ldr	r3, [pc, #408]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003636:	4a65      	ldr	r2, [pc, #404]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003640:	e024      	b.n	800368c <HAL_RCC_OscConfig+0x378>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2b05      	cmp	r3, #5
 8003648:	d110      	bne.n	800366c <HAL_RCC_OscConfig+0x358>
 800364a:	4b60      	ldr	r3, [pc, #384]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 800364c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003650:	4a5e      	ldr	r2, [pc, #376]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 8003652:	f043 0304 	orr.w	r3, r3, #4
 8003656:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800365a:	4b5c      	ldr	r3, [pc, #368]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 800365c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003660:	4a5a      	ldr	r2, [pc, #360]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800366a:	e00f      	b.n	800368c <HAL_RCC_OscConfig+0x378>
 800366c:	4b57      	ldr	r3, [pc, #348]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003672:	4a56      	ldr	r2, [pc, #344]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 8003674:	f023 0301 	bic.w	r3, r3, #1
 8003678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800367c:	4b53      	ldr	r3, [pc, #332]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 800367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003682:	4a52      	ldr	r2, [pc, #328]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 8003684:	f023 0304 	bic.w	r3, r3, #4
 8003688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d016      	beq.n	80036c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003694:	f7fe f916 	bl	80018c4 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800369a:	e00a      	b.n	80036b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369c:	f7fe f912 	bl	80018c4 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e140      	b.n	8003934 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b2:	4b46      	ldr	r3, [pc, #280]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 80036b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0ed      	beq.n	800369c <HAL_RCC_OscConfig+0x388>
 80036c0:	e015      	b.n	80036ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c2:	f7fe f8ff 	bl	80018c4 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036c8:	e00a      	b.n	80036e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ca:	f7fe f8fb 	bl	80018c4 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d8:	4293      	cmp	r3, r2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e129      	b.n	8003934 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036e0:	4b3a      	ldr	r3, [pc, #232]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1ed      	bne.n	80036ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036ee:	7ffb      	ldrb	r3, [r7, #31]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d105      	bne.n	8003700 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f4:	4b35      	ldr	r3, [pc, #212]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 80036f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f8:	4a34      	ldr	r2, [pc, #208]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 80036fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b00      	cmp	r3, #0
 800370a:	d03c      	beq.n	8003786 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01c      	beq.n	800374e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003714:	4b2d      	ldr	r3, [pc, #180]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 8003716:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800371a:	4a2c      	ldr	r2, [pc, #176]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003724:	f7fe f8ce 	bl	80018c4 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800372c:	f7fe f8ca 	bl	80018c4 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e0fa      	b.n	8003934 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800373e:	4b23      	ldr	r3, [pc, #140]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 8003740:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0ef      	beq.n	800372c <HAL_RCC_OscConfig+0x418>
 800374c:	e01b      	b.n	8003786 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800374e:	4b1f      	ldr	r3, [pc, #124]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 8003750:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003754:	4a1d      	ldr	r2, [pc, #116]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 8003756:	f023 0301 	bic.w	r3, r3, #1
 800375a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375e:	f7fe f8b1 	bl	80018c4 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003766:	f7fe f8ad 	bl	80018c4 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e0dd      	b.n	8003934 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003778:	4b14      	ldr	r3, [pc, #80]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 800377a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1ef      	bne.n	8003766 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 80d1 	beq.w	8003932 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003790:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 030c 	and.w	r3, r3, #12
 8003798:	2b0c      	cmp	r3, #12
 800379a:	f000 808b 	beq.w	80038b4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d15e      	bne.n	8003864 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a6:	4b09      	ldr	r3, [pc, #36]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a08      	ldr	r2, [pc, #32]	; (80037cc <HAL_RCC_OscConfig+0x4b8>)
 80037ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b2:	f7fe f887 	bl	80018c4 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037b8:	e00c      	b.n	80037d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ba:	f7fe f883 	bl	80018c4 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d905      	bls.n	80037d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e0b3      	b.n	8003934 <HAL_RCC_OscConfig+0x620>
 80037cc:	40021000 	.word	0x40021000
 80037d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d4:	4b59      	ldr	r3, [pc, #356]	; (800393c <HAL_RCC_OscConfig+0x628>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1ec      	bne.n	80037ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037e0:	4b56      	ldr	r3, [pc, #344]	; (800393c <HAL_RCC_OscConfig+0x628>)
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	4b56      	ldr	r3, [pc, #344]	; (8003940 <HAL_RCC_OscConfig+0x62c>)
 80037e6:	4013      	ands	r3, r2
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6a11      	ldr	r1, [r2, #32]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037f0:	3a01      	subs	r2, #1
 80037f2:	0112      	lsls	r2, r2, #4
 80037f4:	4311      	orrs	r1, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80037fa:	0212      	lsls	r2, r2, #8
 80037fc:	4311      	orrs	r1, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003802:	0852      	lsrs	r2, r2, #1
 8003804:	3a01      	subs	r2, #1
 8003806:	0552      	lsls	r2, r2, #21
 8003808:	4311      	orrs	r1, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800380e:	0852      	lsrs	r2, r2, #1
 8003810:	3a01      	subs	r2, #1
 8003812:	0652      	lsls	r2, r2, #25
 8003814:	4311      	orrs	r1, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800381a:	06d2      	lsls	r2, r2, #27
 800381c:	430a      	orrs	r2, r1
 800381e:	4947      	ldr	r1, [pc, #284]	; (800393c <HAL_RCC_OscConfig+0x628>)
 8003820:	4313      	orrs	r3, r2
 8003822:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003824:	4b45      	ldr	r3, [pc, #276]	; (800393c <HAL_RCC_OscConfig+0x628>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a44      	ldr	r2, [pc, #272]	; (800393c <HAL_RCC_OscConfig+0x628>)
 800382a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800382e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003830:	4b42      	ldr	r3, [pc, #264]	; (800393c <HAL_RCC_OscConfig+0x628>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	4a41      	ldr	r2, [pc, #260]	; (800393c <HAL_RCC_OscConfig+0x628>)
 8003836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800383a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fe f842 	bl	80018c4 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003844:	f7fe f83e 	bl	80018c4 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e06e      	b.n	8003934 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003856:	4b39      	ldr	r3, [pc, #228]	; (800393c <HAL_RCC_OscConfig+0x628>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x530>
 8003862:	e066      	b.n	8003932 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003864:	4b35      	ldr	r3, [pc, #212]	; (800393c <HAL_RCC_OscConfig+0x628>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a34      	ldr	r2, [pc, #208]	; (800393c <HAL_RCC_OscConfig+0x628>)
 800386a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800386e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003870:	4b32      	ldr	r3, [pc, #200]	; (800393c <HAL_RCC_OscConfig+0x628>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4a31      	ldr	r2, [pc, #196]	; (800393c <HAL_RCC_OscConfig+0x628>)
 8003876:	f023 0303 	bic.w	r3, r3, #3
 800387a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800387c:	4b2f      	ldr	r3, [pc, #188]	; (800393c <HAL_RCC_OscConfig+0x628>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4a2e      	ldr	r2, [pc, #184]	; (800393c <HAL_RCC_OscConfig+0x628>)
 8003882:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800388a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7fe f81a 	bl	80018c4 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003894:	f7fe f816 	bl	80018c4 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e046      	b.n	8003934 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038a6:	4b25      	ldr	r3, [pc, #148]	; (800393c <HAL_RCC_OscConfig+0x628>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x580>
 80038b2:	e03e      	b.n	8003932 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e039      	b.n	8003934 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80038c0:	4b1e      	ldr	r3, [pc, #120]	; (800393c <HAL_RCC_OscConfig+0x628>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f003 0203 	and.w	r2, r3, #3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d12c      	bne.n	800392e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	3b01      	subs	r3, #1
 80038e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d123      	bne.n	800392e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d11b      	bne.n	800392e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003902:	429a      	cmp	r2, r3
 8003904:	d113      	bne.n	800392e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	085b      	lsrs	r3, r3, #1
 8003912:	3b01      	subs	r3, #1
 8003914:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003916:	429a      	cmp	r2, r3
 8003918:	d109      	bne.n	800392e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003924:	085b      	lsrs	r3, r3, #1
 8003926:	3b01      	subs	r3, #1
 8003928:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800392a:	429a      	cmp	r2, r3
 800392c:	d001      	beq.n	8003932 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3720      	adds	r7, #32
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40021000 	.word	0x40021000
 8003940:	019f800c 	.word	0x019f800c

08003944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e11e      	b.n	8003b9a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800395c:	4b91      	ldr	r3, [pc, #580]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 030f 	and.w	r3, r3, #15
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d910      	bls.n	800398c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396a:	4b8e      	ldr	r3, [pc, #568]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f023 020f 	bic.w	r2, r3, #15
 8003972:	498c      	ldr	r1, [pc, #560]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	4313      	orrs	r3, r2
 8003978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800397a:	4b8a      	ldr	r3, [pc, #552]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d001      	beq.n	800398c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e106      	b.n	8003b9a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d073      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b03      	cmp	r3, #3
 800399e:	d129      	bne.n	80039f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039a0:	4b81      	ldr	r3, [pc, #516]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0f4      	b.n	8003b9a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80039b0:	f000 f9d0 	bl	8003d54 <RCC_GetSysClockFreqFromPLLSource>
 80039b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4a7c      	ldr	r2, [pc, #496]	; (8003bac <HAL_RCC_ClockConfig+0x268>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d93f      	bls.n	8003a3e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039be:	4b7a      	ldr	r3, [pc, #488]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d009      	beq.n	80039de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d033      	beq.n	8003a3e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d12f      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039de:	4b72      	ldr	r3, [pc, #456]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039e6:	4a70      	ldr	r2, [pc, #448]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 80039e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039ee:	2380      	movs	r3, #128	; 0x80
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	e024      	b.n	8003a3e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d107      	bne.n	8003a0c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039fc:	4b6a      	ldr	r3, [pc, #424]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d109      	bne.n	8003a1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0c6      	b.n	8003b9a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a0c:	4b66      	ldr	r3, [pc, #408]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0be      	b.n	8003b9a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a1c:	f000 f8ce 	bl	8003bbc <HAL_RCC_GetSysClockFreq>
 8003a20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4a61      	ldr	r2, [pc, #388]	; (8003bac <HAL_RCC_ClockConfig+0x268>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d909      	bls.n	8003a3e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a2a:	4b5f      	ldr	r3, [pc, #380]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a32:	4a5d      	ldr	r2, [pc, #372]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a38:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a3a:	2380      	movs	r3, #128	; 0x80
 8003a3c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a3e:	4b5a      	ldr	r3, [pc, #360]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f023 0203 	bic.w	r2, r3, #3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	4957      	ldr	r1, [pc, #348]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a50:	f7fd ff38 	bl	80018c4 <HAL_GetTick>
 8003a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a56:	e00a      	b.n	8003a6e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a58:	f7fd ff34 	bl	80018c4 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e095      	b.n	8003b9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6e:	4b4e      	ldr	r3, [pc, #312]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 020c 	and.w	r2, r3, #12
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d1eb      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d023      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a98:	4b43      	ldr	r3, [pc, #268]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	4a42      	ldr	r2, [pc, #264]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003a9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003aa2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d007      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ab0:	4b3d      	ldr	r3, [pc, #244]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ab8:	4a3b      	ldr	r2, [pc, #236]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003aba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003abe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac0:	4b39      	ldr	r3, [pc, #228]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	4936      	ldr	r1, [pc, #216]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	608b      	str	r3, [r1, #8]
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2b80      	cmp	r3, #128	; 0x80
 8003ad8:	d105      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003ada:	4b33      	ldr	r3, [pc, #204]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	4a32      	ldr	r2, [pc, #200]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003ae0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ae4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae6:	4b2f      	ldr	r3, [pc, #188]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d21d      	bcs.n	8003b30 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af4:	4b2b      	ldr	r3, [pc, #172]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f023 020f 	bic.w	r2, r3, #15
 8003afc:	4929      	ldr	r1, [pc, #164]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b04:	f7fd fede 	bl	80018c4 <HAL_GetTick>
 8003b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0a:	e00a      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b0c:	f7fd feda 	bl	80018c4 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e03b      	b.n	8003b9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b22:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <HAL_RCC_ClockConfig+0x260>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d1ed      	bne.n	8003b0c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4917      	ldr	r1, [pc, #92]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d009      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b5a:	4b13      	ldr	r3, [pc, #76]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	490f      	ldr	r1, [pc, #60]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b6e:	f000 f825 	bl	8003bbc <HAL_RCC_GetSysClockFreq>
 8003b72:	4602      	mov	r2, r0
 8003b74:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <HAL_RCC_ClockConfig+0x264>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	490c      	ldr	r1, [pc, #48]	; (8003bb0 <HAL_RCC_ClockConfig+0x26c>)
 8003b80:	5ccb      	ldrb	r3, [r1, r3]
 8003b82:	f003 031f 	and.w	r3, r3, #31
 8003b86:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8a:	4a0a      	ldr	r2, [pc, #40]	; (8003bb4 <HAL_RCC_ClockConfig+0x270>)
 8003b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <HAL_RCC_ClockConfig+0x274>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fd f84c 	bl	8000c30 <HAL_InitTick>
 8003b98:	4603      	mov	r3, r0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40022000 	.word	0x40022000
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	04c4b400 	.word	0x04c4b400
 8003bb0:	08009400 	.word	0x08009400
 8003bb4:	20000000 	.word	0x20000000
 8003bb8:	200000c0 	.word	0x200000c0

08003bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003bc2:	4b2c      	ldr	r3, [pc, #176]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d102      	bne.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bce:	4b2a      	ldr	r3, [pc, #168]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	e047      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003bd4:	4b27      	ldr	r3, [pc, #156]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 030c 	and.w	r3, r3, #12
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d102      	bne.n	8003be6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003be0:	4b26      	ldr	r3, [pc, #152]	; (8003c7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	e03e      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003be6:	4b23      	ldr	r3, [pc, #140]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b0c      	cmp	r3, #12
 8003bf0:	d136      	bne.n	8003c60 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bf2:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bfc:	4b1d      	ldr	r3, [pc, #116]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	3301      	adds	r3, #1
 8003c08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d10c      	bne.n	8003c2a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c10:	4a1a      	ldr	r2, [pc, #104]	; (8003c7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c18:	4a16      	ldr	r2, [pc, #88]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c1a:	68d2      	ldr	r2, [r2, #12]
 8003c1c:	0a12      	lsrs	r2, r2, #8
 8003c1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c22:	fb02 f303 	mul.w	r3, r2, r3
 8003c26:	617b      	str	r3, [r7, #20]
      break;
 8003c28:	e00c      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c2a:	4a13      	ldr	r2, [pc, #76]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c32:	4a10      	ldr	r2, [pc, #64]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c34:	68d2      	ldr	r2, [r2, #12]
 8003c36:	0a12      	lsrs	r2, r2, #8
 8003c38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c3c:	fb02 f303 	mul.w	r3, r2, r3
 8003c40:	617b      	str	r3, [r7, #20]
      break;
 8003c42:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	0e5b      	lsrs	r3, r3, #25
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	3301      	adds	r3, #1
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	e001      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c64:	693b      	ldr	r3, [r7, #16]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40021000 	.word	0x40021000
 8003c78:	00f42400 	.word	0x00f42400
 8003c7c:	016e3600 	.word	0x016e3600

08003c80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c84:	4b03      	ldr	r3, [pc, #12]	; (8003c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c86:	681b      	ldr	r3, [r3, #0]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	20000000 	.word	0x20000000

08003c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c9c:	f7ff fff0 	bl	8003c80 <HAL_RCC_GetHCLKFreq>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	0a1b      	lsrs	r3, r3, #8
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	4904      	ldr	r1, [pc, #16]	; (8003cc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cae:	5ccb      	ldrb	r3, [r1, r3]
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	08009410 	.word	0x08009410

08003cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cc8:	f7ff ffda 	bl	8003c80 <HAL_RCC_GetHCLKFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	0adb      	lsrs	r3, r3, #11
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	4904      	ldr	r1, [pc, #16]	; (8003cec <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	f003 031f 	and.w	r3, r3, #31
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	08009410 	.word	0x08009410

08003cf0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	220f      	movs	r2, #15
 8003cfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003d00:	4b12      	ldr	r3, [pc, #72]	; (8003d4c <HAL_RCC_GetClockConfig+0x5c>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 0203 	and.w	r2, r3, #3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003d0c:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <HAL_RCC_GetClockConfig+0x5c>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003d18:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <HAL_RCC_GetClockConfig+0x5c>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003d24:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <HAL_RCC_GetClockConfig+0x5c>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	08db      	lsrs	r3, r3, #3
 8003d2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003d32:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <HAL_RCC_GetClockConfig+0x60>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 020f 	and.w	r2, r3, #15
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	601a      	str	r2, [r3, #0]
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	40022000 	.word	0x40022000

08003d54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d5a:	4b1e      	ldr	r3, [pc, #120]	; (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d64:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	3301      	adds	r3, #1
 8003d70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d10c      	bne.n	8003d92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d78:	4a17      	ldr	r2, [pc, #92]	; (8003dd8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d80:	4a14      	ldr	r2, [pc, #80]	; (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d82:	68d2      	ldr	r2, [r2, #12]
 8003d84:	0a12      	lsrs	r2, r2, #8
 8003d86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d8a:	fb02 f303 	mul.w	r3, r2, r3
 8003d8e:	617b      	str	r3, [r7, #20]
    break;
 8003d90:	e00c      	b.n	8003dac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d92:	4a12      	ldr	r2, [pc, #72]	; (8003ddc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9a:	4a0e      	ldr	r2, [pc, #56]	; (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d9c:	68d2      	ldr	r2, [r2, #12]
 8003d9e:	0a12      	lsrs	r2, r2, #8
 8003da0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003da4:	fb02 f303 	mul.w	r3, r2, r3
 8003da8:	617b      	str	r3, [r7, #20]
    break;
 8003daa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dac:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	0e5b      	lsrs	r3, r3, #25
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	3301      	adds	r3, #1
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003dc6:	687b      	ldr	r3, [r7, #4]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	371c      	adds	r7, #28
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	016e3600 	.word	0x016e3600
 8003ddc:	00f42400 	.word	0x00f42400

08003de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003de8:	2300      	movs	r3, #0
 8003dea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dec:	2300      	movs	r3, #0
 8003dee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 8098 	beq.w	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e02:	4b43      	ldr	r3, [pc, #268]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10d      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0e:	4b40      	ldr	r3, [pc, #256]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e12:	4a3f      	ldr	r2, [pc, #252]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e18:	6593      	str	r3, [r2, #88]	; 0x58
 8003e1a:	4b3d      	ldr	r3, [pc, #244]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e22:	60bb      	str	r3, [r7, #8]
 8003e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e26:	2301      	movs	r3, #1
 8003e28:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e2a:	4b3a      	ldr	r3, [pc, #232]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a39      	ldr	r2, [pc, #228]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e36:	f7fd fd45 	bl	80018c4 <HAL_GetTick>
 8003e3a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e3c:	e009      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e3e:	f7fd fd41 	bl	80018c4 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d902      	bls.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	74fb      	strb	r3, [r7, #19]
        break;
 8003e50:	e005      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e52:	4b30      	ldr	r3, [pc, #192]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0ef      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e5e:	7cfb      	ldrb	r3, [r7, #19]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d159      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e64:	4b2a      	ldr	r3, [pc, #168]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d01e      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d019      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e80:	4b23      	ldr	r3, [pc, #140]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e8c:	4b20      	ldr	r3, [pc, #128]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e92:	4a1f      	ldr	r2, [pc, #124]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e9c:	4b1c      	ldr	r3, [pc, #112]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	4a1b      	ldr	r2, [pc, #108]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003eac:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d016      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebe:	f7fd fd01 	bl	80018c4 <HAL_GetTick>
 8003ec2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec4:	e00b      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec6:	f7fd fcfd 	bl	80018c4 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d902      	bls.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	74fb      	strb	r3, [r7, #19]
            break;
 8003edc:	e006      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ede:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0ec      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003eec:	7cfb      	ldrb	r3, [r7, #19]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10b      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ef2:	4b07      	ldr	r3, [pc, #28]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f00:	4903      	ldr	r1, [pc, #12]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f08:	e008      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f0a:	7cfb      	ldrb	r3, [r7, #19]
 8003f0c:	74bb      	strb	r3, [r7, #18]
 8003f0e:	e005      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003f10:	40021000 	.word	0x40021000
 8003f14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f18:	7cfb      	ldrb	r3, [r7, #19]
 8003f1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f1c:	7c7b      	ldrb	r3, [r7, #17]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d105      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f22:	4ba7      	ldr	r3, [pc, #668]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f26:	4aa6      	ldr	r2, [pc, #664]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f3a:	4ba1      	ldr	r3, [pc, #644]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f40:	f023 0203 	bic.w	r2, r3, #3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	499d      	ldr	r1, [pc, #628]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f5c:	4b98      	ldr	r3, [pc, #608]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f62:	f023 020c 	bic.w	r2, r3, #12
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	4995      	ldr	r1, [pc, #596]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f7e:	4b90      	ldr	r3, [pc, #576]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	498c      	ldr	r1, [pc, #560]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0308 	and.w	r3, r3, #8
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fa0:	4b87      	ldr	r3, [pc, #540]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	4984      	ldr	r1, [pc, #528]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0310 	and.w	r3, r3, #16
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fc2:	4b7f      	ldr	r3, [pc, #508]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	497b      	ldr	r1, [pc, #492]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fe4:	4b76      	ldr	r3, [pc, #472]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	4973      	ldr	r1, [pc, #460]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004006:	4b6e      	ldr	r3, [pc, #440]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	496a      	ldr	r1, [pc, #424]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004028:	4b65      	ldr	r3, [pc, #404]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	4962      	ldr	r1, [pc, #392]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800404a:	4b5d      	ldr	r3, [pc, #372]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004050:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	4959      	ldr	r1, [pc, #356]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800406c:	4b54      	ldr	r3, [pc, #336]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800406e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004072:	f023 0203 	bic.w	r2, r3, #3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	4951      	ldr	r1, [pc, #324]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800408e:	4b4c      	ldr	r3, [pc, #304]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004094:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	4948      	ldr	r1, [pc, #288]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d015      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040b0:	4b43      	ldr	r3, [pc, #268]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	4940      	ldr	r1, [pc, #256]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040ce:	d105      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040d0:	4b3b      	ldr	r3, [pc, #236]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	4a3a      	ldr	r2, [pc, #232]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d015      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040e8:	4b35      	ldr	r3, [pc, #212]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f6:	4932      	ldr	r1, [pc, #200]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004106:	d105      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004108:	4b2d      	ldr	r3, [pc, #180]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4a2c      	ldr	r2, [pc, #176]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004112:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d015      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004120:	4b27      	ldr	r3, [pc, #156]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004126:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412e:	4924      	ldr	r1, [pc, #144]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800413e:	d105      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004140:	4b1f      	ldr	r3, [pc, #124]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4a1e      	ldr	r2, [pc, #120]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004146:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800414a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d015      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004158:	4b19      	ldr	r3, [pc, #100]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004166:	4916      	ldr	r1, [pc, #88]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004172:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004176:	d105      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004178:	4b11      	ldr	r3, [pc, #68]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4a10      	ldr	r2, [pc, #64]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004182:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d019      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004190:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004196:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	4908      	ldr	r1, [pc, #32]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041ae:	d109      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041b0:	4b03      	ldr	r3, [pc, #12]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	4a02      	ldr	r2, [pc, #8]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041ba:	60d3      	str	r3, [r2, #12]
 80041bc:	e002      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80041be:	bf00      	nop
 80041c0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d015      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80041d0:	4b29      	ldr	r3, [pc, #164]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041de:	4926      	ldr	r1, [pc, #152]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041ee:	d105      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041f0:	4b21      	ldr	r3, [pc, #132]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	4a20      	ldr	r2, [pc, #128]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041fa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d015      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004208:	4b1b      	ldr	r3, [pc, #108]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800420a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004216:	4918      	ldr	r1, [pc, #96]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004226:	d105      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004228:	4b13      	ldr	r3, [pc, #76]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	4a12      	ldr	r2, [pc, #72]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800422e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004232:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d015      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004240:	4b0d      	ldr	r3, [pc, #52]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004242:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004246:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424e:	490a      	ldr	r1, [pc, #40]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800425a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800425e:	d105      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004260:	4b05      	ldr	r3, [pc, #20]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	4a04      	ldr	r2, [pc, #16]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004266:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800426a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800426c:	7cbb      	ldrb	r3, [r7, #18]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40021000 	.word	0x40021000

0800427c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e049      	b.n	8004322 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d106      	bne.n	80042a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fc ff6e 	bl	8001184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3304      	adds	r3, #4
 80042b8:	4619      	mov	r1, r3
 80042ba:	4610      	mov	r0, r2
 80042bc:	f000 fdf4 	bl	8004ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
	...

0800432c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b01      	cmp	r3, #1
 800433e:	d001      	beq.n	8004344 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e054      	b.n	80043ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a26      	ldr	r2, [pc, #152]	; (80043fc <HAL_TIM_Base_Start_IT+0xd0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d022      	beq.n	80043ac <HAL_TIM_Base_Start_IT+0x80>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436e:	d01d      	beq.n	80043ac <HAL_TIM_Base_Start_IT+0x80>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a22      	ldr	r2, [pc, #136]	; (8004400 <HAL_TIM_Base_Start_IT+0xd4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d018      	beq.n	80043ac <HAL_TIM_Base_Start_IT+0x80>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a21      	ldr	r2, [pc, #132]	; (8004404 <HAL_TIM_Base_Start_IT+0xd8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d013      	beq.n	80043ac <HAL_TIM_Base_Start_IT+0x80>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a1f      	ldr	r2, [pc, #124]	; (8004408 <HAL_TIM_Base_Start_IT+0xdc>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00e      	beq.n	80043ac <HAL_TIM_Base_Start_IT+0x80>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a1e      	ldr	r2, [pc, #120]	; (800440c <HAL_TIM_Base_Start_IT+0xe0>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d009      	beq.n	80043ac <HAL_TIM_Base_Start_IT+0x80>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a1c      	ldr	r2, [pc, #112]	; (8004410 <HAL_TIM_Base_Start_IT+0xe4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d004      	beq.n	80043ac <HAL_TIM_Base_Start_IT+0x80>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a1b      	ldr	r2, [pc, #108]	; (8004414 <HAL_TIM_Base_Start_IT+0xe8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d115      	bne.n	80043d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	4b19      	ldr	r3, [pc, #100]	; (8004418 <HAL_TIM_Base_Start_IT+0xec>)
 80043b4:	4013      	ands	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b06      	cmp	r3, #6
 80043bc:	d015      	beq.n	80043ea <HAL_TIM_Base_Start_IT+0xbe>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c4:	d011      	beq.n	80043ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0201 	orr.w	r2, r2, #1
 80043d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d6:	e008      	b.n	80043ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0201 	orr.w	r2, r2, #1
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	e000      	b.n	80043ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40012c00 	.word	0x40012c00
 8004400:	40000400 	.word	0x40000400
 8004404:	40000800 	.word	0x40000800
 8004408:	40000c00 	.word	0x40000c00
 800440c:	40013400 	.word	0x40013400
 8004410:	40014000 	.word	0x40014000
 8004414:	40015000 	.word	0x40015000
 8004418:	00010007 	.word	0x00010007

0800441c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e049      	b.n	80044c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d106      	bne.n	8004448 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f841 	bl	80044ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3304      	adds	r3, #4
 8004458:	4619      	mov	r1, r3
 800445a:	4610      	mov	r0, r2
 800445c:	f000 fd24 	bl	8004ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
	...

080044e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d109      	bne.n	8004504 <HAL_TIM_PWM_Start+0x24>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	bf14      	ite	ne
 80044fc:	2301      	movne	r3, #1
 80044fe:	2300      	moveq	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	e03c      	b.n	800457e <HAL_TIM_PWM_Start+0x9e>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b04      	cmp	r3, #4
 8004508:	d109      	bne.n	800451e <HAL_TIM_PWM_Start+0x3e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b01      	cmp	r3, #1
 8004514:	bf14      	ite	ne
 8004516:	2301      	movne	r3, #1
 8004518:	2300      	moveq	r3, #0
 800451a:	b2db      	uxtb	r3, r3
 800451c:	e02f      	b.n	800457e <HAL_TIM_PWM_Start+0x9e>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b08      	cmp	r3, #8
 8004522:	d109      	bne.n	8004538 <HAL_TIM_PWM_Start+0x58>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	bf14      	ite	ne
 8004530:	2301      	movne	r3, #1
 8004532:	2300      	moveq	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	e022      	b.n	800457e <HAL_TIM_PWM_Start+0x9e>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b0c      	cmp	r3, #12
 800453c:	d109      	bne.n	8004552 <HAL_TIM_PWM_Start+0x72>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b01      	cmp	r3, #1
 8004548:	bf14      	ite	ne
 800454a:	2301      	movne	r3, #1
 800454c:	2300      	moveq	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	e015      	b.n	800457e <HAL_TIM_PWM_Start+0x9e>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b10      	cmp	r3, #16
 8004556:	d109      	bne.n	800456c <HAL_TIM_PWM_Start+0x8c>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b01      	cmp	r3, #1
 8004562:	bf14      	ite	ne
 8004564:	2301      	movne	r3, #1
 8004566:	2300      	moveq	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	e008      	b.n	800457e <HAL_TIM_PWM_Start+0x9e>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b01      	cmp	r3, #1
 8004576:	bf14      	ite	ne
 8004578:	2301      	movne	r3, #1
 800457a:	2300      	moveq	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e0a6      	b.n	80046d4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d104      	bne.n	8004596 <HAL_TIM_PWM_Start+0xb6>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004594:	e023      	b.n	80045de <HAL_TIM_PWM_Start+0xfe>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b04      	cmp	r3, #4
 800459a:	d104      	bne.n	80045a6 <HAL_TIM_PWM_Start+0xc6>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045a4:	e01b      	b.n	80045de <HAL_TIM_PWM_Start+0xfe>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d104      	bne.n	80045b6 <HAL_TIM_PWM_Start+0xd6>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045b4:	e013      	b.n	80045de <HAL_TIM_PWM_Start+0xfe>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b0c      	cmp	r3, #12
 80045ba:	d104      	bne.n	80045c6 <HAL_TIM_PWM_Start+0xe6>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045c4:	e00b      	b.n	80045de <HAL_TIM_PWM_Start+0xfe>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b10      	cmp	r3, #16
 80045ca:	d104      	bne.n	80045d6 <HAL_TIM_PWM_Start+0xf6>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045d4:	e003      	b.n	80045de <HAL_TIM_PWM_Start+0xfe>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2202      	movs	r2, #2
 80045da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2201      	movs	r2, #1
 80045e4:	6839      	ldr	r1, [r7, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f001 f940 	bl	800586c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a3a      	ldr	r2, [pc, #232]	; (80046dc <HAL_TIM_PWM_Start+0x1fc>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d018      	beq.n	8004628 <HAL_TIM_PWM_Start+0x148>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a39      	ldr	r2, [pc, #228]	; (80046e0 <HAL_TIM_PWM_Start+0x200>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d013      	beq.n	8004628 <HAL_TIM_PWM_Start+0x148>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a37      	ldr	r2, [pc, #220]	; (80046e4 <HAL_TIM_PWM_Start+0x204>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00e      	beq.n	8004628 <HAL_TIM_PWM_Start+0x148>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a36      	ldr	r2, [pc, #216]	; (80046e8 <HAL_TIM_PWM_Start+0x208>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d009      	beq.n	8004628 <HAL_TIM_PWM_Start+0x148>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a34      	ldr	r2, [pc, #208]	; (80046ec <HAL_TIM_PWM_Start+0x20c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d004      	beq.n	8004628 <HAL_TIM_PWM_Start+0x148>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a33      	ldr	r2, [pc, #204]	; (80046f0 <HAL_TIM_PWM_Start+0x210>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d101      	bne.n	800462c <HAL_TIM_PWM_Start+0x14c>
 8004628:	2301      	movs	r3, #1
 800462a:	e000      	b.n	800462e <HAL_TIM_PWM_Start+0x14e>
 800462c:	2300      	movs	r3, #0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d007      	beq.n	8004642 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004640:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a25      	ldr	r2, [pc, #148]	; (80046dc <HAL_TIM_PWM_Start+0x1fc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d022      	beq.n	8004692 <HAL_TIM_PWM_Start+0x1b2>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004654:	d01d      	beq.n	8004692 <HAL_TIM_PWM_Start+0x1b2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a26      	ldr	r2, [pc, #152]	; (80046f4 <HAL_TIM_PWM_Start+0x214>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d018      	beq.n	8004692 <HAL_TIM_PWM_Start+0x1b2>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a24      	ldr	r2, [pc, #144]	; (80046f8 <HAL_TIM_PWM_Start+0x218>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d013      	beq.n	8004692 <HAL_TIM_PWM_Start+0x1b2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a23      	ldr	r2, [pc, #140]	; (80046fc <HAL_TIM_PWM_Start+0x21c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00e      	beq.n	8004692 <HAL_TIM_PWM_Start+0x1b2>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a19      	ldr	r2, [pc, #100]	; (80046e0 <HAL_TIM_PWM_Start+0x200>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d009      	beq.n	8004692 <HAL_TIM_PWM_Start+0x1b2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a18      	ldr	r2, [pc, #96]	; (80046e4 <HAL_TIM_PWM_Start+0x204>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d004      	beq.n	8004692 <HAL_TIM_PWM_Start+0x1b2>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a18      	ldr	r2, [pc, #96]	; (80046f0 <HAL_TIM_PWM_Start+0x210>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d115      	bne.n	80046be <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	4b19      	ldr	r3, [pc, #100]	; (8004700 <HAL_TIM_PWM_Start+0x220>)
 800469a:	4013      	ands	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2b06      	cmp	r3, #6
 80046a2:	d015      	beq.n	80046d0 <HAL_TIM_PWM_Start+0x1f0>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046aa:	d011      	beq.n	80046d0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0201 	orr.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046bc:	e008      	b.n	80046d0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f042 0201 	orr.w	r2, r2, #1
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	e000      	b.n	80046d2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40012c00 	.word	0x40012c00
 80046e0:	40013400 	.word	0x40013400
 80046e4:	40014000 	.word	0x40014000
 80046e8:	40014400 	.word	0x40014400
 80046ec:	40014800 	.word	0x40014800
 80046f0:	40015000 	.word	0x40015000
 80046f4:	40000400 	.word	0x40000400
 80046f8:	40000800 	.word	0x40000800
 80046fc:	40000c00 	.word	0x40000c00
 8004700:	00010007 	.word	0x00010007

08004704 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b02      	cmp	r3, #2
 8004718:	d122      	bne.n	8004760 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b02      	cmp	r3, #2
 8004726:	d11b      	bne.n	8004760 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f06f 0202 	mvn.w	r2, #2
 8004730:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fb90 	bl	8004e6c <HAL_TIM_IC_CaptureCallback>
 800474c:	e005      	b.n	800475a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fb82 	bl	8004e58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 fb93 	bl	8004e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f003 0304 	and.w	r3, r3, #4
 800476a:	2b04      	cmp	r3, #4
 800476c:	d122      	bne.n	80047b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b04      	cmp	r3, #4
 800477a:	d11b      	bne.n	80047b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f06f 0204 	mvn.w	r2, #4
 8004784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2202      	movs	r2, #2
 800478a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fb66 	bl	8004e6c <HAL_TIM_IC_CaptureCallback>
 80047a0:	e005      	b.n	80047ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fb58 	bl	8004e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 fb69 	bl	8004e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d122      	bne.n	8004808 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d11b      	bne.n	8004808 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0208 	mvn.w	r2, #8
 80047d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2204      	movs	r2, #4
 80047de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fb3c 	bl	8004e6c <HAL_TIM_IC_CaptureCallback>
 80047f4:	e005      	b.n	8004802 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fb2e 	bl	8004e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fb3f 	bl	8004e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f003 0310 	and.w	r3, r3, #16
 8004812:	2b10      	cmp	r3, #16
 8004814:	d122      	bne.n	800485c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f003 0310 	and.w	r3, r3, #16
 8004820:	2b10      	cmp	r3, #16
 8004822:	d11b      	bne.n	800485c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0210 	mvn.w	r2, #16
 800482c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2208      	movs	r2, #8
 8004832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fb12 	bl	8004e6c <HAL_TIM_IC_CaptureCallback>
 8004848:	e005      	b.n	8004856 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fb04 	bl	8004e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fb15 	bl	8004e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b01      	cmp	r3, #1
 8004868:	d10e      	bne.n	8004888 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b01      	cmp	r3, #1
 8004876:	d107      	bne.n	8004888 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f06f 0201 	mvn.w	r2, #1
 8004880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fc f998 	bl	8000bb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004892:	2b80      	cmp	r3, #128	; 0x80
 8004894:	d10e      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a0:	2b80      	cmp	r3, #128	; 0x80
 80048a2:	d107      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f001 fac4 	bl	8005e3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048c2:	d10e      	bne.n	80048e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ce:	2b80      	cmp	r3, #128	; 0x80
 80048d0:	d107      	bne.n	80048e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f001 fab7 	bl	8005e50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ec:	2b40      	cmp	r3, #64	; 0x40
 80048ee:	d10e      	bne.n	800490e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fa:	2b40      	cmp	r3, #64	; 0x40
 80048fc:	d107      	bne.n	800490e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 fac3 	bl	8004e94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	f003 0320 	and.w	r3, r3, #32
 8004918:	2b20      	cmp	r3, #32
 800491a:	d10e      	bne.n	800493a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f003 0320 	and.w	r3, r3, #32
 8004926:	2b20      	cmp	r3, #32
 8004928:	d107      	bne.n	800493a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f06f 0220 	mvn.w	r2, #32
 8004932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f001 fa77 	bl	8005e28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004944:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004948:	d10f      	bne.n	800496a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004958:	d107      	bne.n	800496a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f001 fa7d 	bl	8005e64 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004974:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004978:	d10f      	bne.n	800499a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004984:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004988:	d107      	bne.n	800499a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f001 fa6f 	bl	8005e78 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049a8:	d10f      	bne.n	80049ca <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049b8:	d107      	bne.n	80049ca <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80049c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f001 fa61 	bl	8005e8c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049d8:	d10f      	bne.n	80049fa <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049e8:	d107      	bne.n	80049fa <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80049f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f001 fa53 	bl	8005ea0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049fa:	bf00      	nop
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e0ff      	b.n	8004c22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b14      	cmp	r3, #20
 8004a2e:	f200 80f0 	bhi.w	8004c12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a32:	a201      	add	r2, pc, #4	; (adr r2, 8004a38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a38:	08004a8d 	.word	0x08004a8d
 8004a3c:	08004c13 	.word	0x08004c13
 8004a40:	08004c13 	.word	0x08004c13
 8004a44:	08004c13 	.word	0x08004c13
 8004a48:	08004acd 	.word	0x08004acd
 8004a4c:	08004c13 	.word	0x08004c13
 8004a50:	08004c13 	.word	0x08004c13
 8004a54:	08004c13 	.word	0x08004c13
 8004a58:	08004b0f 	.word	0x08004b0f
 8004a5c:	08004c13 	.word	0x08004c13
 8004a60:	08004c13 	.word	0x08004c13
 8004a64:	08004c13 	.word	0x08004c13
 8004a68:	08004b4f 	.word	0x08004b4f
 8004a6c:	08004c13 	.word	0x08004c13
 8004a70:	08004c13 	.word	0x08004c13
 8004a74:	08004c13 	.word	0x08004c13
 8004a78:	08004b91 	.word	0x08004b91
 8004a7c:	08004c13 	.word	0x08004c13
 8004a80:	08004c13 	.word	0x08004c13
 8004a84:	08004c13 	.word	0x08004c13
 8004a88:	08004bd1 	.word	0x08004bd1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fab0 	bl	8004ff8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0208 	orr.w	r2, r2, #8
 8004aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0204 	bic.w	r2, r2, #4
 8004ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6999      	ldr	r1, [r3, #24]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	619a      	str	r2, [r3, #24]
      break;
 8004aca:	e0a5      	b.n	8004c18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fb2a 	bl	800512c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6999      	ldr	r1, [r3, #24]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	021a      	lsls	r2, r3, #8
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	619a      	str	r2, [r3, #24]
      break;
 8004b0c:	e084      	b.n	8004c18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fb9d 	bl	8005254 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f042 0208 	orr.w	r2, r2, #8
 8004b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0204 	bic.w	r2, r2, #4
 8004b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69d9      	ldr	r1, [r3, #28]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	61da      	str	r2, [r3, #28]
      break;
 8004b4c:	e064      	b.n	8004c18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fc0f 	bl	8005378 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69da      	ldr	r2, [r3, #28]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69d9      	ldr	r1, [r3, #28]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	021a      	lsls	r2, r3, #8
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	61da      	str	r2, [r3, #28]
      break;
 8004b8e:	e043      	b.n	8004c18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fc82 	bl	80054a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0208 	orr.w	r2, r2, #8
 8004baa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0204 	bic.w	r2, r2, #4
 8004bba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	691a      	ldr	r2, [r3, #16]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004bce:	e023      	b.n	8004c18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68b9      	ldr	r1, [r7, #8]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fccc 	bl	8005574 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bfa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	021a      	lsls	r2, r3, #8
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004c10:	e002      	b.n	8004c18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	75fb      	strb	r3, [r7, #23]
      break;
 8004c16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop

08004c2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d101      	bne.n	8004c48 <HAL_TIM_ConfigClockSource+0x1c>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e0f6      	b.n	8004e36 <HAL_TIM_ConfigClockSource+0x20a>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004c66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a6f      	ldr	r2, [pc, #444]	; (8004e40 <HAL_TIM_ConfigClockSource+0x214>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	f000 80c1 	beq.w	8004e0a <HAL_TIM_ConfigClockSource+0x1de>
 8004c88:	4a6d      	ldr	r2, [pc, #436]	; (8004e40 <HAL_TIM_ConfigClockSource+0x214>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	f200 80c6 	bhi.w	8004e1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004c90:	4a6c      	ldr	r2, [pc, #432]	; (8004e44 <HAL_TIM_ConfigClockSource+0x218>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	f000 80b9 	beq.w	8004e0a <HAL_TIM_ConfigClockSource+0x1de>
 8004c98:	4a6a      	ldr	r2, [pc, #424]	; (8004e44 <HAL_TIM_ConfigClockSource+0x218>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	f200 80be 	bhi.w	8004e1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004ca0:	4a69      	ldr	r2, [pc, #420]	; (8004e48 <HAL_TIM_ConfigClockSource+0x21c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	f000 80b1 	beq.w	8004e0a <HAL_TIM_ConfigClockSource+0x1de>
 8004ca8:	4a67      	ldr	r2, [pc, #412]	; (8004e48 <HAL_TIM_ConfigClockSource+0x21c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	f200 80b6 	bhi.w	8004e1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004cb0:	4a66      	ldr	r2, [pc, #408]	; (8004e4c <HAL_TIM_ConfigClockSource+0x220>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	f000 80a9 	beq.w	8004e0a <HAL_TIM_ConfigClockSource+0x1de>
 8004cb8:	4a64      	ldr	r2, [pc, #400]	; (8004e4c <HAL_TIM_ConfigClockSource+0x220>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	f200 80ae 	bhi.w	8004e1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004cc0:	4a63      	ldr	r2, [pc, #396]	; (8004e50 <HAL_TIM_ConfigClockSource+0x224>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	f000 80a1 	beq.w	8004e0a <HAL_TIM_ConfigClockSource+0x1de>
 8004cc8:	4a61      	ldr	r2, [pc, #388]	; (8004e50 <HAL_TIM_ConfigClockSource+0x224>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	f200 80a6 	bhi.w	8004e1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004cd0:	4a60      	ldr	r2, [pc, #384]	; (8004e54 <HAL_TIM_ConfigClockSource+0x228>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	f000 8099 	beq.w	8004e0a <HAL_TIM_ConfigClockSource+0x1de>
 8004cd8:	4a5e      	ldr	r2, [pc, #376]	; (8004e54 <HAL_TIM_ConfigClockSource+0x228>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	f200 809e 	bhi.w	8004e1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004ce0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004ce4:	f000 8091 	beq.w	8004e0a <HAL_TIM_ConfigClockSource+0x1de>
 8004ce8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004cec:	f200 8096 	bhi.w	8004e1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004cf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cf4:	f000 8089 	beq.w	8004e0a <HAL_TIM_ConfigClockSource+0x1de>
 8004cf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cfc:	f200 808e 	bhi.w	8004e1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d04:	d03e      	beq.n	8004d84 <HAL_TIM_ConfigClockSource+0x158>
 8004d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d0a:	f200 8087 	bhi.w	8004e1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d12:	f000 8086 	beq.w	8004e22 <HAL_TIM_ConfigClockSource+0x1f6>
 8004d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d1a:	d87f      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d1c:	2b70      	cmp	r3, #112	; 0x70
 8004d1e:	d01a      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0x12a>
 8004d20:	2b70      	cmp	r3, #112	; 0x70
 8004d22:	d87b      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d24:	2b60      	cmp	r3, #96	; 0x60
 8004d26:	d050      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0x19e>
 8004d28:	2b60      	cmp	r3, #96	; 0x60
 8004d2a:	d877      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d2c:	2b50      	cmp	r3, #80	; 0x50
 8004d2e:	d03c      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0x17e>
 8004d30:	2b50      	cmp	r3, #80	; 0x50
 8004d32:	d873      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d34:	2b40      	cmp	r3, #64	; 0x40
 8004d36:	d058      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x1be>
 8004d38:	2b40      	cmp	r3, #64	; 0x40
 8004d3a:	d86f      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d3c:	2b30      	cmp	r3, #48	; 0x30
 8004d3e:	d064      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x1de>
 8004d40:	2b30      	cmp	r3, #48	; 0x30
 8004d42:	d86b      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d060      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x1de>
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	d867      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d05c      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x1de>
 8004d50:	2b10      	cmp	r3, #16
 8004d52:	d05a      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x1de>
 8004d54:	e062      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	6899      	ldr	r1, [r3, #8]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f000 fd61 	bl	800582c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	609a      	str	r2, [r3, #8]
      break;
 8004d82:	e04f      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6818      	ldr	r0, [r3, #0]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	6899      	ldr	r1, [r3, #8]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f000 fd4a 	bl	800582c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689a      	ldr	r2, [r3, #8]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004da6:	609a      	str	r2, [r3, #8]
      break;
 8004da8:	e03c      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6818      	ldr	r0, [r3, #0]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	6859      	ldr	r1, [r3, #4]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	461a      	mov	r2, r3
 8004db8:	f000 fcbc 	bl	8005734 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2150      	movs	r1, #80	; 0x50
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 fd15 	bl	80057f2 <TIM_ITRx_SetConfig>
      break;
 8004dc8:	e02c      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6818      	ldr	r0, [r3, #0]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	6859      	ldr	r1, [r3, #4]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f000 fcdb 	bl	8005792 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2160      	movs	r1, #96	; 0x60
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fd05 	bl	80057f2 <TIM_ITRx_SetConfig>
      break;
 8004de8:	e01c      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6818      	ldr	r0, [r3, #0]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	6859      	ldr	r1, [r3, #4]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	461a      	mov	r2, r3
 8004df8:	f000 fc9c 	bl	8005734 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2140      	movs	r1, #64	; 0x40
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fcf5 	bl	80057f2 <TIM_ITRx_SetConfig>
      break;
 8004e08:	e00c      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4619      	mov	r1, r3
 8004e14:	4610      	mov	r0, r2
 8004e16:	f000 fcec 	bl	80057f2 <TIM_ITRx_SetConfig>
      break;
 8004e1a:	e003      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e20:	e000      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004e22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	00100070 	.word	0x00100070
 8004e44:	00100060 	.word	0x00100060
 8004e48:	00100050 	.word	0x00100050
 8004e4c:	00100040 	.word	0x00100040
 8004e50:	00100030 	.word	0x00100030
 8004e54:	00100020 	.word	0x00100020

08004e58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a46      	ldr	r2, [pc, #280]	; (8004fd4 <TIM_Base_SetConfig+0x12c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d017      	beq.n	8004ef0 <TIM_Base_SetConfig+0x48>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec6:	d013      	beq.n	8004ef0 <TIM_Base_SetConfig+0x48>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a43      	ldr	r2, [pc, #268]	; (8004fd8 <TIM_Base_SetConfig+0x130>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d00f      	beq.n	8004ef0 <TIM_Base_SetConfig+0x48>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a42      	ldr	r2, [pc, #264]	; (8004fdc <TIM_Base_SetConfig+0x134>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d00b      	beq.n	8004ef0 <TIM_Base_SetConfig+0x48>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a41      	ldr	r2, [pc, #260]	; (8004fe0 <TIM_Base_SetConfig+0x138>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d007      	beq.n	8004ef0 <TIM_Base_SetConfig+0x48>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a40      	ldr	r2, [pc, #256]	; (8004fe4 <TIM_Base_SetConfig+0x13c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d003      	beq.n	8004ef0 <TIM_Base_SetConfig+0x48>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a3f      	ldr	r2, [pc, #252]	; (8004fe8 <TIM_Base_SetConfig+0x140>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d108      	bne.n	8004f02 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a33      	ldr	r2, [pc, #204]	; (8004fd4 <TIM_Base_SetConfig+0x12c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d023      	beq.n	8004f52 <TIM_Base_SetConfig+0xaa>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f10:	d01f      	beq.n	8004f52 <TIM_Base_SetConfig+0xaa>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a30      	ldr	r2, [pc, #192]	; (8004fd8 <TIM_Base_SetConfig+0x130>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d01b      	beq.n	8004f52 <TIM_Base_SetConfig+0xaa>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a2f      	ldr	r2, [pc, #188]	; (8004fdc <TIM_Base_SetConfig+0x134>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d017      	beq.n	8004f52 <TIM_Base_SetConfig+0xaa>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a2e      	ldr	r2, [pc, #184]	; (8004fe0 <TIM_Base_SetConfig+0x138>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d013      	beq.n	8004f52 <TIM_Base_SetConfig+0xaa>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a2d      	ldr	r2, [pc, #180]	; (8004fe4 <TIM_Base_SetConfig+0x13c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d00f      	beq.n	8004f52 <TIM_Base_SetConfig+0xaa>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a2d      	ldr	r2, [pc, #180]	; (8004fec <TIM_Base_SetConfig+0x144>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d00b      	beq.n	8004f52 <TIM_Base_SetConfig+0xaa>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a2c      	ldr	r2, [pc, #176]	; (8004ff0 <TIM_Base_SetConfig+0x148>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d007      	beq.n	8004f52 <TIM_Base_SetConfig+0xaa>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a2b      	ldr	r2, [pc, #172]	; (8004ff4 <TIM_Base_SetConfig+0x14c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d003      	beq.n	8004f52 <TIM_Base_SetConfig+0xaa>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a26      	ldr	r2, [pc, #152]	; (8004fe8 <TIM_Base_SetConfig+0x140>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d108      	bne.n	8004f64 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a12      	ldr	r2, [pc, #72]	; (8004fd4 <TIM_Base_SetConfig+0x12c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d013      	beq.n	8004fb8 <TIM_Base_SetConfig+0x110>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a14      	ldr	r2, [pc, #80]	; (8004fe4 <TIM_Base_SetConfig+0x13c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d00f      	beq.n	8004fb8 <TIM_Base_SetConfig+0x110>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a14      	ldr	r2, [pc, #80]	; (8004fec <TIM_Base_SetConfig+0x144>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00b      	beq.n	8004fb8 <TIM_Base_SetConfig+0x110>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a13      	ldr	r2, [pc, #76]	; (8004ff0 <TIM_Base_SetConfig+0x148>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d007      	beq.n	8004fb8 <TIM_Base_SetConfig+0x110>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a12      	ldr	r2, [pc, #72]	; (8004ff4 <TIM_Base_SetConfig+0x14c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d003      	beq.n	8004fb8 <TIM_Base_SetConfig+0x110>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a0d      	ldr	r2, [pc, #52]	; (8004fe8 <TIM_Base_SetConfig+0x140>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d103      	bne.n	8004fc0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	691a      	ldr	r2, [r3, #16]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	615a      	str	r2, [r3, #20]
}
 8004fc6:	bf00      	nop
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40012c00 	.word	0x40012c00
 8004fd8:	40000400 	.word	0x40000400
 8004fdc:	40000800 	.word	0x40000800
 8004fe0:	40000c00 	.word	0x40000c00
 8004fe4:	40013400 	.word	0x40013400
 8004fe8:	40015000 	.word	0x40015000
 8004fec:	40014000 	.word	0x40014000
 8004ff0:	40014400 	.word	0x40014400
 8004ff4:	40014800 	.word	0x40014800

08004ff8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	f023 0201 	bic.w	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 0303 	bic.w	r3, r3, #3
 8005032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f023 0302 	bic.w	r3, r3, #2
 8005044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4313      	orrs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a30      	ldr	r2, [pc, #192]	; (8005114 <TIM_OC1_SetConfig+0x11c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d013      	beq.n	8005080 <TIM_OC1_SetConfig+0x88>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a2f      	ldr	r2, [pc, #188]	; (8005118 <TIM_OC1_SetConfig+0x120>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d00f      	beq.n	8005080 <TIM_OC1_SetConfig+0x88>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a2e      	ldr	r2, [pc, #184]	; (800511c <TIM_OC1_SetConfig+0x124>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d00b      	beq.n	8005080 <TIM_OC1_SetConfig+0x88>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a2d      	ldr	r2, [pc, #180]	; (8005120 <TIM_OC1_SetConfig+0x128>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d007      	beq.n	8005080 <TIM_OC1_SetConfig+0x88>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a2c      	ldr	r2, [pc, #176]	; (8005124 <TIM_OC1_SetConfig+0x12c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d003      	beq.n	8005080 <TIM_OC1_SetConfig+0x88>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a2b      	ldr	r2, [pc, #172]	; (8005128 <TIM_OC1_SetConfig+0x130>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d10c      	bne.n	800509a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f023 0308 	bic.w	r3, r3, #8
 8005086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	4313      	orrs	r3, r2
 8005090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f023 0304 	bic.w	r3, r3, #4
 8005098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a1d      	ldr	r2, [pc, #116]	; (8005114 <TIM_OC1_SetConfig+0x11c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d013      	beq.n	80050ca <TIM_OC1_SetConfig+0xd2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a1c      	ldr	r2, [pc, #112]	; (8005118 <TIM_OC1_SetConfig+0x120>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00f      	beq.n	80050ca <TIM_OC1_SetConfig+0xd2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a1b      	ldr	r2, [pc, #108]	; (800511c <TIM_OC1_SetConfig+0x124>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d00b      	beq.n	80050ca <TIM_OC1_SetConfig+0xd2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a1a      	ldr	r2, [pc, #104]	; (8005120 <TIM_OC1_SetConfig+0x128>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d007      	beq.n	80050ca <TIM_OC1_SetConfig+0xd2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a19      	ldr	r2, [pc, #100]	; (8005124 <TIM_OC1_SetConfig+0x12c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d003      	beq.n	80050ca <TIM_OC1_SetConfig+0xd2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a18      	ldr	r2, [pc, #96]	; (8005128 <TIM_OC1_SetConfig+0x130>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d111      	bne.n	80050ee <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	621a      	str	r2, [r3, #32]
}
 8005108:	bf00      	nop
 800510a:	371c      	adds	r7, #28
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	40012c00 	.word	0x40012c00
 8005118:	40013400 	.word	0x40013400
 800511c:	40014000 	.word	0x40014000
 8005120:	40014400 	.word	0x40014400
 8005124:	40014800 	.word	0x40014800
 8005128:	40015000 	.word	0x40015000

0800512c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	f023 0210 	bic.w	r2, r3, #16
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800515a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800515e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005166:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	021b      	lsls	r3, r3, #8
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4313      	orrs	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f023 0320 	bic.w	r3, r3, #32
 800517a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a2c      	ldr	r2, [pc, #176]	; (800523c <TIM_OC2_SetConfig+0x110>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d007      	beq.n	80051a0 <TIM_OC2_SetConfig+0x74>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a2b      	ldr	r2, [pc, #172]	; (8005240 <TIM_OC2_SetConfig+0x114>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d003      	beq.n	80051a0 <TIM_OC2_SetConfig+0x74>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a2a      	ldr	r2, [pc, #168]	; (8005244 <TIM_OC2_SetConfig+0x118>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d10d      	bne.n	80051bc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a1f      	ldr	r2, [pc, #124]	; (800523c <TIM_OC2_SetConfig+0x110>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d013      	beq.n	80051ec <TIM_OC2_SetConfig+0xc0>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a1e      	ldr	r2, [pc, #120]	; (8005240 <TIM_OC2_SetConfig+0x114>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00f      	beq.n	80051ec <TIM_OC2_SetConfig+0xc0>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a1e      	ldr	r2, [pc, #120]	; (8005248 <TIM_OC2_SetConfig+0x11c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d00b      	beq.n	80051ec <TIM_OC2_SetConfig+0xc0>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a1d      	ldr	r2, [pc, #116]	; (800524c <TIM_OC2_SetConfig+0x120>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d007      	beq.n	80051ec <TIM_OC2_SetConfig+0xc0>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a1c      	ldr	r2, [pc, #112]	; (8005250 <TIM_OC2_SetConfig+0x124>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_OC2_SetConfig+0xc0>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a17      	ldr	r2, [pc, #92]	; (8005244 <TIM_OC2_SetConfig+0x118>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d113      	bne.n	8005214 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	4313      	orrs	r3, r2
 8005212:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	621a      	str	r2, [r3, #32]
}
 800522e:	bf00      	nop
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	40012c00 	.word	0x40012c00
 8005240:	40013400 	.word	0x40013400
 8005244:	40015000 	.word	0x40015000
 8005248:	40014000 	.word	0x40014000
 800524c:	40014400 	.word	0x40014400
 8005250:	40014800 	.word	0x40014800

08005254 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0303 	bic.w	r3, r3, #3
 800528e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	021b      	lsls	r3, r3, #8
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a2b      	ldr	r2, [pc, #172]	; (8005360 <TIM_OC3_SetConfig+0x10c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d007      	beq.n	80052c6 <TIM_OC3_SetConfig+0x72>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a2a      	ldr	r2, [pc, #168]	; (8005364 <TIM_OC3_SetConfig+0x110>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d003      	beq.n	80052c6 <TIM_OC3_SetConfig+0x72>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a29      	ldr	r2, [pc, #164]	; (8005368 <TIM_OC3_SetConfig+0x114>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d10d      	bne.n	80052e2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	021b      	lsls	r3, r3, #8
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a1e      	ldr	r2, [pc, #120]	; (8005360 <TIM_OC3_SetConfig+0x10c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d013      	beq.n	8005312 <TIM_OC3_SetConfig+0xbe>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a1d      	ldr	r2, [pc, #116]	; (8005364 <TIM_OC3_SetConfig+0x110>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d00f      	beq.n	8005312 <TIM_OC3_SetConfig+0xbe>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a1d      	ldr	r2, [pc, #116]	; (800536c <TIM_OC3_SetConfig+0x118>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d00b      	beq.n	8005312 <TIM_OC3_SetConfig+0xbe>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a1c      	ldr	r2, [pc, #112]	; (8005370 <TIM_OC3_SetConfig+0x11c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d007      	beq.n	8005312 <TIM_OC3_SetConfig+0xbe>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a1b      	ldr	r2, [pc, #108]	; (8005374 <TIM_OC3_SetConfig+0x120>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d003      	beq.n	8005312 <TIM_OC3_SetConfig+0xbe>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a16      	ldr	r2, [pc, #88]	; (8005368 <TIM_OC3_SetConfig+0x114>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d113      	bne.n	800533a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	621a      	str	r2, [r3, #32]
}
 8005354:	bf00      	nop
 8005356:	371c      	adds	r7, #28
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	40012c00 	.word	0x40012c00
 8005364:	40013400 	.word	0x40013400
 8005368:	40015000 	.word	0x40015000
 800536c:	40014000 	.word	0x40014000
 8005370:	40014400 	.word	0x40014400
 8005374:	40014800 	.word	0x40014800

08005378 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	021b      	lsls	r3, r3, #8
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4313      	orrs	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	031b      	lsls	r3, r3, #12
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a2c      	ldr	r2, [pc, #176]	; (8005488 <TIM_OC4_SetConfig+0x110>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d007      	beq.n	80053ec <TIM_OC4_SetConfig+0x74>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a2b      	ldr	r2, [pc, #172]	; (800548c <TIM_OC4_SetConfig+0x114>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d003      	beq.n	80053ec <TIM_OC4_SetConfig+0x74>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a2a      	ldr	r2, [pc, #168]	; (8005490 <TIM_OC4_SetConfig+0x118>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d10d      	bne.n	8005408 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	031b      	lsls	r3, r3, #12
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005406:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a1f      	ldr	r2, [pc, #124]	; (8005488 <TIM_OC4_SetConfig+0x110>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d013      	beq.n	8005438 <TIM_OC4_SetConfig+0xc0>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a1e      	ldr	r2, [pc, #120]	; (800548c <TIM_OC4_SetConfig+0x114>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d00f      	beq.n	8005438 <TIM_OC4_SetConfig+0xc0>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a1e      	ldr	r2, [pc, #120]	; (8005494 <TIM_OC4_SetConfig+0x11c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00b      	beq.n	8005438 <TIM_OC4_SetConfig+0xc0>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a1d      	ldr	r2, [pc, #116]	; (8005498 <TIM_OC4_SetConfig+0x120>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d007      	beq.n	8005438 <TIM_OC4_SetConfig+0xc0>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a1c      	ldr	r2, [pc, #112]	; (800549c <TIM_OC4_SetConfig+0x124>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d003      	beq.n	8005438 <TIM_OC4_SetConfig+0xc0>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a17      	ldr	r2, [pc, #92]	; (8005490 <TIM_OC4_SetConfig+0x118>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d113      	bne.n	8005460 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800543e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005446:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	019b      	lsls	r3, r3, #6
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	4313      	orrs	r3, r2
 8005452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	019b      	lsls	r3, r3, #6
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	4313      	orrs	r3, r2
 800545e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	621a      	str	r2, [r3, #32]
}
 800547a:	bf00      	nop
 800547c:	371c      	adds	r7, #28
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	40012c00 	.word	0x40012c00
 800548c:	40013400 	.word	0x40013400
 8005490:	40015000 	.word	0x40015000
 8005494:	40014000 	.word	0x40014000
 8005498:	40014400 	.word	0x40014400
 800549c:	40014800 	.word	0x40014800

080054a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80054e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	041b      	lsls	r3, r3, #16
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a19      	ldr	r2, [pc, #100]	; (800555c <TIM_OC5_SetConfig+0xbc>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d013      	beq.n	8005522 <TIM_OC5_SetConfig+0x82>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a18      	ldr	r2, [pc, #96]	; (8005560 <TIM_OC5_SetConfig+0xc0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00f      	beq.n	8005522 <TIM_OC5_SetConfig+0x82>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a17      	ldr	r2, [pc, #92]	; (8005564 <TIM_OC5_SetConfig+0xc4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00b      	beq.n	8005522 <TIM_OC5_SetConfig+0x82>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a16      	ldr	r2, [pc, #88]	; (8005568 <TIM_OC5_SetConfig+0xc8>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d007      	beq.n	8005522 <TIM_OC5_SetConfig+0x82>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a15      	ldr	r2, [pc, #84]	; (800556c <TIM_OC5_SetConfig+0xcc>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d003      	beq.n	8005522 <TIM_OC5_SetConfig+0x82>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a14      	ldr	r2, [pc, #80]	; (8005570 <TIM_OC5_SetConfig+0xd0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d109      	bne.n	8005536 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005528:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	021b      	lsls	r3, r3, #8
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	621a      	str	r2, [r3, #32]
}
 8005550:	bf00      	nop
 8005552:	371c      	adds	r7, #28
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	40012c00 	.word	0x40012c00
 8005560:	40013400 	.word	0x40013400
 8005564:	40014000 	.word	0x40014000
 8005568:	40014400 	.word	0x40014400
 800556c:	40014800 	.word	0x40014800
 8005570:	40015000 	.word	0x40015000

08005574 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800559a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	021b      	lsls	r3, r3, #8
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	051b      	lsls	r3, r3, #20
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a1a      	ldr	r2, [pc, #104]	; (8005634 <TIM_OC6_SetConfig+0xc0>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d013      	beq.n	80055f8 <TIM_OC6_SetConfig+0x84>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a19      	ldr	r2, [pc, #100]	; (8005638 <TIM_OC6_SetConfig+0xc4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d00f      	beq.n	80055f8 <TIM_OC6_SetConfig+0x84>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a18      	ldr	r2, [pc, #96]	; (800563c <TIM_OC6_SetConfig+0xc8>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d00b      	beq.n	80055f8 <TIM_OC6_SetConfig+0x84>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a17      	ldr	r2, [pc, #92]	; (8005640 <TIM_OC6_SetConfig+0xcc>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d007      	beq.n	80055f8 <TIM_OC6_SetConfig+0x84>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a16      	ldr	r2, [pc, #88]	; (8005644 <TIM_OC6_SetConfig+0xd0>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d003      	beq.n	80055f8 <TIM_OC6_SetConfig+0x84>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a15      	ldr	r2, [pc, #84]	; (8005648 <TIM_OC6_SetConfig+0xd4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d109      	bne.n	800560c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	029b      	lsls	r3, r3, #10
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	4313      	orrs	r3, r2
 800560a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	621a      	str	r2, [r3, #32]
}
 8005626:	bf00      	nop
 8005628:	371c      	adds	r7, #28
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	40012c00 	.word	0x40012c00
 8005638:	40013400 	.word	0x40013400
 800563c:	40014000 	.word	0x40014000
 8005640:	40014400 	.word	0x40014400
 8005644:	40014800 	.word	0x40014800
 8005648:	40015000 	.word	0x40015000

0800564c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
 8005658:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	f023 0201 	bic.w	r2, r3, #1
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	4a28      	ldr	r2, [pc, #160]	; (8005718 <TIM_TI1_SetConfig+0xcc>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d01b      	beq.n	80056b2 <TIM_TI1_SetConfig+0x66>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005680:	d017      	beq.n	80056b2 <TIM_TI1_SetConfig+0x66>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4a25      	ldr	r2, [pc, #148]	; (800571c <TIM_TI1_SetConfig+0xd0>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d013      	beq.n	80056b2 <TIM_TI1_SetConfig+0x66>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4a24      	ldr	r2, [pc, #144]	; (8005720 <TIM_TI1_SetConfig+0xd4>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00f      	beq.n	80056b2 <TIM_TI1_SetConfig+0x66>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	4a23      	ldr	r2, [pc, #140]	; (8005724 <TIM_TI1_SetConfig+0xd8>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00b      	beq.n	80056b2 <TIM_TI1_SetConfig+0x66>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4a22      	ldr	r2, [pc, #136]	; (8005728 <TIM_TI1_SetConfig+0xdc>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d007      	beq.n	80056b2 <TIM_TI1_SetConfig+0x66>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4a21      	ldr	r2, [pc, #132]	; (800572c <TIM_TI1_SetConfig+0xe0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d003      	beq.n	80056b2 <TIM_TI1_SetConfig+0x66>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4a20      	ldr	r2, [pc, #128]	; (8005730 <TIM_TI1_SetConfig+0xe4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d101      	bne.n	80056b6 <TIM_TI1_SetConfig+0x6a>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <TIM_TI1_SetConfig+0x6c>
 80056b6:	2300      	movs	r3, #0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d008      	beq.n	80056ce <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f023 0303 	bic.w	r3, r3, #3
 80056c2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	617b      	str	r3, [r7, #20]
 80056cc:	e003      	b.n	80056d6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f043 0301 	orr.w	r3, r3, #1
 80056d4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	f023 030a 	bic.w	r3, r3, #10
 80056f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f003 030a 	and.w	r3, r3, #10
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	621a      	str	r2, [r3, #32]
}
 800570a:	bf00      	nop
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40012c00 	.word	0x40012c00
 800571c:	40000400 	.word	0x40000400
 8005720:	40000800 	.word	0x40000800
 8005724:	40000c00 	.word	0x40000c00
 8005728:	40013400 	.word	0x40013400
 800572c:	40014000 	.word	0x40014000
 8005730:	40015000 	.word	0x40015000

08005734 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	f023 0201 	bic.w	r2, r3, #1
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800575e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	011b      	lsls	r3, r3, #4
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	4313      	orrs	r3, r2
 8005768:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f023 030a 	bic.w	r3, r3, #10
 8005770:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	4313      	orrs	r3, r2
 8005778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	621a      	str	r2, [r3, #32]
}
 8005786:	bf00      	nop
 8005788:	371c      	adds	r7, #28
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005792:	b480      	push	{r7}
 8005794:	b087      	sub	sp, #28
 8005796:	af00      	add	r7, sp, #0
 8005798:	60f8      	str	r0, [r7, #12]
 800579a:	60b9      	str	r1, [r7, #8]
 800579c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	f023 0210 	bic.w	r2, r3, #16
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	031b      	lsls	r3, r3, #12
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	011b      	lsls	r3, r3, #4
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	621a      	str	r2, [r3, #32]
}
 80057e6:	bf00      	nop
 80057e8:	371c      	adds	r7, #28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b085      	sub	sp, #20
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4313      	orrs	r3, r2
 8005814:	f043 0307 	orr.w	r3, r3, #7
 8005818:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	609a      	str	r2, [r3, #8]
}
 8005820:	bf00      	nop
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
 8005838:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005846:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	021a      	lsls	r2, r3, #8
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	431a      	orrs	r2, r3
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	4313      	orrs	r3, r2
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	4313      	orrs	r3, r2
 8005858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	609a      	str	r2, [r3, #8]
}
 8005860:	bf00      	nop
 8005862:	371c      	adds	r7, #28
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f003 031f 	and.w	r3, r3, #31
 800587e:	2201      	movs	r2, #1
 8005880:	fa02 f303 	lsl.w	r3, r2, r3
 8005884:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6a1a      	ldr	r2, [r3, #32]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	43db      	mvns	r3, r3
 800588e:	401a      	ands	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a1a      	ldr	r2, [r3, #32]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f003 031f 	and.w	r3, r3, #31
 800589e:	6879      	ldr	r1, [r7, #4]
 80058a0:	fa01 f303 	lsl.w	r3, r1, r3
 80058a4:	431a      	orrs	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	621a      	str	r2, [r3, #32]
}
 80058aa:	bf00      	nop
 80058ac:	371c      	adds	r7, #28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b08a      	sub	sp, #40	; 0x28
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e0a0      	b.n	8005a0c <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d106      	bne.n	80058e4 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7fb fc70 	bl	80011c4 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	3304      	adds	r3, #4
 80058f4:	4619      	mov	r1, r3
 80058f6:	4610      	mov	r0, r2
 80058f8:	f7ff fad6 	bl	8004ea8 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6818      	ldr	r0, [r3, #0]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	6819      	ldr	r1, [r3, #0]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	2203      	movs	r2, #3
 800590a:	f7ff fe9f 	bl	800564c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	699a      	ldr	r2, [r3, #24]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 020c 	bic.w	r2, r2, #12
 800591c:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6999      	ldr	r1, [r3, #24]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	430a      	orrs	r2, r1
 800592e:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800593e:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6812      	ldr	r2, [r2, #0]
 800594a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800594e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005952:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689a      	ldr	r2, [r3, #8]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005962:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6812      	ldr	r2, [r2, #0]
 800596e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005972:	f023 0307 	bic.w	r3, r3, #7
 8005976:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0204 	orr.w	r2, r2, #4
 8005986:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005988:	2300      	movs	r3, #0
 800598a:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800598c:	2300      	movs	r3, #0
 800598e:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005990:	2370      	movs	r3, #112	; 0x70
 8005992:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005994:	2300      	movs	r3, #0
 8005996:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005998:	2300      	movs	r3, #0
 800599a:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800599c:	2300      	movs	r3, #0
 800599e:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f107 020c 	add.w	r2, r7, #12
 80059ae:	4611      	mov	r1, r2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff fbbb 	bl	800512c <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6812      	ldr	r2, [r2, #0]
 80059c0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80059c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c8:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80059d8:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3728      	adds	r7, #40	; 0x28
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d109      	bne.n	8005a38 <HAL_TIMEx_PWMN_Start+0x24>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	bf14      	ite	ne
 8005a30:	2301      	movne	r3, #1
 8005a32:	2300      	moveq	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	e022      	b.n	8005a7e <HAL_TIMEx_PWMN_Start+0x6a>
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d109      	bne.n	8005a52 <HAL_TIMEx_PWMN_Start+0x3e>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	bf14      	ite	ne
 8005a4a:	2301      	movne	r3, #1
 8005a4c:	2300      	moveq	r3, #0
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	e015      	b.n	8005a7e <HAL_TIMEx_PWMN_Start+0x6a>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d109      	bne.n	8005a6c <HAL_TIMEx_PWMN_Start+0x58>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	bf14      	ite	ne
 8005a64:	2301      	movne	r3, #1
 8005a66:	2300      	moveq	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	e008      	b.n	8005a7e <HAL_TIMEx_PWMN_Start+0x6a>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	bf14      	ite	ne
 8005a78:	2301      	movne	r3, #1
 8005a7a:	2300      	moveq	r3, #0
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e073      	b.n	8005b6e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d104      	bne.n	8005a96 <HAL_TIMEx_PWMN_Start+0x82>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a94:	e013      	b.n	8005abe <HAL_TIMEx_PWMN_Start+0xaa>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	d104      	bne.n	8005aa6 <HAL_TIMEx_PWMN_Start+0x92>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005aa4:	e00b      	b.n	8005abe <HAL_TIMEx_PWMN_Start+0xaa>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d104      	bne.n	8005ab6 <HAL_TIMEx_PWMN_Start+0xa2>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ab4:	e003      	b.n	8005abe <HAL_TIMEx_PWMN_Start+0xaa>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2202      	movs	r2, #2
 8005aba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2204      	movs	r2, #4
 8005ac4:	6839      	ldr	r1, [r7, #0]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 f9f4 	bl	8005eb4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ada:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a25      	ldr	r2, [pc, #148]	; (8005b78 <HAL_TIMEx_PWMN_Start+0x164>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d022      	beq.n	8005b2c <HAL_TIMEx_PWMN_Start+0x118>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aee:	d01d      	beq.n	8005b2c <HAL_TIMEx_PWMN_Start+0x118>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a21      	ldr	r2, [pc, #132]	; (8005b7c <HAL_TIMEx_PWMN_Start+0x168>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d018      	beq.n	8005b2c <HAL_TIMEx_PWMN_Start+0x118>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a20      	ldr	r2, [pc, #128]	; (8005b80 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d013      	beq.n	8005b2c <HAL_TIMEx_PWMN_Start+0x118>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a1e      	ldr	r2, [pc, #120]	; (8005b84 <HAL_TIMEx_PWMN_Start+0x170>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d00e      	beq.n	8005b2c <HAL_TIMEx_PWMN_Start+0x118>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a1d      	ldr	r2, [pc, #116]	; (8005b88 <HAL_TIMEx_PWMN_Start+0x174>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d009      	beq.n	8005b2c <HAL_TIMEx_PWMN_Start+0x118>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a1b      	ldr	r2, [pc, #108]	; (8005b8c <HAL_TIMEx_PWMN_Start+0x178>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d004      	beq.n	8005b2c <HAL_TIMEx_PWMN_Start+0x118>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a1a      	ldr	r2, [pc, #104]	; (8005b90 <HAL_TIMEx_PWMN_Start+0x17c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d115      	bne.n	8005b58 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	4b18      	ldr	r3, [pc, #96]	; (8005b94 <HAL_TIMEx_PWMN_Start+0x180>)
 8005b34:	4013      	ands	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2b06      	cmp	r3, #6
 8005b3c:	d015      	beq.n	8005b6a <HAL_TIMEx_PWMN_Start+0x156>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b44:	d011      	beq.n	8005b6a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f042 0201 	orr.w	r2, r2, #1
 8005b54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b56:	e008      	b.n	8005b6a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 0201 	orr.w	r2, r2, #1
 8005b66:	601a      	str	r2, [r3, #0]
 8005b68:	e000      	b.n	8005b6c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	40012c00 	.word	0x40012c00
 8005b7c:	40000400 	.word	0x40000400
 8005b80:	40000800 	.word	0x40000800
 8005b84:	40000c00 	.word	0x40000c00
 8005b88:	40013400 	.word	0x40013400
 8005b8c:	40014000 	.word	0x40014000
 8005b90:	40015000 	.word	0x40015000
 8005b94:	00010007 	.word	0x00010007

08005b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bac:	2302      	movs	r3, #2
 8005bae:	e074      	b.n	8005c9a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a34      	ldr	r2, [pc, #208]	; (8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d009      	beq.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a33      	ldr	r2, [pc, #204]	; (8005cac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d004      	beq.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a31      	ldr	r2, [pc, #196]	; (8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d108      	bne.n	8005c00 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005bf4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a21      	ldr	r2, [pc, #132]	; (8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d022      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c30:	d01d      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a1f      	ldr	r2, [pc, #124]	; (8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d018      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a1d      	ldr	r2, [pc, #116]	; (8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d013      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a1c      	ldr	r2, [pc, #112]	; (8005cbc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00e      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a15      	ldr	r2, [pc, #84]	; (8005cac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d009      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a18      	ldr	r2, [pc, #96]	; (8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d004      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a11      	ldr	r2, [pc, #68]	; (8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d10c      	bne.n	8005c88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40012c00 	.word	0x40012c00
 8005cac:	40013400 	.word	0x40013400
 8005cb0:	40015000 	.word	0x40015000
 8005cb4:	40000400 	.word	0x40000400
 8005cb8:	40000800 	.word	0x40000800
 8005cbc:	40000c00 	.word	0x40000c00
 8005cc0:	40014000 	.word	0x40014000

08005cc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d101      	bne.n	8005ce0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005cdc:	2302      	movs	r3, #2
 8005cde:	e096      	b.n	8005e0e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	041b      	lsls	r3, r3, #16
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a2f      	ldr	r2, [pc, #188]	; (8005e1c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d009      	beq.n	8005d78 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a2d      	ldr	r2, [pc, #180]	; (8005e20 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d004      	beq.n	8005d78 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a2c      	ldr	r2, [pc, #176]	; (8005e24 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d106      	bne.n	8005d86 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a24      	ldr	r2, [pc, #144]	; (8005e1c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d009      	beq.n	8005da4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a22      	ldr	r2, [pc, #136]	; (8005e20 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d004      	beq.n	8005da4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a21      	ldr	r2, [pc, #132]	; (8005e24 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d12b      	bne.n	8005dfc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dae:	051b      	lsls	r3, r3, #20
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a11      	ldr	r2, [pc, #68]	; (8005e1c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d009      	beq.n	8005dee <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a10      	ldr	r2, [pc, #64]	; (8005e20 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d004      	beq.n	8005dee <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a0e      	ldr	r2, [pc, #56]	; (8005e24 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d106      	bne.n	8005dfc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	40012c00 	.word	0x40012c00
 8005e20:	40013400 	.word	0x40013400
 8005e24:	40015000 	.word	0x40015000

08005e28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f003 031f 	and.w	r3, r3, #31
 8005ec6:	2204      	movs	r2, #4
 8005ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ecc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6a1a      	ldr	r2, [r3, #32]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	43db      	mvns	r3, r3
 8005ed6:	401a      	ands	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a1a      	ldr	r2, [r3, #32]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f003 031f 	and.w	r3, r3, #31
 8005ee6:	6879      	ldr	r1, [r7, #4]
 8005ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8005eec:	431a      	orrs	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	621a      	str	r2, [r3, #32]
}
 8005ef2:	bf00      	nop
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b082      	sub	sp, #8
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e042      	b.n	8005f96 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d106      	bne.n	8005f28 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7fb fab0 	bl	8001488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2224      	movs	r2, #36	; 0x24
 8005f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0201 	bic.w	r2, r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 fc51 	bl	80067e8 <UART_SetConfig>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d101      	bne.n	8005f50 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e022      	b.n	8005f96 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 ff41 	bl	8006de0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f7c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f042 0201 	orr.w	r2, r2, #1
 8005f8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 ffc8 	bl	8006f24 <UART_CheckIdleState>
 8005f94:	4603      	mov	r3, r0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b08a      	sub	sp, #40	; 0x28
 8005fa2:	af02      	add	r7, sp, #8
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	603b      	str	r3, [r7, #0]
 8005faa:	4613      	mov	r3, r2
 8005fac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fb4:	2b20      	cmp	r3, #32
 8005fb6:	f040 8083 	bne.w	80060c0 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <HAL_UART_Transmit+0x28>
 8005fc0:	88fb      	ldrh	r3, [r7, #6]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e07b      	b.n	80060c2 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d101      	bne.n	8005fd8 <HAL_UART_Transmit+0x3a>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	e074      	b.n	80060c2 <HAL_UART_Transmit+0x124>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2221      	movs	r2, #33	; 0x21
 8005fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ff0:	f7fb fc68 	bl	80018c4 <HAL_GetTick>
 8005ff4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	88fa      	ldrh	r2, [r7, #6]
 8005ffa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	88fa      	ldrh	r2, [r7, #6]
 8006002:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800600e:	d108      	bne.n	8006022 <HAL_UART_Transmit+0x84>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d104      	bne.n	8006022 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006018:	2300      	movs	r3, #0
 800601a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	61bb      	str	r3, [r7, #24]
 8006020:	e003      	b.n	800602a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006026:	2300      	movs	r3, #0
 8006028:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006032:	e02c      	b.n	800608e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	2200      	movs	r2, #0
 800603c:	2180      	movs	r1, #128	; 0x80
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 ffbb 	bl	8006fba <UART_WaitOnFlagUntilTimeout>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e039      	b.n	80060c2 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10b      	bne.n	800606c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	461a      	mov	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006062:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	3302      	adds	r3, #2
 8006068:	61bb      	str	r3, [r7, #24]
 800606a:	e007      	b.n	800607c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	781a      	ldrb	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	3301      	adds	r3, #1
 800607a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006082:	b29b      	uxth	r3, r3
 8006084:	3b01      	subs	r3, #1
 8006086:	b29a      	uxth	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006094:	b29b      	uxth	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1cc      	bne.n	8006034 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	2200      	movs	r2, #0
 80060a2:	2140      	movs	r1, #64	; 0x40
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 ff88 	bl	8006fba <UART_WaitOnFlagUntilTimeout>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e006      	b.n	80060c2 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80060bc:	2300      	movs	r3, #0
 80060be:	e000      	b.n	80060c2 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80060c0:	2302      	movs	r3, #2
  }
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3720      	adds	r7, #32
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
	...

080060cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08a      	sub	sp, #40	; 0x28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	4613      	mov	r3, r2
 80060d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e0:	2b20      	cmp	r3, #32
 80060e2:	d142      	bne.n	800616a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <HAL_UART_Receive_IT+0x24>
 80060ea:	88fb      	ldrh	r3, [r7, #6]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d101      	bne.n	80060f4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e03b      	b.n	800616c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d101      	bne.n	8006102 <HAL_UART_Receive_IT+0x36>
 80060fe:	2302      	movs	r3, #2
 8006100:	e034      	b.n	800616c <HAL_UART_Receive_IT+0xa0>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a17      	ldr	r2, [pc, #92]	; (8006174 <HAL_UART_Receive_IT+0xa8>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d01f      	beq.n	800615a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d018      	beq.n	800615a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	e853 3f00 	ldrex	r3, [r3]
 8006134:	613b      	str	r3, [r7, #16]
   return(result);
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	623b      	str	r3, [r7, #32]
 8006148:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614a:	69f9      	ldr	r1, [r7, #28]
 800614c:	6a3a      	ldr	r2, [r7, #32]
 800614e:	e841 2300 	strex	r3, r2, [r1]
 8006152:	61bb      	str	r3, [r7, #24]
   return(result);
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1e6      	bne.n	8006128 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800615a:	88fb      	ldrh	r3, [r7, #6]
 800615c:	461a      	mov	r2, r3
 800615e:	68b9      	ldr	r1, [r7, #8]
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f000 fff3 	bl	800714c <UART_Start_Receive_IT>
 8006166:	4603      	mov	r3, r0
 8006168:	e000      	b.n	800616c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800616a:	2302      	movs	r3, #2
  }
}
 800616c:	4618      	mov	r0, r3
 800616e:	3728      	adds	r7, #40	; 0x28
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	40008000 	.word	0x40008000

08006178 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b0ba      	sub	sp, #232	; 0xe8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800619e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80061a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80061a6:	4013      	ands	r3, r2
 80061a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80061ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d11b      	bne.n	80061ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80061b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b8:	f003 0320 	and.w	r3, r3, #32
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d015      	beq.n	80061ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80061c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061c4:	f003 0320 	and.w	r3, r3, #32
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d105      	bne.n	80061d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80061cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d009      	beq.n	80061ec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 82d6 	beq.w	800678e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	4798      	blx	r3
      }
      return;
 80061ea:	e2d0      	b.n	800678e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80061ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 811f 	beq.w	8006434 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80061f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80061fa:	4b8b      	ldr	r3, [pc, #556]	; (8006428 <HAL_UART_IRQHandler+0x2b0>)
 80061fc:	4013      	ands	r3, r2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d106      	bne.n	8006210 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006202:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006206:	4b89      	ldr	r3, [pc, #548]	; (800642c <HAL_UART_IRQHandler+0x2b4>)
 8006208:	4013      	ands	r3, r2
 800620a:	2b00      	cmp	r3, #0
 800620c:	f000 8112 	beq.w	8006434 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b00      	cmp	r3, #0
 800621a:	d011      	beq.n	8006240 <HAL_UART_IRQHandler+0xc8>
 800621c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00b      	beq.n	8006240 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2201      	movs	r2, #1
 800622e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006236:	f043 0201 	orr.w	r2, r3, #1
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006244:	f003 0302 	and.w	r3, r3, #2
 8006248:	2b00      	cmp	r3, #0
 800624a:	d011      	beq.n	8006270 <HAL_UART_IRQHandler+0xf8>
 800624c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00b      	beq.n	8006270 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2202      	movs	r2, #2
 800625e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006266:	f043 0204 	orr.w	r2, r3, #4
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006274:	f003 0304 	and.w	r3, r3, #4
 8006278:	2b00      	cmp	r3, #0
 800627a:	d011      	beq.n	80062a0 <HAL_UART_IRQHandler+0x128>
 800627c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00b      	beq.n	80062a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2204      	movs	r2, #4
 800628e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006296:	f043 0202 	orr.w	r2, r3, #2
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a4:	f003 0308 	and.w	r3, r3, #8
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d017      	beq.n	80062dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80062ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b0:	f003 0320 	and.w	r3, r3, #32
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d105      	bne.n	80062c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80062b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80062bc:	4b5a      	ldr	r3, [pc, #360]	; (8006428 <HAL_UART_IRQHandler+0x2b0>)
 80062be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00b      	beq.n	80062dc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2208      	movs	r2, #8
 80062ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062d2:	f043 0208 	orr.w	r2, r3, #8
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80062dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d012      	beq.n	800630e <HAL_UART_IRQHandler+0x196>
 80062e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00c      	beq.n	800630e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006304:	f043 0220 	orr.w	r2, r3, #32
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 823c 	beq.w	8006792 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800631a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800631e:	f003 0320 	and.w	r3, r3, #32
 8006322:	2b00      	cmp	r3, #0
 8006324:	d013      	beq.n	800634e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800632a:	f003 0320 	and.w	r3, r3, #32
 800632e:	2b00      	cmp	r3, #0
 8006330:	d105      	bne.n	800633e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d007      	beq.n	800634e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006354:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006362:	2b40      	cmp	r3, #64	; 0x40
 8006364:	d005      	beq.n	8006372 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800636a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800636e:	2b00      	cmp	r3, #0
 8006370:	d04f      	beq.n	8006412 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f001 f814 	bl	80073a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006382:	2b40      	cmp	r3, #64	; 0x40
 8006384:	d141      	bne.n	800640a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3308      	adds	r3, #8
 800638c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800639c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3308      	adds	r3, #8
 80063ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80063b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80063b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80063be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80063c2:	e841 2300 	strex	r3, r2, [r1]
 80063c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80063ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1d9      	bne.n	8006386 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d013      	beq.n	8006402 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063de:	4a14      	ldr	r2, [pc, #80]	; (8006430 <HAL_UART_IRQHandler+0x2b8>)
 80063e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fc fcbb 	bl	8002d62 <HAL_DMA_Abort_IT>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d017      	beq.n	8006422 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80063fc:	4610      	mov	r0, r2
 80063fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006400:	e00f      	b.n	8006422 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f9da 	bl	80067bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006408:	e00b      	b.n	8006422 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f9d6 	bl	80067bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006410:	e007      	b.n	8006422 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f9d2 	bl	80067bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006420:	e1b7      	b.n	8006792 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006422:	bf00      	nop
    return;
 8006424:	e1b5      	b.n	8006792 <HAL_UART_IRQHandler+0x61a>
 8006426:	bf00      	nop
 8006428:	10000001 	.word	0x10000001
 800642c:	04000120 	.word	0x04000120
 8006430:	0800746d 	.word	0x0800746d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006438:	2b01      	cmp	r3, #1
 800643a:	f040 814a 	bne.w	80066d2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800643e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006442:	f003 0310 	and.w	r3, r3, #16
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 8143 	beq.w	80066d2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800644c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006450:	f003 0310 	and.w	r3, r3, #16
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 813c 	beq.w	80066d2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2210      	movs	r2, #16
 8006460:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646c:	2b40      	cmp	r3, #64	; 0x40
 800646e:	f040 80b5 	bne.w	80065dc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800647e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 8187 	beq.w	8006796 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800648e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006492:	429a      	cmp	r2, r3
 8006494:	f080 817f 	bcs.w	8006796 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800649e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0320 	and.w	r3, r3, #32
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f040 8086 	bne.w	80065c0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064c0:	e853 3f00 	ldrex	r3, [r3]
 80064c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80064c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	461a      	mov	r2, r3
 80064da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80064e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80064ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80064ee:	e841 2300 	strex	r3, r2, [r1]
 80064f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80064f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1da      	bne.n	80064b4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3308      	adds	r3, #8
 8006504:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006508:	e853 3f00 	ldrex	r3, [r3]
 800650c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800650e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006510:	f023 0301 	bic.w	r3, r3, #1
 8006514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3308      	adds	r3, #8
 800651e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006522:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006526:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006528:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800652a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800652e:	e841 2300 	strex	r3, r2, [r1]
 8006532:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1e1      	bne.n	80064fe <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	3308      	adds	r3, #8
 8006540:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006544:	e853 3f00 	ldrex	r3, [r3]
 8006548:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800654a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800654c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006550:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3308      	adds	r3, #8
 800655a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800655e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006560:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006562:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006564:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006566:	e841 2300 	strex	r3, r2, [r1]
 800656a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800656c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1e3      	bne.n	800653a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2220      	movs	r2, #32
 8006576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006588:	e853 3f00 	ldrex	r3, [r3]
 800658c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800658e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006590:	f023 0310 	bic.w	r3, r3, #16
 8006594:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	461a      	mov	r2, r3
 800659e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80065a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065aa:	e841 2300 	strex	r3, r2, [r1]
 80065ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80065b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1e4      	bne.n	8006580 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fc fb78 	bl	8002cb0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	4619      	mov	r1, r3
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 f8fb 	bl	80067d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065da:	e0dc      	b.n	8006796 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 80ce 	beq.w	800679a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80065fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 80c9 	beq.w	800679a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006610:	e853 3f00 	ldrex	r3, [r3]
 8006614:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006618:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800661c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	461a      	mov	r2, r3
 8006626:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800662a:	647b      	str	r3, [r7, #68]	; 0x44
 800662c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006630:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006632:	e841 2300 	strex	r3, r2, [r1]
 8006636:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1e4      	bne.n	8006608 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3308      	adds	r3, #8
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	e853 3f00 	ldrex	r3, [r3]
 800664c:	623b      	str	r3, [r7, #32]
   return(result);
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006654:	f023 0301 	bic.w	r3, r3, #1
 8006658:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3308      	adds	r3, #8
 8006662:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006666:	633a      	str	r2, [r7, #48]	; 0x30
 8006668:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800666c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e1      	bne.n	800663e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2220      	movs	r2, #32
 800667e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	e853 3f00 	ldrex	r3, [r3]
 800669a:	60fb      	str	r3, [r7, #12]
   return(result);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f023 0310 	bic.w	r3, r3, #16
 80066a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066b0:	61fb      	str	r3, [r7, #28]
 80066b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b4:	69b9      	ldr	r1, [r7, #24]
 80066b6:	69fa      	ldr	r2, [r7, #28]
 80066b8:	e841 2300 	strex	r3, r2, [r1]
 80066bc:	617b      	str	r3, [r7, #20]
   return(result);
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1e4      	bne.n	800668e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066c8:	4619      	mov	r1, r3
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f880 	bl	80067d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066d0:	e063      	b.n	800679a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80066d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00e      	beq.n	80066fc <HAL_UART_IRQHandler+0x584>
 80066de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d008      	beq.n	80066fc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80066f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f001 fb57 	bl	8007da8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066fa:	e051      	b.n	80067a0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80066fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006704:	2b00      	cmp	r3, #0
 8006706:	d014      	beq.n	8006732 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800670c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006710:	2b00      	cmp	r3, #0
 8006712:	d105      	bne.n	8006720 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006718:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d008      	beq.n	8006732 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006724:	2b00      	cmp	r3, #0
 8006726:	d03a      	beq.n	800679e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	4798      	blx	r3
    }
    return;
 8006730:	e035      	b.n	800679e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673a:	2b00      	cmp	r3, #0
 800673c:	d009      	beq.n	8006752 <HAL_UART_IRQHandler+0x5da>
 800673e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fea4 	bl	8007498 <UART_EndTransmit_IT>
    return;
 8006750:	e026      	b.n	80067a0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d009      	beq.n	8006772 <HAL_UART_IRQHandler+0x5fa>
 800675e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006762:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f001 fb30 	bl	8007dd0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006770:	e016      	b.n	80067a0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006776:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d010      	beq.n	80067a0 <HAL_UART_IRQHandler+0x628>
 800677e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006782:	2b00      	cmp	r3, #0
 8006784:	da0c      	bge.n	80067a0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f001 fb18 	bl	8007dbc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800678c:	e008      	b.n	80067a0 <HAL_UART_IRQHandler+0x628>
      return;
 800678e:	bf00      	nop
 8006790:	e006      	b.n	80067a0 <HAL_UART_IRQHandler+0x628>
    return;
 8006792:	bf00      	nop
 8006794:	e004      	b.n	80067a0 <HAL_UART_IRQHandler+0x628>
      return;
 8006796:	bf00      	nop
 8006798:	e002      	b.n	80067a0 <HAL_UART_IRQHandler+0x628>
      return;
 800679a:	bf00      	nop
 800679c:	e000      	b.n	80067a0 <HAL_UART_IRQHandler+0x628>
    return;
 800679e:	bf00      	nop
  }
}
 80067a0:	37e8      	adds	r7, #232	; 0xe8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop

080067a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067ec:	b08c      	sub	sp, #48	; 0x30
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067f2:	2300      	movs	r3, #0
 80067f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	431a      	orrs	r2, r3
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	431a      	orrs	r2, r3
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	4313      	orrs	r3, r2
 800680e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	4baa      	ldr	r3, [pc, #680]	; (8006ac0 <UART_SetConfig+0x2d8>)
 8006818:	4013      	ands	r3, r2
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	6812      	ldr	r2, [r2, #0]
 800681e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006820:	430b      	orrs	r3, r1
 8006822:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	68da      	ldr	r2, [r3, #12]
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a9f      	ldr	r2, [pc, #636]	; (8006ac4 <UART_SetConfig+0x2dc>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d004      	beq.n	8006854 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006850:	4313      	orrs	r3, r2
 8006852:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800685e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	6812      	ldr	r2, [r2, #0]
 8006866:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006868:	430b      	orrs	r3, r1
 800686a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006872:	f023 010f 	bic.w	r1, r3, #15
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a90      	ldr	r2, [pc, #576]	; (8006ac8 <UART_SetConfig+0x2e0>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d125      	bne.n	80068d8 <UART_SetConfig+0xf0>
 800688c:	4b8f      	ldr	r3, [pc, #572]	; (8006acc <UART_SetConfig+0x2e4>)
 800688e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006892:	f003 0303 	and.w	r3, r3, #3
 8006896:	2b03      	cmp	r3, #3
 8006898:	d81a      	bhi.n	80068d0 <UART_SetConfig+0xe8>
 800689a:	a201      	add	r2, pc, #4	; (adr r2, 80068a0 <UART_SetConfig+0xb8>)
 800689c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a0:	080068b1 	.word	0x080068b1
 80068a4:	080068c1 	.word	0x080068c1
 80068a8:	080068b9 	.word	0x080068b9
 80068ac:	080068c9 	.word	0x080068c9
 80068b0:	2301      	movs	r3, #1
 80068b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068b6:	e116      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 80068b8:	2302      	movs	r3, #2
 80068ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068be:	e112      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 80068c0:	2304      	movs	r3, #4
 80068c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068c6:	e10e      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 80068c8:	2308      	movs	r3, #8
 80068ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ce:	e10a      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 80068d0:	2310      	movs	r3, #16
 80068d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068d6:	e106      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a7c      	ldr	r2, [pc, #496]	; (8006ad0 <UART_SetConfig+0x2e8>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d138      	bne.n	8006954 <UART_SetConfig+0x16c>
 80068e2:	4b7a      	ldr	r3, [pc, #488]	; (8006acc <UART_SetConfig+0x2e4>)
 80068e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e8:	f003 030c 	and.w	r3, r3, #12
 80068ec:	2b0c      	cmp	r3, #12
 80068ee:	d82d      	bhi.n	800694c <UART_SetConfig+0x164>
 80068f0:	a201      	add	r2, pc, #4	; (adr r2, 80068f8 <UART_SetConfig+0x110>)
 80068f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f6:	bf00      	nop
 80068f8:	0800692d 	.word	0x0800692d
 80068fc:	0800694d 	.word	0x0800694d
 8006900:	0800694d 	.word	0x0800694d
 8006904:	0800694d 	.word	0x0800694d
 8006908:	0800693d 	.word	0x0800693d
 800690c:	0800694d 	.word	0x0800694d
 8006910:	0800694d 	.word	0x0800694d
 8006914:	0800694d 	.word	0x0800694d
 8006918:	08006935 	.word	0x08006935
 800691c:	0800694d 	.word	0x0800694d
 8006920:	0800694d 	.word	0x0800694d
 8006924:	0800694d 	.word	0x0800694d
 8006928:	08006945 	.word	0x08006945
 800692c:	2300      	movs	r3, #0
 800692e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006932:	e0d8      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 8006934:	2302      	movs	r3, #2
 8006936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800693a:	e0d4      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 800693c:	2304      	movs	r3, #4
 800693e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006942:	e0d0      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 8006944:	2308      	movs	r3, #8
 8006946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800694a:	e0cc      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 800694c:	2310      	movs	r3, #16
 800694e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006952:	e0c8      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a5e      	ldr	r2, [pc, #376]	; (8006ad4 <UART_SetConfig+0x2ec>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d125      	bne.n	80069aa <UART_SetConfig+0x1c2>
 800695e:	4b5b      	ldr	r3, [pc, #364]	; (8006acc <UART_SetConfig+0x2e4>)
 8006960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006964:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006968:	2b30      	cmp	r3, #48	; 0x30
 800696a:	d016      	beq.n	800699a <UART_SetConfig+0x1b2>
 800696c:	2b30      	cmp	r3, #48	; 0x30
 800696e:	d818      	bhi.n	80069a2 <UART_SetConfig+0x1ba>
 8006970:	2b20      	cmp	r3, #32
 8006972:	d00a      	beq.n	800698a <UART_SetConfig+0x1a2>
 8006974:	2b20      	cmp	r3, #32
 8006976:	d814      	bhi.n	80069a2 <UART_SetConfig+0x1ba>
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <UART_SetConfig+0x19a>
 800697c:	2b10      	cmp	r3, #16
 800697e:	d008      	beq.n	8006992 <UART_SetConfig+0x1aa>
 8006980:	e00f      	b.n	80069a2 <UART_SetConfig+0x1ba>
 8006982:	2300      	movs	r3, #0
 8006984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006988:	e0ad      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 800698a:	2302      	movs	r3, #2
 800698c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006990:	e0a9      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 8006992:	2304      	movs	r3, #4
 8006994:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006998:	e0a5      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 800699a:	2308      	movs	r3, #8
 800699c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069a0:	e0a1      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 80069a2:	2310      	movs	r3, #16
 80069a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069a8:	e09d      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a4a      	ldr	r2, [pc, #296]	; (8006ad8 <UART_SetConfig+0x2f0>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d125      	bne.n	8006a00 <UART_SetConfig+0x218>
 80069b4:	4b45      	ldr	r3, [pc, #276]	; (8006acc <UART_SetConfig+0x2e4>)
 80069b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069be:	2bc0      	cmp	r3, #192	; 0xc0
 80069c0:	d016      	beq.n	80069f0 <UART_SetConfig+0x208>
 80069c2:	2bc0      	cmp	r3, #192	; 0xc0
 80069c4:	d818      	bhi.n	80069f8 <UART_SetConfig+0x210>
 80069c6:	2b80      	cmp	r3, #128	; 0x80
 80069c8:	d00a      	beq.n	80069e0 <UART_SetConfig+0x1f8>
 80069ca:	2b80      	cmp	r3, #128	; 0x80
 80069cc:	d814      	bhi.n	80069f8 <UART_SetConfig+0x210>
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <UART_SetConfig+0x1f0>
 80069d2:	2b40      	cmp	r3, #64	; 0x40
 80069d4:	d008      	beq.n	80069e8 <UART_SetConfig+0x200>
 80069d6:	e00f      	b.n	80069f8 <UART_SetConfig+0x210>
 80069d8:	2300      	movs	r3, #0
 80069da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069de:	e082      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 80069e0:	2302      	movs	r3, #2
 80069e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069e6:	e07e      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 80069e8:	2304      	movs	r3, #4
 80069ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069ee:	e07a      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 80069f0:	2308      	movs	r3, #8
 80069f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069f6:	e076      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 80069f8:	2310      	movs	r3, #16
 80069fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069fe:	e072      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a35      	ldr	r2, [pc, #212]	; (8006adc <UART_SetConfig+0x2f4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d12a      	bne.n	8006a60 <UART_SetConfig+0x278>
 8006a0a:	4b30      	ldr	r3, [pc, #192]	; (8006acc <UART_SetConfig+0x2e4>)
 8006a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a18:	d01a      	beq.n	8006a50 <UART_SetConfig+0x268>
 8006a1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a1e:	d81b      	bhi.n	8006a58 <UART_SetConfig+0x270>
 8006a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a24:	d00c      	beq.n	8006a40 <UART_SetConfig+0x258>
 8006a26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a2a:	d815      	bhi.n	8006a58 <UART_SetConfig+0x270>
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d003      	beq.n	8006a38 <UART_SetConfig+0x250>
 8006a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a34:	d008      	beq.n	8006a48 <UART_SetConfig+0x260>
 8006a36:	e00f      	b.n	8006a58 <UART_SetConfig+0x270>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a3e:	e052      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 8006a40:	2302      	movs	r3, #2
 8006a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a46:	e04e      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 8006a48:	2304      	movs	r3, #4
 8006a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a4e:	e04a      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 8006a50:	2308      	movs	r3, #8
 8006a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a56:	e046      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 8006a58:	2310      	movs	r3, #16
 8006a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a5e:	e042      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a17      	ldr	r2, [pc, #92]	; (8006ac4 <UART_SetConfig+0x2dc>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d13a      	bne.n	8006ae0 <UART_SetConfig+0x2f8>
 8006a6a:	4b18      	ldr	r3, [pc, #96]	; (8006acc <UART_SetConfig+0x2e4>)
 8006a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a78:	d01a      	beq.n	8006ab0 <UART_SetConfig+0x2c8>
 8006a7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a7e:	d81b      	bhi.n	8006ab8 <UART_SetConfig+0x2d0>
 8006a80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a84:	d00c      	beq.n	8006aa0 <UART_SetConfig+0x2b8>
 8006a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a8a:	d815      	bhi.n	8006ab8 <UART_SetConfig+0x2d0>
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d003      	beq.n	8006a98 <UART_SetConfig+0x2b0>
 8006a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a94:	d008      	beq.n	8006aa8 <UART_SetConfig+0x2c0>
 8006a96:	e00f      	b.n	8006ab8 <UART_SetConfig+0x2d0>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a9e:	e022      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006aa6:	e01e      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 8006aa8:	2304      	movs	r3, #4
 8006aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006aae:	e01a      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 8006ab0:	2308      	movs	r3, #8
 8006ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ab6:	e016      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 8006ab8:	2310      	movs	r3, #16
 8006aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006abe:	e012      	b.n	8006ae6 <UART_SetConfig+0x2fe>
 8006ac0:	cfff69f3 	.word	0xcfff69f3
 8006ac4:	40008000 	.word	0x40008000
 8006ac8:	40013800 	.word	0x40013800
 8006acc:	40021000 	.word	0x40021000
 8006ad0:	40004400 	.word	0x40004400
 8006ad4:	40004800 	.word	0x40004800
 8006ad8:	40004c00 	.word	0x40004c00
 8006adc:	40005000 	.word	0x40005000
 8006ae0:	2310      	movs	r3, #16
 8006ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4aae      	ldr	r2, [pc, #696]	; (8006da4 <UART_SetConfig+0x5bc>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	f040 8097 	bne.w	8006c20 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006af2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006af6:	2b08      	cmp	r3, #8
 8006af8:	d823      	bhi.n	8006b42 <UART_SetConfig+0x35a>
 8006afa:	a201      	add	r2, pc, #4	; (adr r2, 8006b00 <UART_SetConfig+0x318>)
 8006afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b00:	08006b25 	.word	0x08006b25
 8006b04:	08006b43 	.word	0x08006b43
 8006b08:	08006b2d 	.word	0x08006b2d
 8006b0c:	08006b43 	.word	0x08006b43
 8006b10:	08006b33 	.word	0x08006b33
 8006b14:	08006b43 	.word	0x08006b43
 8006b18:	08006b43 	.word	0x08006b43
 8006b1c:	08006b43 	.word	0x08006b43
 8006b20:	08006b3b 	.word	0x08006b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b24:	f7fd f8b8 	bl	8003c98 <HAL_RCC_GetPCLK1Freq>
 8006b28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b2a:	e010      	b.n	8006b4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b2c:	4b9e      	ldr	r3, [pc, #632]	; (8006da8 <UART_SetConfig+0x5c0>)
 8006b2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b30:	e00d      	b.n	8006b4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b32:	f7fd f843 	bl	8003bbc <HAL_RCC_GetSysClockFreq>
 8006b36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b38:	e009      	b.n	8006b4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b40:	e005      	b.n	8006b4e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006b4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f000 8130 	beq.w	8006db6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5a:	4a94      	ldr	r2, [pc, #592]	; (8006dac <UART_SetConfig+0x5c4>)
 8006b5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b60:	461a      	mov	r2, r3
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b68:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	005b      	lsls	r3, r3, #1
 8006b72:	4413      	add	r3, r2
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d305      	bcc.n	8006b86 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d903      	bls.n	8006b8e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006b8c:	e113      	b.n	8006db6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	2200      	movs	r2, #0
 8006b92:	60bb      	str	r3, [r7, #8]
 8006b94:	60fa      	str	r2, [r7, #12]
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	4a84      	ldr	r2, [pc, #528]	; (8006dac <UART_SetConfig+0x5c4>)
 8006b9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	603b      	str	r3, [r7, #0]
 8006ba6:	607a      	str	r2, [r7, #4]
 8006ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006bb0:	f7f9 fb9e 	bl	80002f0 <__aeabi_uldivmod>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	4610      	mov	r0, r2
 8006bba:	4619      	mov	r1, r3
 8006bbc:	f04f 0200 	mov.w	r2, #0
 8006bc0:	f04f 0300 	mov.w	r3, #0
 8006bc4:	020b      	lsls	r3, r1, #8
 8006bc6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006bca:	0202      	lsls	r2, r0, #8
 8006bcc:	6979      	ldr	r1, [r7, #20]
 8006bce:	6849      	ldr	r1, [r1, #4]
 8006bd0:	0849      	lsrs	r1, r1, #1
 8006bd2:	2000      	movs	r0, #0
 8006bd4:	460c      	mov	r4, r1
 8006bd6:	4605      	mov	r5, r0
 8006bd8:	eb12 0804 	adds.w	r8, r2, r4
 8006bdc:	eb43 0905 	adc.w	r9, r3, r5
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	469a      	mov	sl, r3
 8006be8:	4693      	mov	fp, r2
 8006bea:	4652      	mov	r2, sl
 8006bec:	465b      	mov	r3, fp
 8006bee:	4640      	mov	r0, r8
 8006bf0:	4649      	mov	r1, r9
 8006bf2:	f7f9 fb7d 	bl	80002f0 <__aeabi_uldivmod>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006bfe:	6a3b      	ldr	r3, [r7, #32]
 8006c00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c04:	d308      	bcc.n	8006c18 <UART_SetConfig+0x430>
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c0c:	d204      	bcs.n	8006c18 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6a3a      	ldr	r2, [r7, #32]
 8006c14:	60da      	str	r2, [r3, #12]
 8006c16:	e0ce      	b.n	8006db6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006c1e:	e0ca      	b.n	8006db6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c28:	d166      	bne.n	8006cf8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006c2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c2e:	2b08      	cmp	r3, #8
 8006c30:	d827      	bhi.n	8006c82 <UART_SetConfig+0x49a>
 8006c32:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <UART_SetConfig+0x450>)
 8006c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c38:	08006c5d 	.word	0x08006c5d
 8006c3c:	08006c65 	.word	0x08006c65
 8006c40:	08006c6d 	.word	0x08006c6d
 8006c44:	08006c83 	.word	0x08006c83
 8006c48:	08006c73 	.word	0x08006c73
 8006c4c:	08006c83 	.word	0x08006c83
 8006c50:	08006c83 	.word	0x08006c83
 8006c54:	08006c83 	.word	0x08006c83
 8006c58:	08006c7b 	.word	0x08006c7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c5c:	f7fd f81c 	bl	8003c98 <HAL_RCC_GetPCLK1Freq>
 8006c60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c62:	e014      	b.n	8006c8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c64:	f7fd f82e 	bl	8003cc4 <HAL_RCC_GetPCLK2Freq>
 8006c68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c6a:	e010      	b.n	8006c8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c6c:	4b4e      	ldr	r3, [pc, #312]	; (8006da8 <UART_SetConfig+0x5c0>)
 8006c6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c70:	e00d      	b.n	8006c8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c72:	f7fc ffa3 	bl	8003bbc <HAL_RCC_GetSysClockFreq>
 8006c76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c78:	e009      	b.n	8006c8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c80:	e005      	b.n	8006c8e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006c8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 8090 	beq.w	8006db6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	4a44      	ldr	r2, [pc, #272]	; (8006dac <UART_SetConfig+0x5c4>)
 8006c9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ca8:	005a      	lsls	r2, r3, #1
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	085b      	lsrs	r3, r3, #1
 8006cb0:	441a      	add	r2, r3
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	2b0f      	cmp	r3, #15
 8006cc0:	d916      	bls.n	8006cf0 <UART_SetConfig+0x508>
 8006cc2:	6a3b      	ldr	r3, [r7, #32]
 8006cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cc8:	d212      	bcs.n	8006cf0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	f023 030f 	bic.w	r3, r3, #15
 8006cd2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	085b      	lsrs	r3, r3, #1
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	f003 0307 	and.w	r3, r3, #7
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	8bfb      	ldrh	r3, [r7, #30]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	8bfa      	ldrh	r2, [r7, #30]
 8006cec:	60da      	str	r2, [r3, #12]
 8006cee:	e062      	b.n	8006db6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006cf6:	e05e      	b.n	8006db6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cf8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006cfc:	2b08      	cmp	r3, #8
 8006cfe:	d828      	bhi.n	8006d52 <UART_SetConfig+0x56a>
 8006d00:	a201      	add	r2, pc, #4	; (adr r2, 8006d08 <UART_SetConfig+0x520>)
 8006d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d06:	bf00      	nop
 8006d08:	08006d2d 	.word	0x08006d2d
 8006d0c:	08006d35 	.word	0x08006d35
 8006d10:	08006d3d 	.word	0x08006d3d
 8006d14:	08006d53 	.word	0x08006d53
 8006d18:	08006d43 	.word	0x08006d43
 8006d1c:	08006d53 	.word	0x08006d53
 8006d20:	08006d53 	.word	0x08006d53
 8006d24:	08006d53 	.word	0x08006d53
 8006d28:	08006d4b 	.word	0x08006d4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d2c:	f7fc ffb4 	bl	8003c98 <HAL_RCC_GetPCLK1Freq>
 8006d30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d32:	e014      	b.n	8006d5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d34:	f7fc ffc6 	bl	8003cc4 <HAL_RCC_GetPCLK2Freq>
 8006d38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d3a:	e010      	b.n	8006d5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d3c:	4b1a      	ldr	r3, [pc, #104]	; (8006da8 <UART_SetConfig+0x5c0>)
 8006d3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d40:	e00d      	b.n	8006d5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d42:	f7fc ff3b 	bl	8003bbc <HAL_RCC_GetSysClockFreq>
 8006d46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d48:	e009      	b.n	8006d5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d50:	e005      	b.n	8006d5e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006d52:	2300      	movs	r3, #0
 8006d54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006d5c:	bf00      	nop
    }

    if (pclk != 0U)
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d028      	beq.n	8006db6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d68:	4a10      	ldr	r2, [pc, #64]	; (8006dac <UART_SetConfig+0x5c4>)
 8006d6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	085b      	lsrs	r3, r3, #1
 8006d7c:	441a      	add	r2, r3
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d88:	6a3b      	ldr	r3, [r7, #32]
 8006d8a:	2b0f      	cmp	r3, #15
 8006d8c:	d910      	bls.n	8006db0 <UART_SetConfig+0x5c8>
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d94:	d20c      	bcs.n	8006db0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	60da      	str	r2, [r3, #12]
 8006da0:	e009      	b.n	8006db6 <UART_SetConfig+0x5ce>
 8006da2:	bf00      	nop
 8006da4:	40008000 	.word	0x40008000
 8006da8:	00f42400 	.word	0x00f42400
 8006dac:	08009418 	.word	0x08009418
      }
      else
      {
        ret = HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006dd2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3730      	adds	r7, #48	; 0x30
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006de0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dec:	f003 0301 	and.w	r3, r3, #1
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00a      	beq.n	8006e0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00a      	beq.n	8006e2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e30:	f003 0304 	and.w	r3, r3, #4
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00a      	beq.n	8006e4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e52:	f003 0308 	and.w	r3, r3, #8
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00a      	beq.n	8006e70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e74:	f003 0310 	and.w	r3, r3, #16
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00a      	beq.n	8006e92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e96:	f003 0320 	and.w	r3, r3, #32
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00a      	beq.n	8006eb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d01a      	beq.n	8006ef6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ede:	d10a      	bne.n	8006ef6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00a      	beq.n	8006f18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	605a      	str	r2, [r3, #4]
  }
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af02      	add	r7, sp, #8
 8006f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f34:	f7fa fcc6 	bl	80018c4 <HAL_GetTick>
 8006f38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0308 	and.w	r3, r3, #8
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d10e      	bne.n	8006f66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f82f 	bl	8006fba <UART_WaitOnFlagUntilTimeout>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e025      	b.n	8006fb2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0304 	and.w	r3, r3, #4
 8006f70:	2b04      	cmp	r3, #4
 8006f72:	d10e      	bne.n	8006f92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f819 	bl	8006fba <UART_WaitOnFlagUntilTimeout>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e00f      	b.n	8006fb2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2220      	movs	r2, #32
 8006f96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b09c      	sub	sp, #112	; 0x70
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	60f8      	str	r0, [r7, #12]
 8006fc2:	60b9      	str	r1, [r7, #8]
 8006fc4:	603b      	str	r3, [r7, #0]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fca:	e0a9      	b.n	8007120 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fd2:	f000 80a5 	beq.w	8007120 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fd6:	f7fa fc75 	bl	80018c4 <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d302      	bcc.n	8006fec <UART_WaitOnFlagUntilTimeout+0x32>
 8006fe6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d140      	bne.n	800706e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ff4:	e853 3f00 	ldrex	r3, [r3]
 8006ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ffc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007000:	667b      	str	r3, [r7, #100]	; 0x64
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800700a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800700c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007010:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007012:	e841 2300 	strex	r3, r2, [r1]
 8007016:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1e6      	bne.n	8006fec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3308      	adds	r3, #8
 8007024:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007028:	e853 3f00 	ldrex	r3, [r3]
 800702c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800702e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007030:	f023 0301 	bic.w	r3, r3, #1
 8007034:	663b      	str	r3, [r7, #96]	; 0x60
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3308      	adds	r3, #8
 800703c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800703e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007040:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007042:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007044:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007046:	e841 2300 	strex	r3, r2, [r1]
 800704a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800704c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1e5      	bne.n	800701e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2220      	movs	r2, #32
 8007056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2220      	movs	r2, #32
 800705e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e069      	b.n	8007142 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0304 	and.w	r3, r3, #4
 8007078:	2b00      	cmp	r3, #0
 800707a:	d051      	beq.n	8007120 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	69db      	ldr	r3, [r3, #28]
 8007082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800708a:	d149      	bne.n	8007120 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007094:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709e:	e853 3f00 	ldrex	r3, [r3]
 80070a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	461a      	mov	r2, r3
 80070b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070b4:	637b      	str	r3, [r7, #52]	; 0x34
 80070b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070bc:	e841 2300 	strex	r3, r2, [r1]
 80070c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1e6      	bne.n	8007096 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3308      	adds	r3, #8
 80070ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	613b      	str	r3, [r7, #16]
   return(result);
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	f023 0301 	bic.w	r3, r3, #1
 80070de:	66bb      	str	r3, [r7, #104]	; 0x68
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3308      	adds	r3, #8
 80070e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070e8:	623a      	str	r2, [r7, #32]
 80070ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ec:	69f9      	ldr	r1, [r7, #28]
 80070ee:	6a3a      	ldr	r2, [r7, #32]
 80070f0:	e841 2300 	strex	r3, r2, [r1]
 80070f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e5      	bne.n	80070c8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2220      	movs	r2, #32
 8007100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2220      	movs	r2, #32
 8007108:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2220      	movs	r2, #32
 8007110:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	e010      	b.n	8007142 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	69da      	ldr	r2, [r3, #28]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	4013      	ands	r3, r2
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	429a      	cmp	r2, r3
 800712e:	bf0c      	ite	eq
 8007130:	2301      	moveq	r3, #1
 8007132:	2300      	movne	r3, #0
 8007134:	b2db      	uxtb	r3, r3
 8007136:	461a      	mov	r2, r3
 8007138:	79fb      	ldrb	r3, [r7, #7]
 800713a:	429a      	cmp	r2, r3
 800713c:	f43f af46 	beq.w	8006fcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3770      	adds	r7, #112	; 0x70
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
	...

0800714c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800714c:	b480      	push	{r7}
 800714e:	b0a3      	sub	sp, #140	; 0x8c
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	4613      	mov	r3, r2
 8007158:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	88fa      	ldrh	r2, [r7, #6]
 8007164:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	88fa      	ldrh	r2, [r7, #6]
 800716c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800717e:	d10e      	bne.n	800719e <UART_Start_Receive_IT+0x52>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d105      	bne.n	8007194 <UART_Start_Receive_IT+0x48>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800718e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007192:	e02d      	b.n	80071f0 <UART_Start_Receive_IT+0xa4>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	22ff      	movs	r2, #255	; 0xff
 8007198:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800719c:	e028      	b.n	80071f0 <UART_Start_Receive_IT+0xa4>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10d      	bne.n	80071c2 <UART_Start_Receive_IT+0x76>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d104      	bne.n	80071b8 <UART_Start_Receive_IT+0x6c>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	22ff      	movs	r2, #255	; 0xff
 80071b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80071b6:	e01b      	b.n	80071f0 <UART_Start_Receive_IT+0xa4>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	227f      	movs	r2, #127	; 0x7f
 80071bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80071c0:	e016      	b.n	80071f0 <UART_Start_Receive_IT+0xa4>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071ca:	d10d      	bne.n	80071e8 <UART_Start_Receive_IT+0x9c>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d104      	bne.n	80071de <UART_Start_Receive_IT+0x92>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	227f      	movs	r2, #127	; 0x7f
 80071d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80071dc:	e008      	b.n	80071f0 <UART_Start_Receive_IT+0xa4>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	223f      	movs	r2, #63	; 0x3f
 80071e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80071e6:	e003      	b.n	80071f0 <UART_Start_Receive_IT+0xa4>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2222      	movs	r2, #34	; 0x22
 80071fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	3308      	adds	r3, #8
 8007206:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800720a:	e853 3f00 	ldrex	r3, [r3]
 800720e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007210:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007212:	f043 0301 	orr.w	r3, r3, #1
 8007216:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3308      	adds	r3, #8
 8007220:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007224:	673a      	str	r2, [r7, #112]	; 0x70
 8007226:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007228:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800722a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800722c:	e841 2300 	strex	r3, r2, [r1]
 8007230:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007232:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1e3      	bne.n	8007200 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800723c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007240:	d153      	bne.n	80072ea <UART_Start_Receive_IT+0x19e>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007248:	88fa      	ldrh	r2, [r7, #6]
 800724a:	429a      	cmp	r2, r3
 800724c:	d34d      	bcc.n	80072ea <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007256:	d107      	bne.n	8007268 <UART_Start_Receive_IT+0x11c>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d103      	bne.n	8007268 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4a4b      	ldr	r2, [pc, #300]	; (8007390 <UART_Start_Receive_IT+0x244>)
 8007264:	671a      	str	r2, [r3, #112]	; 0x70
 8007266:	e002      	b.n	800726e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	4a4a      	ldr	r2, [pc, #296]	; (8007394 <UART_Start_Receive_IT+0x248>)
 800726c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d01a      	beq.n	80072b4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007286:	e853 3f00 	ldrex	r3, [r3]
 800728a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800728c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800728e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007292:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	461a      	mov	r2, r3
 800729c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072a2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072a8:	e841 2300 	strex	r3, r2, [r1]
 80072ac:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80072ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1e4      	bne.n	800727e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3308      	adds	r3, #8
 80072ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072be:	e853 3f00 	ldrex	r3, [r3]
 80072c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	3308      	adds	r3, #8
 80072d2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80072d4:	64ba      	str	r2, [r7, #72]	; 0x48
 80072d6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072dc:	e841 2300 	strex	r3, r2, [r1]
 80072e0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80072e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1e5      	bne.n	80072b4 <UART_Start_Receive_IT+0x168>
 80072e8:	e04a      	b.n	8007380 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f2:	d107      	bne.n	8007304 <UART_Start_Receive_IT+0x1b8>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d103      	bne.n	8007304 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4a26      	ldr	r2, [pc, #152]	; (8007398 <UART_Start_Receive_IT+0x24c>)
 8007300:	671a      	str	r2, [r3, #112]	; 0x70
 8007302:	e002      	b.n	800730a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	4a25      	ldr	r2, [pc, #148]	; (800739c <UART_Start_Receive_IT+0x250>)
 8007308:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d019      	beq.n	800734e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007322:	e853 3f00 	ldrex	r3, [r3]
 8007326:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800732e:	677b      	str	r3, [r7, #116]	; 0x74
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	461a      	mov	r2, r3
 8007336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007338:	637b      	str	r3, [r7, #52]	; 0x34
 800733a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800733e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007340:	e841 2300 	strex	r3, r2, [r1]
 8007344:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e6      	bne.n	800731a <UART_Start_Receive_IT+0x1ce>
 800734c:	e018      	b.n	8007380 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	e853 3f00 	ldrex	r3, [r3]
 800735a:	613b      	str	r3, [r7, #16]
   return(result);
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	f043 0320 	orr.w	r3, r3, #32
 8007362:	67bb      	str	r3, [r7, #120]	; 0x78
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	461a      	mov	r2, r3
 800736a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800736c:	623b      	str	r3, [r7, #32]
 800736e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007370:	69f9      	ldr	r1, [r7, #28]
 8007372:	6a3a      	ldr	r2, [r7, #32]
 8007374:	e841 2300 	strex	r3, r2, [r1]
 8007378:	61bb      	str	r3, [r7, #24]
   return(result);
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1e6      	bne.n	800734e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	378c      	adds	r7, #140	; 0x8c
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	08007aa9 	.word	0x08007aa9
 8007394:	080077b1 	.word	0x080077b1
 8007398:	0800764f 	.word	0x0800764f
 800739c:	080074ef 	.word	0x080074ef

080073a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b095      	sub	sp, #84	; 0x54
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b0:	e853 3f00 	ldrex	r3, [r3]
 80073b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	461a      	mov	r2, r3
 80073c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073c6:	643b      	str	r3, [r7, #64]	; 0x40
 80073c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073ce:	e841 2300 	strex	r3, r2, [r1]
 80073d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1e6      	bne.n	80073a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	3308      	adds	r3, #8
 80073e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073f0:	f023 0301 	bic.w	r3, r3, #1
 80073f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3308      	adds	r3, #8
 80073fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007400:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007406:	e841 2300 	strex	r3, r2, [r1]
 800740a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1e3      	bne.n	80073da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007416:	2b01      	cmp	r3, #1
 8007418:	d118      	bne.n	800744c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	e853 3f00 	ldrex	r3, [r3]
 8007426:	60bb      	str	r3, [r7, #8]
   return(result);
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	f023 0310 	bic.w	r3, r3, #16
 800742e:	647b      	str	r3, [r7, #68]	; 0x44
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	461a      	mov	r2, r3
 8007436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007438:	61bb      	str	r3, [r7, #24]
 800743a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743c:	6979      	ldr	r1, [r7, #20]
 800743e:	69ba      	ldr	r2, [r7, #24]
 8007440:	e841 2300 	strex	r3, r2, [r1]
 8007444:	613b      	str	r3, [r7, #16]
   return(result);
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1e6      	bne.n	800741a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2220      	movs	r2, #32
 8007450:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007460:	bf00      	nop
 8007462:	3754      	adds	r7, #84	; 0x54
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007478:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f7ff f996 	bl	80067bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007490:	bf00      	nop
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b088      	sub	sp, #32
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074b4:	61fb      	str	r3, [r7, #28]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	461a      	mov	r2, r3
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	61bb      	str	r3, [r7, #24]
 80074c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	6979      	ldr	r1, [r7, #20]
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	613b      	str	r3, [r7, #16]
   return(result);
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e6      	bne.n	80074a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2220      	movs	r2, #32
 80074d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7ff f961 	bl	80067a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074e6:	bf00      	nop
 80074e8:	3720      	adds	r7, #32
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b096      	sub	sp, #88	; 0x58
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80074fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007506:	2b22      	cmp	r3, #34	; 0x22
 8007508:	f040 8095 	bne.w	8007636 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007512:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007516:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800751a:	b2d9      	uxtb	r1, r3
 800751c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007520:	b2da      	uxtb	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007526:	400a      	ands	r2, r1
 8007528:	b2d2      	uxtb	r2, r2
 800752a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007530:	1c5a      	adds	r2, r3, #1
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800753c:	b29b      	uxth	r3, r3
 800753e:	3b01      	subs	r3, #1
 8007540:	b29a      	uxth	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800754e:	b29b      	uxth	r3, r3
 8007550:	2b00      	cmp	r3, #0
 8007552:	d178      	bne.n	8007646 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755c:	e853 3f00 	ldrex	r3, [r3]
 8007560:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007564:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007568:	653b      	str	r3, [r7, #80]	; 0x50
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	461a      	mov	r2, r3
 8007570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007572:	647b      	str	r3, [r7, #68]	; 0x44
 8007574:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007576:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007578:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800757a:	e841 2300 	strex	r3, r2, [r1]
 800757e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1e6      	bne.n	8007554 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	3308      	adds	r3, #8
 800758c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	e853 3f00 	ldrex	r3, [r3]
 8007594:	623b      	str	r3, [r7, #32]
   return(result);
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	f023 0301 	bic.w	r3, r3, #1
 800759c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3308      	adds	r3, #8
 80075a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075a6:	633a      	str	r2, [r7, #48]	; 0x30
 80075a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ae:	e841 2300 	strex	r3, r2, [r1]
 80075b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1e5      	bne.n	8007586 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2220      	movs	r2, #32
 80075be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d12e      	bne.n	800762e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	e853 3f00 	ldrex	r3, [r3]
 80075e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f023 0310 	bic.w	r3, r3, #16
 80075ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	461a      	mov	r2, r3
 80075f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075f4:	61fb      	str	r3, [r7, #28]
 80075f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f8:	69b9      	ldr	r1, [r7, #24]
 80075fa:	69fa      	ldr	r2, [r7, #28]
 80075fc:	e841 2300 	strex	r3, r2, [r1]
 8007600:	617b      	str	r3, [r7, #20]
   return(result);
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1e6      	bne.n	80075d6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	f003 0310 	and.w	r3, r3, #16
 8007612:	2b10      	cmp	r3, #16
 8007614:	d103      	bne.n	800761e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2210      	movs	r2, #16
 800761c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007624:	4619      	mov	r1, r3
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f7ff f8d2 	bl	80067d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800762c:	e00b      	b.n	8007646 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7fa f8de 	bl	80017f0 <HAL_UART_RxCpltCallback>
}
 8007634:	e007      	b.n	8007646 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	699a      	ldr	r2, [r3, #24]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f042 0208 	orr.w	r2, r2, #8
 8007644:	619a      	str	r2, [r3, #24]
}
 8007646:	bf00      	nop
 8007648:	3758      	adds	r7, #88	; 0x58
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b096      	sub	sp, #88	; 0x58
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800765c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007666:	2b22      	cmp	r3, #34	; 0x22
 8007668:	f040 8095 	bne.w	8007796 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007672:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800767a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800767c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007680:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007684:	4013      	ands	r3, r2
 8007686:	b29a      	uxth	r2, r3
 8007688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800768a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007690:	1c9a      	adds	r2, r3, #2
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800769c:	b29b      	uxth	r3, r3
 800769e:	3b01      	subs	r3, #1
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d178      	bne.n	80077a6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076bc:	e853 3f00 	ldrex	r3, [r3]
 80076c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	461a      	mov	r2, r3
 80076d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076d2:	643b      	str	r3, [r7, #64]	; 0x40
 80076d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076da:	e841 2300 	strex	r3, r2, [r1]
 80076de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1e6      	bne.n	80076b4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	3308      	adds	r3, #8
 80076ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ee:	6a3b      	ldr	r3, [r7, #32]
 80076f0:	e853 3f00 	ldrex	r3, [r3]
 80076f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	f023 0301 	bic.w	r3, r3, #1
 80076fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3308      	adds	r3, #8
 8007704:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007706:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007708:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800770c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800770e:	e841 2300 	strex	r3, r2, [r1]
 8007712:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1e5      	bne.n	80076e6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2220      	movs	r2, #32
 800771e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800772c:	2b01      	cmp	r3, #1
 800772e:	d12e      	bne.n	800778e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	e853 3f00 	ldrex	r3, [r3]
 8007742:	60bb      	str	r3, [r7, #8]
   return(result);
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	f023 0310 	bic.w	r3, r3, #16
 800774a:	647b      	str	r3, [r7, #68]	; 0x44
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	461a      	mov	r2, r3
 8007752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007754:	61bb      	str	r3, [r7, #24]
 8007756:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007758:	6979      	ldr	r1, [r7, #20]
 800775a:	69ba      	ldr	r2, [r7, #24]
 800775c:	e841 2300 	strex	r3, r2, [r1]
 8007760:	613b      	str	r3, [r7, #16]
   return(result);
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1e6      	bne.n	8007736 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	f003 0310 	and.w	r3, r3, #16
 8007772:	2b10      	cmp	r3, #16
 8007774:	d103      	bne.n	800777e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2210      	movs	r2, #16
 800777c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7ff f822 	bl	80067d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800778c:	e00b      	b.n	80077a6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7fa f82e 	bl	80017f0 <HAL_UART_RxCpltCallback>
}
 8007794:	e007      	b.n	80077a6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	699a      	ldr	r2, [r3, #24]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 0208 	orr.w	r2, r2, #8
 80077a4:	619a      	str	r2, [r3, #24]
}
 80077a6:	bf00      	nop
 80077a8:	3758      	adds	r7, #88	; 0x58
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
	...

080077b0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b0a6      	sub	sp, #152	; 0x98
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80077be:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	69db      	ldr	r3, [r3, #28]
 80077c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077e6:	2b22      	cmp	r3, #34	; 0x22
 80077e8:	f040 814f 	bne.w	8007a8a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80077f2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80077f6:	e0f6      	b.n	80079e6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fe:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007802:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007806:	b2d9      	uxtb	r1, r3
 8007808:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800780c:	b2da      	uxtb	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007812:	400a      	ands	r2, r1
 8007814:	b2d2      	uxtb	r2, r2
 8007816:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800781c:	1c5a      	adds	r2, r3, #1
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007828:	b29b      	uxth	r3, r3
 800782a:	3b01      	subs	r3, #1
 800782c:	b29a      	uxth	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800783e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007842:	f003 0307 	and.w	r3, r3, #7
 8007846:	2b00      	cmp	r3, #0
 8007848:	d053      	beq.n	80078f2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800784a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	d011      	beq.n	800787a <UART_RxISR_8BIT_FIFOEN+0xca>
 8007856:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800785a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00b      	beq.n	800787a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2201      	movs	r2, #1
 8007868:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007870:	f043 0201 	orr.w	r2, r3, #1
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800787a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800787e:	f003 0302 	and.w	r3, r3, #2
 8007882:	2b00      	cmp	r3, #0
 8007884:	d011      	beq.n	80078aa <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007886:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00b      	beq.n	80078aa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2202      	movs	r2, #2
 8007898:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078a0:	f043 0204 	orr.w	r2, r3, #4
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80078ae:	f003 0304 	and.w	r3, r3, #4
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d011      	beq.n	80078da <UART_RxISR_8BIT_FIFOEN+0x12a>
 80078b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00b      	beq.n	80078da <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2204      	movs	r2, #4
 80078c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078d0:	f043 0202 	orr.w	r2, r3, #2
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d006      	beq.n	80078f2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7fe ff69 	bl	80067bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d173      	bne.n	80079e6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007906:	e853 3f00 	ldrex	r3, [r3]
 800790a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800790c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800790e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007912:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	461a      	mov	r2, r3
 800791c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007920:	66bb      	str	r3, [r7, #104]	; 0x68
 8007922:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007924:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007926:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007928:	e841 2300 	strex	r3, r2, [r1]
 800792c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800792e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1e4      	bne.n	80078fe <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3308      	adds	r3, #8
 800793a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800793e:	e853 3f00 	ldrex	r3, [r3]
 8007942:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800794a:	f023 0301 	bic.w	r3, r3, #1
 800794e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3308      	adds	r3, #8
 8007956:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007958:	657a      	str	r2, [r7, #84]	; 0x54
 800795a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800795e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007960:	e841 2300 	strex	r3, r2, [r1]
 8007964:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1e3      	bne.n	8007934 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2220      	movs	r2, #32
 8007970:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800797e:	2b01      	cmp	r3, #1
 8007980:	d12e      	bne.n	80079e0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007990:	e853 3f00 	ldrex	r3, [r3]
 8007994:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007998:	f023 0310 	bic.w	r3, r3, #16
 800799c:	67bb      	str	r3, [r7, #120]	; 0x78
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	461a      	mov	r2, r3
 80079a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079a6:	643b      	str	r3, [r7, #64]	; 0x40
 80079a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079ae:	e841 2300 	strex	r3, r2, [r1]
 80079b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1e6      	bne.n	8007988 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	69db      	ldr	r3, [r3, #28]
 80079c0:	f003 0310 	and.w	r3, r3, #16
 80079c4:	2b10      	cmp	r3, #16
 80079c6:	d103      	bne.n	80079d0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2210      	movs	r2, #16
 80079ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079d6:	4619      	mov	r1, r3
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f7fe fef9 	bl	80067d0 <HAL_UARTEx_RxEventCallback>
 80079de:	e002      	b.n	80079e6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f7f9 ff05 	bl	80017f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d006      	beq.n	80079fc <UART_RxISR_8BIT_FIFOEN+0x24c>
 80079ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80079f2:	f003 0320 	and.w	r3, r3, #32
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f47f aefe 	bne.w	80077f8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a02:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007a06:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d045      	beq.n	8007a9a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007a14:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d23e      	bcs.n	8007a9a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	3308      	adds	r3, #8
 8007a22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a24:	6a3b      	ldr	r3, [r7, #32]
 8007a26:	e853 3f00 	ldrex	r3, [r3]
 8007a2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a32:	673b      	str	r3, [r7, #112]	; 0x70
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3308      	adds	r3, #8
 8007a3a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007a3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a44:	e841 2300 	strex	r3, r2, [r1]
 8007a48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1e5      	bne.n	8007a1c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a14      	ldr	r2, [pc, #80]	; (8007aa4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007a54:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	e853 3f00 	ldrex	r3, [r3]
 8007a62:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	f043 0320 	orr.w	r3, r3, #32
 8007a6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	461a      	mov	r2, r3
 8007a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a74:	61bb      	str	r3, [r7, #24]
 8007a76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a78:	6979      	ldr	r1, [r7, #20]
 8007a7a:	69ba      	ldr	r2, [r7, #24]
 8007a7c:	e841 2300 	strex	r3, r2, [r1]
 8007a80:	613b      	str	r3, [r7, #16]
   return(result);
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1e6      	bne.n	8007a56 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a88:	e007      	b.n	8007a9a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	699a      	ldr	r2, [r3, #24]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f042 0208 	orr.w	r2, r2, #8
 8007a98:	619a      	str	r2, [r3, #24]
}
 8007a9a:	bf00      	nop
 8007a9c:	3798      	adds	r7, #152	; 0x98
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	080074ef 	.word	0x080074ef

08007aa8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b0a8      	sub	sp, #160	; 0xa0
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007ab6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	69db      	ldr	r3, [r3, #28]
 8007ac0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ade:	2b22      	cmp	r3, #34	; 0x22
 8007ae0:	f040 8153 	bne.w	8007d8a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007aea:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007aee:	e0fa      	b.n	8007ce6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007afe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007b02:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007b06:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b18:	1c9a      	adds	r2, r3, #2
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	3b01      	subs	r3, #1
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	69db      	ldr	r3, [r3, #28]
 8007b36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007b3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b3e:	f003 0307 	and.w	r3, r3, #7
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d053      	beq.n	8007bee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d011      	beq.n	8007b76 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007b52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00b      	beq.n	8007b76 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2201      	movs	r2, #1
 8007b64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b6c:	f043 0201 	orr.w	r2, r3, #1
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b7a:	f003 0302 	and.w	r3, r3, #2
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d011      	beq.n	8007ba6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007b82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00b      	beq.n	8007ba6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2202      	movs	r2, #2
 8007b94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b9c:	f043 0204 	orr.w	r2, r3, #4
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ba6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007baa:	f003 0304 	and.w	r3, r3, #4
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d011      	beq.n	8007bd6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007bb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00b      	beq.n	8007bd6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2204      	movs	r2, #4
 8007bc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bcc:	f043 0202 	orr.w	r2, r3, #2
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d006      	beq.n	8007bee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7fe fdeb 	bl	80067bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d175      	bne.n	8007ce6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c02:	e853 3f00 	ldrex	r3, [r3]
 8007c06:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	461a      	mov	r2, r3
 8007c18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c1e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c20:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c24:	e841 2300 	strex	r3, r2, [r1]
 8007c28:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007c2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1e4      	bne.n	8007bfa <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	3308      	adds	r3, #8
 8007c36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c3a:	e853 3f00 	ldrex	r3, [r3]
 8007c3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c46:	f023 0301 	bic.w	r3, r3, #1
 8007c4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3308      	adds	r3, #8
 8007c54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c58:	65ba      	str	r2, [r7, #88]	; 0x58
 8007c5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c60:	e841 2300 	strex	r3, r2, [r1]
 8007c64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1e1      	bne.n	8007c30 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d12e      	bne.n	8007ce0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c98:	f023 0310 	bic.w	r3, r3, #16
 8007c9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8007ca8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007caa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007cac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cae:	e841 2300 	strex	r3, r2, [r1]
 8007cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1e6      	bne.n	8007c88 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	69db      	ldr	r3, [r3, #28]
 8007cc0:	f003 0310 	and.w	r3, r3, #16
 8007cc4:	2b10      	cmp	r3, #16
 8007cc6:	d103      	bne.n	8007cd0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2210      	movs	r2, #16
 8007cce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7fe fd79 	bl	80067d0 <HAL_UARTEx_RxEventCallback>
 8007cde:	e002      	b.n	8007ce6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f7f9 fd85 	bl	80017f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ce6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d006      	beq.n	8007cfc <UART_RxISR_16BIT_FIFOEN+0x254>
 8007cee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cf2:	f003 0320 	and.w	r3, r3, #32
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f47f aefa 	bne.w	8007af0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d02:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007d06:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d045      	beq.n	8007d9a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007d14:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d23e      	bcs.n	8007d9a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3308      	adds	r3, #8
 8007d22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d26:	e853 3f00 	ldrex	r3, [r3]
 8007d2a:	623b      	str	r3, [r7, #32]
   return(result);
 8007d2c:	6a3b      	ldr	r3, [r7, #32]
 8007d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d32:	677b      	str	r3, [r7, #116]	; 0x74
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	3308      	adds	r3, #8
 8007d3a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007d3c:	633a      	str	r2, [r7, #48]	; 0x30
 8007d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d44:	e841 2300 	strex	r3, r2, [r1]
 8007d48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d1e5      	bne.n	8007d1c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a14      	ldr	r2, [pc, #80]	; (8007da4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007d54:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	e853 3f00 	ldrex	r3, [r3]
 8007d62:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f043 0320 	orr.w	r3, r3, #32
 8007d6a:	673b      	str	r3, [r7, #112]	; 0x70
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	461a      	mov	r2, r3
 8007d72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d74:	61fb      	str	r3, [r7, #28]
 8007d76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d78:	69b9      	ldr	r1, [r7, #24]
 8007d7a:	69fa      	ldr	r2, [r7, #28]
 8007d7c:	e841 2300 	strex	r3, r2, [r1]
 8007d80:	617b      	str	r3, [r7, #20]
   return(result);
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1e6      	bne.n	8007d56 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d88:	e007      	b.n	8007d9a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	699a      	ldr	r2, [r3, #24]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f042 0208 	orr.w	r2, r2, #8
 8007d98:	619a      	str	r2, [r3, #24]
}
 8007d9a:	bf00      	nop
 8007d9c:	37a0      	adds	r7, #160	; 0xa0
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	0800764f 	.word	0x0800764f

08007da8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d101      	bne.n	8007dfa <HAL_UARTEx_DisableFifoMode+0x16>
 8007df6:	2302      	movs	r3, #2
 8007df8:	e027      	b.n	8007e4a <HAL_UARTEx_DisableFifoMode+0x66>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2224      	movs	r2, #36	; 0x24
 8007e06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f022 0201 	bic.w	r2, r2, #1
 8007e20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007e28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
 8007e5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d101      	bne.n	8007e6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007e6a:	2302      	movs	r3, #2
 8007e6c:	e02d      	b.n	8007eca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2224      	movs	r2, #36	; 0x24
 8007e7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f022 0201 	bic.w	r2, r2, #1
 8007e94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	430a      	orrs	r2, r1
 8007ea8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f850 	bl	8007f50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2220      	movs	r2, #32
 8007ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b084      	sub	sp, #16
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
 8007eda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d101      	bne.n	8007eea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ee6:	2302      	movs	r3, #2
 8007ee8:	e02d      	b.n	8007f46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2224      	movs	r2, #36	; 0x24
 8007ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f022 0201 	bic.w	r2, r2, #1
 8007f10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	683a      	ldr	r2, [r7, #0]
 8007f22:	430a      	orrs	r2, r1
 8007f24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f812 	bl	8007f50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2220      	movs	r2, #32
 8007f38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
	...

08007f50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d108      	bne.n	8007f72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007f70:	e031      	b.n	8007fd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007f72:	2308      	movs	r3, #8
 8007f74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007f76:	2308      	movs	r3, #8
 8007f78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	0e5b      	lsrs	r3, r3, #25
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	f003 0307 	and.w	r3, r3, #7
 8007f88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	0f5b      	lsrs	r3, r3, #29
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	f003 0307 	and.w	r3, r3, #7
 8007f98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f9a:	7bbb      	ldrb	r3, [r7, #14]
 8007f9c:	7b3a      	ldrb	r2, [r7, #12]
 8007f9e:	4911      	ldr	r1, [pc, #68]	; (8007fe4 <UARTEx_SetNbDataToProcess+0x94>)
 8007fa0:	5c8a      	ldrb	r2, [r1, r2]
 8007fa2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007fa6:	7b3a      	ldrb	r2, [r7, #12]
 8007fa8:	490f      	ldr	r1, [pc, #60]	; (8007fe8 <UARTEx_SetNbDataToProcess+0x98>)
 8007faa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fac:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fb8:	7bfb      	ldrb	r3, [r7, #15]
 8007fba:	7b7a      	ldrb	r2, [r7, #13]
 8007fbc:	4909      	ldr	r1, [pc, #36]	; (8007fe4 <UARTEx_SetNbDataToProcess+0x94>)
 8007fbe:	5c8a      	ldrb	r2, [r1, r2]
 8007fc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007fc4:	7b7a      	ldrb	r2, [r7, #13]
 8007fc6:	4908      	ldr	r1, [pc, #32]	; (8007fe8 <UARTEx_SetNbDataToProcess+0x98>)
 8007fc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fca:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007fd6:	bf00      	nop
 8007fd8:	3714      	adds	r7, #20
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	08009430 	.word	0x08009430
 8007fe8:	08009438 	.word	0x08009438

08007fec <std>:
 8007fec:	2300      	movs	r3, #0
 8007fee:	b510      	push	{r4, lr}
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	e9c0 3300 	strd	r3, r3, [r0]
 8007ff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ffa:	6083      	str	r3, [r0, #8]
 8007ffc:	8181      	strh	r1, [r0, #12]
 8007ffe:	6643      	str	r3, [r0, #100]	; 0x64
 8008000:	81c2      	strh	r2, [r0, #14]
 8008002:	6183      	str	r3, [r0, #24]
 8008004:	4619      	mov	r1, r3
 8008006:	2208      	movs	r2, #8
 8008008:	305c      	adds	r0, #92	; 0x5c
 800800a:	f000 f916 	bl	800823a <memset>
 800800e:	4b05      	ldr	r3, [pc, #20]	; (8008024 <std+0x38>)
 8008010:	6263      	str	r3, [r4, #36]	; 0x24
 8008012:	4b05      	ldr	r3, [pc, #20]	; (8008028 <std+0x3c>)
 8008014:	62a3      	str	r3, [r4, #40]	; 0x28
 8008016:	4b05      	ldr	r3, [pc, #20]	; (800802c <std+0x40>)
 8008018:	62e3      	str	r3, [r4, #44]	; 0x2c
 800801a:	4b05      	ldr	r3, [pc, #20]	; (8008030 <std+0x44>)
 800801c:	6224      	str	r4, [r4, #32]
 800801e:	6323      	str	r3, [r4, #48]	; 0x30
 8008020:	bd10      	pop	{r4, pc}
 8008022:	bf00      	nop
 8008024:	080081b5 	.word	0x080081b5
 8008028:	080081d7 	.word	0x080081d7
 800802c:	0800820f 	.word	0x0800820f
 8008030:	08008233 	.word	0x08008233

08008034 <stdio_exit_handler>:
 8008034:	4a02      	ldr	r2, [pc, #8]	; (8008040 <stdio_exit_handler+0xc>)
 8008036:	4903      	ldr	r1, [pc, #12]	; (8008044 <stdio_exit_handler+0x10>)
 8008038:	4803      	ldr	r0, [pc, #12]	; (8008048 <stdio_exit_handler+0x14>)
 800803a:	f000 b869 	b.w	8008110 <_fwalk_sglue>
 800803e:	bf00      	nop
 8008040:	200000c8 	.word	0x200000c8
 8008044:	08008d01 	.word	0x08008d01
 8008048:	200000d4 	.word	0x200000d4

0800804c <cleanup_stdio>:
 800804c:	6841      	ldr	r1, [r0, #4]
 800804e:	4b0c      	ldr	r3, [pc, #48]	; (8008080 <cleanup_stdio+0x34>)
 8008050:	4299      	cmp	r1, r3
 8008052:	b510      	push	{r4, lr}
 8008054:	4604      	mov	r4, r0
 8008056:	d001      	beq.n	800805c <cleanup_stdio+0x10>
 8008058:	f000 fe52 	bl	8008d00 <_fflush_r>
 800805c:	68a1      	ldr	r1, [r4, #8]
 800805e:	4b09      	ldr	r3, [pc, #36]	; (8008084 <cleanup_stdio+0x38>)
 8008060:	4299      	cmp	r1, r3
 8008062:	d002      	beq.n	800806a <cleanup_stdio+0x1e>
 8008064:	4620      	mov	r0, r4
 8008066:	f000 fe4b 	bl	8008d00 <_fflush_r>
 800806a:	68e1      	ldr	r1, [r4, #12]
 800806c:	4b06      	ldr	r3, [pc, #24]	; (8008088 <cleanup_stdio+0x3c>)
 800806e:	4299      	cmp	r1, r3
 8008070:	d004      	beq.n	800807c <cleanup_stdio+0x30>
 8008072:	4620      	mov	r0, r4
 8008074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008078:	f000 be42 	b.w	8008d00 <_fflush_r>
 800807c:	bd10      	pop	{r4, pc}
 800807e:	bf00      	nop
 8008080:	200004e4 	.word	0x200004e4
 8008084:	2000054c 	.word	0x2000054c
 8008088:	200005b4 	.word	0x200005b4

0800808c <global_stdio_init.part.0>:
 800808c:	b510      	push	{r4, lr}
 800808e:	4b0b      	ldr	r3, [pc, #44]	; (80080bc <global_stdio_init.part.0+0x30>)
 8008090:	4c0b      	ldr	r4, [pc, #44]	; (80080c0 <global_stdio_init.part.0+0x34>)
 8008092:	4a0c      	ldr	r2, [pc, #48]	; (80080c4 <global_stdio_init.part.0+0x38>)
 8008094:	601a      	str	r2, [r3, #0]
 8008096:	4620      	mov	r0, r4
 8008098:	2200      	movs	r2, #0
 800809a:	2104      	movs	r1, #4
 800809c:	f7ff ffa6 	bl	8007fec <std>
 80080a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80080a4:	2201      	movs	r2, #1
 80080a6:	2109      	movs	r1, #9
 80080a8:	f7ff ffa0 	bl	8007fec <std>
 80080ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80080b0:	2202      	movs	r2, #2
 80080b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080b6:	2112      	movs	r1, #18
 80080b8:	f7ff bf98 	b.w	8007fec <std>
 80080bc:	2000061c 	.word	0x2000061c
 80080c0:	200004e4 	.word	0x200004e4
 80080c4:	08008035 	.word	0x08008035

080080c8 <__sfp_lock_acquire>:
 80080c8:	4801      	ldr	r0, [pc, #4]	; (80080d0 <__sfp_lock_acquire+0x8>)
 80080ca:	f000 b98b 	b.w	80083e4 <__retarget_lock_acquire_recursive>
 80080ce:	bf00      	nop
 80080d0:	20000625 	.word	0x20000625

080080d4 <__sfp_lock_release>:
 80080d4:	4801      	ldr	r0, [pc, #4]	; (80080dc <__sfp_lock_release+0x8>)
 80080d6:	f000 b986 	b.w	80083e6 <__retarget_lock_release_recursive>
 80080da:	bf00      	nop
 80080dc:	20000625 	.word	0x20000625

080080e0 <__sinit>:
 80080e0:	b510      	push	{r4, lr}
 80080e2:	4604      	mov	r4, r0
 80080e4:	f7ff fff0 	bl	80080c8 <__sfp_lock_acquire>
 80080e8:	6a23      	ldr	r3, [r4, #32]
 80080ea:	b11b      	cbz	r3, 80080f4 <__sinit+0x14>
 80080ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080f0:	f7ff bff0 	b.w	80080d4 <__sfp_lock_release>
 80080f4:	4b04      	ldr	r3, [pc, #16]	; (8008108 <__sinit+0x28>)
 80080f6:	6223      	str	r3, [r4, #32]
 80080f8:	4b04      	ldr	r3, [pc, #16]	; (800810c <__sinit+0x2c>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1f5      	bne.n	80080ec <__sinit+0xc>
 8008100:	f7ff ffc4 	bl	800808c <global_stdio_init.part.0>
 8008104:	e7f2      	b.n	80080ec <__sinit+0xc>
 8008106:	bf00      	nop
 8008108:	0800804d 	.word	0x0800804d
 800810c:	2000061c 	.word	0x2000061c

08008110 <_fwalk_sglue>:
 8008110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008114:	4607      	mov	r7, r0
 8008116:	4688      	mov	r8, r1
 8008118:	4614      	mov	r4, r2
 800811a:	2600      	movs	r6, #0
 800811c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008120:	f1b9 0901 	subs.w	r9, r9, #1
 8008124:	d505      	bpl.n	8008132 <_fwalk_sglue+0x22>
 8008126:	6824      	ldr	r4, [r4, #0]
 8008128:	2c00      	cmp	r4, #0
 800812a:	d1f7      	bne.n	800811c <_fwalk_sglue+0xc>
 800812c:	4630      	mov	r0, r6
 800812e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008132:	89ab      	ldrh	r3, [r5, #12]
 8008134:	2b01      	cmp	r3, #1
 8008136:	d907      	bls.n	8008148 <_fwalk_sglue+0x38>
 8008138:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800813c:	3301      	adds	r3, #1
 800813e:	d003      	beq.n	8008148 <_fwalk_sglue+0x38>
 8008140:	4629      	mov	r1, r5
 8008142:	4638      	mov	r0, r7
 8008144:	47c0      	blx	r8
 8008146:	4306      	orrs	r6, r0
 8008148:	3568      	adds	r5, #104	; 0x68
 800814a:	e7e9      	b.n	8008120 <_fwalk_sglue+0x10>

0800814c <sniprintf>:
 800814c:	b40c      	push	{r2, r3}
 800814e:	b530      	push	{r4, r5, lr}
 8008150:	4b17      	ldr	r3, [pc, #92]	; (80081b0 <sniprintf+0x64>)
 8008152:	1e0c      	subs	r4, r1, #0
 8008154:	681d      	ldr	r5, [r3, #0]
 8008156:	b09d      	sub	sp, #116	; 0x74
 8008158:	da08      	bge.n	800816c <sniprintf+0x20>
 800815a:	238b      	movs	r3, #139	; 0x8b
 800815c:	602b      	str	r3, [r5, #0]
 800815e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008162:	b01d      	add	sp, #116	; 0x74
 8008164:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008168:	b002      	add	sp, #8
 800816a:	4770      	bx	lr
 800816c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008170:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008174:	bf14      	ite	ne
 8008176:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800817a:	4623      	moveq	r3, r4
 800817c:	9304      	str	r3, [sp, #16]
 800817e:	9307      	str	r3, [sp, #28]
 8008180:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008184:	9002      	str	r0, [sp, #8]
 8008186:	9006      	str	r0, [sp, #24]
 8008188:	f8ad 3016 	strh.w	r3, [sp, #22]
 800818c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800818e:	ab21      	add	r3, sp, #132	; 0x84
 8008190:	a902      	add	r1, sp, #8
 8008192:	4628      	mov	r0, r5
 8008194:	9301      	str	r3, [sp, #4]
 8008196:	f000 fa9f 	bl	80086d8 <_svfiprintf_r>
 800819a:	1c43      	adds	r3, r0, #1
 800819c:	bfbc      	itt	lt
 800819e:	238b      	movlt	r3, #139	; 0x8b
 80081a0:	602b      	strlt	r3, [r5, #0]
 80081a2:	2c00      	cmp	r4, #0
 80081a4:	d0dd      	beq.n	8008162 <sniprintf+0x16>
 80081a6:	9b02      	ldr	r3, [sp, #8]
 80081a8:	2200      	movs	r2, #0
 80081aa:	701a      	strb	r2, [r3, #0]
 80081ac:	e7d9      	b.n	8008162 <sniprintf+0x16>
 80081ae:	bf00      	nop
 80081b0:	20000120 	.word	0x20000120

080081b4 <__sread>:
 80081b4:	b510      	push	{r4, lr}
 80081b6:	460c      	mov	r4, r1
 80081b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081bc:	f000 f8c4 	bl	8008348 <_read_r>
 80081c0:	2800      	cmp	r0, #0
 80081c2:	bfab      	itete	ge
 80081c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80081c6:	89a3      	ldrhlt	r3, [r4, #12]
 80081c8:	181b      	addge	r3, r3, r0
 80081ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80081ce:	bfac      	ite	ge
 80081d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80081d2:	81a3      	strhlt	r3, [r4, #12]
 80081d4:	bd10      	pop	{r4, pc}

080081d6 <__swrite>:
 80081d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081da:	461f      	mov	r7, r3
 80081dc:	898b      	ldrh	r3, [r1, #12]
 80081de:	05db      	lsls	r3, r3, #23
 80081e0:	4605      	mov	r5, r0
 80081e2:	460c      	mov	r4, r1
 80081e4:	4616      	mov	r6, r2
 80081e6:	d505      	bpl.n	80081f4 <__swrite+0x1e>
 80081e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ec:	2302      	movs	r3, #2
 80081ee:	2200      	movs	r2, #0
 80081f0:	f000 f898 	bl	8008324 <_lseek_r>
 80081f4:	89a3      	ldrh	r3, [r4, #12]
 80081f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081fe:	81a3      	strh	r3, [r4, #12]
 8008200:	4632      	mov	r2, r6
 8008202:	463b      	mov	r3, r7
 8008204:	4628      	mov	r0, r5
 8008206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800820a:	f000 b8af 	b.w	800836c <_write_r>

0800820e <__sseek>:
 800820e:	b510      	push	{r4, lr}
 8008210:	460c      	mov	r4, r1
 8008212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008216:	f000 f885 	bl	8008324 <_lseek_r>
 800821a:	1c43      	adds	r3, r0, #1
 800821c:	89a3      	ldrh	r3, [r4, #12]
 800821e:	bf15      	itete	ne
 8008220:	6560      	strne	r0, [r4, #84]	; 0x54
 8008222:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008226:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800822a:	81a3      	strheq	r3, [r4, #12]
 800822c:	bf18      	it	ne
 800822e:	81a3      	strhne	r3, [r4, #12]
 8008230:	bd10      	pop	{r4, pc}

08008232 <__sclose>:
 8008232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008236:	f000 b865 	b.w	8008304 <_close_r>

0800823a <memset>:
 800823a:	4402      	add	r2, r0
 800823c:	4603      	mov	r3, r0
 800823e:	4293      	cmp	r3, r2
 8008240:	d100      	bne.n	8008244 <memset+0xa>
 8008242:	4770      	bx	lr
 8008244:	f803 1b01 	strb.w	r1, [r3], #1
 8008248:	e7f9      	b.n	800823e <memset+0x4>
	...

0800824c <strtok>:
 800824c:	4b16      	ldr	r3, [pc, #88]	; (80082a8 <strtok+0x5c>)
 800824e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008250:	681e      	ldr	r6, [r3, #0]
 8008252:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8008254:	4605      	mov	r5, r0
 8008256:	b9fc      	cbnz	r4, 8008298 <strtok+0x4c>
 8008258:	2050      	movs	r0, #80	; 0x50
 800825a:	9101      	str	r1, [sp, #4]
 800825c:	f000 f92e 	bl	80084bc <malloc>
 8008260:	9901      	ldr	r1, [sp, #4]
 8008262:	6470      	str	r0, [r6, #68]	; 0x44
 8008264:	4602      	mov	r2, r0
 8008266:	b920      	cbnz	r0, 8008272 <strtok+0x26>
 8008268:	4b10      	ldr	r3, [pc, #64]	; (80082ac <strtok+0x60>)
 800826a:	4811      	ldr	r0, [pc, #68]	; (80082b0 <strtok+0x64>)
 800826c:	215b      	movs	r1, #91	; 0x5b
 800826e:	f000 f8bb 	bl	80083e8 <__assert_func>
 8008272:	e9c0 4400 	strd	r4, r4, [r0]
 8008276:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800827a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800827e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008282:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008286:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800828a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800828e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008292:	6184      	str	r4, [r0, #24]
 8008294:	7704      	strb	r4, [r0, #28]
 8008296:	6244      	str	r4, [r0, #36]	; 0x24
 8008298:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800829a:	2301      	movs	r3, #1
 800829c:	4628      	mov	r0, r5
 800829e:	b002      	add	sp, #8
 80082a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80082a4:	f000 b806 	b.w	80082b4 <__strtok_r>
 80082a8:	20000120 	.word	0x20000120
 80082ac:	08009440 	.word	0x08009440
 80082b0:	08009457 	.word	0x08009457

080082b4 <__strtok_r>:
 80082b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082b6:	b908      	cbnz	r0, 80082bc <__strtok_r+0x8>
 80082b8:	6810      	ldr	r0, [r2, #0]
 80082ba:	b188      	cbz	r0, 80082e0 <__strtok_r+0x2c>
 80082bc:	4604      	mov	r4, r0
 80082be:	4620      	mov	r0, r4
 80082c0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80082c4:	460f      	mov	r7, r1
 80082c6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80082ca:	b91e      	cbnz	r6, 80082d4 <__strtok_r+0x20>
 80082cc:	b965      	cbnz	r5, 80082e8 <__strtok_r+0x34>
 80082ce:	6015      	str	r5, [r2, #0]
 80082d0:	4628      	mov	r0, r5
 80082d2:	e005      	b.n	80082e0 <__strtok_r+0x2c>
 80082d4:	42b5      	cmp	r5, r6
 80082d6:	d1f6      	bne.n	80082c6 <__strtok_r+0x12>
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1f0      	bne.n	80082be <__strtok_r+0xa>
 80082dc:	6014      	str	r4, [r2, #0]
 80082de:	7003      	strb	r3, [r0, #0]
 80082e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082e2:	461c      	mov	r4, r3
 80082e4:	e00c      	b.n	8008300 <__strtok_r+0x4c>
 80082e6:	b915      	cbnz	r5, 80082ee <__strtok_r+0x3a>
 80082e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80082ec:	460e      	mov	r6, r1
 80082ee:	f816 5b01 	ldrb.w	r5, [r6], #1
 80082f2:	42ab      	cmp	r3, r5
 80082f4:	d1f7      	bne.n	80082e6 <__strtok_r+0x32>
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d0f3      	beq.n	80082e2 <__strtok_r+0x2e>
 80082fa:	2300      	movs	r3, #0
 80082fc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008300:	6014      	str	r4, [r2, #0]
 8008302:	e7ed      	b.n	80082e0 <__strtok_r+0x2c>

08008304 <_close_r>:
 8008304:	b538      	push	{r3, r4, r5, lr}
 8008306:	4d06      	ldr	r5, [pc, #24]	; (8008320 <_close_r+0x1c>)
 8008308:	2300      	movs	r3, #0
 800830a:	4604      	mov	r4, r0
 800830c:	4608      	mov	r0, r1
 800830e:	602b      	str	r3, [r5, #0]
 8008310:	f7f8 fda7 	bl	8000e62 <_close>
 8008314:	1c43      	adds	r3, r0, #1
 8008316:	d102      	bne.n	800831e <_close_r+0x1a>
 8008318:	682b      	ldr	r3, [r5, #0]
 800831a:	b103      	cbz	r3, 800831e <_close_r+0x1a>
 800831c:	6023      	str	r3, [r4, #0]
 800831e:	bd38      	pop	{r3, r4, r5, pc}
 8008320:	20000620 	.word	0x20000620

08008324 <_lseek_r>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	4d07      	ldr	r5, [pc, #28]	; (8008344 <_lseek_r+0x20>)
 8008328:	4604      	mov	r4, r0
 800832a:	4608      	mov	r0, r1
 800832c:	4611      	mov	r1, r2
 800832e:	2200      	movs	r2, #0
 8008330:	602a      	str	r2, [r5, #0]
 8008332:	461a      	mov	r2, r3
 8008334:	f7f8 fdbc 	bl	8000eb0 <_lseek>
 8008338:	1c43      	adds	r3, r0, #1
 800833a:	d102      	bne.n	8008342 <_lseek_r+0x1e>
 800833c:	682b      	ldr	r3, [r5, #0]
 800833e:	b103      	cbz	r3, 8008342 <_lseek_r+0x1e>
 8008340:	6023      	str	r3, [r4, #0]
 8008342:	bd38      	pop	{r3, r4, r5, pc}
 8008344:	20000620 	.word	0x20000620

08008348 <_read_r>:
 8008348:	b538      	push	{r3, r4, r5, lr}
 800834a:	4d07      	ldr	r5, [pc, #28]	; (8008368 <_read_r+0x20>)
 800834c:	4604      	mov	r4, r0
 800834e:	4608      	mov	r0, r1
 8008350:	4611      	mov	r1, r2
 8008352:	2200      	movs	r2, #0
 8008354:	602a      	str	r2, [r5, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	f7f8 fd4a 	bl	8000df0 <_read>
 800835c:	1c43      	adds	r3, r0, #1
 800835e:	d102      	bne.n	8008366 <_read_r+0x1e>
 8008360:	682b      	ldr	r3, [r5, #0]
 8008362:	b103      	cbz	r3, 8008366 <_read_r+0x1e>
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	bd38      	pop	{r3, r4, r5, pc}
 8008368:	20000620 	.word	0x20000620

0800836c <_write_r>:
 800836c:	b538      	push	{r3, r4, r5, lr}
 800836e:	4d07      	ldr	r5, [pc, #28]	; (800838c <_write_r+0x20>)
 8008370:	4604      	mov	r4, r0
 8008372:	4608      	mov	r0, r1
 8008374:	4611      	mov	r1, r2
 8008376:	2200      	movs	r2, #0
 8008378:	602a      	str	r2, [r5, #0]
 800837a:	461a      	mov	r2, r3
 800837c:	f7f8 fd55 	bl	8000e2a <_write>
 8008380:	1c43      	adds	r3, r0, #1
 8008382:	d102      	bne.n	800838a <_write_r+0x1e>
 8008384:	682b      	ldr	r3, [r5, #0]
 8008386:	b103      	cbz	r3, 800838a <_write_r+0x1e>
 8008388:	6023      	str	r3, [r4, #0]
 800838a:	bd38      	pop	{r3, r4, r5, pc}
 800838c:	20000620 	.word	0x20000620

08008390 <__errno>:
 8008390:	4b01      	ldr	r3, [pc, #4]	; (8008398 <__errno+0x8>)
 8008392:	6818      	ldr	r0, [r3, #0]
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	20000120 	.word	0x20000120

0800839c <__libc_init_array>:
 800839c:	b570      	push	{r4, r5, r6, lr}
 800839e:	4d0d      	ldr	r5, [pc, #52]	; (80083d4 <__libc_init_array+0x38>)
 80083a0:	4c0d      	ldr	r4, [pc, #52]	; (80083d8 <__libc_init_array+0x3c>)
 80083a2:	1b64      	subs	r4, r4, r5
 80083a4:	10a4      	asrs	r4, r4, #2
 80083a6:	2600      	movs	r6, #0
 80083a8:	42a6      	cmp	r6, r4
 80083aa:	d109      	bne.n	80083c0 <__libc_init_array+0x24>
 80083ac:	4d0b      	ldr	r5, [pc, #44]	; (80083dc <__libc_init_array+0x40>)
 80083ae:	4c0c      	ldr	r4, [pc, #48]	; (80083e0 <__libc_init_array+0x44>)
 80083b0:	f000 fff8 	bl	80093a4 <_init>
 80083b4:	1b64      	subs	r4, r4, r5
 80083b6:	10a4      	asrs	r4, r4, #2
 80083b8:	2600      	movs	r6, #0
 80083ba:	42a6      	cmp	r6, r4
 80083bc:	d105      	bne.n	80083ca <__libc_init_array+0x2e>
 80083be:	bd70      	pop	{r4, r5, r6, pc}
 80083c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80083c4:	4798      	blx	r3
 80083c6:	3601      	adds	r6, #1
 80083c8:	e7ee      	b.n	80083a8 <__libc_init_array+0xc>
 80083ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ce:	4798      	blx	r3
 80083d0:	3601      	adds	r6, #1
 80083d2:	e7f2      	b.n	80083ba <__libc_init_array+0x1e>
 80083d4:	08009528 	.word	0x08009528
 80083d8:	08009528 	.word	0x08009528
 80083dc:	08009528 	.word	0x08009528
 80083e0:	0800952c 	.word	0x0800952c

080083e4 <__retarget_lock_acquire_recursive>:
 80083e4:	4770      	bx	lr

080083e6 <__retarget_lock_release_recursive>:
 80083e6:	4770      	bx	lr

080083e8 <__assert_func>:
 80083e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083ea:	4614      	mov	r4, r2
 80083ec:	461a      	mov	r2, r3
 80083ee:	4b09      	ldr	r3, [pc, #36]	; (8008414 <__assert_func+0x2c>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4605      	mov	r5, r0
 80083f4:	68d8      	ldr	r0, [r3, #12]
 80083f6:	b14c      	cbz	r4, 800840c <__assert_func+0x24>
 80083f8:	4b07      	ldr	r3, [pc, #28]	; (8008418 <__assert_func+0x30>)
 80083fa:	9100      	str	r1, [sp, #0]
 80083fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008400:	4906      	ldr	r1, [pc, #24]	; (800841c <__assert_func+0x34>)
 8008402:	462b      	mov	r3, r5
 8008404:	f000 fca4 	bl	8008d50 <fiprintf>
 8008408:	f000 fcec 	bl	8008de4 <abort>
 800840c:	4b04      	ldr	r3, [pc, #16]	; (8008420 <__assert_func+0x38>)
 800840e:	461c      	mov	r4, r3
 8008410:	e7f3      	b.n	80083fa <__assert_func+0x12>
 8008412:	bf00      	nop
 8008414:	20000120 	.word	0x20000120
 8008418:	080094b1 	.word	0x080094b1
 800841c:	080094be 	.word	0x080094be
 8008420:	080094ec 	.word	0x080094ec

08008424 <_free_r>:
 8008424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008426:	2900      	cmp	r1, #0
 8008428:	d044      	beq.n	80084b4 <_free_r+0x90>
 800842a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800842e:	9001      	str	r0, [sp, #4]
 8008430:	2b00      	cmp	r3, #0
 8008432:	f1a1 0404 	sub.w	r4, r1, #4
 8008436:	bfb8      	it	lt
 8008438:	18e4      	addlt	r4, r4, r3
 800843a:	f000 f8e7 	bl	800860c <__malloc_lock>
 800843e:	4a1e      	ldr	r2, [pc, #120]	; (80084b8 <_free_r+0x94>)
 8008440:	9801      	ldr	r0, [sp, #4]
 8008442:	6813      	ldr	r3, [r2, #0]
 8008444:	b933      	cbnz	r3, 8008454 <_free_r+0x30>
 8008446:	6063      	str	r3, [r4, #4]
 8008448:	6014      	str	r4, [r2, #0]
 800844a:	b003      	add	sp, #12
 800844c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008450:	f000 b8e2 	b.w	8008618 <__malloc_unlock>
 8008454:	42a3      	cmp	r3, r4
 8008456:	d908      	bls.n	800846a <_free_r+0x46>
 8008458:	6825      	ldr	r5, [r4, #0]
 800845a:	1961      	adds	r1, r4, r5
 800845c:	428b      	cmp	r3, r1
 800845e:	bf01      	itttt	eq
 8008460:	6819      	ldreq	r1, [r3, #0]
 8008462:	685b      	ldreq	r3, [r3, #4]
 8008464:	1949      	addeq	r1, r1, r5
 8008466:	6021      	streq	r1, [r4, #0]
 8008468:	e7ed      	b.n	8008446 <_free_r+0x22>
 800846a:	461a      	mov	r2, r3
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	b10b      	cbz	r3, 8008474 <_free_r+0x50>
 8008470:	42a3      	cmp	r3, r4
 8008472:	d9fa      	bls.n	800846a <_free_r+0x46>
 8008474:	6811      	ldr	r1, [r2, #0]
 8008476:	1855      	adds	r5, r2, r1
 8008478:	42a5      	cmp	r5, r4
 800847a:	d10b      	bne.n	8008494 <_free_r+0x70>
 800847c:	6824      	ldr	r4, [r4, #0]
 800847e:	4421      	add	r1, r4
 8008480:	1854      	adds	r4, r2, r1
 8008482:	42a3      	cmp	r3, r4
 8008484:	6011      	str	r1, [r2, #0]
 8008486:	d1e0      	bne.n	800844a <_free_r+0x26>
 8008488:	681c      	ldr	r4, [r3, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	6053      	str	r3, [r2, #4]
 800848e:	440c      	add	r4, r1
 8008490:	6014      	str	r4, [r2, #0]
 8008492:	e7da      	b.n	800844a <_free_r+0x26>
 8008494:	d902      	bls.n	800849c <_free_r+0x78>
 8008496:	230c      	movs	r3, #12
 8008498:	6003      	str	r3, [r0, #0]
 800849a:	e7d6      	b.n	800844a <_free_r+0x26>
 800849c:	6825      	ldr	r5, [r4, #0]
 800849e:	1961      	adds	r1, r4, r5
 80084a0:	428b      	cmp	r3, r1
 80084a2:	bf04      	itt	eq
 80084a4:	6819      	ldreq	r1, [r3, #0]
 80084a6:	685b      	ldreq	r3, [r3, #4]
 80084a8:	6063      	str	r3, [r4, #4]
 80084aa:	bf04      	itt	eq
 80084ac:	1949      	addeq	r1, r1, r5
 80084ae:	6021      	streq	r1, [r4, #0]
 80084b0:	6054      	str	r4, [r2, #4]
 80084b2:	e7ca      	b.n	800844a <_free_r+0x26>
 80084b4:	b003      	add	sp, #12
 80084b6:	bd30      	pop	{r4, r5, pc}
 80084b8:	20000628 	.word	0x20000628

080084bc <malloc>:
 80084bc:	4b02      	ldr	r3, [pc, #8]	; (80084c8 <malloc+0xc>)
 80084be:	4601      	mov	r1, r0
 80084c0:	6818      	ldr	r0, [r3, #0]
 80084c2:	f000 b823 	b.w	800850c <_malloc_r>
 80084c6:	bf00      	nop
 80084c8:	20000120 	.word	0x20000120

080084cc <sbrk_aligned>:
 80084cc:	b570      	push	{r4, r5, r6, lr}
 80084ce:	4e0e      	ldr	r6, [pc, #56]	; (8008508 <sbrk_aligned+0x3c>)
 80084d0:	460c      	mov	r4, r1
 80084d2:	6831      	ldr	r1, [r6, #0]
 80084d4:	4605      	mov	r5, r0
 80084d6:	b911      	cbnz	r1, 80084de <sbrk_aligned+0x12>
 80084d8:	f000 fc66 	bl	8008da8 <_sbrk_r>
 80084dc:	6030      	str	r0, [r6, #0]
 80084de:	4621      	mov	r1, r4
 80084e0:	4628      	mov	r0, r5
 80084e2:	f000 fc61 	bl	8008da8 <_sbrk_r>
 80084e6:	1c43      	adds	r3, r0, #1
 80084e8:	d00a      	beq.n	8008500 <sbrk_aligned+0x34>
 80084ea:	1cc4      	adds	r4, r0, #3
 80084ec:	f024 0403 	bic.w	r4, r4, #3
 80084f0:	42a0      	cmp	r0, r4
 80084f2:	d007      	beq.n	8008504 <sbrk_aligned+0x38>
 80084f4:	1a21      	subs	r1, r4, r0
 80084f6:	4628      	mov	r0, r5
 80084f8:	f000 fc56 	bl	8008da8 <_sbrk_r>
 80084fc:	3001      	adds	r0, #1
 80084fe:	d101      	bne.n	8008504 <sbrk_aligned+0x38>
 8008500:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008504:	4620      	mov	r0, r4
 8008506:	bd70      	pop	{r4, r5, r6, pc}
 8008508:	2000062c 	.word	0x2000062c

0800850c <_malloc_r>:
 800850c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008510:	1ccd      	adds	r5, r1, #3
 8008512:	f025 0503 	bic.w	r5, r5, #3
 8008516:	3508      	adds	r5, #8
 8008518:	2d0c      	cmp	r5, #12
 800851a:	bf38      	it	cc
 800851c:	250c      	movcc	r5, #12
 800851e:	2d00      	cmp	r5, #0
 8008520:	4607      	mov	r7, r0
 8008522:	db01      	blt.n	8008528 <_malloc_r+0x1c>
 8008524:	42a9      	cmp	r1, r5
 8008526:	d905      	bls.n	8008534 <_malloc_r+0x28>
 8008528:	230c      	movs	r3, #12
 800852a:	603b      	str	r3, [r7, #0]
 800852c:	2600      	movs	r6, #0
 800852e:	4630      	mov	r0, r6
 8008530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008534:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008608 <_malloc_r+0xfc>
 8008538:	f000 f868 	bl	800860c <__malloc_lock>
 800853c:	f8d8 3000 	ldr.w	r3, [r8]
 8008540:	461c      	mov	r4, r3
 8008542:	bb5c      	cbnz	r4, 800859c <_malloc_r+0x90>
 8008544:	4629      	mov	r1, r5
 8008546:	4638      	mov	r0, r7
 8008548:	f7ff ffc0 	bl	80084cc <sbrk_aligned>
 800854c:	1c43      	adds	r3, r0, #1
 800854e:	4604      	mov	r4, r0
 8008550:	d155      	bne.n	80085fe <_malloc_r+0xf2>
 8008552:	f8d8 4000 	ldr.w	r4, [r8]
 8008556:	4626      	mov	r6, r4
 8008558:	2e00      	cmp	r6, #0
 800855a:	d145      	bne.n	80085e8 <_malloc_r+0xdc>
 800855c:	2c00      	cmp	r4, #0
 800855e:	d048      	beq.n	80085f2 <_malloc_r+0xe6>
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	4631      	mov	r1, r6
 8008564:	4638      	mov	r0, r7
 8008566:	eb04 0903 	add.w	r9, r4, r3
 800856a:	f000 fc1d 	bl	8008da8 <_sbrk_r>
 800856e:	4581      	cmp	r9, r0
 8008570:	d13f      	bne.n	80085f2 <_malloc_r+0xe6>
 8008572:	6821      	ldr	r1, [r4, #0]
 8008574:	1a6d      	subs	r5, r5, r1
 8008576:	4629      	mov	r1, r5
 8008578:	4638      	mov	r0, r7
 800857a:	f7ff ffa7 	bl	80084cc <sbrk_aligned>
 800857e:	3001      	adds	r0, #1
 8008580:	d037      	beq.n	80085f2 <_malloc_r+0xe6>
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	442b      	add	r3, r5
 8008586:	6023      	str	r3, [r4, #0]
 8008588:	f8d8 3000 	ldr.w	r3, [r8]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d038      	beq.n	8008602 <_malloc_r+0xf6>
 8008590:	685a      	ldr	r2, [r3, #4]
 8008592:	42a2      	cmp	r2, r4
 8008594:	d12b      	bne.n	80085ee <_malloc_r+0xe2>
 8008596:	2200      	movs	r2, #0
 8008598:	605a      	str	r2, [r3, #4]
 800859a:	e00f      	b.n	80085bc <_malloc_r+0xb0>
 800859c:	6822      	ldr	r2, [r4, #0]
 800859e:	1b52      	subs	r2, r2, r5
 80085a0:	d41f      	bmi.n	80085e2 <_malloc_r+0xd6>
 80085a2:	2a0b      	cmp	r2, #11
 80085a4:	d917      	bls.n	80085d6 <_malloc_r+0xca>
 80085a6:	1961      	adds	r1, r4, r5
 80085a8:	42a3      	cmp	r3, r4
 80085aa:	6025      	str	r5, [r4, #0]
 80085ac:	bf18      	it	ne
 80085ae:	6059      	strne	r1, [r3, #4]
 80085b0:	6863      	ldr	r3, [r4, #4]
 80085b2:	bf08      	it	eq
 80085b4:	f8c8 1000 	streq.w	r1, [r8]
 80085b8:	5162      	str	r2, [r4, r5]
 80085ba:	604b      	str	r3, [r1, #4]
 80085bc:	4638      	mov	r0, r7
 80085be:	f104 060b 	add.w	r6, r4, #11
 80085c2:	f000 f829 	bl	8008618 <__malloc_unlock>
 80085c6:	f026 0607 	bic.w	r6, r6, #7
 80085ca:	1d23      	adds	r3, r4, #4
 80085cc:	1af2      	subs	r2, r6, r3
 80085ce:	d0ae      	beq.n	800852e <_malloc_r+0x22>
 80085d0:	1b9b      	subs	r3, r3, r6
 80085d2:	50a3      	str	r3, [r4, r2]
 80085d4:	e7ab      	b.n	800852e <_malloc_r+0x22>
 80085d6:	42a3      	cmp	r3, r4
 80085d8:	6862      	ldr	r2, [r4, #4]
 80085da:	d1dd      	bne.n	8008598 <_malloc_r+0x8c>
 80085dc:	f8c8 2000 	str.w	r2, [r8]
 80085e0:	e7ec      	b.n	80085bc <_malloc_r+0xb0>
 80085e2:	4623      	mov	r3, r4
 80085e4:	6864      	ldr	r4, [r4, #4]
 80085e6:	e7ac      	b.n	8008542 <_malloc_r+0x36>
 80085e8:	4634      	mov	r4, r6
 80085ea:	6876      	ldr	r6, [r6, #4]
 80085ec:	e7b4      	b.n	8008558 <_malloc_r+0x4c>
 80085ee:	4613      	mov	r3, r2
 80085f0:	e7cc      	b.n	800858c <_malloc_r+0x80>
 80085f2:	230c      	movs	r3, #12
 80085f4:	603b      	str	r3, [r7, #0]
 80085f6:	4638      	mov	r0, r7
 80085f8:	f000 f80e 	bl	8008618 <__malloc_unlock>
 80085fc:	e797      	b.n	800852e <_malloc_r+0x22>
 80085fe:	6025      	str	r5, [r4, #0]
 8008600:	e7dc      	b.n	80085bc <_malloc_r+0xb0>
 8008602:	605b      	str	r3, [r3, #4]
 8008604:	deff      	udf	#255	; 0xff
 8008606:	bf00      	nop
 8008608:	20000628 	.word	0x20000628

0800860c <__malloc_lock>:
 800860c:	4801      	ldr	r0, [pc, #4]	; (8008614 <__malloc_lock+0x8>)
 800860e:	f7ff bee9 	b.w	80083e4 <__retarget_lock_acquire_recursive>
 8008612:	bf00      	nop
 8008614:	20000624 	.word	0x20000624

08008618 <__malloc_unlock>:
 8008618:	4801      	ldr	r0, [pc, #4]	; (8008620 <__malloc_unlock+0x8>)
 800861a:	f7ff bee4 	b.w	80083e6 <__retarget_lock_release_recursive>
 800861e:	bf00      	nop
 8008620:	20000624 	.word	0x20000624

08008624 <__ssputs_r>:
 8008624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008628:	688e      	ldr	r6, [r1, #8]
 800862a:	461f      	mov	r7, r3
 800862c:	42be      	cmp	r6, r7
 800862e:	680b      	ldr	r3, [r1, #0]
 8008630:	4682      	mov	sl, r0
 8008632:	460c      	mov	r4, r1
 8008634:	4690      	mov	r8, r2
 8008636:	d82c      	bhi.n	8008692 <__ssputs_r+0x6e>
 8008638:	898a      	ldrh	r2, [r1, #12]
 800863a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800863e:	d026      	beq.n	800868e <__ssputs_r+0x6a>
 8008640:	6965      	ldr	r5, [r4, #20]
 8008642:	6909      	ldr	r1, [r1, #16]
 8008644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008648:	eba3 0901 	sub.w	r9, r3, r1
 800864c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008650:	1c7b      	adds	r3, r7, #1
 8008652:	444b      	add	r3, r9
 8008654:	106d      	asrs	r5, r5, #1
 8008656:	429d      	cmp	r5, r3
 8008658:	bf38      	it	cc
 800865a:	461d      	movcc	r5, r3
 800865c:	0553      	lsls	r3, r2, #21
 800865e:	d527      	bpl.n	80086b0 <__ssputs_r+0x8c>
 8008660:	4629      	mov	r1, r5
 8008662:	f7ff ff53 	bl	800850c <_malloc_r>
 8008666:	4606      	mov	r6, r0
 8008668:	b360      	cbz	r0, 80086c4 <__ssputs_r+0xa0>
 800866a:	6921      	ldr	r1, [r4, #16]
 800866c:	464a      	mov	r2, r9
 800866e:	f000 fbab 	bl	8008dc8 <memcpy>
 8008672:	89a3      	ldrh	r3, [r4, #12]
 8008674:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800867c:	81a3      	strh	r3, [r4, #12]
 800867e:	6126      	str	r6, [r4, #16]
 8008680:	6165      	str	r5, [r4, #20]
 8008682:	444e      	add	r6, r9
 8008684:	eba5 0509 	sub.w	r5, r5, r9
 8008688:	6026      	str	r6, [r4, #0]
 800868a:	60a5      	str	r5, [r4, #8]
 800868c:	463e      	mov	r6, r7
 800868e:	42be      	cmp	r6, r7
 8008690:	d900      	bls.n	8008694 <__ssputs_r+0x70>
 8008692:	463e      	mov	r6, r7
 8008694:	6820      	ldr	r0, [r4, #0]
 8008696:	4632      	mov	r2, r6
 8008698:	4641      	mov	r1, r8
 800869a:	f000 fb6b 	bl	8008d74 <memmove>
 800869e:	68a3      	ldr	r3, [r4, #8]
 80086a0:	1b9b      	subs	r3, r3, r6
 80086a2:	60a3      	str	r3, [r4, #8]
 80086a4:	6823      	ldr	r3, [r4, #0]
 80086a6:	4433      	add	r3, r6
 80086a8:	6023      	str	r3, [r4, #0]
 80086aa:	2000      	movs	r0, #0
 80086ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086b0:	462a      	mov	r2, r5
 80086b2:	f000 fb9e 	bl	8008df2 <_realloc_r>
 80086b6:	4606      	mov	r6, r0
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d1e0      	bne.n	800867e <__ssputs_r+0x5a>
 80086bc:	6921      	ldr	r1, [r4, #16]
 80086be:	4650      	mov	r0, sl
 80086c0:	f7ff feb0 	bl	8008424 <_free_r>
 80086c4:	230c      	movs	r3, #12
 80086c6:	f8ca 3000 	str.w	r3, [sl]
 80086ca:	89a3      	ldrh	r3, [r4, #12]
 80086cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086d0:	81a3      	strh	r3, [r4, #12]
 80086d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086d6:	e7e9      	b.n	80086ac <__ssputs_r+0x88>

080086d8 <_svfiprintf_r>:
 80086d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086dc:	4698      	mov	r8, r3
 80086de:	898b      	ldrh	r3, [r1, #12]
 80086e0:	061b      	lsls	r3, r3, #24
 80086e2:	b09d      	sub	sp, #116	; 0x74
 80086e4:	4607      	mov	r7, r0
 80086e6:	460d      	mov	r5, r1
 80086e8:	4614      	mov	r4, r2
 80086ea:	d50e      	bpl.n	800870a <_svfiprintf_r+0x32>
 80086ec:	690b      	ldr	r3, [r1, #16]
 80086ee:	b963      	cbnz	r3, 800870a <_svfiprintf_r+0x32>
 80086f0:	2140      	movs	r1, #64	; 0x40
 80086f2:	f7ff ff0b 	bl	800850c <_malloc_r>
 80086f6:	6028      	str	r0, [r5, #0]
 80086f8:	6128      	str	r0, [r5, #16]
 80086fa:	b920      	cbnz	r0, 8008706 <_svfiprintf_r+0x2e>
 80086fc:	230c      	movs	r3, #12
 80086fe:	603b      	str	r3, [r7, #0]
 8008700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008704:	e0d0      	b.n	80088a8 <_svfiprintf_r+0x1d0>
 8008706:	2340      	movs	r3, #64	; 0x40
 8008708:	616b      	str	r3, [r5, #20]
 800870a:	2300      	movs	r3, #0
 800870c:	9309      	str	r3, [sp, #36]	; 0x24
 800870e:	2320      	movs	r3, #32
 8008710:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008714:	f8cd 800c 	str.w	r8, [sp, #12]
 8008718:	2330      	movs	r3, #48	; 0x30
 800871a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80088c0 <_svfiprintf_r+0x1e8>
 800871e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008722:	f04f 0901 	mov.w	r9, #1
 8008726:	4623      	mov	r3, r4
 8008728:	469a      	mov	sl, r3
 800872a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800872e:	b10a      	cbz	r2, 8008734 <_svfiprintf_r+0x5c>
 8008730:	2a25      	cmp	r2, #37	; 0x25
 8008732:	d1f9      	bne.n	8008728 <_svfiprintf_r+0x50>
 8008734:	ebba 0b04 	subs.w	fp, sl, r4
 8008738:	d00b      	beq.n	8008752 <_svfiprintf_r+0x7a>
 800873a:	465b      	mov	r3, fp
 800873c:	4622      	mov	r2, r4
 800873e:	4629      	mov	r1, r5
 8008740:	4638      	mov	r0, r7
 8008742:	f7ff ff6f 	bl	8008624 <__ssputs_r>
 8008746:	3001      	adds	r0, #1
 8008748:	f000 80a9 	beq.w	800889e <_svfiprintf_r+0x1c6>
 800874c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800874e:	445a      	add	r2, fp
 8008750:	9209      	str	r2, [sp, #36]	; 0x24
 8008752:	f89a 3000 	ldrb.w	r3, [sl]
 8008756:	2b00      	cmp	r3, #0
 8008758:	f000 80a1 	beq.w	800889e <_svfiprintf_r+0x1c6>
 800875c:	2300      	movs	r3, #0
 800875e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008766:	f10a 0a01 	add.w	sl, sl, #1
 800876a:	9304      	str	r3, [sp, #16]
 800876c:	9307      	str	r3, [sp, #28]
 800876e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008772:	931a      	str	r3, [sp, #104]	; 0x68
 8008774:	4654      	mov	r4, sl
 8008776:	2205      	movs	r2, #5
 8008778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800877c:	4850      	ldr	r0, [pc, #320]	; (80088c0 <_svfiprintf_r+0x1e8>)
 800877e:	f7f7 fd67 	bl	8000250 <memchr>
 8008782:	9a04      	ldr	r2, [sp, #16]
 8008784:	b9d8      	cbnz	r0, 80087be <_svfiprintf_r+0xe6>
 8008786:	06d0      	lsls	r0, r2, #27
 8008788:	bf44      	itt	mi
 800878a:	2320      	movmi	r3, #32
 800878c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008790:	0711      	lsls	r1, r2, #28
 8008792:	bf44      	itt	mi
 8008794:	232b      	movmi	r3, #43	; 0x2b
 8008796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800879a:	f89a 3000 	ldrb.w	r3, [sl]
 800879e:	2b2a      	cmp	r3, #42	; 0x2a
 80087a0:	d015      	beq.n	80087ce <_svfiprintf_r+0xf6>
 80087a2:	9a07      	ldr	r2, [sp, #28]
 80087a4:	4654      	mov	r4, sl
 80087a6:	2000      	movs	r0, #0
 80087a8:	f04f 0c0a 	mov.w	ip, #10
 80087ac:	4621      	mov	r1, r4
 80087ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087b2:	3b30      	subs	r3, #48	; 0x30
 80087b4:	2b09      	cmp	r3, #9
 80087b6:	d94d      	bls.n	8008854 <_svfiprintf_r+0x17c>
 80087b8:	b1b0      	cbz	r0, 80087e8 <_svfiprintf_r+0x110>
 80087ba:	9207      	str	r2, [sp, #28]
 80087bc:	e014      	b.n	80087e8 <_svfiprintf_r+0x110>
 80087be:	eba0 0308 	sub.w	r3, r0, r8
 80087c2:	fa09 f303 	lsl.w	r3, r9, r3
 80087c6:	4313      	orrs	r3, r2
 80087c8:	9304      	str	r3, [sp, #16]
 80087ca:	46a2      	mov	sl, r4
 80087cc:	e7d2      	b.n	8008774 <_svfiprintf_r+0x9c>
 80087ce:	9b03      	ldr	r3, [sp, #12]
 80087d0:	1d19      	adds	r1, r3, #4
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	9103      	str	r1, [sp, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	bfbb      	ittet	lt
 80087da:	425b      	neglt	r3, r3
 80087dc:	f042 0202 	orrlt.w	r2, r2, #2
 80087e0:	9307      	strge	r3, [sp, #28]
 80087e2:	9307      	strlt	r3, [sp, #28]
 80087e4:	bfb8      	it	lt
 80087e6:	9204      	strlt	r2, [sp, #16]
 80087e8:	7823      	ldrb	r3, [r4, #0]
 80087ea:	2b2e      	cmp	r3, #46	; 0x2e
 80087ec:	d10c      	bne.n	8008808 <_svfiprintf_r+0x130>
 80087ee:	7863      	ldrb	r3, [r4, #1]
 80087f0:	2b2a      	cmp	r3, #42	; 0x2a
 80087f2:	d134      	bne.n	800885e <_svfiprintf_r+0x186>
 80087f4:	9b03      	ldr	r3, [sp, #12]
 80087f6:	1d1a      	adds	r2, r3, #4
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	9203      	str	r2, [sp, #12]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	bfb8      	it	lt
 8008800:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008804:	3402      	adds	r4, #2
 8008806:	9305      	str	r3, [sp, #20]
 8008808:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80088d0 <_svfiprintf_r+0x1f8>
 800880c:	7821      	ldrb	r1, [r4, #0]
 800880e:	2203      	movs	r2, #3
 8008810:	4650      	mov	r0, sl
 8008812:	f7f7 fd1d 	bl	8000250 <memchr>
 8008816:	b138      	cbz	r0, 8008828 <_svfiprintf_r+0x150>
 8008818:	9b04      	ldr	r3, [sp, #16]
 800881a:	eba0 000a 	sub.w	r0, r0, sl
 800881e:	2240      	movs	r2, #64	; 0x40
 8008820:	4082      	lsls	r2, r0
 8008822:	4313      	orrs	r3, r2
 8008824:	3401      	adds	r4, #1
 8008826:	9304      	str	r3, [sp, #16]
 8008828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800882c:	4825      	ldr	r0, [pc, #148]	; (80088c4 <_svfiprintf_r+0x1ec>)
 800882e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008832:	2206      	movs	r2, #6
 8008834:	f7f7 fd0c 	bl	8000250 <memchr>
 8008838:	2800      	cmp	r0, #0
 800883a:	d038      	beq.n	80088ae <_svfiprintf_r+0x1d6>
 800883c:	4b22      	ldr	r3, [pc, #136]	; (80088c8 <_svfiprintf_r+0x1f0>)
 800883e:	bb1b      	cbnz	r3, 8008888 <_svfiprintf_r+0x1b0>
 8008840:	9b03      	ldr	r3, [sp, #12]
 8008842:	3307      	adds	r3, #7
 8008844:	f023 0307 	bic.w	r3, r3, #7
 8008848:	3308      	adds	r3, #8
 800884a:	9303      	str	r3, [sp, #12]
 800884c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800884e:	4433      	add	r3, r6
 8008850:	9309      	str	r3, [sp, #36]	; 0x24
 8008852:	e768      	b.n	8008726 <_svfiprintf_r+0x4e>
 8008854:	fb0c 3202 	mla	r2, ip, r2, r3
 8008858:	460c      	mov	r4, r1
 800885a:	2001      	movs	r0, #1
 800885c:	e7a6      	b.n	80087ac <_svfiprintf_r+0xd4>
 800885e:	2300      	movs	r3, #0
 8008860:	3401      	adds	r4, #1
 8008862:	9305      	str	r3, [sp, #20]
 8008864:	4619      	mov	r1, r3
 8008866:	f04f 0c0a 	mov.w	ip, #10
 800886a:	4620      	mov	r0, r4
 800886c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008870:	3a30      	subs	r2, #48	; 0x30
 8008872:	2a09      	cmp	r2, #9
 8008874:	d903      	bls.n	800887e <_svfiprintf_r+0x1a6>
 8008876:	2b00      	cmp	r3, #0
 8008878:	d0c6      	beq.n	8008808 <_svfiprintf_r+0x130>
 800887a:	9105      	str	r1, [sp, #20]
 800887c:	e7c4      	b.n	8008808 <_svfiprintf_r+0x130>
 800887e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008882:	4604      	mov	r4, r0
 8008884:	2301      	movs	r3, #1
 8008886:	e7f0      	b.n	800886a <_svfiprintf_r+0x192>
 8008888:	ab03      	add	r3, sp, #12
 800888a:	9300      	str	r3, [sp, #0]
 800888c:	462a      	mov	r2, r5
 800888e:	4b0f      	ldr	r3, [pc, #60]	; (80088cc <_svfiprintf_r+0x1f4>)
 8008890:	a904      	add	r1, sp, #16
 8008892:	4638      	mov	r0, r7
 8008894:	f3af 8000 	nop.w
 8008898:	1c42      	adds	r2, r0, #1
 800889a:	4606      	mov	r6, r0
 800889c:	d1d6      	bne.n	800884c <_svfiprintf_r+0x174>
 800889e:	89ab      	ldrh	r3, [r5, #12]
 80088a0:	065b      	lsls	r3, r3, #25
 80088a2:	f53f af2d 	bmi.w	8008700 <_svfiprintf_r+0x28>
 80088a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088a8:	b01d      	add	sp, #116	; 0x74
 80088aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ae:	ab03      	add	r3, sp, #12
 80088b0:	9300      	str	r3, [sp, #0]
 80088b2:	462a      	mov	r2, r5
 80088b4:	4b05      	ldr	r3, [pc, #20]	; (80088cc <_svfiprintf_r+0x1f4>)
 80088b6:	a904      	add	r1, sp, #16
 80088b8:	4638      	mov	r0, r7
 80088ba:	f000 f879 	bl	80089b0 <_printf_i>
 80088be:	e7eb      	b.n	8008898 <_svfiprintf_r+0x1c0>
 80088c0:	080094ed 	.word	0x080094ed
 80088c4:	080094f7 	.word	0x080094f7
 80088c8:	00000000 	.word	0x00000000
 80088cc:	08008625 	.word	0x08008625
 80088d0:	080094f3 	.word	0x080094f3

080088d4 <_printf_common>:
 80088d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088d8:	4616      	mov	r6, r2
 80088da:	4699      	mov	r9, r3
 80088dc:	688a      	ldr	r2, [r1, #8]
 80088de:	690b      	ldr	r3, [r1, #16]
 80088e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088e4:	4293      	cmp	r3, r2
 80088e6:	bfb8      	it	lt
 80088e8:	4613      	movlt	r3, r2
 80088ea:	6033      	str	r3, [r6, #0]
 80088ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088f0:	4607      	mov	r7, r0
 80088f2:	460c      	mov	r4, r1
 80088f4:	b10a      	cbz	r2, 80088fa <_printf_common+0x26>
 80088f6:	3301      	adds	r3, #1
 80088f8:	6033      	str	r3, [r6, #0]
 80088fa:	6823      	ldr	r3, [r4, #0]
 80088fc:	0699      	lsls	r1, r3, #26
 80088fe:	bf42      	ittt	mi
 8008900:	6833      	ldrmi	r3, [r6, #0]
 8008902:	3302      	addmi	r3, #2
 8008904:	6033      	strmi	r3, [r6, #0]
 8008906:	6825      	ldr	r5, [r4, #0]
 8008908:	f015 0506 	ands.w	r5, r5, #6
 800890c:	d106      	bne.n	800891c <_printf_common+0x48>
 800890e:	f104 0a19 	add.w	sl, r4, #25
 8008912:	68e3      	ldr	r3, [r4, #12]
 8008914:	6832      	ldr	r2, [r6, #0]
 8008916:	1a9b      	subs	r3, r3, r2
 8008918:	42ab      	cmp	r3, r5
 800891a:	dc26      	bgt.n	800896a <_printf_common+0x96>
 800891c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008920:	1e13      	subs	r3, r2, #0
 8008922:	6822      	ldr	r2, [r4, #0]
 8008924:	bf18      	it	ne
 8008926:	2301      	movne	r3, #1
 8008928:	0692      	lsls	r2, r2, #26
 800892a:	d42b      	bmi.n	8008984 <_printf_common+0xb0>
 800892c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008930:	4649      	mov	r1, r9
 8008932:	4638      	mov	r0, r7
 8008934:	47c0      	blx	r8
 8008936:	3001      	adds	r0, #1
 8008938:	d01e      	beq.n	8008978 <_printf_common+0xa4>
 800893a:	6823      	ldr	r3, [r4, #0]
 800893c:	6922      	ldr	r2, [r4, #16]
 800893e:	f003 0306 	and.w	r3, r3, #6
 8008942:	2b04      	cmp	r3, #4
 8008944:	bf02      	ittt	eq
 8008946:	68e5      	ldreq	r5, [r4, #12]
 8008948:	6833      	ldreq	r3, [r6, #0]
 800894a:	1aed      	subeq	r5, r5, r3
 800894c:	68a3      	ldr	r3, [r4, #8]
 800894e:	bf0c      	ite	eq
 8008950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008954:	2500      	movne	r5, #0
 8008956:	4293      	cmp	r3, r2
 8008958:	bfc4      	itt	gt
 800895a:	1a9b      	subgt	r3, r3, r2
 800895c:	18ed      	addgt	r5, r5, r3
 800895e:	2600      	movs	r6, #0
 8008960:	341a      	adds	r4, #26
 8008962:	42b5      	cmp	r5, r6
 8008964:	d11a      	bne.n	800899c <_printf_common+0xc8>
 8008966:	2000      	movs	r0, #0
 8008968:	e008      	b.n	800897c <_printf_common+0xa8>
 800896a:	2301      	movs	r3, #1
 800896c:	4652      	mov	r2, sl
 800896e:	4649      	mov	r1, r9
 8008970:	4638      	mov	r0, r7
 8008972:	47c0      	blx	r8
 8008974:	3001      	adds	r0, #1
 8008976:	d103      	bne.n	8008980 <_printf_common+0xac>
 8008978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800897c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008980:	3501      	adds	r5, #1
 8008982:	e7c6      	b.n	8008912 <_printf_common+0x3e>
 8008984:	18e1      	adds	r1, r4, r3
 8008986:	1c5a      	adds	r2, r3, #1
 8008988:	2030      	movs	r0, #48	; 0x30
 800898a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800898e:	4422      	add	r2, r4
 8008990:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008994:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008998:	3302      	adds	r3, #2
 800899a:	e7c7      	b.n	800892c <_printf_common+0x58>
 800899c:	2301      	movs	r3, #1
 800899e:	4622      	mov	r2, r4
 80089a0:	4649      	mov	r1, r9
 80089a2:	4638      	mov	r0, r7
 80089a4:	47c0      	blx	r8
 80089a6:	3001      	adds	r0, #1
 80089a8:	d0e6      	beq.n	8008978 <_printf_common+0xa4>
 80089aa:	3601      	adds	r6, #1
 80089ac:	e7d9      	b.n	8008962 <_printf_common+0x8e>
	...

080089b0 <_printf_i>:
 80089b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089b4:	7e0f      	ldrb	r7, [r1, #24]
 80089b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80089b8:	2f78      	cmp	r7, #120	; 0x78
 80089ba:	4691      	mov	r9, r2
 80089bc:	4680      	mov	r8, r0
 80089be:	460c      	mov	r4, r1
 80089c0:	469a      	mov	sl, r3
 80089c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80089c6:	d807      	bhi.n	80089d8 <_printf_i+0x28>
 80089c8:	2f62      	cmp	r7, #98	; 0x62
 80089ca:	d80a      	bhi.n	80089e2 <_printf_i+0x32>
 80089cc:	2f00      	cmp	r7, #0
 80089ce:	f000 80d4 	beq.w	8008b7a <_printf_i+0x1ca>
 80089d2:	2f58      	cmp	r7, #88	; 0x58
 80089d4:	f000 80c0 	beq.w	8008b58 <_printf_i+0x1a8>
 80089d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80089e0:	e03a      	b.n	8008a58 <_printf_i+0xa8>
 80089e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089e6:	2b15      	cmp	r3, #21
 80089e8:	d8f6      	bhi.n	80089d8 <_printf_i+0x28>
 80089ea:	a101      	add	r1, pc, #4	; (adr r1, 80089f0 <_printf_i+0x40>)
 80089ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089f0:	08008a49 	.word	0x08008a49
 80089f4:	08008a5d 	.word	0x08008a5d
 80089f8:	080089d9 	.word	0x080089d9
 80089fc:	080089d9 	.word	0x080089d9
 8008a00:	080089d9 	.word	0x080089d9
 8008a04:	080089d9 	.word	0x080089d9
 8008a08:	08008a5d 	.word	0x08008a5d
 8008a0c:	080089d9 	.word	0x080089d9
 8008a10:	080089d9 	.word	0x080089d9
 8008a14:	080089d9 	.word	0x080089d9
 8008a18:	080089d9 	.word	0x080089d9
 8008a1c:	08008b61 	.word	0x08008b61
 8008a20:	08008a89 	.word	0x08008a89
 8008a24:	08008b1b 	.word	0x08008b1b
 8008a28:	080089d9 	.word	0x080089d9
 8008a2c:	080089d9 	.word	0x080089d9
 8008a30:	08008b83 	.word	0x08008b83
 8008a34:	080089d9 	.word	0x080089d9
 8008a38:	08008a89 	.word	0x08008a89
 8008a3c:	080089d9 	.word	0x080089d9
 8008a40:	080089d9 	.word	0x080089d9
 8008a44:	08008b23 	.word	0x08008b23
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	1d1a      	adds	r2, r3, #4
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	602a      	str	r2, [r5, #0]
 8008a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e09f      	b.n	8008b9c <_printf_i+0x1ec>
 8008a5c:	6820      	ldr	r0, [r4, #0]
 8008a5e:	682b      	ldr	r3, [r5, #0]
 8008a60:	0607      	lsls	r7, r0, #24
 8008a62:	f103 0104 	add.w	r1, r3, #4
 8008a66:	6029      	str	r1, [r5, #0]
 8008a68:	d501      	bpl.n	8008a6e <_printf_i+0xbe>
 8008a6a:	681e      	ldr	r6, [r3, #0]
 8008a6c:	e003      	b.n	8008a76 <_printf_i+0xc6>
 8008a6e:	0646      	lsls	r6, r0, #25
 8008a70:	d5fb      	bpl.n	8008a6a <_printf_i+0xba>
 8008a72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008a76:	2e00      	cmp	r6, #0
 8008a78:	da03      	bge.n	8008a82 <_printf_i+0xd2>
 8008a7a:	232d      	movs	r3, #45	; 0x2d
 8008a7c:	4276      	negs	r6, r6
 8008a7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a82:	485a      	ldr	r0, [pc, #360]	; (8008bec <_printf_i+0x23c>)
 8008a84:	230a      	movs	r3, #10
 8008a86:	e012      	b.n	8008aae <_printf_i+0xfe>
 8008a88:	682b      	ldr	r3, [r5, #0]
 8008a8a:	6820      	ldr	r0, [r4, #0]
 8008a8c:	1d19      	adds	r1, r3, #4
 8008a8e:	6029      	str	r1, [r5, #0]
 8008a90:	0605      	lsls	r5, r0, #24
 8008a92:	d501      	bpl.n	8008a98 <_printf_i+0xe8>
 8008a94:	681e      	ldr	r6, [r3, #0]
 8008a96:	e002      	b.n	8008a9e <_printf_i+0xee>
 8008a98:	0641      	lsls	r1, r0, #25
 8008a9a:	d5fb      	bpl.n	8008a94 <_printf_i+0xe4>
 8008a9c:	881e      	ldrh	r6, [r3, #0]
 8008a9e:	4853      	ldr	r0, [pc, #332]	; (8008bec <_printf_i+0x23c>)
 8008aa0:	2f6f      	cmp	r7, #111	; 0x6f
 8008aa2:	bf0c      	ite	eq
 8008aa4:	2308      	moveq	r3, #8
 8008aa6:	230a      	movne	r3, #10
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008aae:	6865      	ldr	r5, [r4, #4]
 8008ab0:	60a5      	str	r5, [r4, #8]
 8008ab2:	2d00      	cmp	r5, #0
 8008ab4:	bfa2      	ittt	ge
 8008ab6:	6821      	ldrge	r1, [r4, #0]
 8008ab8:	f021 0104 	bicge.w	r1, r1, #4
 8008abc:	6021      	strge	r1, [r4, #0]
 8008abe:	b90e      	cbnz	r6, 8008ac4 <_printf_i+0x114>
 8008ac0:	2d00      	cmp	r5, #0
 8008ac2:	d04b      	beq.n	8008b5c <_printf_i+0x1ac>
 8008ac4:	4615      	mov	r5, r2
 8008ac6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008aca:	fb03 6711 	mls	r7, r3, r1, r6
 8008ace:	5dc7      	ldrb	r7, [r0, r7]
 8008ad0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ad4:	4637      	mov	r7, r6
 8008ad6:	42bb      	cmp	r3, r7
 8008ad8:	460e      	mov	r6, r1
 8008ada:	d9f4      	bls.n	8008ac6 <_printf_i+0x116>
 8008adc:	2b08      	cmp	r3, #8
 8008ade:	d10b      	bne.n	8008af8 <_printf_i+0x148>
 8008ae0:	6823      	ldr	r3, [r4, #0]
 8008ae2:	07de      	lsls	r6, r3, #31
 8008ae4:	d508      	bpl.n	8008af8 <_printf_i+0x148>
 8008ae6:	6923      	ldr	r3, [r4, #16]
 8008ae8:	6861      	ldr	r1, [r4, #4]
 8008aea:	4299      	cmp	r1, r3
 8008aec:	bfde      	ittt	le
 8008aee:	2330      	movle	r3, #48	; 0x30
 8008af0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008af4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008af8:	1b52      	subs	r2, r2, r5
 8008afa:	6122      	str	r2, [r4, #16]
 8008afc:	f8cd a000 	str.w	sl, [sp]
 8008b00:	464b      	mov	r3, r9
 8008b02:	aa03      	add	r2, sp, #12
 8008b04:	4621      	mov	r1, r4
 8008b06:	4640      	mov	r0, r8
 8008b08:	f7ff fee4 	bl	80088d4 <_printf_common>
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	d14a      	bne.n	8008ba6 <_printf_i+0x1f6>
 8008b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b14:	b004      	add	sp, #16
 8008b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	f043 0320 	orr.w	r3, r3, #32
 8008b20:	6023      	str	r3, [r4, #0]
 8008b22:	4833      	ldr	r0, [pc, #204]	; (8008bf0 <_printf_i+0x240>)
 8008b24:	2778      	movs	r7, #120	; 0x78
 8008b26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	6829      	ldr	r1, [r5, #0]
 8008b2e:	061f      	lsls	r7, r3, #24
 8008b30:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b34:	d402      	bmi.n	8008b3c <_printf_i+0x18c>
 8008b36:	065f      	lsls	r7, r3, #25
 8008b38:	bf48      	it	mi
 8008b3a:	b2b6      	uxthmi	r6, r6
 8008b3c:	07df      	lsls	r7, r3, #31
 8008b3e:	bf48      	it	mi
 8008b40:	f043 0320 	orrmi.w	r3, r3, #32
 8008b44:	6029      	str	r1, [r5, #0]
 8008b46:	bf48      	it	mi
 8008b48:	6023      	strmi	r3, [r4, #0]
 8008b4a:	b91e      	cbnz	r6, 8008b54 <_printf_i+0x1a4>
 8008b4c:	6823      	ldr	r3, [r4, #0]
 8008b4e:	f023 0320 	bic.w	r3, r3, #32
 8008b52:	6023      	str	r3, [r4, #0]
 8008b54:	2310      	movs	r3, #16
 8008b56:	e7a7      	b.n	8008aa8 <_printf_i+0xf8>
 8008b58:	4824      	ldr	r0, [pc, #144]	; (8008bec <_printf_i+0x23c>)
 8008b5a:	e7e4      	b.n	8008b26 <_printf_i+0x176>
 8008b5c:	4615      	mov	r5, r2
 8008b5e:	e7bd      	b.n	8008adc <_printf_i+0x12c>
 8008b60:	682b      	ldr	r3, [r5, #0]
 8008b62:	6826      	ldr	r6, [r4, #0]
 8008b64:	6961      	ldr	r1, [r4, #20]
 8008b66:	1d18      	adds	r0, r3, #4
 8008b68:	6028      	str	r0, [r5, #0]
 8008b6a:	0635      	lsls	r5, r6, #24
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	d501      	bpl.n	8008b74 <_printf_i+0x1c4>
 8008b70:	6019      	str	r1, [r3, #0]
 8008b72:	e002      	b.n	8008b7a <_printf_i+0x1ca>
 8008b74:	0670      	lsls	r0, r6, #25
 8008b76:	d5fb      	bpl.n	8008b70 <_printf_i+0x1c0>
 8008b78:	8019      	strh	r1, [r3, #0]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	6123      	str	r3, [r4, #16]
 8008b7e:	4615      	mov	r5, r2
 8008b80:	e7bc      	b.n	8008afc <_printf_i+0x14c>
 8008b82:	682b      	ldr	r3, [r5, #0]
 8008b84:	1d1a      	adds	r2, r3, #4
 8008b86:	602a      	str	r2, [r5, #0]
 8008b88:	681d      	ldr	r5, [r3, #0]
 8008b8a:	6862      	ldr	r2, [r4, #4]
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	4628      	mov	r0, r5
 8008b90:	f7f7 fb5e 	bl	8000250 <memchr>
 8008b94:	b108      	cbz	r0, 8008b9a <_printf_i+0x1ea>
 8008b96:	1b40      	subs	r0, r0, r5
 8008b98:	6060      	str	r0, [r4, #4]
 8008b9a:	6863      	ldr	r3, [r4, #4]
 8008b9c:	6123      	str	r3, [r4, #16]
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ba4:	e7aa      	b.n	8008afc <_printf_i+0x14c>
 8008ba6:	6923      	ldr	r3, [r4, #16]
 8008ba8:	462a      	mov	r2, r5
 8008baa:	4649      	mov	r1, r9
 8008bac:	4640      	mov	r0, r8
 8008bae:	47d0      	blx	sl
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	d0ad      	beq.n	8008b10 <_printf_i+0x160>
 8008bb4:	6823      	ldr	r3, [r4, #0]
 8008bb6:	079b      	lsls	r3, r3, #30
 8008bb8:	d413      	bmi.n	8008be2 <_printf_i+0x232>
 8008bba:	68e0      	ldr	r0, [r4, #12]
 8008bbc:	9b03      	ldr	r3, [sp, #12]
 8008bbe:	4298      	cmp	r0, r3
 8008bc0:	bfb8      	it	lt
 8008bc2:	4618      	movlt	r0, r3
 8008bc4:	e7a6      	b.n	8008b14 <_printf_i+0x164>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	4632      	mov	r2, r6
 8008bca:	4649      	mov	r1, r9
 8008bcc:	4640      	mov	r0, r8
 8008bce:	47d0      	blx	sl
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	d09d      	beq.n	8008b10 <_printf_i+0x160>
 8008bd4:	3501      	adds	r5, #1
 8008bd6:	68e3      	ldr	r3, [r4, #12]
 8008bd8:	9903      	ldr	r1, [sp, #12]
 8008bda:	1a5b      	subs	r3, r3, r1
 8008bdc:	42ab      	cmp	r3, r5
 8008bde:	dcf2      	bgt.n	8008bc6 <_printf_i+0x216>
 8008be0:	e7eb      	b.n	8008bba <_printf_i+0x20a>
 8008be2:	2500      	movs	r5, #0
 8008be4:	f104 0619 	add.w	r6, r4, #25
 8008be8:	e7f5      	b.n	8008bd6 <_printf_i+0x226>
 8008bea:	bf00      	nop
 8008bec:	080094fe 	.word	0x080094fe
 8008bf0:	0800950f 	.word	0x0800950f

08008bf4 <__sflush_r>:
 8008bf4:	898a      	ldrh	r2, [r1, #12]
 8008bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bfa:	4605      	mov	r5, r0
 8008bfc:	0710      	lsls	r0, r2, #28
 8008bfe:	460c      	mov	r4, r1
 8008c00:	d458      	bmi.n	8008cb4 <__sflush_r+0xc0>
 8008c02:	684b      	ldr	r3, [r1, #4]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	dc05      	bgt.n	8008c14 <__sflush_r+0x20>
 8008c08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	dc02      	bgt.n	8008c14 <__sflush_r+0x20>
 8008c0e:	2000      	movs	r0, #0
 8008c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c16:	2e00      	cmp	r6, #0
 8008c18:	d0f9      	beq.n	8008c0e <__sflush_r+0x1a>
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c20:	682f      	ldr	r7, [r5, #0]
 8008c22:	6a21      	ldr	r1, [r4, #32]
 8008c24:	602b      	str	r3, [r5, #0]
 8008c26:	d032      	beq.n	8008c8e <__sflush_r+0x9a>
 8008c28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c2a:	89a3      	ldrh	r3, [r4, #12]
 8008c2c:	075a      	lsls	r2, r3, #29
 8008c2e:	d505      	bpl.n	8008c3c <__sflush_r+0x48>
 8008c30:	6863      	ldr	r3, [r4, #4]
 8008c32:	1ac0      	subs	r0, r0, r3
 8008c34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c36:	b10b      	cbz	r3, 8008c3c <__sflush_r+0x48>
 8008c38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c3a:	1ac0      	subs	r0, r0, r3
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	4602      	mov	r2, r0
 8008c40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c42:	6a21      	ldr	r1, [r4, #32]
 8008c44:	4628      	mov	r0, r5
 8008c46:	47b0      	blx	r6
 8008c48:	1c43      	adds	r3, r0, #1
 8008c4a:	89a3      	ldrh	r3, [r4, #12]
 8008c4c:	d106      	bne.n	8008c5c <__sflush_r+0x68>
 8008c4e:	6829      	ldr	r1, [r5, #0]
 8008c50:	291d      	cmp	r1, #29
 8008c52:	d82b      	bhi.n	8008cac <__sflush_r+0xb8>
 8008c54:	4a29      	ldr	r2, [pc, #164]	; (8008cfc <__sflush_r+0x108>)
 8008c56:	410a      	asrs	r2, r1
 8008c58:	07d6      	lsls	r6, r2, #31
 8008c5a:	d427      	bmi.n	8008cac <__sflush_r+0xb8>
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	6062      	str	r2, [r4, #4]
 8008c60:	04d9      	lsls	r1, r3, #19
 8008c62:	6922      	ldr	r2, [r4, #16]
 8008c64:	6022      	str	r2, [r4, #0]
 8008c66:	d504      	bpl.n	8008c72 <__sflush_r+0x7e>
 8008c68:	1c42      	adds	r2, r0, #1
 8008c6a:	d101      	bne.n	8008c70 <__sflush_r+0x7c>
 8008c6c:	682b      	ldr	r3, [r5, #0]
 8008c6e:	b903      	cbnz	r3, 8008c72 <__sflush_r+0x7e>
 8008c70:	6560      	str	r0, [r4, #84]	; 0x54
 8008c72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c74:	602f      	str	r7, [r5, #0]
 8008c76:	2900      	cmp	r1, #0
 8008c78:	d0c9      	beq.n	8008c0e <__sflush_r+0x1a>
 8008c7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c7e:	4299      	cmp	r1, r3
 8008c80:	d002      	beq.n	8008c88 <__sflush_r+0x94>
 8008c82:	4628      	mov	r0, r5
 8008c84:	f7ff fbce 	bl	8008424 <_free_r>
 8008c88:	2000      	movs	r0, #0
 8008c8a:	6360      	str	r0, [r4, #52]	; 0x34
 8008c8c:	e7c0      	b.n	8008c10 <__sflush_r+0x1c>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	4628      	mov	r0, r5
 8008c92:	47b0      	blx	r6
 8008c94:	1c41      	adds	r1, r0, #1
 8008c96:	d1c8      	bne.n	8008c2a <__sflush_r+0x36>
 8008c98:	682b      	ldr	r3, [r5, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d0c5      	beq.n	8008c2a <__sflush_r+0x36>
 8008c9e:	2b1d      	cmp	r3, #29
 8008ca0:	d001      	beq.n	8008ca6 <__sflush_r+0xb2>
 8008ca2:	2b16      	cmp	r3, #22
 8008ca4:	d101      	bne.n	8008caa <__sflush_r+0xb6>
 8008ca6:	602f      	str	r7, [r5, #0]
 8008ca8:	e7b1      	b.n	8008c0e <__sflush_r+0x1a>
 8008caa:	89a3      	ldrh	r3, [r4, #12]
 8008cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cb0:	81a3      	strh	r3, [r4, #12]
 8008cb2:	e7ad      	b.n	8008c10 <__sflush_r+0x1c>
 8008cb4:	690f      	ldr	r7, [r1, #16]
 8008cb6:	2f00      	cmp	r7, #0
 8008cb8:	d0a9      	beq.n	8008c0e <__sflush_r+0x1a>
 8008cba:	0793      	lsls	r3, r2, #30
 8008cbc:	680e      	ldr	r6, [r1, #0]
 8008cbe:	bf08      	it	eq
 8008cc0:	694b      	ldreq	r3, [r1, #20]
 8008cc2:	600f      	str	r7, [r1, #0]
 8008cc4:	bf18      	it	ne
 8008cc6:	2300      	movne	r3, #0
 8008cc8:	eba6 0807 	sub.w	r8, r6, r7
 8008ccc:	608b      	str	r3, [r1, #8]
 8008cce:	f1b8 0f00 	cmp.w	r8, #0
 8008cd2:	dd9c      	ble.n	8008c0e <__sflush_r+0x1a>
 8008cd4:	6a21      	ldr	r1, [r4, #32]
 8008cd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008cd8:	4643      	mov	r3, r8
 8008cda:	463a      	mov	r2, r7
 8008cdc:	4628      	mov	r0, r5
 8008cde:	47b0      	blx	r6
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	dc06      	bgt.n	8008cf2 <__sflush_r+0xfe>
 8008ce4:	89a3      	ldrh	r3, [r4, #12]
 8008ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cea:	81a3      	strh	r3, [r4, #12]
 8008cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cf0:	e78e      	b.n	8008c10 <__sflush_r+0x1c>
 8008cf2:	4407      	add	r7, r0
 8008cf4:	eba8 0800 	sub.w	r8, r8, r0
 8008cf8:	e7e9      	b.n	8008cce <__sflush_r+0xda>
 8008cfa:	bf00      	nop
 8008cfc:	dfbffffe 	.word	0xdfbffffe

08008d00 <_fflush_r>:
 8008d00:	b538      	push	{r3, r4, r5, lr}
 8008d02:	690b      	ldr	r3, [r1, #16]
 8008d04:	4605      	mov	r5, r0
 8008d06:	460c      	mov	r4, r1
 8008d08:	b913      	cbnz	r3, 8008d10 <_fflush_r+0x10>
 8008d0a:	2500      	movs	r5, #0
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	bd38      	pop	{r3, r4, r5, pc}
 8008d10:	b118      	cbz	r0, 8008d1a <_fflush_r+0x1a>
 8008d12:	6a03      	ldr	r3, [r0, #32]
 8008d14:	b90b      	cbnz	r3, 8008d1a <_fflush_r+0x1a>
 8008d16:	f7ff f9e3 	bl	80080e0 <__sinit>
 8008d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d0f3      	beq.n	8008d0a <_fflush_r+0xa>
 8008d22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d24:	07d0      	lsls	r0, r2, #31
 8008d26:	d404      	bmi.n	8008d32 <_fflush_r+0x32>
 8008d28:	0599      	lsls	r1, r3, #22
 8008d2a:	d402      	bmi.n	8008d32 <_fflush_r+0x32>
 8008d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d2e:	f7ff fb59 	bl	80083e4 <__retarget_lock_acquire_recursive>
 8008d32:	4628      	mov	r0, r5
 8008d34:	4621      	mov	r1, r4
 8008d36:	f7ff ff5d 	bl	8008bf4 <__sflush_r>
 8008d3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d3c:	07da      	lsls	r2, r3, #31
 8008d3e:	4605      	mov	r5, r0
 8008d40:	d4e4      	bmi.n	8008d0c <_fflush_r+0xc>
 8008d42:	89a3      	ldrh	r3, [r4, #12]
 8008d44:	059b      	lsls	r3, r3, #22
 8008d46:	d4e1      	bmi.n	8008d0c <_fflush_r+0xc>
 8008d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d4a:	f7ff fb4c 	bl	80083e6 <__retarget_lock_release_recursive>
 8008d4e:	e7dd      	b.n	8008d0c <_fflush_r+0xc>

08008d50 <fiprintf>:
 8008d50:	b40e      	push	{r1, r2, r3}
 8008d52:	b503      	push	{r0, r1, lr}
 8008d54:	4601      	mov	r1, r0
 8008d56:	ab03      	add	r3, sp, #12
 8008d58:	4805      	ldr	r0, [pc, #20]	; (8008d70 <fiprintf+0x20>)
 8008d5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d5e:	6800      	ldr	r0, [r0, #0]
 8008d60:	9301      	str	r3, [sp, #4]
 8008d62:	f000 f89f 	bl	8008ea4 <_vfiprintf_r>
 8008d66:	b002      	add	sp, #8
 8008d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d6c:	b003      	add	sp, #12
 8008d6e:	4770      	bx	lr
 8008d70:	20000120 	.word	0x20000120

08008d74 <memmove>:
 8008d74:	4288      	cmp	r0, r1
 8008d76:	b510      	push	{r4, lr}
 8008d78:	eb01 0402 	add.w	r4, r1, r2
 8008d7c:	d902      	bls.n	8008d84 <memmove+0x10>
 8008d7e:	4284      	cmp	r4, r0
 8008d80:	4623      	mov	r3, r4
 8008d82:	d807      	bhi.n	8008d94 <memmove+0x20>
 8008d84:	1e43      	subs	r3, r0, #1
 8008d86:	42a1      	cmp	r1, r4
 8008d88:	d008      	beq.n	8008d9c <memmove+0x28>
 8008d8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d92:	e7f8      	b.n	8008d86 <memmove+0x12>
 8008d94:	4402      	add	r2, r0
 8008d96:	4601      	mov	r1, r0
 8008d98:	428a      	cmp	r2, r1
 8008d9a:	d100      	bne.n	8008d9e <memmove+0x2a>
 8008d9c:	bd10      	pop	{r4, pc}
 8008d9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008da2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008da6:	e7f7      	b.n	8008d98 <memmove+0x24>

08008da8 <_sbrk_r>:
 8008da8:	b538      	push	{r3, r4, r5, lr}
 8008daa:	4d06      	ldr	r5, [pc, #24]	; (8008dc4 <_sbrk_r+0x1c>)
 8008dac:	2300      	movs	r3, #0
 8008dae:	4604      	mov	r4, r0
 8008db0:	4608      	mov	r0, r1
 8008db2:	602b      	str	r3, [r5, #0]
 8008db4:	f7f8 f88a 	bl	8000ecc <_sbrk>
 8008db8:	1c43      	adds	r3, r0, #1
 8008dba:	d102      	bne.n	8008dc2 <_sbrk_r+0x1a>
 8008dbc:	682b      	ldr	r3, [r5, #0]
 8008dbe:	b103      	cbz	r3, 8008dc2 <_sbrk_r+0x1a>
 8008dc0:	6023      	str	r3, [r4, #0]
 8008dc2:	bd38      	pop	{r3, r4, r5, pc}
 8008dc4:	20000620 	.word	0x20000620

08008dc8 <memcpy>:
 8008dc8:	440a      	add	r2, r1
 8008dca:	4291      	cmp	r1, r2
 8008dcc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008dd0:	d100      	bne.n	8008dd4 <memcpy+0xc>
 8008dd2:	4770      	bx	lr
 8008dd4:	b510      	push	{r4, lr}
 8008dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dde:	4291      	cmp	r1, r2
 8008de0:	d1f9      	bne.n	8008dd6 <memcpy+0xe>
 8008de2:	bd10      	pop	{r4, pc}

08008de4 <abort>:
 8008de4:	b508      	push	{r3, lr}
 8008de6:	2006      	movs	r0, #6
 8008de8:	f000 fa34 	bl	8009254 <raise>
 8008dec:	2001      	movs	r0, #1
 8008dee:	f7f7 fff5 	bl	8000ddc <_exit>

08008df2 <_realloc_r>:
 8008df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008df6:	4680      	mov	r8, r0
 8008df8:	4614      	mov	r4, r2
 8008dfa:	460e      	mov	r6, r1
 8008dfc:	b921      	cbnz	r1, 8008e08 <_realloc_r+0x16>
 8008dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e02:	4611      	mov	r1, r2
 8008e04:	f7ff bb82 	b.w	800850c <_malloc_r>
 8008e08:	b92a      	cbnz	r2, 8008e16 <_realloc_r+0x24>
 8008e0a:	f7ff fb0b 	bl	8008424 <_free_r>
 8008e0e:	4625      	mov	r5, r4
 8008e10:	4628      	mov	r0, r5
 8008e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e16:	f000 fa39 	bl	800928c <_malloc_usable_size_r>
 8008e1a:	4284      	cmp	r4, r0
 8008e1c:	4607      	mov	r7, r0
 8008e1e:	d802      	bhi.n	8008e26 <_realloc_r+0x34>
 8008e20:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e24:	d812      	bhi.n	8008e4c <_realloc_r+0x5a>
 8008e26:	4621      	mov	r1, r4
 8008e28:	4640      	mov	r0, r8
 8008e2a:	f7ff fb6f 	bl	800850c <_malloc_r>
 8008e2e:	4605      	mov	r5, r0
 8008e30:	2800      	cmp	r0, #0
 8008e32:	d0ed      	beq.n	8008e10 <_realloc_r+0x1e>
 8008e34:	42bc      	cmp	r4, r7
 8008e36:	4622      	mov	r2, r4
 8008e38:	4631      	mov	r1, r6
 8008e3a:	bf28      	it	cs
 8008e3c:	463a      	movcs	r2, r7
 8008e3e:	f7ff ffc3 	bl	8008dc8 <memcpy>
 8008e42:	4631      	mov	r1, r6
 8008e44:	4640      	mov	r0, r8
 8008e46:	f7ff faed 	bl	8008424 <_free_r>
 8008e4a:	e7e1      	b.n	8008e10 <_realloc_r+0x1e>
 8008e4c:	4635      	mov	r5, r6
 8008e4e:	e7df      	b.n	8008e10 <_realloc_r+0x1e>

08008e50 <__sfputc_r>:
 8008e50:	6893      	ldr	r3, [r2, #8]
 8008e52:	3b01      	subs	r3, #1
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	b410      	push	{r4}
 8008e58:	6093      	str	r3, [r2, #8]
 8008e5a:	da08      	bge.n	8008e6e <__sfputc_r+0x1e>
 8008e5c:	6994      	ldr	r4, [r2, #24]
 8008e5e:	42a3      	cmp	r3, r4
 8008e60:	db01      	blt.n	8008e66 <__sfputc_r+0x16>
 8008e62:	290a      	cmp	r1, #10
 8008e64:	d103      	bne.n	8008e6e <__sfputc_r+0x1e>
 8008e66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e6a:	f000 b935 	b.w	80090d8 <__swbuf_r>
 8008e6e:	6813      	ldr	r3, [r2, #0]
 8008e70:	1c58      	adds	r0, r3, #1
 8008e72:	6010      	str	r0, [r2, #0]
 8008e74:	7019      	strb	r1, [r3, #0]
 8008e76:	4608      	mov	r0, r1
 8008e78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <__sfputs_r>:
 8008e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e80:	4606      	mov	r6, r0
 8008e82:	460f      	mov	r7, r1
 8008e84:	4614      	mov	r4, r2
 8008e86:	18d5      	adds	r5, r2, r3
 8008e88:	42ac      	cmp	r4, r5
 8008e8a:	d101      	bne.n	8008e90 <__sfputs_r+0x12>
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	e007      	b.n	8008ea0 <__sfputs_r+0x22>
 8008e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e94:	463a      	mov	r2, r7
 8008e96:	4630      	mov	r0, r6
 8008e98:	f7ff ffda 	bl	8008e50 <__sfputc_r>
 8008e9c:	1c43      	adds	r3, r0, #1
 8008e9e:	d1f3      	bne.n	8008e88 <__sfputs_r+0xa>
 8008ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ea4 <_vfiprintf_r>:
 8008ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea8:	460d      	mov	r5, r1
 8008eaa:	b09d      	sub	sp, #116	; 0x74
 8008eac:	4614      	mov	r4, r2
 8008eae:	4698      	mov	r8, r3
 8008eb0:	4606      	mov	r6, r0
 8008eb2:	b118      	cbz	r0, 8008ebc <_vfiprintf_r+0x18>
 8008eb4:	6a03      	ldr	r3, [r0, #32]
 8008eb6:	b90b      	cbnz	r3, 8008ebc <_vfiprintf_r+0x18>
 8008eb8:	f7ff f912 	bl	80080e0 <__sinit>
 8008ebc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ebe:	07d9      	lsls	r1, r3, #31
 8008ec0:	d405      	bmi.n	8008ece <_vfiprintf_r+0x2a>
 8008ec2:	89ab      	ldrh	r3, [r5, #12]
 8008ec4:	059a      	lsls	r2, r3, #22
 8008ec6:	d402      	bmi.n	8008ece <_vfiprintf_r+0x2a>
 8008ec8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008eca:	f7ff fa8b 	bl	80083e4 <__retarget_lock_acquire_recursive>
 8008ece:	89ab      	ldrh	r3, [r5, #12]
 8008ed0:	071b      	lsls	r3, r3, #28
 8008ed2:	d501      	bpl.n	8008ed8 <_vfiprintf_r+0x34>
 8008ed4:	692b      	ldr	r3, [r5, #16]
 8008ed6:	b99b      	cbnz	r3, 8008f00 <_vfiprintf_r+0x5c>
 8008ed8:	4629      	mov	r1, r5
 8008eda:	4630      	mov	r0, r6
 8008edc:	f000 f93a 	bl	8009154 <__swsetup_r>
 8008ee0:	b170      	cbz	r0, 8008f00 <_vfiprintf_r+0x5c>
 8008ee2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ee4:	07dc      	lsls	r4, r3, #31
 8008ee6:	d504      	bpl.n	8008ef2 <_vfiprintf_r+0x4e>
 8008ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008eec:	b01d      	add	sp, #116	; 0x74
 8008eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef2:	89ab      	ldrh	r3, [r5, #12]
 8008ef4:	0598      	lsls	r0, r3, #22
 8008ef6:	d4f7      	bmi.n	8008ee8 <_vfiprintf_r+0x44>
 8008ef8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008efa:	f7ff fa74 	bl	80083e6 <__retarget_lock_release_recursive>
 8008efe:	e7f3      	b.n	8008ee8 <_vfiprintf_r+0x44>
 8008f00:	2300      	movs	r3, #0
 8008f02:	9309      	str	r3, [sp, #36]	; 0x24
 8008f04:	2320      	movs	r3, #32
 8008f06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f0e:	2330      	movs	r3, #48	; 0x30
 8008f10:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80090c4 <_vfiprintf_r+0x220>
 8008f14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f18:	f04f 0901 	mov.w	r9, #1
 8008f1c:	4623      	mov	r3, r4
 8008f1e:	469a      	mov	sl, r3
 8008f20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f24:	b10a      	cbz	r2, 8008f2a <_vfiprintf_r+0x86>
 8008f26:	2a25      	cmp	r2, #37	; 0x25
 8008f28:	d1f9      	bne.n	8008f1e <_vfiprintf_r+0x7a>
 8008f2a:	ebba 0b04 	subs.w	fp, sl, r4
 8008f2e:	d00b      	beq.n	8008f48 <_vfiprintf_r+0xa4>
 8008f30:	465b      	mov	r3, fp
 8008f32:	4622      	mov	r2, r4
 8008f34:	4629      	mov	r1, r5
 8008f36:	4630      	mov	r0, r6
 8008f38:	f7ff ffa1 	bl	8008e7e <__sfputs_r>
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	f000 80a9 	beq.w	8009094 <_vfiprintf_r+0x1f0>
 8008f42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f44:	445a      	add	r2, fp
 8008f46:	9209      	str	r2, [sp, #36]	; 0x24
 8008f48:	f89a 3000 	ldrb.w	r3, [sl]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f000 80a1 	beq.w	8009094 <_vfiprintf_r+0x1f0>
 8008f52:	2300      	movs	r3, #0
 8008f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f5c:	f10a 0a01 	add.w	sl, sl, #1
 8008f60:	9304      	str	r3, [sp, #16]
 8008f62:	9307      	str	r3, [sp, #28]
 8008f64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f68:	931a      	str	r3, [sp, #104]	; 0x68
 8008f6a:	4654      	mov	r4, sl
 8008f6c:	2205      	movs	r2, #5
 8008f6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f72:	4854      	ldr	r0, [pc, #336]	; (80090c4 <_vfiprintf_r+0x220>)
 8008f74:	f7f7 f96c 	bl	8000250 <memchr>
 8008f78:	9a04      	ldr	r2, [sp, #16]
 8008f7a:	b9d8      	cbnz	r0, 8008fb4 <_vfiprintf_r+0x110>
 8008f7c:	06d1      	lsls	r1, r2, #27
 8008f7e:	bf44      	itt	mi
 8008f80:	2320      	movmi	r3, #32
 8008f82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f86:	0713      	lsls	r3, r2, #28
 8008f88:	bf44      	itt	mi
 8008f8a:	232b      	movmi	r3, #43	; 0x2b
 8008f8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f90:	f89a 3000 	ldrb.w	r3, [sl]
 8008f94:	2b2a      	cmp	r3, #42	; 0x2a
 8008f96:	d015      	beq.n	8008fc4 <_vfiprintf_r+0x120>
 8008f98:	9a07      	ldr	r2, [sp, #28]
 8008f9a:	4654      	mov	r4, sl
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	f04f 0c0a 	mov.w	ip, #10
 8008fa2:	4621      	mov	r1, r4
 8008fa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fa8:	3b30      	subs	r3, #48	; 0x30
 8008faa:	2b09      	cmp	r3, #9
 8008fac:	d94d      	bls.n	800904a <_vfiprintf_r+0x1a6>
 8008fae:	b1b0      	cbz	r0, 8008fde <_vfiprintf_r+0x13a>
 8008fb0:	9207      	str	r2, [sp, #28]
 8008fb2:	e014      	b.n	8008fde <_vfiprintf_r+0x13a>
 8008fb4:	eba0 0308 	sub.w	r3, r0, r8
 8008fb8:	fa09 f303 	lsl.w	r3, r9, r3
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	9304      	str	r3, [sp, #16]
 8008fc0:	46a2      	mov	sl, r4
 8008fc2:	e7d2      	b.n	8008f6a <_vfiprintf_r+0xc6>
 8008fc4:	9b03      	ldr	r3, [sp, #12]
 8008fc6:	1d19      	adds	r1, r3, #4
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	9103      	str	r1, [sp, #12]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	bfbb      	ittet	lt
 8008fd0:	425b      	neglt	r3, r3
 8008fd2:	f042 0202 	orrlt.w	r2, r2, #2
 8008fd6:	9307      	strge	r3, [sp, #28]
 8008fd8:	9307      	strlt	r3, [sp, #28]
 8008fda:	bfb8      	it	lt
 8008fdc:	9204      	strlt	r2, [sp, #16]
 8008fde:	7823      	ldrb	r3, [r4, #0]
 8008fe0:	2b2e      	cmp	r3, #46	; 0x2e
 8008fe2:	d10c      	bne.n	8008ffe <_vfiprintf_r+0x15a>
 8008fe4:	7863      	ldrb	r3, [r4, #1]
 8008fe6:	2b2a      	cmp	r3, #42	; 0x2a
 8008fe8:	d134      	bne.n	8009054 <_vfiprintf_r+0x1b0>
 8008fea:	9b03      	ldr	r3, [sp, #12]
 8008fec:	1d1a      	adds	r2, r3, #4
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	9203      	str	r2, [sp, #12]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	bfb8      	it	lt
 8008ff6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008ffa:	3402      	adds	r4, #2
 8008ffc:	9305      	str	r3, [sp, #20]
 8008ffe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80090d4 <_vfiprintf_r+0x230>
 8009002:	7821      	ldrb	r1, [r4, #0]
 8009004:	2203      	movs	r2, #3
 8009006:	4650      	mov	r0, sl
 8009008:	f7f7 f922 	bl	8000250 <memchr>
 800900c:	b138      	cbz	r0, 800901e <_vfiprintf_r+0x17a>
 800900e:	9b04      	ldr	r3, [sp, #16]
 8009010:	eba0 000a 	sub.w	r0, r0, sl
 8009014:	2240      	movs	r2, #64	; 0x40
 8009016:	4082      	lsls	r2, r0
 8009018:	4313      	orrs	r3, r2
 800901a:	3401      	adds	r4, #1
 800901c:	9304      	str	r3, [sp, #16]
 800901e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009022:	4829      	ldr	r0, [pc, #164]	; (80090c8 <_vfiprintf_r+0x224>)
 8009024:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009028:	2206      	movs	r2, #6
 800902a:	f7f7 f911 	bl	8000250 <memchr>
 800902e:	2800      	cmp	r0, #0
 8009030:	d03f      	beq.n	80090b2 <_vfiprintf_r+0x20e>
 8009032:	4b26      	ldr	r3, [pc, #152]	; (80090cc <_vfiprintf_r+0x228>)
 8009034:	bb1b      	cbnz	r3, 800907e <_vfiprintf_r+0x1da>
 8009036:	9b03      	ldr	r3, [sp, #12]
 8009038:	3307      	adds	r3, #7
 800903a:	f023 0307 	bic.w	r3, r3, #7
 800903e:	3308      	adds	r3, #8
 8009040:	9303      	str	r3, [sp, #12]
 8009042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009044:	443b      	add	r3, r7
 8009046:	9309      	str	r3, [sp, #36]	; 0x24
 8009048:	e768      	b.n	8008f1c <_vfiprintf_r+0x78>
 800904a:	fb0c 3202 	mla	r2, ip, r2, r3
 800904e:	460c      	mov	r4, r1
 8009050:	2001      	movs	r0, #1
 8009052:	e7a6      	b.n	8008fa2 <_vfiprintf_r+0xfe>
 8009054:	2300      	movs	r3, #0
 8009056:	3401      	adds	r4, #1
 8009058:	9305      	str	r3, [sp, #20]
 800905a:	4619      	mov	r1, r3
 800905c:	f04f 0c0a 	mov.w	ip, #10
 8009060:	4620      	mov	r0, r4
 8009062:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009066:	3a30      	subs	r2, #48	; 0x30
 8009068:	2a09      	cmp	r2, #9
 800906a:	d903      	bls.n	8009074 <_vfiprintf_r+0x1d0>
 800906c:	2b00      	cmp	r3, #0
 800906e:	d0c6      	beq.n	8008ffe <_vfiprintf_r+0x15a>
 8009070:	9105      	str	r1, [sp, #20]
 8009072:	e7c4      	b.n	8008ffe <_vfiprintf_r+0x15a>
 8009074:	fb0c 2101 	mla	r1, ip, r1, r2
 8009078:	4604      	mov	r4, r0
 800907a:	2301      	movs	r3, #1
 800907c:	e7f0      	b.n	8009060 <_vfiprintf_r+0x1bc>
 800907e:	ab03      	add	r3, sp, #12
 8009080:	9300      	str	r3, [sp, #0]
 8009082:	462a      	mov	r2, r5
 8009084:	4b12      	ldr	r3, [pc, #72]	; (80090d0 <_vfiprintf_r+0x22c>)
 8009086:	a904      	add	r1, sp, #16
 8009088:	4630      	mov	r0, r6
 800908a:	f3af 8000 	nop.w
 800908e:	4607      	mov	r7, r0
 8009090:	1c78      	adds	r0, r7, #1
 8009092:	d1d6      	bne.n	8009042 <_vfiprintf_r+0x19e>
 8009094:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009096:	07d9      	lsls	r1, r3, #31
 8009098:	d405      	bmi.n	80090a6 <_vfiprintf_r+0x202>
 800909a:	89ab      	ldrh	r3, [r5, #12]
 800909c:	059a      	lsls	r2, r3, #22
 800909e:	d402      	bmi.n	80090a6 <_vfiprintf_r+0x202>
 80090a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090a2:	f7ff f9a0 	bl	80083e6 <__retarget_lock_release_recursive>
 80090a6:	89ab      	ldrh	r3, [r5, #12]
 80090a8:	065b      	lsls	r3, r3, #25
 80090aa:	f53f af1d 	bmi.w	8008ee8 <_vfiprintf_r+0x44>
 80090ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090b0:	e71c      	b.n	8008eec <_vfiprintf_r+0x48>
 80090b2:	ab03      	add	r3, sp, #12
 80090b4:	9300      	str	r3, [sp, #0]
 80090b6:	462a      	mov	r2, r5
 80090b8:	4b05      	ldr	r3, [pc, #20]	; (80090d0 <_vfiprintf_r+0x22c>)
 80090ba:	a904      	add	r1, sp, #16
 80090bc:	4630      	mov	r0, r6
 80090be:	f7ff fc77 	bl	80089b0 <_printf_i>
 80090c2:	e7e4      	b.n	800908e <_vfiprintf_r+0x1ea>
 80090c4:	080094ed 	.word	0x080094ed
 80090c8:	080094f7 	.word	0x080094f7
 80090cc:	00000000 	.word	0x00000000
 80090d0:	08008e7f 	.word	0x08008e7f
 80090d4:	080094f3 	.word	0x080094f3

080090d8 <__swbuf_r>:
 80090d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090da:	460e      	mov	r6, r1
 80090dc:	4614      	mov	r4, r2
 80090de:	4605      	mov	r5, r0
 80090e0:	b118      	cbz	r0, 80090ea <__swbuf_r+0x12>
 80090e2:	6a03      	ldr	r3, [r0, #32]
 80090e4:	b90b      	cbnz	r3, 80090ea <__swbuf_r+0x12>
 80090e6:	f7fe fffb 	bl	80080e0 <__sinit>
 80090ea:	69a3      	ldr	r3, [r4, #24]
 80090ec:	60a3      	str	r3, [r4, #8]
 80090ee:	89a3      	ldrh	r3, [r4, #12]
 80090f0:	071a      	lsls	r2, r3, #28
 80090f2:	d525      	bpl.n	8009140 <__swbuf_r+0x68>
 80090f4:	6923      	ldr	r3, [r4, #16]
 80090f6:	b31b      	cbz	r3, 8009140 <__swbuf_r+0x68>
 80090f8:	6823      	ldr	r3, [r4, #0]
 80090fa:	6922      	ldr	r2, [r4, #16]
 80090fc:	1a98      	subs	r0, r3, r2
 80090fe:	6963      	ldr	r3, [r4, #20]
 8009100:	b2f6      	uxtb	r6, r6
 8009102:	4283      	cmp	r3, r0
 8009104:	4637      	mov	r7, r6
 8009106:	dc04      	bgt.n	8009112 <__swbuf_r+0x3a>
 8009108:	4621      	mov	r1, r4
 800910a:	4628      	mov	r0, r5
 800910c:	f7ff fdf8 	bl	8008d00 <_fflush_r>
 8009110:	b9e0      	cbnz	r0, 800914c <__swbuf_r+0x74>
 8009112:	68a3      	ldr	r3, [r4, #8]
 8009114:	3b01      	subs	r3, #1
 8009116:	60a3      	str	r3, [r4, #8]
 8009118:	6823      	ldr	r3, [r4, #0]
 800911a:	1c5a      	adds	r2, r3, #1
 800911c:	6022      	str	r2, [r4, #0]
 800911e:	701e      	strb	r6, [r3, #0]
 8009120:	6962      	ldr	r2, [r4, #20]
 8009122:	1c43      	adds	r3, r0, #1
 8009124:	429a      	cmp	r2, r3
 8009126:	d004      	beq.n	8009132 <__swbuf_r+0x5a>
 8009128:	89a3      	ldrh	r3, [r4, #12]
 800912a:	07db      	lsls	r3, r3, #31
 800912c:	d506      	bpl.n	800913c <__swbuf_r+0x64>
 800912e:	2e0a      	cmp	r6, #10
 8009130:	d104      	bne.n	800913c <__swbuf_r+0x64>
 8009132:	4621      	mov	r1, r4
 8009134:	4628      	mov	r0, r5
 8009136:	f7ff fde3 	bl	8008d00 <_fflush_r>
 800913a:	b938      	cbnz	r0, 800914c <__swbuf_r+0x74>
 800913c:	4638      	mov	r0, r7
 800913e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009140:	4621      	mov	r1, r4
 8009142:	4628      	mov	r0, r5
 8009144:	f000 f806 	bl	8009154 <__swsetup_r>
 8009148:	2800      	cmp	r0, #0
 800914a:	d0d5      	beq.n	80090f8 <__swbuf_r+0x20>
 800914c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009150:	e7f4      	b.n	800913c <__swbuf_r+0x64>
	...

08009154 <__swsetup_r>:
 8009154:	b538      	push	{r3, r4, r5, lr}
 8009156:	4b2a      	ldr	r3, [pc, #168]	; (8009200 <__swsetup_r+0xac>)
 8009158:	4605      	mov	r5, r0
 800915a:	6818      	ldr	r0, [r3, #0]
 800915c:	460c      	mov	r4, r1
 800915e:	b118      	cbz	r0, 8009168 <__swsetup_r+0x14>
 8009160:	6a03      	ldr	r3, [r0, #32]
 8009162:	b90b      	cbnz	r3, 8009168 <__swsetup_r+0x14>
 8009164:	f7fe ffbc 	bl	80080e0 <__sinit>
 8009168:	89a3      	ldrh	r3, [r4, #12]
 800916a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800916e:	0718      	lsls	r0, r3, #28
 8009170:	d422      	bmi.n	80091b8 <__swsetup_r+0x64>
 8009172:	06d9      	lsls	r1, r3, #27
 8009174:	d407      	bmi.n	8009186 <__swsetup_r+0x32>
 8009176:	2309      	movs	r3, #9
 8009178:	602b      	str	r3, [r5, #0]
 800917a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800917e:	81a3      	strh	r3, [r4, #12]
 8009180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009184:	e034      	b.n	80091f0 <__swsetup_r+0x9c>
 8009186:	0758      	lsls	r0, r3, #29
 8009188:	d512      	bpl.n	80091b0 <__swsetup_r+0x5c>
 800918a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800918c:	b141      	cbz	r1, 80091a0 <__swsetup_r+0x4c>
 800918e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009192:	4299      	cmp	r1, r3
 8009194:	d002      	beq.n	800919c <__swsetup_r+0x48>
 8009196:	4628      	mov	r0, r5
 8009198:	f7ff f944 	bl	8008424 <_free_r>
 800919c:	2300      	movs	r3, #0
 800919e:	6363      	str	r3, [r4, #52]	; 0x34
 80091a0:	89a3      	ldrh	r3, [r4, #12]
 80091a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091a6:	81a3      	strh	r3, [r4, #12]
 80091a8:	2300      	movs	r3, #0
 80091aa:	6063      	str	r3, [r4, #4]
 80091ac:	6923      	ldr	r3, [r4, #16]
 80091ae:	6023      	str	r3, [r4, #0]
 80091b0:	89a3      	ldrh	r3, [r4, #12]
 80091b2:	f043 0308 	orr.w	r3, r3, #8
 80091b6:	81a3      	strh	r3, [r4, #12]
 80091b8:	6923      	ldr	r3, [r4, #16]
 80091ba:	b94b      	cbnz	r3, 80091d0 <__swsetup_r+0x7c>
 80091bc:	89a3      	ldrh	r3, [r4, #12]
 80091be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80091c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091c6:	d003      	beq.n	80091d0 <__swsetup_r+0x7c>
 80091c8:	4621      	mov	r1, r4
 80091ca:	4628      	mov	r0, r5
 80091cc:	f000 f88c 	bl	80092e8 <__smakebuf_r>
 80091d0:	89a0      	ldrh	r0, [r4, #12]
 80091d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091d6:	f010 0301 	ands.w	r3, r0, #1
 80091da:	d00a      	beq.n	80091f2 <__swsetup_r+0x9e>
 80091dc:	2300      	movs	r3, #0
 80091de:	60a3      	str	r3, [r4, #8]
 80091e0:	6963      	ldr	r3, [r4, #20]
 80091e2:	425b      	negs	r3, r3
 80091e4:	61a3      	str	r3, [r4, #24]
 80091e6:	6923      	ldr	r3, [r4, #16]
 80091e8:	b943      	cbnz	r3, 80091fc <__swsetup_r+0xa8>
 80091ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091ee:	d1c4      	bne.n	800917a <__swsetup_r+0x26>
 80091f0:	bd38      	pop	{r3, r4, r5, pc}
 80091f2:	0781      	lsls	r1, r0, #30
 80091f4:	bf58      	it	pl
 80091f6:	6963      	ldrpl	r3, [r4, #20]
 80091f8:	60a3      	str	r3, [r4, #8]
 80091fa:	e7f4      	b.n	80091e6 <__swsetup_r+0x92>
 80091fc:	2000      	movs	r0, #0
 80091fe:	e7f7      	b.n	80091f0 <__swsetup_r+0x9c>
 8009200:	20000120 	.word	0x20000120

08009204 <_raise_r>:
 8009204:	291f      	cmp	r1, #31
 8009206:	b538      	push	{r3, r4, r5, lr}
 8009208:	4604      	mov	r4, r0
 800920a:	460d      	mov	r5, r1
 800920c:	d904      	bls.n	8009218 <_raise_r+0x14>
 800920e:	2316      	movs	r3, #22
 8009210:	6003      	str	r3, [r0, #0]
 8009212:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009216:	bd38      	pop	{r3, r4, r5, pc}
 8009218:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800921a:	b112      	cbz	r2, 8009222 <_raise_r+0x1e>
 800921c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009220:	b94b      	cbnz	r3, 8009236 <_raise_r+0x32>
 8009222:	4620      	mov	r0, r4
 8009224:	f000 f830 	bl	8009288 <_getpid_r>
 8009228:	462a      	mov	r2, r5
 800922a:	4601      	mov	r1, r0
 800922c:	4620      	mov	r0, r4
 800922e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009232:	f000 b817 	b.w	8009264 <_kill_r>
 8009236:	2b01      	cmp	r3, #1
 8009238:	d00a      	beq.n	8009250 <_raise_r+0x4c>
 800923a:	1c59      	adds	r1, r3, #1
 800923c:	d103      	bne.n	8009246 <_raise_r+0x42>
 800923e:	2316      	movs	r3, #22
 8009240:	6003      	str	r3, [r0, #0]
 8009242:	2001      	movs	r0, #1
 8009244:	e7e7      	b.n	8009216 <_raise_r+0x12>
 8009246:	2400      	movs	r4, #0
 8009248:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800924c:	4628      	mov	r0, r5
 800924e:	4798      	blx	r3
 8009250:	2000      	movs	r0, #0
 8009252:	e7e0      	b.n	8009216 <_raise_r+0x12>

08009254 <raise>:
 8009254:	4b02      	ldr	r3, [pc, #8]	; (8009260 <raise+0xc>)
 8009256:	4601      	mov	r1, r0
 8009258:	6818      	ldr	r0, [r3, #0]
 800925a:	f7ff bfd3 	b.w	8009204 <_raise_r>
 800925e:	bf00      	nop
 8009260:	20000120 	.word	0x20000120

08009264 <_kill_r>:
 8009264:	b538      	push	{r3, r4, r5, lr}
 8009266:	4d07      	ldr	r5, [pc, #28]	; (8009284 <_kill_r+0x20>)
 8009268:	2300      	movs	r3, #0
 800926a:	4604      	mov	r4, r0
 800926c:	4608      	mov	r0, r1
 800926e:	4611      	mov	r1, r2
 8009270:	602b      	str	r3, [r5, #0]
 8009272:	f7f7 fda3 	bl	8000dbc <_kill>
 8009276:	1c43      	adds	r3, r0, #1
 8009278:	d102      	bne.n	8009280 <_kill_r+0x1c>
 800927a:	682b      	ldr	r3, [r5, #0]
 800927c:	b103      	cbz	r3, 8009280 <_kill_r+0x1c>
 800927e:	6023      	str	r3, [r4, #0]
 8009280:	bd38      	pop	{r3, r4, r5, pc}
 8009282:	bf00      	nop
 8009284:	20000620 	.word	0x20000620

08009288 <_getpid_r>:
 8009288:	f7f7 bd90 	b.w	8000dac <_getpid>

0800928c <_malloc_usable_size_r>:
 800928c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009290:	1f18      	subs	r0, r3, #4
 8009292:	2b00      	cmp	r3, #0
 8009294:	bfbc      	itt	lt
 8009296:	580b      	ldrlt	r3, [r1, r0]
 8009298:	18c0      	addlt	r0, r0, r3
 800929a:	4770      	bx	lr

0800929c <__swhatbuf_r>:
 800929c:	b570      	push	{r4, r5, r6, lr}
 800929e:	460c      	mov	r4, r1
 80092a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a4:	2900      	cmp	r1, #0
 80092a6:	b096      	sub	sp, #88	; 0x58
 80092a8:	4615      	mov	r5, r2
 80092aa:	461e      	mov	r6, r3
 80092ac:	da0d      	bge.n	80092ca <__swhatbuf_r+0x2e>
 80092ae:	89a3      	ldrh	r3, [r4, #12]
 80092b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80092b4:	f04f 0100 	mov.w	r1, #0
 80092b8:	bf0c      	ite	eq
 80092ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80092be:	2340      	movne	r3, #64	; 0x40
 80092c0:	2000      	movs	r0, #0
 80092c2:	6031      	str	r1, [r6, #0]
 80092c4:	602b      	str	r3, [r5, #0]
 80092c6:	b016      	add	sp, #88	; 0x58
 80092c8:	bd70      	pop	{r4, r5, r6, pc}
 80092ca:	466a      	mov	r2, sp
 80092cc:	f000 f848 	bl	8009360 <_fstat_r>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	dbec      	blt.n	80092ae <__swhatbuf_r+0x12>
 80092d4:	9901      	ldr	r1, [sp, #4]
 80092d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80092da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80092de:	4259      	negs	r1, r3
 80092e0:	4159      	adcs	r1, r3
 80092e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092e6:	e7eb      	b.n	80092c0 <__swhatbuf_r+0x24>

080092e8 <__smakebuf_r>:
 80092e8:	898b      	ldrh	r3, [r1, #12]
 80092ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092ec:	079d      	lsls	r5, r3, #30
 80092ee:	4606      	mov	r6, r0
 80092f0:	460c      	mov	r4, r1
 80092f2:	d507      	bpl.n	8009304 <__smakebuf_r+0x1c>
 80092f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092f8:	6023      	str	r3, [r4, #0]
 80092fa:	6123      	str	r3, [r4, #16]
 80092fc:	2301      	movs	r3, #1
 80092fe:	6163      	str	r3, [r4, #20]
 8009300:	b002      	add	sp, #8
 8009302:	bd70      	pop	{r4, r5, r6, pc}
 8009304:	ab01      	add	r3, sp, #4
 8009306:	466a      	mov	r2, sp
 8009308:	f7ff ffc8 	bl	800929c <__swhatbuf_r>
 800930c:	9900      	ldr	r1, [sp, #0]
 800930e:	4605      	mov	r5, r0
 8009310:	4630      	mov	r0, r6
 8009312:	f7ff f8fb 	bl	800850c <_malloc_r>
 8009316:	b948      	cbnz	r0, 800932c <__smakebuf_r+0x44>
 8009318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800931c:	059a      	lsls	r2, r3, #22
 800931e:	d4ef      	bmi.n	8009300 <__smakebuf_r+0x18>
 8009320:	f023 0303 	bic.w	r3, r3, #3
 8009324:	f043 0302 	orr.w	r3, r3, #2
 8009328:	81a3      	strh	r3, [r4, #12]
 800932a:	e7e3      	b.n	80092f4 <__smakebuf_r+0xc>
 800932c:	89a3      	ldrh	r3, [r4, #12]
 800932e:	6020      	str	r0, [r4, #0]
 8009330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009334:	81a3      	strh	r3, [r4, #12]
 8009336:	9b00      	ldr	r3, [sp, #0]
 8009338:	6163      	str	r3, [r4, #20]
 800933a:	9b01      	ldr	r3, [sp, #4]
 800933c:	6120      	str	r0, [r4, #16]
 800933e:	b15b      	cbz	r3, 8009358 <__smakebuf_r+0x70>
 8009340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009344:	4630      	mov	r0, r6
 8009346:	f000 f81d 	bl	8009384 <_isatty_r>
 800934a:	b128      	cbz	r0, 8009358 <__smakebuf_r+0x70>
 800934c:	89a3      	ldrh	r3, [r4, #12]
 800934e:	f023 0303 	bic.w	r3, r3, #3
 8009352:	f043 0301 	orr.w	r3, r3, #1
 8009356:	81a3      	strh	r3, [r4, #12]
 8009358:	89a3      	ldrh	r3, [r4, #12]
 800935a:	431d      	orrs	r5, r3
 800935c:	81a5      	strh	r5, [r4, #12]
 800935e:	e7cf      	b.n	8009300 <__smakebuf_r+0x18>

08009360 <_fstat_r>:
 8009360:	b538      	push	{r3, r4, r5, lr}
 8009362:	4d07      	ldr	r5, [pc, #28]	; (8009380 <_fstat_r+0x20>)
 8009364:	2300      	movs	r3, #0
 8009366:	4604      	mov	r4, r0
 8009368:	4608      	mov	r0, r1
 800936a:	4611      	mov	r1, r2
 800936c:	602b      	str	r3, [r5, #0]
 800936e:	f7f7 fd84 	bl	8000e7a <_fstat>
 8009372:	1c43      	adds	r3, r0, #1
 8009374:	d102      	bne.n	800937c <_fstat_r+0x1c>
 8009376:	682b      	ldr	r3, [r5, #0]
 8009378:	b103      	cbz	r3, 800937c <_fstat_r+0x1c>
 800937a:	6023      	str	r3, [r4, #0]
 800937c:	bd38      	pop	{r3, r4, r5, pc}
 800937e:	bf00      	nop
 8009380:	20000620 	.word	0x20000620

08009384 <_isatty_r>:
 8009384:	b538      	push	{r3, r4, r5, lr}
 8009386:	4d06      	ldr	r5, [pc, #24]	; (80093a0 <_isatty_r+0x1c>)
 8009388:	2300      	movs	r3, #0
 800938a:	4604      	mov	r4, r0
 800938c:	4608      	mov	r0, r1
 800938e:	602b      	str	r3, [r5, #0]
 8009390:	f7f7 fd83 	bl	8000e9a <_isatty>
 8009394:	1c43      	adds	r3, r0, #1
 8009396:	d102      	bne.n	800939e <_isatty_r+0x1a>
 8009398:	682b      	ldr	r3, [r5, #0]
 800939a:	b103      	cbz	r3, 800939e <_isatty_r+0x1a>
 800939c:	6023      	str	r3, [r4, #0]
 800939e:	bd38      	pop	{r3, r4, r5, pc}
 80093a0:	20000620 	.word	0x20000620

080093a4 <_init>:
 80093a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a6:	bf00      	nop
 80093a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093aa:	bc08      	pop	{r3}
 80093ac:	469e      	mov	lr, r3
 80093ae:	4770      	bx	lr

080093b0 <_fini>:
 80093b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b2:	bf00      	nop
 80093b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093b6:	bc08      	pop	{r3}
 80093b8:	469e      	mov	lr, r3
 80093ba:	4770      	bx	lr
