
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096c0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  080098a0  080098a0  000198a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b20  08009b20  00020124  2**0
                  CONTENTS
  4 .ARM          00000008  08009b20  08009b20  00019b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b28  08009b28  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b28  08009b28  00019b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b2c  08009b2c  00019b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  08009b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000124  08009c54  00020124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  08009c54  00020630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001abb8  00000000  00000000  00020197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000383d  00000000  00000000  0003ad4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001630  00000000  00000000  0003e590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001121  00000000  00000000  0003fbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a50c  00000000  00000000  00040ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a8ab  00000000  00000000  0006b1ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011463f  00000000  00000000  00085a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006970  00000000  00000000  0019a0d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001a0a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000124 	.word	0x20000124
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009888 	.word	0x08009888

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000128 	.word	0x20000128
 800021c:	08009888 	.word	0x08009888

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	; 0x30
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2220      	movs	r2, #32
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f008 f88a 	bl	800871e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060a:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800060c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000610:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000612:	4b30      	ldr	r3, [pc, #192]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000614:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000618:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061a:	4b2e      	ldr	r3, [pc, #184]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000620:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000626:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000634:	2204      	movs	r2, #4
 8000636:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800063a:	2200      	movs	r2, #0
 800063c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800063e:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000646:	2201      	movs	r2, #1
 8000648:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800065a:	2200      	movs	r2, #0
 800065c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000666:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000668:	2200      	movs	r2, #0
 800066a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800066e:	2200      	movs	r2, #0
 8000670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000674:	4817      	ldr	r0, [pc, #92]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000676:	f001 fbf3 	bl	8001e60 <HAL_ADC_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000680:	f000 faae 	bl	8000be0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068c:	4619      	mov	r1, r3
 800068e:	4811      	ldr	r0, [pc, #68]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000690:	f002 fa0e 	bl	8002ab0 <HAL_ADCEx_MultiModeConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800069a:	f000 faa1 	bl	8000be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_ADC1_Init+0xec>)
 80006a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a2:	2306      	movs	r3, #6
 80006a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006aa:	237f      	movs	r3, #127	; 0x7f
 80006ac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ae:	2304      	movs	r3, #4
 80006b0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	4619      	mov	r1, r3
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <MX_ADC1_Init+0xe8>)
 80006bc:	f001 fd92 	bl	80021e4 <HAL_ADC_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006c6:	f000 fa8b 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	3730      	adds	r7, #48	; 0x30
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000140 	.word	0x20000140
 80006d8:	21800100 	.word	0x21800100

080006dc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2220      	movs	r2, #32
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f008 f818 	bl	800871e <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006ee:	4b2b      	ldr	r3, [pc, #172]	; (800079c <MX_ADC2_Init+0xc0>)
 80006f0:	4a2b      	ldr	r2, [pc, #172]	; (80007a0 <MX_ADC2_Init+0xc4>)
 80006f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f4:	4b29      	ldr	r3, [pc, #164]	; (800079c <MX_ADC2_Init+0xc0>)
 80006f6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006fa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006fc:	4b27      	ldr	r3, [pc, #156]	; (800079c <MX_ADC2_Init+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000702:	4b26      	ldr	r3, [pc, #152]	; (800079c <MX_ADC2_Init+0xc0>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <MX_ADC2_Init+0xc0>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <MX_ADC2_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000714:	4b21      	ldr	r3, [pc, #132]	; (800079c <MX_ADC2_Init+0xc0>)
 8000716:	2204      	movs	r2, #4
 8000718:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <MX_ADC2_Init+0xc0>)
 800071c:	2200      	movs	r2, #0
 800071e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <MX_ADC2_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_ADC2_Init+0xc0>)
 8000728:	2201      	movs	r2, #1
 800072a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_ADC2_Init+0xc0>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_ADC2_Init+0xc0>)
 800073c:	2200      	movs	r2, #0
 800073e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_ADC2_Init+0xc0>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_ADC2_Init+0xc0>)
 800074a:	2200      	movs	r2, #0
 800074c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_ADC2_Init+0xc0>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000756:	4811      	ldr	r0, [pc, #68]	; (800079c <MX_ADC2_Init+0xc0>)
 8000758:	f001 fb82 	bl	8001e60 <HAL_ADC_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000762:	f000 fa3d 	bl	8000be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_ADC2_Init+0xc8>)
 8000768:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076a:	2306      	movs	r3, #6
 800076c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000772:	237f      	movs	r3, #127	; 0x7f
 8000774:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000776:	2304      	movs	r3, #4
 8000778:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800077e:	463b      	mov	r3, r7
 8000780:	4619      	mov	r1, r3
 8000782:	4806      	ldr	r0, [pc, #24]	; (800079c <MX_ADC2_Init+0xc0>)
 8000784:	f001 fd2e 	bl	80021e4 <HAL_ADC_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800078e:	f000 fa27 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	3720      	adds	r7, #32
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200001ac 	.word	0x200001ac
 80007a0:	50000100 	.word	0x50000100
 80007a4:	19200040 	.word	0x19200040

080007a8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b0a4      	sub	sp, #144	; 0x90
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c4:	2254      	movs	r2, #84	; 0x54
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f007 ffa8 	bl	800871e <memset>
  if(adcHandle->Instance==ADC1)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007d6:	d174      	bne.n	80008c2 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007de:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007e8:	4618      	mov	r0, r3
 80007ea:	f003 fbe1 	bl	8003fb0 <HAL_RCCEx_PeriphCLKConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007f4:	f000 f9f4 	bl	8000be0 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007f8:	4b63      	ldr	r3, [pc, #396]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	4a62      	ldr	r2, [pc, #392]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 8000800:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000802:	4b61      	ldr	r3, [pc, #388]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d10b      	bne.n	8000822 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800080a:	4b60      	ldr	r3, [pc, #384]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a5f      	ldr	r2, [pc, #380]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000810:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b5d      	ldr	r3, [pc, #372]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
 8000820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b5a      	ldr	r3, [pc, #360]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a59      	ldr	r2, [pc, #356]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b57      	ldr	r3, [pc, #348]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	623b      	str	r3, [r7, #32]
 8000838:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b54      	ldr	r3, [pc, #336]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a53      	ldr	r2, [pc, #332]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b51      	ldr	r3, [pc, #324]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	61fb      	str	r3, [r7, #28]
 8000850:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b4e      	ldr	r3, [pc, #312]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a4d      	ldr	r2, [pc, #308]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b4b      	ldr	r3, [pc, #300]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	61bb      	str	r3, [r7, #24]
 8000868:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800086a:	2304      	movs	r3, #4
 800086c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086e:	2303      	movs	r3, #3
 8000870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800087e:	4619      	mov	r1, r3
 8000880:	4843      	ldr	r0, [pc, #268]	; (8000990 <HAL_ADC_MspInit+0x1e8>)
 8000882:	f002 fbbd 	bl	8003000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8000886:	2302      	movs	r3, #2
 8000888:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088a:	2303      	movs	r3, #3
 800088c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800089a:	4619      	mov	r1, r3
 800089c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a0:	f002 fbae 	bl	8003000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008a4:	2303      	movs	r3, #3
 80008a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a8:	2303      	movs	r3, #3
 80008aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008b8:	4619      	mov	r1, r3
 80008ba:	4836      	ldr	r0, [pc, #216]	; (8000994 <HAL_ADC_MspInit+0x1ec>)
 80008bc:	f002 fba0 	bl	8003000 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008c0:	e05e      	b.n	8000980 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a34      	ldr	r2, [pc, #208]	; (8000998 <HAL_ADC_MspInit+0x1f0>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d159      	bne.n	8000980 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008d2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 fb67 	bl	8003fb0 <HAL_RCCEx_PeriphCLKConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80008e8:	f000 f97a 	bl	8000be0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008ec:	4b26      	ldr	r3, [pc, #152]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	4a25      	ldr	r2, [pc, #148]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80008f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008f6:	4b24      	ldr	r3, [pc, #144]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d10b      	bne.n	8000916 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008fe:	4b23      	ldr	r3, [pc, #140]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a22      	ldr	r2, [pc, #136]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000904:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	4b1d      	ldr	r3, [pc, #116]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a1c      	ldr	r2, [pc, #112]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	4a16      	ldr	r2, [pc, #88]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000946:	230b      	movs	r3, #11
 8000948:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094a:	2303      	movs	r3, #3
 800094c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000956:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800095a:	4619      	mov	r1, r3
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <HAL_ADC_MspInit+0x1e8>)
 800095e:	f002 fb4f 	bl	8003000 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000962:	2301      	movs	r3, #1
 8000964:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000966:	2303      	movs	r3, #3
 8000968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000976:	4619      	mov	r1, r3
 8000978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097c:	f002 fb40 	bl	8003000 <HAL_GPIO_Init>
}
 8000980:	bf00      	nop
 8000982:	3790      	adds	r7, #144	; 0x90
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000218 	.word	0x20000218
 800098c:	40021000 	.word	0x40021000
 8000990:	48000800 	.word	0x48000800
 8000994:	48000400 	.word	0x48000400
 8000998:	50000100 	.word	0x50000100

0800099c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	4b3f      	ldr	r3, [pc, #252]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a3e      	ldr	r2, [pc, #248]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b3c      	ldr	r3, [pc, #240]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ca:	4b39      	ldr	r3, [pc, #228]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	4a38      	ldr	r2, [pc, #224]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009d0:	f043 0320 	orr.w	r3, r3, #32
 80009d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d6:	4b36      	ldr	r3, [pc, #216]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	f003 0320 	and.w	r3, r3, #32
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	4b33      	ldr	r3, [pc, #204]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4a32      	ldr	r2, [pc, #200]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ee:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	4a2c      	ldr	r2, [pc, #176]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a06:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4a26      	ldr	r2, [pc, #152]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2120      	movs	r1, #32
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a32:	f002 fc67 	bl	8003304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2104      	movs	r1, #4
 8000a3a:	481e      	ldr	r0, [pc, #120]	; (8000ab4 <MX_GPIO_Init+0x118>)
 8000a3c:	f002 fc62 	bl	8003304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4818      	ldr	r0, [pc, #96]	; (8000ab8 <MX_GPIO_Init+0x11c>)
 8000a58:	f002 fad2 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a76:	f002 fac3 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <MX_GPIO_Init+0x118>)
 8000a92:	f002 fab5 	bl	8003000 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2028      	movs	r0, #40	; 0x28
 8000a9c:	f002 f9c8 	bl	8002e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aa0:	2028      	movs	r0, #40	; 0x28
 8000aa2:	f002 f9df 	bl	8002e64 <HAL_NVIC_EnableIRQ>

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	48000c00 	.word	0x48000c00
 8000ab8:	48000800 	.word	0x48000800

08000abc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ac0:	f000 ff9b 	bl	80019fa <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ac4:	f000 f830 	bl	8000b28 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ac8:	f7ff ff68 	bl	800099c <MX_GPIO_Init>
	MX_ADC2_Init();
 8000acc:	f7ff fe06 	bl	80006dc <MX_ADC2_Init>
	MX_ADC1_Init();
 8000ad0:	f7ff fd8c 	bl	80005ec <MX_ADC1_Init>
	MX_TIM1_Init();
 8000ad4:	f000 fa44 	bl	8000f60 <MX_TIM1_Init>
	MX_TIM3_Init();
 8000ad8:	f000 fb0a 	bl	80010f0 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 8000adc:	f000 fc3e 	bl	800135c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8000ae0:	f000 fc88 	bl	80013f4 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	Shell_Init();
 8000ae4:	f000 fe02 	bl	80016ec <Shell_Init>
	//	Motor_Init();
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ae8:	2100      	movs	r1, #0
 8000aea:	480e      	ldr	r0, [pc, #56]	; (8000b24 <main+0x68>)
 8000aec:	f003 fde0 	bl	80046b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000af0:	2104      	movs	r1, #4
 8000af2:	480c      	ldr	r0, [pc, #48]	; (8000b24 <main+0x68>)
 8000af4:	f003 fddc 	bl	80046b0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000af8:	2100      	movs	r1, #0
 8000afa:	480a      	ldr	r0, [pc, #40]	; (8000b24 <main+0x68>)
 8000afc:	f005 f90e 	bl	8005d1c <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000b00:	2104      	movs	r1, #4
 8000b02:	4808      	ldr	r0, [pc, #32]	; (8000b24 <main+0x68>)
 8000b04:	f005 f90a 	bl	8005d1c <HAL_TIMEx_PWMN_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 600);
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <main+0x68>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000b10:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 423);
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <main+0x68>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f240 12a7 	movw	r2, #423	; 0x1a7
 8000b1a:	639a      	str	r2, [r3, #56]	; 0x38

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 8000b1c:	f000 fe26 	bl	800176c <Shell_Loop>
 8000b20:	e7fc      	b.n	8000b1c <main+0x60>
 8000b22:	bf00      	nop
 8000b24:	2000026c 	.word	0x2000026c

08000b28 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b094      	sub	sp, #80	; 0x50
 8000b2c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2e:	f107 0318 	add.w	r3, r7, #24
 8000b32:	2238      	movs	r2, #56	; 0x38
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f007 fdf1 	bl	800871e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f002 fc16 	bl	800337c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b58:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000b62:	2306      	movs	r3, #6
 8000b64:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000b66:	2355      	movs	r3, #85	; 0x55
 8000b68:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b72:	2302      	movs	r3, #2
 8000b74:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b76:	f107 0318 	add.w	r3, r7, #24
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f002 fcb2 	bl	80034e4 <HAL_RCC_OscConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0x62>
	{
		Error_Handler();
 8000b86:	f000 f82b 	bl	8000be0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8a:	230f      	movs	r3, #15
 8000b8c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2104      	movs	r1, #4
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f002 ffb6 	bl	8003b14 <HAL_RCC_ClockConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8000bae:	f000 f817 	bl	8000be0 <Error_Handler>
	}
}
 8000bb2:	bf00      	nop
 8000bb4:	3750      	adds	r7, #80	; 0x50
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d101      	bne.n	8000bd2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000bce:	f000 ff2d 	bl	8001a2c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40001000 	.word	0x40001000

08000be0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000be8:	e7fe      	b.n	8000be8 <Error_Handler+0x8>
	...

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <HAL_MspInit+0x44>)
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf6:	4a0e      	ldr	r2, [pc, #56]	; (8000c30 <HAL_MspInit+0x44>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6613      	str	r3, [r2, #96]	; 0x60
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <HAL_MspInit+0x44>)
 8000c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <HAL_MspInit+0x44>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0e:	4a08      	ldr	r2, [pc, #32]	; (8000c30 <HAL_MspInit+0x44>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c14:	6593      	str	r3, [r2, #88]	; 0x58
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_MspInit+0x44>)
 8000c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c22:	f002 fc4f 	bl	80034c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40021000 	.word	0x40021000

08000c34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08c      	sub	sp, #48	; 0x30
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c44:	4b2c      	ldr	r3, [pc, #176]	; (8000cf8 <HAL_InitTick+0xc4>)
 8000c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c48:	4a2b      	ldr	r2, [pc, #172]	; (8000cf8 <HAL_InitTick+0xc4>)
 8000c4a:	f043 0310 	orr.w	r3, r3, #16
 8000c4e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c50:	4b29      	ldr	r3, [pc, #164]	; (8000cf8 <HAL_InitTick+0xc4>)
 8000c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c54:	f003 0310 	and.w	r3, r3, #16
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c5c:	f107 020c 	add.w	r2, r7, #12
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	4611      	mov	r1, r2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f003 f92a 	bl	8003ec0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c6c:	f003 f8fc 	bl	8003e68 <HAL_RCC_GetPCLK1Freq>
 8000c70:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c74:	4a21      	ldr	r2, [pc, #132]	; (8000cfc <HAL_InitTick+0xc8>)
 8000c76:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7a:	0c9b      	lsrs	r3, r3, #18
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <HAL_InitTick+0xcc>)
 8000c82:	4a20      	ldr	r2, [pc, #128]	; (8000d04 <HAL_InitTick+0xd0>)
 8000c84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c86:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <HAL_InitTick+0xcc>)
 8000c88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c8c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c8e:	4a1c      	ldr	r2, [pc, #112]	; (8000d00 <HAL_InitTick+0xcc>)
 8000c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c92:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <HAL_InitTick+0xcc>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_InitTick+0xcc>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000ca0:	4817      	ldr	r0, [pc, #92]	; (8000d00 <HAL_InitTick+0xcc>)
 8000ca2:	f003 fbd3 	bl	800444c <HAL_TIM_Base_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000cac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d11b      	bne.n	8000cec <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cb4:	4812      	ldr	r0, [pc, #72]	; (8000d00 <HAL_InitTick+0xcc>)
 8000cb6:	f003 fc21 	bl	80044fc <HAL_TIM_Base_Start_IT>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000cc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d111      	bne.n	8000cec <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc8:	2036      	movs	r0, #54	; 0x36
 8000cca:	f002 f8cb 	bl	8002e64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d808      	bhi.n	8000ce6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	2036      	movs	r0, #54	; 0x36
 8000cda:	f002 f8a9 	bl	8002e30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <HAL_InitTick+0xd4>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6013      	str	r3, [r2, #0]
 8000ce4:	e002      	b.n	8000cec <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3730      	adds	r7, #48	; 0x30
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	431bde83 	.word	0x431bde83
 8000d00:	2000021c 	.word	0x2000021c
 8000d04:	40001000 	.word	0x40001000
 8000d08:	200000c0 	.word	0x200000c0

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <NMI_Handler+0x4>

08000d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <MemManage_Handler+0x4>

08000d1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <USART2_IRQHandler+0x10>)
 8000d6a:	f005 fbe7 	bl	800653c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000304 	.word	0x20000304

08000d78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <USART3_IRQHandler+0x10>)
 8000d7e:	f005 fbdd 	bl	800653c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000394 	.word	0x20000394

08000d8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000d90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d94:	f002 face 	bl	8003334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <TIM6_DAC_IRQHandler+0x10>)
 8000da2:	f003 fe33 	bl	8004a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2000021c 	.word	0x2000021c

08000db0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return 1;
 8000db4:	2301      	movs	r3, #1
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <_kill>:

int _kill(int pid, int sig)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000dca:	f007 fd53 	bl	8008874 <__errno>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2216      	movs	r2, #22
 8000dd2:	601a      	str	r2, [r3, #0]
  return -1;
 8000dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <_exit>:

void _exit (int status)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ffe7 	bl	8000dc0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000df2:	e7fe      	b.n	8000df2 <_exit+0x12>

08000df4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	e00a      	b.n	8000e1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e06:	f3af 8000 	nop.w
 8000e0a:	4601      	mov	r1, r0
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	60ba      	str	r2, [r7, #8]
 8000e12:	b2ca      	uxtb	r2, r1
 8000e14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	697a      	ldr	r2, [r7, #20]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	dbf0      	blt.n	8000e06 <_read+0x12>
  }

  return len;
 8000e24:	687b      	ldr	r3, [r7, #4]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b086      	sub	sp, #24
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	60f8      	str	r0, [r7, #12]
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
 8000e3e:	e009      	b.n	8000e54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	1c5a      	adds	r2, r3, #1
 8000e44:	60ba      	str	r2, [r7, #8]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	3301      	adds	r3, #1
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	697a      	ldr	r2, [r7, #20]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	dbf1      	blt.n	8000e40 <_write+0x12>
  }
  return len;
 8000e5c:	687b      	ldr	r3, [r7, #4]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <_close>:

int _close(int file)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
 8000e86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e8e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <_isatty>:

int _isatty(int file)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ea6:	2301      	movs	r3, #1
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed8:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <_sbrk+0x5c>)
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <_sbrk+0x60>)
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d102      	bne.n	8000ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <_sbrk+0x64>)
 8000eee:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <_sbrk+0x68>)
 8000ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d207      	bcs.n	8000f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f00:	f007 fcb8 	bl	8008874 <__errno>
 8000f04:	4603      	mov	r3, r0
 8000f06:	220c      	movs	r2, #12
 8000f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f0e:	e009      	b.n	8000f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f16:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <_sbrk+0x64>)
 8000f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f22:	68fb      	ldr	r3, [r7, #12]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20020000 	.word	0x20020000
 8000f30:	00000400 	.word	0x00000400
 8000f34:	20000268 	.word	0x20000268
 8000f38:	20000630 	.word	0x20000630

08000f3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <SystemInit+0x20>)
 8000f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f46:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <SystemInit+0x20>)
 8000f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b09c      	sub	sp, #112	; 0x70
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f66:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
 8000f90:	615a      	str	r2, [r3, #20]
 8000f92:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	2234      	movs	r2, #52	; 0x34
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f007 fbbf 	bl	800871e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fa0:	4b51      	ldr	r3, [pc, #324]	; (80010e8 <MX_TIM1_Init+0x188>)
 8000fa2:	4a52      	ldr	r2, [pc, #328]	; (80010ec <MX_TIM1_Init+0x18c>)
 8000fa4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9-1;
 8000fa6:	4b50      	ldr	r3, [pc, #320]	; (80010e8 <MX_TIM1_Init+0x188>)
 8000fa8:	2208      	movs	r2, #8
 8000faa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000fac:	4b4e      	ldr	r3, [pc, #312]	; (80010e8 <MX_TIM1_Init+0x188>)
 8000fae:	2220      	movs	r2, #32
 8000fb0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8000fb2:	4b4d      	ldr	r3, [pc, #308]	; (80010e8 <MX_TIM1_Init+0x188>)
 8000fb4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000fb8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fba:	4b4b      	ldr	r3, [pc, #300]	; (80010e8 <MX_TIM1_Init+0x188>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fc0:	4b49      	ldr	r3, [pc, #292]	; (80010e8 <MX_TIM1_Init+0x188>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc6:	4b48      	ldr	r3, [pc, #288]	; (80010e8 <MX_TIM1_Init+0x188>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fcc:	4846      	ldr	r0, [pc, #280]	; (80010e8 <MX_TIM1_Init+0x188>)
 8000fce:	f003 fa3d 	bl	800444c <HAL_TIM_Base_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000fd8:	f7ff fe02 	bl	8000be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fe2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	483f      	ldr	r0, [pc, #252]	; (80010e8 <MX_TIM1_Init+0x188>)
 8000fea:	f003 ffa3 	bl	8004f34 <HAL_TIM_ConfigClockSource>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ff4:	f7ff fdf4 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ff8:	483b      	ldr	r0, [pc, #236]	; (80010e8 <MX_TIM1_Init+0x188>)
 8000ffa:	f003 faf7 	bl	80045ec <HAL_TIM_PWM_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001004:	f7ff fdec 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001008:	2300      	movs	r3, #0
 800100a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800100c:	2300      	movs	r3, #0
 800100e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001014:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001018:	4619      	mov	r1, r3
 800101a:	4833      	ldr	r0, [pc, #204]	; (80010e8 <MX_TIM1_Init+0x188>)
 800101c:	f004 ff9e 	bl	8005f5c <HAL_TIMEx_MasterConfigSynchronization>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001026:	f7ff fddb 	bl	8000be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800102a:	2360      	movs	r3, #96	; 0x60
 800102c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001032:	2300      	movs	r3, #0
 8001034:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001036:	2300      	movs	r3, #0
 8001038:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800103e:	2300      	movs	r3, #0
 8001040:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001042:	2300      	movs	r3, #0
 8001044:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001046:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	4826      	ldr	r0, [pc, #152]	; (80010e8 <MX_TIM1_Init+0x188>)
 8001050:	f003 fe5c 	bl	8004d0c <HAL_TIM_PWM_ConfigChannel>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800105a:	f7ff fdc1 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800105e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001062:	2204      	movs	r2, #4
 8001064:	4619      	mov	r1, r3
 8001066:	4820      	ldr	r0, [pc, #128]	; (80010e8 <MX_TIM1_Init+0x188>)
 8001068:	f003 fe50 	bl	8004d0c <HAL_TIM_PWM_ConfigChannel>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001072:	f7ff fdb5 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001076:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800107a:	2208      	movs	r2, #8
 800107c:	4619      	mov	r1, r3
 800107e:	481a      	ldr	r0, [pc, #104]	; (80010e8 <MX_TIM1_Init+0x188>)
 8001080:	f003 fe44 	bl	8004d0c <HAL_TIM_PWM_ConfigChannel>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800108a:	f7ff fda9 	bl	8000be0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 800109a:	2364      	movs	r3, #100	; 0x64
 800109c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80010be:	2300      	movs	r3, #0
 80010c0:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	4807      	ldr	r0, [pc, #28]	; (80010e8 <MX_TIM1_Init+0x188>)
 80010cc:	f004 ffdc 	bl	8006088 <HAL_TIMEx_ConfigBreakDeadTime>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80010d6:	f7ff fd83 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010da:	4803      	ldr	r0, [pc, #12]	; (80010e8 <MX_TIM1_Init+0x188>)
 80010dc:	f000 f8d6 	bl	800128c <HAL_TIM_MspPostInit>

}
 80010e0:	bf00      	nop
 80010e2:	3770      	adds	r7, #112	; 0x70
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2000026c 	.word	0x2000026c
 80010ec:	40012c00 	.word	0x40012c00

080010f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800110e:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <MX_TIM3_Init+0x90>)
 8001110:	4a1c      	ldr	r2, [pc, #112]	; (8001184 <MX_TIM3_Init+0x94>)
 8001112:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001114:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <MX_TIM3_Init+0x90>)
 8001116:	2200      	movs	r2, #0
 8001118:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <MX_TIM3_Init+0x90>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001120:	4b17      	ldr	r3, [pc, #92]	; (8001180 <MX_TIM3_Init+0x90>)
 8001122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001126:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <MX_TIM3_Init+0x90>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <MX_TIM3_Init+0x90>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	4619      	mov	r1, r3
 800114a:	480d      	ldr	r0, [pc, #52]	; (8001180 <MX_TIM3_Init+0x90>)
 800114c:	f004 fd37 	bl	8005bbe <HAL_TIMEx_HallSensor_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001156:	f7ff fd43 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800115a:	2350      	movs	r3, #80	; 0x50
 800115c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	4619      	mov	r1, r3
 8001166:	4806      	ldr	r0, [pc, #24]	; (8001180 <MX_TIM3_Init+0x90>)
 8001168:	f004 fef8 	bl	8005f5c <HAL_TIMEx_MasterConfigSynchronization>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001172:	f7ff fd35 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	3720      	adds	r7, #32
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200002b8 	.word	0x200002b8
 8001184:	40000400 	.word	0x40000400

08001188 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <HAL_TIM_Base_MspInit+0x38>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d10b      	bne.n	80011b2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_TIM_Base_MspInit+0x3c>)
 800119c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119e:	4a09      	ldr	r2, [pc, #36]	; (80011c4 <HAL_TIM_Base_MspInit+0x3c>)
 80011a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011a4:	6613      	str	r3, [r2, #96]	; 0x60
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <HAL_TIM_Base_MspInit+0x3c>)
 80011a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40012c00 	.word	0x40012c00
 80011c4:	40021000 	.word	0x40021000

080011c8 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a26      	ldr	r2, [pc, #152]	; (8001280 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d145      	bne.n	8001276 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	4a25      	ldr	r2, [pc, #148]	; (8001284 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	6593      	str	r3, [r2, #88]	; 0x58
 80011f6:	4b23      	ldr	r3, [pc, #140]	; (8001284 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b20      	ldr	r3, [pc, #128]	; (8001284 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	4a1f      	ldr	r2, [pc, #124]	; (8001284 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120e:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	4a19      	ldr	r2, [pc, #100]	; (8001284 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001226:	4b17      	ldr	r3, [pc, #92]	; (8001284 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001232:	2350      	movs	r3, #80	; 0x50
 8001234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001242:	2302      	movs	r3, #2
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001250:	f001 fed6 	bl	8003000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001254:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001266:	2302      	movs	r3, #2
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001272:	f001 fec5 	bl	8003000 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001276:	bf00      	nop
 8001278:	3728      	adds	r7, #40	; 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40000400 	.word	0x40000400
 8001284:	40021000 	.word	0x40021000
 8001288:	48000800 	.word	0x48000800

0800128c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a29      	ldr	r2, [pc, #164]	; (8001350 <HAL_TIM_MspPostInit+0xc4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d14b      	bne.n	8001346 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	4b29      	ldr	r3, [pc, #164]	; (8001354 <HAL_TIM_MspPostInit+0xc8>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	4a28      	ldr	r2, [pc, #160]	; (8001354 <HAL_TIM_MspPostInit+0xc8>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <HAL_TIM_MspPostInit+0xc8>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	4b23      	ldr	r3, [pc, #140]	; (8001354 <HAL_TIM_MspPostInit+0xc8>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	4a22      	ldr	r2, [pc, #136]	; (8001354 <HAL_TIM_MspPostInit+0xc8>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <HAL_TIM_MspPostInit+0xc8>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 80012de:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80012e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80012f0:	2306      	movs	r3, #6
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4817      	ldr	r0, [pc, #92]	; (8001358 <HAL_TIM_MspPostInit+0xcc>)
 80012fc:	f001 fe80 	bl	8003000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001300:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001312:	2304      	movs	r3, #4
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4619      	mov	r1, r3
 800131c:	480e      	ldr	r0, [pc, #56]	; (8001358 <HAL_TIM_MspPostInit+0xcc>)
 800131e:	f001 fe6f 	bl	8003000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001322:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001334:	2306      	movs	r3, #6
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001342:	f001 fe5d 	bl	8003000 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001346:	bf00      	nop
 8001348:	3728      	adds	r7, #40	; 0x28
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40012c00 	.word	0x40012c00
 8001354:	40021000 	.word	0x40021000
 8001358:	48000400 	.word	0x48000400

0800135c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001360:	4b22      	ldr	r3, [pc, #136]	; (80013ec <MX_USART2_UART_Init+0x90>)
 8001362:	4a23      	ldr	r2, [pc, #140]	; (80013f0 <MX_USART2_UART_Init+0x94>)
 8001364:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001366:	4b21      	ldr	r3, [pc, #132]	; (80013ec <MX_USART2_UART_Init+0x90>)
 8001368:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800136c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800136e:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <MX_USART2_UART_Init+0x90>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <MX_USART2_UART_Init+0x90>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_USART2_UART_Init+0x90>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_USART2_UART_Init+0x90>)
 8001382:	220c      	movs	r2, #12
 8001384:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <MX_USART2_UART_Init+0x90>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_USART2_UART_Init+0x90>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <MX_USART2_UART_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_USART2_UART_Init+0x90>)
 800139a:	2200      	movs	r2, #0
 800139c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <MX_USART2_UART_Init+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013a4:	4811      	ldr	r0, [pc, #68]	; (80013ec <MX_USART2_UART_Init+0x90>)
 80013a6:	f004 ff8c 	bl	80062c2 <HAL_UART_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013b0:	f7ff fc16 	bl	8000be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b4:	2100      	movs	r1, #0
 80013b6:	480d      	ldr	r0, [pc, #52]	; (80013ec <MX_USART2_UART_Init+0x90>)
 80013b8:	f006 ff2f 	bl	800821a <HAL_UARTEx_SetTxFifoThreshold>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80013c2:	f7ff fc0d 	bl	8000be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c6:	2100      	movs	r1, #0
 80013c8:	4808      	ldr	r0, [pc, #32]	; (80013ec <MX_USART2_UART_Init+0x90>)
 80013ca:	f006 ff64 	bl	8008296 <HAL_UARTEx_SetRxFifoThreshold>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80013d4:	f7ff fc04 	bl	8000be0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	; (80013ec <MX_USART2_UART_Init+0x90>)
 80013da:	f006 fee5 	bl	80081a8 <HAL_UARTEx_DisableFifoMode>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80013e4:	f7ff fbfc 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000304 	.word	0x20000304
 80013f0:	40004400 	.word	0x40004400

080013f4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013f8:	4b22      	ldr	r3, [pc, #136]	; (8001484 <MX_USART3_UART_Init+0x90>)
 80013fa:	4a23      	ldr	r2, [pc, #140]	; (8001488 <MX_USART3_UART_Init+0x94>)
 80013fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <MX_USART3_UART_Init+0x90>)
 8001400:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001404:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <MX_USART3_UART_Init+0x90>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <MX_USART3_UART_Init+0x90>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001412:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <MX_USART3_UART_Init+0x90>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <MX_USART3_UART_Init+0x90>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b19      	ldr	r3, [pc, #100]	; (8001484 <MX_USART3_UART_Init+0x90>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b17      	ldr	r3, [pc, #92]	; (8001484 <MX_USART3_UART_Init+0x90>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800142a:	4b16      	ldr	r3, [pc, #88]	; (8001484 <MX_USART3_UART_Init+0x90>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <MX_USART3_UART_Init+0x90>)
 8001432:	2200      	movs	r2, #0
 8001434:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001436:	4b13      	ldr	r3, [pc, #76]	; (8001484 <MX_USART3_UART_Init+0x90>)
 8001438:	2200      	movs	r2, #0
 800143a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800143c:	4811      	ldr	r0, [pc, #68]	; (8001484 <MX_USART3_UART_Init+0x90>)
 800143e:	f004 ff40 	bl	80062c2 <HAL_UART_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001448:	f7ff fbca 	bl	8000be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800144c:	2100      	movs	r1, #0
 800144e:	480d      	ldr	r0, [pc, #52]	; (8001484 <MX_USART3_UART_Init+0x90>)
 8001450:	f006 fee3 	bl	800821a <HAL_UARTEx_SetTxFifoThreshold>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800145a:	f7ff fbc1 	bl	8000be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800145e:	2100      	movs	r1, #0
 8001460:	4808      	ldr	r0, [pc, #32]	; (8001484 <MX_USART3_UART_Init+0x90>)
 8001462:	f006 ff18 	bl	8008296 <HAL_UARTEx_SetRxFifoThreshold>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800146c:	f7ff fbb8 	bl	8000be0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_USART3_UART_Init+0x90>)
 8001472:	f006 fe99 	bl	80081a8 <HAL_UARTEx_DisableFifoMode>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800147c:	f7ff fbb0 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000394 	.word	0x20000394
 8001488:	40004800 	.word	0x40004800

0800148c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b0a0      	sub	sp, #128	; 0x80
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a4:	f107 0318 	add.w	r3, r7, #24
 80014a8:	2254      	movs	r2, #84	; 0x54
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f007 f936 	bl	800871e <memset>
  if(uartHandle->Instance==USART2)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a45      	ldr	r2, [pc, #276]	; (80015cc <HAL_UART_MspInit+0x140>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d13f      	bne.n	800153c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014bc:	2302      	movs	r3, #2
 80014be:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c4:	f107 0318 	add.w	r3, r7, #24
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 fd71 	bl	8003fb0 <HAL_RCCEx_PeriphCLKConfig>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014d4:	f7ff fb84 	bl	8000be0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014d8:	4b3d      	ldr	r3, [pc, #244]	; (80015d0 <HAL_UART_MspInit+0x144>)
 80014da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014dc:	4a3c      	ldr	r2, [pc, #240]	; (80015d0 <HAL_UART_MspInit+0x144>)
 80014de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e2:	6593      	str	r3, [r2, #88]	; 0x58
 80014e4:	4b3a      	ldr	r3, [pc, #232]	; (80015d0 <HAL_UART_MspInit+0x144>)
 80014e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f0:	4b37      	ldr	r3, [pc, #220]	; (80015d0 <HAL_UART_MspInit+0x144>)
 80014f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f4:	4a36      	ldr	r2, [pc, #216]	; (80015d0 <HAL_UART_MspInit+0x144>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fc:	4b34      	ldr	r3, [pc, #208]	; (80015d0 <HAL_UART_MspInit+0x144>)
 80014fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001508:	230c      	movs	r3, #12
 800150a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001518:	2307      	movs	r3, #7
 800151a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001520:	4619      	mov	r1, r3
 8001522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001526:	f001 fd6b 	bl	8003000 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	2026      	movs	r0, #38	; 0x26
 8001530:	f001 fc7e 	bl	8002e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001534:	2026      	movs	r0, #38	; 0x26
 8001536:	f001 fc95 	bl	8002e64 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800153a:	e043      	b.n	80015c4 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a24      	ldr	r2, [pc, #144]	; (80015d4 <HAL_UART_MspInit+0x148>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d13e      	bne.n	80015c4 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001546:	2304      	movs	r3, #4
 8001548:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800154e:	f107 0318 	add.w	r3, r7, #24
 8001552:	4618      	mov	r0, r3
 8001554:	f002 fd2c 	bl	8003fb0 <HAL_RCCEx_PeriphCLKConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800155e:	f7ff fb3f 	bl	8000be0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001562:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <HAL_UART_MspInit+0x144>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001566:	4a1a      	ldr	r2, [pc, #104]	; (80015d0 <HAL_UART_MspInit+0x144>)
 8001568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800156c:	6593      	str	r3, [r2, #88]	; 0x58
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <HAL_UART_MspInit+0x144>)
 8001570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <HAL_UART_MspInit+0x144>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <HAL_UART_MspInit+0x144>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_UART_MspInit+0x144>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001592:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001596:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015a4:	2307      	movs	r3, #7
 80015a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015ac:	4619      	mov	r1, r3
 80015ae:	480a      	ldr	r0, [pc, #40]	; (80015d8 <HAL_UART_MspInit+0x14c>)
 80015b0:	f001 fd26 	bl	8003000 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2100      	movs	r1, #0
 80015b8:	2027      	movs	r0, #39	; 0x27
 80015ba:	f001 fc39 	bl	8002e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015be:	2027      	movs	r0, #39	; 0x27
 80015c0:	f001 fc50 	bl	8002e64 <HAL_NVIC_EnableIRQ>
}
 80015c4:	bf00      	nop
 80015c6:	3780      	adds	r7, #128	; 0x80
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40004400 	.word	0x40004400
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40004800 	.word	0x40004800
 80015d8:	48000800 	.word	0x48000800

080015dc <Motor_Init>:

extern TIM_HandleTypeDef htim1;

#define PWM_MAX 1023

void Motor_Init(void){
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	HAL_TIMEx_ConfigBreakDeadTime(&htim1, 100);
 80015e0:	2164      	movs	r1, #100	; 0x64
 80015e2:	480c      	ldr	r0, [pc, #48]	; (8001614 <Motor_Init+0x38>)
 80015e4:	f004 fd50 	bl	8006088 <HAL_TIMEx_ConfigBreakDeadTime>
	Motor_Set_Speed_Instant(512);
 80015e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015ec:	f000 f82e 	bl	800164c <Motor_Set_Speed_Instant>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80015f0:	2100      	movs	r1, #0
 80015f2:	4808      	ldr	r0, [pc, #32]	; (8001614 <Motor_Init+0x38>)
 80015f4:	f003 f85c 	bl	80046b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80015f8:	2104      	movs	r1, #4
 80015fa:	4806      	ldr	r0, [pc, #24]	; (8001614 <Motor_Init+0x38>)
 80015fc:	f003 f858 	bl	80046b0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001600:	2100      	movs	r1, #0
 8001602:	4804      	ldr	r0, [pc, #16]	; (8001614 <Motor_Init+0x38>)
 8001604:	f004 fb8a 	bl	8005d1c <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001608:	2104      	movs	r1, #4
 800160a:	4802      	ldr	r0, [pc, #8]	; (8001614 <Motor_Init+0x38>)
 800160c:	f004 fb86 	bl	8005d1c <HAL_TIMEx_PWMN_Start>
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	2000026c 	.word	0x2000026c

08001618 <Motor_DeInit>:

void Motor_DeInit(void){
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800161c:	2100      	movs	r1, #0
 800161e:	480a      	ldr	r0, [pc, #40]	; (8001648 <Motor_DeInit+0x30>)
 8001620:	f003 f958 	bl	80048d4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001624:	2104      	movs	r1, #4
 8001626:	4808      	ldr	r0, [pc, #32]	; (8001648 <Motor_DeInit+0x30>)
 8001628:	f003 f954 	bl	80048d4 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800162c:	2100      	movs	r1, #0
 800162e:	4806      	ldr	r0, [pc, #24]	; (8001648 <Motor_DeInit+0x30>)
 8001630:	f004 fc36 	bl	8005ea0 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001634:	2104      	movs	r1, #4
 8001636:	4804      	ldr	r0, [pc, #16]	; (8001648 <Motor_DeInit+0x30>)
 8001638:	f004 fc32 	bl	8005ea0 <HAL_TIMEx_PWMN_Stop>
	Motor_Set_Speed(512);
 800163c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001640:	f000 f820 	bl	8001684 <Motor_Set_Speed>
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	2000026c 	.word	0x2000026c

0800164c <Motor_Set_Speed_Instant>:

void Motor_Set_Speed_Instant(int speed){
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	int alpha, nalpha;
	alpha = speed;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	60fb      	str	r3, [r7, #12]
	nalpha = PWM_MAX - speed;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 800165e:	3303      	adds	r3, #3
 8001660:	60bb      	str	r3, [r7, #8]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, alpha);
 8001662:	4b07      	ldr	r3, [pc, #28]	; (8001680 <Motor_Set_Speed_Instant+0x34>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, nalpha);
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <Motor_Set_Speed_Instant+0x34>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	2000026c 	.word	0x2000026c

08001684 <Motor_Set_Speed>:

void Motor_Set_Speed(int target){
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	int speed = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1);
 800168c:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <Motor_Set_Speed+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001692:	617b      	str	r3, [r7, #20]
	int alpha, nalpha;
	while(target != speed){
 8001694:	e01f      	b.n	80016d6 <Motor_Set_Speed+0x52>
		if(speed < target) speed++;
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	429a      	cmp	r2, r3
 800169c:	da02      	bge.n	80016a4 <Motor_Set_Speed+0x20>
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
		if(speed > target) speed--;
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	dd02      	ble.n	80016b2 <Motor_Set_Speed+0x2e>
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	617b      	str	r3, [r7, #20]
		alpha = speed;
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	613b      	str	r3, [r7, #16]
		nalpha = PWM_MAX - speed;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80016bc:	3303      	adds	r3, #3
 80016be:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, alpha);
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <Motor_Set_Speed+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, nalpha);
 80016c8:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <Motor_Set_Speed+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(10);
 80016d0:	200a      	movs	r0, #10
 80016d2:	f000 f9c9 	bl	8001a68 <HAL_Delay>
	while(target != speed){
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d1db      	bne.n	8001696 <Motor_Set_Speed+0x12>
	}
}
 80016de:	bf00      	nop
 80016e0:	bf00      	nop
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	2000026c 	.word	0x2000026c

080016ec <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 80016f0:	2224      	movs	r2, #36	; 0x24
 80016f2:	2100      	movs	r1, #0
 80016f4:	4816      	ldr	r0, [pc, #88]	; (8001750 <Shell_Init+0x64>)
 80016f6:	f007 f812 	bl	800871e <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 80016fa:	2240      	movs	r2, #64	; 0x40
 80016fc:	2100      	movs	r1, #0
 80016fe:	4815      	ldr	r0, [pc, #84]	; (8001754 <Shell_Init+0x68>)
 8001700:	f007 f80d 	bl	800871e <memset>
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <Shell_Init+0x6c>)
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 800170a:	2240      	movs	r2, #64	; 0x40
 800170c:	2100      	movs	r1, #0
 800170e:	4813      	ldr	r0, [pc, #76]	; (800175c <Shell_Init+0x70>)
 8001710:	f007 f805 	bl	800871e <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001714:	2201      	movs	r2, #1
 8001716:	4910      	ldr	r1, [pc, #64]	; (8001758 <Shell_Init+0x6c>)
 8001718:	4811      	ldr	r0, [pc, #68]	; (8001760 <Shell_Init+0x74>)
 800171a:	f004 feb9 	bl	8006490 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 800171e:	4811      	ldr	r0, [pc, #68]	; (8001764 <Shell_Init+0x78>)
 8001720:	f7fe fd88 	bl	8000234 <strlen>
 8001724:	4603      	mov	r3, r0
 8001726:	b29a      	uxth	r2, r3
 8001728:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800172c:	490d      	ldr	r1, [pc, #52]	; (8001764 <Shell_Init+0x78>)
 800172e:	480c      	ldr	r0, [pc, #48]	; (8001760 <Shell_Init+0x74>)
 8001730:	f004 fe17 	bl	8006362 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8001734:	480c      	ldr	r0, [pc, #48]	; (8001768 <Shell_Init+0x7c>)
 8001736:	f7fe fd7d 	bl	8000234 <strlen>
 800173a:	4603      	mov	r3, r0
 800173c:	b29a      	uxth	r2, r3
 800173e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001742:	4909      	ldr	r1, [pc, #36]	; (8001768 <Shell_Init+0x7c>)
 8001744:	4806      	ldr	r0, [pc, #24]	; (8001760 <Shell_Init+0x74>)
 8001746:	f004 fe0c 	bl	8006362 <HAL_UART_Transmit>
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200004b0 	.word	0x200004b0
 8001754:	2000046c 	.word	0x2000046c
 8001758:	20000428 	.word	0x20000428
 800175c:	2000042c 	.word	0x2000042c
 8001760:	20000304 	.word	0x20000304
 8001764:	20000020 	.word	0x20000020
 8001768:	20000004 	.word	0x20000004

0800176c <Shell_Loop>:

void Shell_Loop(void){
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 8001772:	4b6c      	ldr	r3, [pc, #432]	; (8001924 <Shell_Loop+0x1b8>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d05b      	beq.n	8001832 <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 800177a:	4b6b      	ldr	r3, [pc, #428]	; (8001928 <Shell_Loop+0x1bc>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b08      	cmp	r3, #8
 8001780:	d034      	beq.n	80017ec <Shell_Loop+0x80>
 8001782:	2b0d      	cmp	r3, #13
 8001784:	d142      	bne.n	800180c <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800178a:	2203      	movs	r2, #3
 800178c:	4967      	ldr	r1, [pc, #412]	; (800192c <Shell_Loop+0x1c0>)
 800178e:	4868      	ldr	r0, [pc, #416]	; (8001930 <Shell_Loop+0x1c4>)
 8001790:	f004 fde7 	bl	8006362 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8001794:	4b67      	ldr	r3, [pc, #412]	; (8001934 <Shell_Loop+0x1c8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a67      	ldr	r2, [pc, #412]	; (8001938 <Shell_Loop+0x1cc>)
 800179a:	2100      	movs	r1, #0
 800179c:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 800179e:	4b67      	ldr	r3, [pc, #412]	; (800193c <Shell_Loop+0x1d0>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 80017a4:	4966      	ldr	r1, [pc, #408]	; (8001940 <Shell_Loop+0x1d4>)
 80017a6:	4864      	ldr	r0, [pc, #400]	; (8001938 <Shell_Loop+0x1cc>)
 80017a8:	f006 ffc2 	bl	8008730 <strtok>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4a65      	ldr	r2, [pc, #404]	; (8001944 <Shell_Loop+0x1d8>)
 80017b0:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80017b2:	e010      	b.n	80017d6 <Shell_Loop+0x6a>
				argv[argc++] = token;
 80017b4:	4b61      	ldr	r3, [pc, #388]	; (800193c <Shell_Loop+0x1d0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	4960      	ldr	r1, [pc, #384]	; (800193c <Shell_Loop+0x1d0>)
 80017bc:	600a      	str	r2, [r1, #0]
 80017be:	4a61      	ldr	r2, [pc, #388]	; (8001944 <Shell_Loop+0x1d8>)
 80017c0:	6812      	ldr	r2, [r2, #0]
 80017c2:	4961      	ldr	r1, [pc, #388]	; (8001948 <Shell_Loop+0x1dc>)
 80017c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 80017c8:	495d      	ldr	r1, [pc, #372]	; (8001940 <Shell_Loop+0x1d4>)
 80017ca:	2000      	movs	r0, #0
 80017cc:	f006 ffb0 	bl	8008730 <strtok>
 80017d0:	4603      	mov	r3, r0
 80017d2:	4a5c      	ldr	r2, [pc, #368]	; (8001944 <Shell_Loop+0x1d8>)
 80017d4:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80017d6:	4b5b      	ldr	r3, [pc, #364]	; (8001944 <Shell_Loop+0x1d8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1ea      	bne.n	80017b4 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 80017de:	4b55      	ldr	r3, [pc, #340]	; (8001934 <Shell_Loop+0x1c8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 80017e4:	4b59      	ldr	r3, [pc, #356]	; (800194c <Shell_Loop+0x1e0>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	601a      	str	r2, [r3, #0]
			break;
 80017ea:	e01f      	b.n	800182c <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 80017ec:	4b51      	ldr	r3, [pc, #324]	; (8001934 <Shell_Loop+0x1c8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	1e5a      	subs	r2, r3, #1
 80017f2:	4950      	ldr	r1, [pc, #320]	; (8001934 <Shell_Loop+0x1c8>)
 80017f4:	600a      	str	r2, [r1, #0]
 80017f6:	4a50      	ldr	r2, [pc, #320]	; (8001938 <Shell_Loop+0x1cc>)
 80017f8:	2100      	movs	r1, #0
 80017fa:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001800:	2204      	movs	r2, #4
 8001802:	4953      	ldr	r1, [pc, #332]	; (8001950 <Shell_Loop+0x1e4>)
 8001804:	484a      	ldr	r0, [pc, #296]	; (8001930 <Shell_Loop+0x1c4>)
 8001806:	f004 fdac 	bl	8006362 <HAL_UART_Transmit>
			break;
 800180a:	e00f      	b.n	800182c <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 800180c:	4b49      	ldr	r3, [pc, #292]	; (8001934 <Shell_Loop+0x1c8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	1c5a      	adds	r2, r3, #1
 8001812:	4948      	ldr	r1, [pc, #288]	; (8001934 <Shell_Loop+0x1c8>)
 8001814:	600a      	str	r2, [r1, #0]
 8001816:	4a44      	ldr	r2, [pc, #272]	; (8001928 <Shell_Loop+0x1bc>)
 8001818:	7811      	ldrb	r1, [r2, #0]
 800181a:	4a47      	ldr	r2, [pc, #284]	; (8001938 <Shell_Loop+0x1cc>)
 800181c:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 800181e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001822:	2201      	movs	r2, #1
 8001824:	4940      	ldr	r1, [pc, #256]	; (8001928 <Shell_Loop+0x1bc>)
 8001826:	4842      	ldr	r0, [pc, #264]	; (8001930 <Shell_Loop+0x1c4>)
 8001828:	f004 fd9b 	bl	8006362 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 800182c:	4b3d      	ldr	r3, [pc, #244]	; (8001924 <Shell_Loop+0x1b8>)
 800182e:	2200      	movs	r2, #0
 8001830:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 8001832:	4b46      	ldr	r3, [pc, #280]	; (800194c <Shell_Loop+0x1e0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d070      	beq.n	800191c <Shell_Loop+0x1b0>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 800183a:	4b43      	ldr	r3, [pc, #268]	; (8001948 <Shell_Loop+0x1dc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4945      	ldr	r1, [pc, #276]	; (8001954 <Shell_Loop+0x1e8>)
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fced 	bl	8000220 <strcmp>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d107      	bne.n	800185c <Shell_Loop+0xf0>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 800184c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001850:	221a      	movs	r2, #26
 8001852:	4941      	ldr	r1, [pc, #260]	; (8001958 <Shell_Loop+0x1ec>)
 8001854:	4836      	ldr	r0, [pc, #216]	; (8001930 <Shell_Loop+0x1c4>)
 8001856:	f004 fd84 	bl	8006362 <HAL_UART_Transmit>
 800185a:	e055      	b.n	8001908 <Shell_Loop+0x19c>
		}
		else if(strcmp(argv[0],"help")==0){
 800185c:	4b3a      	ldr	r3, [pc, #232]	; (8001948 <Shell_Loop+0x1dc>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	493e      	ldr	r1, [pc, #248]	; (800195c <Shell_Loop+0x1f0>)
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fcdc 	bl	8000220 <strcmp>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10e      	bne.n	800188c <Shell_Loop+0x120>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 800186e:	4a3c      	ldr	r2, [pc, #240]	; (8001960 <Shell_Loop+0x1f4>)
 8001870:	2140      	movs	r1, #64	; 0x40
 8001872:	483c      	ldr	r0, [pc, #240]	; (8001964 <Shell_Loop+0x1f8>)
 8001874:	f006 fedc 	bl	8008630 <sniprintf>
 8001878:	6038      	str	r0, [r7, #0]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	b29a      	uxth	r2, r3
 800187e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001882:	4938      	ldr	r1, [pc, #224]	; (8001964 <Shell_Loop+0x1f8>)
 8001884:	482a      	ldr	r0, [pc, #168]	; (8001930 <Shell_Loop+0x1c4>)
 8001886:	f004 fd6c 	bl	8006362 <HAL_UART_Transmit>
 800188a:	e03d      	b.n	8001908 <Shell_Loop+0x19c>
		}
		else if(strcmp(argv[0],"start")==0){
 800188c:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <Shell_Loop+0x1dc>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4935      	ldr	r1, [pc, #212]	; (8001968 <Shell_Loop+0x1fc>)
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fcc4 	bl	8000220 <strcmp>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d102      	bne.n	80018a4 <Shell_Loop+0x138>
			Motor_Init();
 800189e:	f7ff fe9d 	bl	80015dc <Motor_Init>
 80018a2:	e031      	b.n	8001908 <Shell_Loop+0x19c>
		}
		else if(strcmp(argv[0],"stop")==0){
 80018a4:	4b28      	ldr	r3, [pc, #160]	; (8001948 <Shell_Loop+0x1dc>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4930      	ldr	r1, [pc, #192]	; (800196c <Shell_Loop+0x200>)
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fcb8 	bl	8000220 <strcmp>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d102      	bne.n	80018bc <Shell_Loop+0x150>
			Motor_DeInit();
 80018b6:	f7ff feaf 	bl	8001618 <Motor_DeInit>
 80018ba:	e025      	b.n	8001908 <Shell_Loop+0x19c>
		}
		else if(strcmp(argv[0],"speed")==0){
 80018bc:	4b22      	ldr	r3, [pc, #136]	; (8001948 <Shell_Loop+0x1dc>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	492b      	ldr	r1, [pc, #172]	; (8001970 <Shell_Loop+0x204>)
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fcac 	bl	8000220 <strcmp>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d115      	bne.n	80018fa <Shell_Loop+0x18e>
			int speed = atoi(argv[1]);
 80018ce:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <Shell_Loop+0x1dc>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f006 fd6c 	bl	80083b0 <atoi>
 80018d8:	6078      	str	r0, [r7, #4]
			if(speed < 0) speed = 0;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	da01      	bge.n	80018e4 <Shell_Loop+0x178>
 80018e0:	2300      	movs	r3, #0
 80018e2:	607b      	str	r3, [r7, #4]
			if(speed > 1023) speed = 1023;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	db02      	blt.n	80018f2 <Shell_Loop+0x186>
 80018ec:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80018f0:	607b      	str	r3, [r7, #4]
			Motor_Set_Speed(speed);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff fec6 	bl	8001684 <Motor_Set_Speed>
 80018f8:	e006      	b.n	8001908 <Shell_Loop+0x19c>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80018fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018fe:	2214      	movs	r2, #20
 8001900:	491c      	ldr	r1, [pc, #112]	; (8001974 <Shell_Loop+0x208>)
 8001902:	480b      	ldr	r0, [pc, #44]	; (8001930 <Shell_Loop+0x1c4>)
 8001904:	f004 fd2d 	bl	8006362 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800190c:	221c      	movs	r2, #28
 800190e:	491a      	ldr	r1, [pc, #104]	; (8001978 <Shell_Loop+0x20c>)
 8001910:	4807      	ldr	r0, [pc, #28]	; (8001930 <Shell_Loop+0x1c4>)
 8001912:	f004 fd26 	bl	8006362 <HAL_UART_Transmit>
		newCmdReady = 0;
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <Shell_Loop+0x1e0>)
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
	}
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000424 	.word	0x20000424
 8001928:	20000428 	.word	0x20000428
 800192c:	20000088 	.word	0x20000088
 8001930:	20000304 	.word	0x20000304
 8001934:	200004ac 	.word	0x200004ac
 8001938:	2000046c 	.word	0x2000046c
 800193c:	200004d4 	.word	0x200004d4
 8001940:	080098a0 	.word	0x080098a0
 8001944:	200004d8 	.word	0x200004d8
 8001948:	200004b0 	.word	0x200004b0
 800194c:	200004dc 	.word	0x200004dc
 8001950:	2000008c 	.word	0x2000008c
 8001954:	080098a4 	.word	0x080098a4
 8001958:	200000a4 	.word	0x200000a4
 800195c:	080098b4 	.word	0x080098b4
 8001960:	080098bc 	.word	0x080098bc
 8001964:	2000042c 	.word	0x2000042c
 8001968:	080098e4 	.word	0x080098e4
 800196c:	080098ec 	.word	0x080098ec
 8001970:	080098f4 	.word	0x080098f4
 8001974:	20000090 	.word	0x20000090
 8001978:	20000004 	.word	0x20000004

0800197c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <HAL_UART_RxCpltCallback+0x20>)
 8001986:	2201      	movs	r2, #1
 8001988:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800198a:	2201      	movs	r2, #1
 800198c:	4904      	ldr	r1, [pc, #16]	; (80019a0 <HAL_UART_RxCpltCallback+0x24>)
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <HAL_UART_RxCpltCallback+0x28>)
 8001990:	f004 fd7e 	bl	8006490 <HAL_UART_Receive_IT>
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000424 	.word	0x20000424
 80019a0:	20000428 	.word	0x20000428
 80019a4:	20000304 	.word	0x20000304

080019a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019a8:	480d      	ldr	r0, [pc, #52]	; (80019e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019ac:	480d      	ldr	r0, [pc, #52]	; (80019e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80019ae:	490e      	ldr	r1, [pc, #56]	; (80019e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019b0:	4a0e      	ldr	r2, [pc, #56]	; (80019ec <LoopForever+0xe>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019b4:	e002      	b.n	80019bc <LoopCopyDataInit>

080019b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ba:	3304      	adds	r3, #4

080019bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c0:	d3f9      	bcc.n	80019b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c2:	4a0b      	ldr	r2, [pc, #44]	; (80019f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019c4:	4c0b      	ldr	r4, [pc, #44]	; (80019f4 <LoopForever+0x16>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c8:	e001      	b.n	80019ce <LoopFillZerobss>

080019ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019cc:	3204      	adds	r2, #4

080019ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d0:	d3fb      	bcc.n	80019ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019d2:	f7ff fab3 	bl	8000f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019d6:	f006 ff53 	bl	8008880 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019da:	f7ff f86f 	bl	8000abc <main>

080019de <LoopForever>:

LoopForever:
    b LoopForever
 80019de:	e7fe      	b.n	80019de <LoopForever>
  ldr   r0, =_estack
 80019e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e8:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 80019ec:	08009b30 	.word	0x08009b30
  ldr r2, =_sbss
 80019f0:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 80019f4:	20000630 	.word	0x20000630

080019f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019f8:	e7fe      	b.n	80019f8 <ADC1_2_IRQHandler>

080019fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a04:	2003      	movs	r0, #3
 8001a06:	f001 fa08 	bl	8002e1a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a0a:	200f      	movs	r0, #15
 8001a0c:	f7ff f912 	bl	8000c34 <HAL_InitTick>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d002      	beq.n	8001a1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	71fb      	strb	r3, [r7, #7]
 8001a1a:	e001      	b.n	8001a20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a1c:	f7ff f8e6 	bl	8000bec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a20:	79fb      	ldrb	r3, [r7, #7]

}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_IncTick+0x1c>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_IncTick+0x20>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4413      	add	r3, r2
 8001a3a:	4a03      	ldr	r2, [pc, #12]	; (8001a48 <HAL_IncTick+0x1c>)
 8001a3c:	6013      	str	r3, [r2, #0]
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	200004e0 	.word	0x200004e0
 8001a4c:	200000c4 	.word	0x200000c4

08001a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return uwTick;
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <HAL_GetTick+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	200004e0 	.word	0x200004e0

08001a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a70:	f7ff ffee 	bl	8001a50 <HAL_GetTick>
 8001a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a80:	d004      	beq.n	8001a8c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_Delay+0x40>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	4413      	add	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a8c:	bf00      	nop
 8001a8e:	f7ff ffdf 	bl	8001a50 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d8f7      	bhi.n	8001a8e <HAL_Delay+0x26>
  {
  }
}
 8001a9e:	bf00      	nop
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	200000c4 	.word	0x200000c4

08001aac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	609a      	str	r2, [r3, #8]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
 8001b20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	3360      	adds	r3, #96	; 0x60
 8001b26:	461a      	mov	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <LL_ADC_SetOffset+0x44>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	4313      	orrs	r3, r2
 8001b44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b4c:	bf00      	nop
 8001b4e:	371c      	adds	r7, #28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	03fff000 	.word	0x03fff000

08001b5c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3360      	adds	r3, #96	; 0x60
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b087      	sub	sp, #28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	3360      	adds	r3, #96	; 0x60
 8001b98:	461a      	mov	r2, r3
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	431a      	orrs	r2, r3
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bb2:	bf00      	nop
 8001bb4:	371c      	adds	r7, #28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b087      	sub	sp, #28
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	3360      	adds	r3, #96	; 0x60
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	431a      	orrs	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001be8:	bf00      	nop
 8001bea:	371c      	adds	r7, #28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b087      	sub	sp, #28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	3360      	adds	r3, #96	; 0x60
 8001c04:	461a      	mov	r2, r3
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001c1e:	bf00      	nop
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	615a      	str	r2, [r3, #20]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	3330      	adds	r3, #48	; 0x30
 8001c60:	461a      	mov	r2, r3
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	0a1b      	lsrs	r3, r3, #8
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	f003 030c 	and.w	r3, r3, #12
 8001c6c:	4413      	add	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	f003 031f 	and.w	r3, r3, #31
 8001c7a:	211f      	movs	r1, #31
 8001c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	401a      	ands	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	0e9b      	lsrs	r3, r3, #26
 8001c88:	f003 011f 	and.w	r1, r3, #31
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	431a      	orrs	r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c9c:	bf00      	nop
 8001c9e:	371c      	adds	r7, #28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b087      	sub	sp, #28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3314      	adds	r3, #20
 8001cb8:	461a      	mov	r2, r3
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	0e5b      	lsrs	r3, r3, #25
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	4413      	add	r3, r2
 8001cc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	0d1b      	lsrs	r3, r3, #20
 8001cd0:	f003 031f 	and.w	r3, r3, #31
 8001cd4:	2107      	movs	r1, #7
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	401a      	ands	r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	0d1b      	lsrs	r3, r3, #20
 8001ce2:	f003 031f 	and.w	r3, r3, #31
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cec:	431a      	orrs	r2, r3
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cf2:	bf00      	nop
 8001cf4:	371c      	adds	r7, #28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a0f      	ldr	r2, [pc, #60]	; (8001d4c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d10a      	bne.n	8001d2a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d20:	431a      	orrs	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001d28:	e00a      	b.n	8001d40 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d36:	43db      	mvns	r3, r3
 8001d38:	401a      	ands	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	407f0000 	.word	0x407f0000

08001d50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6093      	str	r3, [r2, #8]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d88:	d101      	bne.n	8001d8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001dac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001db0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001dd8:	d101      	bne.n	8001dde <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <LL_ADC_IsEnabled+0x18>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <LL_ADC_IsEnabled+0x1a>
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d101      	bne.n	8001e2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d101      	bne.n	8001e50 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e1af      	b.n	80021da <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d109      	bne.n	8001e9c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7fe fc8d 	bl	80007a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff67 	bl	8001d74 <LL_ADC_IsDeepPowerDownEnabled>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d004      	beq.n	8001eb6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff4d 	bl	8001d50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ff82 	bl	8001dc4 <LL_ADC_IsInternalRegulatorEnabled>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d115      	bne.n	8001ef2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff ff66 	bl	8001d9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ed0:	4b9f      	ldr	r3, [pc, #636]	; (8002150 <HAL_ADC_Init+0x2f0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	099b      	lsrs	r3, r3, #6
 8001ed6:	4a9f      	ldr	r2, [pc, #636]	; (8002154 <HAL_ADC_Init+0x2f4>)
 8001ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8001edc:	099b      	lsrs	r3, r3, #6
 8001ede:	3301      	adds	r3, #1
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ee4:	e002      	b.n	8001eec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f9      	bne.n	8001ee6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ff64 	bl	8001dc4 <LL_ADC_IsInternalRegulatorEnabled>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10d      	bne.n	8001f1e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f06:	f043 0210 	orr.w	r2, r3, #16
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f12:	f043 0201 	orr.w	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff ff75 	bl	8001e12 <LL_ADC_REG_IsConversionOngoing>
 8001f28:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 8148 	bne.w	80021c8 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f040 8144 	bne.w	80021c8 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f44:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f48:	f043 0202 	orr.w	r2, r3, #2
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff49 	bl	8001dec <LL_ADC_IsEnabled>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d141      	bne.n	8001fe4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f68:	d004      	beq.n	8001f74 <HAL_ADC_Init+0x114>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a7a      	ldr	r2, [pc, #488]	; (8002158 <HAL_ADC_Init+0x2f8>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d10f      	bne.n	8001f94 <HAL_ADC_Init+0x134>
 8001f74:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f78:	f7ff ff38 	bl	8001dec <LL_ADC_IsEnabled>
 8001f7c:	4604      	mov	r4, r0
 8001f7e:	4876      	ldr	r0, [pc, #472]	; (8002158 <HAL_ADC_Init+0x2f8>)
 8001f80:	f7ff ff34 	bl	8001dec <LL_ADC_IsEnabled>
 8001f84:	4603      	mov	r3, r0
 8001f86:	4323      	orrs	r3, r4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	e012      	b.n	8001fba <HAL_ADC_Init+0x15a>
 8001f94:	4871      	ldr	r0, [pc, #452]	; (800215c <HAL_ADC_Init+0x2fc>)
 8001f96:	f7ff ff29 	bl	8001dec <LL_ADC_IsEnabled>
 8001f9a:	4604      	mov	r4, r0
 8001f9c:	4870      	ldr	r0, [pc, #448]	; (8002160 <HAL_ADC_Init+0x300>)
 8001f9e:	f7ff ff25 	bl	8001dec <LL_ADC_IsEnabled>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	431c      	orrs	r4, r3
 8001fa6:	486f      	ldr	r0, [pc, #444]	; (8002164 <HAL_ADC_Init+0x304>)
 8001fa8:	f7ff ff20 	bl	8001dec <LL_ADC_IsEnabled>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4323      	orrs	r3, r4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bf0c      	ite	eq
 8001fb4:	2301      	moveq	r3, #1
 8001fb6:	2300      	movne	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d012      	beq.n	8001fe4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fc6:	d004      	beq.n	8001fd2 <HAL_ADC_Init+0x172>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a62      	ldr	r2, [pc, #392]	; (8002158 <HAL_ADC_Init+0x2f8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_Init+0x176>
 8001fd2:	4a65      	ldr	r2, [pc, #404]	; (8002168 <HAL_ADC_Init+0x308>)
 8001fd4:	e000      	b.n	8001fd8 <HAL_ADC_Init+0x178>
 8001fd6:	4a65      	ldr	r2, [pc, #404]	; (800216c <HAL_ADC_Init+0x30c>)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4610      	mov	r0, r2
 8001fe0:	f7ff fd64 	bl	8001aac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7f5b      	ldrb	r3, [r3, #29]
 8001fe8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fee:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ff4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001ffa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002002:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800200e:	2b01      	cmp	r3, #1
 8002010:	d106      	bne.n	8002020 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002016:	3b01      	subs	r3, #1
 8002018:	045b      	lsls	r3, r3, #17
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	2b00      	cmp	r3, #0
 8002026:	d009      	beq.n	800203c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	4b4b      	ldr	r3, [pc, #300]	; (8002170 <HAL_ADC_Init+0x310>)
 8002044:	4013      	ands	r3, r2
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	69b9      	ldr	r1, [r7, #24]
 800204c:	430b      	orrs	r3, r1
 800204e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fed1 	bl	8001e12 <LL_ADC_REG_IsConversionOngoing>
 8002070:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fede 	bl	8001e38 <LL_ADC_INJ_IsConversionOngoing>
 800207c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d17f      	bne.n	8002184 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d17c      	bne.n	8002184 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800208e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002096:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020a6:	f023 0302 	bic.w	r3, r3, #2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	69b9      	ldr	r1, [r7, #24]
 80020b0:	430b      	orrs	r3, r1
 80020b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d017      	beq.n	80020ec <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020d4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6911      	ldr	r1, [r2, #16]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	430b      	orrs	r3, r1
 80020e6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80020ea:	e013      	b.n	8002114 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691a      	ldr	r2, [r3, #16]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800210c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002110:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800211a:	2b01      	cmp	r3, #1
 800211c:	d12a      	bne.n	8002174 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002128:	f023 0304 	bic.w	r3, r3, #4
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002134:	4311      	orrs	r1, r2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800213a:	4311      	orrs	r1, r2
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002140:	430a      	orrs	r2, r1
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f042 0201 	orr.w	r2, r2, #1
 800214c:	611a      	str	r2, [r3, #16]
 800214e:	e019      	b.n	8002184 <HAL_ADC_Init+0x324>
 8002150:	20000000 	.word	0x20000000
 8002154:	053e2d63 	.word	0x053e2d63
 8002158:	50000100 	.word	0x50000100
 800215c:	50000400 	.word	0x50000400
 8002160:	50000500 	.word	0x50000500
 8002164:	50000600 	.word	0x50000600
 8002168:	50000300 	.word	0x50000300
 800216c:	50000700 	.word	0x50000700
 8002170:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691a      	ldr	r2, [r3, #16]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d10c      	bne.n	80021a6 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f023 010f 	bic.w	r1, r3, #15
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	1e5a      	subs	r2, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	631a      	str	r2, [r3, #48]	; 0x30
 80021a4:	e007      	b.n	80021b6 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 020f 	bic.w	r2, r2, #15
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ba:	f023 0303 	bic.w	r3, r3, #3
 80021be:	f043 0201 	orr.w	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80021c6:	e007      	b.n	80021d8 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021cc:	f043 0210 	orr.w	r2, r3, #16
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3724      	adds	r7, #36	; 0x24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd90      	pop	{r4, r7, pc}
 80021e2:	bf00      	nop

080021e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b0b6      	sub	sp, #216	; 0xd8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d102      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x24>
 8002202:	2302      	movs	r3, #2
 8002204:	f000 bc13 	b.w	8002a2e <HAL_ADC_ConfigChannel+0x84a>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fdfc 	bl	8001e12 <LL_ADC_REG_IsConversionOngoing>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	f040 83f3 	bne.w	8002a08 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	6859      	ldr	r1, [r3, #4]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	f7ff fd0e 	bl	8001c50 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fdea 	bl	8001e12 <LL_ADC_REG_IsConversionOngoing>
 800223e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fdf6 	bl	8001e38 <LL_ADC_INJ_IsConversionOngoing>
 800224c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002250:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002254:	2b00      	cmp	r3, #0
 8002256:	f040 81d9 	bne.w	800260c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800225a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800225e:	2b00      	cmp	r3, #0
 8002260:	f040 81d4 	bne.w	800260c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800226c:	d10f      	bne.n	800228e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2200      	movs	r2, #0
 8002278:	4619      	mov	r1, r3
 800227a:	f7ff fd15 	bl	8001ca8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fccf 	bl	8001c2a <LL_ADC_SetSamplingTimeCommonConfig>
 800228c:	e00e      	b.n	80022ac <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6819      	ldr	r1, [r3, #0]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	461a      	mov	r2, r3
 800229c:	f7ff fd04 	bl	8001ca8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2100      	movs	r1, #0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fcbf 	bl	8001c2a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	695a      	ldr	r2, [r3, #20]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	08db      	lsrs	r3, r3, #3
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d022      	beq.n	8002314 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	6919      	ldr	r1, [r3, #16]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80022de:	f7ff fc19 	bl	8001b14 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	6919      	ldr	r1, [r3, #16]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	461a      	mov	r2, r3
 80022f0:	f7ff fc65 	bl	8001bbe <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	6919      	ldr	r1, [r3, #16]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	7f1b      	ldrb	r3, [r3, #28]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d102      	bne.n	800230a <HAL_ADC_ConfigChannel+0x126>
 8002304:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002308:	e000      	b.n	800230c <HAL_ADC_ConfigChannel+0x128>
 800230a:	2300      	movs	r3, #0
 800230c:	461a      	mov	r2, r3
 800230e:	f7ff fc71 	bl	8001bf4 <LL_ADC_SetOffsetSaturation>
 8002312:	e17b      	b.n	800260c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fc1e 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 8002320:	4603      	mov	r3, r0
 8002322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10a      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x15c>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2100      	movs	r1, #0
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fc13 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 8002336:	4603      	mov	r3, r0
 8002338:	0e9b      	lsrs	r3, r3, #26
 800233a:	f003 021f 	and.w	r2, r3, #31
 800233e:	e01e      	b.n	800237e <HAL_ADC_ConfigChannel+0x19a>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fc08 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 800234c:	4603      	mov	r3, r0
 800234e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800235e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002362:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002366:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800236e:	2320      	movs	r3, #32
 8002370:	e004      	b.n	800237c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002372:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002386:	2b00      	cmp	r3, #0
 8002388:	d105      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x1b2>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	0e9b      	lsrs	r3, r3, #26
 8002390:	f003 031f 	and.w	r3, r3, #31
 8002394:	e018      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x1e4>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023a2:	fa93 f3a3 	rbit	r3, r3
 80023a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80023aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80023b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80023ba:	2320      	movs	r3, #32
 80023bc:	e004      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80023be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d106      	bne.n	80023da <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2200      	movs	r2, #0
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fbd7 	bl	8001b88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2101      	movs	r1, #1
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fbbb 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10a      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x222>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2101      	movs	r1, #1
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fbb0 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 80023fc:	4603      	mov	r3, r0
 80023fe:	0e9b      	lsrs	r3, r3, #26
 8002400:	f003 021f 	and.w	r2, r3, #31
 8002404:	e01e      	b.n	8002444 <HAL_ADC_ConfigChannel+0x260>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2101      	movs	r1, #1
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fba5 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800241c:	fa93 f3a3 	rbit	r3, r3
 8002420:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002424:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002428:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800242c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002434:	2320      	movs	r3, #32
 8002436:	e004      	b.n	8002442 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002438:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800243c:	fab3 f383 	clz	r3, r3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244c:	2b00      	cmp	r3, #0
 800244e:	d105      	bne.n	800245c <HAL_ADC_ConfigChannel+0x278>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0e9b      	lsrs	r3, r3, #26
 8002456:	f003 031f 	and.w	r3, r3, #31
 800245a:	e018      	b.n	800248e <HAL_ADC_ConfigChannel+0x2aa>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002470:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002474:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002478:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002480:	2320      	movs	r3, #32
 8002482:	e004      	b.n	800248e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002484:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002488:	fab3 f383 	clz	r3, r3
 800248c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800248e:	429a      	cmp	r2, r3
 8002490:	d106      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2200      	movs	r2, #0
 8002498:	2101      	movs	r1, #1
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fb74 	bl	8001b88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2102      	movs	r1, #2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fb58 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 80024ac:	4603      	mov	r3, r0
 80024ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10a      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x2e8>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2102      	movs	r1, #2
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fb4d 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 80024c2:	4603      	mov	r3, r0
 80024c4:	0e9b      	lsrs	r3, r3, #26
 80024c6:	f003 021f 	and.w	r2, r3, #31
 80024ca:	e01e      	b.n	800250a <HAL_ADC_ConfigChannel+0x326>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2102      	movs	r1, #2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fb42 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 80024d8:	4603      	mov	r3, r0
 80024da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80024ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80024f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80024fa:	2320      	movs	r3, #32
 80024fc:	e004      	b.n	8002508 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80024fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002512:	2b00      	cmp	r3, #0
 8002514:	d105      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x33e>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	0e9b      	lsrs	r3, r3, #26
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	e016      	b.n	8002550 <HAL_ADC_ConfigChannel+0x36c>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800252e:	fa93 f3a3 	rbit	r3, r3
 8002532:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002534:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002536:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800253a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002542:	2320      	movs	r3, #32
 8002544:	e004      	b.n	8002550 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002546:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002550:	429a      	cmp	r2, r3
 8002552:	d106      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2200      	movs	r2, #0
 800255a:	2102      	movs	r1, #2
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff fb13 	bl	8001b88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2103      	movs	r1, #3
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff faf7 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 800256e:	4603      	mov	r3, r0
 8002570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <HAL_ADC_ConfigChannel+0x3aa>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2103      	movs	r1, #3
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff faec 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 8002584:	4603      	mov	r3, r0
 8002586:	0e9b      	lsrs	r3, r3, #26
 8002588:	f003 021f 	and.w	r2, r3, #31
 800258c:	e017      	b.n	80025be <HAL_ADC_ConfigChannel+0x3da>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2103      	movs	r1, #3
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fae1 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 800259a:	4603      	mov	r3, r0
 800259c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025a0:	fa93 f3a3 	rbit	r3, r3
 80025a4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80025a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025a8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80025aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80025b0:	2320      	movs	r3, #32
 80025b2:	e003      	b.n	80025bc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80025b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025b6:	fab3 f383 	clz	r3, r3
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d105      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x3f2>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	0e9b      	lsrs	r3, r3, #26
 80025d0:	f003 031f 	and.w	r3, r3, #31
 80025d4:	e011      	b.n	80025fa <HAL_ADC_ConfigChannel+0x416>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80025e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80025e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80025ee:	2320      	movs	r3, #32
 80025f0:	e003      	b.n	80025fa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80025f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f4:	fab3 f383 	clz	r3, r3
 80025f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d106      	bne.n	800260c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2200      	movs	r2, #0
 8002604:	2103      	movs	r1, #3
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fabe 	bl	8001b88 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fbeb 	bl	8001dec <LL_ADC_IsEnabled>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	f040 813d 	bne.w	8002898 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	6819      	ldr	r1, [r3, #0]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	461a      	mov	r2, r3
 800262c:	f7ff fb68 	bl	8001d00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4aa2      	ldr	r2, [pc, #648]	; (80028c0 <HAL_ADC_ConfigChannel+0x6dc>)
 8002636:	4293      	cmp	r3, r2
 8002638:	f040 812e 	bne.w	8002898 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10b      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x480>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	0e9b      	lsrs	r3, r3, #26
 8002652:	3301      	adds	r3, #1
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	2b09      	cmp	r3, #9
 800265a:	bf94      	ite	ls
 800265c:	2301      	movls	r3, #1
 800265e:	2300      	movhi	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	e019      	b.n	8002698 <HAL_ADC_ConfigChannel+0x4b4>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002672:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002674:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002676:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800267c:	2320      	movs	r3, #32
 800267e:	e003      	b.n	8002688 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002680:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	3301      	adds	r3, #1
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	2b09      	cmp	r3, #9
 8002690:	bf94      	ite	ls
 8002692:	2301      	movls	r3, #1
 8002694:	2300      	movhi	r3, #0
 8002696:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002698:	2b00      	cmp	r3, #0
 800269a:	d079      	beq.n	8002790 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d107      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x4d4>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	0e9b      	lsrs	r3, r3, #26
 80026ae:	3301      	adds	r3, #1
 80026b0:	069b      	lsls	r3, r3, #26
 80026b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026b6:	e015      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x500>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80026ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80026d0:	2320      	movs	r3, #32
 80026d2:	e003      	b.n	80026dc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80026d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	3301      	adds	r3, #1
 80026de:	069b      	lsls	r3, r3, #26
 80026e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d109      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x520>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	0e9b      	lsrs	r3, r3, #26
 80026f6:	3301      	adds	r3, #1
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	2101      	movs	r1, #1
 80026fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002702:	e017      	b.n	8002734 <HAL_ADC_ConfigChannel+0x550>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002714:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800271c:	2320      	movs	r3, #32
 800271e:	e003      	b.n	8002728 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	3301      	adds	r3, #1
 800272a:	f003 031f 	and.w	r3, r3, #31
 800272e:	2101      	movs	r1, #1
 8002730:	fa01 f303 	lsl.w	r3, r1, r3
 8002734:	ea42 0103 	orr.w	r1, r2, r3
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10a      	bne.n	800275a <HAL_ADC_ConfigChannel+0x576>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	0e9b      	lsrs	r3, r3, #26
 800274a:	3301      	adds	r3, #1
 800274c:	f003 021f 	and.w	r2, r3, #31
 8002750:	4613      	mov	r3, r2
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	4413      	add	r3, r2
 8002756:	051b      	lsls	r3, r3, #20
 8002758:	e018      	b.n	800278c <HAL_ADC_ConfigChannel+0x5a8>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002762:	fa93 f3a3 	rbit	r3, r3
 8002766:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800276c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002772:	2320      	movs	r3, #32
 8002774:	e003      	b.n	800277e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002778:	fab3 f383 	clz	r3, r3
 800277c:	b2db      	uxtb	r3, r3
 800277e:	3301      	adds	r3, #1
 8002780:	f003 021f 	and.w	r2, r3, #31
 8002784:	4613      	mov	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4413      	add	r3, r2
 800278a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800278c:	430b      	orrs	r3, r1
 800278e:	e07e      	b.n	800288e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002798:	2b00      	cmp	r3, #0
 800279a:	d107      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x5c8>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	0e9b      	lsrs	r3, r3, #26
 80027a2:	3301      	adds	r3, #1
 80027a4:	069b      	lsls	r3, r3, #26
 80027a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027aa:	e015      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x5f4>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b4:	fa93 f3a3 	rbit	r3, r3
 80027b8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80027ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027bc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80027be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80027c4:	2320      	movs	r3, #32
 80027c6:	e003      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80027c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ca:	fab3 f383 	clz	r3, r3
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	3301      	adds	r3, #1
 80027d2:	069b      	lsls	r3, r3, #26
 80027d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d109      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x614>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	0e9b      	lsrs	r3, r3, #26
 80027ea:	3301      	adds	r3, #1
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	2101      	movs	r1, #1
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	e017      	b.n	8002828 <HAL_ADC_ConfigChannel+0x644>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	61fb      	str	r3, [r7, #28]
  return result;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002810:	2320      	movs	r3, #32
 8002812:	e003      	b.n	800281c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	fab3 f383 	clz	r3, r3
 800281a:	b2db      	uxtb	r3, r3
 800281c:	3301      	adds	r3, #1
 800281e:	f003 031f 	and.w	r3, r3, #31
 8002822:	2101      	movs	r1, #1
 8002824:	fa01 f303 	lsl.w	r3, r1, r3
 8002828:	ea42 0103 	orr.w	r1, r2, r3
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10d      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x670>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	0e9b      	lsrs	r3, r3, #26
 800283e:	3301      	adds	r3, #1
 8002840:	f003 021f 	and.w	r2, r3, #31
 8002844:	4613      	mov	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	4413      	add	r3, r2
 800284a:	3b1e      	subs	r3, #30
 800284c:	051b      	lsls	r3, r3, #20
 800284e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002852:	e01b      	b.n	800288c <HAL_ADC_ConfigChannel+0x6a8>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	613b      	str	r3, [r7, #16]
  return result;
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800286c:	2320      	movs	r3, #32
 800286e:	e003      	b.n	8002878 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	fab3 f383 	clz	r3, r3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	3301      	adds	r3, #1
 800287a:	f003 021f 	and.w	r2, r3, #31
 800287e:	4613      	mov	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4413      	add	r3, r2
 8002884:	3b1e      	subs	r3, #30
 8002886:	051b      	lsls	r3, r3, #20
 8002888:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800288c:	430b      	orrs	r3, r1
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	6892      	ldr	r2, [r2, #8]
 8002892:	4619      	mov	r1, r3
 8002894:	f7ff fa08 	bl	8001ca8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <HAL_ADC_ConfigChannel+0x6e0>)
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80be 	beq.w	8002a22 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028ae:	d004      	beq.n	80028ba <HAL_ADC_ConfigChannel+0x6d6>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a04      	ldr	r2, [pc, #16]	; (80028c8 <HAL_ADC_ConfigChannel+0x6e4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d10a      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x6ec>
 80028ba:	4b04      	ldr	r3, [pc, #16]	; (80028cc <HAL_ADC_ConfigChannel+0x6e8>)
 80028bc:	e009      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x6ee>
 80028be:	bf00      	nop
 80028c0:	407f0000 	.word	0x407f0000
 80028c4:	80080000 	.word	0x80080000
 80028c8:	50000100 	.word	0x50000100
 80028cc:	50000300 	.word	0x50000300
 80028d0:	4b59      	ldr	r3, [pc, #356]	; (8002a38 <HAL_ADC_ConfigChannel+0x854>)
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff f910 	bl	8001af8 <LL_ADC_GetCommonPathInternalCh>
 80028d8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a56      	ldr	r2, [pc, #344]	; (8002a3c <HAL_ADC_ConfigChannel+0x858>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d004      	beq.n	80028f0 <HAL_ADC_ConfigChannel+0x70c>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a55      	ldr	r2, [pc, #340]	; (8002a40 <HAL_ADC_ConfigChannel+0x85c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d13a      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d134      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002904:	d005      	beq.n	8002912 <HAL_ADC_ConfigChannel+0x72e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a4e      	ldr	r2, [pc, #312]	; (8002a44 <HAL_ADC_ConfigChannel+0x860>)
 800290c:	4293      	cmp	r3, r2
 800290e:	f040 8085 	bne.w	8002a1c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800291a:	d004      	beq.n	8002926 <HAL_ADC_ConfigChannel+0x742>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a49      	ldr	r2, [pc, #292]	; (8002a48 <HAL_ADC_ConfigChannel+0x864>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d101      	bne.n	800292a <HAL_ADC_ConfigChannel+0x746>
 8002926:	4a49      	ldr	r2, [pc, #292]	; (8002a4c <HAL_ADC_ConfigChannel+0x868>)
 8002928:	e000      	b.n	800292c <HAL_ADC_ConfigChannel+0x748>
 800292a:	4a43      	ldr	r2, [pc, #268]	; (8002a38 <HAL_ADC_ConfigChannel+0x854>)
 800292c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002930:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002934:	4619      	mov	r1, r3
 8002936:	4610      	mov	r0, r2
 8002938:	f7ff f8cb 	bl	8001ad2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800293c:	4b44      	ldr	r3, [pc, #272]	; (8002a50 <HAL_ADC_ConfigChannel+0x86c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	099b      	lsrs	r3, r3, #6
 8002942:	4a44      	ldr	r2, [pc, #272]	; (8002a54 <HAL_ADC_ConfigChannel+0x870>)
 8002944:	fba2 2303 	umull	r2, r3, r2, r3
 8002948:	099b      	lsrs	r3, r3, #6
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	4613      	mov	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002956:	e002      	b.n	800295e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	3b01      	subs	r3, #1
 800295c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1f9      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002964:	e05a      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a3b      	ldr	r2, [pc, #236]	; (8002a58 <HAL_ADC_ConfigChannel+0x874>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d125      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x7d8>
 8002970:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002974:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d11f      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a31      	ldr	r2, [pc, #196]	; (8002a48 <HAL_ADC_ConfigChannel+0x864>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d104      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x7ac>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a34      	ldr	r2, [pc, #208]	; (8002a5c <HAL_ADC_ConfigChannel+0x878>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d047      	beq.n	8002a20 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002998:	d004      	beq.n	80029a4 <HAL_ADC_ConfigChannel+0x7c0>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a2a      	ldr	r2, [pc, #168]	; (8002a48 <HAL_ADC_ConfigChannel+0x864>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d101      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x7c4>
 80029a4:	4a29      	ldr	r2, [pc, #164]	; (8002a4c <HAL_ADC_ConfigChannel+0x868>)
 80029a6:	e000      	b.n	80029aa <HAL_ADC_ConfigChannel+0x7c6>
 80029a8:	4a23      	ldr	r2, [pc, #140]	; (8002a38 <HAL_ADC_ConfigChannel+0x854>)
 80029aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029b2:	4619      	mov	r1, r3
 80029b4:	4610      	mov	r0, r2
 80029b6:	f7ff f88c 	bl	8001ad2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029ba:	e031      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a27      	ldr	r2, [pc, #156]	; (8002a60 <HAL_ADC_ConfigChannel+0x87c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d12d      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d127      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1c      	ldr	r2, [pc, #112]	; (8002a48 <HAL_ADC_ConfigChannel+0x864>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d022      	beq.n	8002a22 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029e4:	d004      	beq.n	80029f0 <HAL_ADC_ConfigChannel+0x80c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a17      	ldr	r2, [pc, #92]	; (8002a48 <HAL_ADC_ConfigChannel+0x864>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d101      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x810>
 80029f0:	4a16      	ldr	r2, [pc, #88]	; (8002a4c <HAL_ADC_ConfigChannel+0x868>)
 80029f2:	e000      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x812>
 80029f4:	4a10      	ldr	r2, [pc, #64]	; (8002a38 <HAL_ADC_ConfigChannel+0x854>)
 80029f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029fe:	4619      	mov	r1, r3
 8002a00:	4610      	mov	r0, r2
 8002a02:	f7ff f866 	bl	8001ad2 <LL_ADC_SetCommonPathInternalCh>
 8002a06:	e00c      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0c:	f043 0220 	orr.w	r2, r3, #32
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002a1a:	e002      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a1c:	bf00      	nop
 8002a1e:	e000      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a20:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a2a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	37d8      	adds	r7, #216	; 0xd8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	50000700 	.word	0x50000700
 8002a3c:	c3210000 	.word	0xc3210000
 8002a40:	90c00010 	.word	0x90c00010
 8002a44:	50000600 	.word	0x50000600
 8002a48:	50000100 	.word	0x50000100
 8002a4c:	50000300 	.word	0x50000300
 8002a50:	20000000 	.word	0x20000000
 8002a54:	053e2d63 	.word	0x053e2d63
 8002a58:	c7520000 	.word	0xc7520000
 8002a5c:	50000500 	.word	0x50000500
 8002a60:	cb840000 	.word	0xcb840000

08002a64 <LL_ADC_IsEnabled>:
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d101      	bne.n	8002a7c <LL_ADC_IsEnabled+0x18>
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <LL_ADC_IsEnabled+0x1a>
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <LL_ADC_REG_IsConversionOngoing>:
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d101      	bne.n	8002aa2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b0a1      	sub	sp, #132	; 0x84
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e0e7      	b.n	8002c9e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002ada:	2300      	movs	r3, #0
 8002adc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ae6:	d102      	bne.n	8002aee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ae8:	4b6f      	ldr	r3, [pc, #444]	; (8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	e009      	b.n	8002b02 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a6e      	ldr	r2, [pc, #440]	; (8002cac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d102      	bne.n	8002afe <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002af8:	4b6d      	ldr	r3, [pc, #436]	; (8002cb0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002afa:	60bb      	str	r3, [r7, #8]
 8002afc:	e001      	b.n	8002b02 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002afe:	2300      	movs	r3, #0
 8002b00:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10b      	bne.n	8002b20 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0c:	f043 0220 	orr.w	r2, r3, #32
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0be      	b.n	8002c9e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff ffb1 	bl	8002a8a <LL_ADC_REG_IsConversionOngoing>
 8002b28:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff ffab 	bl	8002a8a <LL_ADC_REG_IsConversionOngoing>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f040 80a0 	bne.w	8002c7c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f040 809c 	bne.w	8002c7c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b4c:	d004      	beq.n	8002b58 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a55      	ldr	r2, [pc, #340]	; (8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d101      	bne.n	8002b5c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002b58:	4b56      	ldr	r3, [pc, #344]	; (8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002b5a:	e000      	b.n	8002b5e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002b5c:	4b56      	ldr	r3, [pc, #344]	; (8002cb8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002b5e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d04b      	beq.n	8002c00 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	6859      	ldr	r1, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b7a:	035b      	lsls	r3, r3, #13
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b82:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b8c:	d004      	beq.n	8002b98 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a45      	ldr	r2, [pc, #276]	; (8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d10f      	bne.n	8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002b98:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002b9c:	f7ff ff62 	bl	8002a64 <LL_ADC_IsEnabled>
 8002ba0:	4604      	mov	r4, r0
 8002ba2:	4841      	ldr	r0, [pc, #260]	; (8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ba4:	f7ff ff5e 	bl	8002a64 <LL_ADC_IsEnabled>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	4323      	orrs	r3, r4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf0c      	ite	eq
 8002bb0:	2301      	moveq	r3, #1
 8002bb2:	2300      	movne	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	e012      	b.n	8002bde <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002bb8:	483c      	ldr	r0, [pc, #240]	; (8002cac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002bba:	f7ff ff53 	bl	8002a64 <LL_ADC_IsEnabled>
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	483b      	ldr	r0, [pc, #236]	; (8002cb0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002bc2:	f7ff ff4f 	bl	8002a64 <LL_ADC_IsEnabled>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	431c      	orrs	r4, r3
 8002bca:	483c      	ldr	r0, [pc, #240]	; (8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002bcc:	f7ff ff4a 	bl	8002a64 <LL_ADC_IsEnabled>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	4323      	orrs	r3, r4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bf0c      	ite	eq
 8002bd8:	2301      	moveq	r3, #1
 8002bda:	2300      	movne	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d056      	beq.n	8002c90 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002be2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002bea:	f023 030f 	bic.w	r3, r3, #15
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	6811      	ldr	r1, [r2, #0]
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	6892      	ldr	r2, [r2, #8]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bfc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bfe:	e047      	b.n	8002c90 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c0a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c14:	d004      	beq.n	8002c20 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a23      	ldr	r2, [pc, #140]	; (8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d10f      	bne.n	8002c40 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002c20:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c24:	f7ff ff1e 	bl	8002a64 <LL_ADC_IsEnabled>
 8002c28:	4604      	mov	r4, r0
 8002c2a:	481f      	ldr	r0, [pc, #124]	; (8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c2c:	f7ff ff1a 	bl	8002a64 <LL_ADC_IsEnabled>
 8002c30:	4603      	mov	r3, r0
 8002c32:	4323      	orrs	r3, r4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bf0c      	ite	eq
 8002c38:	2301      	moveq	r3, #1
 8002c3a:	2300      	movne	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	e012      	b.n	8002c66 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002c40:	481a      	ldr	r0, [pc, #104]	; (8002cac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002c42:	f7ff ff0f 	bl	8002a64 <LL_ADC_IsEnabled>
 8002c46:	4604      	mov	r4, r0
 8002c48:	4819      	ldr	r0, [pc, #100]	; (8002cb0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002c4a:	f7ff ff0b 	bl	8002a64 <LL_ADC_IsEnabled>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	431c      	orrs	r4, r3
 8002c52:	481a      	ldr	r0, [pc, #104]	; (8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002c54:	f7ff ff06 	bl	8002a64 <LL_ADC_IsEnabled>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	4323      	orrs	r3, r4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	bf0c      	ite	eq
 8002c60:	2301      	moveq	r3, #1
 8002c62:	2300      	movne	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d012      	beq.n	8002c90 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c72:	f023 030f 	bic.w	r3, r3, #15
 8002c76:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c78:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c7a:	e009      	b.n	8002c90 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c80:	f043 0220 	orr.w	r2, r3, #32
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002c8e:	e000      	b.n	8002c92 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c9a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3784      	adds	r7, #132	; 0x84
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd90      	pop	{r4, r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	50000100 	.word	0x50000100
 8002cac:	50000400 	.word	0x50000400
 8002cb0:	50000500 	.word	0x50000500
 8002cb4:	50000300 	.word	0x50000300
 8002cb8:	50000700 	.word	0x50000700
 8002cbc:	50000600 	.word	0x50000600

08002cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cf2:	4a04      	ldr	r2, [pc, #16]	; (8002d04 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	60d3      	str	r3, [r2, #12]
}
 8002cf8:	bf00      	nop
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d0c:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <__NVIC_GetPriorityGrouping+0x18>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	0a1b      	lsrs	r3, r3, #8
 8002d12:	f003 0307 	and.w	r3, r3, #7
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	db0b      	blt.n	8002d4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	f003 021f 	and.w	r2, r3, #31
 8002d3c:	4907      	ldr	r1, [pc, #28]	; (8002d5c <__NVIC_EnableIRQ+0x38>)
 8002d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	2001      	movs	r0, #1
 8002d46:	fa00 f202 	lsl.w	r2, r0, r2
 8002d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	e000e100 	.word	0xe000e100

08002d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	6039      	str	r1, [r7, #0]
 8002d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	db0a      	blt.n	8002d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	490c      	ldr	r1, [pc, #48]	; (8002dac <__NVIC_SetPriority+0x4c>)
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	0112      	lsls	r2, r2, #4
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	440b      	add	r3, r1
 8002d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d88:	e00a      	b.n	8002da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	4908      	ldr	r1, [pc, #32]	; (8002db0 <__NVIC_SetPriority+0x50>)
 8002d90:	79fb      	ldrb	r3, [r7, #7]
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	3b04      	subs	r3, #4
 8002d98:	0112      	lsls	r2, r2, #4
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	761a      	strb	r2, [r3, #24]
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	e000e100 	.word	0xe000e100
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b089      	sub	sp, #36	; 0x24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f1c3 0307 	rsb	r3, r3, #7
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	bf28      	it	cs
 8002dd2:	2304      	movcs	r3, #4
 8002dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	3304      	adds	r3, #4
 8002dda:	2b06      	cmp	r3, #6
 8002ddc:	d902      	bls.n	8002de4 <NVIC_EncodePriority+0x30>
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3b03      	subs	r3, #3
 8002de2:	e000      	b.n	8002de6 <NVIC_EncodePriority+0x32>
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43da      	mvns	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	401a      	ands	r2, r3
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	fa01 f303 	lsl.w	r3, r1, r3
 8002e06:	43d9      	mvns	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e0c:	4313      	orrs	r3, r2
         );
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3724      	adds	r7, #36	; 0x24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff ff4c 	bl	8002cc0 <__NVIC_SetPriorityGrouping>
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
 8002e3c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e3e:	f7ff ff63 	bl	8002d08 <__NVIC_GetPriorityGrouping>
 8002e42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	68b9      	ldr	r1, [r7, #8]
 8002e48:	6978      	ldr	r0, [r7, #20]
 8002e4a:	f7ff ffb3 	bl	8002db4 <NVIC_EncodePriority>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e54:	4611      	mov	r1, r2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ff82 	bl	8002d60 <__NVIC_SetPriority>
}
 8002e5c:	bf00      	nop
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff ff56 	bl	8002d24 <__NVIC_EnableIRQ>
}
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d005      	beq.n	8002ea4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2204      	movs	r2, #4
 8002e9c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
 8002ea2:	e037      	b.n	8002f14 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 020e 	bic.w	r2, r2, #14
 8002eb2:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ebe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ec2:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0201 	bic.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed8:	f003 021f 	and.w	r2, r3, #31
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee6:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ef0:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00c      	beq.n	8002f14 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f08:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f12:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d00d      	beq.n	8002f66 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
 8002f64:	e047      	b.n	8002ff6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 020e 	bic.w	r2, r2, #14
 8002f74:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0201 	bic.w	r2, r2, #1
 8002f84:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9a:	f003 021f 	and.w	r2, r3, #31
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fb2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00c      	beq.n	8002fd6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002fd4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
    }
  }
  return status;
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800300e:	e15a      	b.n	80032c6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	2101      	movs	r1, #1
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	fa01 f303 	lsl.w	r3, r1, r3
 800301c:	4013      	ands	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 814c 	beq.w	80032c0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	2b01      	cmp	r3, #1
 8003032:	d005      	beq.n	8003040 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800303c:	2b02      	cmp	r3, #2
 800303e:	d130      	bne.n	80030a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	2203      	movs	r2, #3
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4013      	ands	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003076:	2201      	movs	r2, #1
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4013      	ands	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	091b      	lsrs	r3, r3, #4
 800308c:	f003 0201 	and.w	r2, r3, #1
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	d017      	beq.n	80030de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	2203      	movs	r2, #3
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4013      	ands	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d123      	bne.n	8003132 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	08da      	lsrs	r2, r3, #3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3208      	adds	r2, #8
 80030f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	220f      	movs	r2, #15
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	691a      	ldr	r2, [r3, #16]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	08da      	lsrs	r2, r3, #3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3208      	adds	r2, #8
 800312c:	6939      	ldr	r1, [r7, #16]
 800312e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	2203      	movs	r2, #3
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4013      	ands	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f003 0203 	and.w	r2, r3, #3
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 80a6 	beq.w	80032c0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003174:	4b5b      	ldr	r3, [pc, #364]	; (80032e4 <HAL_GPIO_Init+0x2e4>)
 8003176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003178:	4a5a      	ldr	r2, [pc, #360]	; (80032e4 <HAL_GPIO_Init+0x2e4>)
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	6613      	str	r3, [r2, #96]	; 0x60
 8003180:	4b58      	ldr	r3, [pc, #352]	; (80032e4 <HAL_GPIO_Init+0x2e4>)
 8003182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800318c:	4a56      	ldr	r2, [pc, #344]	; (80032e8 <HAL_GPIO_Init+0x2e8>)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	089b      	lsrs	r3, r3, #2
 8003192:	3302      	adds	r3, #2
 8003194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003198:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	220f      	movs	r2, #15
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4013      	ands	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031b6:	d01f      	beq.n	80031f8 <HAL_GPIO_Init+0x1f8>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a4c      	ldr	r2, [pc, #304]	; (80032ec <HAL_GPIO_Init+0x2ec>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d019      	beq.n	80031f4 <HAL_GPIO_Init+0x1f4>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a4b      	ldr	r2, [pc, #300]	; (80032f0 <HAL_GPIO_Init+0x2f0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d013      	beq.n	80031f0 <HAL_GPIO_Init+0x1f0>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a4a      	ldr	r2, [pc, #296]	; (80032f4 <HAL_GPIO_Init+0x2f4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00d      	beq.n	80031ec <HAL_GPIO_Init+0x1ec>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a49      	ldr	r2, [pc, #292]	; (80032f8 <HAL_GPIO_Init+0x2f8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d007      	beq.n	80031e8 <HAL_GPIO_Init+0x1e8>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a48      	ldr	r2, [pc, #288]	; (80032fc <HAL_GPIO_Init+0x2fc>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d101      	bne.n	80031e4 <HAL_GPIO_Init+0x1e4>
 80031e0:	2305      	movs	r3, #5
 80031e2:	e00a      	b.n	80031fa <HAL_GPIO_Init+0x1fa>
 80031e4:	2306      	movs	r3, #6
 80031e6:	e008      	b.n	80031fa <HAL_GPIO_Init+0x1fa>
 80031e8:	2304      	movs	r3, #4
 80031ea:	e006      	b.n	80031fa <HAL_GPIO_Init+0x1fa>
 80031ec:	2303      	movs	r3, #3
 80031ee:	e004      	b.n	80031fa <HAL_GPIO_Init+0x1fa>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e002      	b.n	80031fa <HAL_GPIO_Init+0x1fa>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <HAL_GPIO_Init+0x1fa>
 80031f8:	2300      	movs	r3, #0
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	f002 0203 	and.w	r2, r2, #3
 8003200:	0092      	lsls	r2, r2, #2
 8003202:	4093      	lsls	r3, r2
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800320a:	4937      	ldr	r1, [pc, #220]	; (80032e8 <HAL_GPIO_Init+0x2e8>)
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	089b      	lsrs	r3, r3, #2
 8003210:	3302      	adds	r3, #2
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003218:	4b39      	ldr	r3, [pc, #228]	; (8003300 <HAL_GPIO_Init+0x300>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	43db      	mvns	r3, r3
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4013      	ands	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4313      	orrs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800323c:	4a30      	ldr	r2, [pc, #192]	; (8003300 <HAL_GPIO_Init+0x300>)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003242:	4b2f      	ldr	r3, [pc, #188]	; (8003300 <HAL_GPIO_Init+0x300>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	43db      	mvns	r3, r3
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4013      	ands	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003266:	4a26      	ldr	r2, [pc, #152]	; (8003300 <HAL_GPIO_Init+0x300>)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800326c:	4b24      	ldr	r3, [pc, #144]	; (8003300 <HAL_GPIO_Init+0x300>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	43db      	mvns	r3, r3
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4013      	ands	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003290:	4a1b      	ldr	r2, [pc, #108]	; (8003300 <HAL_GPIO_Init+0x300>)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003296:	4b1a      	ldr	r3, [pc, #104]	; (8003300 <HAL_GPIO_Init+0x300>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	43db      	mvns	r3, r3
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	4013      	ands	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032ba:	4a11      	ldr	r2, [pc, #68]	; (8003300 <HAL_GPIO_Init+0x300>)
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	3301      	adds	r3, #1
 80032c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	fa22 f303 	lsr.w	r3, r2, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f47f ae9d 	bne.w	8003010 <HAL_GPIO_Init+0x10>
  }
}
 80032d6:	bf00      	nop
 80032d8:	bf00      	nop
 80032da:	371c      	adds	r7, #28
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40010000 	.word	0x40010000
 80032ec:	48000400 	.word	0x48000400
 80032f0:	48000800 	.word	0x48000800
 80032f4:	48000c00 	.word	0x48000c00
 80032f8:	48001000 	.word	0x48001000
 80032fc:	48001400 	.word	0x48001400
 8003300:	40010400 	.word	0x40010400

08003304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	807b      	strh	r3, [r7, #2]
 8003310:	4613      	mov	r3, r2
 8003312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003314:	787b      	ldrb	r3, [r7, #1]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800331a:	887a      	ldrh	r2, [r7, #2]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003320:	e002      	b.n	8003328 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003322:	887a      	ldrh	r2, [r7, #2]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800333e:	4b08      	ldr	r3, [pc, #32]	; (8003360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	4013      	ands	r3, r2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d006      	beq.n	8003358 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800334a:	4a05      	ldr	r2, [pc, #20]	; (8003360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003350:	88fb      	ldrh	r3, [r7, #6]
 8003352:	4618      	mov	r0, r3
 8003354:	f000 f806 	bl	8003364 <HAL_GPIO_EXTI_Callback>
  }
}
 8003358:	bf00      	nop
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40010400 	.word	0x40010400

08003364 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d141      	bne.n	800340e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800338a:	4b4b      	ldr	r3, [pc, #300]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003396:	d131      	bne.n	80033fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003398:	4b47      	ldr	r3, [pc, #284]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800339a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800339e:	4a46      	ldr	r2, [pc, #280]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033a8:	4b43      	ldr	r3, [pc, #268]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033b0:	4a41      	ldr	r2, [pc, #260]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033b8:	4b40      	ldr	r3, [pc, #256]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2232      	movs	r2, #50	; 0x32
 80033be:	fb02 f303 	mul.w	r3, r2, r3
 80033c2:	4a3f      	ldr	r2, [pc, #252]	; (80034c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033c4:	fba2 2303 	umull	r2, r3, r2, r3
 80033c8:	0c9b      	lsrs	r3, r3, #18
 80033ca:	3301      	adds	r3, #1
 80033cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ce:	e002      	b.n	80033d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033d6:	4b38      	ldr	r3, [pc, #224]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e2:	d102      	bne.n	80033ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f2      	bne.n	80033d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033ea:	4b33      	ldr	r3, [pc, #204]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f6:	d158      	bne.n	80034aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e057      	b.n	80034ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033fc:	4b2e      	ldr	r3, [pc, #184]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003402:	4a2d      	ldr	r2, [pc, #180]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003408:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800340c:	e04d      	b.n	80034aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003414:	d141      	bne.n	800349a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003416:	4b28      	ldr	r3, [pc, #160]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800341e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003422:	d131      	bne.n	8003488 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003424:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800342a:	4a23      	ldr	r2, [pc, #140]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800342c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003430:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003434:	4b20      	ldr	r3, [pc, #128]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800343c:	4a1e      	ldr	r2, [pc, #120]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800343e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003442:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003444:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2232      	movs	r2, #50	; 0x32
 800344a:	fb02 f303 	mul.w	r3, r2, r3
 800344e:	4a1c      	ldr	r2, [pc, #112]	; (80034c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003450:	fba2 2303 	umull	r2, r3, r2, r3
 8003454:	0c9b      	lsrs	r3, r3, #18
 8003456:	3301      	adds	r3, #1
 8003458:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800345a:	e002      	b.n	8003462 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	3b01      	subs	r3, #1
 8003460:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003462:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800346a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800346e:	d102      	bne.n	8003476 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f2      	bne.n	800345c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003476:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800347e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003482:	d112      	bne.n	80034aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e011      	b.n	80034ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800348a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800348e:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003494:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003498:	e007      	b.n	80034aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800349a:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034a2:	4a05      	ldr	r2, [pc, #20]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	40007000 	.word	0x40007000
 80034bc:	20000000 	.word	0x20000000
 80034c0:	431bde83 	.word	0x431bde83

080034c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	4a04      	ldr	r2, [pc, #16]	; (80034e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034d2:	6093      	str	r3, [r2, #8]
}
 80034d4:	bf00      	nop
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40007000 	.word	0x40007000

080034e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e306      	b.n	8003b04 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d075      	beq.n	80035ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003502:	4b97      	ldr	r3, [pc, #604]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800350c:	4b94      	ldr	r3, [pc, #592]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 0303 	and.w	r3, r3, #3
 8003514:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	2b0c      	cmp	r3, #12
 800351a:	d102      	bne.n	8003522 <HAL_RCC_OscConfig+0x3e>
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2b03      	cmp	r3, #3
 8003520:	d002      	beq.n	8003528 <HAL_RCC_OscConfig+0x44>
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	2b08      	cmp	r3, #8
 8003526:	d10b      	bne.n	8003540 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003528:	4b8d      	ldr	r3, [pc, #564]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d05b      	beq.n	80035ec <HAL_RCC_OscConfig+0x108>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d157      	bne.n	80035ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e2e1      	b.n	8003b04 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003548:	d106      	bne.n	8003558 <HAL_RCC_OscConfig+0x74>
 800354a:	4b85      	ldr	r3, [pc, #532]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a84      	ldr	r2, [pc, #528]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e01d      	b.n	8003594 <HAL_RCC_OscConfig+0xb0>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003560:	d10c      	bne.n	800357c <HAL_RCC_OscConfig+0x98>
 8003562:	4b7f      	ldr	r3, [pc, #508]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a7e      	ldr	r2, [pc, #504]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	4b7c      	ldr	r3, [pc, #496]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a7b      	ldr	r2, [pc, #492]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	e00b      	b.n	8003594 <HAL_RCC_OscConfig+0xb0>
 800357c:	4b78      	ldr	r3, [pc, #480]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a77      	ldr	r2, [pc, #476]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	4b75      	ldr	r3, [pc, #468]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a74      	ldr	r2, [pc, #464]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 800358e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d013      	beq.n	80035c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fe fa58 	bl	8001a50 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a4:	f7fe fa54 	bl	8001a50 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	; 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e2a6      	b.n	8003b04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035b6:	4b6a      	ldr	r3, [pc, #424]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0xc0>
 80035c2:	e014      	b.n	80035ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fe fa44 	bl	8001a50 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035cc:	f7fe fa40 	bl	8001a50 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	; 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e292      	b.n	8003b04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035de:	4b60      	ldr	r3, [pc, #384]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0xe8>
 80035ea:	e000      	b.n	80035ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d075      	beq.n	80036e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035fa:	4b59      	ldr	r3, [pc, #356]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003604:	4b56      	ldr	r3, [pc, #344]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	2b0c      	cmp	r3, #12
 8003612:	d102      	bne.n	800361a <HAL_RCC_OscConfig+0x136>
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d002      	beq.n	8003620 <HAL_RCC_OscConfig+0x13c>
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	2b04      	cmp	r3, #4
 800361e:	d11f      	bne.n	8003660 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003620:	4b4f      	ldr	r3, [pc, #316]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_RCC_OscConfig+0x154>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e265      	b.n	8003b04 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003638:	4b49      	ldr	r3, [pc, #292]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	061b      	lsls	r3, r3, #24
 8003646:	4946      	ldr	r1, [pc, #280]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003648:	4313      	orrs	r3, r2
 800364a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800364c:	4b45      	ldr	r3, [pc, #276]	; (8003764 <HAL_RCC_OscConfig+0x280>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7fd faef 	bl	8000c34 <HAL_InitTick>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d043      	beq.n	80036e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e251      	b.n	8003b04 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d023      	beq.n	80036b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003668:	4b3d      	ldr	r3, [pc, #244]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a3c      	ldr	r2, [pc, #240]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 800366e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003674:	f7fe f9ec 	bl	8001a50 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800367c:	f7fe f9e8 	bl	8001a50 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e23a      	b.n	8003b04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800368e:	4b34      	ldr	r3, [pc, #208]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0f0      	beq.n	800367c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369a:	4b31      	ldr	r3, [pc, #196]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	061b      	lsls	r3, r3, #24
 80036a8:	492d      	ldr	r1, [pc, #180]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	604b      	str	r3, [r1, #4]
 80036ae:	e01a      	b.n	80036e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036b0:	4b2b      	ldr	r3, [pc, #172]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a2a      	ldr	r2, [pc, #168]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 80036b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fe f9c8 	bl	8001a50 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c4:	f7fe f9c4 	bl	8001a50 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e216      	b.n	8003b04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036d6:	4b22      	ldr	r3, [pc, #136]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f0      	bne.n	80036c4 <HAL_RCC_OscConfig+0x1e0>
 80036e2:	e000      	b.n	80036e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d041      	beq.n	8003776 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d01c      	beq.n	8003734 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fa:	4b19      	ldr	r3, [pc, #100]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 80036fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003700:	4a17      	ldr	r2, [pc, #92]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370a:	f7fe f9a1 	bl	8001a50 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003712:	f7fe f99d 	bl	8001a50 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e1ef      	b.n	8003b04 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003724:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0ef      	beq.n	8003712 <HAL_RCC_OscConfig+0x22e>
 8003732:	e020      	b.n	8003776 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800373a:	4a09      	ldr	r2, [pc, #36]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 800373c:	f023 0301 	bic.w	r3, r3, #1
 8003740:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003744:	f7fe f984 	bl	8001a50 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800374a:	e00d      	b.n	8003768 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800374c:	f7fe f980 	bl	8001a50 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d906      	bls.n	8003768 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e1d2      	b.n	8003b04 <HAL_RCC_OscConfig+0x620>
 800375e:	bf00      	nop
 8003760:	40021000 	.word	0x40021000
 8003764:	200000c0 	.word	0x200000c0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003768:	4b8c      	ldr	r3, [pc, #560]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 800376a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1ea      	bne.n	800374c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 80a6 	beq.w	80038d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003784:	2300      	movs	r3, #0
 8003786:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003788:	4b84      	ldr	r3, [pc, #528]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 800378a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_RCC_OscConfig+0x2b4>
 8003794:	2301      	movs	r3, #1
 8003796:	e000      	b.n	800379a <HAL_RCC_OscConfig+0x2b6>
 8003798:	2300      	movs	r3, #0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00d      	beq.n	80037ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800379e:	4b7f      	ldr	r3, [pc, #508]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 80037a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a2:	4a7e      	ldr	r2, [pc, #504]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 80037a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a8:	6593      	str	r3, [r2, #88]	; 0x58
 80037aa:	4b7c      	ldr	r3, [pc, #496]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80037b6:	2301      	movs	r3, #1
 80037b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ba:	4b79      	ldr	r3, [pc, #484]	; (80039a0 <HAL_RCC_OscConfig+0x4bc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d118      	bne.n	80037f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037c6:	4b76      	ldr	r3, [pc, #472]	; (80039a0 <HAL_RCC_OscConfig+0x4bc>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a75      	ldr	r2, [pc, #468]	; (80039a0 <HAL_RCC_OscConfig+0x4bc>)
 80037cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d2:	f7fe f93d 	bl	8001a50 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037da:	f7fe f939 	bl	8001a50 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e18b      	b.n	8003b04 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ec:	4b6c      	ldr	r3, [pc, #432]	; (80039a0 <HAL_RCC_OscConfig+0x4bc>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d108      	bne.n	8003812 <HAL_RCC_OscConfig+0x32e>
 8003800:	4b66      	ldr	r3, [pc, #408]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	4a65      	ldr	r2, [pc, #404]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003810:	e024      	b.n	800385c <HAL_RCC_OscConfig+0x378>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b05      	cmp	r3, #5
 8003818:	d110      	bne.n	800383c <HAL_RCC_OscConfig+0x358>
 800381a:	4b60      	ldr	r3, [pc, #384]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 800381c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003820:	4a5e      	ldr	r2, [pc, #376]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003822:	f043 0304 	orr.w	r3, r3, #4
 8003826:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800382a:	4b5c      	ldr	r3, [pc, #368]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 800382c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003830:	4a5a      	ldr	r2, [pc, #360]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800383a:	e00f      	b.n	800385c <HAL_RCC_OscConfig+0x378>
 800383c:	4b57      	ldr	r3, [pc, #348]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003842:	4a56      	ldr	r2, [pc, #344]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003844:	f023 0301 	bic.w	r3, r3, #1
 8003848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800384c:	4b53      	ldr	r3, [pc, #332]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003852:	4a52      	ldr	r2, [pc, #328]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003854:	f023 0304 	bic.w	r3, r3, #4
 8003858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d016      	beq.n	8003892 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003864:	f7fe f8f4 	bl	8001a50 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800386a:	e00a      	b.n	8003882 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386c:	f7fe f8f0 	bl	8001a50 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f241 3288 	movw	r2, #5000	; 0x1388
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e140      	b.n	8003b04 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003882:	4b46      	ldr	r3, [pc, #280]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0ed      	beq.n	800386c <HAL_RCC_OscConfig+0x388>
 8003890:	e015      	b.n	80038be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003892:	f7fe f8dd 	bl	8001a50 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003898:	e00a      	b.n	80038b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389a:	f7fe f8d9 	bl	8001a50 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e129      	b.n	8003b04 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038b0:	4b3a      	ldr	r3, [pc, #232]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1ed      	bne.n	800389a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038be:	7ffb      	ldrb	r3, [r7, #31]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d105      	bne.n	80038d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c4:	4b35      	ldr	r3, [pc, #212]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 80038c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c8:	4a34      	ldr	r2, [pc, #208]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 80038ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d03c      	beq.n	8003956 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d01c      	beq.n	800391e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038e4:	4b2d      	ldr	r3, [pc, #180]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 80038e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038ea:	4a2c      	ldr	r2, [pc, #176]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f4:	f7fe f8ac 	bl	8001a50 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038fc:	f7fe f8a8 	bl	8001a50 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e0fa      	b.n	8003b04 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800390e:	4b23      	ldr	r3, [pc, #140]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003910:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0ef      	beq.n	80038fc <HAL_RCC_OscConfig+0x418>
 800391c:	e01b      	b.n	8003956 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800391e:	4b1f      	ldr	r3, [pc, #124]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003920:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003924:	4a1d      	ldr	r2, [pc, #116]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003926:	f023 0301 	bic.w	r3, r3, #1
 800392a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392e:	f7fe f88f 	bl	8001a50 <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003936:	f7fe f88b 	bl	8001a50 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e0dd      	b.n	8003b04 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003948:	4b14      	ldr	r3, [pc, #80]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 800394a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1ef      	bne.n	8003936 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 80d1 	beq.w	8003b02 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003960:	4b0e      	ldr	r3, [pc, #56]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 030c 	and.w	r3, r3, #12
 8003968:	2b0c      	cmp	r3, #12
 800396a:	f000 808b 	beq.w	8003a84 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d15e      	bne.n	8003a34 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003976:	4b09      	ldr	r3, [pc, #36]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a08      	ldr	r2, [pc, #32]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 800397c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003982:	f7fe f865 	bl	8001a50 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003988:	e00c      	b.n	80039a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398a:	f7fe f861 	bl	8001a50 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d905      	bls.n	80039a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e0b3      	b.n	8003b04 <HAL_RCC_OscConfig+0x620>
 800399c:	40021000 	.word	0x40021000
 80039a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a4:	4b59      	ldr	r3, [pc, #356]	; (8003b0c <HAL_RCC_OscConfig+0x628>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1ec      	bne.n	800398a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039b0:	4b56      	ldr	r3, [pc, #344]	; (8003b0c <HAL_RCC_OscConfig+0x628>)
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	4b56      	ldr	r3, [pc, #344]	; (8003b10 <HAL_RCC_OscConfig+0x62c>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6a11      	ldr	r1, [r2, #32]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039c0:	3a01      	subs	r2, #1
 80039c2:	0112      	lsls	r2, r2, #4
 80039c4:	4311      	orrs	r1, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80039ca:	0212      	lsls	r2, r2, #8
 80039cc:	4311      	orrs	r1, r2
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039d2:	0852      	lsrs	r2, r2, #1
 80039d4:	3a01      	subs	r2, #1
 80039d6:	0552      	lsls	r2, r2, #21
 80039d8:	4311      	orrs	r1, r2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039de:	0852      	lsrs	r2, r2, #1
 80039e0:	3a01      	subs	r2, #1
 80039e2:	0652      	lsls	r2, r2, #25
 80039e4:	4311      	orrs	r1, r2
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039ea:	06d2      	lsls	r2, r2, #27
 80039ec:	430a      	orrs	r2, r1
 80039ee:	4947      	ldr	r1, [pc, #284]	; (8003b0c <HAL_RCC_OscConfig+0x628>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039f4:	4b45      	ldr	r3, [pc, #276]	; (8003b0c <HAL_RCC_OscConfig+0x628>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a44      	ldr	r2, [pc, #272]	; (8003b0c <HAL_RCC_OscConfig+0x628>)
 80039fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a00:	4b42      	ldr	r3, [pc, #264]	; (8003b0c <HAL_RCC_OscConfig+0x628>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4a41      	ldr	r2, [pc, #260]	; (8003b0c <HAL_RCC_OscConfig+0x628>)
 8003a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a0a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0c:	f7fe f820 	bl	8001a50 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a14:	f7fe f81c 	bl	8001a50 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e06e      	b.n	8003b04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a26:	4b39      	ldr	r3, [pc, #228]	; (8003b0c <HAL_RCC_OscConfig+0x628>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0x530>
 8003a32:	e066      	b.n	8003b02 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a34:	4b35      	ldr	r3, [pc, #212]	; (8003b0c <HAL_RCC_OscConfig+0x628>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a34      	ldr	r2, [pc, #208]	; (8003b0c <HAL_RCC_OscConfig+0x628>)
 8003a3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a3e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003a40:	4b32      	ldr	r3, [pc, #200]	; (8003b0c <HAL_RCC_OscConfig+0x628>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4a31      	ldr	r2, [pc, #196]	; (8003b0c <HAL_RCC_OscConfig+0x628>)
 8003a46:	f023 0303 	bic.w	r3, r3, #3
 8003a4a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003a4c:	4b2f      	ldr	r3, [pc, #188]	; (8003b0c <HAL_RCC_OscConfig+0x628>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	4a2e      	ldr	r2, [pc, #184]	; (8003b0c <HAL_RCC_OscConfig+0x628>)
 8003a52:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fd fff8 	bl	8001a50 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a64:	f7fd fff4 	bl	8001a50 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e046      	b.n	8003b04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a76:	4b25      	ldr	r3, [pc, #148]	; (8003b0c <HAL_RCC_OscConfig+0x628>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x580>
 8003a82:	e03e      	b.n	8003b02 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e039      	b.n	8003b04 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003a90:	4b1e      	ldr	r3, [pc, #120]	; (8003b0c <HAL_RCC_OscConfig+0x628>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f003 0203 	and.w	r2, r3, #3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d12c      	bne.n	8003afe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d123      	bne.n	8003afe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d11b      	bne.n	8003afe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d113      	bne.n	8003afe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	085b      	lsrs	r3, r3, #1
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d109      	bne.n	8003afe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af4:	085b      	lsrs	r3, r3, #1
 8003af6:	3b01      	subs	r3, #1
 8003af8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d001      	beq.n	8003b02 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3720      	adds	r7, #32
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	019f800c 	.word	0x019f800c

08003b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e11e      	b.n	8003d6a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b2c:	4b91      	ldr	r3, [pc, #580]	; (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 030f 	and.w	r3, r3, #15
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d910      	bls.n	8003b5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3a:	4b8e      	ldr	r3, [pc, #568]	; (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f023 020f 	bic.w	r2, r3, #15
 8003b42:	498c      	ldr	r1, [pc, #560]	; (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4a:	4b8a      	ldr	r3, [pc, #552]	; (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d001      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e106      	b.n	8003d6a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d073      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d129      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b70:	4b81      	ldr	r3, [pc, #516]	; (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0f4      	b.n	8003d6a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b80:	f000 f9d0 	bl	8003f24 <RCC_GetSysClockFreqFromPLLSource>
 8003b84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4a7c      	ldr	r2, [pc, #496]	; (8003d7c <HAL_RCC_ClockConfig+0x268>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d93f      	bls.n	8003c0e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b8e:	4b7a      	ldr	r3, [pc, #488]	; (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d009      	beq.n	8003bae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d033      	beq.n	8003c0e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d12f      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bae:	4b72      	ldr	r3, [pc, #456]	; (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bb6:	4a70      	ldr	r2, [pc, #448]	; (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003bbe:	2380      	movs	r3, #128	; 0x80
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	e024      	b.n	8003c0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d107      	bne.n	8003bdc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bcc:	4b6a      	ldr	r3, [pc, #424]	; (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d109      	bne.n	8003bec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0c6      	b.n	8003d6a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bdc:	4b66      	ldr	r3, [pc, #408]	; (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0be      	b.n	8003d6a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003bec:	f000 f8ce 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8003bf0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	4a61      	ldr	r2, [pc, #388]	; (8003d7c <HAL_RCC_ClockConfig+0x268>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d909      	bls.n	8003c0e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bfa:	4b5f      	ldr	r3, [pc, #380]	; (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c02:	4a5d      	ldr	r2, [pc, #372]	; (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c08:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c0e:	4b5a      	ldr	r3, [pc, #360]	; (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f023 0203 	bic.w	r2, r3, #3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	4957      	ldr	r1, [pc, #348]	; (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c20:	f7fd ff16 	bl	8001a50 <HAL_GetTick>
 8003c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c28:	f7fd ff12 	bl	8001a50 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e095      	b.n	8003d6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3e:	4b4e      	ldr	r3, [pc, #312]	; (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 020c 	and.w	r2, r3, #12
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d1eb      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d023      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c68:	4b43      	ldr	r3, [pc, #268]	; (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	4a42      	ldr	r2, [pc, #264]	; (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003c6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c72:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d007      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003c80:	4b3d      	ldr	r3, [pc, #244]	; (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c88:	4a3b      	ldr	r2, [pc, #236]	; (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003c8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c90:	4b39      	ldr	r3, [pc, #228]	; (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	4936      	ldr	r1, [pc, #216]	; (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	608b      	str	r3, [r1, #8]
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2b80      	cmp	r3, #128	; 0x80
 8003ca8:	d105      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003caa:	4b33      	ldr	r3, [pc, #204]	; (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	4a32      	ldr	r2, [pc, #200]	; (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003cb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cb4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb6:	4b2f      	ldr	r3, [pc, #188]	; (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d21d      	bcs.n	8003d00 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc4:	4b2b      	ldr	r3, [pc, #172]	; (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f023 020f 	bic.w	r2, r3, #15
 8003ccc:	4929      	ldr	r1, [pc, #164]	; (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003cd4:	f7fd febc 	bl	8001a50 <HAL_GetTick>
 8003cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cda:	e00a      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cdc:	f7fd feb8 	bl	8001a50 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e03b      	b.n	8003d6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf2:	4b20      	ldr	r3, [pc, #128]	; (8003d74 <HAL_RCC_ClockConfig+0x260>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d1ed      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d0c:	4b1a      	ldr	r3, [pc, #104]	; (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	4917      	ldr	r1, [pc, #92]	; (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d009      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d2a:	4b13      	ldr	r3, [pc, #76]	; (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	490f      	ldr	r1, [pc, #60]	; (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d3e:	f000 f825 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8003d42:	4602      	mov	r2, r0
 8003d44:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <HAL_RCC_ClockConfig+0x264>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	091b      	lsrs	r3, r3, #4
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	490c      	ldr	r1, [pc, #48]	; (8003d80 <HAL_RCC_ClockConfig+0x26c>)
 8003d50:	5ccb      	ldrb	r3, [r1, r3]
 8003d52:	f003 031f 	and.w	r3, r3, #31
 8003d56:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5a:	4a0a      	ldr	r2, [pc, #40]	; (8003d84 <HAL_RCC_ClockConfig+0x270>)
 8003d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d5e:	4b0a      	ldr	r3, [pc, #40]	; (8003d88 <HAL_RCC_ClockConfig+0x274>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fc ff66 	bl	8000c34 <HAL_InitTick>
 8003d68:	4603      	mov	r3, r0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40022000 	.word	0x40022000
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	04c4b400 	.word	0x04c4b400
 8003d80:	080098fc 	.word	0x080098fc
 8003d84:	20000000 	.word	0x20000000
 8003d88:	200000c0 	.word	0x200000c0

08003d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d92:	4b2c      	ldr	r3, [pc, #176]	; (8003e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 030c 	and.w	r3, r3, #12
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d102      	bne.n	8003da4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d9e:	4b2a      	ldr	r3, [pc, #168]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	e047      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003da4:	4b27      	ldr	r3, [pc, #156]	; (8003e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 030c 	and.w	r3, r3, #12
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d102      	bne.n	8003db6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003db0:	4b26      	ldr	r3, [pc, #152]	; (8003e4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	e03e      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003db6:	4b23      	ldr	r3, [pc, #140]	; (8003e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 030c 	and.w	r3, r3, #12
 8003dbe:	2b0c      	cmp	r3, #12
 8003dc0:	d136      	bne.n	8003e30 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dc2:	4b20      	ldr	r3, [pc, #128]	; (8003e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	091b      	lsrs	r3, r3, #4
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	d10c      	bne.n	8003dfa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003de0:	4a1a      	ldr	r2, [pc, #104]	; (8003e4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de8:	4a16      	ldr	r2, [pc, #88]	; (8003e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dea:	68d2      	ldr	r2, [r2, #12]
 8003dec:	0a12      	lsrs	r2, r2, #8
 8003dee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003df2:	fb02 f303 	mul.w	r3, r2, r3
 8003df6:	617b      	str	r3, [r7, #20]
      break;
 8003df8:	e00c      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dfa:	4a13      	ldr	r2, [pc, #76]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e02:	4a10      	ldr	r2, [pc, #64]	; (8003e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e04:	68d2      	ldr	r2, [r2, #12]
 8003e06:	0a12      	lsrs	r2, r2, #8
 8003e08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e0c:	fb02 f303 	mul.w	r3, r2, r3
 8003e10:	617b      	str	r3, [r7, #20]
      break;
 8003e12:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	0e5b      	lsrs	r3, r3, #25
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	3301      	adds	r3, #1
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	e001      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e34:	693b      	ldr	r3, [r7, #16]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40021000 	.word	0x40021000
 8003e48:	00f42400 	.word	0x00f42400
 8003e4c:	016e3600 	.word	0x016e3600

08003e50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e54:	4b03      	ldr	r3, [pc, #12]	; (8003e64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e56:	681b      	ldr	r3, [r3, #0]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	20000000 	.word	0x20000000

08003e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e6c:	f7ff fff0 	bl	8003e50 <HAL_RCC_GetHCLKFreq>
 8003e70:	4602      	mov	r2, r0
 8003e72:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	0a1b      	lsrs	r3, r3, #8
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	4904      	ldr	r1, [pc, #16]	; (8003e90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e7e:	5ccb      	ldrb	r3, [r1, r3]
 8003e80:	f003 031f 	and.w	r3, r3, #31
 8003e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	0800990c 	.word	0x0800990c

08003e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e98:	f7ff ffda 	bl	8003e50 <HAL_RCC_GetHCLKFreq>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	0adb      	lsrs	r3, r3, #11
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	4904      	ldr	r1, [pc, #16]	; (8003ebc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eaa:	5ccb      	ldrb	r3, [r1, r3]
 8003eac:	f003 031f 	and.w	r3, r3, #31
 8003eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	0800990c 	.word	0x0800990c

08003ec0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	220f      	movs	r2, #15
 8003ece:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003ed0:	4b12      	ldr	r3, [pc, #72]	; (8003f1c <HAL_RCC_GetClockConfig+0x5c>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 0203 	and.w	r2, r3, #3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003edc:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <HAL_RCC_GetClockConfig+0x5c>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <HAL_RCC_GetClockConfig+0x5c>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003ef4:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <HAL_RCC_GetClockConfig+0x5c>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	08db      	lsrs	r3, r3, #3
 8003efa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003f02:	4b07      	ldr	r3, [pc, #28]	; (8003f20 <HAL_RCC_GetClockConfig+0x60>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 020f 	and.w	r2, r3, #15
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	601a      	str	r2, [r3, #0]
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	40022000 	.word	0x40022000

08003f24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f2a:	4b1e      	ldr	r3, [pc, #120]	; (8003fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f34:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	091b      	lsrs	r3, r3, #4
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	3301      	adds	r3, #1
 8003f40:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d10c      	bne.n	8003f62 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f48:	4a17      	ldr	r2, [pc, #92]	; (8003fa8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f50:	4a14      	ldr	r2, [pc, #80]	; (8003fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f52:	68d2      	ldr	r2, [r2, #12]
 8003f54:	0a12      	lsrs	r2, r2, #8
 8003f56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f5a:	fb02 f303 	mul.w	r3, r2, r3
 8003f5e:	617b      	str	r3, [r7, #20]
    break;
 8003f60:	e00c      	b.n	8003f7c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f62:	4a12      	ldr	r2, [pc, #72]	; (8003fac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6a:	4a0e      	ldr	r2, [pc, #56]	; (8003fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f6c:	68d2      	ldr	r2, [r2, #12]
 8003f6e:	0a12      	lsrs	r2, r2, #8
 8003f70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f74:	fb02 f303 	mul.w	r3, r2, r3
 8003f78:	617b      	str	r3, [r7, #20]
    break;
 8003f7a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f7c:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	0e5b      	lsrs	r3, r3, #25
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	3301      	adds	r3, #1
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f94:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003f96:	687b      	ldr	r3, [r7, #4]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	371c      	adds	r7, #28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	016e3600 	.word	0x016e3600
 8003fac:	00f42400 	.word	0x00f42400

08003fb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fb8:	2300      	movs	r3, #0
 8003fba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 8098 	beq.w	80040fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fd2:	4b43      	ldr	r3, [pc, #268]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10d      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fde:	4b40      	ldr	r3, [pc, #256]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe2:	4a3f      	ldr	r2, [pc, #252]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8003fea:	4b3d      	ldr	r3, [pc, #244]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	60bb      	str	r3, [r7, #8]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ffa:	4b3a      	ldr	r3, [pc, #232]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a39      	ldr	r2, [pc, #228]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004004:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004006:	f7fd fd23 	bl	8001a50 <HAL_GetTick>
 800400a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800400c:	e009      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800400e:	f7fd fd1f 	bl	8001a50 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d902      	bls.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	74fb      	strb	r3, [r7, #19]
        break;
 8004020:	e005      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004022:	4b30      	ldr	r3, [pc, #192]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0ef      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800402e:	7cfb      	ldrb	r3, [r7, #19]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d159      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004034:	4b2a      	ldr	r3, [pc, #168]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800403e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d01e      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	429a      	cmp	r2, r3
 800404e:	d019      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004050:	4b23      	ldr	r3, [pc, #140]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800405c:	4b20      	ldr	r3, [pc, #128]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004062:	4a1f      	ldr	r2, [pc, #124]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800406c:	4b1c      	ldr	r3, [pc, #112]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	4a1b      	ldr	r2, [pc, #108]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800407c:	4a18      	ldr	r2, [pc, #96]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d016      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408e:	f7fd fcdf 	bl	8001a50 <HAL_GetTick>
 8004092:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004094:	e00b      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004096:	f7fd fcdb 	bl	8001a50 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d902      	bls.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	74fb      	strb	r3, [r7, #19]
            break;
 80040ac:	e006      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ae:	4b0c      	ldr	r3, [pc, #48]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0ec      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10b      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040c2:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d0:	4903      	ldr	r1, [pc, #12]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040d8:	e008      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040da:	7cfb      	ldrb	r3, [r7, #19]
 80040dc:	74bb      	strb	r3, [r7, #18]
 80040de:	e005      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80040e0:	40021000 	.word	0x40021000
 80040e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e8:	7cfb      	ldrb	r3, [r7, #19]
 80040ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040ec:	7c7b      	ldrb	r3, [r7, #17]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d105      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040f2:	4ba7      	ldr	r3, [pc, #668]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f6:	4aa6      	ldr	r2, [pc, #664]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800410a:	4ba1      	ldr	r3, [pc, #644]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004110:	f023 0203 	bic.w	r2, r3, #3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	499d      	ldr	r1, [pc, #628]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800412c:	4b98      	ldr	r3, [pc, #608]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004132:	f023 020c 	bic.w	r2, r3, #12
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	4995      	ldr	r1, [pc, #596]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800414e:	4b90      	ldr	r3, [pc, #576]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004154:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	498c      	ldr	r1, [pc, #560]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0308 	and.w	r3, r3, #8
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004170:	4b87      	ldr	r3, [pc, #540]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004176:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	4984      	ldr	r1, [pc, #528]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0310 	and.w	r3, r3, #16
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004192:	4b7f      	ldr	r3, [pc, #508]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004198:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	497b      	ldr	r1, [pc, #492]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0320 	and.w	r3, r3, #32
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041b4:	4b76      	ldr	r3, [pc, #472]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	4973      	ldr	r1, [pc, #460]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041d6:	4b6e      	ldr	r3, [pc, #440]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	496a      	ldr	r1, [pc, #424]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041f8:	4b65      	ldr	r3, [pc, #404]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	4962      	ldr	r1, [pc, #392]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800421a:	4b5d      	ldr	r3, [pc, #372]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800421c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004220:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	4959      	ldr	r1, [pc, #356]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800423c:	4b54      	ldr	r3, [pc, #336]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800423e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004242:	f023 0203 	bic.w	r2, r3, #3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424a:	4951      	ldr	r1, [pc, #324]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800425e:	4b4c      	ldr	r3, [pc, #304]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004264:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	4948      	ldr	r1, [pc, #288]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800427c:	2b00      	cmp	r3, #0
 800427e:	d015      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004280:	4b43      	ldr	r3, [pc, #268]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004286:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	4940      	ldr	r1, [pc, #256]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800429e:	d105      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042a0:	4b3b      	ldr	r3, [pc, #236]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	4a3a      	ldr	r2, [pc, #232]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d015      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042b8:	4b35      	ldr	r3, [pc, #212]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c6:	4932      	ldr	r1, [pc, #200]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042d6:	d105      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042d8:	4b2d      	ldr	r3, [pc, #180]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	4a2c      	ldr	r2, [pc, #176]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042e2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d015      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80042f0:	4b27      	ldr	r3, [pc, #156]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fe:	4924      	ldr	r1, [pc, #144]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004300:	4313      	orrs	r3, r2
 8004302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800430e:	d105      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004310:	4b1f      	ldr	r3, [pc, #124]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	4a1e      	ldr	r2, [pc, #120]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800431a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d015      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004328:	4b19      	ldr	r3, [pc, #100]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004336:	4916      	ldr	r1, [pc, #88]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004338:	4313      	orrs	r3, r2
 800433a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004346:	d105      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004348:	4b11      	ldr	r3, [pc, #68]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	4a10      	ldr	r2, [pc, #64]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800434e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004352:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d019      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004360:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004366:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	4908      	ldr	r1, [pc, #32]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800437e:	d109      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004380:	4b03      	ldr	r3, [pc, #12]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	4a02      	ldr	r2, [pc, #8]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800438a:	60d3      	str	r3, [r2, #12]
 800438c:	e002      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800438e:	bf00      	nop
 8004390:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d015      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80043a0:	4b29      	ldr	r3, [pc, #164]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	4926      	ldr	r1, [pc, #152]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043be:	d105      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043c0:	4b21      	ldr	r3, [pc, #132]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4a20      	ldr	r2, [pc, #128]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d015      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80043d8:	4b1b      	ldr	r3, [pc, #108]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043de:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043e6:	4918      	ldr	r1, [pc, #96]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f6:	d105      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043f8:	4b13      	ldr	r3, [pc, #76]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	4a12      	ldr	r2, [pc, #72]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004402:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d015      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004410:	4b0d      	ldr	r3, [pc, #52]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004412:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004416:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441e:	490a      	ldr	r1, [pc, #40]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800442a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800442e:	d105      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004430:	4b05      	ldr	r3, [pc, #20]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4a04      	ldr	r2, [pc, #16]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800443a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800443c:	7cbb      	ldrb	r3, [r7, #18]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40021000 	.word	0x40021000

0800444c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e049      	b.n	80044f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fc fe88 	bl	8001188 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3304      	adds	r3, #4
 8004488:	4619      	mov	r1, r3
 800448a:	4610      	mov	r0, r2
 800448c:	f000 fe90 	bl	80051b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b01      	cmp	r3, #1
 800450e:	d001      	beq.n	8004514 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e054      	b.n	80045be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a26      	ldr	r2, [pc, #152]	; (80045cc <HAL_TIM_Base_Start_IT+0xd0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d022      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x80>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800453e:	d01d      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x80>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a22      	ldr	r2, [pc, #136]	; (80045d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d018      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x80>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a21      	ldr	r2, [pc, #132]	; (80045d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d013      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x80>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a1f      	ldr	r2, [pc, #124]	; (80045d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00e      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x80>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a1e      	ldr	r2, [pc, #120]	; (80045dc <HAL_TIM_Base_Start_IT+0xe0>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d009      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x80>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a1c      	ldr	r2, [pc, #112]	; (80045e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d004      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x80>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a1b      	ldr	r2, [pc, #108]	; (80045e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d115      	bne.n	80045a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	4b19      	ldr	r3, [pc, #100]	; (80045e8 <HAL_TIM_Base_Start_IT+0xec>)
 8004584:	4013      	ands	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b06      	cmp	r3, #6
 800458c:	d015      	beq.n	80045ba <HAL_TIM_Base_Start_IT+0xbe>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004594:	d011      	beq.n	80045ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0201 	orr.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a6:	e008      	b.n	80045ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0201 	orr.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	e000      	b.n	80045bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40012c00 	.word	0x40012c00
 80045d0:	40000400 	.word	0x40000400
 80045d4:	40000800 	.word	0x40000800
 80045d8:	40000c00 	.word	0x40000c00
 80045dc:	40013400 	.word	0x40013400
 80045e0:	40014000 	.word	0x40014000
 80045e4:	40015000 	.word	0x40015000
 80045e8:	00010007 	.word	0x00010007

080045ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e049      	b.n	8004692 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f841 	bl	800469a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3304      	adds	r3, #4
 8004628:	4619      	mov	r1, r3
 800462a:	4610      	mov	r0, r2
 800462c:	f000 fdc0 	bl	80051b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
	...

080046b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d109      	bne.n	80046d4 <HAL_TIM_PWM_Start+0x24>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	bf14      	ite	ne
 80046cc:	2301      	movne	r3, #1
 80046ce:	2300      	moveq	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	e03c      	b.n	800474e <HAL_TIM_PWM_Start+0x9e>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d109      	bne.n	80046ee <HAL_TIM_PWM_Start+0x3e>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	bf14      	ite	ne
 80046e6:	2301      	movne	r3, #1
 80046e8:	2300      	moveq	r3, #0
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	e02f      	b.n	800474e <HAL_TIM_PWM_Start+0x9e>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d109      	bne.n	8004708 <HAL_TIM_PWM_Start+0x58>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	bf14      	ite	ne
 8004700:	2301      	movne	r3, #1
 8004702:	2300      	moveq	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	e022      	b.n	800474e <HAL_TIM_PWM_Start+0x9e>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b0c      	cmp	r3, #12
 800470c:	d109      	bne.n	8004722 <HAL_TIM_PWM_Start+0x72>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b01      	cmp	r3, #1
 8004718:	bf14      	ite	ne
 800471a:	2301      	movne	r3, #1
 800471c:	2300      	moveq	r3, #0
 800471e:	b2db      	uxtb	r3, r3
 8004720:	e015      	b.n	800474e <HAL_TIM_PWM_Start+0x9e>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b10      	cmp	r3, #16
 8004726:	d109      	bne.n	800473c <HAL_TIM_PWM_Start+0x8c>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b01      	cmp	r3, #1
 8004732:	bf14      	ite	ne
 8004734:	2301      	movne	r3, #1
 8004736:	2300      	moveq	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	e008      	b.n	800474e <HAL_TIM_PWM_Start+0x9e>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b01      	cmp	r3, #1
 8004746:	bf14      	ite	ne
 8004748:	2301      	movne	r3, #1
 800474a:	2300      	moveq	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e0a6      	b.n	80048a4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d104      	bne.n	8004766 <HAL_TIM_PWM_Start+0xb6>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004764:	e023      	b.n	80047ae <HAL_TIM_PWM_Start+0xfe>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b04      	cmp	r3, #4
 800476a:	d104      	bne.n	8004776 <HAL_TIM_PWM_Start+0xc6>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004774:	e01b      	b.n	80047ae <HAL_TIM_PWM_Start+0xfe>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b08      	cmp	r3, #8
 800477a:	d104      	bne.n	8004786 <HAL_TIM_PWM_Start+0xd6>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004784:	e013      	b.n	80047ae <HAL_TIM_PWM_Start+0xfe>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b0c      	cmp	r3, #12
 800478a:	d104      	bne.n	8004796 <HAL_TIM_PWM_Start+0xe6>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004794:	e00b      	b.n	80047ae <HAL_TIM_PWM_Start+0xfe>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b10      	cmp	r3, #16
 800479a:	d104      	bne.n	80047a6 <HAL_TIM_PWM_Start+0xf6>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047a4:	e003      	b.n	80047ae <HAL_TIM_PWM_Start+0xfe>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2202      	movs	r2, #2
 80047aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2201      	movs	r2, #1
 80047b4:	6839      	ldr	r1, [r7, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f001 f9dc 	bl	8005b74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a3a      	ldr	r2, [pc, #232]	; (80048ac <HAL_TIM_PWM_Start+0x1fc>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d018      	beq.n	80047f8 <HAL_TIM_PWM_Start+0x148>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a39      	ldr	r2, [pc, #228]	; (80048b0 <HAL_TIM_PWM_Start+0x200>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d013      	beq.n	80047f8 <HAL_TIM_PWM_Start+0x148>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a37      	ldr	r2, [pc, #220]	; (80048b4 <HAL_TIM_PWM_Start+0x204>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00e      	beq.n	80047f8 <HAL_TIM_PWM_Start+0x148>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a36      	ldr	r2, [pc, #216]	; (80048b8 <HAL_TIM_PWM_Start+0x208>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d009      	beq.n	80047f8 <HAL_TIM_PWM_Start+0x148>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a34      	ldr	r2, [pc, #208]	; (80048bc <HAL_TIM_PWM_Start+0x20c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d004      	beq.n	80047f8 <HAL_TIM_PWM_Start+0x148>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a33      	ldr	r2, [pc, #204]	; (80048c0 <HAL_TIM_PWM_Start+0x210>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d101      	bne.n	80047fc <HAL_TIM_PWM_Start+0x14c>
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <HAL_TIM_PWM_Start+0x14e>
 80047fc:	2300      	movs	r3, #0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d007      	beq.n	8004812 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004810:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a25      	ldr	r2, [pc, #148]	; (80048ac <HAL_TIM_PWM_Start+0x1fc>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d022      	beq.n	8004862 <HAL_TIM_PWM_Start+0x1b2>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004824:	d01d      	beq.n	8004862 <HAL_TIM_PWM_Start+0x1b2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a26      	ldr	r2, [pc, #152]	; (80048c4 <HAL_TIM_PWM_Start+0x214>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d018      	beq.n	8004862 <HAL_TIM_PWM_Start+0x1b2>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a24      	ldr	r2, [pc, #144]	; (80048c8 <HAL_TIM_PWM_Start+0x218>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d013      	beq.n	8004862 <HAL_TIM_PWM_Start+0x1b2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a23      	ldr	r2, [pc, #140]	; (80048cc <HAL_TIM_PWM_Start+0x21c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d00e      	beq.n	8004862 <HAL_TIM_PWM_Start+0x1b2>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a19      	ldr	r2, [pc, #100]	; (80048b0 <HAL_TIM_PWM_Start+0x200>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d009      	beq.n	8004862 <HAL_TIM_PWM_Start+0x1b2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a18      	ldr	r2, [pc, #96]	; (80048b4 <HAL_TIM_PWM_Start+0x204>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d004      	beq.n	8004862 <HAL_TIM_PWM_Start+0x1b2>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a18      	ldr	r2, [pc, #96]	; (80048c0 <HAL_TIM_PWM_Start+0x210>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d115      	bne.n	800488e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	4b19      	ldr	r3, [pc, #100]	; (80048d0 <HAL_TIM_PWM_Start+0x220>)
 800486a:	4013      	ands	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2b06      	cmp	r3, #6
 8004872:	d015      	beq.n	80048a0 <HAL_TIM_PWM_Start+0x1f0>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800487a:	d011      	beq.n	80048a0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488c:	e008      	b.n	80048a0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f042 0201 	orr.w	r2, r2, #1
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	e000      	b.n	80048a2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40012c00 	.word	0x40012c00
 80048b0:	40013400 	.word	0x40013400
 80048b4:	40014000 	.word	0x40014000
 80048b8:	40014400 	.word	0x40014400
 80048bc:	40014800 	.word	0x40014800
 80048c0:	40015000 	.word	0x40015000
 80048c4:	40000400 	.word	0x40000400
 80048c8:	40000800 	.word	0x40000800
 80048cc:	40000c00 	.word	0x40000c00
 80048d0:	00010007 	.word	0x00010007

080048d4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2200      	movs	r2, #0
 80048e4:	6839      	ldr	r1, [r7, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f001 f944 	bl	8005b74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a40      	ldr	r2, [pc, #256]	; (80049f4 <HAL_TIM_PWM_Stop+0x120>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d018      	beq.n	8004928 <HAL_TIM_PWM_Stop+0x54>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a3f      	ldr	r2, [pc, #252]	; (80049f8 <HAL_TIM_PWM_Stop+0x124>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d013      	beq.n	8004928 <HAL_TIM_PWM_Stop+0x54>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a3d      	ldr	r2, [pc, #244]	; (80049fc <HAL_TIM_PWM_Stop+0x128>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00e      	beq.n	8004928 <HAL_TIM_PWM_Stop+0x54>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a3c      	ldr	r2, [pc, #240]	; (8004a00 <HAL_TIM_PWM_Stop+0x12c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d009      	beq.n	8004928 <HAL_TIM_PWM_Stop+0x54>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a3a      	ldr	r2, [pc, #232]	; (8004a04 <HAL_TIM_PWM_Stop+0x130>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d004      	beq.n	8004928 <HAL_TIM_PWM_Stop+0x54>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a39      	ldr	r2, [pc, #228]	; (8004a08 <HAL_TIM_PWM_Stop+0x134>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d101      	bne.n	800492c <HAL_TIM_PWM_Stop+0x58>
 8004928:	2301      	movs	r3, #1
 800492a:	e000      	b.n	800492e <HAL_TIM_PWM_Stop+0x5a>
 800492c:	2300      	movs	r3, #0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d017      	beq.n	8004962 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6a1a      	ldr	r2, [r3, #32]
 8004938:	f241 1311 	movw	r3, #4369	; 0x1111
 800493c:	4013      	ands	r3, r2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10f      	bne.n	8004962 <HAL_TIM_PWM_Stop+0x8e>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6a1a      	ldr	r2, [r3, #32]
 8004948:	f244 4344 	movw	r3, #17476	; 0x4444
 800494c:	4013      	ands	r3, r2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d107      	bne.n	8004962 <HAL_TIM_PWM_Stop+0x8e>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004960:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6a1a      	ldr	r2, [r3, #32]
 8004968:	f241 1311 	movw	r3, #4369	; 0x1111
 800496c:	4013      	ands	r3, r2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10f      	bne.n	8004992 <HAL_TIM_PWM_Stop+0xbe>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6a1a      	ldr	r2, [r3, #32]
 8004978:	f244 4344 	movw	r3, #17476	; 0x4444
 800497c:	4013      	ands	r3, r2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d107      	bne.n	8004992 <HAL_TIM_PWM_Stop+0xbe>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0201 	bic.w	r2, r2, #1
 8004990:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d104      	bne.n	80049a2 <HAL_TIM_PWM_Stop+0xce>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049a0:	e023      	b.n	80049ea <HAL_TIM_PWM_Stop+0x116>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d104      	bne.n	80049b2 <HAL_TIM_PWM_Stop+0xde>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049b0:	e01b      	b.n	80049ea <HAL_TIM_PWM_Stop+0x116>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d104      	bne.n	80049c2 <HAL_TIM_PWM_Stop+0xee>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049c0:	e013      	b.n	80049ea <HAL_TIM_PWM_Stop+0x116>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b0c      	cmp	r3, #12
 80049c6:	d104      	bne.n	80049d2 <HAL_TIM_PWM_Stop+0xfe>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049d0:	e00b      	b.n	80049ea <HAL_TIM_PWM_Stop+0x116>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b10      	cmp	r3, #16
 80049d6:	d104      	bne.n	80049e2 <HAL_TIM_PWM_Stop+0x10e>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049e0:	e003      	b.n	80049ea <HAL_TIM_PWM_Stop+0x116>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40012c00 	.word	0x40012c00
 80049f8:	40013400 	.word	0x40013400
 80049fc:	40014000 	.word	0x40014000
 8004a00:	40014400 	.word	0x40014400
 8004a04:	40014800 	.word	0x40014800
 8004a08:	40015000 	.word	0x40015000

08004a0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d122      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d11b      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0202 	mvn.w	r2, #2
 8004a38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fb90 	bl	8005174 <HAL_TIM_IC_CaptureCallback>
 8004a54:	e005      	b.n	8004a62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fb82 	bl	8005160 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fb93 	bl	8005188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d122      	bne.n	8004abc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d11b      	bne.n	8004abc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0204 	mvn.w	r2, #4
 8004a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2202      	movs	r2, #2
 8004a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fb66 	bl	8005174 <HAL_TIM_IC_CaptureCallback>
 8004aa8:	e005      	b.n	8004ab6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fb58 	bl	8005160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fb69 	bl	8005188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b08      	cmp	r3, #8
 8004ac8:	d122      	bne.n	8004b10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f003 0308 	and.w	r3, r3, #8
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d11b      	bne.n	8004b10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f06f 0208 	mvn.w	r2, #8
 8004ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2204      	movs	r2, #4
 8004ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fb3c 	bl	8005174 <HAL_TIM_IC_CaptureCallback>
 8004afc:	e005      	b.n	8004b0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fb2e 	bl	8005160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fb3f 	bl	8005188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	f003 0310 	and.w	r3, r3, #16
 8004b1a:	2b10      	cmp	r3, #16
 8004b1c:	d122      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	2b10      	cmp	r3, #16
 8004b2a:	d11b      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f06f 0210 	mvn.w	r2, #16
 8004b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2208      	movs	r2, #8
 8004b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fb12 	bl	8005174 <HAL_TIM_IC_CaptureCallback>
 8004b50:	e005      	b.n	8004b5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fb04 	bl	8005160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 fb15 	bl	8005188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d10e      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d107      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f06f 0201 	mvn.w	r2, #1
 8004b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7fc f816 	bl	8000bbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9a:	2b80      	cmp	r3, #128	; 0x80
 8004b9c:	d10e      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba8:	2b80      	cmp	r3, #128	; 0x80
 8004baa:	d107      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f001 fb22 	bl	8006200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bca:	d10e      	bne.n	8004bea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd6:	2b80      	cmp	r3, #128	; 0x80
 8004bd8:	d107      	bne.n	8004bea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f001 fb15 	bl	8006214 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf4:	2b40      	cmp	r3, #64	; 0x40
 8004bf6:	d10e      	bne.n	8004c16 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c02:	2b40      	cmp	r3, #64	; 0x40
 8004c04:	d107      	bne.n	8004c16 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 fac3 	bl	800519c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f003 0320 	and.w	r3, r3, #32
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d10e      	bne.n	8004c42 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b20      	cmp	r3, #32
 8004c30:	d107      	bne.n	8004c42 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f06f 0220 	mvn.w	r2, #32
 8004c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f001 fad5 	bl	80061ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c50:	d10f      	bne.n	8004c72 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c60:	d107      	bne.n	8004c72 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f001 fadb 	bl	8006228 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c80:	d10f      	bne.n	8004ca2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c90:	d107      	bne.n	8004ca2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f001 facd 	bl	800623c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cb0:	d10f      	bne.n	8004cd2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cc0:	d107      	bne.n	8004cd2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f001 fabf 	bl	8006250 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ce0:	d10f      	bne.n	8004d02 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cf0:	d107      	bne.n	8004d02 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f001 fab1 	bl	8006264 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d02:	bf00      	nop
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d101      	bne.n	8004d2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d26:	2302      	movs	r3, #2
 8004d28:	e0ff      	b.n	8004f2a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b14      	cmp	r3, #20
 8004d36:	f200 80f0 	bhi.w	8004f1a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d3a:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d40:	08004d95 	.word	0x08004d95
 8004d44:	08004f1b 	.word	0x08004f1b
 8004d48:	08004f1b 	.word	0x08004f1b
 8004d4c:	08004f1b 	.word	0x08004f1b
 8004d50:	08004dd5 	.word	0x08004dd5
 8004d54:	08004f1b 	.word	0x08004f1b
 8004d58:	08004f1b 	.word	0x08004f1b
 8004d5c:	08004f1b 	.word	0x08004f1b
 8004d60:	08004e17 	.word	0x08004e17
 8004d64:	08004f1b 	.word	0x08004f1b
 8004d68:	08004f1b 	.word	0x08004f1b
 8004d6c:	08004f1b 	.word	0x08004f1b
 8004d70:	08004e57 	.word	0x08004e57
 8004d74:	08004f1b 	.word	0x08004f1b
 8004d78:	08004f1b 	.word	0x08004f1b
 8004d7c:	08004f1b 	.word	0x08004f1b
 8004d80:	08004e99 	.word	0x08004e99
 8004d84:	08004f1b 	.word	0x08004f1b
 8004d88:	08004f1b 	.word	0x08004f1b
 8004d8c:	08004f1b 	.word	0x08004f1b
 8004d90:	08004ed9 	.word	0x08004ed9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68b9      	ldr	r1, [r7, #8]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fab0 	bl	8005300 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699a      	ldr	r2, [r3, #24]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0208 	orr.w	r2, r2, #8
 8004dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699a      	ldr	r2, [r3, #24]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0204 	bic.w	r2, r2, #4
 8004dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6999      	ldr	r1, [r3, #24]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	691a      	ldr	r2, [r3, #16]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	619a      	str	r2, [r3, #24]
      break;
 8004dd2:	e0a5      	b.n	8004f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68b9      	ldr	r1, [r7, #8]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fb2a 	bl	8005434 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6999      	ldr	r1, [r3, #24]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	021a      	lsls	r2, r3, #8
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	619a      	str	r2, [r3, #24]
      break;
 8004e14:	e084      	b.n	8004f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68b9      	ldr	r1, [r7, #8]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fb9d 	bl	800555c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69da      	ldr	r2, [r3, #28]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f042 0208 	orr.w	r2, r2, #8
 8004e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69da      	ldr	r2, [r3, #28]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0204 	bic.w	r2, r2, #4
 8004e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69d9      	ldr	r1, [r3, #28]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	61da      	str	r2, [r3, #28]
      break;
 8004e54:	e064      	b.n	8004f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fc0f 	bl	8005680 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69da      	ldr	r2, [r3, #28]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69d9      	ldr	r1, [r3, #28]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	021a      	lsls	r2, r3, #8
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	61da      	str	r2, [r3, #28]
      break;
 8004e96:	e043      	b.n	8004f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68b9      	ldr	r1, [r7, #8]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fc82 	bl	80057a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0208 	orr.w	r2, r2, #8
 8004eb2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0204 	bic.w	r2, r2, #4
 8004ec2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	691a      	ldr	r2, [r3, #16]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004ed6:	e023      	b.n	8004f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68b9      	ldr	r1, [r7, #8]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fccc 	bl	800587c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ef2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f02:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	021a      	lsls	r2, r3, #8
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004f18:	e002      	b.n	8004f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop

08004f34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_TIM_ConfigClockSource+0x1c>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e0f6      	b.n	800513e <HAL_TIM_ConfigClockSource+0x20a>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004f6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a6f      	ldr	r2, [pc, #444]	; (8005148 <HAL_TIM_ConfigClockSource+0x214>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	f000 80c1 	beq.w	8005112 <HAL_TIM_ConfigClockSource+0x1de>
 8004f90:	4a6d      	ldr	r2, [pc, #436]	; (8005148 <HAL_TIM_ConfigClockSource+0x214>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	f200 80c6 	bhi.w	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f98:	4a6c      	ldr	r2, [pc, #432]	; (800514c <HAL_TIM_ConfigClockSource+0x218>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	f000 80b9 	beq.w	8005112 <HAL_TIM_ConfigClockSource+0x1de>
 8004fa0:	4a6a      	ldr	r2, [pc, #424]	; (800514c <HAL_TIM_ConfigClockSource+0x218>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	f200 80be 	bhi.w	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fa8:	4a69      	ldr	r2, [pc, #420]	; (8005150 <HAL_TIM_ConfigClockSource+0x21c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	f000 80b1 	beq.w	8005112 <HAL_TIM_ConfigClockSource+0x1de>
 8004fb0:	4a67      	ldr	r2, [pc, #412]	; (8005150 <HAL_TIM_ConfigClockSource+0x21c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	f200 80b6 	bhi.w	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fb8:	4a66      	ldr	r2, [pc, #408]	; (8005154 <HAL_TIM_ConfigClockSource+0x220>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	f000 80a9 	beq.w	8005112 <HAL_TIM_ConfigClockSource+0x1de>
 8004fc0:	4a64      	ldr	r2, [pc, #400]	; (8005154 <HAL_TIM_ConfigClockSource+0x220>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	f200 80ae 	bhi.w	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fc8:	4a63      	ldr	r2, [pc, #396]	; (8005158 <HAL_TIM_ConfigClockSource+0x224>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	f000 80a1 	beq.w	8005112 <HAL_TIM_ConfigClockSource+0x1de>
 8004fd0:	4a61      	ldr	r2, [pc, #388]	; (8005158 <HAL_TIM_ConfigClockSource+0x224>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	f200 80a6 	bhi.w	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fd8:	4a60      	ldr	r2, [pc, #384]	; (800515c <HAL_TIM_ConfigClockSource+0x228>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	f000 8099 	beq.w	8005112 <HAL_TIM_ConfigClockSource+0x1de>
 8004fe0:	4a5e      	ldr	r2, [pc, #376]	; (800515c <HAL_TIM_ConfigClockSource+0x228>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	f200 809e 	bhi.w	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fe8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004fec:	f000 8091 	beq.w	8005112 <HAL_TIM_ConfigClockSource+0x1de>
 8004ff0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004ff4:	f200 8096 	bhi.w	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ff8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ffc:	f000 8089 	beq.w	8005112 <HAL_TIM_ConfigClockSource+0x1de>
 8005000:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005004:	f200 808e 	bhi.w	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8005008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800500c:	d03e      	beq.n	800508c <HAL_TIM_ConfigClockSource+0x158>
 800500e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005012:	f200 8087 	bhi.w	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8005016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501a:	f000 8086 	beq.w	800512a <HAL_TIM_ConfigClockSource+0x1f6>
 800501e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005022:	d87f      	bhi.n	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8005024:	2b70      	cmp	r3, #112	; 0x70
 8005026:	d01a      	beq.n	800505e <HAL_TIM_ConfigClockSource+0x12a>
 8005028:	2b70      	cmp	r3, #112	; 0x70
 800502a:	d87b      	bhi.n	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 800502c:	2b60      	cmp	r3, #96	; 0x60
 800502e:	d050      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0x19e>
 8005030:	2b60      	cmp	r3, #96	; 0x60
 8005032:	d877      	bhi.n	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8005034:	2b50      	cmp	r3, #80	; 0x50
 8005036:	d03c      	beq.n	80050b2 <HAL_TIM_ConfigClockSource+0x17e>
 8005038:	2b50      	cmp	r3, #80	; 0x50
 800503a:	d873      	bhi.n	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 800503c:	2b40      	cmp	r3, #64	; 0x40
 800503e:	d058      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0x1be>
 8005040:	2b40      	cmp	r3, #64	; 0x40
 8005042:	d86f      	bhi.n	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8005044:	2b30      	cmp	r3, #48	; 0x30
 8005046:	d064      	beq.n	8005112 <HAL_TIM_ConfigClockSource+0x1de>
 8005048:	2b30      	cmp	r3, #48	; 0x30
 800504a:	d86b      	bhi.n	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 800504c:	2b20      	cmp	r3, #32
 800504e:	d060      	beq.n	8005112 <HAL_TIM_ConfigClockSource+0x1de>
 8005050:	2b20      	cmp	r3, #32
 8005052:	d867      	bhi.n	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8005054:	2b00      	cmp	r3, #0
 8005056:	d05c      	beq.n	8005112 <HAL_TIM_ConfigClockSource+0x1de>
 8005058:	2b10      	cmp	r3, #16
 800505a:	d05a      	beq.n	8005112 <HAL_TIM_ConfigClockSource+0x1de>
 800505c:	e062      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6818      	ldr	r0, [r3, #0]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	6899      	ldr	r1, [r3, #8]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f000 fd61 	bl	8005b34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005080:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	609a      	str	r2, [r3, #8]
      break;
 800508a:	e04f      	b.n	800512c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6818      	ldr	r0, [r3, #0]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	6899      	ldr	r1, [r3, #8]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f000 fd4a 	bl	8005b34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689a      	ldr	r2, [r3, #8]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050ae:	609a      	str	r2, [r3, #8]
      break;
 80050b0:	e03c      	b.n	800512c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6818      	ldr	r0, [r3, #0]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	6859      	ldr	r1, [r3, #4]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	461a      	mov	r2, r3
 80050c0:	f000 fcbc 	bl	8005a3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2150      	movs	r1, #80	; 0x50
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fd15 	bl	8005afa <TIM_ITRx_SetConfig>
      break;
 80050d0:	e02c      	b.n	800512c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	6859      	ldr	r1, [r3, #4]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	461a      	mov	r2, r3
 80050e0:	f000 fcdb 	bl	8005a9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2160      	movs	r1, #96	; 0x60
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fd05 	bl	8005afa <TIM_ITRx_SetConfig>
      break;
 80050f0:	e01c      	b.n	800512c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6818      	ldr	r0, [r3, #0]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	6859      	ldr	r1, [r3, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	461a      	mov	r2, r3
 8005100:	f000 fc9c 	bl	8005a3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2140      	movs	r1, #64	; 0x40
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fcf5 	bl	8005afa <TIM_ITRx_SetConfig>
      break;
 8005110:	e00c      	b.n	800512c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4619      	mov	r1, r3
 800511c:	4610      	mov	r0, r2
 800511e:	f000 fcec 	bl	8005afa <TIM_ITRx_SetConfig>
      break;
 8005122:	e003      	b.n	800512c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	73fb      	strb	r3, [r7, #15]
      break;
 8005128:	e000      	b.n	800512c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800512a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800513c:	7bfb      	ldrb	r3, [r7, #15]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	00100070 	.word	0x00100070
 800514c:	00100060 	.word	0x00100060
 8005150:	00100050 	.word	0x00100050
 8005154:	00100040 	.word	0x00100040
 8005158:	00100030 	.word	0x00100030
 800515c:	00100020 	.word	0x00100020

08005160 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a46      	ldr	r2, [pc, #280]	; (80052dc <TIM_Base_SetConfig+0x12c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d017      	beq.n	80051f8 <TIM_Base_SetConfig+0x48>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ce:	d013      	beq.n	80051f8 <TIM_Base_SetConfig+0x48>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a43      	ldr	r2, [pc, #268]	; (80052e0 <TIM_Base_SetConfig+0x130>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00f      	beq.n	80051f8 <TIM_Base_SetConfig+0x48>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a42      	ldr	r2, [pc, #264]	; (80052e4 <TIM_Base_SetConfig+0x134>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d00b      	beq.n	80051f8 <TIM_Base_SetConfig+0x48>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a41      	ldr	r2, [pc, #260]	; (80052e8 <TIM_Base_SetConfig+0x138>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d007      	beq.n	80051f8 <TIM_Base_SetConfig+0x48>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a40      	ldr	r2, [pc, #256]	; (80052ec <TIM_Base_SetConfig+0x13c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d003      	beq.n	80051f8 <TIM_Base_SetConfig+0x48>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a3f      	ldr	r2, [pc, #252]	; (80052f0 <TIM_Base_SetConfig+0x140>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d108      	bne.n	800520a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a33      	ldr	r2, [pc, #204]	; (80052dc <TIM_Base_SetConfig+0x12c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d023      	beq.n	800525a <TIM_Base_SetConfig+0xaa>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005218:	d01f      	beq.n	800525a <TIM_Base_SetConfig+0xaa>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a30      	ldr	r2, [pc, #192]	; (80052e0 <TIM_Base_SetConfig+0x130>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d01b      	beq.n	800525a <TIM_Base_SetConfig+0xaa>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a2f      	ldr	r2, [pc, #188]	; (80052e4 <TIM_Base_SetConfig+0x134>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d017      	beq.n	800525a <TIM_Base_SetConfig+0xaa>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a2e      	ldr	r2, [pc, #184]	; (80052e8 <TIM_Base_SetConfig+0x138>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d013      	beq.n	800525a <TIM_Base_SetConfig+0xaa>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a2d      	ldr	r2, [pc, #180]	; (80052ec <TIM_Base_SetConfig+0x13c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d00f      	beq.n	800525a <TIM_Base_SetConfig+0xaa>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a2d      	ldr	r2, [pc, #180]	; (80052f4 <TIM_Base_SetConfig+0x144>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d00b      	beq.n	800525a <TIM_Base_SetConfig+0xaa>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a2c      	ldr	r2, [pc, #176]	; (80052f8 <TIM_Base_SetConfig+0x148>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d007      	beq.n	800525a <TIM_Base_SetConfig+0xaa>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a2b      	ldr	r2, [pc, #172]	; (80052fc <TIM_Base_SetConfig+0x14c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d003      	beq.n	800525a <TIM_Base_SetConfig+0xaa>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a26      	ldr	r2, [pc, #152]	; (80052f0 <TIM_Base_SetConfig+0x140>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d108      	bne.n	800526c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005260:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4313      	orrs	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a12      	ldr	r2, [pc, #72]	; (80052dc <TIM_Base_SetConfig+0x12c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d013      	beq.n	80052c0 <TIM_Base_SetConfig+0x110>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a14      	ldr	r2, [pc, #80]	; (80052ec <TIM_Base_SetConfig+0x13c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00f      	beq.n	80052c0 <TIM_Base_SetConfig+0x110>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a14      	ldr	r2, [pc, #80]	; (80052f4 <TIM_Base_SetConfig+0x144>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d00b      	beq.n	80052c0 <TIM_Base_SetConfig+0x110>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a13      	ldr	r2, [pc, #76]	; (80052f8 <TIM_Base_SetConfig+0x148>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d007      	beq.n	80052c0 <TIM_Base_SetConfig+0x110>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a12      	ldr	r2, [pc, #72]	; (80052fc <TIM_Base_SetConfig+0x14c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_Base_SetConfig+0x110>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a0d      	ldr	r2, [pc, #52]	; (80052f0 <TIM_Base_SetConfig+0x140>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d103      	bne.n	80052c8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	615a      	str	r2, [r3, #20]
}
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40012c00 	.word	0x40012c00
 80052e0:	40000400 	.word	0x40000400
 80052e4:	40000800 	.word	0x40000800
 80052e8:	40000c00 	.word	0x40000c00
 80052ec:	40013400 	.word	0x40013400
 80052f0:	40015000 	.word	0x40015000
 80052f4:	40014000 	.word	0x40014000
 80052f8:	40014400 	.word	0x40014400
 80052fc:	40014800 	.word	0x40014800

08005300 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	f023 0201 	bic.w	r2, r3, #1
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800532e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 0303 	bic.w	r3, r3, #3
 800533a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	4313      	orrs	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f023 0302 	bic.w	r3, r3, #2
 800534c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	4313      	orrs	r3, r2
 8005356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a30      	ldr	r2, [pc, #192]	; (800541c <TIM_OC1_SetConfig+0x11c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d013      	beq.n	8005388 <TIM_OC1_SetConfig+0x88>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a2f      	ldr	r2, [pc, #188]	; (8005420 <TIM_OC1_SetConfig+0x120>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00f      	beq.n	8005388 <TIM_OC1_SetConfig+0x88>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a2e      	ldr	r2, [pc, #184]	; (8005424 <TIM_OC1_SetConfig+0x124>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00b      	beq.n	8005388 <TIM_OC1_SetConfig+0x88>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a2d      	ldr	r2, [pc, #180]	; (8005428 <TIM_OC1_SetConfig+0x128>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d007      	beq.n	8005388 <TIM_OC1_SetConfig+0x88>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a2c      	ldr	r2, [pc, #176]	; (800542c <TIM_OC1_SetConfig+0x12c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d003      	beq.n	8005388 <TIM_OC1_SetConfig+0x88>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a2b      	ldr	r2, [pc, #172]	; (8005430 <TIM_OC1_SetConfig+0x130>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d10c      	bne.n	80053a2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f023 0308 	bic.w	r3, r3, #8
 800538e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	4313      	orrs	r3, r2
 8005398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f023 0304 	bic.w	r3, r3, #4
 80053a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a1d      	ldr	r2, [pc, #116]	; (800541c <TIM_OC1_SetConfig+0x11c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d013      	beq.n	80053d2 <TIM_OC1_SetConfig+0xd2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a1c      	ldr	r2, [pc, #112]	; (8005420 <TIM_OC1_SetConfig+0x120>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00f      	beq.n	80053d2 <TIM_OC1_SetConfig+0xd2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a1b      	ldr	r2, [pc, #108]	; (8005424 <TIM_OC1_SetConfig+0x124>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00b      	beq.n	80053d2 <TIM_OC1_SetConfig+0xd2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a1a      	ldr	r2, [pc, #104]	; (8005428 <TIM_OC1_SetConfig+0x128>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d007      	beq.n	80053d2 <TIM_OC1_SetConfig+0xd2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a19      	ldr	r2, [pc, #100]	; (800542c <TIM_OC1_SetConfig+0x12c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d003      	beq.n	80053d2 <TIM_OC1_SetConfig+0xd2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a18      	ldr	r2, [pc, #96]	; (8005430 <TIM_OC1_SetConfig+0x130>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d111      	bne.n	80053f6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	621a      	str	r2, [r3, #32]
}
 8005410:	bf00      	nop
 8005412:	371c      	adds	r7, #28
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	40012c00 	.word	0x40012c00
 8005420:	40013400 	.word	0x40013400
 8005424:	40014000 	.word	0x40014000
 8005428:	40014400 	.word	0x40014400
 800542c:	40014800 	.word	0x40014800
 8005430:	40015000 	.word	0x40015000

08005434 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005434:	b480      	push	{r7}
 8005436:	b087      	sub	sp, #28
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	f023 0210 	bic.w	r2, r3, #16
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800546e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	021b      	lsls	r3, r3, #8
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f023 0320 	bic.w	r3, r3, #32
 8005482:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4313      	orrs	r3, r2
 800548e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a2c      	ldr	r2, [pc, #176]	; (8005544 <TIM_OC2_SetConfig+0x110>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d007      	beq.n	80054a8 <TIM_OC2_SetConfig+0x74>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a2b      	ldr	r2, [pc, #172]	; (8005548 <TIM_OC2_SetConfig+0x114>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <TIM_OC2_SetConfig+0x74>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a2a      	ldr	r2, [pc, #168]	; (800554c <TIM_OC2_SetConfig+0x118>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d10d      	bne.n	80054c4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a1f      	ldr	r2, [pc, #124]	; (8005544 <TIM_OC2_SetConfig+0x110>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d013      	beq.n	80054f4 <TIM_OC2_SetConfig+0xc0>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a1e      	ldr	r2, [pc, #120]	; (8005548 <TIM_OC2_SetConfig+0x114>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00f      	beq.n	80054f4 <TIM_OC2_SetConfig+0xc0>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a1e      	ldr	r2, [pc, #120]	; (8005550 <TIM_OC2_SetConfig+0x11c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00b      	beq.n	80054f4 <TIM_OC2_SetConfig+0xc0>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a1d      	ldr	r2, [pc, #116]	; (8005554 <TIM_OC2_SetConfig+0x120>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d007      	beq.n	80054f4 <TIM_OC2_SetConfig+0xc0>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a1c      	ldr	r2, [pc, #112]	; (8005558 <TIM_OC2_SetConfig+0x124>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d003      	beq.n	80054f4 <TIM_OC2_SetConfig+0xc0>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a17      	ldr	r2, [pc, #92]	; (800554c <TIM_OC2_SetConfig+0x118>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d113      	bne.n	800551c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005502:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	4313      	orrs	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	621a      	str	r2, [r3, #32]
}
 8005536:	bf00      	nop
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40012c00 	.word	0x40012c00
 8005548:	40013400 	.word	0x40013400
 800554c:	40015000 	.word	0x40015000
 8005550:	40014000 	.word	0x40014000
 8005554:	40014400 	.word	0x40014400
 8005558:	40014800 	.word	0x40014800

0800555c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800558a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0303 	bic.w	r3, r3, #3
 8005596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	021b      	lsls	r3, r3, #8
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a2b      	ldr	r2, [pc, #172]	; (8005668 <TIM_OC3_SetConfig+0x10c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d007      	beq.n	80055ce <TIM_OC3_SetConfig+0x72>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a2a      	ldr	r2, [pc, #168]	; (800566c <TIM_OC3_SetConfig+0x110>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d003      	beq.n	80055ce <TIM_OC3_SetConfig+0x72>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a29      	ldr	r2, [pc, #164]	; (8005670 <TIM_OC3_SetConfig+0x114>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d10d      	bne.n	80055ea <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	021b      	lsls	r3, r3, #8
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a1e      	ldr	r2, [pc, #120]	; (8005668 <TIM_OC3_SetConfig+0x10c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d013      	beq.n	800561a <TIM_OC3_SetConfig+0xbe>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a1d      	ldr	r2, [pc, #116]	; (800566c <TIM_OC3_SetConfig+0x110>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d00f      	beq.n	800561a <TIM_OC3_SetConfig+0xbe>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a1d      	ldr	r2, [pc, #116]	; (8005674 <TIM_OC3_SetConfig+0x118>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d00b      	beq.n	800561a <TIM_OC3_SetConfig+0xbe>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a1c      	ldr	r2, [pc, #112]	; (8005678 <TIM_OC3_SetConfig+0x11c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d007      	beq.n	800561a <TIM_OC3_SetConfig+0xbe>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a1b      	ldr	r2, [pc, #108]	; (800567c <TIM_OC3_SetConfig+0x120>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d003      	beq.n	800561a <TIM_OC3_SetConfig+0xbe>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a16      	ldr	r2, [pc, #88]	; (8005670 <TIM_OC3_SetConfig+0x114>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d113      	bne.n	8005642 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	621a      	str	r2, [r3, #32]
}
 800565c:	bf00      	nop
 800565e:	371c      	adds	r7, #28
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	40012c00 	.word	0x40012c00
 800566c:	40013400 	.word	0x40013400
 8005670:	40015000 	.word	0x40015000
 8005674:	40014000 	.word	0x40014000
 8005678:	40014400 	.word	0x40014400
 800567c:	40014800 	.word	0x40014800

08005680 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	021b      	lsls	r3, r3, #8
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	031b      	lsls	r3, r3, #12
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a2c      	ldr	r2, [pc, #176]	; (8005790 <TIM_OC4_SetConfig+0x110>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d007      	beq.n	80056f4 <TIM_OC4_SetConfig+0x74>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a2b      	ldr	r2, [pc, #172]	; (8005794 <TIM_OC4_SetConfig+0x114>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d003      	beq.n	80056f4 <TIM_OC4_SetConfig+0x74>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a2a      	ldr	r2, [pc, #168]	; (8005798 <TIM_OC4_SetConfig+0x118>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d10d      	bne.n	8005710 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	031b      	lsls	r3, r3, #12
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4313      	orrs	r3, r2
 8005706:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800570e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a1f      	ldr	r2, [pc, #124]	; (8005790 <TIM_OC4_SetConfig+0x110>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d013      	beq.n	8005740 <TIM_OC4_SetConfig+0xc0>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a1e      	ldr	r2, [pc, #120]	; (8005794 <TIM_OC4_SetConfig+0x114>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00f      	beq.n	8005740 <TIM_OC4_SetConfig+0xc0>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a1e      	ldr	r2, [pc, #120]	; (800579c <TIM_OC4_SetConfig+0x11c>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00b      	beq.n	8005740 <TIM_OC4_SetConfig+0xc0>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a1d      	ldr	r2, [pc, #116]	; (80057a0 <TIM_OC4_SetConfig+0x120>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d007      	beq.n	8005740 <TIM_OC4_SetConfig+0xc0>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a1c      	ldr	r2, [pc, #112]	; (80057a4 <TIM_OC4_SetConfig+0x124>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d003      	beq.n	8005740 <TIM_OC4_SetConfig+0xc0>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a17      	ldr	r2, [pc, #92]	; (8005798 <TIM_OC4_SetConfig+0x118>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d113      	bne.n	8005768 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005746:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800574e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	019b      	lsls	r3, r3, #6
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	4313      	orrs	r3, r2
 800575a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	019b      	lsls	r3, r3, #6
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	4313      	orrs	r3, r2
 8005766:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	621a      	str	r2, [r3, #32]
}
 8005782:	bf00      	nop
 8005784:	371c      	adds	r7, #28
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	40012c00 	.word	0x40012c00
 8005794:	40013400 	.word	0x40013400
 8005798:	40015000 	.word	0x40015000
 800579c:	40014000 	.word	0x40014000
 80057a0:	40014400 	.word	0x40014400
 80057a4:	40014800 	.word	0x40014800

080057a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80057ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	041b      	lsls	r3, r3, #16
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a19      	ldr	r2, [pc, #100]	; (8005864 <TIM_OC5_SetConfig+0xbc>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d013      	beq.n	800582a <TIM_OC5_SetConfig+0x82>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a18      	ldr	r2, [pc, #96]	; (8005868 <TIM_OC5_SetConfig+0xc0>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d00f      	beq.n	800582a <TIM_OC5_SetConfig+0x82>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a17      	ldr	r2, [pc, #92]	; (800586c <TIM_OC5_SetConfig+0xc4>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d00b      	beq.n	800582a <TIM_OC5_SetConfig+0x82>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a16      	ldr	r2, [pc, #88]	; (8005870 <TIM_OC5_SetConfig+0xc8>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d007      	beq.n	800582a <TIM_OC5_SetConfig+0x82>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a15      	ldr	r2, [pc, #84]	; (8005874 <TIM_OC5_SetConfig+0xcc>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d003      	beq.n	800582a <TIM_OC5_SetConfig+0x82>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a14      	ldr	r2, [pc, #80]	; (8005878 <TIM_OC5_SetConfig+0xd0>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d109      	bne.n	800583e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005830:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	021b      	lsls	r3, r3, #8
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	4313      	orrs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	621a      	str	r2, [r3, #32]
}
 8005858:	bf00      	nop
 800585a:	371c      	adds	r7, #28
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	40012c00 	.word	0x40012c00
 8005868:	40013400 	.word	0x40013400
 800586c:	40014000 	.word	0x40014000
 8005870:	40014400 	.word	0x40014400
 8005874:	40014800 	.word	0x40014800
 8005878:	40015000 	.word	0x40015000

0800587c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800587c:	b480      	push	{r7}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	021b      	lsls	r3, r3, #8
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	051b      	lsls	r3, r3, #20
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a1a      	ldr	r2, [pc, #104]	; (800593c <TIM_OC6_SetConfig+0xc0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d013      	beq.n	8005900 <TIM_OC6_SetConfig+0x84>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a19      	ldr	r2, [pc, #100]	; (8005940 <TIM_OC6_SetConfig+0xc4>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d00f      	beq.n	8005900 <TIM_OC6_SetConfig+0x84>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a18      	ldr	r2, [pc, #96]	; (8005944 <TIM_OC6_SetConfig+0xc8>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00b      	beq.n	8005900 <TIM_OC6_SetConfig+0x84>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a17      	ldr	r2, [pc, #92]	; (8005948 <TIM_OC6_SetConfig+0xcc>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d007      	beq.n	8005900 <TIM_OC6_SetConfig+0x84>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a16      	ldr	r2, [pc, #88]	; (800594c <TIM_OC6_SetConfig+0xd0>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d003      	beq.n	8005900 <TIM_OC6_SetConfig+0x84>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a15      	ldr	r2, [pc, #84]	; (8005950 <TIM_OC6_SetConfig+0xd4>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d109      	bne.n	8005914 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005906:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	029b      	lsls	r3, r3, #10
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	4313      	orrs	r3, r2
 8005912:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	621a      	str	r2, [r3, #32]
}
 800592e:	bf00      	nop
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40012c00 	.word	0x40012c00
 8005940:	40013400 	.word	0x40013400
 8005944:	40014000 	.word	0x40014000
 8005948:	40014400 	.word	0x40014400
 800594c:	40014800 	.word	0x40014800
 8005950:	40015000 	.word	0x40015000

08005954 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
 8005960:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	f023 0201 	bic.w	r2, r3, #1
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4a28      	ldr	r2, [pc, #160]	; (8005a20 <TIM_TI1_SetConfig+0xcc>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d01b      	beq.n	80059ba <TIM_TI1_SetConfig+0x66>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005988:	d017      	beq.n	80059ba <TIM_TI1_SetConfig+0x66>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4a25      	ldr	r2, [pc, #148]	; (8005a24 <TIM_TI1_SetConfig+0xd0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d013      	beq.n	80059ba <TIM_TI1_SetConfig+0x66>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	4a24      	ldr	r2, [pc, #144]	; (8005a28 <TIM_TI1_SetConfig+0xd4>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d00f      	beq.n	80059ba <TIM_TI1_SetConfig+0x66>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4a23      	ldr	r2, [pc, #140]	; (8005a2c <TIM_TI1_SetConfig+0xd8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00b      	beq.n	80059ba <TIM_TI1_SetConfig+0x66>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4a22      	ldr	r2, [pc, #136]	; (8005a30 <TIM_TI1_SetConfig+0xdc>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d007      	beq.n	80059ba <TIM_TI1_SetConfig+0x66>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	4a21      	ldr	r2, [pc, #132]	; (8005a34 <TIM_TI1_SetConfig+0xe0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d003      	beq.n	80059ba <TIM_TI1_SetConfig+0x66>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4a20      	ldr	r2, [pc, #128]	; (8005a38 <TIM_TI1_SetConfig+0xe4>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d101      	bne.n	80059be <TIM_TI1_SetConfig+0x6a>
 80059ba:	2301      	movs	r3, #1
 80059bc:	e000      	b.n	80059c0 <TIM_TI1_SetConfig+0x6c>
 80059be:	2300      	movs	r3, #0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d008      	beq.n	80059d6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f023 0303 	bic.w	r3, r3, #3
 80059ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]
 80059d4:	e003      	b.n	80059de <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f043 0301 	orr.w	r3, r3, #1
 80059dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	011b      	lsls	r3, r3, #4
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	f023 030a 	bic.w	r3, r3, #10
 80059f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	f003 030a 	and.w	r3, r3, #10
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	621a      	str	r2, [r3, #32]
}
 8005a12:	bf00      	nop
 8005a14:	371c      	adds	r7, #28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	40012c00 	.word	0x40012c00
 8005a24:	40000400 	.word	0x40000400
 8005a28:	40000800 	.word	0x40000800
 8005a2c:	40000c00 	.word	0x40000c00
 8005a30:	40013400 	.word	0x40013400
 8005a34:	40014000 	.word	0x40014000
 8005a38:	40015000 	.word	0x40015000

08005a3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	f023 0201 	bic.w	r2, r3, #1
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	011b      	lsls	r3, r3, #4
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f023 030a 	bic.w	r3, r3, #10
 8005a78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	621a      	str	r2, [r3, #32]
}
 8005a8e:	bf00      	nop
 8005a90:	371c      	adds	r7, #28
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b087      	sub	sp, #28
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	60f8      	str	r0, [r7, #12]
 8005aa2:	60b9      	str	r1, [r7, #8]
 8005aa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	f023 0210 	bic.w	r2, r3, #16
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ac4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	031b      	lsls	r3, r3, #12
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ad6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	011b      	lsls	r3, r3, #4
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	621a      	str	r2, [r3, #32]
}
 8005aee:	bf00      	nop
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b085      	sub	sp, #20
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f043 0307 	orr.w	r3, r3, #7
 8005b20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	609a      	str	r2, [r3, #8]
}
 8005b28:	bf00      	nop
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
 8005b40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	021a      	lsls	r2, r3, #8
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	431a      	orrs	r2, r3
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	609a      	str	r2, [r3, #8]
}
 8005b68:	bf00      	nop
 8005b6a:	371c      	adds	r7, #28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f003 031f 	and.w	r3, r3, #31
 8005b86:	2201      	movs	r2, #1
 8005b88:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a1a      	ldr	r2, [r3, #32]
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	43db      	mvns	r3, r3
 8005b96:	401a      	ands	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6a1a      	ldr	r2, [r3, #32]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f003 031f 	and.w	r3, r3, #31
 8005ba6:	6879      	ldr	r1, [r7, #4]
 8005ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bac:	431a      	orrs	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	621a      	str	r2, [r3, #32]
}
 8005bb2:	bf00      	nop
 8005bb4:	371c      	adds	r7, #28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b08a      	sub	sp, #40	; 0x28
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e0a0      	b.n	8005d14 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d106      	bne.n	8005bec <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7fb faee 	bl	80011c8 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3304      	adds	r3, #4
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	4610      	mov	r0, r2
 8005c00:	f7ff fad6 	bl	80051b0 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6818      	ldr	r0, [r3, #0]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	6819      	ldr	r1, [r3, #0]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	2203      	movs	r2, #3
 8005c12:	f7ff fe9f 	bl	8005954 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	699a      	ldr	r2, [r3, #24]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 020c 	bic.w	r2, r2, #12
 8005c24:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6999      	ldr	r1, [r3, #24]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c46:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6812      	ldr	r2, [r2, #0]
 8005c52:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c6a:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6812      	ldr	r2, [r2, #0]
 8005c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c7a:	f023 0307 	bic.w	r3, r3, #7
 8005c7e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689a      	ldr	r2, [r3, #8]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0204 	orr.w	r2, r2, #4
 8005c8e:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005c90:	2300      	movs	r3, #0
 8005c92:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005c94:	2300      	movs	r3, #0
 8005c96:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005c98:	2370      	movs	r3, #112	; 0x70
 8005c9a:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f107 020c 	add.w	r2, r7, #12
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7ff fbbb 	bl	8005434 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6812      	ldr	r2, [r2, #0]
 8005cc8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd0:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8005ce0:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3728      	adds	r7, #40	; 0x28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d109      	bne.n	8005d40 <HAL_TIMEx_PWMN_Start+0x24>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	bf14      	ite	ne
 8005d38:	2301      	movne	r3, #1
 8005d3a:	2300      	moveq	r3, #0
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	e022      	b.n	8005d86 <HAL_TIMEx_PWMN_Start+0x6a>
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d109      	bne.n	8005d5a <HAL_TIMEx_PWMN_Start+0x3e>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	bf14      	ite	ne
 8005d52:	2301      	movne	r3, #1
 8005d54:	2300      	moveq	r3, #0
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	e015      	b.n	8005d86 <HAL_TIMEx_PWMN_Start+0x6a>
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	d109      	bne.n	8005d74 <HAL_TIMEx_PWMN_Start+0x58>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	bf14      	ite	ne
 8005d6c:	2301      	movne	r3, #1
 8005d6e:	2300      	moveq	r3, #0
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	e008      	b.n	8005d86 <HAL_TIMEx_PWMN_Start+0x6a>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	bf14      	ite	ne
 8005d80:	2301      	movne	r3, #1
 8005d82:	2300      	moveq	r3, #0
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e073      	b.n	8005e76 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d104      	bne.n	8005d9e <HAL_TIMEx_PWMN_Start+0x82>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d9c:	e013      	b.n	8005dc6 <HAL_TIMEx_PWMN_Start+0xaa>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b04      	cmp	r3, #4
 8005da2:	d104      	bne.n	8005dae <HAL_TIMEx_PWMN_Start+0x92>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dac:	e00b      	b.n	8005dc6 <HAL_TIMEx_PWMN_Start+0xaa>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	d104      	bne.n	8005dbe <HAL_TIMEx_PWMN_Start+0xa2>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dbc:	e003      	b.n	8005dc6 <HAL_TIMEx_PWMN_Start+0xaa>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2204      	movs	r2, #4
 8005dcc:	6839      	ldr	r1, [r7, #0]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 fa52 	bl	8006278 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005de2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a25      	ldr	r2, [pc, #148]	; (8005e80 <HAL_TIMEx_PWMN_Start+0x164>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d022      	beq.n	8005e34 <HAL_TIMEx_PWMN_Start+0x118>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df6:	d01d      	beq.n	8005e34 <HAL_TIMEx_PWMN_Start+0x118>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a21      	ldr	r2, [pc, #132]	; (8005e84 <HAL_TIMEx_PWMN_Start+0x168>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d018      	beq.n	8005e34 <HAL_TIMEx_PWMN_Start+0x118>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a20      	ldr	r2, [pc, #128]	; (8005e88 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d013      	beq.n	8005e34 <HAL_TIMEx_PWMN_Start+0x118>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a1e      	ldr	r2, [pc, #120]	; (8005e8c <HAL_TIMEx_PWMN_Start+0x170>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d00e      	beq.n	8005e34 <HAL_TIMEx_PWMN_Start+0x118>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a1d      	ldr	r2, [pc, #116]	; (8005e90 <HAL_TIMEx_PWMN_Start+0x174>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d009      	beq.n	8005e34 <HAL_TIMEx_PWMN_Start+0x118>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a1b      	ldr	r2, [pc, #108]	; (8005e94 <HAL_TIMEx_PWMN_Start+0x178>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d004      	beq.n	8005e34 <HAL_TIMEx_PWMN_Start+0x118>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a1a      	ldr	r2, [pc, #104]	; (8005e98 <HAL_TIMEx_PWMN_Start+0x17c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d115      	bne.n	8005e60 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	4b18      	ldr	r3, [pc, #96]	; (8005e9c <HAL_TIMEx_PWMN_Start+0x180>)
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b06      	cmp	r3, #6
 8005e44:	d015      	beq.n	8005e72 <HAL_TIMEx_PWMN_Start+0x156>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e4c:	d011      	beq.n	8005e72 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f042 0201 	orr.w	r2, r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e5e:	e008      	b.n	8005e72 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0201 	orr.w	r2, r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	e000      	b.n	8005e74 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	40012c00 	.word	0x40012c00
 8005e84:	40000400 	.word	0x40000400
 8005e88:	40000800 	.word	0x40000800
 8005e8c:	40000c00 	.word	0x40000c00
 8005e90:	40013400 	.word	0x40013400
 8005e94:	40014000 	.word	0x40014000
 8005e98:	40015000 	.word	0x40015000
 8005e9c:	00010007 	.word	0x00010007

08005ea0 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	6839      	ldr	r1, [r7, #0]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 f9e0 	bl	8006278 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6a1a      	ldr	r2, [r3, #32]
 8005ebe:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10f      	bne.n	8005ee8 <HAL_TIMEx_PWMN_Stop+0x48>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6a1a      	ldr	r2, [r3, #32]
 8005ece:	f244 4344 	movw	r3, #17476	; 0x4444
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d107      	bne.n	8005ee8 <HAL_TIMEx_PWMN_Stop+0x48>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ee6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6a1a      	ldr	r2, [r3, #32]
 8005eee:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10f      	bne.n	8005f18 <HAL_TIMEx_PWMN_Stop+0x78>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6a1a      	ldr	r2, [r3, #32]
 8005efe:	f244 4344 	movw	r3, #17476	; 0x4444
 8005f02:	4013      	ands	r3, r2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d107      	bne.n	8005f18 <HAL_TIMEx_PWMN_Stop+0x78>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0201 	bic.w	r2, r2, #1
 8005f16:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d104      	bne.n	8005f28 <HAL_TIMEx_PWMN_Stop+0x88>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f26:	e013      	b.n	8005f50 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d104      	bne.n	8005f38 <HAL_TIMEx_PWMN_Stop+0x98>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f36:	e00b      	b.n	8005f50 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	2b08      	cmp	r3, #8
 8005f3c:	d104      	bne.n	8005f48 <HAL_TIMEx_PWMN_Stop+0xa8>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f46:	e003      	b.n	8005f50 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
	...

08005f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d101      	bne.n	8005f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f70:	2302      	movs	r3, #2
 8005f72:	e074      	b.n	800605e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a34      	ldr	r2, [pc, #208]	; (800606c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d009      	beq.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a33      	ldr	r2, [pc, #204]	; (8006070 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d004      	beq.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a31      	ldr	r2, [pc, #196]	; (8006074 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d108      	bne.n	8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005fb8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a21      	ldr	r2, [pc, #132]	; (800606c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d022      	beq.n	8006032 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff4:	d01d      	beq.n	8006032 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a1f      	ldr	r2, [pc, #124]	; (8006078 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d018      	beq.n	8006032 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a1d      	ldr	r2, [pc, #116]	; (800607c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d013      	beq.n	8006032 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a1c      	ldr	r2, [pc, #112]	; (8006080 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d00e      	beq.n	8006032 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a15      	ldr	r2, [pc, #84]	; (8006070 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d009      	beq.n	8006032 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a18      	ldr	r2, [pc, #96]	; (8006084 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d004      	beq.n	8006032 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a11      	ldr	r2, [pc, #68]	; (8006074 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d10c      	bne.n	800604c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006038:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	4313      	orrs	r3, r2
 8006042:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	40012c00 	.word	0x40012c00
 8006070:	40013400 	.word	0x40013400
 8006074:	40015000 	.word	0x40015000
 8006078:	40000400 	.word	0x40000400
 800607c:	40000800 	.word	0x40000800
 8006080:	40000c00 	.word	0x40000c00
 8006084:	40014000 	.word	0x40014000

08006088 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e096      	b.n	80061d2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	041b      	lsls	r3, r3, #16
 800611a:	4313      	orrs	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a2f      	ldr	r2, [pc, #188]	; (80061e0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d009      	beq.n	800613c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a2d      	ldr	r2, [pc, #180]	; (80061e4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d004      	beq.n	800613c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a2c      	ldr	r2, [pc, #176]	; (80061e8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d106      	bne.n	800614a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	69db      	ldr	r3, [r3, #28]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a24      	ldr	r2, [pc, #144]	; (80061e0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d009      	beq.n	8006168 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a22      	ldr	r2, [pc, #136]	; (80061e4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d004      	beq.n	8006168 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a21      	ldr	r2, [pc, #132]	; (80061e8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d12b      	bne.n	80061c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006172:	051b      	lsls	r3, r3, #20
 8006174:	4313      	orrs	r3, r2
 8006176:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	4313      	orrs	r3, r2
 8006192:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a11      	ldr	r2, [pc, #68]	; (80061e0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d009      	beq.n	80061b2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a10      	ldr	r2, [pc, #64]	; (80061e4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d004      	beq.n	80061b2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a0e      	ldr	r2, [pc, #56]	; (80061e8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d106      	bne.n	80061c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061bc:	4313      	orrs	r3, r2
 80061be:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	40012c00 	.word	0x40012c00
 80061e4:	40013400 	.word	0x40013400
 80061e8:	40015000 	.word	0x40015000

080061ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f003 031f 	and.w	r3, r3, #31
 800628a:	2204      	movs	r2, #4
 800628c:	fa02 f303 	lsl.w	r3, r2, r3
 8006290:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6a1a      	ldr	r2, [r3, #32]
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	43db      	mvns	r3, r3
 800629a:	401a      	ands	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6a1a      	ldr	r2, [r3, #32]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f003 031f 	and.w	r3, r3, #31
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	fa01 f303 	lsl.w	r3, r1, r3
 80062b0:	431a      	orrs	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	621a      	str	r2, [r3, #32]
}
 80062b6:	bf00      	nop
 80062b8:	371c      	adds	r7, #28
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b082      	sub	sp, #8
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e042      	b.n	800635a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d106      	bne.n	80062ec <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7fb f8d0 	bl	800148c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2224      	movs	r2, #36	; 0x24
 80062f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0201 	bic.w	r2, r2, #1
 8006302:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 fc51 	bl	8006bac <UART_SetConfig>
 800630a:	4603      	mov	r3, r0
 800630c:	2b01      	cmp	r3, #1
 800630e:	d101      	bne.n	8006314 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e022      	b.n	800635a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 ff41 	bl	80071a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006330:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689a      	ldr	r2, [r3, #8]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006340:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f042 0201 	orr.w	r2, r2, #1
 8006350:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 ffc8 	bl	80072e8 <UART_CheckIdleState>
 8006358:	4603      	mov	r3, r0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b08a      	sub	sp, #40	; 0x28
 8006366:	af02      	add	r7, sp, #8
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	603b      	str	r3, [r7, #0]
 800636e:	4613      	mov	r3, r2
 8006370:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006378:	2b20      	cmp	r3, #32
 800637a:	f040 8083 	bne.w	8006484 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d002      	beq.n	800638a <HAL_UART_Transmit+0x28>
 8006384:	88fb      	ldrh	r3, [r7, #6]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e07b      	b.n	8006486 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006394:	2b01      	cmp	r3, #1
 8006396:	d101      	bne.n	800639c <HAL_UART_Transmit+0x3a>
 8006398:	2302      	movs	r3, #2
 800639a:	e074      	b.n	8006486 <HAL_UART_Transmit+0x124>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2221      	movs	r2, #33	; 0x21
 80063b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063b4:	f7fb fb4c 	bl	8001a50 <HAL_GetTick>
 80063b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	88fa      	ldrh	r2, [r7, #6]
 80063be:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	88fa      	ldrh	r2, [r7, #6]
 80063c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d2:	d108      	bne.n	80063e6 <HAL_UART_Transmit+0x84>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d104      	bne.n	80063e6 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80063dc:	2300      	movs	r3, #0
 80063de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	61bb      	str	r3, [r7, #24]
 80063e4:	e003      	b.n	80063ee <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063ea:	2300      	movs	r3, #0
 80063ec:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80063f6:	e02c      	b.n	8006452 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	2200      	movs	r2, #0
 8006400:	2180      	movs	r1, #128	; 0x80
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 ffbb 	bl	800737e <UART_WaitOnFlagUntilTimeout>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e039      	b.n	8006486 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10b      	bne.n	8006430 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	461a      	mov	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006426:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	3302      	adds	r3, #2
 800642c:	61bb      	str	r3, [r7, #24]
 800642e:	e007      	b.n	8006440 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	781a      	ldrb	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	3301      	adds	r3, #1
 800643e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006446:	b29b      	uxth	r3, r3
 8006448:	3b01      	subs	r3, #1
 800644a:	b29a      	uxth	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006458:	b29b      	uxth	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1cc      	bne.n	80063f8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	2200      	movs	r2, #0
 8006466:	2140      	movs	r1, #64	; 0x40
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 ff88 	bl	800737e <UART_WaitOnFlagUntilTimeout>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e006      	b.n	8006486 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2220      	movs	r2, #32
 800647c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	e000      	b.n	8006486 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006484:	2302      	movs	r3, #2
  }
}
 8006486:	4618      	mov	r0, r3
 8006488:	3720      	adds	r7, #32
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
	...

08006490 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b08a      	sub	sp, #40	; 0x28
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	4613      	mov	r3, r2
 800649c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a4:	2b20      	cmp	r3, #32
 80064a6:	d142      	bne.n	800652e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <HAL_UART_Receive_IT+0x24>
 80064ae:	88fb      	ldrh	r3, [r7, #6]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e03b      	b.n	8006530 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d101      	bne.n	80064c6 <HAL_UART_Receive_IT+0x36>
 80064c2:	2302      	movs	r3, #2
 80064c4:	e034      	b.n	8006530 <HAL_UART_Receive_IT+0xa0>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a17      	ldr	r2, [pc, #92]	; (8006538 <HAL_UART_Receive_IT+0xa8>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d01f      	beq.n	800651e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d018      	beq.n	800651e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	e853 3f00 	ldrex	r3, [r3]
 80064f8:	613b      	str	r3, [r7, #16]
   return(result);
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006500:	627b      	str	r3, [r7, #36]	; 0x24
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	623b      	str	r3, [r7, #32]
 800650c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650e:	69f9      	ldr	r1, [r7, #28]
 8006510:	6a3a      	ldr	r2, [r7, #32]
 8006512:	e841 2300 	strex	r3, r2, [r1]
 8006516:	61bb      	str	r3, [r7, #24]
   return(result);
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1e6      	bne.n	80064ec <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800651e:	88fb      	ldrh	r3, [r7, #6]
 8006520:	461a      	mov	r2, r3
 8006522:	68b9      	ldr	r1, [r7, #8]
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 fff3 	bl	8007510 <UART_Start_Receive_IT>
 800652a:	4603      	mov	r3, r0
 800652c:	e000      	b.n	8006530 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800652e:	2302      	movs	r3, #2
  }
}
 8006530:	4618      	mov	r0, r3
 8006532:	3728      	adds	r7, #40	; 0x28
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	40008000 	.word	0x40008000

0800653c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b0ba      	sub	sp, #232	; 0xe8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006562:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006566:	f640 030f 	movw	r3, #2063	; 0x80f
 800656a:	4013      	ands	r3, r2
 800656c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006570:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006574:	2b00      	cmp	r3, #0
 8006576:	d11b      	bne.n	80065b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800657c:	f003 0320 	and.w	r3, r3, #32
 8006580:	2b00      	cmp	r3, #0
 8006582:	d015      	beq.n	80065b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006588:	f003 0320 	and.w	r3, r3, #32
 800658c:	2b00      	cmp	r3, #0
 800658e:	d105      	bne.n	800659c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d009      	beq.n	80065b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 82d6 	beq.w	8006b52 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	4798      	blx	r3
      }
      return;
 80065ae:	e2d0      	b.n	8006b52 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 811f 	beq.w	80067f8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80065ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80065be:	4b8b      	ldr	r3, [pc, #556]	; (80067ec <HAL_UART_IRQHandler+0x2b0>)
 80065c0:	4013      	ands	r3, r2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d106      	bne.n	80065d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80065c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80065ca:	4b89      	ldr	r3, [pc, #548]	; (80067f0 <HAL_UART_IRQHandler+0x2b4>)
 80065cc:	4013      	ands	r3, r2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 8112 	beq.w	80067f8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d011      	beq.n	8006604 <HAL_UART_IRQHandler+0xc8>
 80065e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00b      	beq.n	8006604 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2201      	movs	r2, #1
 80065f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065fa:	f043 0201 	orr.w	r2, r3, #1
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d011      	beq.n	8006634 <HAL_UART_IRQHandler+0xf8>
 8006610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00b      	beq.n	8006634 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2202      	movs	r2, #2
 8006622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800662a:	f043 0204 	orr.w	r2, r3, #4
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	2b00      	cmp	r3, #0
 800663e:	d011      	beq.n	8006664 <HAL_UART_IRQHandler+0x128>
 8006640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00b      	beq.n	8006664 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2204      	movs	r2, #4
 8006652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800665a:	f043 0202 	orr.w	r2, r3, #2
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006668:	f003 0308 	and.w	r3, r3, #8
 800666c:	2b00      	cmp	r3, #0
 800666e:	d017      	beq.n	80066a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006674:	f003 0320 	and.w	r3, r3, #32
 8006678:	2b00      	cmp	r3, #0
 800667a:	d105      	bne.n	8006688 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800667c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006680:	4b5a      	ldr	r3, [pc, #360]	; (80067ec <HAL_UART_IRQHandler+0x2b0>)
 8006682:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00b      	beq.n	80066a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2208      	movs	r2, #8
 800668e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006696:	f043 0208 	orr.w	r2, r3, #8
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d012      	beq.n	80066d2 <HAL_UART_IRQHandler+0x196>
 80066ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00c      	beq.n	80066d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066c8:	f043 0220 	orr.w	r2, r3, #32
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 823c 	beq.w	8006b56 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e2:	f003 0320 	and.w	r3, r3, #32
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d013      	beq.n	8006712 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ee:	f003 0320 	and.w	r3, r3, #32
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d105      	bne.n	8006702 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d007      	beq.n	8006712 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006718:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006726:	2b40      	cmp	r3, #64	; 0x40
 8006728:	d005      	beq.n	8006736 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800672a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800672e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006732:	2b00      	cmp	r3, #0
 8006734:	d04f      	beq.n	80067d6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f001 f814 	bl	8007764 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006746:	2b40      	cmp	r3, #64	; 0x40
 8006748:	d141      	bne.n	80067ce <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	3308      	adds	r3, #8
 8006750:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006754:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006758:	e853 3f00 	ldrex	r3, [r3]
 800675c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006760:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006768:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3308      	adds	r3, #8
 8006772:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006776:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800677a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006782:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006786:	e841 2300 	strex	r3, r2, [r1]
 800678a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800678e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1d9      	bne.n	800674a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800679a:	2b00      	cmp	r3, #0
 800679c:	d013      	beq.n	80067c6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067a2:	4a14      	ldr	r2, [pc, #80]	; (80067f4 <HAL_UART_IRQHandler+0x2b8>)
 80067a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7fc fbc1 	bl	8002f32 <HAL_DMA_Abort_IT>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d017      	beq.n	80067e6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80067c0:	4610      	mov	r0, r2
 80067c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c4:	e00f      	b.n	80067e6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f9da 	bl	8006b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067cc:	e00b      	b.n	80067e6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f9d6 	bl	8006b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d4:	e007      	b.n	80067e6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f9d2 	bl	8006b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80067e4:	e1b7      	b.n	8006b56 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e6:	bf00      	nop
    return;
 80067e8:	e1b5      	b.n	8006b56 <HAL_UART_IRQHandler+0x61a>
 80067ea:	bf00      	nop
 80067ec:	10000001 	.word	0x10000001
 80067f0:	04000120 	.word	0x04000120
 80067f4:	08007831 	.word	0x08007831

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	f040 814a 	bne.w	8006a96 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006806:	f003 0310 	and.w	r3, r3, #16
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 8143 	beq.w	8006a96 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006814:	f003 0310 	and.w	r3, r3, #16
 8006818:	2b00      	cmp	r3, #0
 800681a:	f000 813c 	beq.w	8006a96 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2210      	movs	r2, #16
 8006824:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006830:	2b40      	cmp	r3, #64	; 0x40
 8006832:	f040 80b5 	bne.w	80069a0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006842:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 8187 	beq.w	8006b5a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006852:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006856:	429a      	cmp	r2, r3
 8006858:	f080 817f 	bcs.w	8006b5a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006862:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0320 	and.w	r3, r3, #32
 8006872:	2b00      	cmp	r3, #0
 8006874:	f040 8086 	bne.w	8006984 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006880:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006884:	e853 3f00 	ldrex	r3, [r3]
 8006888:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800688c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006894:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	461a      	mov	r2, r3
 800689e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80068a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80068ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80068b2:	e841 2300 	strex	r3, r2, [r1]
 80068b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80068ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1da      	bne.n	8006878 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3308      	adds	r3, #8
 80068c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068cc:	e853 3f00 	ldrex	r3, [r3]
 80068d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068d4:	f023 0301 	bic.w	r3, r3, #1
 80068d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3308      	adds	r3, #8
 80068e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1e1      	bne.n	80068c2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3308      	adds	r3, #8
 8006904:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006908:	e853 3f00 	ldrex	r3, [r3]
 800690c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800690e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006910:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006914:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3308      	adds	r3, #8
 800691e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006922:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006924:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006926:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006928:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800692a:	e841 2300 	strex	r3, r2, [r1]
 800692e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1e3      	bne.n	80068fe <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2220      	movs	r2, #32
 800693a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800694c:	e853 3f00 	ldrex	r3, [r3]
 8006950:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006954:	f023 0310 	bic.w	r3, r3, #16
 8006958:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	461a      	mov	r2, r3
 8006962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006966:	65bb      	str	r3, [r7, #88]	; 0x58
 8006968:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800696c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800696e:	e841 2300 	strex	r3, r2, [r1]
 8006972:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1e4      	bne.n	8006944 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800697e:	4618      	mov	r0, r3
 8006980:	f7fc fa7e 	bl	8002e80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006990:	b29b      	uxth	r3, r3
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	b29b      	uxth	r3, r3
 8006996:	4619      	mov	r1, r3
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f8fb 	bl	8006b94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800699e:	e0dc      	b.n	8006b5a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 80ce 	beq.w	8006b5e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80069c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 80c9 	beq.w	8006b5e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d4:	e853 3f00 	ldrex	r3, [r3]
 80069d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	461a      	mov	r2, r3
 80069ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069ee:	647b      	str	r3, [r7, #68]	; 0x44
 80069f0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069f6:	e841 2300 	strex	r3, r2, [r1]
 80069fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1e4      	bne.n	80069cc <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3308      	adds	r3, #8
 8006a08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	e853 3f00 	ldrex	r3, [r3]
 8006a10:	623b      	str	r3, [r7, #32]
   return(result);
 8006a12:	6a3b      	ldr	r3, [r7, #32]
 8006a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a18:	f023 0301 	bic.w	r3, r3, #1
 8006a1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	3308      	adds	r3, #8
 8006a26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a2a:	633a      	str	r2, [r7, #48]	; 0x30
 8006a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a32:	e841 2300 	strex	r3, r2, [r1]
 8006a36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1e1      	bne.n	8006a02 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2220      	movs	r2, #32
 8006a42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 0310 	bic.w	r3, r3, #16
 8006a66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a74:	61fb      	str	r3, [r7, #28]
 8006a76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a78:	69b9      	ldr	r1, [r7, #24]
 8006a7a:	69fa      	ldr	r2, [r7, #28]
 8006a7c:	e841 2300 	strex	r3, r2, [r1]
 8006a80:	617b      	str	r3, [r7, #20]
   return(result);
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1e4      	bne.n	8006a52 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f880 	bl	8006b94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a94:	e063      	b.n	8006b5e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00e      	beq.n	8006ac0 <HAL_UART_IRQHandler+0x584>
 8006aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d008      	beq.n	8006ac0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006ab6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f001 fb57 	bl	800816c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006abe:	e051      	b.n	8006b64 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d014      	beq.n	8006af6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d105      	bne.n	8006ae4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006ad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006adc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d008      	beq.n	8006af6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d03a      	beq.n	8006b62 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	4798      	blx	r3
    }
    return;
 8006af4:	e035      	b.n	8006b62 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d009      	beq.n	8006b16 <HAL_UART_IRQHandler+0x5da>
 8006b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d003      	beq.n	8006b16 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fea4 	bl	800785c <UART_EndTransmit_IT>
    return;
 8006b14:	e026      	b.n	8006b64 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d009      	beq.n	8006b36 <HAL_UART_IRQHandler+0x5fa>
 8006b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b26:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d003      	beq.n	8006b36 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f001 fb30 	bl	8008194 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b34:	e016      	b.n	8006b64 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d010      	beq.n	8006b64 <HAL_UART_IRQHandler+0x628>
 8006b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	da0c      	bge.n	8006b64 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f001 fb18 	bl	8008180 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b50:	e008      	b.n	8006b64 <HAL_UART_IRQHandler+0x628>
      return;
 8006b52:	bf00      	nop
 8006b54:	e006      	b.n	8006b64 <HAL_UART_IRQHandler+0x628>
    return;
 8006b56:	bf00      	nop
 8006b58:	e004      	b.n	8006b64 <HAL_UART_IRQHandler+0x628>
      return;
 8006b5a:	bf00      	nop
 8006b5c:	e002      	b.n	8006b64 <HAL_UART_IRQHandler+0x628>
      return;
 8006b5e:	bf00      	nop
 8006b60:	e000      	b.n	8006b64 <HAL_UART_IRQHandler+0x628>
    return;
 8006b62:	bf00      	nop
  }
}
 8006b64:	37e8      	adds	r7, #232	; 0xe8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop

08006b6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bb0:	b08c      	sub	sp, #48	; 0x30
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	689a      	ldr	r2, [r3, #8]
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	69db      	ldr	r3, [r3, #28]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	4baa      	ldr	r3, [pc, #680]	; (8006e84 <UART_SetConfig+0x2d8>)
 8006bdc:	4013      	ands	r3, r2
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	6812      	ldr	r2, [r2, #0]
 8006be2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006be4:	430b      	orrs	r3, r1
 8006be6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	68da      	ldr	r2, [r3, #12]
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a9f      	ldr	r2, [pc, #636]	; (8006e88 <UART_SetConfig+0x2dc>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d004      	beq.n	8006c18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c14:	4313      	orrs	r3, r2
 8006c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006c22:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	6812      	ldr	r2, [r2, #0]
 8006c2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c2c:	430b      	orrs	r3, r1
 8006c2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c36:	f023 010f 	bic.w	r1, r3, #15
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	430a      	orrs	r2, r1
 8006c44:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a90      	ldr	r2, [pc, #576]	; (8006e8c <UART_SetConfig+0x2e0>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d125      	bne.n	8006c9c <UART_SetConfig+0xf0>
 8006c50:	4b8f      	ldr	r3, [pc, #572]	; (8006e90 <UART_SetConfig+0x2e4>)
 8006c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c56:	f003 0303 	and.w	r3, r3, #3
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d81a      	bhi.n	8006c94 <UART_SetConfig+0xe8>
 8006c5e:	a201      	add	r2, pc, #4	; (adr r2, 8006c64 <UART_SetConfig+0xb8>)
 8006c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c64:	08006c75 	.word	0x08006c75
 8006c68:	08006c85 	.word	0x08006c85
 8006c6c:	08006c7d 	.word	0x08006c7d
 8006c70:	08006c8d 	.word	0x08006c8d
 8006c74:	2301      	movs	r3, #1
 8006c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c7a:	e116      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c82:	e112      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006c84:	2304      	movs	r3, #4
 8006c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c8a:	e10e      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006c8c:	2308      	movs	r3, #8
 8006c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c92:	e10a      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006c94:	2310      	movs	r3, #16
 8006c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c9a:	e106      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a7c      	ldr	r2, [pc, #496]	; (8006e94 <UART_SetConfig+0x2e8>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d138      	bne.n	8006d18 <UART_SetConfig+0x16c>
 8006ca6:	4b7a      	ldr	r3, [pc, #488]	; (8006e90 <UART_SetConfig+0x2e4>)
 8006ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cac:	f003 030c 	and.w	r3, r3, #12
 8006cb0:	2b0c      	cmp	r3, #12
 8006cb2:	d82d      	bhi.n	8006d10 <UART_SetConfig+0x164>
 8006cb4:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <UART_SetConfig+0x110>)
 8006cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cba:	bf00      	nop
 8006cbc:	08006cf1 	.word	0x08006cf1
 8006cc0:	08006d11 	.word	0x08006d11
 8006cc4:	08006d11 	.word	0x08006d11
 8006cc8:	08006d11 	.word	0x08006d11
 8006ccc:	08006d01 	.word	0x08006d01
 8006cd0:	08006d11 	.word	0x08006d11
 8006cd4:	08006d11 	.word	0x08006d11
 8006cd8:	08006d11 	.word	0x08006d11
 8006cdc:	08006cf9 	.word	0x08006cf9
 8006ce0:	08006d11 	.word	0x08006d11
 8006ce4:	08006d11 	.word	0x08006d11
 8006ce8:	08006d11 	.word	0x08006d11
 8006cec:	08006d09 	.word	0x08006d09
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cf6:	e0d8      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cfe:	e0d4      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006d00:	2304      	movs	r3, #4
 8006d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d06:	e0d0      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006d08:	2308      	movs	r3, #8
 8006d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d0e:	e0cc      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006d10:	2310      	movs	r3, #16
 8006d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d16:	e0c8      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a5e      	ldr	r2, [pc, #376]	; (8006e98 <UART_SetConfig+0x2ec>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d125      	bne.n	8006d6e <UART_SetConfig+0x1c2>
 8006d22:	4b5b      	ldr	r3, [pc, #364]	; (8006e90 <UART_SetConfig+0x2e4>)
 8006d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d2c:	2b30      	cmp	r3, #48	; 0x30
 8006d2e:	d016      	beq.n	8006d5e <UART_SetConfig+0x1b2>
 8006d30:	2b30      	cmp	r3, #48	; 0x30
 8006d32:	d818      	bhi.n	8006d66 <UART_SetConfig+0x1ba>
 8006d34:	2b20      	cmp	r3, #32
 8006d36:	d00a      	beq.n	8006d4e <UART_SetConfig+0x1a2>
 8006d38:	2b20      	cmp	r3, #32
 8006d3a:	d814      	bhi.n	8006d66 <UART_SetConfig+0x1ba>
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d002      	beq.n	8006d46 <UART_SetConfig+0x19a>
 8006d40:	2b10      	cmp	r3, #16
 8006d42:	d008      	beq.n	8006d56 <UART_SetConfig+0x1aa>
 8006d44:	e00f      	b.n	8006d66 <UART_SetConfig+0x1ba>
 8006d46:	2300      	movs	r3, #0
 8006d48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d4c:	e0ad      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006d4e:	2302      	movs	r3, #2
 8006d50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d54:	e0a9      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006d56:	2304      	movs	r3, #4
 8006d58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d5c:	e0a5      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006d5e:	2308      	movs	r3, #8
 8006d60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d64:	e0a1      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006d66:	2310      	movs	r3, #16
 8006d68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d6c:	e09d      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a4a      	ldr	r2, [pc, #296]	; (8006e9c <UART_SetConfig+0x2f0>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d125      	bne.n	8006dc4 <UART_SetConfig+0x218>
 8006d78:	4b45      	ldr	r3, [pc, #276]	; (8006e90 <UART_SetConfig+0x2e4>)
 8006d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d82:	2bc0      	cmp	r3, #192	; 0xc0
 8006d84:	d016      	beq.n	8006db4 <UART_SetConfig+0x208>
 8006d86:	2bc0      	cmp	r3, #192	; 0xc0
 8006d88:	d818      	bhi.n	8006dbc <UART_SetConfig+0x210>
 8006d8a:	2b80      	cmp	r3, #128	; 0x80
 8006d8c:	d00a      	beq.n	8006da4 <UART_SetConfig+0x1f8>
 8006d8e:	2b80      	cmp	r3, #128	; 0x80
 8006d90:	d814      	bhi.n	8006dbc <UART_SetConfig+0x210>
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <UART_SetConfig+0x1f0>
 8006d96:	2b40      	cmp	r3, #64	; 0x40
 8006d98:	d008      	beq.n	8006dac <UART_SetConfig+0x200>
 8006d9a:	e00f      	b.n	8006dbc <UART_SetConfig+0x210>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006da2:	e082      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006da4:	2302      	movs	r3, #2
 8006da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006daa:	e07e      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006dac:	2304      	movs	r3, #4
 8006dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006db2:	e07a      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006db4:	2308      	movs	r3, #8
 8006db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dba:	e076      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006dbc:	2310      	movs	r3, #16
 8006dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dc2:	e072      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a35      	ldr	r2, [pc, #212]	; (8006ea0 <UART_SetConfig+0x2f4>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d12a      	bne.n	8006e24 <UART_SetConfig+0x278>
 8006dce:	4b30      	ldr	r3, [pc, #192]	; (8006e90 <UART_SetConfig+0x2e4>)
 8006dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ddc:	d01a      	beq.n	8006e14 <UART_SetConfig+0x268>
 8006dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006de2:	d81b      	bhi.n	8006e1c <UART_SetConfig+0x270>
 8006de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006de8:	d00c      	beq.n	8006e04 <UART_SetConfig+0x258>
 8006dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dee:	d815      	bhi.n	8006e1c <UART_SetConfig+0x270>
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d003      	beq.n	8006dfc <UART_SetConfig+0x250>
 8006df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006df8:	d008      	beq.n	8006e0c <UART_SetConfig+0x260>
 8006dfa:	e00f      	b.n	8006e1c <UART_SetConfig+0x270>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e02:	e052      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006e04:	2302      	movs	r3, #2
 8006e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e0a:	e04e      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006e0c:	2304      	movs	r3, #4
 8006e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e12:	e04a      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006e14:	2308      	movs	r3, #8
 8006e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e1a:	e046      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006e1c:	2310      	movs	r3, #16
 8006e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e22:	e042      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a17      	ldr	r2, [pc, #92]	; (8006e88 <UART_SetConfig+0x2dc>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d13a      	bne.n	8006ea4 <UART_SetConfig+0x2f8>
 8006e2e:	4b18      	ldr	r3, [pc, #96]	; (8006e90 <UART_SetConfig+0x2e4>)
 8006e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e3c:	d01a      	beq.n	8006e74 <UART_SetConfig+0x2c8>
 8006e3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e42:	d81b      	bhi.n	8006e7c <UART_SetConfig+0x2d0>
 8006e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e48:	d00c      	beq.n	8006e64 <UART_SetConfig+0x2b8>
 8006e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e4e:	d815      	bhi.n	8006e7c <UART_SetConfig+0x2d0>
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d003      	beq.n	8006e5c <UART_SetConfig+0x2b0>
 8006e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e58:	d008      	beq.n	8006e6c <UART_SetConfig+0x2c0>
 8006e5a:	e00f      	b.n	8006e7c <UART_SetConfig+0x2d0>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e62:	e022      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006e64:	2302      	movs	r3, #2
 8006e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e6a:	e01e      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006e6c:	2304      	movs	r3, #4
 8006e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e72:	e01a      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006e74:	2308      	movs	r3, #8
 8006e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e7a:	e016      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006e7c:	2310      	movs	r3, #16
 8006e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e82:	e012      	b.n	8006eaa <UART_SetConfig+0x2fe>
 8006e84:	cfff69f3 	.word	0xcfff69f3
 8006e88:	40008000 	.word	0x40008000
 8006e8c:	40013800 	.word	0x40013800
 8006e90:	40021000 	.word	0x40021000
 8006e94:	40004400 	.word	0x40004400
 8006e98:	40004800 	.word	0x40004800
 8006e9c:	40004c00 	.word	0x40004c00
 8006ea0:	40005000 	.word	0x40005000
 8006ea4:	2310      	movs	r3, #16
 8006ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4aae      	ldr	r2, [pc, #696]	; (8007168 <UART_SetConfig+0x5bc>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	f040 8097 	bne.w	8006fe4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006eb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006eba:	2b08      	cmp	r3, #8
 8006ebc:	d823      	bhi.n	8006f06 <UART_SetConfig+0x35a>
 8006ebe:	a201      	add	r2, pc, #4	; (adr r2, 8006ec4 <UART_SetConfig+0x318>)
 8006ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec4:	08006ee9 	.word	0x08006ee9
 8006ec8:	08006f07 	.word	0x08006f07
 8006ecc:	08006ef1 	.word	0x08006ef1
 8006ed0:	08006f07 	.word	0x08006f07
 8006ed4:	08006ef7 	.word	0x08006ef7
 8006ed8:	08006f07 	.word	0x08006f07
 8006edc:	08006f07 	.word	0x08006f07
 8006ee0:	08006f07 	.word	0x08006f07
 8006ee4:	08006eff 	.word	0x08006eff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ee8:	f7fc ffbe 	bl	8003e68 <HAL_RCC_GetPCLK1Freq>
 8006eec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006eee:	e010      	b.n	8006f12 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ef0:	4b9e      	ldr	r3, [pc, #632]	; (800716c <UART_SetConfig+0x5c0>)
 8006ef2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ef4:	e00d      	b.n	8006f12 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ef6:	f7fc ff49 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8006efa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006efc:	e009      	b.n	8006f12 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f04:	e005      	b.n	8006f12 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f000 8130 	beq.w	800717a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	4a94      	ldr	r2, [pc, #592]	; (8007170 <UART_SetConfig+0x5c4>)
 8006f20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f24:	461a      	mov	r2, r3
 8006f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f28:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f2c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	4613      	mov	r3, r2
 8006f34:	005b      	lsls	r3, r3, #1
 8006f36:	4413      	add	r3, r2
 8006f38:	69ba      	ldr	r2, [r7, #24]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d305      	bcc.n	8006f4a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d903      	bls.n	8006f52 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f50:	e113      	b.n	800717a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	2200      	movs	r2, #0
 8006f56:	60bb      	str	r3, [r7, #8]
 8006f58:	60fa      	str	r2, [r7, #12]
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5e:	4a84      	ldr	r2, [pc, #528]	; (8007170 <UART_SetConfig+0x5c4>)
 8006f60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	2200      	movs	r2, #0
 8006f68:	603b      	str	r3, [r7, #0]
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f70:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f74:	f7f9 f9bc 	bl	80002f0 <__aeabi_uldivmod>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	4619      	mov	r1, r3
 8006f80:	f04f 0200 	mov.w	r2, #0
 8006f84:	f04f 0300 	mov.w	r3, #0
 8006f88:	020b      	lsls	r3, r1, #8
 8006f8a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f8e:	0202      	lsls	r2, r0, #8
 8006f90:	6979      	ldr	r1, [r7, #20]
 8006f92:	6849      	ldr	r1, [r1, #4]
 8006f94:	0849      	lsrs	r1, r1, #1
 8006f96:	2000      	movs	r0, #0
 8006f98:	460c      	mov	r4, r1
 8006f9a:	4605      	mov	r5, r0
 8006f9c:	eb12 0804 	adds.w	r8, r2, r4
 8006fa0:	eb43 0905 	adc.w	r9, r3, r5
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	469a      	mov	sl, r3
 8006fac:	4693      	mov	fp, r2
 8006fae:	4652      	mov	r2, sl
 8006fb0:	465b      	mov	r3, fp
 8006fb2:	4640      	mov	r0, r8
 8006fb4:	4649      	mov	r1, r9
 8006fb6:	f7f9 f99b 	bl	80002f0 <__aeabi_uldivmod>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fc8:	d308      	bcc.n	8006fdc <UART_SetConfig+0x430>
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fd0:	d204      	bcs.n	8006fdc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6a3a      	ldr	r2, [r7, #32]
 8006fd8:	60da      	str	r2, [r3, #12]
 8006fda:	e0ce      	b.n	800717a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006fe2:	e0ca      	b.n	800717a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	69db      	ldr	r3, [r3, #28]
 8006fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fec:	d166      	bne.n	80070bc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006fee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ff2:	2b08      	cmp	r3, #8
 8006ff4:	d827      	bhi.n	8007046 <UART_SetConfig+0x49a>
 8006ff6:	a201      	add	r2, pc, #4	; (adr r2, 8006ffc <UART_SetConfig+0x450>)
 8006ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffc:	08007021 	.word	0x08007021
 8007000:	08007029 	.word	0x08007029
 8007004:	08007031 	.word	0x08007031
 8007008:	08007047 	.word	0x08007047
 800700c:	08007037 	.word	0x08007037
 8007010:	08007047 	.word	0x08007047
 8007014:	08007047 	.word	0x08007047
 8007018:	08007047 	.word	0x08007047
 800701c:	0800703f 	.word	0x0800703f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007020:	f7fc ff22 	bl	8003e68 <HAL_RCC_GetPCLK1Freq>
 8007024:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007026:	e014      	b.n	8007052 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007028:	f7fc ff34 	bl	8003e94 <HAL_RCC_GetPCLK2Freq>
 800702c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800702e:	e010      	b.n	8007052 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007030:	4b4e      	ldr	r3, [pc, #312]	; (800716c <UART_SetConfig+0x5c0>)
 8007032:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007034:	e00d      	b.n	8007052 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007036:	f7fc fea9 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 800703a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800703c:	e009      	b.n	8007052 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800703e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007044:	e005      	b.n	8007052 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007046:	2300      	movs	r3, #0
 8007048:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007050:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 8090 	beq.w	800717a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705e:	4a44      	ldr	r2, [pc, #272]	; (8007170 <UART_SetConfig+0x5c4>)
 8007060:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007064:	461a      	mov	r2, r3
 8007066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007068:	fbb3 f3f2 	udiv	r3, r3, r2
 800706c:	005a      	lsls	r2, r3, #1
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	085b      	lsrs	r3, r3, #1
 8007074:	441a      	add	r2, r3
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	fbb2 f3f3 	udiv	r3, r2, r3
 800707e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007080:	6a3b      	ldr	r3, [r7, #32]
 8007082:	2b0f      	cmp	r3, #15
 8007084:	d916      	bls.n	80070b4 <UART_SetConfig+0x508>
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800708c:	d212      	bcs.n	80070b4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	b29b      	uxth	r3, r3
 8007092:	f023 030f 	bic.w	r3, r3, #15
 8007096:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	085b      	lsrs	r3, r3, #1
 800709c:	b29b      	uxth	r3, r3
 800709e:	f003 0307 	and.w	r3, r3, #7
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	8bfb      	ldrh	r3, [r7, #30]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	8bfa      	ldrh	r2, [r7, #30]
 80070b0:	60da      	str	r2, [r3, #12]
 80070b2:	e062      	b.n	800717a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80070ba:	e05e      	b.n	800717a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80070c0:	2b08      	cmp	r3, #8
 80070c2:	d828      	bhi.n	8007116 <UART_SetConfig+0x56a>
 80070c4:	a201      	add	r2, pc, #4	; (adr r2, 80070cc <UART_SetConfig+0x520>)
 80070c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ca:	bf00      	nop
 80070cc:	080070f1 	.word	0x080070f1
 80070d0:	080070f9 	.word	0x080070f9
 80070d4:	08007101 	.word	0x08007101
 80070d8:	08007117 	.word	0x08007117
 80070dc:	08007107 	.word	0x08007107
 80070e0:	08007117 	.word	0x08007117
 80070e4:	08007117 	.word	0x08007117
 80070e8:	08007117 	.word	0x08007117
 80070ec:	0800710f 	.word	0x0800710f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070f0:	f7fc feba 	bl	8003e68 <HAL_RCC_GetPCLK1Freq>
 80070f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070f6:	e014      	b.n	8007122 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070f8:	f7fc fecc 	bl	8003e94 <HAL_RCC_GetPCLK2Freq>
 80070fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070fe:	e010      	b.n	8007122 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007100:	4b1a      	ldr	r3, [pc, #104]	; (800716c <UART_SetConfig+0x5c0>)
 8007102:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007104:	e00d      	b.n	8007122 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007106:	f7fc fe41 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 800710a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800710c:	e009      	b.n	8007122 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800710e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007112:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007114:	e005      	b.n	8007122 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007116:	2300      	movs	r3, #0
 8007118:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007120:	bf00      	nop
    }

    if (pclk != 0U)
 8007122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007124:	2b00      	cmp	r3, #0
 8007126:	d028      	beq.n	800717a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	4a10      	ldr	r2, [pc, #64]	; (8007170 <UART_SetConfig+0x5c4>)
 800712e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007132:	461a      	mov	r2, r3
 8007134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007136:	fbb3 f2f2 	udiv	r2, r3, r2
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	085b      	lsrs	r3, r3, #1
 8007140:	441a      	add	r2, r3
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	fbb2 f3f3 	udiv	r3, r2, r3
 800714a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800714c:	6a3b      	ldr	r3, [r7, #32]
 800714e:	2b0f      	cmp	r3, #15
 8007150:	d910      	bls.n	8007174 <UART_SetConfig+0x5c8>
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007158:	d20c      	bcs.n	8007174 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	b29a      	uxth	r2, r3
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	60da      	str	r2, [r3, #12]
 8007164:	e009      	b.n	800717a <UART_SetConfig+0x5ce>
 8007166:	bf00      	nop
 8007168:	40008000 	.word	0x40008000
 800716c:	00f42400 	.word	0x00f42400
 8007170:	08009914 	.word	0x08009914
      }
      else
      {
        ret = HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	2201      	movs	r2, #1
 800717e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	2201      	movs	r2, #1
 8007186:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2200      	movs	r2, #0
 800718e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	2200      	movs	r2, #0
 8007194:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007196:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800719a:	4618      	mov	r0, r3
 800719c:	3730      	adds	r7, #48	; 0x30
 800719e:	46bd      	mov	sp, r7
 80071a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080071a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b0:	f003 0301 	and.w	r3, r3, #1
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00a      	beq.n	80071ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00a      	beq.n	80071f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f4:	f003 0304 	and.w	r3, r3, #4
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00a      	beq.n	8007212 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	430a      	orrs	r2, r1
 8007210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007216:	f003 0308 	and.w	r3, r3, #8
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00a      	beq.n	8007234 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	430a      	orrs	r2, r1
 8007232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007238:	f003 0310 	and.w	r3, r3, #16
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00a      	beq.n	8007256 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725a:	f003 0320 	and.w	r3, r3, #32
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00a      	beq.n	8007278 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	430a      	orrs	r2, r1
 8007276:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007280:	2b00      	cmp	r3, #0
 8007282:	d01a      	beq.n	80072ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	430a      	orrs	r2, r1
 8007298:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072a2:	d10a      	bne.n	80072ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	430a      	orrs	r2, r1
 80072b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00a      	beq.n	80072dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	430a      	orrs	r2, r1
 80072da:	605a      	str	r2, [r3, #4]
  }
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af02      	add	r7, sp, #8
 80072ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072f8:	f7fa fbaa 	bl	8001a50 <HAL_GetTick>
 80072fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0308 	and.w	r3, r3, #8
 8007308:	2b08      	cmp	r3, #8
 800730a:	d10e      	bne.n	800732a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800730c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f82f 	bl	800737e <UART_WaitOnFlagUntilTimeout>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e025      	b.n	8007376 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0304 	and.w	r3, r3, #4
 8007334:	2b04      	cmp	r3, #4
 8007336:	d10e      	bne.n	8007356 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007338:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f819 	bl	800737e <UART_WaitOnFlagUntilTimeout>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e00f      	b.n	8007376 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2220      	movs	r2, #32
 800735a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2220      	movs	r2, #32
 8007362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b09c      	sub	sp, #112	; 0x70
 8007382:	af00      	add	r7, sp, #0
 8007384:	60f8      	str	r0, [r7, #12]
 8007386:	60b9      	str	r1, [r7, #8]
 8007388:	603b      	str	r3, [r7, #0]
 800738a:	4613      	mov	r3, r2
 800738c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800738e:	e0a9      	b.n	80074e4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007390:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007396:	f000 80a5 	beq.w	80074e4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800739a:	f7fa fb59 	bl	8001a50 <HAL_GetTick>
 800739e:	4602      	mov	r2, r0
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d302      	bcc.n	80073b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80073aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d140      	bne.n	8007432 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073b8:	e853 3f00 	ldrex	r3, [r3]
 80073bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80073be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073c4:	667b      	str	r3, [r7, #100]	; 0x64
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	461a      	mov	r2, r3
 80073cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073d0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80073d6:	e841 2300 	strex	r3, r2, [r1]
 80073da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80073dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1e6      	bne.n	80073b0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3308      	adds	r3, #8
 80073e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ec:	e853 3f00 	ldrex	r3, [r3]
 80073f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f4:	f023 0301 	bic.w	r3, r3, #1
 80073f8:	663b      	str	r3, [r7, #96]	; 0x60
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3308      	adds	r3, #8
 8007400:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007402:	64ba      	str	r2, [r7, #72]	; 0x48
 8007404:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007406:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007408:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800740a:	e841 2300 	strex	r3, r2, [r1]
 800740e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1e5      	bne.n	80073e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2220      	movs	r2, #32
 800741a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2220      	movs	r2, #32
 8007422:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e069      	b.n	8007506 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 0304 	and.w	r3, r3, #4
 800743c:	2b00      	cmp	r3, #0
 800743e:	d051      	beq.n	80074e4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800744a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800744e:	d149      	bne.n	80074e4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007458:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007462:	e853 3f00 	ldrex	r3, [r3]
 8007466:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800746e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	461a      	mov	r2, r3
 8007476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007478:	637b      	str	r3, [r7, #52]	; 0x34
 800747a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800747e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007480:	e841 2300 	strex	r3, r2, [r1]
 8007484:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e6      	bne.n	800745a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3308      	adds	r3, #8
 8007492:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	613b      	str	r3, [r7, #16]
   return(result);
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	f023 0301 	bic.w	r3, r3, #1
 80074a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3308      	adds	r3, #8
 80074aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80074ac:	623a      	str	r2, [r7, #32]
 80074ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b0:	69f9      	ldr	r1, [r7, #28]
 80074b2:	6a3a      	ldr	r2, [r7, #32]
 80074b4:	e841 2300 	strex	r3, r2, [r1]
 80074b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e5      	bne.n	800748c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2220      	movs	r2, #32
 80074c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2220      	movs	r2, #32
 80074cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2220      	movs	r2, #32
 80074d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e010      	b.n	8007506 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	69da      	ldr	r2, [r3, #28]
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	4013      	ands	r3, r2
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	bf0c      	ite	eq
 80074f4:	2301      	moveq	r3, #1
 80074f6:	2300      	movne	r3, #0
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	461a      	mov	r2, r3
 80074fc:	79fb      	ldrb	r3, [r7, #7]
 80074fe:	429a      	cmp	r2, r3
 8007500:	f43f af46 	beq.w	8007390 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3770      	adds	r7, #112	; 0x70
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
	...

08007510 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007510:	b480      	push	{r7}
 8007512:	b0a3      	sub	sp, #140	; 0x8c
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	4613      	mov	r3, r2
 800751c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	88fa      	ldrh	r2, [r7, #6]
 8007528:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	88fa      	ldrh	r2, [r7, #6]
 8007530:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007542:	d10e      	bne.n	8007562 <UART_Start_Receive_IT+0x52>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d105      	bne.n	8007558 <UART_Start_Receive_IT+0x48>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007552:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007556:	e02d      	b.n	80075b4 <UART_Start_Receive_IT+0xa4>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	22ff      	movs	r2, #255	; 0xff
 800755c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007560:	e028      	b.n	80075b4 <UART_Start_Receive_IT+0xa4>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10d      	bne.n	8007586 <UART_Start_Receive_IT+0x76>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d104      	bne.n	800757c <UART_Start_Receive_IT+0x6c>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	22ff      	movs	r2, #255	; 0xff
 8007576:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800757a:	e01b      	b.n	80075b4 <UART_Start_Receive_IT+0xa4>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	227f      	movs	r2, #127	; 0x7f
 8007580:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007584:	e016      	b.n	80075b4 <UART_Start_Receive_IT+0xa4>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800758e:	d10d      	bne.n	80075ac <UART_Start_Receive_IT+0x9c>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d104      	bne.n	80075a2 <UART_Start_Receive_IT+0x92>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	227f      	movs	r2, #127	; 0x7f
 800759c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075a0:	e008      	b.n	80075b4 <UART_Start_Receive_IT+0xa4>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	223f      	movs	r2, #63	; 0x3f
 80075a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075aa:	e003      	b.n	80075b4 <UART_Start_Receive_IT+0xa4>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2222      	movs	r2, #34	; 0x22
 80075c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	3308      	adds	r3, #8
 80075ca:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075ce:	e853 3f00 	ldrex	r3, [r3]
 80075d2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80075d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075d6:	f043 0301 	orr.w	r3, r3, #1
 80075da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3308      	adds	r3, #8
 80075e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80075e8:	673a      	str	r2, [r7, #112]	; 0x70
 80075ea:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80075ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80075f0:	e841 2300 	strex	r3, r2, [r1]
 80075f4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80075f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1e3      	bne.n	80075c4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007604:	d153      	bne.n	80076ae <UART_Start_Receive_IT+0x19e>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800760c:	88fa      	ldrh	r2, [r7, #6]
 800760e:	429a      	cmp	r2, r3
 8007610:	d34d      	bcc.n	80076ae <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800761a:	d107      	bne.n	800762c <UART_Start_Receive_IT+0x11c>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d103      	bne.n	800762c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	4a4b      	ldr	r2, [pc, #300]	; (8007754 <UART_Start_Receive_IT+0x244>)
 8007628:	671a      	str	r2, [r3, #112]	; 0x70
 800762a:	e002      	b.n	8007632 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4a4a      	ldr	r2, [pc, #296]	; (8007758 <UART_Start_Receive_IT+0x248>)
 8007630:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d01a      	beq.n	8007678 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800764a:	e853 3f00 	ldrex	r3, [r3]
 800764e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007656:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	461a      	mov	r2, r3
 8007660:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007664:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007666:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007668:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800766a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800766c:	e841 2300 	strex	r3, r2, [r1]
 8007670:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e4      	bne.n	8007642 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	3308      	adds	r3, #8
 800767e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007682:	e853 3f00 	ldrex	r3, [r3]
 8007686:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800768e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	3308      	adds	r3, #8
 8007696:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007698:	64ba      	str	r2, [r7, #72]	; 0x48
 800769a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800769e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076a0:	e841 2300 	strex	r3, r2, [r1]
 80076a4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80076a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1e5      	bne.n	8007678 <UART_Start_Receive_IT+0x168>
 80076ac:	e04a      	b.n	8007744 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076b6:	d107      	bne.n	80076c8 <UART_Start_Receive_IT+0x1b8>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d103      	bne.n	80076c8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	4a26      	ldr	r2, [pc, #152]	; (800775c <UART_Start_Receive_IT+0x24c>)
 80076c4:	671a      	str	r2, [r3, #112]	; 0x70
 80076c6:	e002      	b.n	80076ce <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	4a25      	ldr	r2, [pc, #148]	; (8007760 <UART_Start_Receive_IT+0x250>)
 80076cc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d019      	beq.n	8007712 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e6:	e853 3f00 	ldrex	r3, [r3]
 80076ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ee:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80076f2:	677b      	str	r3, [r7, #116]	; 0x74
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	461a      	mov	r2, r3
 80076fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076fc:	637b      	str	r3, [r7, #52]	; 0x34
 80076fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007700:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007702:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007704:	e841 2300 	strex	r3, r2, [r1]
 8007708:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800770a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1e6      	bne.n	80076de <UART_Start_Receive_IT+0x1ce>
 8007710:	e018      	b.n	8007744 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	e853 3f00 	ldrex	r3, [r3]
 800771e:	613b      	str	r3, [r7, #16]
   return(result);
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	f043 0320 	orr.w	r3, r3, #32
 8007726:	67bb      	str	r3, [r7, #120]	; 0x78
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	461a      	mov	r2, r3
 800772e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007730:	623b      	str	r3, [r7, #32]
 8007732:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007734:	69f9      	ldr	r1, [r7, #28]
 8007736:	6a3a      	ldr	r2, [r7, #32]
 8007738:	e841 2300 	strex	r3, r2, [r1]
 800773c:	61bb      	str	r3, [r7, #24]
   return(result);
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1e6      	bne.n	8007712 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	378c      	adds	r7, #140	; 0x8c
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	08007e6d 	.word	0x08007e6d
 8007758:	08007b75 	.word	0x08007b75
 800775c:	08007a13 	.word	0x08007a13
 8007760:	080078b3 	.word	0x080078b3

08007764 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007764:	b480      	push	{r7}
 8007766:	b095      	sub	sp, #84	; 0x54
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007774:	e853 3f00 	ldrex	r3, [r3]
 8007778:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800777a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007780:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	461a      	mov	r2, r3
 8007788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800778a:	643b      	str	r3, [r7, #64]	; 0x40
 800778c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007790:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007792:	e841 2300 	strex	r3, r2, [r1]
 8007796:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1e6      	bne.n	800776c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	3308      	adds	r3, #8
 80077a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	e853 3f00 	ldrex	r3, [r3]
 80077ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077b4:	f023 0301 	bic.w	r3, r3, #1
 80077b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	3308      	adds	r3, #8
 80077c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077ca:	e841 2300 	strex	r3, r2, [r1]
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1e3      	bne.n	800779e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d118      	bne.n	8007810 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	e853 3f00 	ldrex	r3, [r3]
 80077ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	f023 0310 	bic.w	r3, r3, #16
 80077f2:	647b      	str	r3, [r7, #68]	; 0x44
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	461a      	mov	r2, r3
 80077fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077fc:	61bb      	str	r3, [r7, #24]
 80077fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007800:	6979      	ldr	r1, [r7, #20]
 8007802:	69ba      	ldr	r2, [r7, #24]
 8007804:	e841 2300 	strex	r3, r2, [r1]
 8007808:	613b      	str	r3, [r7, #16]
   return(result);
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1e6      	bne.n	80077de <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2220      	movs	r2, #32
 8007814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007824:	bf00      	nop
 8007826:	3754      	adds	r7, #84	; 0x54
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f7ff f996 	bl	8006b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007854:	bf00      	nop
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b088      	sub	sp, #32
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	e853 3f00 	ldrex	r3, [r3]
 8007870:	60bb      	str	r3, [r7, #8]
   return(result);
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007878:	61fb      	str	r3, [r7, #28]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	461a      	mov	r2, r3
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	61bb      	str	r3, [r7, #24]
 8007884:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007886:	6979      	ldr	r1, [r7, #20]
 8007888:	69ba      	ldr	r2, [r7, #24]
 800788a:	e841 2300 	strex	r3, r2, [r1]
 800788e:	613b      	str	r3, [r7, #16]
   return(result);
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1e6      	bne.n	8007864 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2220      	movs	r2, #32
 800789a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f7ff f961 	bl	8006b6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078aa:	bf00      	nop
 80078ac:	3720      	adds	r7, #32
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b096      	sub	sp, #88	; 0x58
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80078c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ca:	2b22      	cmp	r3, #34	; 0x22
 80078cc:	f040 8095 	bne.w	80079fa <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80078da:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80078de:	b2d9      	uxtb	r1, r3
 80078e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80078e4:	b2da      	uxtb	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ea:	400a      	ands	r2, r1
 80078ec:	b2d2      	uxtb	r2, r2
 80078ee:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f4:	1c5a      	adds	r2, r3, #1
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007900:	b29b      	uxth	r3, r3
 8007902:	3b01      	subs	r3, #1
 8007904:	b29a      	uxth	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007912:	b29b      	uxth	r3, r3
 8007914:	2b00      	cmp	r3, #0
 8007916:	d178      	bne.n	8007a0a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007920:	e853 3f00 	ldrex	r3, [r3]
 8007924:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007928:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800792c:	653b      	str	r3, [r7, #80]	; 0x50
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007936:	647b      	str	r3, [r7, #68]	; 0x44
 8007938:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800793c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800793e:	e841 2300 	strex	r3, r2, [r1]
 8007942:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1e6      	bne.n	8007918 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	3308      	adds	r3, #8
 8007950:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	e853 3f00 	ldrex	r3, [r3]
 8007958:	623b      	str	r3, [r7, #32]
   return(result);
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	f023 0301 	bic.w	r3, r3, #1
 8007960:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	3308      	adds	r3, #8
 8007968:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800796a:	633a      	str	r2, [r7, #48]	; 0x30
 800796c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007972:	e841 2300 	strex	r3, r2, [r1]
 8007976:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1e5      	bne.n	800794a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2220      	movs	r2, #32
 8007982:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007990:	2b01      	cmp	r3, #1
 8007992:	d12e      	bne.n	80079f2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	e853 3f00 	ldrex	r3, [r3]
 80079a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f023 0310 	bic.w	r3, r3, #16
 80079ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	461a      	mov	r2, r3
 80079b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079b8:	61fb      	str	r3, [r7, #28]
 80079ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079bc:	69b9      	ldr	r1, [r7, #24]
 80079be:	69fa      	ldr	r2, [r7, #28]
 80079c0:	e841 2300 	strex	r3, r2, [r1]
 80079c4:	617b      	str	r3, [r7, #20]
   return(result);
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1e6      	bne.n	800799a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	69db      	ldr	r3, [r3, #28]
 80079d2:	f003 0310 	and.w	r3, r3, #16
 80079d6:	2b10      	cmp	r3, #16
 80079d8:	d103      	bne.n	80079e2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2210      	movs	r2, #16
 80079e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079e8:	4619      	mov	r1, r3
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7ff f8d2 	bl	8006b94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079f0:	e00b      	b.n	8007a0a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7f9 ffc2 	bl	800197c <HAL_UART_RxCpltCallback>
}
 80079f8:	e007      	b.n	8007a0a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	699a      	ldr	r2, [r3, #24]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f042 0208 	orr.w	r2, r2, #8
 8007a08:	619a      	str	r2, [r3, #24]
}
 8007a0a:	bf00      	nop
 8007a0c:	3758      	adds	r7, #88	; 0x58
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b096      	sub	sp, #88	; 0x58
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007a20:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a2a:	2b22      	cmp	r3, #34	; 0x22
 8007a2c:	f040 8095 	bne.w	8007b5a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a36:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a3e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a40:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007a44:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007a48:	4013      	ands	r3, r2
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a4e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a54:	1c9a      	adds	r2, r3, #2
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	3b01      	subs	r3, #1
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d178      	bne.n	8007b6a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a80:	e853 3f00 	ldrex	r3, [r3]
 8007a84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	461a      	mov	r2, r3
 8007a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a96:	643b      	str	r3, [r7, #64]	; 0x40
 8007a98:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a9e:	e841 2300 	strex	r3, r2, [r1]
 8007aa2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1e6      	bne.n	8007a78 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	3308      	adds	r3, #8
 8007ab0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	e853 3f00 	ldrex	r3, [r3]
 8007ab8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	f023 0301 	bic.w	r3, r3, #1
 8007ac0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3308      	adds	r3, #8
 8007ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007acc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ace:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ad2:	e841 2300 	strex	r3, r2, [r1]
 8007ad6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1e5      	bne.n	8007aaa <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2220      	movs	r2, #32
 8007ae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d12e      	bne.n	8007b52 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	e853 3f00 	ldrex	r3, [r3]
 8007b06:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	f023 0310 	bic.w	r3, r3, #16
 8007b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	461a      	mov	r2, r3
 8007b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b18:	61bb      	str	r3, [r7, #24]
 8007b1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1c:	6979      	ldr	r1, [r7, #20]
 8007b1e:	69ba      	ldr	r2, [r7, #24]
 8007b20:	e841 2300 	strex	r3, r2, [r1]
 8007b24:	613b      	str	r3, [r7, #16]
   return(result);
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1e6      	bne.n	8007afa <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	69db      	ldr	r3, [r3, #28]
 8007b32:	f003 0310 	and.w	r3, r3, #16
 8007b36:	2b10      	cmp	r3, #16
 8007b38:	d103      	bne.n	8007b42 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2210      	movs	r2, #16
 8007b40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7ff f822 	bl	8006b94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b50:	e00b      	b.n	8007b6a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7f9 ff12 	bl	800197c <HAL_UART_RxCpltCallback>
}
 8007b58:	e007      	b.n	8007b6a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	699a      	ldr	r2, [r3, #24]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f042 0208 	orr.w	r2, r2, #8
 8007b68:	619a      	str	r2, [r3, #24]
}
 8007b6a:	bf00      	nop
 8007b6c:	3758      	adds	r7, #88	; 0x58
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
	...

08007b74 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b0a6      	sub	sp, #152	; 0x98
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b82:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	69db      	ldr	r3, [r3, #28]
 8007b8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007baa:	2b22      	cmp	r3, #34	; 0x22
 8007bac:	f040 814f 	bne.w	8007e4e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007bb6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007bba:	e0f6      	b.n	8007daa <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007bc6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007bca:	b2d9      	uxtb	r1, r3
 8007bcc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd6:	400a      	ands	r2, r1
 8007bd8:	b2d2      	uxtb	r2, r2
 8007bda:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be0:	1c5a      	adds	r2, r3, #1
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	69db      	ldr	r3, [r3, #28]
 8007bfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007c02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c06:	f003 0307 	and.w	r3, r3, #7
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d053      	beq.n	8007cb6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d011      	beq.n	8007c3e <UART_RxISR_8BIT_FIFOEN+0xca>
 8007c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00b      	beq.n	8007c3e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c34:	f043 0201 	orr.w	r2, r3, #1
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c42:	f003 0302 	and.w	r3, r3, #2
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d011      	beq.n	8007c6e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007c4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00b      	beq.n	8007c6e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c64:	f043 0204 	orr.w	r2, r3, #4
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c72:	f003 0304 	and.w	r3, r3, #4
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d011      	beq.n	8007c9e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007c7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c7e:	f003 0301 	and.w	r3, r3, #1
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00b      	beq.n	8007c9e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2204      	movs	r2, #4
 8007c8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c94:	f043 0202 	orr.w	r2, r3, #2
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d006      	beq.n	8007cb6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f7fe ff69 	bl	8006b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d173      	bne.n	8007daa <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cca:	e853 3f00 	ldrex	r3, [r3]
 8007cce:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007cd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ce4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ce6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007cea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007cec:	e841 2300 	strex	r3, r2, [r1]
 8007cf0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007cf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1e4      	bne.n	8007cc2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	3308      	adds	r3, #8
 8007cfe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d02:	e853 3f00 	ldrex	r3, [r3]
 8007d06:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d0e:	f023 0301 	bic.w	r3, r3, #1
 8007d12:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	3308      	adds	r3, #8
 8007d1a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007d1c:	657a      	str	r2, [r7, #84]	; 0x54
 8007d1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d20:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d24:	e841 2300 	strex	r3, r2, [r1]
 8007d28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1e3      	bne.n	8007cf8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2220      	movs	r2, #32
 8007d34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d12e      	bne.n	8007da4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d54:	e853 3f00 	ldrex	r3, [r3]
 8007d58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5c:	f023 0310 	bic.w	r3, r3, #16
 8007d60:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	461a      	mov	r2, r3
 8007d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d6a:	643b      	str	r3, [r7, #64]	; 0x40
 8007d6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d72:	e841 2300 	strex	r3, r2, [r1]
 8007d76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1e6      	bne.n	8007d4c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	69db      	ldr	r3, [r3, #28]
 8007d84:	f003 0310 	and.w	r3, r3, #16
 8007d88:	2b10      	cmp	r3, #16
 8007d8a:	d103      	bne.n	8007d94 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2210      	movs	r2, #16
 8007d92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f7fe fef9 	bl	8006b94 <HAL_UARTEx_RxEventCallback>
 8007da2:	e002      	b.n	8007daa <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f7f9 fde9 	bl	800197c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007daa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d006      	beq.n	8007dc0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8007db2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007db6:	f003 0320 	and.w	r3, r3, #32
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f47f aefe 	bne.w	8007bbc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007dc6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007dca:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d045      	beq.n	8007e5e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007dd8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d23e      	bcs.n	8007e5e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	3308      	adds	r3, #8
 8007de6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de8:	6a3b      	ldr	r3, [r7, #32]
 8007dea:	e853 3f00 	ldrex	r3, [r3]
 8007dee:	61fb      	str	r3, [r7, #28]
   return(result);
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007df6:	673b      	str	r3, [r7, #112]	; 0x70
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	3308      	adds	r3, #8
 8007dfe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e08:	e841 2300 	strex	r3, r2, [r1]
 8007e0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d1e5      	bne.n	8007de0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a14      	ldr	r2, [pc, #80]	; (8007e68 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007e18:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	e853 3f00 	ldrex	r3, [r3]
 8007e26:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	f043 0320 	orr.w	r3, r3, #32
 8007e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	461a      	mov	r2, r3
 8007e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e38:	61bb      	str	r3, [r7, #24]
 8007e3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	6979      	ldr	r1, [r7, #20]
 8007e3e:	69ba      	ldr	r2, [r7, #24]
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	613b      	str	r3, [r7, #16]
   return(result);
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e6      	bne.n	8007e1a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e4c:	e007      	b.n	8007e5e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	699a      	ldr	r2, [r3, #24]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f042 0208 	orr.w	r2, r2, #8
 8007e5c:	619a      	str	r2, [r3, #24]
}
 8007e5e:	bf00      	nop
 8007e60:	3798      	adds	r7, #152	; 0x98
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	080078b3 	.word	0x080078b3

08007e6c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b0a8      	sub	sp, #160	; 0xa0
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007e7a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	69db      	ldr	r3, [r3, #28]
 8007e84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ea2:	2b22      	cmp	r3, #34	; 0x22
 8007ea4:	f040 8153 	bne.w	800814e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007eae:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007eb2:	e0fa      	b.n	80080aa <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eba:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007ec6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007eca:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007ece:	4013      	ands	r3, r2
 8007ed0:	b29a      	uxth	r2, r3
 8007ed2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ed6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007edc:	1c9a      	adds	r2, r3, #2
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	3b01      	subs	r3, #1
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	69db      	ldr	r3, [r3, #28]
 8007efa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007efe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f02:	f003 0307 	and.w	r3, r3, #7
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d053      	beq.n	8007fb2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d011      	beq.n	8007f3a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007f16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00b      	beq.n	8007f3a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2201      	movs	r2, #1
 8007f28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f30:	f043 0201 	orr.w	r2, r3, #1
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f3e:	f003 0302 	and.w	r3, r3, #2
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d011      	beq.n	8007f6a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007f46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00b      	beq.n	8007f6a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2202      	movs	r2, #2
 8007f58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f60:	f043 0204 	orr.w	r2, r3, #4
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f6e:	f003 0304 	and.w	r3, r3, #4
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d011      	beq.n	8007f9a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007f76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f7a:	f003 0301 	and.w	r3, r3, #1
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00b      	beq.n	8007f9a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2204      	movs	r2, #4
 8007f88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f90:	f043 0202 	orr.w	r2, r3, #2
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d006      	beq.n	8007fb2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7fe fdeb 	bl	8006b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d175      	bne.n	80080aa <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fc6:	e853 3f00 	ldrex	r3, [r3]
 8007fca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fe0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fe2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007fe6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007fe8:	e841 2300 	strex	r3, r2, [r1]
 8007fec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007fee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e4      	bne.n	8007fbe <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ffe:	e853 3f00 	ldrex	r3, [r3]
 8008002:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800800a:	f023 0301 	bic.w	r3, r3, #1
 800800e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	3308      	adds	r3, #8
 8008018:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800801c:	65ba      	str	r2, [r7, #88]	; 0x58
 800801e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008020:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008022:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008024:	e841 2300 	strex	r3, r2, [r1]
 8008028:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800802a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e1      	bne.n	8007ff4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2220      	movs	r2, #32
 8008034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008042:	2b01      	cmp	r3, #1
 8008044:	d12e      	bne.n	80080a4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008054:	e853 3f00 	ldrex	r3, [r3]
 8008058:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800805a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800805c:	f023 0310 	bic.w	r3, r3, #16
 8008060:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	461a      	mov	r2, r3
 8008068:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800806a:	647b      	str	r3, [r7, #68]	; 0x44
 800806c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008070:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008072:	e841 2300 	strex	r3, r2, [r1]
 8008076:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1e6      	bne.n	800804c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	69db      	ldr	r3, [r3, #28]
 8008084:	f003 0310 	and.w	r3, r3, #16
 8008088:	2b10      	cmp	r3, #16
 800808a:	d103      	bne.n	8008094 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2210      	movs	r2, #16
 8008092:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800809a:	4619      	mov	r1, r3
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7fe fd79 	bl	8006b94 <HAL_UARTEx_RxEventCallback>
 80080a2:	e002      	b.n	80080aa <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7f9 fc69 	bl	800197c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080aa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d006      	beq.n	80080c0 <UART_RxISR_16BIT_FIFOEN+0x254>
 80080b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080b6:	f003 0320 	and.w	r3, r3, #32
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f47f aefa 	bne.w	8007eb4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080c6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80080ca:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d045      	beq.n	800815e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80080d8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80080dc:	429a      	cmp	r2, r3
 80080de:	d23e      	bcs.n	800815e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	3308      	adds	r3, #8
 80080e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ea:	e853 3f00 	ldrex	r3, [r3]
 80080ee:	623b      	str	r3, [r7, #32]
   return(result);
 80080f0:	6a3b      	ldr	r3, [r7, #32]
 80080f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080f6:	677b      	str	r3, [r7, #116]	; 0x74
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	3308      	adds	r3, #8
 80080fe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008100:	633a      	str	r2, [r7, #48]	; 0x30
 8008102:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008104:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008108:	e841 2300 	strex	r3, r2, [r1]
 800810c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800810e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1e5      	bne.n	80080e0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a14      	ldr	r2, [pc, #80]	; (8008168 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008118:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	e853 3f00 	ldrex	r3, [r3]
 8008126:	60fb      	str	r3, [r7, #12]
   return(result);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f043 0320 	orr.w	r3, r3, #32
 800812e:	673b      	str	r3, [r7, #112]	; 0x70
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	461a      	mov	r2, r3
 8008136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008138:	61fb      	str	r3, [r7, #28]
 800813a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813c:	69b9      	ldr	r1, [r7, #24]
 800813e:	69fa      	ldr	r2, [r7, #28]
 8008140:	e841 2300 	strex	r3, r2, [r1]
 8008144:	617b      	str	r3, [r7, #20]
   return(result);
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1e6      	bne.n	800811a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800814c:	e007      	b.n	800815e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	699a      	ldr	r2, [r3, #24]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f042 0208 	orr.w	r2, r2, #8
 800815c:	619a      	str	r2, [r3, #24]
}
 800815e:	bf00      	nop
 8008160:	37a0      	adds	r7, #160	; 0xa0
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	08007a13 	.word	0x08007a13

0800816c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008174:	bf00      	nop
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008188:	bf00      	nop
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d101      	bne.n	80081be <HAL_UARTEx_DisableFifoMode+0x16>
 80081ba:	2302      	movs	r3, #2
 80081bc:	e027      	b.n	800820e <HAL_UARTEx_DisableFifoMode+0x66>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2224      	movs	r2, #36	; 0x24
 80081ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f022 0201 	bic.w	r2, r2, #1
 80081e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80081ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2220      	movs	r2, #32
 8008200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b084      	sub	sp, #16
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800822a:	2b01      	cmp	r3, #1
 800822c:	d101      	bne.n	8008232 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800822e:	2302      	movs	r3, #2
 8008230:	e02d      	b.n	800828e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2201      	movs	r2, #1
 8008236:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2224      	movs	r2, #36	; 0x24
 800823e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f022 0201 	bic.w	r2, r2, #1
 8008258:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	430a      	orrs	r2, r1
 800826c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f850 	bl	8008314 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2220      	movs	r2, #32
 8008280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b084      	sub	sp, #16
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d101      	bne.n	80082ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082aa:	2302      	movs	r3, #2
 80082ac:	e02d      	b.n	800830a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2224      	movs	r2, #36	; 0x24
 80082ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f022 0201 	bic.w	r2, r2, #1
 80082d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	683a      	ldr	r2, [r7, #0]
 80082e6:	430a      	orrs	r2, r1
 80082e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f812 	bl	8008314 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2220      	movs	r2, #32
 80082fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
	...

08008314 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008320:	2b00      	cmp	r3, #0
 8008322:	d108      	bne.n	8008336 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008334:	e031      	b.n	800839a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008336:	2308      	movs	r3, #8
 8008338:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800833a:	2308      	movs	r3, #8
 800833c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	0e5b      	lsrs	r3, r3, #25
 8008346:	b2db      	uxtb	r3, r3
 8008348:	f003 0307 	and.w	r3, r3, #7
 800834c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	0f5b      	lsrs	r3, r3, #29
 8008356:	b2db      	uxtb	r3, r3
 8008358:	f003 0307 	and.w	r3, r3, #7
 800835c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800835e:	7bbb      	ldrb	r3, [r7, #14]
 8008360:	7b3a      	ldrb	r2, [r7, #12]
 8008362:	4911      	ldr	r1, [pc, #68]	; (80083a8 <UARTEx_SetNbDataToProcess+0x94>)
 8008364:	5c8a      	ldrb	r2, [r1, r2]
 8008366:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800836a:	7b3a      	ldrb	r2, [r7, #12]
 800836c:	490f      	ldr	r1, [pc, #60]	; (80083ac <UARTEx_SetNbDataToProcess+0x98>)
 800836e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008370:	fb93 f3f2 	sdiv	r3, r3, r2
 8008374:	b29a      	uxth	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800837c:	7bfb      	ldrb	r3, [r7, #15]
 800837e:	7b7a      	ldrb	r2, [r7, #13]
 8008380:	4909      	ldr	r1, [pc, #36]	; (80083a8 <UARTEx_SetNbDataToProcess+0x94>)
 8008382:	5c8a      	ldrb	r2, [r1, r2]
 8008384:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008388:	7b7a      	ldrb	r2, [r7, #13]
 800838a:	4908      	ldr	r1, [pc, #32]	; (80083ac <UARTEx_SetNbDataToProcess+0x98>)
 800838c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800838e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008392:	b29a      	uxth	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800839a:	bf00      	nop
 800839c:	3714      	adds	r7, #20
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	0800992c 	.word	0x0800992c
 80083ac:	08009934 	.word	0x08009934

080083b0 <atoi>:
 80083b0:	220a      	movs	r2, #10
 80083b2:	2100      	movs	r1, #0
 80083b4:	f000 b882 	b.w	80084bc <strtol>

080083b8 <_strtol_l.constprop.0>:
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083be:	d001      	beq.n	80083c4 <_strtol_l.constprop.0+0xc>
 80083c0:	2b24      	cmp	r3, #36	; 0x24
 80083c2:	d906      	bls.n	80083d2 <_strtol_l.constprop.0+0x1a>
 80083c4:	f000 fa56 	bl	8008874 <__errno>
 80083c8:	2316      	movs	r3, #22
 80083ca:	6003      	str	r3, [r0, #0]
 80083cc:	2000      	movs	r0, #0
 80083ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80084b8 <_strtol_l.constprop.0+0x100>
 80083d6:	460d      	mov	r5, r1
 80083d8:	462e      	mov	r6, r5
 80083da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083de:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80083e2:	f017 0708 	ands.w	r7, r7, #8
 80083e6:	d1f7      	bne.n	80083d8 <_strtol_l.constprop.0+0x20>
 80083e8:	2c2d      	cmp	r4, #45	; 0x2d
 80083ea:	d132      	bne.n	8008452 <_strtol_l.constprop.0+0x9a>
 80083ec:	782c      	ldrb	r4, [r5, #0]
 80083ee:	2701      	movs	r7, #1
 80083f0:	1cb5      	adds	r5, r6, #2
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d05b      	beq.n	80084ae <_strtol_l.constprop.0+0xf6>
 80083f6:	2b10      	cmp	r3, #16
 80083f8:	d109      	bne.n	800840e <_strtol_l.constprop.0+0x56>
 80083fa:	2c30      	cmp	r4, #48	; 0x30
 80083fc:	d107      	bne.n	800840e <_strtol_l.constprop.0+0x56>
 80083fe:	782c      	ldrb	r4, [r5, #0]
 8008400:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008404:	2c58      	cmp	r4, #88	; 0x58
 8008406:	d14d      	bne.n	80084a4 <_strtol_l.constprop.0+0xec>
 8008408:	786c      	ldrb	r4, [r5, #1]
 800840a:	2310      	movs	r3, #16
 800840c:	3502      	adds	r5, #2
 800840e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008412:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008416:	f04f 0e00 	mov.w	lr, #0
 800841a:	fbb8 f9f3 	udiv	r9, r8, r3
 800841e:	4676      	mov	r6, lr
 8008420:	fb03 8a19 	mls	sl, r3, r9, r8
 8008424:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008428:	f1bc 0f09 	cmp.w	ip, #9
 800842c:	d816      	bhi.n	800845c <_strtol_l.constprop.0+0xa4>
 800842e:	4664      	mov	r4, ip
 8008430:	42a3      	cmp	r3, r4
 8008432:	dd24      	ble.n	800847e <_strtol_l.constprop.0+0xc6>
 8008434:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8008438:	d008      	beq.n	800844c <_strtol_l.constprop.0+0x94>
 800843a:	45b1      	cmp	r9, r6
 800843c:	d31c      	bcc.n	8008478 <_strtol_l.constprop.0+0xc0>
 800843e:	d101      	bne.n	8008444 <_strtol_l.constprop.0+0x8c>
 8008440:	45a2      	cmp	sl, r4
 8008442:	db19      	blt.n	8008478 <_strtol_l.constprop.0+0xc0>
 8008444:	fb06 4603 	mla	r6, r6, r3, r4
 8008448:	f04f 0e01 	mov.w	lr, #1
 800844c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008450:	e7e8      	b.n	8008424 <_strtol_l.constprop.0+0x6c>
 8008452:	2c2b      	cmp	r4, #43	; 0x2b
 8008454:	bf04      	itt	eq
 8008456:	782c      	ldrbeq	r4, [r5, #0]
 8008458:	1cb5      	addeq	r5, r6, #2
 800845a:	e7ca      	b.n	80083f2 <_strtol_l.constprop.0+0x3a>
 800845c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008460:	f1bc 0f19 	cmp.w	ip, #25
 8008464:	d801      	bhi.n	800846a <_strtol_l.constprop.0+0xb2>
 8008466:	3c37      	subs	r4, #55	; 0x37
 8008468:	e7e2      	b.n	8008430 <_strtol_l.constprop.0+0x78>
 800846a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800846e:	f1bc 0f19 	cmp.w	ip, #25
 8008472:	d804      	bhi.n	800847e <_strtol_l.constprop.0+0xc6>
 8008474:	3c57      	subs	r4, #87	; 0x57
 8008476:	e7db      	b.n	8008430 <_strtol_l.constprop.0+0x78>
 8008478:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800847c:	e7e6      	b.n	800844c <_strtol_l.constprop.0+0x94>
 800847e:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8008482:	d105      	bne.n	8008490 <_strtol_l.constprop.0+0xd8>
 8008484:	2322      	movs	r3, #34	; 0x22
 8008486:	6003      	str	r3, [r0, #0]
 8008488:	4646      	mov	r6, r8
 800848a:	b942      	cbnz	r2, 800849e <_strtol_l.constprop.0+0xe6>
 800848c:	4630      	mov	r0, r6
 800848e:	e79e      	b.n	80083ce <_strtol_l.constprop.0+0x16>
 8008490:	b107      	cbz	r7, 8008494 <_strtol_l.constprop.0+0xdc>
 8008492:	4276      	negs	r6, r6
 8008494:	2a00      	cmp	r2, #0
 8008496:	d0f9      	beq.n	800848c <_strtol_l.constprop.0+0xd4>
 8008498:	f1be 0f00 	cmp.w	lr, #0
 800849c:	d000      	beq.n	80084a0 <_strtol_l.constprop.0+0xe8>
 800849e:	1e69      	subs	r1, r5, #1
 80084a0:	6011      	str	r1, [r2, #0]
 80084a2:	e7f3      	b.n	800848c <_strtol_l.constprop.0+0xd4>
 80084a4:	2430      	movs	r4, #48	; 0x30
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1b1      	bne.n	800840e <_strtol_l.constprop.0+0x56>
 80084aa:	2308      	movs	r3, #8
 80084ac:	e7af      	b.n	800840e <_strtol_l.constprop.0+0x56>
 80084ae:	2c30      	cmp	r4, #48	; 0x30
 80084b0:	d0a5      	beq.n	80083fe <_strtol_l.constprop.0+0x46>
 80084b2:	230a      	movs	r3, #10
 80084b4:	e7ab      	b.n	800840e <_strtol_l.constprop.0+0x56>
 80084b6:	bf00      	nop
 80084b8:	0800993d 	.word	0x0800993d

080084bc <strtol>:
 80084bc:	4613      	mov	r3, r2
 80084be:	460a      	mov	r2, r1
 80084c0:	4601      	mov	r1, r0
 80084c2:	4802      	ldr	r0, [pc, #8]	; (80084cc <strtol+0x10>)
 80084c4:	6800      	ldr	r0, [r0, #0]
 80084c6:	f7ff bf77 	b.w	80083b8 <_strtol_l.constprop.0>
 80084ca:	bf00      	nop
 80084cc:	20000120 	.word	0x20000120

080084d0 <std>:
 80084d0:	2300      	movs	r3, #0
 80084d2:	b510      	push	{r4, lr}
 80084d4:	4604      	mov	r4, r0
 80084d6:	e9c0 3300 	strd	r3, r3, [r0]
 80084da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084de:	6083      	str	r3, [r0, #8]
 80084e0:	8181      	strh	r1, [r0, #12]
 80084e2:	6643      	str	r3, [r0, #100]	; 0x64
 80084e4:	81c2      	strh	r2, [r0, #14]
 80084e6:	6183      	str	r3, [r0, #24]
 80084e8:	4619      	mov	r1, r3
 80084ea:	2208      	movs	r2, #8
 80084ec:	305c      	adds	r0, #92	; 0x5c
 80084ee:	f000 f916 	bl	800871e <memset>
 80084f2:	4b05      	ldr	r3, [pc, #20]	; (8008508 <std+0x38>)
 80084f4:	6263      	str	r3, [r4, #36]	; 0x24
 80084f6:	4b05      	ldr	r3, [pc, #20]	; (800850c <std+0x3c>)
 80084f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80084fa:	4b05      	ldr	r3, [pc, #20]	; (8008510 <std+0x40>)
 80084fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084fe:	4b05      	ldr	r3, [pc, #20]	; (8008514 <std+0x44>)
 8008500:	6224      	str	r4, [r4, #32]
 8008502:	6323      	str	r3, [r4, #48]	; 0x30
 8008504:	bd10      	pop	{r4, pc}
 8008506:	bf00      	nop
 8008508:	08008699 	.word	0x08008699
 800850c:	080086bb 	.word	0x080086bb
 8008510:	080086f3 	.word	0x080086f3
 8008514:	08008717 	.word	0x08008717

08008518 <stdio_exit_handler>:
 8008518:	4a02      	ldr	r2, [pc, #8]	; (8008524 <stdio_exit_handler+0xc>)
 800851a:	4903      	ldr	r1, [pc, #12]	; (8008528 <stdio_exit_handler+0x10>)
 800851c:	4803      	ldr	r0, [pc, #12]	; (800852c <stdio_exit_handler+0x14>)
 800851e:	f000 b869 	b.w	80085f4 <_fwalk_sglue>
 8008522:	bf00      	nop
 8008524:	200000c8 	.word	0x200000c8
 8008528:	080091e5 	.word	0x080091e5
 800852c:	200000d4 	.word	0x200000d4

08008530 <cleanup_stdio>:
 8008530:	6841      	ldr	r1, [r0, #4]
 8008532:	4b0c      	ldr	r3, [pc, #48]	; (8008564 <cleanup_stdio+0x34>)
 8008534:	4299      	cmp	r1, r3
 8008536:	b510      	push	{r4, lr}
 8008538:	4604      	mov	r4, r0
 800853a:	d001      	beq.n	8008540 <cleanup_stdio+0x10>
 800853c:	f000 fe52 	bl	80091e4 <_fflush_r>
 8008540:	68a1      	ldr	r1, [r4, #8]
 8008542:	4b09      	ldr	r3, [pc, #36]	; (8008568 <cleanup_stdio+0x38>)
 8008544:	4299      	cmp	r1, r3
 8008546:	d002      	beq.n	800854e <cleanup_stdio+0x1e>
 8008548:	4620      	mov	r0, r4
 800854a:	f000 fe4b 	bl	80091e4 <_fflush_r>
 800854e:	68e1      	ldr	r1, [r4, #12]
 8008550:	4b06      	ldr	r3, [pc, #24]	; (800856c <cleanup_stdio+0x3c>)
 8008552:	4299      	cmp	r1, r3
 8008554:	d004      	beq.n	8008560 <cleanup_stdio+0x30>
 8008556:	4620      	mov	r0, r4
 8008558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800855c:	f000 be42 	b.w	80091e4 <_fflush_r>
 8008560:	bd10      	pop	{r4, pc}
 8008562:	bf00      	nop
 8008564:	200004e4 	.word	0x200004e4
 8008568:	2000054c 	.word	0x2000054c
 800856c:	200005b4 	.word	0x200005b4

08008570 <global_stdio_init.part.0>:
 8008570:	b510      	push	{r4, lr}
 8008572:	4b0b      	ldr	r3, [pc, #44]	; (80085a0 <global_stdio_init.part.0+0x30>)
 8008574:	4c0b      	ldr	r4, [pc, #44]	; (80085a4 <global_stdio_init.part.0+0x34>)
 8008576:	4a0c      	ldr	r2, [pc, #48]	; (80085a8 <global_stdio_init.part.0+0x38>)
 8008578:	601a      	str	r2, [r3, #0]
 800857a:	4620      	mov	r0, r4
 800857c:	2200      	movs	r2, #0
 800857e:	2104      	movs	r1, #4
 8008580:	f7ff ffa6 	bl	80084d0 <std>
 8008584:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008588:	2201      	movs	r2, #1
 800858a:	2109      	movs	r1, #9
 800858c:	f7ff ffa0 	bl	80084d0 <std>
 8008590:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008594:	2202      	movs	r2, #2
 8008596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800859a:	2112      	movs	r1, #18
 800859c:	f7ff bf98 	b.w	80084d0 <std>
 80085a0:	2000061c 	.word	0x2000061c
 80085a4:	200004e4 	.word	0x200004e4
 80085a8:	08008519 	.word	0x08008519

080085ac <__sfp_lock_acquire>:
 80085ac:	4801      	ldr	r0, [pc, #4]	; (80085b4 <__sfp_lock_acquire+0x8>)
 80085ae:	f000 b98b 	b.w	80088c8 <__retarget_lock_acquire_recursive>
 80085b2:	bf00      	nop
 80085b4:	20000625 	.word	0x20000625

080085b8 <__sfp_lock_release>:
 80085b8:	4801      	ldr	r0, [pc, #4]	; (80085c0 <__sfp_lock_release+0x8>)
 80085ba:	f000 b986 	b.w	80088ca <__retarget_lock_release_recursive>
 80085be:	bf00      	nop
 80085c0:	20000625 	.word	0x20000625

080085c4 <__sinit>:
 80085c4:	b510      	push	{r4, lr}
 80085c6:	4604      	mov	r4, r0
 80085c8:	f7ff fff0 	bl	80085ac <__sfp_lock_acquire>
 80085cc:	6a23      	ldr	r3, [r4, #32]
 80085ce:	b11b      	cbz	r3, 80085d8 <__sinit+0x14>
 80085d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085d4:	f7ff bff0 	b.w	80085b8 <__sfp_lock_release>
 80085d8:	4b04      	ldr	r3, [pc, #16]	; (80085ec <__sinit+0x28>)
 80085da:	6223      	str	r3, [r4, #32]
 80085dc:	4b04      	ldr	r3, [pc, #16]	; (80085f0 <__sinit+0x2c>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1f5      	bne.n	80085d0 <__sinit+0xc>
 80085e4:	f7ff ffc4 	bl	8008570 <global_stdio_init.part.0>
 80085e8:	e7f2      	b.n	80085d0 <__sinit+0xc>
 80085ea:	bf00      	nop
 80085ec:	08008531 	.word	0x08008531
 80085f0:	2000061c 	.word	0x2000061c

080085f4 <_fwalk_sglue>:
 80085f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085f8:	4607      	mov	r7, r0
 80085fa:	4688      	mov	r8, r1
 80085fc:	4614      	mov	r4, r2
 80085fe:	2600      	movs	r6, #0
 8008600:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008604:	f1b9 0901 	subs.w	r9, r9, #1
 8008608:	d505      	bpl.n	8008616 <_fwalk_sglue+0x22>
 800860a:	6824      	ldr	r4, [r4, #0]
 800860c:	2c00      	cmp	r4, #0
 800860e:	d1f7      	bne.n	8008600 <_fwalk_sglue+0xc>
 8008610:	4630      	mov	r0, r6
 8008612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008616:	89ab      	ldrh	r3, [r5, #12]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d907      	bls.n	800862c <_fwalk_sglue+0x38>
 800861c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008620:	3301      	adds	r3, #1
 8008622:	d003      	beq.n	800862c <_fwalk_sglue+0x38>
 8008624:	4629      	mov	r1, r5
 8008626:	4638      	mov	r0, r7
 8008628:	47c0      	blx	r8
 800862a:	4306      	orrs	r6, r0
 800862c:	3568      	adds	r5, #104	; 0x68
 800862e:	e7e9      	b.n	8008604 <_fwalk_sglue+0x10>

08008630 <sniprintf>:
 8008630:	b40c      	push	{r2, r3}
 8008632:	b530      	push	{r4, r5, lr}
 8008634:	4b17      	ldr	r3, [pc, #92]	; (8008694 <sniprintf+0x64>)
 8008636:	1e0c      	subs	r4, r1, #0
 8008638:	681d      	ldr	r5, [r3, #0]
 800863a:	b09d      	sub	sp, #116	; 0x74
 800863c:	da08      	bge.n	8008650 <sniprintf+0x20>
 800863e:	238b      	movs	r3, #139	; 0x8b
 8008640:	602b      	str	r3, [r5, #0]
 8008642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008646:	b01d      	add	sp, #116	; 0x74
 8008648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800864c:	b002      	add	sp, #8
 800864e:	4770      	bx	lr
 8008650:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008654:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008658:	bf14      	ite	ne
 800865a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800865e:	4623      	moveq	r3, r4
 8008660:	9304      	str	r3, [sp, #16]
 8008662:	9307      	str	r3, [sp, #28]
 8008664:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008668:	9002      	str	r0, [sp, #8]
 800866a:	9006      	str	r0, [sp, #24]
 800866c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008670:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008672:	ab21      	add	r3, sp, #132	; 0x84
 8008674:	a902      	add	r1, sp, #8
 8008676:	4628      	mov	r0, r5
 8008678:	9301      	str	r3, [sp, #4]
 800867a:	f000 fa9f 	bl	8008bbc <_svfiprintf_r>
 800867e:	1c43      	adds	r3, r0, #1
 8008680:	bfbc      	itt	lt
 8008682:	238b      	movlt	r3, #139	; 0x8b
 8008684:	602b      	strlt	r3, [r5, #0]
 8008686:	2c00      	cmp	r4, #0
 8008688:	d0dd      	beq.n	8008646 <sniprintf+0x16>
 800868a:	9b02      	ldr	r3, [sp, #8]
 800868c:	2200      	movs	r2, #0
 800868e:	701a      	strb	r2, [r3, #0]
 8008690:	e7d9      	b.n	8008646 <sniprintf+0x16>
 8008692:	bf00      	nop
 8008694:	20000120 	.word	0x20000120

08008698 <__sread>:
 8008698:	b510      	push	{r4, lr}
 800869a:	460c      	mov	r4, r1
 800869c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086a0:	f000 f8c4 	bl	800882c <_read_r>
 80086a4:	2800      	cmp	r0, #0
 80086a6:	bfab      	itete	ge
 80086a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086aa:	89a3      	ldrhlt	r3, [r4, #12]
 80086ac:	181b      	addge	r3, r3, r0
 80086ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086b2:	bfac      	ite	ge
 80086b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80086b6:	81a3      	strhlt	r3, [r4, #12]
 80086b8:	bd10      	pop	{r4, pc}

080086ba <__swrite>:
 80086ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086be:	461f      	mov	r7, r3
 80086c0:	898b      	ldrh	r3, [r1, #12]
 80086c2:	05db      	lsls	r3, r3, #23
 80086c4:	4605      	mov	r5, r0
 80086c6:	460c      	mov	r4, r1
 80086c8:	4616      	mov	r6, r2
 80086ca:	d505      	bpl.n	80086d8 <__swrite+0x1e>
 80086cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d0:	2302      	movs	r3, #2
 80086d2:	2200      	movs	r2, #0
 80086d4:	f000 f898 	bl	8008808 <_lseek_r>
 80086d8:	89a3      	ldrh	r3, [r4, #12]
 80086da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086e2:	81a3      	strh	r3, [r4, #12]
 80086e4:	4632      	mov	r2, r6
 80086e6:	463b      	mov	r3, r7
 80086e8:	4628      	mov	r0, r5
 80086ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086ee:	f000 b8af 	b.w	8008850 <_write_r>

080086f2 <__sseek>:
 80086f2:	b510      	push	{r4, lr}
 80086f4:	460c      	mov	r4, r1
 80086f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086fa:	f000 f885 	bl	8008808 <_lseek_r>
 80086fe:	1c43      	adds	r3, r0, #1
 8008700:	89a3      	ldrh	r3, [r4, #12]
 8008702:	bf15      	itete	ne
 8008704:	6560      	strne	r0, [r4, #84]	; 0x54
 8008706:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800870a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800870e:	81a3      	strheq	r3, [r4, #12]
 8008710:	bf18      	it	ne
 8008712:	81a3      	strhne	r3, [r4, #12]
 8008714:	bd10      	pop	{r4, pc}

08008716 <__sclose>:
 8008716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800871a:	f000 b865 	b.w	80087e8 <_close_r>

0800871e <memset>:
 800871e:	4402      	add	r2, r0
 8008720:	4603      	mov	r3, r0
 8008722:	4293      	cmp	r3, r2
 8008724:	d100      	bne.n	8008728 <memset+0xa>
 8008726:	4770      	bx	lr
 8008728:	f803 1b01 	strb.w	r1, [r3], #1
 800872c:	e7f9      	b.n	8008722 <memset+0x4>
	...

08008730 <strtok>:
 8008730:	4b16      	ldr	r3, [pc, #88]	; (800878c <strtok+0x5c>)
 8008732:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008734:	681e      	ldr	r6, [r3, #0]
 8008736:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8008738:	4605      	mov	r5, r0
 800873a:	b9fc      	cbnz	r4, 800877c <strtok+0x4c>
 800873c:	2050      	movs	r0, #80	; 0x50
 800873e:	9101      	str	r1, [sp, #4]
 8008740:	f000 f92e 	bl	80089a0 <malloc>
 8008744:	9901      	ldr	r1, [sp, #4]
 8008746:	6470      	str	r0, [r6, #68]	; 0x44
 8008748:	4602      	mov	r2, r0
 800874a:	b920      	cbnz	r0, 8008756 <strtok+0x26>
 800874c:	4b10      	ldr	r3, [pc, #64]	; (8008790 <strtok+0x60>)
 800874e:	4811      	ldr	r0, [pc, #68]	; (8008794 <strtok+0x64>)
 8008750:	215b      	movs	r1, #91	; 0x5b
 8008752:	f000 f8bb 	bl	80088cc <__assert_func>
 8008756:	e9c0 4400 	strd	r4, r4, [r0]
 800875a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800875e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008762:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008766:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800876a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800876e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008772:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008776:	6184      	str	r4, [r0, #24]
 8008778:	7704      	strb	r4, [r0, #28]
 800877a:	6244      	str	r4, [r0, #36]	; 0x24
 800877c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800877e:	2301      	movs	r3, #1
 8008780:	4628      	mov	r0, r5
 8008782:	b002      	add	sp, #8
 8008784:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008788:	f000 b806 	b.w	8008798 <__strtok_r>
 800878c:	20000120 	.word	0x20000120
 8008790:	08009a3d 	.word	0x08009a3d
 8008794:	08009a54 	.word	0x08009a54

08008798 <__strtok_r>:
 8008798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800879a:	b908      	cbnz	r0, 80087a0 <__strtok_r+0x8>
 800879c:	6810      	ldr	r0, [r2, #0]
 800879e:	b188      	cbz	r0, 80087c4 <__strtok_r+0x2c>
 80087a0:	4604      	mov	r4, r0
 80087a2:	4620      	mov	r0, r4
 80087a4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80087a8:	460f      	mov	r7, r1
 80087aa:	f817 6b01 	ldrb.w	r6, [r7], #1
 80087ae:	b91e      	cbnz	r6, 80087b8 <__strtok_r+0x20>
 80087b0:	b965      	cbnz	r5, 80087cc <__strtok_r+0x34>
 80087b2:	6015      	str	r5, [r2, #0]
 80087b4:	4628      	mov	r0, r5
 80087b6:	e005      	b.n	80087c4 <__strtok_r+0x2c>
 80087b8:	42b5      	cmp	r5, r6
 80087ba:	d1f6      	bne.n	80087aa <__strtok_r+0x12>
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1f0      	bne.n	80087a2 <__strtok_r+0xa>
 80087c0:	6014      	str	r4, [r2, #0]
 80087c2:	7003      	strb	r3, [r0, #0]
 80087c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087c6:	461c      	mov	r4, r3
 80087c8:	e00c      	b.n	80087e4 <__strtok_r+0x4c>
 80087ca:	b915      	cbnz	r5, 80087d2 <__strtok_r+0x3a>
 80087cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80087d0:	460e      	mov	r6, r1
 80087d2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80087d6:	42ab      	cmp	r3, r5
 80087d8:	d1f7      	bne.n	80087ca <__strtok_r+0x32>
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d0f3      	beq.n	80087c6 <__strtok_r+0x2e>
 80087de:	2300      	movs	r3, #0
 80087e0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80087e4:	6014      	str	r4, [r2, #0]
 80087e6:	e7ed      	b.n	80087c4 <__strtok_r+0x2c>

080087e8 <_close_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	4d06      	ldr	r5, [pc, #24]	; (8008804 <_close_r+0x1c>)
 80087ec:	2300      	movs	r3, #0
 80087ee:	4604      	mov	r4, r0
 80087f0:	4608      	mov	r0, r1
 80087f2:	602b      	str	r3, [r5, #0]
 80087f4:	f7f8 fb37 	bl	8000e66 <_close>
 80087f8:	1c43      	adds	r3, r0, #1
 80087fa:	d102      	bne.n	8008802 <_close_r+0x1a>
 80087fc:	682b      	ldr	r3, [r5, #0]
 80087fe:	b103      	cbz	r3, 8008802 <_close_r+0x1a>
 8008800:	6023      	str	r3, [r4, #0]
 8008802:	bd38      	pop	{r3, r4, r5, pc}
 8008804:	20000620 	.word	0x20000620

08008808 <_lseek_r>:
 8008808:	b538      	push	{r3, r4, r5, lr}
 800880a:	4d07      	ldr	r5, [pc, #28]	; (8008828 <_lseek_r+0x20>)
 800880c:	4604      	mov	r4, r0
 800880e:	4608      	mov	r0, r1
 8008810:	4611      	mov	r1, r2
 8008812:	2200      	movs	r2, #0
 8008814:	602a      	str	r2, [r5, #0]
 8008816:	461a      	mov	r2, r3
 8008818:	f7f8 fb4c 	bl	8000eb4 <_lseek>
 800881c:	1c43      	adds	r3, r0, #1
 800881e:	d102      	bne.n	8008826 <_lseek_r+0x1e>
 8008820:	682b      	ldr	r3, [r5, #0]
 8008822:	b103      	cbz	r3, 8008826 <_lseek_r+0x1e>
 8008824:	6023      	str	r3, [r4, #0]
 8008826:	bd38      	pop	{r3, r4, r5, pc}
 8008828:	20000620 	.word	0x20000620

0800882c <_read_r>:
 800882c:	b538      	push	{r3, r4, r5, lr}
 800882e:	4d07      	ldr	r5, [pc, #28]	; (800884c <_read_r+0x20>)
 8008830:	4604      	mov	r4, r0
 8008832:	4608      	mov	r0, r1
 8008834:	4611      	mov	r1, r2
 8008836:	2200      	movs	r2, #0
 8008838:	602a      	str	r2, [r5, #0]
 800883a:	461a      	mov	r2, r3
 800883c:	f7f8 fada 	bl	8000df4 <_read>
 8008840:	1c43      	adds	r3, r0, #1
 8008842:	d102      	bne.n	800884a <_read_r+0x1e>
 8008844:	682b      	ldr	r3, [r5, #0]
 8008846:	b103      	cbz	r3, 800884a <_read_r+0x1e>
 8008848:	6023      	str	r3, [r4, #0]
 800884a:	bd38      	pop	{r3, r4, r5, pc}
 800884c:	20000620 	.word	0x20000620

08008850 <_write_r>:
 8008850:	b538      	push	{r3, r4, r5, lr}
 8008852:	4d07      	ldr	r5, [pc, #28]	; (8008870 <_write_r+0x20>)
 8008854:	4604      	mov	r4, r0
 8008856:	4608      	mov	r0, r1
 8008858:	4611      	mov	r1, r2
 800885a:	2200      	movs	r2, #0
 800885c:	602a      	str	r2, [r5, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	f7f8 fae5 	bl	8000e2e <_write>
 8008864:	1c43      	adds	r3, r0, #1
 8008866:	d102      	bne.n	800886e <_write_r+0x1e>
 8008868:	682b      	ldr	r3, [r5, #0]
 800886a:	b103      	cbz	r3, 800886e <_write_r+0x1e>
 800886c:	6023      	str	r3, [r4, #0]
 800886e:	bd38      	pop	{r3, r4, r5, pc}
 8008870:	20000620 	.word	0x20000620

08008874 <__errno>:
 8008874:	4b01      	ldr	r3, [pc, #4]	; (800887c <__errno+0x8>)
 8008876:	6818      	ldr	r0, [r3, #0]
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	20000120 	.word	0x20000120

08008880 <__libc_init_array>:
 8008880:	b570      	push	{r4, r5, r6, lr}
 8008882:	4d0d      	ldr	r5, [pc, #52]	; (80088b8 <__libc_init_array+0x38>)
 8008884:	4c0d      	ldr	r4, [pc, #52]	; (80088bc <__libc_init_array+0x3c>)
 8008886:	1b64      	subs	r4, r4, r5
 8008888:	10a4      	asrs	r4, r4, #2
 800888a:	2600      	movs	r6, #0
 800888c:	42a6      	cmp	r6, r4
 800888e:	d109      	bne.n	80088a4 <__libc_init_array+0x24>
 8008890:	4d0b      	ldr	r5, [pc, #44]	; (80088c0 <__libc_init_array+0x40>)
 8008892:	4c0c      	ldr	r4, [pc, #48]	; (80088c4 <__libc_init_array+0x44>)
 8008894:	f000 fff8 	bl	8009888 <_init>
 8008898:	1b64      	subs	r4, r4, r5
 800889a:	10a4      	asrs	r4, r4, #2
 800889c:	2600      	movs	r6, #0
 800889e:	42a6      	cmp	r6, r4
 80088a0:	d105      	bne.n	80088ae <__libc_init_array+0x2e>
 80088a2:	bd70      	pop	{r4, r5, r6, pc}
 80088a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80088a8:	4798      	blx	r3
 80088aa:	3601      	adds	r6, #1
 80088ac:	e7ee      	b.n	800888c <__libc_init_array+0xc>
 80088ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80088b2:	4798      	blx	r3
 80088b4:	3601      	adds	r6, #1
 80088b6:	e7f2      	b.n	800889e <__libc_init_array+0x1e>
 80088b8:	08009b28 	.word	0x08009b28
 80088bc:	08009b28 	.word	0x08009b28
 80088c0:	08009b28 	.word	0x08009b28
 80088c4:	08009b2c 	.word	0x08009b2c

080088c8 <__retarget_lock_acquire_recursive>:
 80088c8:	4770      	bx	lr

080088ca <__retarget_lock_release_recursive>:
 80088ca:	4770      	bx	lr

080088cc <__assert_func>:
 80088cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088ce:	4614      	mov	r4, r2
 80088d0:	461a      	mov	r2, r3
 80088d2:	4b09      	ldr	r3, [pc, #36]	; (80088f8 <__assert_func+0x2c>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4605      	mov	r5, r0
 80088d8:	68d8      	ldr	r0, [r3, #12]
 80088da:	b14c      	cbz	r4, 80088f0 <__assert_func+0x24>
 80088dc:	4b07      	ldr	r3, [pc, #28]	; (80088fc <__assert_func+0x30>)
 80088de:	9100      	str	r1, [sp, #0]
 80088e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088e4:	4906      	ldr	r1, [pc, #24]	; (8008900 <__assert_func+0x34>)
 80088e6:	462b      	mov	r3, r5
 80088e8:	f000 fca4 	bl	8009234 <fiprintf>
 80088ec:	f000 fcec 	bl	80092c8 <abort>
 80088f0:	4b04      	ldr	r3, [pc, #16]	; (8008904 <__assert_func+0x38>)
 80088f2:	461c      	mov	r4, r3
 80088f4:	e7f3      	b.n	80088de <__assert_func+0x12>
 80088f6:	bf00      	nop
 80088f8:	20000120 	.word	0x20000120
 80088fc:	08009aae 	.word	0x08009aae
 8008900:	08009abb 	.word	0x08009abb
 8008904:	08009ae9 	.word	0x08009ae9

08008908 <_free_r>:
 8008908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800890a:	2900      	cmp	r1, #0
 800890c:	d044      	beq.n	8008998 <_free_r+0x90>
 800890e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008912:	9001      	str	r0, [sp, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	f1a1 0404 	sub.w	r4, r1, #4
 800891a:	bfb8      	it	lt
 800891c:	18e4      	addlt	r4, r4, r3
 800891e:	f000 f8e7 	bl	8008af0 <__malloc_lock>
 8008922:	4a1e      	ldr	r2, [pc, #120]	; (800899c <_free_r+0x94>)
 8008924:	9801      	ldr	r0, [sp, #4]
 8008926:	6813      	ldr	r3, [r2, #0]
 8008928:	b933      	cbnz	r3, 8008938 <_free_r+0x30>
 800892a:	6063      	str	r3, [r4, #4]
 800892c:	6014      	str	r4, [r2, #0]
 800892e:	b003      	add	sp, #12
 8008930:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008934:	f000 b8e2 	b.w	8008afc <__malloc_unlock>
 8008938:	42a3      	cmp	r3, r4
 800893a:	d908      	bls.n	800894e <_free_r+0x46>
 800893c:	6825      	ldr	r5, [r4, #0]
 800893e:	1961      	adds	r1, r4, r5
 8008940:	428b      	cmp	r3, r1
 8008942:	bf01      	itttt	eq
 8008944:	6819      	ldreq	r1, [r3, #0]
 8008946:	685b      	ldreq	r3, [r3, #4]
 8008948:	1949      	addeq	r1, r1, r5
 800894a:	6021      	streq	r1, [r4, #0]
 800894c:	e7ed      	b.n	800892a <_free_r+0x22>
 800894e:	461a      	mov	r2, r3
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	b10b      	cbz	r3, 8008958 <_free_r+0x50>
 8008954:	42a3      	cmp	r3, r4
 8008956:	d9fa      	bls.n	800894e <_free_r+0x46>
 8008958:	6811      	ldr	r1, [r2, #0]
 800895a:	1855      	adds	r5, r2, r1
 800895c:	42a5      	cmp	r5, r4
 800895e:	d10b      	bne.n	8008978 <_free_r+0x70>
 8008960:	6824      	ldr	r4, [r4, #0]
 8008962:	4421      	add	r1, r4
 8008964:	1854      	adds	r4, r2, r1
 8008966:	42a3      	cmp	r3, r4
 8008968:	6011      	str	r1, [r2, #0]
 800896a:	d1e0      	bne.n	800892e <_free_r+0x26>
 800896c:	681c      	ldr	r4, [r3, #0]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	6053      	str	r3, [r2, #4]
 8008972:	440c      	add	r4, r1
 8008974:	6014      	str	r4, [r2, #0]
 8008976:	e7da      	b.n	800892e <_free_r+0x26>
 8008978:	d902      	bls.n	8008980 <_free_r+0x78>
 800897a:	230c      	movs	r3, #12
 800897c:	6003      	str	r3, [r0, #0]
 800897e:	e7d6      	b.n	800892e <_free_r+0x26>
 8008980:	6825      	ldr	r5, [r4, #0]
 8008982:	1961      	adds	r1, r4, r5
 8008984:	428b      	cmp	r3, r1
 8008986:	bf04      	itt	eq
 8008988:	6819      	ldreq	r1, [r3, #0]
 800898a:	685b      	ldreq	r3, [r3, #4]
 800898c:	6063      	str	r3, [r4, #4]
 800898e:	bf04      	itt	eq
 8008990:	1949      	addeq	r1, r1, r5
 8008992:	6021      	streq	r1, [r4, #0]
 8008994:	6054      	str	r4, [r2, #4]
 8008996:	e7ca      	b.n	800892e <_free_r+0x26>
 8008998:	b003      	add	sp, #12
 800899a:	bd30      	pop	{r4, r5, pc}
 800899c:	20000628 	.word	0x20000628

080089a0 <malloc>:
 80089a0:	4b02      	ldr	r3, [pc, #8]	; (80089ac <malloc+0xc>)
 80089a2:	4601      	mov	r1, r0
 80089a4:	6818      	ldr	r0, [r3, #0]
 80089a6:	f000 b823 	b.w	80089f0 <_malloc_r>
 80089aa:	bf00      	nop
 80089ac:	20000120 	.word	0x20000120

080089b0 <sbrk_aligned>:
 80089b0:	b570      	push	{r4, r5, r6, lr}
 80089b2:	4e0e      	ldr	r6, [pc, #56]	; (80089ec <sbrk_aligned+0x3c>)
 80089b4:	460c      	mov	r4, r1
 80089b6:	6831      	ldr	r1, [r6, #0]
 80089b8:	4605      	mov	r5, r0
 80089ba:	b911      	cbnz	r1, 80089c2 <sbrk_aligned+0x12>
 80089bc:	f000 fc66 	bl	800928c <_sbrk_r>
 80089c0:	6030      	str	r0, [r6, #0]
 80089c2:	4621      	mov	r1, r4
 80089c4:	4628      	mov	r0, r5
 80089c6:	f000 fc61 	bl	800928c <_sbrk_r>
 80089ca:	1c43      	adds	r3, r0, #1
 80089cc:	d00a      	beq.n	80089e4 <sbrk_aligned+0x34>
 80089ce:	1cc4      	adds	r4, r0, #3
 80089d0:	f024 0403 	bic.w	r4, r4, #3
 80089d4:	42a0      	cmp	r0, r4
 80089d6:	d007      	beq.n	80089e8 <sbrk_aligned+0x38>
 80089d8:	1a21      	subs	r1, r4, r0
 80089da:	4628      	mov	r0, r5
 80089dc:	f000 fc56 	bl	800928c <_sbrk_r>
 80089e0:	3001      	adds	r0, #1
 80089e2:	d101      	bne.n	80089e8 <sbrk_aligned+0x38>
 80089e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80089e8:	4620      	mov	r0, r4
 80089ea:	bd70      	pop	{r4, r5, r6, pc}
 80089ec:	2000062c 	.word	0x2000062c

080089f0 <_malloc_r>:
 80089f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089f4:	1ccd      	adds	r5, r1, #3
 80089f6:	f025 0503 	bic.w	r5, r5, #3
 80089fa:	3508      	adds	r5, #8
 80089fc:	2d0c      	cmp	r5, #12
 80089fe:	bf38      	it	cc
 8008a00:	250c      	movcc	r5, #12
 8008a02:	2d00      	cmp	r5, #0
 8008a04:	4607      	mov	r7, r0
 8008a06:	db01      	blt.n	8008a0c <_malloc_r+0x1c>
 8008a08:	42a9      	cmp	r1, r5
 8008a0a:	d905      	bls.n	8008a18 <_malloc_r+0x28>
 8008a0c:	230c      	movs	r3, #12
 8008a0e:	603b      	str	r3, [r7, #0]
 8008a10:	2600      	movs	r6, #0
 8008a12:	4630      	mov	r0, r6
 8008a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a18:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008aec <_malloc_r+0xfc>
 8008a1c:	f000 f868 	bl	8008af0 <__malloc_lock>
 8008a20:	f8d8 3000 	ldr.w	r3, [r8]
 8008a24:	461c      	mov	r4, r3
 8008a26:	bb5c      	cbnz	r4, 8008a80 <_malloc_r+0x90>
 8008a28:	4629      	mov	r1, r5
 8008a2a:	4638      	mov	r0, r7
 8008a2c:	f7ff ffc0 	bl	80089b0 <sbrk_aligned>
 8008a30:	1c43      	adds	r3, r0, #1
 8008a32:	4604      	mov	r4, r0
 8008a34:	d155      	bne.n	8008ae2 <_malloc_r+0xf2>
 8008a36:	f8d8 4000 	ldr.w	r4, [r8]
 8008a3a:	4626      	mov	r6, r4
 8008a3c:	2e00      	cmp	r6, #0
 8008a3e:	d145      	bne.n	8008acc <_malloc_r+0xdc>
 8008a40:	2c00      	cmp	r4, #0
 8008a42:	d048      	beq.n	8008ad6 <_malloc_r+0xe6>
 8008a44:	6823      	ldr	r3, [r4, #0]
 8008a46:	4631      	mov	r1, r6
 8008a48:	4638      	mov	r0, r7
 8008a4a:	eb04 0903 	add.w	r9, r4, r3
 8008a4e:	f000 fc1d 	bl	800928c <_sbrk_r>
 8008a52:	4581      	cmp	r9, r0
 8008a54:	d13f      	bne.n	8008ad6 <_malloc_r+0xe6>
 8008a56:	6821      	ldr	r1, [r4, #0]
 8008a58:	1a6d      	subs	r5, r5, r1
 8008a5a:	4629      	mov	r1, r5
 8008a5c:	4638      	mov	r0, r7
 8008a5e:	f7ff ffa7 	bl	80089b0 <sbrk_aligned>
 8008a62:	3001      	adds	r0, #1
 8008a64:	d037      	beq.n	8008ad6 <_malloc_r+0xe6>
 8008a66:	6823      	ldr	r3, [r4, #0]
 8008a68:	442b      	add	r3, r5
 8008a6a:	6023      	str	r3, [r4, #0]
 8008a6c:	f8d8 3000 	ldr.w	r3, [r8]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d038      	beq.n	8008ae6 <_malloc_r+0xf6>
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	42a2      	cmp	r2, r4
 8008a78:	d12b      	bne.n	8008ad2 <_malloc_r+0xe2>
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	605a      	str	r2, [r3, #4]
 8008a7e:	e00f      	b.n	8008aa0 <_malloc_r+0xb0>
 8008a80:	6822      	ldr	r2, [r4, #0]
 8008a82:	1b52      	subs	r2, r2, r5
 8008a84:	d41f      	bmi.n	8008ac6 <_malloc_r+0xd6>
 8008a86:	2a0b      	cmp	r2, #11
 8008a88:	d917      	bls.n	8008aba <_malloc_r+0xca>
 8008a8a:	1961      	adds	r1, r4, r5
 8008a8c:	42a3      	cmp	r3, r4
 8008a8e:	6025      	str	r5, [r4, #0]
 8008a90:	bf18      	it	ne
 8008a92:	6059      	strne	r1, [r3, #4]
 8008a94:	6863      	ldr	r3, [r4, #4]
 8008a96:	bf08      	it	eq
 8008a98:	f8c8 1000 	streq.w	r1, [r8]
 8008a9c:	5162      	str	r2, [r4, r5]
 8008a9e:	604b      	str	r3, [r1, #4]
 8008aa0:	4638      	mov	r0, r7
 8008aa2:	f104 060b 	add.w	r6, r4, #11
 8008aa6:	f000 f829 	bl	8008afc <__malloc_unlock>
 8008aaa:	f026 0607 	bic.w	r6, r6, #7
 8008aae:	1d23      	adds	r3, r4, #4
 8008ab0:	1af2      	subs	r2, r6, r3
 8008ab2:	d0ae      	beq.n	8008a12 <_malloc_r+0x22>
 8008ab4:	1b9b      	subs	r3, r3, r6
 8008ab6:	50a3      	str	r3, [r4, r2]
 8008ab8:	e7ab      	b.n	8008a12 <_malloc_r+0x22>
 8008aba:	42a3      	cmp	r3, r4
 8008abc:	6862      	ldr	r2, [r4, #4]
 8008abe:	d1dd      	bne.n	8008a7c <_malloc_r+0x8c>
 8008ac0:	f8c8 2000 	str.w	r2, [r8]
 8008ac4:	e7ec      	b.n	8008aa0 <_malloc_r+0xb0>
 8008ac6:	4623      	mov	r3, r4
 8008ac8:	6864      	ldr	r4, [r4, #4]
 8008aca:	e7ac      	b.n	8008a26 <_malloc_r+0x36>
 8008acc:	4634      	mov	r4, r6
 8008ace:	6876      	ldr	r6, [r6, #4]
 8008ad0:	e7b4      	b.n	8008a3c <_malloc_r+0x4c>
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	e7cc      	b.n	8008a70 <_malloc_r+0x80>
 8008ad6:	230c      	movs	r3, #12
 8008ad8:	603b      	str	r3, [r7, #0]
 8008ada:	4638      	mov	r0, r7
 8008adc:	f000 f80e 	bl	8008afc <__malloc_unlock>
 8008ae0:	e797      	b.n	8008a12 <_malloc_r+0x22>
 8008ae2:	6025      	str	r5, [r4, #0]
 8008ae4:	e7dc      	b.n	8008aa0 <_malloc_r+0xb0>
 8008ae6:	605b      	str	r3, [r3, #4]
 8008ae8:	deff      	udf	#255	; 0xff
 8008aea:	bf00      	nop
 8008aec:	20000628 	.word	0x20000628

08008af0 <__malloc_lock>:
 8008af0:	4801      	ldr	r0, [pc, #4]	; (8008af8 <__malloc_lock+0x8>)
 8008af2:	f7ff bee9 	b.w	80088c8 <__retarget_lock_acquire_recursive>
 8008af6:	bf00      	nop
 8008af8:	20000624 	.word	0x20000624

08008afc <__malloc_unlock>:
 8008afc:	4801      	ldr	r0, [pc, #4]	; (8008b04 <__malloc_unlock+0x8>)
 8008afe:	f7ff bee4 	b.w	80088ca <__retarget_lock_release_recursive>
 8008b02:	bf00      	nop
 8008b04:	20000624 	.word	0x20000624

08008b08 <__ssputs_r>:
 8008b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b0c:	688e      	ldr	r6, [r1, #8]
 8008b0e:	461f      	mov	r7, r3
 8008b10:	42be      	cmp	r6, r7
 8008b12:	680b      	ldr	r3, [r1, #0]
 8008b14:	4682      	mov	sl, r0
 8008b16:	460c      	mov	r4, r1
 8008b18:	4690      	mov	r8, r2
 8008b1a:	d82c      	bhi.n	8008b76 <__ssputs_r+0x6e>
 8008b1c:	898a      	ldrh	r2, [r1, #12]
 8008b1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b22:	d026      	beq.n	8008b72 <__ssputs_r+0x6a>
 8008b24:	6965      	ldr	r5, [r4, #20]
 8008b26:	6909      	ldr	r1, [r1, #16]
 8008b28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b2c:	eba3 0901 	sub.w	r9, r3, r1
 8008b30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b34:	1c7b      	adds	r3, r7, #1
 8008b36:	444b      	add	r3, r9
 8008b38:	106d      	asrs	r5, r5, #1
 8008b3a:	429d      	cmp	r5, r3
 8008b3c:	bf38      	it	cc
 8008b3e:	461d      	movcc	r5, r3
 8008b40:	0553      	lsls	r3, r2, #21
 8008b42:	d527      	bpl.n	8008b94 <__ssputs_r+0x8c>
 8008b44:	4629      	mov	r1, r5
 8008b46:	f7ff ff53 	bl	80089f0 <_malloc_r>
 8008b4a:	4606      	mov	r6, r0
 8008b4c:	b360      	cbz	r0, 8008ba8 <__ssputs_r+0xa0>
 8008b4e:	6921      	ldr	r1, [r4, #16]
 8008b50:	464a      	mov	r2, r9
 8008b52:	f000 fbab 	bl	80092ac <memcpy>
 8008b56:	89a3      	ldrh	r3, [r4, #12]
 8008b58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b60:	81a3      	strh	r3, [r4, #12]
 8008b62:	6126      	str	r6, [r4, #16]
 8008b64:	6165      	str	r5, [r4, #20]
 8008b66:	444e      	add	r6, r9
 8008b68:	eba5 0509 	sub.w	r5, r5, r9
 8008b6c:	6026      	str	r6, [r4, #0]
 8008b6e:	60a5      	str	r5, [r4, #8]
 8008b70:	463e      	mov	r6, r7
 8008b72:	42be      	cmp	r6, r7
 8008b74:	d900      	bls.n	8008b78 <__ssputs_r+0x70>
 8008b76:	463e      	mov	r6, r7
 8008b78:	6820      	ldr	r0, [r4, #0]
 8008b7a:	4632      	mov	r2, r6
 8008b7c:	4641      	mov	r1, r8
 8008b7e:	f000 fb6b 	bl	8009258 <memmove>
 8008b82:	68a3      	ldr	r3, [r4, #8]
 8008b84:	1b9b      	subs	r3, r3, r6
 8008b86:	60a3      	str	r3, [r4, #8]
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	4433      	add	r3, r6
 8008b8c:	6023      	str	r3, [r4, #0]
 8008b8e:	2000      	movs	r0, #0
 8008b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b94:	462a      	mov	r2, r5
 8008b96:	f000 fb9e 	bl	80092d6 <_realloc_r>
 8008b9a:	4606      	mov	r6, r0
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	d1e0      	bne.n	8008b62 <__ssputs_r+0x5a>
 8008ba0:	6921      	ldr	r1, [r4, #16]
 8008ba2:	4650      	mov	r0, sl
 8008ba4:	f7ff feb0 	bl	8008908 <_free_r>
 8008ba8:	230c      	movs	r3, #12
 8008baa:	f8ca 3000 	str.w	r3, [sl]
 8008bae:	89a3      	ldrh	r3, [r4, #12]
 8008bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bb4:	81a3      	strh	r3, [r4, #12]
 8008bb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bba:	e7e9      	b.n	8008b90 <__ssputs_r+0x88>

08008bbc <_svfiprintf_r>:
 8008bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc0:	4698      	mov	r8, r3
 8008bc2:	898b      	ldrh	r3, [r1, #12]
 8008bc4:	061b      	lsls	r3, r3, #24
 8008bc6:	b09d      	sub	sp, #116	; 0x74
 8008bc8:	4607      	mov	r7, r0
 8008bca:	460d      	mov	r5, r1
 8008bcc:	4614      	mov	r4, r2
 8008bce:	d50e      	bpl.n	8008bee <_svfiprintf_r+0x32>
 8008bd0:	690b      	ldr	r3, [r1, #16]
 8008bd2:	b963      	cbnz	r3, 8008bee <_svfiprintf_r+0x32>
 8008bd4:	2140      	movs	r1, #64	; 0x40
 8008bd6:	f7ff ff0b 	bl	80089f0 <_malloc_r>
 8008bda:	6028      	str	r0, [r5, #0]
 8008bdc:	6128      	str	r0, [r5, #16]
 8008bde:	b920      	cbnz	r0, 8008bea <_svfiprintf_r+0x2e>
 8008be0:	230c      	movs	r3, #12
 8008be2:	603b      	str	r3, [r7, #0]
 8008be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008be8:	e0d0      	b.n	8008d8c <_svfiprintf_r+0x1d0>
 8008bea:	2340      	movs	r3, #64	; 0x40
 8008bec:	616b      	str	r3, [r5, #20]
 8008bee:	2300      	movs	r3, #0
 8008bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8008bf2:	2320      	movs	r3, #32
 8008bf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bf8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bfc:	2330      	movs	r3, #48	; 0x30
 8008bfe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008da4 <_svfiprintf_r+0x1e8>
 8008c02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c06:	f04f 0901 	mov.w	r9, #1
 8008c0a:	4623      	mov	r3, r4
 8008c0c:	469a      	mov	sl, r3
 8008c0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c12:	b10a      	cbz	r2, 8008c18 <_svfiprintf_r+0x5c>
 8008c14:	2a25      	cmp	r2, #37	; 0x25
 8008c16:	d1f9      	bne.n	8008c0c <_svfiprintf_r+0x50>
 8008c18:	ebba 0b04 	subs.w	fp, sl, r4
 8008c1c:	d00b      	beq.n	8008c36 <_svfiprintf_r+0x7a>
 8008c1e:	465b      	mov	r3, fp
 8008c20:	4622      	mov	r2, r4
 8008c22:	4629      	mov	r1, r5
 8008c24:	4638      	mov	r0, r7
 8008c26:	f7ff ff6f 	bl	8008b08 <__ssputs_r>
 8008c2a:	3001      	adds	r0, #1
 8008c2c:	f000 80a9 	beq.w	8008d82 <_svfiprintf_r+0x1c6>
 8008c30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c32:	445a      	add	r2, fp
 8008c34:	9209      	str	r2, [sp, #36]	; 0x24
 8008c36:	f89a 3000 	ldrb.w	r3, [sl]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f000 80a1 	beq.w	8008d82 <_svfiprintf_r+0x1c6>
 8008c40:	2300      	movs	r3, #0
 8008c42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c4a:	f10a 0a01 	add.w	sl, sl, #1
 8008c4e:	9304      	str	r3, [sp, #16]
 8008c50:	9307      	str	r3, [sp, #28]
 8008c52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c56:	931a      	str	r3, [sp, #104]	; 0x68
 8008c58:	4654      	mov	r4, sl
 8008c5a:	2205      	movs	r2, #5
 8008c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c60:	4850      	ldr	r0, [pc, #320]	; (8008da4 <_svfiprintf_r+0x1e8>)
 8008c62:	f7f7 faf5 	bl	8000250 <memchr>
 8008c66:	9a04      	ldr	r2, [sp, #16]
 8008c68:	b9d8      	cbnz	r0, 8008ca2 <_svfiprintf_r+0xe6>
 8008c6a:	06d0      	lsls	r0, r2, #27
 8008c6c:	bf44      	itt	mi
 8008c6e:	2320      	movmi	r3, #32
 8008c70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c74:	0711      	lsls	r1, r2, #28
 8008c76:	bf44      	itt	mi
 8008c78:	232b      	movmi	r3, #43	; 0x2b
 8008c7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c7e:	f89a 3000 	ldrb.w	r3, [sl]
 8008c82:	2b2a      	cmp	r3, #42	; 0x2a
 8008c84:	d015      	beq.n	8008cb2 <_svfiprintf_r+0xf6>
 8008c86:	9a07      	ldr	r2, [sp, #28]
 8008c88:	4654      	mov	r4, sl
 8008c8a:	2000      	movs	r0, #0
 8008c8c:	f04f 0c0a 	mov.w	ip, #10
 8008c90:	4621      	mov	r1, r4
 8008c92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c96:	3b30      	subs	r3, #48	; 0x30
 8008c98:	2b09      	cmp	r3, #9
 8008c9a:	d94d      	bls.n	8008d38 <_svfiprintf_r+0x17c>
 8008c9c:	b1b0      	cbz	r0, 8008ccc <_svfiprintf_r+0x110>
 8008c9e:	9207      	str	r2, [sp, #28]
 8008ca0:	e014      	b.n	8008ccc <_svfiprintf_r+0x110>
 8008ca2:	eba0 0308 	sub.w	r3, r0, r8
 8008ca6:	fa09 f303 	lsl.w	r3, r9, r3
 8008caa:	4313      	orrs	r3, r2
 8008cac:	9304      	str	r3, [sp, #16]
 8008cae:	46a2      	mov	sl, r4
 8008cb0:	e7d2      	b.n	8008c58 <_svfiprintf_r+0x9c>
 8008cb2:	9b03      	ldr	r3, [sp, #12]
 8008cb4:	1d19      	adds	r1, r3, #4
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	9103      	str	r1, [sp, #12]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	bfbb      	ittet	lt
 8008cbe:	425b      	neglt	r3, r3
 8008cc0:	f042 0202 	orrlt.w	r2, r2, #2
 8008cc4:	9307      	strge	r3, [sp, #28]
 8008cc6:	9307      	strlt	r3, [sp, #28]
 8008cc8:	bfb8      	it	lt
 8008cca:	9204      	strlt	r2, [sp, #16]
 8008ccc:	7823      	ldrb	r3, [r4, #0]
 8008cce:	2b2e      	cmp	r3, #46	; 0x2e
 8008cd0:	d10c      	bne.n	8008cec <_svfiprintf_r+0x130>
 8008cd2:	7863      	ldrb	r3, [r4, #1]
 8008cd4:	2b2a      	cmp	r3, #42	; 0x2a
 8008cd6:	d134      	bne.n	8008d42 <_svfiprintf_r+0x186>
 8008cd8:	9b03      	ldr	r3, [sp, #12]
 8008cda:	1d1a      	adds	r2, r3, #4
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	9203      	str	r2, [sp, #12]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	bfb8      	it	lt
 8008ce4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008ce8:	3402      	adds	r4, #2
 8008cea:	9305      	str	r3, [sp, #20]
 8008cec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008db4 <_svfiprintf_r+0x1f8>
 8008cf0:	7821      	ldrb	r1, [r4, #0]
 8008cf2:	2203      	movs	r2, #3
 8008cf4:	4650      	mov	r0, sl
 8008cf6:	f7f7 faab 	bl	8000250 <memchr>
 8008cfa:	b138      	cbz	r0, 8008d0c <_svfiprintf_r+0x150>
 8008cfc:	9b04      	ldr	r3, [sp, #16]
 8008cfe:	eba0 000a 	sub.w	r0, r0, sl
 8008d02:	2240      	movs	r2, #64	; 0x40
 8008d04:	4082      	lsls	r2, r0
 8008d06:	4313      	orrs	r3, r2
 8008d08:	3401      	adds	r4, #1
 8008d0a:	9304      	str	r3, [sp, #16]
 8008d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d10:	4825      	ldr	r0, [pc, #148]	; (8008da8 <_svfiprintf_r+0x1ec>)
 8008d12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d16:	2206      	movs	r2, #6
 8008d18:	f7f7 fa9a 	bl	8000250 <memchr>
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	d038      	beq.n	8008d92 <_svfiprintf_r+0x1d6>
 8008d20:	4b22      	ldr	r3, [pc, #136]	; (8008dac <_svfiprintf_r+0x1f0>)
 8008d22:	bb1b      	cbnz	r3, 8008d6c <_svfiprintf_r+0x1b0>
 8008d24:	9b03      	ldr	r3, [sp, #12]
 8008d26:	3307      	adds	r3, #7
 8008d28:	f023 0307 	bic.w	r3, r3, #7
 8008d2c:	3308      	adds	r3, #8
 8008d2e:	9303      	str	r3, [sp, #12]
 8008d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d32:	4433      	add	r3, r6
 8008d34:	9309      	str	r3, [sp, #36]	; 0x24
 8008d36:	e768      	b.n	8008c0a <_svfiprintf_r+0x4e>
 8008d38:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d3c:	460c      	mov	r4, r1
 8008d3e:	2001      	movs	r0, #1
 8008d40:	e7a6      	b.n	8008c90 <_svfiprintf_r+0xd4>
 8008d42:	2300      	movs	r3, #0
 8008d44:	3401      	adds	r4, #1
 8008d46:	9305      	str	r3, [sp, #20]
 8008d48:	4619      	mov	r1, r3
 8008d4a:	f04f 0c0a 	mov.w	ip, #10
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d54:	3a30      	subs	r2, #48	; 0x30
 8008d56:	2a09      	cmp	r2, #9
 8008d58:	d903      	bls.n	8008d62 <_svfiprintf_r+0x1a6>
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d0c6      	beq.n	8008cec <_svfiprintf_r+0x130>
 8008d5e:	9105      	str	r1, [sp, #20]
 8008d60:	e7c4      	b.n	8008cec <_svfiprintf_r+0x130>
 8008d62:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d66:	4604      	mov	r4, r0
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e7f0      	b.n	8008d4e <_svfiprintf_r+0x192>
 8008d6c:	ab03      	add	r3, sp, #12
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	462a      	mov	r2, r5
 8008d72:	4b0f      	ldr	r3, [pc, #60]	; (8008db0 <_svfiprintf_r+0x1f4>)
 8008d74:	a904      	add	r1, sp, #16
 8008d76:	4638      	mov	r0, r7
 8008d78:	f3af 8000 	nop.w
 8008d7c:	1c42      	adds	r2, r0, #1
 8008d7e:	4606      	mov	r6, r0
 8008d80:	d1d6      	bne.n	8008d30 <_svfiprintf_r+0x174>
 8008d82:	89ab      	ldrh	r3, [r5, #12]
 8008d84:	065b      	lsls	r3, r3, #25
 8008d86:	f53f af2d 	bmi.w	8008be4 <_svfiprintf_r+0x28>
 8008d8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d8c:	b01d      	add	sp, #116	; 0x74
 8008d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d92:	ab03      	add	r3, sp, #12
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	462a      	mov	r2, r5
 8008d98:	4b05      	ldr	r3, [pc, #20]	; (8008db0 <_svfiprintf_r+0x1f4>)
 8008d9a:	a904      	add	r1, sp, #16
 8008d9c:	4638      	mov	r0, r7
 8008d9e:	f000 f879 	bl	8008e94 <_printf_i>
 8008da2:	e7eb      	b.n	8008d7c <_svfiprintf_r+0x1c0>
 8008da4:	08009aea 	.word	0x08009aea
 8008da8:	08009af4 	.word	0x08009af4
 8008dac:	00000000 	.word	0x00000000
 8008db0:	08008b09 	.word	0x08008b09
 8008db4:	08009af0 	.word	0x08009af0

08008db8 <_printf_common>:
 8008db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dbc:	4616      	mov	r6, r2
 8008dbe:	4699      	mov	r9, r3
 8008dc0:	688a      	ldr	r2, [r1, #8]
 8008dc2:	690b      	ldr	r3, [r1, #16]
 8008dc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	bfb8      	it	lt
 8008dcc:	4613      	movlt	r3, r2
 8008dce:	6033      	str	r3, [r6, #0]
 8008dd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008dd4:	4607      	mov	r7, r0
 8008dd6:	460c      	mov	r4, r1
 8008dd8:	b10a      	cbz	r2, 8008dde <_printf_common+0x26>
 8008dda:	3301      	adds	r3, #1
 8008ddc:	6033      	str	r3, [r6, #0]
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	0699      	lsls	r1, r3, #26
 8008de2:	bf42      	ittt	mi
 8008de4:	6833      	ldrmi	r3, [r6, #0]
 8008de6:	3302      	addmi	r3, #2
 8008de8:	6033      	strmi	r3, [r6, #0]
 8008dea:	6825      	ldr	r5, [r4, #0]
 8008dec:	f015 0506 	ands.w	r5, r5, #6
 8008df0:	d106      	bne.n	8008e00 <_printf_common+0x48>
 8008df2:	f104 0a19 	add.w	sl, r4, #25
 8008df6:	68e3      	ldr	r3, [r4, #12]
 8008df8:	6832      	ldr	r2, [r6, #0]
 8008dfa:	1a9b      	subs	r3, r3, r2
 8008dfc:	42ab      	cmp	r3, r5
 8008dfe:	dc26      	bgt.n	8008e4e <_printf_common+0x96>
 8008e00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e04:	1e13      	subs	r3, r2, #0
 8008e06:	6822      	ldr	r2, [r4, #0]
 8008e08:	bf18      	it	ne
 8008e0a:	2301      	movne	r3, #1
 8008e0c:	0692      	lsls	r2, r2, #26
 8008e0e:	d42b      	bmi.n	8008e68 <_printf_common+0xb0>
 8008e10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e14:	4649      	mov	r1, r9
 8008e16:	4638      	mov	r0, r7
 8008e18:	47c0      	blx	r8
 8008e1a:	3001      	adds	r0, #1
 8008e1c:	d01e      	beq.n	8008e5c <_printf_common+0xa4>
 8008e1e:	6823      	ldr	r3, [r4, #0]
 8008e20:	6922      	ldr	r2, [r4, #16]
 8008e22:	f003 0306 	and.w	r3, r3, #6
 8008e26:	2b04      	cmp	r3, #4
 8008e28:	bf02      	ittt	eq
 8008e2a:	68e5      	ldreq	r5, [r4, #12]
 8008e2c:	6833      	ldreq	r3, [r6, #0]
 8008e2e:	1aed      	subeq	r5, r5, r3
 8008e30:	68a3      	ldr	r3, [r4, #8]
 8008e32:	bf0c      	ite	eq
 8008e34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e38:	2500      	movne	r5, #0
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	bfc4      	itt	gt
 8008e3e:	1a9b      	subgt	r3, r3, r2
 8008e40:	18ed      	addgt	r5, r5, r3
 8008e42:	2600      	movs	r6, #0
 8008e44:	341a      	adds	r4, #26
 8008e46:	42b5      	cmp	r5, r6
 8008e48:	d11a      	bne.n	8008e80 <_printf_common+0xc8>
 8008e4a:	2000      	movs	r0, #0
 8008e4c:	e008      	b.n	8008e60 <_printf_common+0xa8>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	4652      	mov	r2, sl
 8008e52:	4649      	mov	r1, r9
 8008e54:	4638      	mov	r0, r7
 8008e56:	47c0      	blx	r8
 8008e58:	3001      	adds	r0, #1
 8008e5a:	d103      	bne.n	8008e64 <_printf_common+0xac>
 8008e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e64:	3501      	adds	r5, #1
 8008e66:	e7c6      	b.n	8008df6 <_printf_common+0x3e>
 8008e68:	18e1      	adds	r1, r4, r3
 8008e6a:	1c5a      	adds	r2, r3, #1
 8008e6c:	2030      	movs	r0, #48	; 0x30
 8008e6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e72:	4422      	add	r2, r4
 8008e74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e7c:	3302      	adds	r3, #2
 8008e7e:	e7c7      	b.n	8008e10 <_printf_common+0x58>
 8008e80:	2301      	movs	r3, #1
 8008e82:	4622      	mov	r2, r4
 8008e84:	4649      	mov	r1, r9
 8008e86:	4638      	mov	r0, r7
 8008e88:	47c0      	blx	r8
 8008e8a:	3001      	adds	r0, #1
 8008e8c:	d0e6      	beq.n	8008e5c <_printf_common+0xa4>
 8008e8e:	3601      	adds	r6, #1
 8008e90:	e7d9      	b.n	8008e46 <_printf_common+0x8e>
	...

08008e94 <_printf_i>:
 8008e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e98:	7e0f      	ldrb	r7, [r1, #24]
 8008e9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e9c:	2f78      	cmp	r7, #120	; 0x78
 8008e9e:	4691      	mov	r9, r2
 8008ea0:	4680      	mov	r8, r0
 8008ea2:	460c      	mov	r4, r1
 8008ea4:	469a      	mov	sl, r3
 8008ea6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008eaa:	d807      	bhi.n	8008ebc <_printf_i+0x28>
 8008eac:	2f62      	cmp	r7, #98	; 0x62
 8008eae:	d80a      	bhi.n	8008ec6 <_printf_i+0x32>
 8008eb0:	2f00      	cmp	r7, #0
 8008eb2:	f000 80d4 	beq.w	800905e <_printf_i+0x1ca>
 8008eb6:	2f58      	cmp	r7, #88	; 0x58
 8008eb8:	f000 80c0 	beq.w	800903c <_printf_i+0x1a8>
 8008ebc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ec0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ec4:	e03a      	b.n	8008f3c <_printf_i+0xa8>
 8008ec6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008eca:	2b15      	cmp	r3, #21
 8008ecc:	d8f6      	bhi.n	8008ebc <_printf_i+0x28>
 8008ece:	a101      	add	r1, pc, #4	; (adr r1, 8008ed4 <_printf_i+0x40>)
 8008ed0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ed4:	08008f2d 	.word	0x08008f2d
 8008ed8:	08008f41 	.word	0x08008f41
 8008edc:	08008ebd 	.word	0x08008ebd
 8008ee0:	08008ebd 	.word	0x08008ebd
 8008ee4:	08008ebd 	.word	0x08008ebd
 8008ee8:	08008ebd 	.word	0x08008ebd
 8008eec:	08008f41 	.word	0x08008f41
 8008ef0:	08008ebd 	.word	0x08008ebd
 8008ef4:	08008ebd 	.word	0x08008ebd
 8008ef8:	08008ebd 	.word	0x08008ebd
 8008efc:	08008ebd 	.word	0x08008ebd
 8008f00:	08009045 	.word	0x08009045
 8008f04:	08008f6d 	.word	0x08008f6d
 8008f08:	08008fff 	.word	0x08008fff
 8008f0c:	08008ebd 	.word	0x08008ebd
 8008f10:	08008ebd 	.word	0x08008ebd
 8008f14:	08009067 	.word	0x08009067
 8008f18:	08008ebd 	.word	0x08008ebd
 8008f1c:	08008f6d 	.word	0x08008f6d
 8008f20:	08008ebd 	.word	0x08008ebd
 8008f24:	08008ebd 	.word	0x08008ebd
 8008f28:	08009007 	.word	0x08009007
 8008f2c:	682b      	ldr	r3, [r5, #0]
 8008f2e:	1d1a      	adds	r2, r3, #4
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	602a      	str	r2, [r5, #0]
 8008f34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e09f      	b.n	8009080 <_printf_i+0x1ec>
 8008f40:	6820      	ldr	r0, [r4, #0]
 8008f42:	682b      	ldr	r3, [r5, #0]
 8008f44:	0607      	lsls	r7, r0, #24
 8008f46:	f103 0104 	add.w	r1, r3, #4
 8008f4a:	6029      	str	r1, [r5, #0]
 8008f4c:	d501      	bpl.n	8008f52 <_printf_i+0xbe>
 8008f4e:	681e      	ldr	r6, [r3, #0]
 8008f50:	e003      	b.n	8008f5a <_printf_i+0xc6>
 8008f52:	0646      	lsls	r6, r0, #25
 8008f54:	d5fb      	bpl.n	8008f4e <_printf_i+0xba>
 8008f56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008f5a:	2e00      	cmp	r6, #0
 8008f5c:	da03      	bge.n	8008f66 <_printf_i+0xd2>
 8008f5e:	232d      	movs	r3, #45	; 0x2d
 8008f60:	4276      	negs	r6, r6
 8008f62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f66:	485a      	ldr	r0, [pc, #360]	; (80090d0 <_printf_i+0x23c>)
 8008f68:	230a      	movs	r3, #10
 8008f6a:	e012      	b.n	8008f92 <_printf_i+0xfe>
 8008f6c:	682b      	ldr	r3, [r5, #0]
 8008f6e:	6820      	ldr	r0, [r4, #0]
 8008f70:	1d19      	adds	r1, r3, #4
 8008f72:	6029      	str	r1, [r5, #0]
 8008f74:	0605      	lsls	r5, r0, #24
 8008f76:	d501      	bpl.n	8008f7c <_printf_i+0xe8>
 8008f78:	681e      	ldr	r6, [r3, #0]
 8008f7a:	e002      	b.n	8008f82 <_printf_i+0xee>
 8008f7c:	0641      	lsls	r1, r0, #25
 8008f7e:	d5fb      	bpl.n	8008f78 <_printf_i+0xe4>
 8008f80:	881e      	ldrh	r6, [r3, #0]
 8008f82:	4853      	ldr	r0, [pc, #332]	; (80090d0 <_printf_i+0x23c>)
 8008f84:	2f6f      	cmp	r7, #111	; 0x6f
 8008f86:	bf0c      	ite	eq
 8008f88:	2308      	moveq	r3, #8
 8008f8a:	230a      	movne	r3, #10
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f92:	6865      	ldr	r5, [r4, #4]
 8008f94:	60a5      	str	r5, [r4, #8]
 8008f96:	2d00      	cmp	r5, #0
 8008f98:	bfa2      	ittt	ge
 8008f9a:	6821      	ldrge	r1, [r4, #0]
 8008f9c:	f021 0104 	bicge.w	r1, r1, #4
 8008fa0:	6021      	strge	r1, [r4, #0]
 8008fa2:	b90e      	cbnz	r6, 8008fa8 <_printf_i+0x114>
 8008fa4:	2d00      	cmp	r5, #0
 8008fa6:	d04b      	beq.n	8009040 <_printf_i+0x1ac>
 8008fa8:	4615      	mov	r5, r2
 8008faa:	fbb6 f1f3 	udiv	r1, r6, r3
 8008fae:	fb03 6711 	mls	r7, r3, r1, r6
 8008fb2:	5dc7      	ldrb	r7, [r0, r7]
 8008fb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008fb8:	4637      	mov	r7, r6
 8008fba:	42bb      	cmp	r3, r7
 8008fbc:	460e      	mov	r6, r1
 8008fbe:	d9f4      	bls.n	8008faa <_printf_i+0x116>
 8008fc0:	2b08      	cmp	r3, #8
 8008fc2:	d10b      	bne.n	8008fdc <_printf_i+0x148>
 8008fc4:	6823      	ldr	r3, [r4, #0]
 8008fc6:	07de      	lsls	r6, r3, #31
 8008fc8:	d508      	bpl.n	8008fdc <_printf_i+0x148>
 8008fca:	6923      	ldr	r3, [r4, #16]
 8008fcc:	6861      	ldr	r1, [r4, #4]
 8008fce:	4299      	cmp	r1, r3
 8008fd0:	bfde      	ittt	le
 8008fd2:	2330      	movle	r3, #48	; 0x30
 8008fd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008fd8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008fdc:	1b52      	subs	r2, r2, r5
 8008fde:	6122      	str	r2, [r4, #16]
 8008fe0:	f8cd a000 	str.w	sl, [sp]
 8008fe4:	464b      	mov	r3, r9
 8008fe6:	aa03      	add	r2, sp, #12
 8008fe8:	4621      	mov	r1, r4
 8008fea:	4640      	mov	r0, r8
 8008fec:	f7ff fee4 	bl	8008db8 <_printf_common>
 8008ff0:	3001      	adds	r0, #1
 8008ff2:	d14a      	bne.n	800908a <_printf_i+0x1f6>
 8008ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ff8:	b004      	add	sp, #16
 8008ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	f043 0320 	orr.w	r3, r3, #32
 8009004:	6023      	str	r3, [r4, #0]
 8009006:	4833      	ldr	r0, [pc, #204]	; (80090d4 <_printf_i+0x240>)
 8009008:	2778      	movs	r7, #120	; 0x78
 800900a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	6829      	ldr	r1, [r5, #0]
 8009012:	061f      	lsls	r7, r3, #24
 8009014:	f851 6b04 	ldr.w	r6, [r1], #4
 8009018:	d402      	bmi.n	8009020 <_printf_i+0x18c>
 800901a:	065f      	lsls	r7, r3, #25
 800901c:	bf48      	it	mi
 800901e:	b2b6      	uxthmi	r6, r6
 8009020:	07df      	lsls	r7, r3, #31
 8009022:	bf48      	it	mi
 8009024:	f043 0320 	orrmi.w	r3, r3, #32
 8009028:	6029      	str	r1, [r5, #0]
 800902a:	bf48      	it	mi
 800902c:	6023      	strmi	r3, [r4, #0]
 800902e:	b91e      	cbnz	r6, 8009038 <_printf_i+0x1a4>
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	f023 0320 	bic.w	r3, r3, #32
 8009036:	6023      	str	r3, [r4, #0]
 8009038:	2310      	movs	r3, #16
 800903a:	e7a7      	b.n	8008f8c <_printf_i+0xf8>
 800903c:	4824      	ldr	r0, [pc, #144]	; (80090d0 <_printf_i+0x23c>)
 800903e:	e7e4      	b.n	800900a <_printf_i+0x176>
 8009040:	4615      	mov	r5, r2
 8009042:	e7bd      	b.n	8008fc0 <_printf_i+0x12c>
 8009044:	682b      	ldr	r3, [r5, #0]
 8009046:	6826      	ldr	r6, [r4, #0]
 8009048:	6961      	ldr	r1, [r4, #20]
 800904a:	1d18      	adds	r0, r3, #4
 800904c:	6028      	str	r0, [r5, #0]
 800904e:	0635      	lsls	r5, r6, #24
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	d501      	bpl.n	8009058 <_printf_i+0x1c4>
 8009054:	6019      	str	r1, [r3, #0]
 8009056:	e002      	b.n	800905e <_printf_i+0x1ca>
 8009058:	0670      	lsls	r0, r6, #25
 800905a:	d5fb      	bpl.n	8009054 <_printf_i+0x1c0>
 800905c:	8019      	strh	r1, [r3, #0]
 800905e:	2300      	movs	r3, #0
 8009060:	6123      	str	r3, [r4, #16]
 8009062:	4615      	mov	r5, r2
 8009064:	e7bc      	b.n	8008fe0 <_printf_i+0x14c>
 8009066:	682b      	ldr	r3, [r5, #0]
 8009068:	1d1a      	adds	r2, r3, #4
 800906a:	602a      	str	r2, [r5, #0]
 800906c:	681d      	ldr	r5, [r3, #0]
 800906e:	6862      	ldr	r2, [r4, #4]
 8009070:	2100      	movs	r1, #0
 8009072:	4628      	mov	r0, r5
 8009074:	f7f7 f8ec 	bl	8000250 <memchr>
 8009078:	b108      	cbz	r0, 800907e <_printf_i+0x1ea>
 800907a:	1b40      	subs	r0, r0, r5
 800907c:	6060      	str	r0, [r4, #4]
 800907e:	6863      	ldr	r3, [r4, #4]
 8009080:	6123      	str	r3, [r4, #16]
 8009082:	2300      	movs	r3, #0
 8009084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009088:	e7aa      	b.n	8008fe0 <_printf_i+0x14c>
 800908a:	6923      	ldr	r3, [r4, #16]
 800908c:	462a      	mov	r2, r5
 800908e:	4649      	mov	r1, r9
 8009090:	4640      	mov	r0, r8
 8009092:	47d0      	blx	sl
 8009094:	3001      	adds	r0, #1
 8009096:	d0ad      	beq.n	8008ff4 <_printf_i+0x160>
 8009098:	6823      	ldr	r3, [r4, #0]
 800909a:	079b      	lsls	r3, r3, #30
 800909c:	d413      	bmi.n	80090c6 <_printf_i+0x232>
 800909e:	68e0      	ldr	r0, [r4, #12]
 80090a0:	9b03      	ldr	r3, [sp, #12]
 80090a2:	4298      	cmp	r0, r3
 80090a4:	bfb8      	it	lt
 80090a6:	4618      	movlt	r0, r3
 80090a8:	e7a6      	b.n	8008ff8 <_printf_i+0x164>
 80090aa:	2301      	movs	r3, #1
 80090ac:	4632      	mov	r2, r6
 80090ae:	4649      	mov	r1, r9
 80090b0:	4640      	mov	r0, r8
 80090b2:	47d0      	blx	sl
 80090b4:	3001      	adds	r0, #1
 80090b6:	d09d      	beq.n	8008ff4 <_printf_i+0x160>
 80090b8:	3501      	adds	r5, #1
 80090ba:	68e3      	ldr	r3, [r4, #12]
 80090bc:	9903      	ldr	r1, [sp, #12]
 80090be:	1a5b      	subs	r3, r3, r1
 80090c0:	42ab      	cmp	r3, r5
 80090c2:	dcf2      	bgt.n	80090aa <_printf_i+0x216>
 80090c4:	e7eb      	b.n	800909e <_printf_i+0x20a>
 80090c6:	2500      	movs	r5, #0
 80090c8:	f104 0619 	add.w	r6, r4, #25
 80090cc:	e7f5      	b.n	80090ba <_printf_i+0x226>
 80090ce:	bf00      	nop
 80090d0:	08009afb 	.word	0x08009afb
 80090d4:	08009b0c 	.word	0x08009b0c

080090d8 <__sflush_r>:
 80090d8:	898a      	ldrh	r2, [r1, #12]
 80090da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090de:	4605      	mov	r5, r0
 80090e0:	0710      	lsls	r0, r2, #28
 80090e2:	460c      	mov	r4, r1
 80090e4:	d458      	bmi.n	8009198 <__sflush_r+0xc0>
 80090e6:	684b      	ldr	r3, [r1, #4]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	dc05      	bgt.n	80090f8 <__sflush_r+0x20>
 80090ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	dc02      	bgt.n	80090f8 <__sflush_r+0x20>
 80090f2:	2000      	movs	r0, #0
 80090f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090fa:	2e00      	cmp	r6, #0
 80090fc:	d0f9      	beq.n	80090f2 <__sflush_r+0x1a>
 80090fe:	2300      	movs	r3, #0
 8009100:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009104:	682f      	ldr	r7, [r5, #0]
 8009106:	6a21      	ldr	r1, [r4, #32]
 8009108:	602b      	str	r3, [r5, #0]
 800910a:	d032      	beq.n	8009172 <__sflush_r+0x9a>
 800910c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800910e:	89a3      	ldrh	r3, [r4, #12]
 8009110:	075a      	lsls	r2, r3, #29
 8009112:	d505      	bpl.n	8009120 <__sflush_r+0x48>
 8009114:	6863      	ldr	r3, [r4, #4]
 8009116:	1ac0      	subs	r0, r0, r3
 8009118:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800911a:	b10b      	cbz	r3, 8009120 <__sflush_r+0x48>
 800911c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800911e:	1ac0      	subs	r0, r0, r3
 8009120:	2300      	movs	r3, #0
 8009122:	4602      	mov	r2, r0
 8009124:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009126:	6a21      	ldr	r1, [r4, #32]
 8009128:	4628      	mov	r0, r5
 800912a:	47b0      	blx	r6
 800912c:	1c43      	adds	r3, r0, #1
 800912e:	89a3      	ldrh	r3, [r4, #12]
 8009130:	d106      	bne.n	8009140 <__sflush_r+0x68>
 8009132:	6829      	ldr	r1, [r5, #0]
 8009134:	291d      	cmp	r1, #29
 8009136:	d82b      	bhi.n	8009190 <__sflush_r+0xb8>
 8009138:	4a29      	ldr	r2, [pc, #164]	; (80091e0 <__sflush_r+0x108>)
 800913a:	410a      	asrs	r2, r1
 800913c:	07d6      	lsls	r6, r2, #31
 800913e:	d427      	bmi.n	8009190 <__sflush_r+0xb8>
 8009140:	2200      	movs	r2, #0
 8009142:	6062      	str	r2, [r4, #4]
 8009144:	04d9      	lsls	r1, r3, #19
 8009146:	6922      	ldr	r2, [r4, #16]
 8009148:	6022      	str	r2, [r4, #0]
 800914a:	d504      	bpl.n	8009156 <__sflush_r+0x7e>
 800914c:	1c42      	adds	r2, r0, #1
 800914e:	d101      	bne.n	8009154 <__sflush_r+0x7c>
 8009150:	682b      	ldr	r3, [r5, #0]
 8009152:	b903      	cbnz	r3, 8009156 <__sflush_r+0x7e>
 8009154:	6560      	str	r0, [r4, #84]	; 0x54
 8009156:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009158:	602f      	str	r7, [r5, #0]
 800915a:	2900      	cmp	r1, #0
 800915c:	d0c9      	beq.n	80090f2 <__sflush_r+0x1a>
 800915e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009162:	4299      	cmp	r1, r3
 8009164:	d002      	beq.n	800916c <__sflush_r+0x94>
 8009166:	4628      	mov	r0, r5
 8009168:	f7ff fbce 	bl	8008908 <_free_r>
 800916c:	2000      	movs	r0, #0
 800916e:	6360      	str	r0, [r4, #52]	; 0x34
 8009170:	e7c0      	b.n	80090f4 <__sflush_r+0x1c>
 8009172:	2301      	movs	r3, #1
 8009174:	4628      	mov	r0, r5
 8009176:	47b0      	blx	r6
 8009178:	1c41      	adds	r1, r0, #1
 800917a:	d1c8      	bne.n	800910e <__sflush_r+0x36>
 800917c:	682b      	ldr	r3, [r5, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d0c5      	beq.n	800910e <__sflush_r+0x36>
 8009182:	2b1d      	cmp	r3, #29
 8009184:	d001      	beq.n	800918a <__sflush_r+0xb2>
 8009186:	2b16      	cmp	r3, #22
 8009188:	d101      	bne.n	800918e <__sflush_r+0xb6>
 800918a:	602f      	str	r7, [r5, #0]
 800918c:	e7b1      	b.n	80090f2 <__sflush_r+0x1a>
 800918e:	89a3      	ldrh	r3, [r4, #12]
 8009190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009194:	81a3      	strh	r3, [r4, #12]
 8009196:	e7ad      	b.n	80090f4 <__sflush_r+0x1c>
 8009198:	690f      	ldr	r7, [r1, #16]
 800919a:	2f00      	cmp	r7, #0
 800919c:	d0a9      	beq.n	80090f2 <__sflush_r+0x1a>
 800919e:	0793      	lsls	r3, r2, #30
 80091a0:	680e      	ldr	r6, [r1, #0]
 80091a2:	bf08      	it	eq
 80091a4:	694b      	ldreq	r3, [r1, #20]
 80091a6:	600f      	str	r7, [r1, #0]
 80091a8:	bf18      	it	ne
 80091aa:	2300      	movne	r3, #0
 80091ac:	eba6 0807 	sub.w	r8, r6, r7
 80091b0:	608b      	str	r3, [r1, #8]
 80091b2:	f1b8 0f00 	cmp.w	r8, #0
 80091b6:	dd9c      	ble.n	80090f2 <__sflush_r+0x1a>
 80091b8:	6a21      	ldr	r1, [r4, #32]
 80091ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091bc:	4643      	mov	r3, r8
 80091be:	463a      	mov	r2, r7
 80091c0:	4628      	mov	r0, r5
 80091c2:	47b0      	blx	r6
 80091c4:	2800      	cmp	r0, #0
 80091c6:	dc06      	bgt.n	80091d6 <__sflush_r+0xfe>
 80091c8:	89a3      	ldrh	r3, [r4, #12]
 80091ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091ce:	81a3      	strh	r3, [r4, #12]
 80091d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091d4:	e78e      	b.n	80090f4 <__sflush_r+0x1c>
 80091d6:	4407      	add	r7, r0
 80091d8:	eba8 0800 	sub.w	r8, r8, r0
 80091dc:	e7e9      	b.n	80091b2 <__sflush_r+0xda>
 80091de:	bf00      	nop
 80091e0:	dfbffffe 	.word	0xdfbffffe

080091e4 <_fflush_r>:
 80091e4:	b538      	push	{r3, r4, r5, lr}
 80091e6:	690b      	ldr	r3, [r1, #16]
 80091e8:	4605      	mov	r5, r0
 80091ea:	460c      	mov	r4, r1
 80091ec:	b913      	cbnz	r3, 80091f4 <_fflush_r+0x10>
 80091ee:	2500      	movs	r5, #0
 80091f0:	4628      	mov	r0, r5
 80091f2:	bd38      	pop	{r3, r4, r5, pc}
 80091f4:	b118      	cbz	r0, 80091fe <_fflush_r+0x1a>
 80091f6:	6a03      	ldr	r3, [r0, #32]
 80091f8:	b90b      	cbnz	r3, 80091fe <_fflush_r+0x1a>
 80091fa:	f7ff f9e3 	bl	80085c4 <__sinit>
 80091fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d0f3      	beq.n	80091ee <_fflush_r+0xa>
 8009206:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009208:	07d0      	lsls	r0, r2, #31
 800920a:	d404      	bmi.n	8009216 <_fflush_r+0x32>
 800920c:	0599      	lsls	r1, r3, #22
 800920e:	d402      	bmi.n	8009216 <_fflush_r+0x32>
 8009210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009212:	f7ff fb59 	bl	80088c8 <__retarget_lock_acquire_recursive>
 8009216:	4628      	mov	r0, r5
 8009218:	4621      	mov	r1, r4
 800921a:	f7ff ff5d 	bl	80090d8 <__sflush_r>
 800921e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009220:	07da      	lsls	r2, r3, #31
 8009222:	4605      	mov	r5, r0
 8009224:	d4e4      	bmi.n	80091f0 <_fflush_r+0xc>
 8009226:	89a3      	ldrh	r3, [r4, #12]
 8009228:	059b      	lsls	r3, r3, #22
 800922a:	d4e1      	bmi.n	80091f0 <_fflush_r+0xc>
 800922c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800922e:	f7ff fb4c 	bl	80088ca <__retarget_lock_release_recursive>
 8009232:	e7dd      	b.n	80091f0 <_fflush_r+0xc>

08009234 <fiprintf>:
 8009234:	b40e      	push	{r1, r2, r3}
 8009236:	b503      	push	{r0, r1, lr}
 8009238:	4601      	mov	r1, r0
 800923a:	ab03      	add	r3, sp, #12
 800923c:	4805      	ldr	r0, [pc, #20]	; (8009254 <fiprintf+0x20>)
 800923e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009242:	6800      	ldr	r0, [r0, #0]
 8009244:	9301      	str	r3, [sp, #4]
 8009246:	f000 f89f 	bl	8009388 <_vfiprintf_r>
 800924a:	b002      	add	sp, #8
 800924c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009250:	b003      	add	sp, #12
 8009252:	4770      	bx	lr
 8009254:	20000120 	.word	0x20000120

08009258 <memmove>:
 8009258:	4288      	cmp	r0, r1
 800925a:	b510      	push	{r4, lr}
 800925c:	eb01 0402 	add.w	r4, r1, r2
 8009260:	d902      	bls.n	8009268 <memmove+0x10>
 8009262:	4284      	cmp	r4, r0
 8009264:	4623      	mov	r3, r4
 8009266:	d807      	bhi.n	8009278 <memmove+0x20>
 8009268:	1e43      	subs	r3, r0, #1
 800926a:	42a1      	cmp	r1, r4
 800926c:	d008      	beq.n	8009280 <memmove+0x28>
 800926e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009272:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009276:	e7f8      	b.n	800926a <memmove+0x12>
 8009278:	4402      	add	r2, r0
 800927a:	4601      	mov	r1, r0
 800927c:	428a      	cmp	r2, r1
 800927e:	d100      	bne.n	8009282 <memmove+0x2a>
 8009280:	bd10      	pop	{r4, pc}
 8009282:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009286:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800928a:	e7f7      	b.n	800927c <memmove+0x24>

0800928c <_sbrk_r>:
 800928c:	b538      	push	{r3, r4, r5, lr}
 800928e:	4d06      	ldr	r5, [pc, #24]	; (80092a8 <_sbrk_r+0x1c>)
 8009290:	2300      	movs	r3, #0
 8009292:	4604      	mov	r4, r0
 8009294:	4608      	mov	r0, r1
 8009296:	602b      	str	r3, [r5, #0]
 8009298:	f7f7 fe1a 	bl	8000ed0 <_sbrk>
 800929c:	1c43      	adds	r3, r0, #1
 800929e:	d102      	bne.n	80092a6 <_sbrk_r+0x1a>
 80092a0:	682b      	ldr	r3, [r5, #0]
 80092a2:	b103      	cbz	r3, 80092a6 <_sbrk_r+0x1a>
 80092a4:	6023      	str	r3, [r4, #0]
 80092a6:	bd38      	pop	{r3, r4, r5, pc}
 80092a8:	20000620 	.word	0x20000620

080092ac <memcpy>:
 80092ac:	440a      	add	r2, r1
 80092ae:	4291      	cmp	r1, r2
 80092b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80092b4:	d100      	bne.n	80092b8 <memcpy+0xc>
 80092b6:	4770      	bx	lr
 80092b8:	b510      	push	{r4, lr}
 80092ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092c2:	4291      	cmp	r1, r2
 80092c4:	d1f9      	bne.n	80092ba <memcpy+0xe>
 80092c6:	bd10      	pop	{r4, pc}

080092c8 <abort>:
 80092c8:	b508      	push	{r3, lr}
 80092ca:	2006      	movs	r0, #6
 80092cc:	f000 fa34 	bl	8009738 <raise>
 80092d0:	2001      	movs	r0, #1
 80092d2:	f7f7 fd85 	bl	8000de0 <_exit>

080092d6 <_realloc_r>:
 80092d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092da:	4680      	mov	r8, r0
 80092dc:	4614      	mov	r4, r2
 80092de:	460e      	mov	r6, r1
 80092e0:	b921      	cbnz	r1, 80092ec <_realloc_r+0x16>
 80092e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092e6:	4611      	mov	r1, r2
 80092e8:	f7ff bb82 	b.w	80089f0 <_malloc_r>
 80092ec:	b92a      	cbnz	r2, 80092fa <_realloc_r+0x24>
 80092ee:	f7ff fb0b 	bl	8008908 <_free_r>
 80092f2:	4625      	mov	r5, r4
 80092f4:	4628      	mov	r0, r5
 80092f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092fa:	f000 fa39 	bl	8009770 <_malloc_usable_size_r>
 80092fe:	4284      	cmp	r4, r0
 8009300:	4607      	mov	r7, r0
 8009302:	d802      	bhi.n	800930a <_realloc_r+0x34>
 8009304:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009308:	d812      	bhi.n	8009330 <_realloc_r+0x5a>
 800930a:	4621      	mov	r1, r4
 800930c:	4640      	mov	r0, r8
 800930e:	f7ff fb6f 	bl	80089f0 <_malloc_r>
 8009312:	4605      	mov	r5, r0
 8009314:	2800      	cmp	r0, #0
 8009316:	d0ed      	beq.n	80092f4 <_realloc_r+0x1e>
 8009318:	42bc      	cmp	r4, r7
 800931a:	4622      	mov	r2, r4
 800931c:	4631      	mov	r1, r6
 800931e:	bf28      	it	cs
 8009320:	463a      	movcs	r2, r7
 8009322:	f7ff ffc3 	bl	80092ac <memcpy>
 8009326:	4631      	mov	r1, r6
 8009328:	4640      	mov	r0, r8
 800932a:	f7ff faed 	bl	8008908 <_free_r>
 800932e:	e7e1      	b.n	80092f4 <_realloc_r+0x1e>
 8009330:	4635      	mov	r5, r6
 8009332:	e7df      	b.n	80092f4 <_realloc_r+0x1e>

08009334 <__sfputc_r>:
 8009334:	6893      	ldr	r3, [r2, #8]
 8009336:	3b01      	subs	r3, #1
 8009338:	2b00      	cmp	r3, #0
 800933a:	b410      	push	{r4}
 800933c:	6093      	str	r3, [r2, #8]
 800933e:	da08      	bge.n	8009352 <__sfputc_r+0x1e>
 8009340:	6994      	ldr	r4, [r2, #24]
 8009342:	42a3      	cmp	r3, r4
 8009344:	db01      	blt.n	800934a <__sfputc_r+0x16>
 8009346:	290a      	cmp	r1, #10
 8009348:	d103      	bne.n	8009352 <__sfputc_r+0x1e>
 800934a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800934e:	f000 b935 	b.w	80095bc <__swbuf_r>
 8009352:	6813      	ldr	r3, [r2, #0]
 8009354:	1c58      	adds	r0, r3, #1
 8009356:	6010      	str	r0, [r2, #0]
 8009358:	7019      	strb	r1, [r3, #0]
 800935a:	4608      	mov	r0, r1
 800935c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009360:	4770      	bx	lr

08009362 <__sfputs_r>:
 8009362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009364:	4606      	mov	r6, r0
 8009366:	460f      	mov	r7, r1
 8009368:	4614      	mov	r4, r2
 800936a:	18d5      	adds	r5, r2, r3
 800936c:	42ac      	cmp	r4, r5
 800936e:	d101      	bne.n	8009374 <__sfputs_r+0x12>
 8009370:	2000      	movs	r0, #0
 8009372:	e007      	b.n	8009384 <__sfputs_r+0x22>
 8009374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009378:	463a      	mov	r2, r7
 800937a:	4630      	mov	r0, r6
 800937c:	f7ff ffda 	bl	8009334 <__sfputc_r>
 8009380:	1c43      	adds	r3, r0, #1
 8009382:	d1f3      	bne.n	800936c <__sfputs_r+0xa>
 8009384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009388 <_vfiprintf_r>:
 8009388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938c:	460d      	mov	r5, r1
 800938e:	b09d      	sub	sp, #116	; 0x74
 8009390:	4614      	mov	r4, r2
 8009392:	4698      	mov	r8, r3
 8009394:	4606      	mov	r6, r0
 8009396:	b118      	cbz	r0, 80093a0 <_vfiprintf_r+0x18>
 8009398:	6a03      	ldr	r3, [r0, #32]
 800939a:	b90b      	cbnz	r3, 80093a0 <_vfiprintf_r+0x18>
 800939c:	f7ff f912 	bl	80085c4 <__sinit>
 80093a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093a2:	07d9      	lsls	r1, r3, #31
 80093a4:	d405      	bmi.n	80093b2 <_vfiprintf_r+0x2a>
 80093a6:	89ab      	ldrh	r3, [r5, #12]
 80093a8:	059a      	lsls	r2, r3, #22
 80093aa:	d402      	bmi.n	80093b2 <_vfiprintf_r+0x2a>
 80093ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093ae:	f7ff fa8b 	bl	80088c8 <__retarget_lock_acquire_recursive>
 80093b2:	89ab      	ldrh	r3, [r5, #12]
 80093b4:	071b      	lsls	r3, r3, #28
 80093b6:	d501      	bpl.n	80093bc <_vfiprintf_r+0x34>
 80093b8:	692b      	ldr	r3, [r5, #16]
 80093ba:	b99b      	cbnz	r3, 80093e4 <_vfiprintf_r+0x5c>
 80093bc:	4629      	mov	r1, r5
 80093be:	4630      	mov	r0, r6
 80093c0:	f000 f93a 	bl	8009638 <__swsetup_r>
 80093c4:	b170      	cbz	r0, 80093e4 <_vfiprintf_r+0x5c>
 80093c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093c8:	07dc      	lsls	r4, r3, #31
 80093ca:	d504      	bpl.n	80093d6 <_vfiprintf_r+0x4e>
 80093cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093d0:	b01d      	add	sp, #116	; 0x74
 80093d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d6:	89ab      	ldrh	r3, [r5, #12]
 80093d8:	0598      	lsls	r0, r3, #22
 80093da:	d4f7      	bmi.n	80093cc <_vfiprintf_r+0x44>
 80093dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093de:	f7ff fa74 	bl	80088ca <__retarget_lock_release_recursive>
 80093e2:	e7f3      	b.n	80093cc <_vfiprintf_r+0x44>
 80093e4:	2300      	movs	r3, #0
 80093e6:	9309      	str	r3, [sp, #36]	; 0x24
 80093e8:	2320      	movs	r3, #32
 80093ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80093f2:	2330      	movs	r3, #48	; 0x30
 80093f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80095a8 <_vfiprintf_r+0x220>
 80093f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093fc:	f04f 0901 	mov.w	r9, #1
 8009400:	4623      	mov	r3, r4
 8009402:	469a      	mov	sl, r3
 8009404:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009408:	b10a      	cbz	r2, 800940e <_vfiprintf_r+0x86>
 800940a:	2a25      	cmp	r2, #37	; 0x25
 800940c:	d1f9      	bne.n	8009402 <_vfiprintf_r+0x7a>
 800940e:	ebba 0b04 	subs.w	fp, sl, r4
 8009412:	d00b      	beq.n	800942c <_vfiprintf_r+0xa4>
 8009414:	465b      	mov	r3, fp
 8009416:	4622      	mov	r2, r4
 8009418:	4629      	mov	r1, r5
 800941a:	4630      	mov	r0, r6
 800941c:	f7ff ffa1 	bl	8009362 <__sfputs_r>
 8009420:	3001      	adds	r0, #1
 8009422:	f000 80a9 	beq.w	8009578 <_vfiprintf_r+0x1f0>
 8009426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009428:	445a      	add	r2, fp
 800942a:	9209      	str	r2, [sp, #36]	; 0x24
 800942c:	f89a 3000 	ldrb.w	r3, [sl]
 8009430:	2b00      	cmp	r3, #0
 8009432:	f000 80a1 	beq.w	8009578 <_vfiprintf_r+0x1f0>
 8009436:	2300      	movs	r3, #0
 8009438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800943c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009440:	f10a 0a01 	add.w	sl, sl, #1
 8009444:	9304      	str	r3, [sp, #16]
 8009446:	9307      	str	r3, [sp, #28]
 8009448:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800944c:	931a      	str	r3, [sp, #104]	; 0x68
 800944e:	4654      	mov	r4, sl
 8009450:	2205      	movs	r2, #5
 8009452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009456:	4854      	ldr	r0, [pc, #336]	; (80095a8 <_vfiprintf_r+0x220>)
 8009458:	f7f6 fefa 	bl	8000250 <memchr>
 800945c:	9a04      	ldr	r2, [sp, #16]
 800945e:	b9d8      	cbnz	r0, 8009498 <_vfiprintf_r+0x110>
 8009460:	06d1      	lsls	r1, r2, #27
 8009462:	bf44      	itt	mi
 8009464:	2320      	movmi	r3, #32
 8009466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800946a:	0713      	lsls	r3, r2, #28
 800946c:	bf44      	itt	mi
 800946e:	232b      	movmi	r3, #43	; 0x2b
 8009470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009474:	f89a 3000 	ldrb.w	r3, [sl]
 8009478:	2b2a      	cmp	r3, #42	; 0x2a
 800947a:	d015      	beq.n	80094a8 <_vfiprintf_r+0x120>
 800947c:	9a07      	ldr	r2, [sp, #28]
 800947e:	4654      	mov	r4, sl
 8009480:	2000      	movs	r0, #0
 8009482:	f04f 0c0a 	mov.w	ip, #10
 8009486:	4621      	mov	r1, r4
 8009488:	f811 3b01 	ldrb.w	r3, [r1], #1
 800948c:	3b30      	subs	r3, #48	; 0x30
 800948e:	2b09      	cmp	r3, #9
 8009490:	d94d      	bls.n	800952e <_vfiprintf_r+0x1a6>
 8009492:	b1b0      	cbz	r0, 80094c2 <_vfiprintf_r+0x13a>
 8009494:	9207      	str	r2, [sp, #28]
 8009496:	e014      	b.n	80094c2 <_vfiprintf_r+0x13a>
 8009498:	eba0 0308 	sub.w	r3, r0, r8
 800949c:	fa09 f303 	lsl.w	r3, r9, r3
 80094a0:	4313      	orrs	r3, r2
 80094a2:	9304      	str	r3, [sp, #16]
 80094a4:	46a2      	mov	sl, r4
 80094a6:	e7d2      	b.n	800944e <_vfiprintf_r+0xc6>
 80094a8:	9b03      	ldr	r3, [sp, #12]
 80094aa:	1d19      	adds	r1, r3, #4
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	9103      	str	r1, [sp, #12]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	bfbb      	ittet	lt
 80094b4:	425b      	neglt	r3, r3
 80094b6:	f042 0202 	orrlt.w	r2, r2, #2
 80094ba:	9307      	strge	r3, [sp, #28]
 80094bc:	9307      	strlt	r3, [sp, #28]
 80094be:	bfb8      	it	lt
 80094c0:	9204      	strlt	r2, [sp, #16]
 80094c2:	7823      	ldrb	r3, [r4, #0]
 80094c4:	2b2e      	cmp	r3, #46	; 0x2e
 80094c6:	d10c      	bne.n	80094e2 <_vfiprintf_r+0x15a>
 80094c8:	7863      	ldrb	r3, [r4, #1]
 80094ca:	2b2a      	cmp	r3, #42	; 0x2a
 80094cc:	d134      	bne.n	8009538 <_vfiprintf_r+0x1b0>
 80094ce:	9b03      	ldr	r3, [sp, #12]
 80094d0:	1d1a      	adds	r2, r3, #4
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	9203      	str	r2, [sp, #12]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	bfb8      	it	lt
 80094da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80094de:	3402      	adds	r4, #2
 80094e0:	9305      	str	r3, [sp, #20]
 80094e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80095b8 <_vfiprintf_r+0x230>
 80094e6:	7821      	ldrb	r1, [r4, #0]
 80094e8:	2203      	movs	r2, #3
 80094ea:	4650      	mov	r0, sl
 80094ec:	f7f6 feb0 	bl	8000250 <memchr>
 80094f0:	b138      	cbz	r0, 8009502 <_vfiprintf_r+0x17a>
 80094f2:	9b04      	ldr	r3, [sp, #16]
 80094f4:	eba0 000a 	sub.w	r0, r0, sl
 80094f8:	2240      	movs	r2, #64	; 0x40
 80094fa:	4082      	lsls	r2, r0
 80094fc:	4313      	orrs	r3, r2
 80094fe:	3401      	adds	r4, #1
 8009500:	9304      	str	r3, [sp, #16]
 8009502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009506:	4829      	ldr	r0, [pc, #164]	; (80095ac <_vfiprintf_r+0x224>)
 8009508:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800950c:	2206      	movs	r2, #6
 800950e:	f7f6 fe9f 	bl	8000250 <memchr>
 8009512:	2800      	cmp	r0, #0
 8009514:	d03f      	beq.n	8009596 <_vfiprintf_r+0x20e>
 8009516:	4b26      	ldr	r3, [pc, #152]	; (80095b0 <_vfiprintf_r+0x228>)
 8009518:	bb1b      	cbnz	r3, 8009562 <_vfiprintf_r+0x1da>
 800951a:	9b03      	ldr	r3, [sp, #12]
 800951c:	3307      	adds	r3, #7
 800951e:	f023 0307 	bic.w	r3, r3, #7
 8009522:	3308      	adds	r3, #8
 8009524:	9303      	str	r3, [sp, #12]
 8009526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009528:	443b      	add	r3, r7
 800952a:	9309      	str	r3, [sp, #36]	; 0x24
 800952c:	e768      	b.n	8009400 <_vfiprintf_r+0x78>
 800952e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009532:	460c      	mov	r4, r1
 8009534:	2001      	movs	r0, #1
 8009536:	e7a6      	b.n	8009486 <_vfiprintf_r+0xfe>
 8009538:	2300      	movs	r3, #0
 800953a:	3401      	adds	r4, #1
 800953c:	9305      	str	r3, [sp, #20]
 800953e:	4619      	mov	r1, r3
 8009540:	f04f 0c0a 	mov.w	ip, #10
 8009544:	4620      	mov	r0, r4
 8009546:	f810 2b01 	ldrb.w	r2, [r0], #1
 800954a:	3a30      	subs	r2, #48	; 0x30
 800954c:	2a09      	cmp	r2, #9
 800954e:	d903      	bls.n	8009558 <_vfiprintf_r+0x1d0>
 8009550:	2b00      	cmp	r3, #0
 8009552:	d0c6      	beq.n	80094e2 <_vfiprintf_r+0x15a>
 8009554:	9105      	str	r1, [sp, #20]
 8009556:	e7c4      	b.n	80094e2 <_vfiprintf_r+0x15a>
 8009558:	fb0c 2101 	mla	r1, ip, r1, r2
 800955c:	4604      	mov	r4, r0
 800955e:	2301      	movs	r3, #1
 8009560:	e7f0      	b.n	8009544 <_vfiprintf_r+0x1bc>
 8009562:	ab03      	add	r3, sp, #12
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	462a      	mov	r2, r5
 8009568:	4b12      	ldr	r3, [pc, #72]	; (80095b4 <_vfiprintf_r+0x22c>)
 800956a:	a904      	add	r1, sp, #16
 800956c:	4630      	mov	r0, r6
 800956e:	f3af 8000 	nop.w
 8009572:	4607      	mov	r7, r0
 8009574:	1c78      	adds	r0, r7, #1
 8009576:	d1d6      	bne.n	8009526 <_vfiprintf_r+0x19e>
 8009578:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800957a:	07d9      	lsls	r1, r3, #31
 800957c:	d405      	bmi.n	800958a <_vfiprintf_r+0x202>
 800957e:	89ab      	ldrh	r3, [r5, #12]
 8009580:	059a      	lsls	r2, r3, #22
 8009582:	d402      	bmi.n	800958a <_vfiprintf_r+0x202>
 8009584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009586:	f7ff f9a0 	bl	80088ca <__retarget_lock_release_recursive>
 800958a:	89ab      	ldrh	r3, [r5, #12]
 800958c:	065b      	lsls	r3, r3, #25
 800958e:	f53f af1d 	bmi.w	80093cc <_vfiprintf_r+0x44>
 8009592:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009594:	e71c      	b.n	80093d0 <_vfiprintf_r+0x48>
 8009596:	ab03      	add	r3, sp, #12
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	462a      	mov	r2, r5
 800959c:	4b05      	ldr	r3, [pc, #20]	; (80095b4 <_vfiprintf_r+0x22c>)
 800959e:	a904      	add	r1, sp, #16
 80095a0:	4630      	mov	r0, r6
 80095a2:	f7ff fc77 	bl	8008e94 <_printf_i>
 80095a6:	e7e4      	b.n	8009572 <_vfiprintf_r+0x1ea>
 80095a8:	08009aea 	.word	0x08009aea
 80095ac:	08009af4 	.word	0x08009af4
 80095b0:	00000000 	.word	0x00000000
 80095b4:	08009363 	.word	0x08009363
 80095b8:	08009af0 	.word	0x08009af0

080095bc <__swbuf_r>:
 80095bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095be:	460e      	mov	r6, r1
 80095c0:	4614      	mov	r4, r2
 80095c2:	4605      	mov	r5, r0
 80095c4:	b118      	cbz	r0, 80095ce <__swbuf_r+0x12>
 80095c6:	6a03      	ldr	r3, [r0, #32]
 80095c8:	b90b      	cbnz	r3, 80095ce <__swbuf_r+0x12>
 80095ca:	f7fe fffb 	bl	80085c4 <__sinit>
 80095ce:	69a3      	ldr	r3, [r4, #24]
 80095d0:	60a3      	str	r3, [r4, #8]
 80095d2:	89a3      	ldrh	r3, [r4, #12]
 80095d4:	071a      	lsls	r2, r3, #28
 80095d6:	d525      	bpl.n	8009624 <__swbuf_r+0x68>
 80095d8:	6923      	ldr	r3, [r4, #16]
 80095da:	b31b      	cbz	r3, 8009624 <__swbuf_r+0x68>
 80095dc:	6823      	ldr	r3, [r4, #0]
 80095de:	6922      	ldr	r2, [r4, #16]
 80095e0:	1a98      	subs	r0, r3, r2
 80095e2:	6963      	ldr	r3, [r4, #20]
 80095e4:	b2f6      	uxtb	r6, r6
 80095e6:	4283      	cmp	r3, r0
 80095e8:	4637      	mov	r7, r6
 80095ea:	dc04      	bgt.n	80095f6 <__swbuf_r+0x3a>
 80095ec:	4621      	mov	r1, r4
 80095ee:	4628      	mov	r0, r5
 80095f0:	f7ff fdf8 	bl	80091e4 <_fflush_r>
 80095f4:	b9e0      	cbnz	r0, 8009630 <__swbuf_r+0x74>
 80095f6:	68a3      	ldr	r3, [r4, #8]
 80095f8:	3b01      	subs	r3, #1
 80095fa:	60a3      	str	r3, [r4, #8]
 80095fc:	6823      	ldr	r3, [r4, #0]
 80095fe:	1c5a      	adds	r2, r3, #1
 8009600:	6022      	str	r2, [r4, #0]
 8009602:	701e      	strb	r6, [r3, #0]
 8009604:	6962      	ldr	r2, [r4, #20]
 8009606:	1c43      	adds	r3, r0, #1
 8009608:	429a      	cmp	r2, r3
 800960a:	d004      	beq.n	8009616 <__swbuf_r+0x5a>
 800960c:	89a3      	ldrh	r3, [r4, #12]
 800960e:	07db      	lsls	r3, r3, #31
 8009610:	d506      	bpl.n	8009620 <__swbuf_r+0x64>
 8009612:	2e0a      	cmp	r6, #10
 8009614:	d104      	bne.n	8009620 <__swbuf_r+0x64>
 8009616:	4621      	mov	r1, r4
 8009618:	4628      	mov	r0, r5
 800961a:	f7ff fde3 	bl	80091e4 <_fflush_r>
 800961e:	b938      	cbnz	r0, 8009630 <__swbuf_r+0x74>
 8009620:	4638      	mov	r0, r7
 8009622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009624:	4621      	mov	r1, r4
 8009626:	4628      	mov	r0, r5
 8009628:	f000 f806 	bl	8009638 <__swsetup_r>
 800962c:	2800      	cmp	r0, #0
 800962e:	d0d5      	beq.n	80095dc <__swbuf_r+0x20>
 8009630:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009634:	e7f4      	b.n	8009620 <__swbuf_r+0x64>
	...

08009638 <__swsetup_r>:
 8009638:	b538      	push	{r3, r4, r5, lr}
 800963a:	4b2a      	ldr	r3, [pc, #168]	; (80096e4 <__swsetup_r+0xac>)
 800963c:	4605      	mov	r5, r0
 800963e:	6818      	ldr	r0, [r3, #0]
 8009640:	460c      	mov	r4, r1
 8009642:	b118      	cbz	r0, 800964c <__swsetup_r+0x14>
 8009644:	6a03      	ldr	r3, [r0, #32]
 8009646:	b90b      	cbnz	r3, 800964c <__swsetup_r+0x14>
 8009648:	f7fe ffbc 	bl	80085c4 <__sinit>
 800964c:	89a3      	ldrh	r3, [r4, #12]
 800964e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009652:	0718      	lsls	r0, r3, #28
 8009654:	d422      	bmi.n	800969c <__swsetup_r+0x64>
 8009656:	06d9      	lsls	r1, r3, #27
 8009658:	d407      	bmi.n	800966a <__swsetup_r+0x32>
 800965a:	2309      	movs	r3, #9
 800965c:	602b      	str	r3, [r5, #0]
 800965e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009662:	81a3      	strh	r3, [r4, #12]
 8009664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009668:	e034      	b.n	80096d4 <__swsetup_r+0x9c>
 800966a:	0758      	lsls	r0, r3, #29
 800966c:	d512      	bpl.n	8009694 <__swsetup_r+0x5c>
 800966e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009670:	b141      	cbz	r1, 8009684 <__swsetup_r+0x4c>
 8009672:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009676:	4299      	cmp	r1, r3
 8009678:	d002      	beq.n	8009680 <__swsetup_r+0x48>
 800967a:	4628      	mov	r0, r5
 800967c:	f7ff f944 	bl	8008908 <_free_r>
 8009680:	2300      	movs	r3, #0
 8009682:	6363      	str	r3, [r4, #52]	; 0x34
 8009684:	89a3      	ldrh	r3, [r4, #12]
 8009686:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800968a:	81a3      	strh	r3, [r4, #12]
 800968c:	2300      	movs	r3, #0
 800968e:	6063      	str	r3, [r4, #4]
 8009690:	6923      	ldr	r3, [r4, #16]
 8009692:	6023      	str	r3, [r4, #0]
 8009694:	89a3      	ldrh	r3, [r4, #12]
 8009696:	f043 0308 	orr.w	r3, r3, #8
 800969a:	81a3      	strh	r3, [r4, #12]
 800969c:	6923      	ldr	r3, [r4, #16]
 800969e:	b94b      	cbnz	r3, 80096b4 <__swsetup_r+0x7c>
 80096a0:	89a3      	ldrh	r3, [r4, #12]
 80096a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80096a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096aa:	d003      	beq.n	80096b4 <__swsetup_r+0x7c>
 80096ac:	4621      	mov	r1, r4
 80096ae:	4628      	mov	r0, r5
 80096b0:	f000 f88c 	bl	80097cc <__smakebuf_r>
 80096b4:	89a0      	ldrh	r0, [r4, #12]
 80096b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096ba:	f010 0301 	ands.w	r3, r0, #1
 80096be:	d00a      	beq.n	80096d6 <__swsetup_r+0x9e>
 80096c0:	2300      	movs	r3, #0
 80096c2:	60a3      	str	r3, [r4, #8]
 80096c4:	6963      	ldr	r3, [r4, #20]
 80096c6:	425b      	negs	r3, r3
 80096c8:	61a3      	str	r3, [r4, #24]
 80096ca:	6923      	ldr	r3, [r4, #16]
 80096cc:	b943      	cbnz	r3, 80096e0 <__swsetup_r+0xa8>
 80096ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80096d2:	d1c4      	bne.n	800965e <__swsetup_r+0x26>
 80096d4:	bd38      	pop	{r3, r4, r5, pc}
 80096d6:	0781      	lsls	r1, r0, #30
 80096d8:	bf58      	it	pl
 80096da:	6963      	ldrpl	r3, [r4, #20]
 80096dc:	60a3      	str	r3, [r4, #8]
 80096de:	e7f4      	b.n	80096ca <__swsetup_r+0x92>
 80096e0:	2000      	movs	r0, #0
 80096e2:	e7f7      	b.n	80096d4 <__swsetup_r+0x9c>
 80096e4:	20000120 	.word	0x20000120

080096e8 <_raise_r>:
 80096e8:	291f      	cmp	r1, #31
 80096ea:	b538      	push	{r3, r4, r5, lr}
 80096ec:	4604      	mov	r4, r0
 80096ee:	460d      	mov	r5, r1
 80096f0:	d904      	bls.n	80096fc <_raise_r+0x14>
 80096f2:	2316      	movs	r3, #22
 80096f4:	6003      	str	r3, [r0, #0]
 80096f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096fa:	bd38      	pop	{r3, r4, r5, pc}
 80096fc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80096fe:	b112      	cbz	r2, 8009706 <_raise_r+0x1e>
 8009700:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009704:	b94b      	cbnz	r3, 800971a <_raise_r+0x32>
 8009706:	4620      	mov	r0, r4
 8009708:	f000 f830 	bl	800976c <_getpid_r>
 800970c:	462a      	mov	r2, r5
 800970e:	4601      	mov	r1, r0
 8009710:	4620      	mov	r0, r4
 8009712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009716:	f000 b817 	b.w	8009748 <_kill_r>
 800971a:	2b01      	cmp	r3, #1
 800971c:	d00a      	beq.n	8009734 <_raise_r+0x4c>
 800971e:	1c59      	adds	r1, r3, #1
 8009720:	d103      	bne.n	800972a <_raise_r+0x42>
 8009722:	2316      	movs	r3, #22
 8009724:	6003      	str	r3, [r0, #0]
 8009726:	2001      	movs	r0, #1
 8009728:	e7e7      	b.n	80096fa <_raise_r+0x12>
 800972a:	2400      	movs	r4, #0
 800972c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009730:	4628      	mov	r0, r5
 8009732:	4798      	blx	r3
 8009734:	2000      	movs	r0, #0
 8009736:	e7e0      	b.n	80096fa <_raise_r+0x12>

08009738 <raise>:
 8009738:	4b02      	ldr	r3, [pc, #8]	; (8009744 <raise+0xc>)
 800973a:	4601      	mov	r1, r0
 800973c:	6818      	ldr	r0, [r3, #0]
 800973e:	f7ff bfd3 	b.w	80096e8 <_raise_r>
 8009742:	bf00      	nop
 8009744:	20000120 	.word	0x20000120

08009748 <_kill_r>:
 8009748:	b538      	push	{r3, r4, r5, lr}
 800974a:	4d07      	ldr	r5, [pc, #28]	; (8009768 <_kill_r+0x20>)
 800974c:	2300      	movs	r3, #0
 800974e:	4604      	mov	r4, r0
 8009750:	4608      	mov	r0, r1
 8009752:	4611      	mov	r1, r2
 8009754:	602b      	str	r3, [r5, #0]
 8009756:	f7f7 fb33 	bl	8000dc0 <_kill>
 800975a:	1c43      	adds	r3, r0, #1
 800975c:	d102      	bne.n	8009764 <_kill_r+0x1c>
 800975e:	682b      	ldr	r3, [r5, #0]
 8009760:	b103      	cbz	r3, 8009764 <_kill_r+0x1c>
 8009762:	6023      	str	r3, [r4, #0]
 8009764:	bd38      	pop	{r3, r4, r5, pc}
 8009766:	bf00      	nop
 8009768:	20000620 	.word	0x20000620

0800976c <_getpid_r>:
 800976c:	f7f7 bb20 	b.w	8000db0 <_getpid>

08009770 <_malloc_usable_size_r>:
 8009770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009774:	1f18      	subs	r0, r3, #4
 8009776:	2b00      	cmp	r3, #0
 8009778:	bfbc      	itt	lt
 800977a:	580b      	ldrlt	r3, [r1, r0]
 800977c:	18c0      	addlt	r0, r0, r3
 800977e:	4770      	bx	lr

08009780 <__swhatbuf_r>:
 8009780:	b570      	push	{r4, r5, r6, lr}
 8009782:	460c      	mov	r4, r1
 8009784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009788:	2900      	cmp	r1, #0
 800978a:	b096      	sub	sp, #88	; 0x58
 800978c:	4615      	mov	r5, r2
 800978e:	461e      	mov	r6, r3
 8009790:	da0d      	bge.n	80097ae <__swhatbuf_r+0x2e>
 8009792:	89a3      	ldrh	r3, [r4, #12]
 8009794:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009798:	f04f 0100 	mov.w	r1, #0
 800979c:	bf0c      	ite	eq
 800979e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80097a2:	2340      	movne	r3, #64	; 0x40
 80097a4:	2000      	movs	r0, #0
 80097a6:	6031      	str	r1, [r6, #0]
 80097a8:	602b      	str	r3, [r5, #0]
 80097aa:	b016      	add	sp, #88	; 0x58
 80097ac:	bd70      	pop	{r4, r5, r6, pc}
 80097ae:	466a      	mov	r2, sp
 80097b0:	f000 f848 	bl	8009844 <_fstat_r>
 80097b4:	2800      	cmp	r0, #0
 80097b6:	dbec      	blt.n	8009792 <__swhatbuf_r+0x12>
 80097b8:	9901      	ldr	r1, [sp, #4]
 80097ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80097be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80097c2:	4259      	negs	r1, r3
 80097c4:	4159      	adcs	r1, r3
 80097c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097ca:	e7eb      	b.n	80097a4 <__swhatbuf_r+0x24>

080097cc <__smakebuf_r>:
 80097cc:	898b      	ldrh	r3, [r1, #12]
 80097ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097d0:	079d      	lsls	r5, r3, #30
 80097d2:	4606      	mov	r6, r0
 80097d4:	460c      	mov	r4, r1
 80097d6:	d507      	bpl.n	80097e8 <__smakebuf_r+0x1c>
 80097d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097dc:	6023      	str	r3, [r4, #0]
 80097de:	6123      	str	r3, [r4, #16]
 80097e0:	2301      	movs	r3, #1
 80097e2:	6163      	str	r3, [r4, #20]
 80097e4:	b002      	add	sp, #8
 80097e6:	bd70      	pop	{r4, r5, r6, pc}
 80097e8:	ab01      	add	r3, sp, #4
 80097ea:	466a      	mov	r2, sp
 80097ec:	f7ff ffc8 	bl	8009780 <__swhatbuf_r>
 80097f0:	9900      	ldr	r1, [sp, #0]
 80097f2:	4605      	mov	r5, r0
 80097f4:	4630      	mov	r0, r6
 80097f6:	f7ff f8fb 	bl	80089f0 <_malloc_r>
 80097fa:	b948      	cbnz	r0, 8009810 <__smakebuf_r+0x44>
 80097fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009800:	059a      	lsls	r2, r3, #22
 8009802:	d4ef      	bmi.n	80097e4 <__smakebuf_r+0x18>
 8009804:	f023 0303 	bic.w	r3, r3, #3
 8009808:	f043 0302 	orr.w	r3, r3, #2
 800980c:	81a3      	strh	r3, [r4, #12]
 800980e:	e7e3      	b.n	80097d8 <__smakebuf_r+0xc>
 8009810:	89a3      	ldrh	r3, [r4, #12]
 8009812:	6020      	str	r0, [r4, #0]
 8009814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009818:	81a3      	strh	r3, [r4, #12]
 800981a:	9b00      	ldr	r3, [sp, #0]
 800981c:	6163      	str	r3, [r4, #20]
 800981e:	9b01      	ldr	r3, [sp, #4]
 8009820:	6120      	str	r0, [r4, #16]
 8009822:	b15b      	cbz	r3, 800983c <__smakebuf_r+0x70>
 8009824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009828:	4630      	mov	r0, r6
 800982a:	f000 f81d 	bl	8009868 <_isatty_r>
 800982e:	b128      	cbz	r0, 800983c <__smakebuf_r+0x70>
 8009830:	89a3      	ldrh	r3, [r4, #12]
 8009832:	f023 0303 	bic.w	r3, r3, #3
 8009836:	f043 0301 	orr.w	r3, r3, #1
 800983a:	81a3      	strh	r3, [r4, #12]
 800983c:	89a3      	ldrh	r3, [r4, #12]
 800983e:	431d      	orrs	r5, r3
 8009840:	81a5      	strh	r5, [r4, #12]
 8009842:	e7cf      	b.n	80097e4 <__smakebuf_r+0x18>

08009844 <_fstat_r>:
 8009844:	b538      	push	{r3, r4, r5, lr}
 8009846:	4d07      	ldr	r5, [pc, #28]	; (8009864 <_fstat_r+0x20>)
 8009848:	2300      	movs	r3, #0
 800984a:	4604      	mov	r4, r0
 800984c:	4608      	mov	r0, r1
 800984e:	4611      	mov	r1, r2
 8009850:	602b      	str	r3, [r5, #0]
 8009852:	f7f7 fb14 	bl	8000e7e <_fstat>
 8009856:	1c43      	adds	r3, r0, #1
 8009858:	d102      	bne.n	8009860 <_fstat_r+0x1c>
 800985a:	682b      	ldr	r3, [r5, #0]
 800985c:	b103      	cbz	r3, 8009860 <_fstat_r+0x1c>
 800985e:	6023      	str	r3, [r4, #0]
 8009860:	bd38      	pop	{r3, r4, r5, pc}
 8009862:	bf00      	nop
 8009864:	20000620 	.word	0x20000620

08009868 <_isatty_r>:
 8009868:	b538      	push	{r3, r4, r5, lr}
 800986a:	4d06      	ldr	r5, [pc, #24]	; (8009884 <_isatty_r+0x1c>)
 800986c:	2300      	movs	r3, #0
 800986e:	4604      	mov	r4, r0
 8009870:	4608      	mov	r0, r1
 8009872:	602b      	str	r3, [r5, #0]
 8009874:	f7f7 fb13 	bl	8000e9e <_isatty>
 8009878:	1c43      	adds	r3, r0, #1
 800987a:	d102      	bne.n	8009882 <_isatty_r+0x1a>
 800987c:	682b      	ldr	r3, [r5, #0]
 800987e:	b103      	cbz	r3, 8009882 <_isatty_r+0x1a>
 8009880:	6023      	str	r3, [r4, #0]
 8009882:	bd38      	pop	{r3, r4, r5, pc}
 8009884:	20000620 	.word	0x20000620

08009888 <_init>:
 8009888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988a:	bf00      	nop
 800988c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800988e:	bc08      	pop	{r3}
 8009890:	469e      	mov	lr, r3
 8009892:	4770      	bx	lr

08009894 <_fini>:
 8009894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009896:	bf00      	nop
 8009898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800989a:	bc08      	pop	{r3}
 800989c:	469e      	mov	lr, r3
 800989e:	4770      	bx	lr
