
NUCLEO-G474RE-Invertec_MCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ebc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004094  08004094  00014094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040d4  080040d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080040d4  080040d4  000140d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040dc  080040dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040dc  080040dc  000140dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040e0  080040e0  000140e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  080040f0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  080040f0  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001128f  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020ea  00000000  00000000  0003130e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f78  00000000  00000000  000333f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c21  00000000  00000000  00034370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000256a1  00000000  00000000  00034f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000114e1  00000000  00000000  0005a632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7c22  00000000  00000000  0006bb13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004210  00000000  00000000  00163738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00167948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800407c 	.word	0x0800407c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800407c 	.word	0x0800407c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t speed = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	80fb      	strh	r3, [r7, #6]
	uint16_t acc = 1;
 800051e:	2301      	movs	r3, #1
 8000520:	80bb      	strh	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f000 fb4c 	bl	8000bbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f821 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 f975 	bl	8000818 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800052e:	f000 f869 	bl	8000604 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8000532:	f000 f8b1 	bl	8000698 <MX_TIM1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <main+0x54>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	88fa      	ldrh	r2, [r7, #6]
 800053c:	635a      	str	r2, [r3, #52]	; 0x34
		if(speed > 1022) acc=-1;
 800053e:	88fb      	ldrh	r3, [r7, #6]
 8000540:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8000544:	4293      	cmp	r3, r2
 8000546:	d902      	bls.n	800054e <main+0x3a>
 8000548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800054c:	80bb      	strh	r3, [r7, #4]
		if(speed == 0) acc=1;
 800054e:	88fb      	ldrh	r3, [r7, #6]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d101      	bne.n	8000558 <main+0x44>
 8000554:	2301      	movs	r3, #1
 8000556:	80bb      	strh	r3, [r7, #4]
		speed+=acc;
 8000558:	88fa      	ldrh	r2, [r7, #6]
 800055a:	88bb      	ldrh	r3, [r7, #4]
 800055c:	4413      	add	r3, r2
 800055e:	80fb      	strh	r3, [r7, #6]
		HAL_Delay(10);
 8000560:	200a      	movs	r0, #10
 8000562:	f000 fb9d 	bl	8000ca0 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8000566:	e7e6      	b.n	8000536 <main+0x22>
 8000568:	200000b8 	.word	0x200000b8

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	; 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0318 	add.w	r3, r7, #24
 8000576:	2238      	movs	r2, #56	; 0x38
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f003 fd52 	bl	8004024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800058e:	2000      	movs	r0, #0
 8000590:	f000 fe76 	bl	8001280 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000594:	2302      	movs	r3, #2
 8000596:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000598:	f44f 7380 	mov.w	r3, #256	; 0x100
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059e:	2340      	movs	r3, #64	; 0x40
 80005a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005aa:	2304      	movs	r3, #4
 80005ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005ae:	2355      	movs	r3, #85	; 0x55
 80005b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 0318 	add.w	r3, r7, #24
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 ff10 	bl	80013e8 <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005ce:	f000 f991 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	2303      	movs	r3, #3
 80005d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2104      	movs	r1, #4
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 fa14 	bl	8001a18 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005f6:	f000 f97d 	bl	80008f4 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3750      	adds	r7, #80	; 0x50
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000608:	4b21      	ldr	r3, [pc, #132]	; (8000690 <MX_LPUART1_UART_Init+0x8c>)
 800060a:	4a22      	ldr	r2, [pc, #136]	; (8000694 <MX_LPUART1_UART_Init+0x90>)
 800060c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800060e:	4b20      	ldr	r3, [pc, #128]	; (8000690 <MX_LPUART1_UART_Init+0x8c>)
 8000610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000614:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000616:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <MX_LPUART1_UART_Init+0x8c>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800061c:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <MX_LPUART1_UART_Init+0x8c>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000622:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <MX_LPUART1_UART_Init+0x8c>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000628:	4b19      	ldr	r3, [pc, #100]	; (8000690 <MX_LPUART1_UART_Init+0x8c>)
 800062a:	220c      	movs	r2, #12
 800062c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062e:	4b18      	ldr	r3, [pc, #96]	; (8000690 <MX_LPUART1_UART_Init+0x8c>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <MX_LPUART1_UART_Init+0x8c>)
 8000636:	2200      	movs	r2, #0
 8000638:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <MX_LPUART1_UART_Init+0x8c>)
 800063c:	2200      	movs	r2, #0
 800063e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_LPUART1_UART_Init+0x8c>)
 8000642:	2200      	movs	r2, #0
 8000644:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000646:	4812      	ldr	r0, [pc, #72]	; (8000690 <MX_LPUART1_UART_Init+0x8c>)
 8000648:	f002 fee8 	bl	800341c <HAL_UART_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000652:	f000 f94f 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000656:	2100      	movs	r1, #0
 8000658:	480d      	ldr	r0, [pc, #52]	; (8000690 <MX_LPUART1_UART_Init+0x8c>)
 800065a:	f003 fc19 	bl	8003e90 <HAL_UARTEx_SetTxFifoThreshold>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000664:	f000 f946 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000668:	2100      	movs	r1, #0
 800066a:	4809      	ldr	r0, [pc, #36]	; (8000690 <MX_LPUART1_UART_Init+0x8c>)
 800066c:	f003 fc4e 	bl	8003f0c <HAL_UARTEx_SetRxFifoThreshold>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000676:	f000 f93d 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_LPUART1_UART_Init+0x8c>)
 800067c:	f003 fbcf 	bl	8003e1e <HAL_UARTEx_DisableFifoMode>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000686:	f000 f935 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000028 	.word	0x20000028
 8000694:	40008000 	.word	0x40008000

08000698 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b09c      	sub	sp, #112	; 0x70
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800069e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
 80006c8:	615a      	str	r2, [r3, #20]
 80006ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2234      	movs	r2, #52	; 0x34
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 fca6 	bl	8004024 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006d8:	4b4d      	ldr	r3, [pc, #308]	; (8000810 <MX_TIM1_Init+0x178>)
 80006da:	4a4e      	ldr	r2, [pc, #312]	; (8000814 <MX_TIM1_Init+0x17c>)
 80006dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 80006de:	4b4c      	ldr	r3, [pc, #304]	; (8000810 <MX_TIM1_Init+0x178>)
 80006e0:	2207      	movs	r2, #7
 80006e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e4:	4b4a      	ldr	r3, [pc, #296]	; (8000810 <MX_TIM1_Init+0x178>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 80006ea:	4b49      	ldr	r3, [pc, #292]	; (8000810 <MX_TIM1_Init+0x178>)
 80006ec:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80006f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f2:	4b47      	ldr	r3, [pc, #284]	; (8000810 <MX_TIM1_Init+0x178>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006f8:	4b45      	ldr	r3, [pc, #276]	; (8000810 <MX_TIM1_Init+0x178>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006fe:	4b44      	ldr	r3, [pc, #272]	; (8000810 <MX_TIM1_Init+0x178>)
 8000700:	2280      	movs	r2, #128	; 0x80
 8000702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000704:	4842      	ldr	r0, [pc, #264]	; (8000810 <MX_TIM1_Init+0x178>)
 8000706:	f001 fdf1 	bl	80022ec <HAL_TIM_Base_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000710:	f000 f8f0 	bl	80008f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000718:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800071a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800071e:	4619      	mov	r1, r3
 8000720:	483b      	ldr	r0, [pc, #236]	; (8000810 <MX_TIM1_Init+0x178>)
 8000722:	f001 ffaf 	bl	8002684 <HAL_TIM_ConfigClockSource>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800072c:	f000 f8e2 	bl	80008f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000730:	4837      	ldr	r0, [pc, #220]	; (8000810 <MX_TIM1_Init+0x178>)
 8000732:	f001 fe32 	bl	800239a <HAL_TIM_PWM_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800073c:	f000 f8da 	bl	80008f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000740:	2300      	movs	r3, #0
 8000742:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000744:	2300      	movs	r3, #0
 8000746:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000748:	2300      	movs	r3, #0
 800074a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800074c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000750:	4619      	mov	r1, r3
 8000752:	482f      	ldr	r0, [pc, #188]	; (8000810 <MX_TIM1_Init+0x178>)
 8000754:	f002 fd1a 	bl	800318c <HAL_TIMEx_MasterConfigSynchronization>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800075e:	f000 f8c9 	bl	80008f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000762:	2360      	movs	r3, #96	; 0x60
 8000764:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 511;
 8000766:	f240 13ff 	movw	r3, #511	; 0x1ff
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800076c:	2300      	movs	r3, #0
 800076e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000770:	2300      	movs	r3, #0
 8000772:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000774:	2300      	movs	r3, #0
 8000776:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000778:	2300      	movs	r3, #0
 800077a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800077c:	2300      	movs	r3, #0
 800077e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000780:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000784:	2200      	movs	r2, #0
 8000786:	4619      	mov	r1, r3
 8000788:	4821      	ldr	r0, [pc, #132]	; (8000810 <MX_TIM1_Init+0x178>)
 800078a:	f001 fe67 	bl	800245c <HAL_TIM_PWM_ConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000794:	f000 f8ae 	bl	80008f4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800079c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007a0:	2204      	movs	r2, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	481a      	ldr	r0, [pc, #104]	; (8000810 <MX_TIM1_Init+0x178>)
 80007a6:	f001 fe59 	bl	800245c <HAL_TIM_PWM_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 80007b0:	f000 f8a0 	bl	80008f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80007e4:	2300      	movs	r3, #0
 80007e6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	4619      	mov	r1, r3
 80007f0:	4807      	ldr	r0, [pc, #28]	; (8000810 <MX_TIM1_Init+0x178>)
 80007f2:	f002 fd61 	bl	80032b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 80007fc:	f000 f87a 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000800:	4803      	ldr	r0, [pc, #12]	; (8000810 <MX_TIM1_Init+0x178>)
 8000802:	f000 f919 	bl	8000a38 <HAL_TIM_MspPostInit>

}
 8000806:	bf00      	nop
 8000808:	3770      	adds	r7, #112	; 0x70
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200000b8 	.word	0x200000b8
 8000814:	40012c00 	.word	0x40012c00

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	4b2f      	ldr	r3, [pc, #188]	; (80008ec <MX_GPIO_Init+0xd4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	4a2e      	ldr	r2, [pc, #184]	; (80008ec <MX_GPIO_Init+0xd4>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083a:	4b2c      	ldr	r3, [pc, #176]	; (80008ec <MX_GPIO_Init+0xd4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000846:	4b29      	ldr	r3, [pc, #164]	; (80008ec <MX_GPIO_Init+0xd4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4a28      	ldr	r2, [pc, #160]	; (80008ec <MX_GPIO_Init+0xd4>)
 800084c:	f043 0320 	orr.w	r3, r3, #32
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b26      	ldr	r3, [pc, #152]	; (80008ec <MX_GPIO_Init+0xd4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0320 	and.w	r3, r3, #32
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b23      	ldr	r3, [pc, #140]	; (80008ec <MX_GPIO_Init+0xd4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a22      	ldr	r2, [pc, #136]	; (80008ec <MX_GPIO_Init+0xd4>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b20      	ldr	r3, [pc, #128]	; (80008ec <MX_GPIO_Init+0xd4>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <MX_GPIO_Init+0xd4>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	4a1c      	ldr	r2, [pc, #112]	; (80008ec <MX_GPIO_Init+0xd4>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000882:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_GPIO_Init+0xd4>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2120      	movs	r1, #32
 8000892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000896:	f000 fcb7 	bl	8001208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	480f      	ldr	r0, [pc, #60]	; (80008f0 <MX_GPIO_Init+0xd8>)
 80008b2:	f000 fb27 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008b6:	2320      	movs	r3, #32
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d0:	f000 fb18 	bl	8000f04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2100      	movs	r1, #0
 80008d8:	2028      	movs	r0, #40	; 0x28
 80008da:	f000 fade 	bl	8000e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008de:	2028      	movs	r0, #40	; 0x28
 80008e0:	f000 faf5 	bl	8000ece <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	; 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40021000 	.word	0x40021000
 80008f0:	48000800 	.word	0x48000800

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008fc:	e7fe      	b.n	80008fc <Error_Handler+0x8>
	...

08000900 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <HAL_MspInit+0x44>)
 8000908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800090a:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <HAL_MspInit+0x44>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6613      	str	r3, [r2, #96]	; 0x60
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <HAL_MspInit+0x44>)
 8000914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <HAL_MspInit+0x44>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000922:	4a08      	ldr	r2, [pc, #32]	; (8000944 <HAL_MspInit+0x44>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000928:	6593      	str	r3, [r2, #88]	; 0x58
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_MspInit+0x44>)
 800092c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000936:	f000 fd47 	bl	80013c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000

08000948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b09e      	sub	sp, #120	; 0x78
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	2254      	movs	r2, #84	; 0x54
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f003 fb5b 	bl	8004024 <memset>
  if(huart->Instance==LPUART1)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a1f      	ldr	r2, [pc, #124]	; (80009f0 <HAL_UART_MspInit+0xa8>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d136      	bne.n	80009e6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000978:	2320      	movs	r3, #32
 800097a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	4618      	mov	r0, r3
 8000986:	f001 fa63 	bl	8001e50 <HAL_RCCEx_PeriphCLKConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000990:	f7ff ffb0 	bl	80008f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <HAL_UART_MspInit+0xac>)
 8000996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000998:	4a16      	ldr	r2, [pc, #88]	; (80009f4 <HAL_UART_MspInit+0xac>)
 800099a:	f043 0301 	orr.w	r3, r3, #1
 800099e:	65d3      	str	r3, [r2, #92]	; 0x5c
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <HAL_UART_MspInit+0xac>)
 80009a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <HAL_UART_MspInit+0xac>)
 80009ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b0:	4a10      	ldr	r2, [pc, #64]	; (80009f4 <HAL_UART_MspInit+0xac>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <HAL_UART_MspInit+0xac>)
 80009ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80009c4:	230c      	movs	r3, #12
 80009c6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80009d4:	230c      	movs	r3, #12
 80009d6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009dc:	4619      	mov	r1, r3
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f000 fa8f 	bl	8000f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80009e6:	bf00      	nop
 80009e8:	3778      	adds	r7, #120	; 0x78
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40008000 	.word	0x40008000
 80009f4:	40021000 	.word	0x40021000

080009f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <HAL_TIM_Base_MspInit+0x38>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d10b      	bne.n	8000a22 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <HAL_TIM_Base_MspInit+0x3c>)
 8000a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0e:	4a09      	ldr	r2, [pc, #36]	; (8000a34 <HAL_TIM_Base_MspInit+0x3c>)
 8000a10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a14:	6613      	str	r3, [r2, #96]	; 0x60
 8000a16:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <HAL_TIM_Base_MspInit+0x3c>)
 8000a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a22:	bf00      	nop
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40012c00 	.word	0x40012c00
 8000a34:	40021000 	.word	0x40021000

08000a38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a20      	ldr	r2, [pc, #128]	; (8000ad8 <HAL_TIM_MspPostInit+0xa0>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d13a      	bne.n	8000ad0 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	4b20      	ldr	r3, [pc, #128]	; (8000adc <HAL_TIM_MspPostInit+0xa4>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4a1f      	ldr	r2, [pc, #124]	; (8000adc <HAL_TIM_MspPostInit+0xa4>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <HAL_TIM_MspPostInit+0xa4>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <HAL_TIM_MspPostInit+0xa4>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	4a19      	ldr	r2, [pc, #100]	; (8000adc <HAL_TIM_MspPostInit+0xa4>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <HAL_TIM_MspPostInit+0xa4>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000a8a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000a9c:	2306      	movs	r3, #6
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	480e      	ldr	r0, [pc, #56]	; (8000ae0 <HAL_TIM_MspPostInit+0xa8>)
 8000aa8:	f000 fa2c 	bl	8000f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000abe:	2306      	movs	r3, #6
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000acc:	f000 fa1a 	bl	8000f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	; 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40012c00 	.word	0x40012c00
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	48000400 	.word	0x48000400

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <NMI_Handler+0x4>

08000aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <MemManage_Handler+0x4>

08000af6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b30:	f000 f898 	bl	8000c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b40:	f000 fb7a 	bl	8001238 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <SystemInit+0x20>)
 8000b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b52:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <SystemInit+0x20>)
 8000b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b6c:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b70:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b72:	490e      	ldr	r1, [pc, #56]	; (8000bac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b74:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <LoopForever+0xe>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b78:	e002      	b.n	8000b80 <LoopCopyDataInit>

08000b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7e:	3304      	adds	r3, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b84:	d3f9      	bcc.n	8000b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b86:	4a0b      	ldr	r2, [pc, #44]	; (8000bb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b88:	4c0b      	ldr	r4, [pc, #44]	; (8000bb8 <LoopForever+0x16>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b8c:	e001      	b.n	8000b92 <LoopFillZerobss>

08000b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b90:	3204      	adds	r2, #4

08000b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b94:	d3fb      	bcc.n	8000b8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b96:	f7ff ffd7 	bl	8000b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f003 fa4b 	bl	8004034 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b9e:	f7ff fcb9 	bl	8000514 <main>

08000ba2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ba2:	e7fe      	b.n	8000ba2 <LoopForever>
  ldr   r0, =_estack
 8000ba4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bb0:	080040e4 	.word	0x080040e4
  ldr r2, =_sbss
 8000bb4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bb8:	20000108 	.word	0x20000108

08000bbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC1_2_IRQHandler>

08000bbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f000 f95b 	bl	8000e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f000 f80e 	bl	8000bf0 <HAL_InitTick>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d002      	beq.n	8000be0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	71fb      	strb	r3, [r7, #7]
 8000bde:	e001      	b.n	8000be4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000be0:	f7ff fe8e 	bl	8000900 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000be4:	79fb      	ldrb	r3, [r7, #7]

}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bfc:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <HAL_InitTick+0x68>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d022      	beq.n	8000c4a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c04:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_InitTick+0x6c>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <HAL_InitTick+0x68>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c10:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 f966 	bl	8000eea <HAL_SYSTICK_Config>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d10f      	bne.n	8000c44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b0f      	cmp	r3, #15
 8000c28:	d809      	bhi.n	8000c3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	6879      	ldr	r1, [r7, #4]
 8000c2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c32:	f000 f932 	bl	8000e9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <HAL_InitTick+0x70>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6013      	str	r3, [r2, #0]
 8000c3c:	e007      	b.n	8000c4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	73fb      	strb	r3, [r7, #15]
 8000c42:	e004      	b.n	8000c4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	73fb      	strb	r3, [r7, #15]
 8000c48:	e001      	b.n	8000c4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	20000004 	.word	0x20000004

08000c64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <HAL_IncTick+0x1c>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_IncTick+0x20>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4413      	add	r3, r2
 8000c72:	4a03      	ldr	r2, [pc, #12]	; (8000c80 <HAL_IncTick+0x1c>)
 8000c74:	6013      	str	r3, [r2, #0]
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	20000104 	.word	0x20000104
 8000c84:	20000008 	.word	0x20000008

08000c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <HAL_GetTick+0x14>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000104 	.word	0x20000104

08000ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca8:	f7ff ffee 	bl	8000c88 <HAL_GetTick>
 8000cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cb8:	d004      	beq.n	8000cc4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_Delay+0x40>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cc4:	bf00      	nop
 8000cc6:	f7ff ffdf 	bl	8000c88 <HAL_GetTick>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d8f7      	bhi.n	8000cc6 <HAL_Delay+0x26>
  {
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	bf00      	nop
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000008 	.word	0x20000008

08000ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d00:	4013      	ands	r3, r2
 8000d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d16:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <__NVIC_GetPriorityGrouping+0x18>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	f003 0307 	and.w	r3, r3, #7
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	db0b      	blt.n	8000d72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	f003 021f 	and.w	r2, r3, #31
 8000d60:	4907      	ldr	r1, [pc, #28]	; (8000d80 <__NVIC_EnableIRQ+0x38>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	095b      	lsrs	r3, r3, #5
 8000d68:	2001      	movs	r0, #1
 8000d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000e100 	.word	0xe000e100

08000d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	6039      	str	r1, [r7, #0]
 8000d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	db0a      	blt.n	8000dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	490c      	ldr	r1, [pc, #48]	; (8000dd0 <__NVIC_SetPriority+0x4c>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	0112      	lsls	r2, r2, #4
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	440b      	add	r3, r1
 8000da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dac:	e00a      	b.n	8000dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4908      	ldr	r1, [pc, #32]	; (8000dd4 <__NVIC_SetPriority+0x50>)
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	3b04      	subs	r3, #4
 8000dbc:	0112      	lsls	r2, r2, #4
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	761a      	strb	r2, [r3, #24]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000e100 	.word	0xe000e100
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f1c3 0307 	rsb	r3, r3, #7
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	bf28      	it	cs
 8000df6:	2304      	movcs	r3, #4
 8000df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	2b06      	cmp	r3, #6
 8000e00:	d902      	bls.n	8000e08 <NVIC_EncodePriority+0x30>
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3b03      	subs	r3, #3
 8000e06:	e000      	b.n	8000e0a <NVIC_EncodePriority+0x32>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43da      	mvns	r2, r3
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	43d9      	mvns	r1, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	4313      	orrs	r3, r2
         );
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3724      	adds	r7, #36	; 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e50:	d301      	bcc.n	8000e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e52:	2301      	movs	r3, #1
 8000e54:	e00f      	b.n	8000e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <SysTick_Config+0x40>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e5e:	210f      	movs	r1, #15
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e64:	f7ff ff8e 	bl	8000d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <SysTick_Config+0x40>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e6e:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <SysTick_Config+0x40>)
 8000e70:	2207      	movs	r2, #7
 8000e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	e000e010 	.word	0xe000e010

08000e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff ff29 	bl	8000ce4 <__NVIC_SetPriorityGrouping>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b086      	sub	sp, #24
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	607a      	str	r2, [r7, #4]
 8000ea6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea8:	f7ff ff40 	bl	8000d2c <__NVIC_GetPriorityGrouping>
 8000eac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	68b9      	ldr	r1, [r7, #8]
 8000eb2:	6978      	ldr	r0, [r7, #20]
 8000eb4:	f7ff ff90 	bl	8000dd8 <NVIC_EncodePriority>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff5f 	bl	8000d84 <__NVIC_SetPriority>
}
 8000ec6:	bf00      	nop
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff33 	bl	8000d48 <__NVIC_EnableIRQ>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ffa4 	bl	8000e40 <SysTick_Config>
 8000ef8:	4603      	mov	r3, r0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b087      	sub	sp, #28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f12:	e15a      	b.n	80011ca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	2101      	movs	r1, #1
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f20:	4013      	ands	r3, r2
 8000f22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 814c 	beq.w	80011c4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d005      	beq.n	8000f44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d130      	bne.n	8000fa6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	091b      	lsrs	r3, r3, #4
 8000f90:	f003 0201 	and.w	r2, r3, #1
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	2b03      	cmp	r3, #3
 8000fb0:	d017      	beq.n	8000fe2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	689a      	ldr	r2, [r3, #8]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d123      	bne.n	8001036 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	08da      	lsrs	r2, r3, #3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3208      	adds	r2, #8
 8000ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	220f      	movs	r2, #15
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	691a      	ldr	r2, [r3, #16]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	08da      	lsrs	r2, r3, #3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3208      	adds	r2, #8
 8001030:	6939      	ldr	r1, [r7, #16]
 8001032:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	2203      	movs	r2, #3
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0203 	and.w	r2, r3, #3
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 80a6 	beq.w	80011c4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001078:	4b5b      	ldr	r3, [pc, #364]	; (80011e8 <HAL_GPIO_Init+0x2e4>)
 800107a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107c:	4a5a      	ldr	r2, [pc, #360]	; (80011e8 <HAL_GPIO_Init+0x2e4>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6613      	str	r3, [r2, #96]	; 0x60
 8001084:	4b58      	ldr	r3, [pc, #352]	; (80011e8 <HAL_GPIO_Init+0x2e4>)
 8001086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001090:	4a56      	ldr	r2, [pc, #344]	; (80011ec <HAL_GPIO_Init+0x2e8>)
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	3302      	adds	r3, #2
 8001098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	220f      	movs	r2, #15
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010ba:	d01f      	beq.n	80010fc <HAL_GPIO_Init+0x1f8>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a4c      	ldr	r2, [pc, #304]	; (80011f0 <HAL_GPIO_Init+0x2ec>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d019      	beq.n	80010f8 <HAL_GPIO_Init+0x1f4>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a4b      	ldr	r2, [pc, #300]	; (80011f4 <HAL_GPIO_Init+0x2f0>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d013      	beq.n	80010f4 <HAL_GPIO_Init+0x1f0>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a4a      	ldr	r2, [pc, #296]	; (80011f8 <HAL_GPIO_Init+0x2f4>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d00d      	beq.n	80010f0 <HAL_GPIO_Init+0x1ec>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a49      	ldr	r2, [pc, #292]	; (80011fc <HAL_GPIO_Init+0x2f8>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d007      	beq.n	80010ec <HAL_GPIO_Init+0x1e8>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a48      	ldr	r2, [pc, #288]	; (8001200 <HAL_GPIO_Init+0x2fc>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d101      	bne.n	80010e8 <HAL_GPIO_Init+0x1e4>
 80010e4:	2305      	movs	r3, #5
 80010e6:	e00a      	b.n	80010fe <HAL_GPIO_Init+0x1fa>
 80010e8:	2306      	movs	r3, #6
 80010ea:	e008      	b.n	80010fe <HAL_GPIO_Init+0x1fa>
 80010ec:	2304      	movs	r3, #4
 80010ee:	e006      	b.n	80010fe <HAL_GPIO_Init+0x1fa>
 80010f0:	2303      	movs	r3, #3
 80010f2:	e004      	b.n	80010fe <HAL_GPIO_Init+0x1fa>
 80010f4:	2302      	movs	r3, #2
 80010f6:	e002      	b.n	80010fe <HAL_GPIO_Init+0x1fa>
 80010f8:	2301      	movs	r3, #1
 80010fa:	e000      	b.n	80010fe <HAL_GPIO_Init+0x1fa>
 80010fc:	2300      	movs	r3, #0
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	f002 0203 	and.w	r2, r2, #3
 8001104:	0092      	lsls	r2, r2, #2
 8001106:	4093      	lsls	r3, r2
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800110e:	4937      	ldr	r1, [pc, #220]	; (80011ec <HAL_GPIO_Init+0x2e8>)
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	089b      	lsrs	r3, r3, #2
 8001114:	3302      	adds	r3, #2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800111c:	4b39      	ldr	r3, [pc, #228]	; (8001204 <HAL_GPIO_Init+0x300>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	43db      	mvns	r3, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001140:	4a30      	ldr	r2, [pc, #192]	; (8001204 <HAL_GPIO_Init+0x300>)
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001146:	4b2f      	ldr	r3, [pc, #188]	; (8001204 <HAL_GPIO_Init+0x300>)
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800116a:	4a26      	ldr	r2, [pc, #152]	; (8001204 <HAL_GPIO_Init+0x300>)
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001170:	4b24      	ldr	r3, [pc, #144]	; (8001204 <HAL_GPIO_Init+0x300>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001194:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <HAL_GPIO_Init+0x300>)
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800119a:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <HAL_GPIO_Init+0x300>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011be:	4a11      	ldr	r2, [pc, #68]	; (8001204 <HAL_GPIO_Init+0x300>)
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	3301      	adds	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	fa22 f303 	lsr.w	r3, r2, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f47f ae9d 	bne.w	8000f14 <HAL_GPIO_Init+0x10>
  }
}
 80011da:	bf00      	nop
 80011dc:	bf00      	nop
 80011de:	371c      	adds	r7, #28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40010000 	.word	0x40010000
 80011f0:	48000400 	.word	0x48000400
 80011f4:	48000800 	.word	0x48000800
 80011f8:	48000c00 	.word	0x48000c00
 80011fc:	48001000 	.word	0x48001000
 8001200:	48001400 	.word	0x48001400
 8001204:	40010400 	.word	0x40010400

08001208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
 8001214:	4613      	mov	r3, r2
 8001216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001218:	787b      	ldrb	r3, [r7, #1]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800121e:	887a      	ldrh	r2, [r7, #2]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001224:	e002      	b.n	800122c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001226:	887a      	ldrh	r2, [r7, #2]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001244:	695a      	ldr	r2, [r3, #20]
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	4013      	ands	r3, r2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d006      	beq.n	800125c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800124e:	4a05      	ldr	r2, [pc, #20]	; (8001264 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001250:	88fb      	ldrh	r3, [r7, #6]
 8001252:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f806 	bl	8001268 <HAL_GPIO_EXTI_Callback>
  }
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40010400 	.word	0x40010400

08001268 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d141      	bne.n	8001312 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800128e:	4b4b      	ldr	r3, [pc, #300]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800129a:	d131      	bne.n	8001300 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800129c:	4b47      	ldr	r3, [pc, #284]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800129e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012a2:	4a46      	ldr	r2, [pc, #280]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ac:	4b43      	ldr	r3, [pc, #268]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012b4:	4a41      	ldr	r2, [pc, #260]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012bc:	4b40      	ldr	r3, [pc, #256]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2232      	movs	r2, #50	; 0x32
 80012c2:	fb02 f303 	mul.w	r3, r2, r3
 80012c6:	4a3f      	ldr	r2, [pc, #252]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012c8:	fba2 2303 	umull	r2, r3, r2, r3
 80012cc:	0c9b      	lsrs	r3, r3, #18
 80012ce:	3301      	adds	r3, #1
 80012d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012d2:	e002      	b.n	80012da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012da:	4b38      	ldr	r3, [pc, #224]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e6:	d102      	bne.n	80012ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f2      	bne.n	80012d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012ee:	4b33      	ldr	r3, [pc, #204]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012fa:	d158      	bne.n	80013ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e057      	b.n	80013b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001300:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001306:	4a2d      	ldr	r2, [pc, #180]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800130c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001310:	e04d      	b.n	80013ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001318:	d141      	bne.n	800139e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800131a:	4b28      	ldr	r3, [pc, #160]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001326:	d131      	bne.n	800138c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001328:	4b24      	ldr	r3, [pc, #144]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800132a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800132e:	4a23      	ldr	r2, [pc, #140]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001334:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001338:	4b20      	ldr	r3, [pc, #128]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001340:	4a1e      	ldr	r2, [pc, #120]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001342:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001346:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001348:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2232      	movs	r2, #50	; 0x32
 800134e:	fb02 f303 	mul.w	r3, r2, r3
 8001352:	4a1c      	ldr	r2, [pc, #112]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001354:	fba2 2303 	umull	r2, r3, r2, r3
 8001358:	0c9b      	lsrs	r3, r3, #18
 800135a:	3301      	adds	r3, #1
 800135c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800135e:	e002      	b.n	8001366 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	3b01      	subs	r3, #1
 8001364:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001372:	d102      	bne.n	800137a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f2      	bne.n	8001360 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001386:	d112      	bne.n	80013ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e011      	b.n	80013b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001398:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800139c:	e007      	b.n	80013ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800139e:	4b07      	ldr	r3, [pc, #28]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013a6:	4a05      	ldr	r2, [pc, #20]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	40007000 	.word	0x40007000
 80013c0:	20000000 	.word	0x20000000
 80013c4:	431bde83 	.word	0x431bde83

080013c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d6:	6093      	str	r3, [r2, #8]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40007000 	.word	0x40007000

080013e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e306      	b.n	8001a08 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	d075      	beq.n	80014f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001406:	4b97      	ldr	r3, [pc, #604]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 030c 	and.w	r3, r3, #12
 800140e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001410:	4b94      	ldr	r3, [pc, #592]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	2b0c      	cmp	r3, #12
 800141e:	d102      	bne.n	8001426 <HAL_RCC_OscConfig+0x3e>
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	2b03      	cmp	r3, #3
 8001424:	d002      	beq.n	800142c <HAL_RCC_OscConfig+0x44>
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	2b08      	cmp	r3, #8
 800142a:	d10b      	bne.n	8001444 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800142c:	4b8d      	ldr	r3, [pc, #564]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d05b      	beq.n	80014f0 <HAL_RCC_OscConfig+0x108>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d157      	bne.n	80014f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e2e1      	b.n	8001a08 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800144c:	d106      	bne.n	800145c <HAL_RCC_OscConfig+0x74>
 800144e:	4b85      	ldr	r3, [pc, #532]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a84      	ldr	r2, [pc, #528]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 8001454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	e01d      	b.n	8001498 <HAL_RCC_OscConfig+0xb0>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001464:	d10c      	bne.n	8001480 <HAL_RCC_OscConfig+0x98>
 8001466:	4b7f      	ldr	r3, [pc, #508]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a7e      	ldr	r2, [pc, #504]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 800146c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	4b7c      	ldr	r3, [pc, #496]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a7b      	ldr	r2, [pc, #492]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 8001478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e00b      	b.n	8001498 <HAL_RCC_OscConfig+0xb0>
 8001480:	4b78      	ldr	r3, [pc, #480]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a77      	ldr	r2, [pc, #476]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 8001486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b75      	ldr	r3, [pc, #468]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a74      	ldr	r2, [pc, #464]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 8001492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d013      	beq.n	80014c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a0:	f7ff fbf2 	bl	8000c88 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a8:	f7ff fbee 	bl	8000c88 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b64      	cmp	r3, #100	; 0x64
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e2a6      	b.n	8001a08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ba:	4b6a      	ldr	r3, [pc, #424]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0xc0>
 80014c6:	e014      	b.n	80014f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c8:	f7ff fbde 	bl	8000c88 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d0:	f7ff fbda 	bl	8000c88 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b64      	cmp	r3, #100	; 0x64
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e292      	b.n	8001a08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014e2:	4b60      	ldr	r3, [pc, #384]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0xe8>
 80014ee:	e000      	b.n	80014f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d075      	beq.n	80015ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014fe:	4b59      	ldr	r3, [pc, #356]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 030c 	and.w	r3, r3, #12
 8001506:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001508:	4b56      	ldr	r3, [pc, #344]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	2b0c      	cmp	r3, #12
 8001516:	d102      	bne.n	800151e <HAL_RCC_OscConfig+0x136>
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	2b02      	cmp	r3, #2
 800151c:	d002      	beq.n	8001524 <HAL_RCC_OscConfig+0x13c>
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	2b04      	cmp	r3, #4
 8001522:	d11f      	bne.n	8001564 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001524:	4b4f      	ldr	r3, [pc, #316]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152c:	2b00      	cmp	r3, #0
 800152e:	d005      	beq.n	800153c <HAL_RCC_OscConfig+0x154>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e265      	b.n	8001a08 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153c:	4b49      	ldr	r3, [pc, #292]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	061b      	lsls	r3, r3, #24
 800154a:	4946      	ldr	r1, [pc, #280]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 800154c:	4313      	orrs	r3, r2
 800154e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001550:	4b45      	ldr	r3, [pc, #276]	; (8001668 <HAL_RCC_OscConfig+0x280>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fb4b 	bl	8000bf0 <HAL_InitTick>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d043      	beq.n	80015e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e251      	b.n	8001a08 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d023      	beq.n	80015b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800156c:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a3c      	ldr	r2, [pc, #240]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 8001572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001578:	f7ff fb86 	bl	8000c88 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001580:	f7ff fb82 	bl	8000c88 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e23a      	b.n	8001a08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001592:	4b34      	ldr	r3, [pc, #208]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159e:	4b31      	ldr	r3, [pc, #196]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	061b      	lsls	r3, r3, #24
 80015ac:	492d      	ldr	r1, [pc, #180]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	604b      	str	r3, [r1, #4]
 80015b2:	e01a      	b.n	80015ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b4:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a2a      	ldr	r2, [pc, #168]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 80015ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c0:	f7ff fb62 	bl	8000c88 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c8:	f7ff fb5e 	bl	8000c88 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e216      	b.n	8001a08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015da:	4b22      	ldr	r3, [pc, #136]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x1e0>
 80015e6:	e000      	b.n	80015ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d041      	beq.n	800167a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d01c      	beq.n	8001638 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 8001600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001604:	4a17      	ldr	r2, [pc, #92]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160e:	f7ff fb3b 	bl	8000c88 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001616:	f7ff fb37 	bl	8000c88 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e1ef      	b.n	8001a08 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001628:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 800162a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0ef      	beq.n	8001616 <HAL_RCC_OscConfig+0x22e>
 8001636:	e020      	b.n	800167a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 800163a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163e:	4a09      	ldr	r2, [pc, #36]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001648:	f7ff fb1e 	bl	8000c88 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800164e:	e00d      	b.n	800166c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001650:	f7ff fb1a 	bl	8000c88 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d906      	bls.n	800166c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e1d2      	b.n	8001a08 <HAL_RCC_OscConfig+0x620>
 8001662:	bf00      	nop
 8001664:	40021000 	.word	0x40021000
 8001668:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800166c:	4b8c      	ldr	r3, [pc, #560]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 800166e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1ea      	bne.n	8001650 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 80a6 	beq.w	80017d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800168c:	4b84      	ldr	r3, [pc, #528]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 800168e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_RCC_OscConfig+0x2b4>
 8001698:	2301      	movs	r3, #1
 800169a:	e000      	b.n	800169e <HAL_RCC_OscConfig+0x2b6>
 800169c:	2300      	movs	r3, #0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00d      	beq.n	80016be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	4b7f      	ldr	r3, [pc, #508]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 80016a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a6:	4a7e      	ldr	r2, [pc, #504]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ac:	6593      	str	r3, [r2, #88]	; 0x58
 80016ae:	4b7c      	ldr	r3, [pc, #496]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 80016b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016ba:	2301      	movs	r3, #1
 80016bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016be:	4b79      	ldr	r3, [pc, #484]	; (80018a4 <HAL_RCC_OscConfig+0x4bc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d118      	bne.n	80016fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016ca:	4b76      	ldr	r3, [pc, #472]	; (80018a4 <HAL_RCC_OscConfig+0x4bc>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a75      	ldr	r2, [pc, #468]	; (80018a4 <HAL_RCC_OscConfig+0x4bc>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d6:	f7ff fad7 	bl	8000c88 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016de:	f7ff fad3 	bl	8000c88 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e18b      	b.n	8001a08 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f0:	4b6c      	ldr	r3, [pc, #432]	; (80018a4 <HAL_RCC_OscConfig+0x4bc>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d108      	bne.n	8001716 <HAL_RCC_OscConfig+0x32e>
 8001704:	4b66      	ldr	r3, [pc, #408]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 8001706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800170a:	4a65      	ldr	r2, [pc, #404]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001714:	e024      	b.n	8001760 <HAL_RCC_OscConfig+0x378>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b05      	cmp	r3, #5
 800171c:	d110      	bne.n	8001740 <HAL_RCC_OscConfig+0x358>
 800171e:	4b60      	ldr	r3, [pc, #384]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 8001720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001724:	4a5e      	ldr	r2, [pc, #376]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800172e:	4b5c      	ldr	r3, [pc, #368]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 8001730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001734:	4a5a      	ldr	r2, [pc, #360]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800173e:	e00f      	b.n	8001760 <HAL_RCC_OscConfig+0x378>
 8001740:	4b57      	ldr	r3, [pc, #348]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 8001742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001746:	4a56      	ldr	r2, [pc, #344]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001750:	4b53      	ldr	r3, [pc, #332]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 8001752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001756:	4a52      	ldr	r2, [pc, #328]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 8001758:	f023 0304 	bic.w	r3, r3, #4
 800175c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d016      	beq.n	8001796 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001768:	f7ff fa8e 	bl	8000c88 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800176e:	e00a      	b.n	8001786 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001770:	f7ff fa8a 	bl	8000c88 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f241 3288 	movw	r2, #5000	; 0x1388
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e140      	b.n	8001a08 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001786:	4b46      	ldr	r3, [pc, #280]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 8001788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0ed      	beq.n	8001770 <HAL_RCC_OscConfig+0x388>
 8001794:	e015      	b.n	80017c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001796:	f7ff fa77 	bl	8000c88 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800179c:	e00a      	b.n	80017b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179e:	f7ff fa73 	bl	8000c88 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e129      	b.n	8001a08 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017b4:	4b3a      	ldr	r3, [pc, #232]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 80017b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1ed      	bne.n	800179e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017c2:	7ffb      	ldrb	r3, [r7, #31]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d105      	bne.n	80017d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c8:	4b35      	ldr	r3, [pc, #212]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 80017ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017cc:	4a34      	ldr	r2, [pc, #208]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 80017ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0320 	and.w	r3, r3, #32
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d03c      	beq.n	800185a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d01c      	beq.n	8001822 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017e8:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 80017ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017ee:	4a2c      	ldr	r2, [pc, #176]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f8:	f7ff fa46 	bl	8000c88 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001800:	f7ff fa42 	bl	8000c88 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e0fa      	b.n	8001a08 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001812:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 8001814:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0ef      	beq.n	8001800 <HAL_RCC_OscConfig+0x418>
 8001820:	e01b      	b.n	800185a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001822:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 8001824:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001828:	4a1d      	ldr	r2, [pc, #116]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 800182a:	f023 0301 	bic.w	r3, r3, #1
 800182e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001832:	f7ff fa29 	bl	8000c88 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800183a:	f7ff fa25 	bl	8000c88 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e0dd      	b.n	8001a08 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800184c:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 800184e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1ef      	bne.n	800183a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 80d1 	beq.w	8001a06 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 030c 	and.w	r3, r3, #12
 800186c:	2b0c      	cmp	r3, #12
 800186e:	f000 808b 	beq.w	8001988 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d15e      	bne.n	8001938 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a08      	ldr	r2, [pc, #32]	; (80018a0 <HAL_RCC_OscConfig+0x4b8>)
 8001880:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001886:	f7ff f9ff 	bl	8000c88 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800188c:	e00c      	b.n	80018a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188e:	f7ff f9fb 	bl	8000c88 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d905      	bls.n	80018a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e0b3      	b.n	8001a08 <HAL_RCC_OscConfig+0x620>
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a8:	4b59      	ldr	r3, [pc, #356]	; (8001a10 <HAL_RCC_OscConfig+0x628>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1ec      	bne.n	800188e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b4:	4b56      	ldr	r3, [pc, #344]	; (8001a10 <HAL_RCC_OscConfig+0x628>)
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	4b56      	ldr	r3, [pc, #344]	; (8001a14 <HAL_RCC_OscConfig+0x62c>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6a11      	ldr	r1, [r2, #32]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018c4:	3a01      	subs	r2, #1
 80018c6:	0112      	lsls	r2, r2, #4
 80018c8:	4311      	orrs	r1, r2
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80018ce:	0212      	lsls	r2, r2, #8
 80018d0:	4311      	orrs	r1, r2
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018d6:	0852      	lsrs	r2, r2, #1
 80018d8:	3a01      	subs	r2, #1
 80018da:	0552      	lsls	r2, r2, #21
 80018dc:	4311      	orrs	r1, r2
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018e2:	0852      	lsrs	r2, r2, #1
 80018e4:	3a01      	subs	r2, #1
 80018e6:	0652      	lsls	r2, r2, #25
 80018e8:	4311      	orrs	r1, r2
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80018ee:	06d2      	lsls	r2, r2, #27
 80018f0:	430a      	orrs	r2, r1
 80018f2:	4947      	ldr	r1, [pc, #284]	; (8001a10 <HAL_RCC_OscConfig+0x628>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f8:	4b45      	ldr	r3, [pc, #276]	; (8001a10 <HAL_RCC_OscConfig+0x628>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a44      	ldr	r2, [pc, #272]	; (8001a10 <HAL_RCC_OscConfig+0x628>)
 80018fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001902:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001904:	4b42      	ldr	r3, [pc, #264]	; (8001a10 <HAL_RCC_OscConfig+0x628>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	4a41      	ldr	r2, [pc, #260]	; (8001a10 <HAL_RCC_OscConfig+0x628>)
 800190a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800190e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7ff f9ba 	bl	8000c88 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001918:	f7ff f9b6 	bl	8000c88 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e06e      	b.n	8001a08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800192a:	4b39      	ldr	r3, [pc, #228]	; (8001a10 <HAL_RCC_OscConfig+0x628>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x530>
 8001936:	e066      	b.n	8001a06 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001938:	4b35      	ldr	r3, [pc, #212]	; (8001a10 <HAL_RCC_OscConfig+0x628>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a34      	ldr	r2, [pc, #208]	; (8001a10 <HAL_RCC_OscConfig+0x628>)
 800193e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001942:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001944:	4b32      	ldr	r3, [pc, #200]	; (8001a10 <HAL_RCC_OscConfig+0x628>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	4a31      	ldr	r2, [pc, #196]	; (8001a10 <HAL_RCC_OscConfig+0x628>)
 800194a:	f023 0303 	bic.w	r3, r3, #3
 800194e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001950:	4b2f      	ldr	r3, [pc, #188]	; (8001a10 <HAL_RCC_OscConfig+0x628>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4a2e      	ldr	r2, [pc, #184]	; (8001a10 <HAL_RCC_OscConfig+0x628>)
 8001956:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800195a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001960:	f7ff f992 	bl	8000c88 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff f98e 	bl	8000c88 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e046      	b.n	8001a08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800197a:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <HAL_RCC_OscConfig+0x628>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x580>
 8001986:	e03e      	b.n	8001a06 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d101      	bne.n	8001994 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e039      	b.n	8001a08 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001994:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <HAL_RCC_OscConfig+0x628>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f003 0203 	and.w	r2, r3, #3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d12c      	bne.n	8001a02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	3b01      	subs	r3, #1
 80019b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d123      	bne.n	8001a02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d11b      	bne.n	8001a02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d113      	bne.n	8001a02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	085b      	lsrs	r3, r3, #1
 80019e6:	3b01      	subs	r3, #1
 80019e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d109      	bne.n	8001a02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f8:	085b      	lsrs	r3, r3, #1
 80019fa:	3b01      	subs	r3, #1
 80019fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d001      	beq.n	8001a06 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3720      	adds	r7, #32
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40021000 	.word	0x40021000
 8001a14:	019f800c 	.word	0x019f800c

08001a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e11e      	b.n	8001c6e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a30:	4b91      	ldr	r3, [pc, #580]	; (8001c78 <HAL_RCC_ClockConfig+0x260>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d910      	bls.n	8001a60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3e:	4b8e      	ldr	r3, [pc, #568]	; (8001c78 <HAL_RCC_ClockConfig+0x260>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 020f 	bic.w	r2, r3, #15
 8001a46:	498c      	ldr	r1, [pc, #560]	; (8001c78 <HAL_RCC_ClockConfig+0x260>)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4e:	4b8a      	ldr	r3, [pc, #552]	; (8001c78 <HAL_RCC_ClockConfig+0x260>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e106      	b.n	8001c6e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d073      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d129      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a74:	4b81      	ldr	r3, [pc, #516]	; (8001c7c <HAL_RCC_ClockConfig+0x264>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0f4      	b.n	8001c6e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001a84:	f000 f99e 	bl	8001dc4 <RCC_GetSysClockFreqFromPLLSource>
 8001a88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4a7c      	ldr	r2, [pc, #496]	; (8001c80 <HAL_RCC_ClockConfig+0x268>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d93f      	bls.n	8001b12 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a92:	4b7a      	ldr	r3, [pc, #488]	; (8001c7c <HAL_RCC_ClockConfig+0x264>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d009      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d033      	beq.n	8001b12 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d12f      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ab2:	4b72      	ldr	r3, [pc, #456]	; (8001c7c <HAL_RCC_ClockConfig+0x264>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aba:	4a70      	ldr	r2, [pc, #448]	; (8001c7c <HAL_RCC_ClockConfig+0x264>)
 8001abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	e024      	b.n	8001b12 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d107      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ad0:	4b6a      	ldr	r3, [pc, #424]	; (8001c7c <HAL_RCC_ClockConfig+0x264>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d109      	bne.n	8001af0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0c6      	b.n	8001c6e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae0:	4b66      	ldr	r3, [pc, #408]	; (8001c7c <HAL_RCC_ClockConfig+0x264>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0be      	b.n	8001c6e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001af0:	f000 f8ce 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8001af4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	4a61      	ldr	r2, [pc, #388]	; (8001c80 <HAL_RCC_ClockConfig+0x268>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d909      	bls.n	8001b12 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001afe:	4b5f      	ldr	r3, [pc, #380]	; (8001c7c <HAL_RCC_ClockConfig+0x264>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b06:	4a5d      	ldr	r2, [pc, #372]	; (8001c7c <HAL_RCC_ClockConfig+0x264>)
 8001b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b0c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b12:	4b5a      	ldr	r3, [pc, #360]	; (8001c7c <HAL_RCC_ClockConfig+0x264>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f023 0203 	bic.w	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4957      	ldr	r1, [pc, #348]	; (8001c7c <HAL_RCC_ClockConfig+0x264>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b24:	f7ff f8b0 	bl	8000c88 <HAL_GetTick>
 8001b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2a:	e00a      	b.n	8001b42 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b2c:	f7ff f8ac 	bl	8000c88 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e095      	b.n	8001c6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b42:	4b4e      	ldr	r3, [pc, #312]	; (8001c7c <HAL_RCC_ClockConfig+0x264>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 020c 	and.w	r2, r3, #12
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d1eb      	bne.n	8001b2c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d023      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d005      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b6c:	4b43      	ldr	r3, [pc, #268]	; (8001c7c <HAL_RCC_ClockConfig+0x264>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	4a42      	ldr	r2, [pc, #264]	; (8001c7c <HAL_RCC_ClockConfig+0x264>)
 8001b72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b76:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d007      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001b84:	4b3d      	ldr	r3, [pc, #244]	; (8001c7c <HAL_RCC_ClockConfig+0x264>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001b8c:	4a3b      	ldr	r2, [pc, #236]	; (8001c7c <HAL_RCC_ClockConfig+0x264>)
 8001b8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b94:	4b39      	ldr	r3, [pc, #228]	; (8001c7c <HAL_RCC_ClockConfig+0x264>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	4936      	ldr	r1, [pc, #216]	; (8001c7c <HAL_RCC_ClockConfig+0x264>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	608b      	str	r3, [r1, #8]
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	2b80      	cmp	r3, #128	; 0x80
 8001bac:	d105      	bne.n	8001bba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001bae:	4b33      	ldr	r3, [pc, #204]	; (8001c7c <HAL_RCC_ClockConfig+0x264>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	4a32      	ldr	r2, [pc, #200]	; (8001c7c <HAL_RCC_ClockConfig+0x264>)
 8001bb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bb8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bba:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <HAL_RCC_ClockConfig+0x260>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d21d      	bcs.n	8001c04 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc8:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <HAL_RCC_ClockConfig+0x260>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f023 020f 	bic.w	r2, r3, #15
 8001bd0:	4929      	ldr	r1, [pc, #164]	; (8001c78 <HAL_RCC_ClockConfig+0x260>)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bd8:	f7ff f856 	bl	8000c88 <HAL_GetTick>
 8001bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	e00a      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be0:	f7ff f852 	bl	8000c88 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e03b      	b.n	8001c6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf6:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <HAL_RCC_ClockConfig+0x260>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d1ed      	bne.n	8001be0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_RCC_ClockConfig+0x264>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	4917      	ldr	r1, [pc, #92]	; (8001c7c <HAL_RCC_ClockConfig+0x264>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d009      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c2e:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <HAL_RCC_ClockConfig+0x264>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	490f      	ldr	r1, [pc, #60]	; (8001c7c <HAL_RCC_ClockConfig+0x264>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c42:	f000 f825 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8001c46:	4602      	mov	r2, r0
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <HAL_RCC_ClockConfig+0x264>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	490c      	ldr	r1, [pc, #48]	; (8001c84 <HAL_RCC_ClockConfig+0x26c>)
 8001c54:	5ccb      	ldrb	r3, [r1, r3]
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <HAL_RCC_ClockConfig+0x270>)
 8001c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <HAL_RCC_ClockConfig+0x274>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe ffc2 	bl	8000bf0 <HAL_InitTick>
 8001c6c:	4603      	mov	r3, r0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40022000 	.word	0x40022000
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	04c4b400 	.word	0x04c4b400
 8001c84:	08004094 	.word	0x08004094
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	20000004 	.word	0x20000004

08001c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b087      	sub	sp, #28
 8001c94:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c96:	4b2c      	ldr	r3, [pc, #176]	; (8001d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d102      	bne.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ca2:	4b2a      	ldr	r3, [pc, #168]	; (8001d4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	e047      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ca8:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d102      	bne.n	8001cba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cb4:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	e03e      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001cba:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b0c      	cmp	r3, #12
 8001cc4:	d136      	bne.n	8001d34 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cc6:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	091b      	lsrs	r3, r3, #4
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	3301      	adds	r3, #1
 8001cdc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d10c      	bne.n	8001cfe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ce4:	4a1a      	ldr	r2, [pc, #104]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cec:	4a16      	ldr	r2, [pc, #88]	; (8001d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cee:	68d2      	ldr	r2, [r2, #12]
 8001cf0:	0a12      	lsrs	r2, r2, #8
 8001cf2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001cf6:	fb02 f303 	mul.w	r3, r2, r3
 8001cfa:	617b      	str	r3, [r7, #20]
      break;
 8001cfc:	e00c      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cfe:	4a13      	ldr	r2, [pc, #76]	; (8001d4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d06:	4a10      	ldr	r2, [pc, #64]	; (8001d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d08:	68d2      	ldr	r2, [r2, #12]
 8001d0a:	0a12      	lsrs	r2, r2, #8
 8001d0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d10:	fb02 f303 	mul.w	r3, r2, r3
 8001d14:	617b      	str	r3, [r7, #20]
      break;
 8001d16:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	0e5b      	lsrs	r3, r3, #25
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	3301      	adds	r3, #1
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	e001      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d38:	693b      	ldr	r3, [r7, #16]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	371c      	adds	r7, #28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	00f42400 	.word	0x00f42400
 8001d50:	016e3600 	.word	0x016e3600

08001d54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000000 	.word	0x20000000

08001d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d70:	f7ff fff0 	bl	8001d54 <HAL_RCC_GetHCLKFreq>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	0a1b      	lsrs	r3, r3, #8
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	4904      	ldr	r1, [pc, #16]	; (8001d94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d82:	5ccb      	ldrb	r3, [r1, r3]
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000
 8001d94:	080040a4 	.word	0x080040a4

08001d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d9c:	f7ff ffda 	bl	8001d54 <HAL_RCC_GetHCLKFreq>
 8001da0:	4602      	mov	r2, r0
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	0adb      	lsrs	r3, r3, #11
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	4904      	ldr	r1, [pc, #16]	; (8001dc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dae:	5ccb      	ldrb	r3, [r1, r3]
 8001db0:	f003 031f 	and.w	r3, r3, #31
 8001db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	080040a4 	.word	0x080040a4

08001dc4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dca:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	3301      	adds	r3, #1
 8001de0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d10c      	bne.n	8001e02 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001de8:	4a17      	ldr	r2, [pc, #92]	; (8001e48 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df0:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001df2:	68d2      	ldr	r2, [r2, #12]
 8001df4:	0a12      	lsrs	r2, r2, #8
 8001df6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001dfa:	fb02 f303 	mul.w	r3, r2, r3
 8001dfe:	617b      	str	r3, [r7, #20]
    break;
 8001e00:	e00c      	b.n	8001e1c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e02:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0a:	4a0e      	ldr	r2, [pc, #56]	; (8001e44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e0c:	68d2      	ldr	r2, [r2, #12]
 8001e0e:	0a12      	lsrs	r2, r2, #8
 8001e10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e14:	fb02 f303 	mul.w	r3, r2, r3
 8001e18:	617b      	str	r3, [r7, #20]
    break;
 8001e1a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	0e5b      	lsrs	r3, r3, #25
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	3301      	adds	r3, #1
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e34:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e36:	687b      	ldr	r3, [r7, #4]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	371c      	adds	r7, #28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	40021000 	.word	0x40021000
 8001e48:	016e3600 	.word	0x016e3600
 8001e4c:	00f42400 	.word	0x00f42400

08001e50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e58:	2300      	movs	r3, #0
 8001e5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 8098 	beq.w	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e72:	4b43      	ldr	r3, [pc, #268]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10d      	bne.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7e:	4b40      	ldr	r3, [pc, #256]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	4a3f      	ldr	r2, [pc, #252]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e88:	6593      	str	r3, [r2, #88]	; 0x58
 8001e8a:	4b3d      	ldr	r3, [pc, #244]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e96:	2301      	movs	r3, #1
 8001e98:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e9a:	4b3a      	ldr	r3, [pc, #232]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a39      	ldr	r2, [pc, #228]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ea6:	f7fe feef 	bl	8000c88 <HAL_GetTick>
 8001eaa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001eac:	e009      	b.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eae:	f7fe feeb 	bl	8000c88 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d902      	bls.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	74fb      	strb	r3, [r7, #19]
        break;
 8001ec0:	e005      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ec2:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0ef      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001ece:	7cfb      	ldrb	r3, [r7, #19]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d159      	bne.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ed4:	4b2a      	ldr	r3, [pc, #168]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ede:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d01e      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d019      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ef0:	4b23      	ldr	r3, [pc, #140]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001efa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001efc:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f02:	4a1f      	ldr	r2, [pc, #124]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f0c:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f12:	4a1b      	ldr	r2, [pc, #108]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f1c:	4a18      	ldr	r2, [pc, #96]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d016      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2e:	f7fe feab 	bl	8000c88 <HAL_GetTick>
 8001f32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f34:	e00b      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f36:	f7fe fea7 	bl	8000c88 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d902      	bls.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	74fb      	strb	r3, [r7, #19]
            break;
 8001f4c:	e006      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0ec      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001f5c:	7cfb      	ldrb	r3, [r7, #19]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10b      	bne.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f62:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f70:	4903      	ldr	r1, [pc, #12]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f78:	e008      	b.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f7a:	7cfb      	ldrb	r3, [r7, #19]
 8001f7c:	74bb      	strb	r3, [r7, #18]
 8001f7e:	e005      	b.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f88:	7cfb      	ldrb	r3, [r7, #19]
 8001f8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f8c:	7c7b      	ldrb	r3, [r7, #17]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d105      	bne.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f92:	4ba7      	ldr	r3, [pc, #668]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f96:	4aa6      	ldr	r2, [pc, #664]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00a      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001faa:	4ba1      	ldr	r3, [pc, #644]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb0:	f023 0203 	bic.w	r2, r3, #3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	499d      	ldr	r1, [pc, #628]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00a      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fcc:	4b98      	ldr	r3, [pc, #608]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd2:	f023 020c 	bic.w	r2, r3, #12
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	4995      	ldr	r1, [pc, #596]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00a      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fee:	4b90      	ldr	r3, [pc, #576]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	498c      	ldr	r1, [pc, #560]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00a      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002010:	4b87      	ldr	r3, [pc, #540]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002016:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	4984      	ldr	r1, [pc, #528]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002020:	4313      	orrs	r3, r2
 8002022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0310 	and.w	r3, r3, #16
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002032:	4b7f      	ldr	r3, [pc, #508]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002038:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	497b      	ldr	r1, [pc, #492]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002042:	4313      	orrs	r3, r2
 8002044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0320 	and.w	r3, r3, #32
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00a      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002054:	4b76      	ldr	r3, [pc, #472]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	4973      	ldr	r1, [pc, #460]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002076:	4b6e      	ldr	r3, [pc, #440]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	496a      	ldr	r1, [pc, #424]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002086:	4313      	orrs	r3, r2
 8002088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00a      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002098:	4b65      	ldr	r3, [pc, #404]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800209a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4962      	ldr	r1, [pc, #392]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00a      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020ba:	4b5d      	ldr	r3, [pc, #372]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	4959      	ldr	r1, [pc, #356]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00a      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80020dc:	4b54      	ldr	r3, [pc, #336]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020e2:	f023 0203 	bic.w	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ea:	4951      	ldr	r1, [pc, #324]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020fe:	4b4c      	ldr	r3, [pc, #304]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002104:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210c:	4948      	ldr	r1, [pc, #288]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211c:	2b00      	cmp	r3, #0
 800211e:	d015      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002120:	4b43      	ldr	r3, [pc, #268]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002126:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4940      	ldr	r1, [pc, #256]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002130:	4313      	orrs	r3, r2
 8002132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800213e:	d105      	bne.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002140:	4b3b      	ldr	r3, [pc, #236]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4a3a      	ldr	r2, [pc, #232]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002146:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800214a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002154:	2b00      	cmp	r3, #0
 8002156:	d015      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002158:	4b35      	ldr	r3, [pc, #212]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002166:	4932      	ldr	r1, [pc, #200]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002172:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002176:	d105      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002178:	4b2d      	ldr	r3, [pc, #180]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4a2c      	ldr	r2, [pc, #176]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800217e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002182:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d015      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002190:	4b27      	ldr	r3, [pc, #156]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002196:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219e:	4924      	ldr	r1, [pc, #144]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ae:	d105      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021b0:	4b1f      	ldr	r3, [pc, #124]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4a1e      	ldr	r2, [pc, #120]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d015      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021c8:	4b19      	ldr	r3, [pc, #100]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d6:	4916      	ldr	r1, [pc, #88]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021e6:	d105      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4a10      	ldr	r2, [pc, #64]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d019      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002206:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	4908      	ldr	r1, [pc, #32]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800221e:	d109      	bne.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4a02      	ldr	r2, [pc, #8]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800222a:	60d3      	str	r3, [r2, #12]
 800222c:	e002      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800222e:	bf00      	nop
 8002230:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d015      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002240:	4b29      	ldr	r3, [pc, #164]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002246:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	4926      	ldr	r1, [pc, #152]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800225e:	d105      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002260:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4a20      	ldr	r2, [pc, #128]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d015      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002286:	4918      	ldr	r1, [pc, #96]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002296:	d105      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002298:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4a12      	ldr	r2, [pc, #72]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800229e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d015      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80022b0:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022be:	490a      	ldr	r1, [pc, #40]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022ce:	d105      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80022dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40021000 	.word	0x40021000

080022ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e049      	b.n	8002392 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d106      	bne.n	8002318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7fe fb70 	bl	80009f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3304      	adds	r3, #4
 8002328:	4619      	mov	r1, r3
 800232a:	4610      	mov	r0, r2
 800232c:	f000 fac0 	bl	80028b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e049      	b.n	8002440 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d106      	bne.n	80023c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f841 	bl	8002448 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2202      	movs	r2, #2
 80023ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3304      	adds	r3, #4
 80023d6:	4619      	mov	r1, r3
 80023d8:	4610      	mov	r0, r2
 80023da:	f000 fa69 	bl	80028b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002476:	2302      	movs	r3, #2
 8002478:	e0ff      	b.n	800267a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b14      	cmp	r3, #20
 8002486:	f200 80f0 	bhi.w	800266a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800248a:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800248c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002490:	080024e5 	.word	0x080024e5
 8002494:	0800266b 	.word	0x0800266b
 8002498:	0800266b 	.word	0x0800266b
 800249c:	0800266b 	.word	0x0800266b
 80024a0:	08002525 	.word	0x08002525
 80024a4:	0800266b 	.word	0x0800266b
 80024a8:	0800266b 	.word	0x0800266b
 80024ac:	0800266b 	.word	0x0800266b
 80024b0:	08002567 	.word	0x08002567
 80024b4:	0800266b 	.word	0x0800266b
 80024b8:	0800266b 	.word	0x0800266b
 80024bc:	0800266b 	.word	0x0800266b
 80024c0:	080025a7 	.word	0x080025a7
 80024c4:	0800266b 	.word	0x0800266b
 80024c8:	0800266b 	.word	0x0800266b
 80024cc:	0800266b 	.word	0x0800266b
 80024d0:	080025e9 	.word	0x080025e9
 80024d4:	0800266b 	.word	0x0800266b
 80024d8:	0800266b 	.word	0x0800266b
 80024dc:	0800266b 	.word	0x0800266b
 80024e0:	08002629 	.word	0x08002629
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 fa88 	bl	8002a00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699a      	ldr	r2, [r3, #24]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0208 	orr.w	r2, r2, #8
 80024fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699a      	ldr	r2, [r3, #24]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0204 	bic.w	r2, r2, #4
 800250e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6999      	ldr	r1, [r3, #24]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	691a      	ldr	r2, [r3, #16]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	619a      	str	r2, [r3, #24]
      break;
 8002522:	e0a5      	b.n	8002670 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	4618      	mov	r0, r3
 800252c:	f000 fb02 	bl	8002b34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	699a      	ldr	r2, [r3, #24]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800253e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	699a      	ldr	r2, [r3, #24]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800254e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6999      	ldr	r1, [r3, #24]
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	021a      	lsls	r2, r3, #8
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	619a      	str	r2, [r3, #24]
      break;
 8002564:	e084      	b.n	8002670 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68b9      	ldr	r1, [r7, #8]
 800256c:	4618      	mov	r0, r3
 800256e:	f000 fb75 	bl	8002c5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	69da      	ldr	r2, [r3, #28]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f042 0208 	orr.w	r2, r2, #8
 8002580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	69da      	ldr	r2, [r3, #28]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0204 	bic.w	r2, r2, #4
 8002590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	69d9      	ldr	r1, [r3, #28]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	61da      	str	r2, [r3, #28]
      break;
 80025a4:	e064      	b.n	8002670 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68b9      	ldr	r1, [r7, #8]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 fbe7 	bl	8002d80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	69da      	ldr	r2, [r3, #28]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	69da      	ldr	r2, [r3, #28]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	69d9      	ldr	r1, [r3, #28]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	021a      	lsls	r2, r3, #8
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	61da      	str	r2, [r3, #28]
      break;
 80025e6:	e043      	b.n	8002670 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 fc5a 	bl	8002ea8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0208 	orr.w	r2, r2, #8
 8002602:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0204 	bic.w	r2, r2, #4
 8002612:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002626:	e023      	b.n	8002670 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	4618      	mov	r0, r3
 8002630:	f000 fca4 	bl	8002f7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002642:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002652:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	021a      	lsls	r2, r3, #8
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002668:	e002      	b.n	8002670 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	75fb      	strb	r3, [r7, #23]
      break;
 800266e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002678:	7dfb      	ldrb	r3, [r7, #23]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop

08002684 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002698:	2b01      	cmp	r3, #1
 800269a:	d101      	bne.n	80026a0 <HAL_TIM_ConfigClockSource+0x1c>
 800269c:	2302      	movs	r3, #2
 800269e:	e0f6      	b.n	800288e <HAL_TIM_ConfigClockSource+0x20a>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80026be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a6f      	ldr	r2, [pc, #444]	; (8002898 <HAL_TIM_ConfigClockSource+0x214>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	f000 80c1 	beq.w	8002862 <HAL_TIM_ConfigClockSource+0x1de>
 80026e0:	4a6d      	ldr	r2, [pc, #436]	; (8002898 <HAL_TIM_ConfigClockSource+0x214>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	f200 80c6 	bhi.w	8002874 <HAL_TIM_ConfigClockSource+0x1f0>
 80026e8:	4a6c      	ldr	r2, [pc, #432]	; (800289c <HAL_TIM_ConfigClockSource+0x218>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	f000 80b9 	beq.w	8002862 <HAL_TIM_ConfigClockSource+0x1de>
 80026f0:	4a6a      	ldr	r2, [pc, #424]	; (800289c <HAL_TIM_ConfigClockSource+0x218>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	f200 80be 	bhi.w	8002874 <HAL_TIM_ConfigClockSource+0x1f0>
 80026f8:	4a69      	ldr	r2, [pc, #420]	; (80028a0 <HAL_TIM_ConfigClockSource+0x21c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	f000 80b1 	beq.w	8002862 <HAL_TIM_ConfigClockSource+0x1de>
 8002700:	4a67      	ldr	r2, [pc, #412]	; (80028a0 <HAL_TIM_ConfigClockSource+0x21c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	f200 80b6 	bhi.w	8002874 <HAL_TIM_ConfigClockSource+0x1f0>
 8002708:	4a66      	ldr	r2, [pc, #408]	; (80028a4 <HAL_TIM_ConfigClockSource+0x220>)
 800270a:	4293      	cmp	r3, r2
 800270c:	f000 80a9 	beq.w	8002862 <HAL_TIM_ConfigClockSource+0x1de>
 8002710:	4a64      	ldr	r2, [pc, #400]	; (80028a4 <HAL_TIM_ConfigClockSource+0x220>)
 8002712:	4293      	cmp	r3, r2
 8002714:	f200 80ae 	bhi.w	8002874 <HAL_TIM_ConfigClockSource+0x1f0>
 8002718:	4a63      	ldr	r2, [pc, #396]	; (80028a8 <HAL_TIM_ConfigClockSource+0x224>)
 800271a:	4293      	cmp	r3, r2
 800271c:	f000 80a1 	beq.w	8002862 <HAL_TIM_ConfigClockSource+0x1de>
 8002720:	4a61      	ldr	r2, [pc, #388]	; (80028a8 <HAL_TIM_ConfigClockSource+0x224>)
 8002722:	4293      	cmp	r3, r2
 8002724:	f200 80a6 	bhi.w	8002874 <HAL_TIM_ConfigClockSource+0x1f0>
 8002728:	4a60      	ldr	r2, [pc, #384]	; (80028ac <HAL_TIM_ConfigClockSource+0x228>)
 800272a:	4293      	cmp	r3, r2
 800272c:	f000 8099 	beq.w	8002862 <HAL_TIM_ConfigClockSource+0x1de>
 8002730:	4a5e      	ldr	r2, [pc, #376]	; (80028ac <HAL_TIM_ConfigClockSource+0x228>)
 8002732:	4293      	cmp	r3, r2
 8002734:	f200 809e 	bhi.w	8002874 <HAL_TIM_ConfigClockSource+0x1f0>
 8002738:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800273c:	f000 8091 	beq.w	8002862 <HAL_TIM_ConfigClockSource+0x1de>
 8002740:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002744:	f200 8096 	bhi.w	8002874 <HAL_TIM_ConfigClockSource+0x1f0>
 8002748:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800274c:	f000 8089 	beq.w	8002862 <HAL_TIM_ConfigClockSource+0x1de>
 8002750:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002754:	f200 808e 	bhi.w	8002874 <HAL_TIM_ConfigClockSource+0x1f0>
 8002758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800275c:	d03e      	beq.n	80027dc <HAL_TIM_ConfigClockSource+0x158>
 800275e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002762:	f200 8087 	bhi.w	8002874 <HAL_TIM_ConfigClockSource+0x1f0>
 8002766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800276a:	f000 8086 	beq.w	800287a <HAL_TIM_ConfigClockSource+0x1f6>
 800276e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002772:	d87f      	bhi.n	8002874 <HAL_TIM_ConfigClockSource+0x1f0>
 8002774:	2b70      	cmp	r3, #112	; 0x70
 8002776:	d01a      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x12a>
 8002778:	2b70      	cmp	r3, #112	; 0x70
 800277a:	d87b      	bhi.n	8002874 <HAL_TIM_ConfigClockSource+0x1f0>
 800277c:	2b60      	cmp	r3, #96	; 0x60
 800277e:	d050      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x19e>
 8002780:	2b60      	cmp	r3, #96	; 0x60
 8002782:	d877      	bhi.n	8002874 <HAL_TIM_ConfigClockSource+0x1f0>
 8002784:	2b50      	cmp	r3, #80	; 0x50
 8002786:	d03c      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x17e>
 8002788:	2b50      	cmp	r3, #80	; 0x50
 800278a:	d873      	bhi.n	8002874 <HAL_TIM_ConfigClockSource+0x1f0>
 800278c:	2b40      	cmp	r3, #64	; 0x40
 800278e:	d058      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x1be>
 8002790:	2b40      	cmp	r3, #64	; 0x40
 8002792:	d86f      	bhi.n	8002874 <HAL_TIM_ConfigClockSource+0x1f0>
 8002794:	2b30      	cmp	r3, #48	; 0x30
 8002796:	d064      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0x1de>
 8002798:	2b30      	cmp	r3, #48	; 0x30
 800279a:	d86b      	bhi.n	8002874 <HAL_TIM_ConfigClockSource+0x1f0>
 800279c:	2b20      	cmp	r3, #32
 800279e:	d060      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0x1de>
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	d867      	bhi.n	8002874 <HAL_TIM_ConfigClockSource+0x1f0>
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d05c      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0x1de>
 80027a8:	2b10      	cmp	r3, #16
 80027aa:	d05a      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0x1de>
 80027ac:	e062      	b.n	8002874 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	6899      	ldr	r1, [r3, #8]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f000 fcc5 	bl	800314c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	609a      	str	r2, [r3, #8]
      break;
 80027da:	e04f      	b.n	800287c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	6899      	ldr	r1, [r3, #8]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f000 fcae 	bl	800314c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027fe:	609a      	str	r2, [r3, #8]
      break;
 8002800:	e03c      	b.n	800287c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6859      	ldr	r1, [r3, #4]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	461a      	mov	r2, r3
 8002810:	f000 fc20 	bl	8003054 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2150      	movs	r1, #80	; 0x50
 800281a:	4618      	mov	r0, r3
 800281c:	f000 fc79 	bl	8003112 <TIM_ITRx_SetConfig>
      break;
 8002820:	e02c      	b.n	800287c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6859      	ldr	r1, [r3, #4]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	461a      	mov	r2, r3
 8002830:	f000 fc3f 	bl	80030b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2160      	movs	r1, #96	; 0x60
 800283a:	4618      	mov	r0, r3
 800283c:	f000 fc69 	bl	8003112 <TIM_ITRx_SetConfig>
      break;
 8002840:	e01c      	b.n	800287c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	6859      	ldr	r1, [r3, #4]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	461a      	mov	r2, r3
 8002850:	f000 fc00 	bl	8003054 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2140      	movs	r1, #64	; 0x40
 800285a:	4618      	mov	r0, r3
 800285c:	f000 fc59 	bl	8003112 <TIM_ITRx_SetConfig>
      break;
 8002860:	e00c      	b.n	800287c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4619      	mov	r1, r3
 800286c:	4610      	mov	r0, r2
 800286e:	f000 fc50 	bl	8003112 <TIM_ITRx_SetConfig>
      break;
 8002872:	e003      	b.n	800287c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	73fb      	strb	r3, [r7, #15]
      break;
 8002878:	e000      	b.n	800287c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800287a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800288c:	7bfb      	ldrb	r3, [r7, #15]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	00100070 	.word	0x00100070
 800289c:	00100060 	.word	0x00100060
 80028a0:	00100050 	.word	0x00100050
 80028a4:	00100040 	.word	0x00100040
 80028a8:	00100030 	.word	0x00100030
 80028ac:	00100020 	.word	0x00100020

080028b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a46      	ldr	r2, [pc, #280]	; (80029dc <TIM_Base_SetConfig+0x12c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d017      	beq.n	80028f8 <TIM_Base_SetConfig+0x48>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ce:	d013      	beq.n	80028f8 <TIM_Base_SetConfig+0x48>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a43      	ldr	r2, [pc, #268]	; (80029e0 <TIM_Base_SetConfig+0x130>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00f      	beq.n	80028f8 <TIM_Base_SetConfig+0x48>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a42      	ldr	r2, [pc, #264]	; (80029e4 <TIM_Base_SetConfig+0x134>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d00b      	beq.n	80028f8 <TIM_Base_SetConfig+0x48>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a41      	ldr	r2, [pc, #260]	; (80029e8 <TIM_Base_SetConfig+0x138>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d007      	beq.n	80028f8 <TIM_Base_SetConfig+0x48>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a40      	ldr	r2, [pc, #256]	; (80029ec <TIM_Base_SetConfig+0x13c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d003      	beq.n	80028f8 <TIM_Base_SetConfig+0x48>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a3f      	ldr	r2, [pc, #252]	; (80029f0 <TIM_Base_SetConfig+0x140>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d108      	bne.n	800290a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a33      	ldr	r2, [pc, #204]	; (80029dc <TIM_Base_SetConfig+0x12c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d023      	beq.n	800295a <TIM_Base_SetConfig+0xaa>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002918:	d01f      	beq.n	800295a <TIM_Base_SetConfig+0xaa>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a30      	ldr	r2, [pc, #192]	; (80029e0 <TIM_Base_SetConfig+0x130>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d01b      	beq.n	800295a <TIM_Base_SetConfig+0xaa>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a2f      	ldr	r2, [pc, #188]	; (80029e4 <TIM_Base_SetConfig+0x134>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d017      	beq.n	800295a <TIM_Base_SetConfig+0xaa>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a2e      	ldr	r2, [pc, #184]	; (80029e8 <TIM_Base_SetConfig+0x138>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <TIM_Base_SetConfig+0xaa>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a2d      	ldr	r2, [pc, #180]	; (80029ec <TIM_Base_SetConfig+0x13c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00f      	beq.n	800295a <TIM_Base_SetConfig+0xaa>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a2d      	ldr	r2, [pc, #180]	; (80029f4 <TIM_Base_SetConfig+0x144>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00b      	beq.n	800295a <TIM_Base_SetConfig+0xaa>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a2c      	ldr	r2, [pc, #176]	; (80029f8 <TIM_Base_SetConfig+0x148>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d007      	beq.n	800295a <TIM_Base_SetConfig+0xaa>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a2b      	ldr	r2, [pc, #172]	; (80029fc <TIM_Base_SetConfig+0x14c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d003      	beq.n	800295a <TIM_Base_SetConfig+0xaa>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a26      	ldr	r2, [pc, #152]	; (80029f0 <TIM_Base_SetConfig+0x140>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d108      	bne.n	800296c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4313      	orrs	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a12      	ldr	r2, [pc, #72]	; (80029dc <TIM_Base_SetConfig+0x12c>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d013      	beq.n	80029c0 <TIM_Base_SetConfig+0x110>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a14      	ldr	r2, [pc, #80]	; (80029ec <TIM_Base_SetConfig+0x13c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d00f      	beq.n	80029c0 <TIM_Base_SetConfig+0x110>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a14      	ldr	r2, [pc, #80]	; (80029f4 <TIM_Base_SetConfig+0x144>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d00b      	beq.n	80029c0 <TIM_Base_SetConfig+0x110>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a13      	ldr	r2, [pc, #76]	; (80029f8 <TIM_Base_SetConfig+0x148>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d007      	beq.n	80029c0 <TIM_Base_SetConfig+0x110>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a12      	ldr	r2, [pc, #72]	; (80029fc <TIM_Base_SetConfig+0x14c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d003      	beq.n	80029c0 <TIM_Base_SetConfig+0x110>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <TIM_Base_SetConfig+0x140>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d103      	bne.n	80029c8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	615a      	str	r2, [r3, #20]
}
 80029ce:	bf00      	nop
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40012c00 	.word	0x40012c00
 80029e0:	40000400 	.word	0x40000400
 80029e4:	40000800 	.word	0x40000800
 80029e8:	40000c00 	.word	0x40000c00
 80029ec:	40013400 	.word	0x40013400
 80029f0:	40015000 	.word	0x40015000
 80029f4:	40014000 	.word	0x40014000
 80029f8:	40014400 	.word	0x40014400
 80029fc:	40014800 	.word	0x40014800

08002a00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	f023 0201 	bic.w	r2, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 0303 	bic.w	r3, r3, #3
 8002a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f023 0302 	bic.w	r3, r3, #2
 8002a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a30      	ldr	r2, [pc, #192]	; (8002b1c <TIM_OC1_SetConfig+0x11c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d013      	beq.n	8002a88 <TIM_OC1_SetConfig+0x88>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a2f      	ldr	r2, [pc, #188]	; (8002b20 <TIM_OC1_SetConfig+0x120>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00f      	beq.n	8002a88 <TIM_OC1_SetConfig+0x88>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a2e      	ldr	r2, [pc, #184]	; (8002b24 <TIM_OC1_SetConfig+0x124>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d00b      	beq.n	8002a88 <TIM_OC1_SetConfig+0x88>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a2d      	ldr	r2, [pc, #180]	; (8002b28 <TIM_OC1_SetConfig+0x128>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d007      	beq.n	8002a88 <TIM_OC1_SetConfig+0x88>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a2c      	ldr	r2, [pc, #176]	; (8002b2c <TIM_OC1_SetConfig+0x12c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d003      	beq.n	8002a88 <TIM_OC1_SetConfig+0x88>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a2b      	ldr	r2, [pc, #172]	; (8002b30 <TIM_OC1_SetConfig+0x130>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d10c      	bne.n	8002aa2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f023 0308 	bic.w	r3, r3, #8
 8002a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f023 0304 	bic.w	r3, r3, #4
 8002aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a1d      	ldr	r2, [pc, #116]	; (8002b1c <TIM_OC1_SetConfig+0x11c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d013      	beq.n	8002ad2 <TIM_OC1_SetConfig+0xd2>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a1c      	ldr	r2, [pc, #112]	; (8002b20 <TIM_OC1_SetConfig+0x120>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d00f      	beq.n	8002ad2 <TIM_OC1_SetConfig+0xd2>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a1b      	ldr	r2, [pc, #108]	; (8002b24 <TIM_OC1_SetConfig+0x124>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00b      	beq.n	8002ad2 <TIM_OC1_SetConfig+0xd2>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a1a      	ldr	r2, [pc, #104]	; (8002b28 <TIM_OC1_SetConfig+0x128>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d007      	beq.n	8002ad2 <TIM_OC1_SetConfig+0xd2>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a19      	ldr	r2, [pc, #100]	; (8002b2c <TIM_OC1_SetConfig+0x12c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d003      	beq.n	8002ad2 <TIM_OC1_SetConfig+0xd2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a18      	ldr	r2, [pc, #96]	; (8002b30 <TIM_OC1_SetConfig+0x130>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d111      	bne.n	8002af6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	621a      	str	r2, [r3, #32]
}
 8002b10:	bf00      	nop
 8002b12:	371c      	adds	r7, #28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	40012c00 	.word	0x40012c00
 8002b20:	40013400 	.word	0x40013400
 8002b24:	40014000 	.word	0x40014000
 8002b28:	40014400 	.word	0x40014400
 8002b2c:	40014800 	.word	0x40014800
 8002b30:	40015000 	.word	0x40015000

08002b34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	f023 0210 	bic.w	r2, r3, #16
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	021b      	lsls	r3, r3, #8
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f023 0320 	bic.w	r3, r3, #32
 8002b82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a2c      	ldr	r2, [pc, #176]	; (8002c44 <TIM_OC2_SetConfig+0x110>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d007      	beq.n	8002ba8 <TIM_OC2_SetConfig+0x74>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a2b      	ldr	r2, [pc, #172]	; (8002c48 <TIM_OC2_SetConfig+0x114>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d003      	beq.n	8002ba8 <TIM_OC2_SetConfig+0x74>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a2a      	ldr	r2, [pc, #168]	; (8002c4c <TIM_OC2_SetConfig+0x118>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d10d      	bne.n	8002bc4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a1f      	ldr	r2, [pc, #124]	; (8002c44 <TIM_OC2_SetConfig+0x110>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d013      	beq.n	8002bf4 <TIM_OC2_SetConfig+0xc0>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a1e      	ldr	r2, [pc, #120]	; (8002c48 <TIM_OC2_SetConfig+0x114>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00f      	beq.n	8002bf4 <TIM_OC2_SetConfig+0xc0>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a1e      	ldr	r2, [pc, #120]	; (8002c50 <TIM_OC2_SetConfig+0x11c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d00b      	beq.n	8002bf4 <TIM_OC2_SetConfig+0xc0>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a1d      	ldr	r2, [pc, #116]	; (8002c54 <TIM_OC2_SetConfig+0x120>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d007      	beq.n	8002bf4 <TIM_OC2_SetConfig+0xc0>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a1c      	ldr	r2, [pc, #112]	; (8002c58 <TIM_OC2_SetConfig+0x124>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d003      	beq.n	8002bf4 <TIM_OC2_SetConfig+0xc0>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a17      	ldr	r2, [pc, #92]	; (8002c4c <TIM_OC2_SetConfig+0x118>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d113      	bne.n	8002c1c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	621a      	str	r2, [r3, #32]
}
 8002c36:	bf00      	nop
 8002c38:	371c      	adds	r7, #28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40012c00 	.word	0x40012c00
 8002c48:	40013400 	.word	0x40013400
 8002c4c:	40015000 	.word	0x40015000
 8002c50:	40014000 	.word	0x40014000
 8002c54:	40014400 	.word	0x40014400
 8002c58:	40014800 	.word	0x40014800

08002c5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b087      	sub	sp, #28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f023 0303 	bic.w	r3, r3, #3
 8002c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	021b      	lsls	r3, r3, #8
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a2b      	ldr	r2, [pc, #172]	; (8002d68 <TIM_OC3_SetConfig+0x10c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d007      	beq.n	8002cce <TIM_OC3_SetConfig+0x72>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a2a      	ldr	r2, [pc, #168]	; (8002d6c <TIM_OC3_SetConfig+0x110>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d003      	beq.n	8002cce <TIM_OC3_SetConfig+0x72>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a29      	ldr	r2, [pc, #164]	; (8002d70 <TIM_OC3_SetConfig+0x114>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d10d      	bne.n	8002cea <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a1e      	ldr	r2, [pc, #120]	; (8002d68 <TIM_OC3_SetConfig+0x10c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d013      	beq.n	8002d1a <TIM_OC3_SetConfig+0xbe>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a1d      	ldr	r2, [pc, #116]	; (8002d6c <TIM_OC3_SetConfig+0x110>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00f      	beq.n	8002d1a <TIM_OC3_SetConfig+0xbe>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a1d      	ldr	r2, [pc, #116]	; (8002d74 <TIM_OC3_SetConfig+0x118>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00b      	beq.n	8002d1a <TIM_OC3_SetConfig+0xbe>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a1c      	ldr	r2, [pc, #112]	; (8002d78 <TIM_OC3_SetConfig+0x11c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d007      	beq.n	8002d1a <TIM_OC3_SetConfig+0xbe>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a1b      	ldr	r2, [pc, #108]	; (8002d7c <TIM_OC3_SetConfig+0x120>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d003      	beq.n	8002d1a <TIM_OC3_SetConfig+0xbe>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a16      	ldr	r2, [pc, #88]	; (8002d70 <TIM_OC3_SetConfig+0x114>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d113      	bne.n	8002d42 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	621a      	str	r2, [r3, #32]
}
 8002d5c:	bf00      	nop
 8002d5e:	371c      	adds	r7, #28
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	40012c00 	.word	0x40012c00
 8002d6c:	40013400 	.word	0x40013400
 8002d70:	40015000 	.word	0x40015000
 8002d74:	40014000 	.word	0x40014000
 8002d78:	40014400 	.word	0x40014400
 8002d7c:	40014800 	.word	0x40014800

08002d80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	031b      	lsls	r3, r3, #12
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a2c      	ldr	r2, [pc, #176]	; (8002e90 <TIM_OC4_SetConfig+0x110>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d007      	beq.n	8002df4 <TIM_OC4_SetConfig+0x74>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a2b      	ldr	r2, [pc, #172]	; (8002e94 <TIM_OC4_SetConfig+0x114>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d003      	beq.n	8002df4 <TIM_OC4_SetConfig+0x74>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a2a      	ldr	r2, [pc, #168]	; (8002e98 <TIM_OC4_SetConfig+0x118>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d10d      	bne.n	8002e10 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	031b      	lsls	r3, r3, #12
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a1f      	ldr	r2, [pc, #124]	; (8002e90 <TIM_OC4_SetConfig+0x110>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d013      	beq.n	8002e40 <TIM_OC4_SetConfig+0xc0>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a1e      	ldr	r2, [pc, #120]	; (8002e94 <TIM_OC4_SetConfig+0x114>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00f      	beq.n	8002e40 <TIM_OC4_SetConfig+0xc0>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a1e      	ldr	r2, [pc, #120]	; (8002e9c <TIM_OC4_SetConfig+0x11c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d00b      	beq.n	8002e40 <TIM_OC4_SetConfig+0xc0>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a1d      	ldr	r2, [pc, #116]	; (8002ea0 <TIM_OC4_SetConfig+0x120>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d007      	beq.n	8002e40 <TIM_OC4_SetConfig+0xc0>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a1c      	ldr	r2, [pc, #112]	; (8002ea4 <TIM_OC4_SetConfig+0x124>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d003      	beq.n	8002e40 <TIM_OC4_SetConfig+0xc0>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a17      	ldr	r2, [pc, #92]	; (8002e98 <TIM_OC4_SetConfig+0x118>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d113      	bne.n	8002e68 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e46:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002e4e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	019b      	lsls	r3, r3, #6
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	019b      	lsls	r3, r3, #6
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	621a      	str	r2, [r3, #32]
}
 8002e82:	bf00      	nop
 8002e84:	371c      	adds	r7, #28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40012c00 	.word	0x40012c00
 8002e94:	40013400 	.word	0x40013400
 8002e98:	40015000 	.word	0x40015000
 8002e9c:	40014000 	.word	0x40014000
 8002ea0:	40014400 	.word	0x40014400
 8002ea4:	40014800 	.word	0x40014800

08002ea8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002eec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	041b      	lsls	r3, r3, #16
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a19      	ldr	r2, [pc, #100]	; (8002f64 <TIM_OC5_SetConfig+0xbc>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <TIM_OC5_SetConfig+0x82>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a18      	ldr	r2, [pc, #96]	; (8002f68 <TIM_OC5_SetConfig+0xc0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00f      	beq.n	8002f2a <TIM_OC5_SetConfig+0x82>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a17      	ldr	r2, [pc, #92]	; (8002f6c <TIM_OC5_SetConfig+0xc4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00b      	beq.n	8002f2a <TIM_OC5_SetConfig+0x82>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a16      	ldr	r2, [pc, #88]	; (8002f70 <TIM_OC5_SetConfig+0xc8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d007      	beq.n	8002f2a <TIM_OC5_SetConfig+0x82>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a15      	ldr	r2, [pc, #84]	; (8002f74 <TIM_OC5_SetConfig+0xcc>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d003      	beq.n	8002f2a <TIM_OC5_SetConfig+0x82>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a14      	ldr	r2, [pc, #80]	; (8002f78 <TIM_OC5_SetConfig+0xd0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d109      	bne.n	8002f3e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	621a      	str	r2, [r3, #32]
}
 8002f58:	bf00      	nop
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	40012c00 	.word	0x40012c00
 8002f68:	40013400 	.word	0x40013400
 8002f6c:	40014000 	.word	0x40014000
 8002f70:	40014400 	.word	0x40014400
 8002f74:	40014800 	.word	0x40014800
 8002f78:	40015000 	.word	0x40015000

08002f7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	021b      	lsls	r3, r3, #8
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	051b      	lsls	r3, r3, #20
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a1a      	ldr	r2, [pc, #104]	; (800303c <TIM_OC6_SetConfig+0xc0>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d013      	beq.n	8003000 <TIM_OC6_SetConfig+0x84>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a19      	ldr	r2, [pc, #100]	; (8003040 <TIM_OC6_SetConfig+0xc4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d00f      	beq.n	8003000 <TIM_OC6_SetConfig+0x84>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a18      	ldr	r2, [pc, #96]	; (8003044 <TIM_OC6_SetConfig+0xc8>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00b      	beq.n	8003000 <TIM_OC6_SetConfig+0x84>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a17      	ldr	r2, [pc, #92]	; (8003048 <TIM_OC6_SetConfig+0xcc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d007      	beq.n	8003000 <TIM_OC6_SetConfig+0x84>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a16      	ldr	r2, [pc, #88]	; (800304c <TIM_OC6_SetConfig+0xd0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d003      	beq.n	8003000 <TIM_OC6_SetConfig+0x84>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a15      	ldr	r2, [pc, #84]	; (8003050 <TIM_OC6_SetConfig+0xd4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d109      	bne.n	8003014 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003006:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	029b      	lsls	r3, r3, #10
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	621a      	str	r2, [r3, #32]
}
 800302e:	bf00      	nop
 8003030:	371c      	adds	r7, #28
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40012c00 	.word	0x40012c00
 8003040:	40013400 	.word	0x40013400
 8003044:	40014000 	.word	0x40014000
 8003048:	40014400 	.word	0x40014400
 800304c:	40014800 	.word	0x40014800
 8003050:	40015000 	.word	0x40015000

08003054 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	f023 0201 	bic.w	r2, r3, #1
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800307e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f023 030a 	bic.w	r3, r3, #10
 8003090:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4313      	orrs	r3, r2
 8003098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	621a      	str	r2, [r3, #32]
}
 80030a6:	bf00      	nop
 80030a8:	371c      	adds	r7, #28
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b087      	sub	sp, #28
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	f023 0210 	bic.w	r2, r3, #16
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	031b      	lsls	r3, r3, #12
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	621a      	str	r2, [r3, #32]
}
 8003106:	bf00      	nop
 8003108:	371c      	adds	r7, #28
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003112:	b480      	push	{r7}
 8003114:	b085      	sub	sp, #20
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	f043 0307 	orr.w	r3, r3, #7
 8003138:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	609a      	str	r2, [r3, #8]
}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003166:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	021a      	lsls	r2, r3, #8
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	431a      	orrs	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4313      	orrs	r3, r2
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	609a      	str	r2, [r3, #8]
}
 8003180:	bf00      	nop
 8003182:	371c      	adds	r7, #28
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e074      	b.n	800328e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a34      	ldr	r2, [pc, #208]	; (800329c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d009      	beq.n	80031e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a33      	ldr	r2, [pc, #204]	; (80032a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d004      	beq.n	80031e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a31      	ldr	r2, [pc, #196]	; (80032a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d108      	bne.n	80031f4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80031e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80031fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	4313      	orrs	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a21      	ldr	r2, [pc, #132]	; (800329c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d022      	beq.n	8003262 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003224:	d01d      	beq.n	8003262 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a1f      	ldr	r2, [pc, #124]	; (80032a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d018      	beq.n	8003262 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a1d      	ldr	r2, [pc, #116]	; (80032ac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d013      	beq.n	8003262 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a1c      	ldr	r2, [pc, #112]	; (80032b0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d00e      	beq.n	8003262 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a15      	ldr	r2, [pc, #84]	; (80032a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d009      	beq.n	8003262 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a18      	ldr	r2, [pc, #96]	; (80032b4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d004      	beq.n	8003262 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a11      	ldr	r2, [pc, #68]	; (80032a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d10c      	bne.n	800327c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003268:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	4313      	orrs	r3, r2
 8003272:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40012c00 	.word	0x40012c00
 80032a0:	40013400 	.word	0x40013400
 80032a4:	40015000 	.word	0x40015000
 80032a8:	40000400 	.word	0x40000400
 80032ac:	40000800 	.word	0x40000800
 80032b0:	40000c00 	.word	0x40000c00
 80032b4:	40014000 	.word	0x40014000

080032b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e096      	b.n	8003402 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	041b      	lsls	r3, r3, #16
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a2f      	ldr	r2, [pc, #188]	; (8003410 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d009      	beq.n	800336c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a2d      	ldr	r2, [pc, #180]	; (8003414 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d004      	beq.n	800336c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a2c      	ldr	r2, [pc, #176]	; (8003418 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d106      	bne.n	800337a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a24      	ldr	r2, [pc, #144]	; (8003410 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d009      	beq.n	8003398 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a22      	ldr	r2, [pc, #136]	; (8003414 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d004      	beq.n	8003398 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a21      	ldr	r2, [pc, #132]	; (8003418 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d12b      	bne.n	80033f0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a2:	051b      	lsls	r3, r3, #20
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a11      	ldr	r2, [pc, #68]	; (8003410 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d009      	beq.n	80033e2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a10      	ldr	r2, [pc, #64]	; (8003414 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d004      	beq.n	80033e2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a0e      	ldr	r2, [pc, #56]	; (8003418 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d106      	bne.n	80033f0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40012c00 	.word	0x40012c00
 8003414:	40013400 	.word	0x40013400
 8003418:	40015000 	.word	0x40015000

0800341c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e042      	b.n	80034b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003434:	2b00      	cmp	r3, #0
 8003436:	d106      	bne.n	8003446 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7fd fa81 	bl	8000948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2224      	movs	r2, #36	; 0x24
 800344a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0201 	bic.w	r2, r2, #1
 800345c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f82c 	bl	80034bc <UART_SetConfig>
 8003464:	4603      	mov	r3, r0
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e022      	b.n	80034b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fb1c 	bl	8003ab4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800348a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800349a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fba3 	bl	8003bf8 <UART_CheckIdleState>
 80034b2:	4603      	mov	r3, r0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c0:	b08c      	sub	sp, #48	; 0x30
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	431a      	orrs	r2, r3
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	431a      	orrs	r2, r3
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4baa      	ldr	r3, [pc, #680]	; (8003794 <UART_SetConfig+0x2d8>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034f4:	430b      	orrs	r3, r1
 80034f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a9f      	ldr	r2, [pc, #636]	; (8003798 <UART_SetConfig+0x2dc>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d004      	beq.n	8003528 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003524:	4313      	orrs	r3, r2
 8003526:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003532:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800353c:	430b      	orrs	r3, r1
 800353e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003546:	f023 010f 	bic.w	r1, r3, #15
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a90      	ldr	r2, [pc, #576]	; (800379c <UART_SetConfig+0x2e0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d125      	bne.n	80035ac <UART_SetConfig+0xf0>
 8003560:	4b8f      	ldr	r3, [pc, #572]	; (80037a0 <UART_SetConfig+0x2e4>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	2b03      	cmp	r3, #3
 800356c:	d81a      	bhi.n	80035a4 <UART_SetConfig+0xe8>
 800356e:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <UART_SetConfig+0xb8>)
 8003570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003574:	08003585 	.word	0x08003585
 8003578:	08003595 	.word	0x08003595
 800357c:	0800358d 	.word	0x0800358d
 8003580:	0800359d 	.word	0x0800359d
 8003584:	2301      	movs	r3, #1
 8003586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800358a:	e116      	b.n	80037ba <UART_SetConfig+0x2fe>
 800358c:	2302      	movs	r3, #2
 800358e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003592:	e112      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003594:	2304      	movs	r3, #4
 8003596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800359a:	e10e      	b.n	80037ba <UART_SetConfig+0x2fe>
 800359c:	2308      	movs	r3, #8
 800359e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035a2:	e10a      	b.n	80037ba <UART_SetConfig+0x2fe>
 80035a4:	2310      	movs	r3, #16
 80035a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035aa:	e106      	b.n	80037ba <UART_SetConfig+0x2fe>
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a7c      	ldr	r2, [pc, #496]	; (80037a4 <UART_SetConfig+0x2e8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d138      	bne.n	8003628 <UART_SetConfig+0x16c>
 80035b6:	4b7a      	ldr	r3, [pc, #488]	; (80037a0 <UART_SetConfig+0x2e4>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035bc:	f003 030c 	and.w	r3, r3, #12
 80035c0:	2b0c      	cmp	r3, #12
 80035c2:	d82d      	bhi.n	8003620 <UART_SetConfig+0x164>
 80035c4:	a201      	add	r2, pc, #4	; (adr r2, 80035cc <UART_SetConfig+0x110>)
 80035c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ca:	bf00      	nop
 80035cc:	08003601 	.word	0x08003601
 80035d0:	08003621 	.word	0x08003621
 80035d4:	08003621 	.word	0x08003621
 80035d8:	08003621 	.word	0x08003621
 80035dc:	08003611 	.word	0x08003611
 80035e0:	08003621 	.word	0x08003621
 80035e4:	08003621 	.word	0x08003621
 80035e8:	08003621 	.word	0x08003621
 80035ec:	08003609 	.word	0x08003609
 80035f0:	08003621 	.word	0x08003621
 80035f4:	08003621 	.word	0x08003621
 80035f8:	08003621 	.word	0x08003621
 80035fc:	08003619 	.word	0x08003619
 8003600:	2300      	movs	r3, #0
 8003602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003606:	e0d8      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003608:	2302      	movs	r3, #2
 800360a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800360e:	e0d4      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003610:	2304      	movs	r3, #4
 8003612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003616:	e0d0      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003618:	2308      	movs	r3, #8
 800361a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800361e:	e0cc      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003620:	2310      	movs	r3, #16
 8003622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003626:	e0c8      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a5e      	ldr	r2, [pc, #376]	; (80037a8 <UART_SetConfig+0x2ec>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d125      	bne.n	800367e <UART_SetConfig+0x1c2>
 8003632:	4b5b      	ldr	r3, [pc, #364]	; (80037a0 <UART_SetConfig+0x2e4>)
 8003634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003638:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800363c:	2b30      	cmp	r3, #48	; 0x30
 800363e:	d016      	beq.n	800366e <UART_SetConfig+0x1b2>
 8003640:	2b30      	cmp	r3, #48	; 0x30
 8003642:	d818      	bhi.n	8003676 <UART_SetConfig+0x1ba>
 8003644:	2b20      	cmp	r3, #32
 8003646:	d00a      	beq.n	800365e <UART_SetConfig+0x1a2>
 8003648:	2b20      	cmp	r3, #32
 800364a:	d814      	bhi.n	8003676 <UART_SetConfig+0x1ba>
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <UART_SetConfig+0x19a>
 8003650:	2b10      	cmp	r3, #16
 8003652:	d008      	beq.n	8003666 <UART_SetConfig+0x1aa>
 8003654:	e00f      	b.n	8003676 <UART_SetConfig+0x1ba>
 8003656:	2300      	movs	r3, #0
 8003658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800365c:	e0ad      	b.n	80037ba <UART_SetConfig+0x2fe>
 800365e:	2302      	movs	r3, #2
 8003660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003664:	e0a9      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003666:	2304      	movs	r3, #4
 8003668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800366c:	e0a5      	b.n	80037ba <UART_SetConfig+0x2fe>
 800366e:	2308      	movs	r3, #8
 8003670:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003674:	e0a1      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003676:	2310      	movs	r3, #16
 8003678:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800367c:	e09d      	b.n	80037ba <UART_SetConfig+0x2fe>
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a4a      	ldr	r2, [pc, #296]	; (80037ac <UART_SetConfig+0x2f0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d125      	bne.n	80036d4 <UART_SetConfig+0x218>
 8003688:	4b45      	ldr	r3, [pc, #276]	; (80037a0 <UART_SetConfig+0x2e4>)
 800368a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003692:	2bc0      	cmp	r3, #192	; 0xc0
 8003694:	d016      	beq.n	80036c4 <UART_SetConfig+0x208>
 8003696:	2bc0      	cmp	r3, #192	; 0xc0
 8003698:	d818      	bhi.n	80036cc <UART_SetConfig+0x210>
 800369a:	2b80      	cmp	r3, #128	; 0x80
 800369c:	d00a      	beq.n	80036b4 <UART_SetConfig+0x1f8>
 800369e:	2b80      	cmp	r3, #128	; 0x80
 80036a0:	d814      	bhi.n	80036cc <UART_SetConfig+0x210>
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <UART_SetConfig+0x1f0>
 80036a6:	2b40      	cmp	r3, #64	; 0x40
 80036a8:	d008      	beq.n	80036bc <UART_SetConfig+0x200>
 80036aa:	e00f      	b.n	80036cc <UART_SetConfig+0x210>
 80036ac:	2300      	movs	r3, #0
 80036ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036b2:	e082      	b.n	80037ba <UART_SetConfig+0x2fe>
 80036b4:	2302      	movs	r3, #2
 80036b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ba:	e07e      	b.n	80037ba <UART_SetConfig+0x2fe>
 80036bc:	2304      	movs	r3, #4
 80036be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036c2:	e07a      	b.n	80037ba <UART_SetConfig+0x2fe>
 80036c4:	2308      	movs	r3, #8
 80036c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ca:	e076      	b.n	80037ba <UART_SetConfig+0x2fe>
 80036cc:	2310      	movs	r3, #16
 80036ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036d2:	e072      	b.n	80037ba <UART_SetConfig+0x2fe>
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a35      	ldr	r2, [pc, #212]	; (80037b0 <UART_SetConfig+0x2f4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d12a      	bne.n	8003734 <UART_SetConfig+0x278>
 80036de:	4b30      	ldr	r3, [pc, #192]	; (80037a0 <UART_SetConfig+0x2e4>)
 80036e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ec:	d01a      	beq.n	8003724 <UART_SetConfig+0x268>
 80036ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036f2:	d81b      	bhi.n	800372c <UART_SetConfig+0x270>
 80036f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f8:	d00c      	beq.n	8003714 <UART_SetConfig+0x258>
 80036fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036fe:	d815      	bhi.n	800372c <UART_SetConfig+0x270>
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <UART_SetConfig+0x250>
 8003704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003708:	d008      	beq.n	800371c <UART_SetConfig+0x260>
 800370a:	e00f      	b.n	800372c <UART_SetConfig+0x270>
 800370c:	2300      	movs	r3, #0
 800370e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003712:	e052      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003714:	2302      	movs	r3, #2
 8003716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800371a:	e04e      	b.n	80037ba <UART_SetConfig+0x2fe>
 800371c:	2304      	movs	r3, #4
 800371e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003722:	e04a      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003724:	2308      	movs	r3, #8
 8003726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800372a:	e046      	b.n	80037ba <UART_SetConfig+0x2fe>
 800372c:	2310      	movs	r3, #16
 800372e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003732:	e042      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a17      	ldr	r2, [pc, #92]	; (8003798 <UART_SetConfig+0x2dc>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d13a      	bne.n	80037b4 <UART_SetConfig+0x2f8>
 800373e:	4b18      	ldr	r3, [pc, #96]	; (80037a0 <UART_SetConfig+0x2e4>)
 8003740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003744:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003748:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800374c:	d01a      	beq.n	8003784 <UART_SetConfig+0x2c8>
 800374e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003752:	d81b      	bhi.n	800378c <UART_SetConfig+0x2d0>
 8003754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003758:	d00c      	beq.n	8003774 <UART_SetConfig+0x2b8>
 800375a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800375e:	d815      	bhi.n	800378c <UART_SetConfig+0x2d0>
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <UART_SetConfig+0x2b0>
 8003764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003768:	d008      	beq.n	800377c <UART_SetConfig+0x2c0>
 800376a:	e00f      	b.n	800378c <UART_SetConfig+0x2d0>
 800376c:	2300      	movs	r3, #0
 800376e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003772:	e022      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003774:	2302      	movs	r3, #2
 8003776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800377a:	e01e      	b.n	80037ba <UART_SetConfig+0x2fe>
 800377c:	2304      	movs	r3, #4
 800377e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003782:	e01a      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003784:	2308      	movs	r3, #8
 8003786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800378a:	e016      	b.n	80037ba <UART_SetConfig+0x2fe>
 800378c:	2310      	movs	r3, #16
 800378e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003792:	e012      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003794:	cfff69f3 	.word	0xcfff69f3
 8003798:	40008000 	.word	0x40008000
 800379c:	40013800 	.word	0x40013800
 80037a0:	40021000 	.word	0x40021000
 80037a4:	40004400 	.word	0x40004400
 80037a8:	40004800 	.word	0x40004800
 80037ac:	40004c00 	.word	0x40004c00
 80037b0:	40005000 	.word	0x40005000
 80037b4:	2310      	movs	r3, #16
 80037b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4aae      	ldr	r2, [pc, #696]	; (8003a78 <UART_SetConfig+0x5bc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	f040 8097 	bne.w	80038f4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d823      	bhi.n	8003816 <UART_SetConfig+0x35a>
 80037ce:	a201      	add	r2, pc, #4	; (adr r2, 80037d4 <UART_SetConfig+0x318>)
 80037d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d4:	080037f9 	.word	0x080037f9
 80037d8:	08003817 	.word	0x08003817
 80037dc:	08003801 	.word	0x08003801
 80037e0:	08003817 	.word	0x08003817
 80037e4:	08003807 	.word	0x08003807
 80037e8:	08003817 	.word	0x08003817
 80037ec:	08003817 	.word	0x08003817
 80037f0:	08003817 	.word	0x08003817
 80037f4:	0800380f 	.word	0x0800380f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037f8:	f7fe fab8 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 80037fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037fe:	e010      	b.n	8003822 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003800:	4b9e      	ldr	r3, [pc, #632]	; (8003a7c <UART_SetConfig+0x5c0>)
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003804:	e00d      	b.n	8003822 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003806:	f7fe fa43 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 800380a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800380c:	e009      	b.n	8003822 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800380e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003814:	e005      	b.n	8003822 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003816:	2300      	movs	r3, #0
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003820:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 8130 	beq.w	8003a8a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	4a94      	ldr	r2, [pc, #592]	; (8003a80 <UART_SetConfig+0x5c4>)
 8003830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003834:	461a      	mov	r2, r3
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	fbb3 f3f2 	udiv	r3, r3, r2
 800383c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4413      	add	r3, r2
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	429a      	cmp	r2, r3
 800384c:	d305      	bcc.n	800385a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	429a      	cmp	r2, r3
 8003858:	d903      	bls.n	8003862 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003860:	e113      	b.n	8003a8a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	2200      	movs	r2, #0
 8003866:	60bb      	str	r3, [r7, #8]
 8003868:	60fa      	str	r2, [r7, #12]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	4a84      	ldr	r2, [pc, #528]	; (8003a80 <UART_SetConfig+0x5c4>)
 8003870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003874:	b29b      	uxth	r3, r3
 8003876:	2200      	movs	r2, #0
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003880:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003884:	f7fc fcc8 	bl	8000218 <__aeabi_uldivmod>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4610      	mov	r0, r2
 800388e:	4619      	mov	r1, r3
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	020b      	lsls	r3, r1, #8
 800389a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800389e:	0202      	lsls	r2, r0, #8
 80038a0:	6979      	ldr	r1, [r7, #20]
 80038a2:	6849      	ldr	r1, [r1, #4]
 80038a4:	0849      	lsrs	r1, r1, #1
 80038a6:	2000      	movs	r0, #0
 80038a8:	460c      	mov	r4, r1
 80038aa:	4605      	mov	r5, r0
 80038ac:	eb12 0804 	adds.w	r8, r2, r4
 80038b0:	eb43 0905 	adc.w	r9, r3, r5
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	469a      	mov	sl, r3
 80038bc:	4693      	mov	fp, r2
 80038be:	4652      	mov	r2, sl
 80038c0:	465b      	mov	r3, fp
 80038c2:	4640      	mov	r0, r8
 80038c4:	4649      	mov	r1, r9
 80038c6:	f7fc fca7 	bl	8000218 <__aeabi_uldivmod>
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	4613      	mov	r3, r2
 80038d0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038d8:	d308      	bcc.n	80038ec <UART_SetConfig+0x430>
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038e0:	d204      	bcs.n	80038ec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6a3a      	ldr	r2, [r7, #32]
 80038e8:	60da      	str	r2, [r3, #12]
 80038ea:	e0ce      	b.n	8003a8a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80038f2:	e0ca      	b.n	8003a8a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038fc:	d166      	bne.n	80039cc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80038fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003902:	2b08      	cmp	r3, #8
 8003904:	d827      	bhi.n	8003956 <UART_SetConfig+0x49a>
 8003906:	a201      	add	r2, pc, #4	; (adr r2, 800390c <UART_SetConfig+0x450>)
 8003908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390c:	08003931 	.word	0x08003931
 8003910:	08003939 	.word	0x08003939
 8003914:	08003941 	.word	0x08003941
 8003918:	08003957 	.word	0x08003957
 800391c:	08003947 	.word	0x08003947
 8003920:	08003957 	.word	0x08003957
 8003924:	08003957 	.word	0x08003957
 8003928:	08003957 	.word	0x08003957
 800392c:	0800394f 	.word	0x0800394f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003930:	f7fe fa1c 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 8003934:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003936:	e014      	b.n	8003962 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003938:	f7fe fa2e 	bl	8001d98 <HAL_RCC_GetPCLK2Freq>
 800393c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800393e:	e010      	b.n	8003962 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003940:	4b4e      	ldr	r3, [pc, #312]	; (8003a7c <UART_SetConfig+0x5c0>)
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003944:	e00d      	b.n	8003962 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003946:	f7fe f9a3 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 800394a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800394c:	e009      	b.n	8003962 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800394e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003952:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003954:	e005      	b.n	8003962 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003960:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8090 	beq.w	8003a8a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	4a44      	ldr	r2, [pc, #272]	; (8003a80 <UART_SetConfig+0x5c4>)
 8003970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003974:	461a      	mov	r2, r3
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	fbb3 f3f2 	udiv	r3, r3, r2
 800397c:	005a      	lsls	r2, r3, #1
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	085b      	lsrs	r3, r3, #1
 8003984:	441a      	add	r2, r3
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	fbb2 f3f3 	udiv	r3, r2, r3
 800398e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	2b0f      	cmp	r3, #15
 8003994:	d916      	bls.n	80039c4 <UART_SetConfig+0x508>
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399c:	d212      	bcs.n	80039c4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	f023 030f 	bic.w	r3, r3, #15
 80039a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	085b      	lsrs	r3, r3, #1
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	8bfb      	ldrh	r3, [r7, #30]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	8bfa      	ldrh	r2, [r7, #30]
 80039c0:	60da      	str	r2, [r3, #12]
 80039c2:	e062      	b.n	8003a8a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80039ca:	e05e      	b.n	8003a8a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d828      	bhi.n	8003a26 <UART_SetConfig+0x56a>
 80039d4:	a201      	add	r2, pc, #4	; (adr r2, 80039dc <UART_SetConfig+0x520>)
 80039d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039da:	bf00      	nop
 80039dc:	08003a01 	.word	0x08003a01
 80039e0:	08003a09 	.word	0x08003a09
 80039e4:	08003a11 	.word	0x08003a11
 80039e8:	08003a27 	.word	0x08003a27
 80039ec:	08003a17 	.word	0x08003a17
 80039f0:	08003a27 	.word	0x08003a27
 80039f4:	08003a27 	.word	0x08003a27
 80039f8:	08003a27 	.word	0x08003a27
 80039fc:	08003a1f 	.word	0x08003a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a00:	f7fe f9b4 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 8003a04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a06:	e014      	b.n	8003a32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a08:	f7fe f9c6 	bl	8001d98 <HAL_RCC_GetPCLK2Freq>
 8003a0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a0e:	e010      	b.n	8003a32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a10:	4b1a      	ldr	r3, [pc, #104]	; (8003a7c <UART_SetConfig+0x5c0>)
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a14:	e00d      	b.n	8003a32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a16:	f7fe f93b 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8003a1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a1c:	e009      	b.n	8003a32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a24:	e005      	b.n	8003a32 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003a30:	bf00      	nop
    }

    if (pclk != 0U)
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d028      	beq.n	8003a8a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	4a10      	ldr	r2, [pc, #64]	; (8003a80 <UART_SetConfig+0x5c4>)
 8003a3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a42:	461a      	mov	r2, r3
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	085b      	lsrs	r3, r3, #1
 8003a50:	441a      	add	r2, r3
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	2b0f      	cmp	r3, #15
 8003a60:	d910      	bls.n	8003a84 <UART_SetConfig+0x5c8>
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a68:	d20c      	bcs.n	8003a84 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	60da      	str	r2, [r3, #12]
 8003a74:	e009      	b.n	8003a8a <UART_SetConfig+0x5ce>
 8003a76:	bf00      	nop
 8003a78:	40008000 	.word	0x40008000
 8003a7c:	00f42400 	.word	0x00f42400
 8003a80:	080040ac 	.word	0x080040ac
      }
      else
      {
        ret = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003aa6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3730      	adds	r7, #48	; 0x30
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003ab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b48:	f003 0310 	and.w	r3, r3, #16
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01a      	beq.n	8003bca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bb2:	d10a      	bne.n	8003bca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	605a      	str	r2, [r3, #4]
  }
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c08:	f7fd f83e 	bl	8000c88 <HAL_GetTick>
 8003c0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d10e      	bne.n	8003c3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f82f 	bl	8003c8e <UART_WaitOnFlagUntilTimeout>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e025      	b.n	8003c86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d10e      	bne.n	8003c66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f819 	bl	8003c8e <UART_WaitOnFlagUntilTimeout>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e00f      	b.n	8003c86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b09c      	sub	sp, #112	; 0x70
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	603b      	str	r3, [r7, #0]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c9e:	e0a9      	b.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ca6:	f000 80a5 	beq.w	8003df4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003caa:	f7fc ffed 	bl	8000c88 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d302      	bcc.n	8003cc0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003cba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d140      	bne.n	8003d42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc8:	e853 3f00 	ldrex	r3, [r3]
 8003ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cd4:	667b      	str	r3, [r7, #100]	; 0x64
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ce0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ce4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ce6:	e841 2300 	strex	r3, r2, [r1]
 8003cea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1e6      	bne.n	8003cc0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3308      	adds	r3, #8
 8003cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cfc:	e853 3f00 	ldrex	r3, [r3]
 8003d00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d04:	f023 0301 	bic.w	r3, r3, #1
 8003d08:	663b      	str	r3, [r7, #96]	; 0x60
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3308      	adds	r3, #8
 8003d10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d12:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1e5      	bne.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e069      	b.n	8003e16 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d051      	beq.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d5e:	d149      	bne.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d88:	637b      	str	r3, [r7, #52]	; 0x34
 8003d8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e6      	bne.n	8003d6a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3308      	adds	r3, #8
 8003da2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	e853 3f00 	ldrex	r3, [r3]
 8003daa:	613b      	str	r3, [r7, #16]
   return(result);
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f023 0301 	bic.w	r3, r3, #1
 8003db2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3308      	adds	r3, #8
 8003dba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003dbc:	623a      	str	r2, [r7, #32]
 8003dbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc0:	69f9      	ldr	r1, [r7, #28]
 8003dc2:	6a3a      	ldr	r2, [r7, #32]
 8003dc4:	e841 2300 	strex	r3, r2, [r1]
 8003dc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e5      	bne.n	8003d9c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e010      	b.n	8003e16 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	69da      	ldr	r2, [r3, #28]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	bf0c      	ite	eq
 8003e04:	2301      	moveq	r3, #1
 8003e06:	2300      	movne	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	f43f af46 	beq.w	8003ca0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3770      	adds	r7, #112	; 0x70
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b085      	sub	sp, #20
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <HAL_UARTEx_DisableFifoMode+0x16>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e027      	b.n	8003e84 <HAL_UARTEx_DisableFifoMode+0x66>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2224      	movs	r2, #36	; 0x24
 8003e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0201 	bic.w	r2, r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003e62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e02d      	b.n	8003f04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2224      	movs	r2, #36	; 0x24
 8003eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0201 	bic.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f84f 	bl	8003f88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003f20:	2302      	movs	r3, #2
 8003f22:	e02d      	b.n	8003f80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2224      	movs	r2, #36	; 0x24
 8003f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0201 	bic.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f811 	bl	8003f88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d108      	bne.n	8003faa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003fa8:	e031      	b.n	800400e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003faa:	2308      	movs	r3, #8
 8003fac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003fae:	2308      	movs	r3, #8
 8003fb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	0e5b      	lsrs	r3, r3, #25
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	0f5b      	lsrs	r3, r3, #29
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003fd2:	7bbb      	ldrb	r3, [r7, #14]
 8003fd4:	7b3a      	ldrb	r2, [r7, #12]
 8003fd6:	4911      	ldr	r1, [pc, #68]	; (800401c <UARTEx_SetNbDataToProcess+0x94>)
 8003fd8:	5c8a      	ldrb	r2, [r1, r2]
 8003fda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003fde:	7b3a      	ldrb	r2, [r7, #12]
 8003fe0:	490f      	ldr	r1, [pc, #60]	; (8004020 <UARTEx_SetNbDataToProcess+0x98>)
 8003fe2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003fe4:	fb93 f3f2 	sdiv	r3, r3, r2
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	7b7a      	ldrb	r2, [r7, #13]
 8003ff4:	4909      	ldr	r1, [pc, #36]	; (800401c <UARTEx_SetNbDataToProcess+0x94>)
 8003ff6:	5c8a      	ldrb	r2, [r1, r2]
 8003ff8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003ffc:	7b7a      	ldrb	r2, [r7, #13]
 8003ffe:	4908      	ldr	r1, [pc, #32]	; (8004020 <UARTEx_SetNbDataToProcess+0x98>)
 8004000:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004002:	fb93 f3f2 	sdiv	r3, r3, r2
 8004006:	b29a      	uxth	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800400e:	bf00      	nop
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	080040c4 	.word	0x080040c4
 8004020:	080040cc 	.word	0x080040cc

08004024 <memset>:
 8004024:	4402      	add	r2, r0
 8004026:	4603      	mov	r3, r0
 8004028:	4293      	cmp	r3, r2
 800402a:	d100      	bne.n	800402e <memset+0xa>
 800402c:	4770      	bx	lr
 800402e:	f803 1b01 	strb.w	r1, [r3], #1
 8004032:	e7f9      	b.n	8004028 <memset+0x4>

08004034 <__libc_init_array>:
 8004034:	b570      	push	{r4, r5, r6, lr}
 8004036:	4d0d      	ldr	r5, [pc, #52]	; (800406c <__libc_init_array+0x38>)
 8004038:	4c0d      	ldr	r4, [pc, #52]	; (8004070 <__libc_init_array+0x3c>)
 800403a:	1b64      	subs	r4, r4, r5
 800403c:	10a4      	asrs	r4, r4, #2
 800403e:	2600      	movs	r6, #0
 8004040:	42a6      	cmp	r6, r4
 8004042:	d109      	bne.n	8004058 <__libc_init_array+0x24>
 8004044:	4d0b      	ldr	r5, [pc, #44]	; (8004074 <__libc_init_array+0x40>)
 8004046:	4c0c      	ldr	r4, [pc, #48]	; (8004078 <__libc_init_array+0x44>)
 8004048:	f000 f818 	bl	800407c <_init>
 800404c:	1b64      	subs	r4, r4, r5
 800404e:	10a4      	asrs	r4, r4, #2
 8004050:	2600      	movs	r6, #0
 8004052:	42a6      	cmp	r6, r4
 8004054:	d105      	bne.n	8004062 <__libc_init_array+0x2e>
 8004056:	bd70      	pop	{r4, r5, r6, pc}
 8004058:	f855 3b04 	ldr.w	r3, [r5], #4
 800405c:	4798      	blx	r3
 800405e:	3601      	adds	r6, #1
 8004060:	e7ee      	b.n	8004040 <__libc_init_array+0xc>
 8004062:	f855 3b04 	ldr.w	r3, [r5], #4
 8004066:	4798      	blx	r3
 8004068:	3601      	adds	r6, #1
 800406a:	e7f2      	b.n	8004052 <__libc_init_array+0x1e>
 800406c:	080040dc 	.word	0x080040dc
 8004070:	080040dc 	.word	0x080040dc
 8004074:	080040dc 	.word	0x080040dc
 8004078:	080040e0 	.word	0x080040e0

0800407c <_init>:
 800407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407e:	bf00      	nop
 8004080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004082:	bc08      	pop	{r3}
 8004084:	469e      	mov	lr, r3
 8004086:	4770      	bx	lr

08004088 <_fini>:
 8004088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408a:	bf00      	nop
 800408c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408e:	bc08      	pop	{r3}
 8004090:	469e      	mov	lr, r3
 8004092:	4770      	bx	lr
