
NUCLEO-G431RB_PWN_IN_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093d0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  080095b0  080095b0  000195b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099f4  080099f4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080099f4  080099f4  000199f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099fc  080099fc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099fc  080099fc  000199fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a00  08009a00  00019a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  200001dc  08009be0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  08009be0  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a28  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002804  00000000  00000000  00034c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  00037438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  00038560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f089  00000000  00000000  00039590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135e6  00000000  00000000  00058619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c784d  00000000  00000000  0006bbff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013344c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a2c  00000000  00000000  0013349c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009598 	.word	0x08009598

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	08009598 	.word	0x08009598

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <HAL_TIM_IC_CaptureCallback>:
uint32_t IcDiffChannel1, IcDiffChannel2, IcDiffDeadTime12, IcDiffDeadTime21 = 0;
int IsFirstCapturedChannel1,IsFirstCapturedChannel2 = 0;
// Frequency
float frequency1, frequency2 = 0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7f1b      	ldrb	r3, [r3, #28]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d13f      	bne.n	8000f8c <HAL_TIM_IC_CaptureCallback+0x90>
		if(IsFirstCapturedChannel1==0){
 8000f0c:	4b43      	ldr	r3, [pc, #268]	; (800101c <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10a      	bne.n	8000f2a <HAL_TIM_IC_CaptureCallback+0x2e>
			IcChannel1Up = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f14:	2100      	movs	r1, #0
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f003 f9a2 	bl	8004260 <HAL_TIM_ReadCapturedValue>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	4a40      	ldr	r2, [pc, #256]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f20:	6013      	str	r3, [r2, #0]
			IsFirstCapturedChannel1 = 1;
 8000f22:	4b3e      	ldr	r3, [pc, #248]	; (800101c <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	e030      	b.n	8000f8c <HAL_TIM_IC_CaptureCallback+0x90>
		}
		else{
			IcChannel1Down = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f003 f997 	bl	8004260 <HAL_TIM_ReadCapturedValue>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4a3b      	ldr	r2, [pc, #236]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f36:	6013      	str	r3, [r2, #0]
			if(IcChannel1Down > IcChannel1Up){
 8000f38:	4b3a      	ldr	r3, [pc, #232]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b38      	ldr	r3, [pc, #224]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d907      	bls.n	8000f54 <HAL_TIM_IC_CaptureCallback+0x58>
				IcDiffChannel1 = IcChannel1Down-IcChannel1Up;
 8000f44:	4b37      	ldr	r3, [pc, #220]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b35      	ldr	r3, [pc, #212]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	4a36      	ldr	r2, [pc, #216]	; (8001028 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	e009      	b.n	8000f68 <HAL_TIM_IC_CaptureCallback+0x6c>
			}
			else{
				IcDiffChannel1 = (0xFFFF- IcChannel1Up) + IcChannel1Down;
 8000f54:	4b33      	ldr	r3, [pc, #204]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b31      	ldr	r3, [pc, #196]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000f62:	33ff      	adds	r3, #255	; 0xff
 8000f64:	4a30      	ldr	r2, [pc, #192]	; (8001028 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f66:	6013      	str	r3, [r2, #0]
			}

			float refClk = 1000000;
 8000f68:	4b30      	ldr	r3, [pc, #192]	; (800102c <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f6a:	60fb      	str	r3, [r7, #12]

			frequency1 = refClk/IcDiffChannel1;
 8000f6c:	4b2e      	ldr	r3, [pc, #184]	; (8001028 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	ee07 3a90 	vmov	s15, r3
 8000f74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f78:	edd7 6a03 	vldr	s13, [r7, #12]
 8000f7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f80:	4b2b      	ldr	r3, [pc, #172]	; (8001030 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f82:	edc3 7a00 	vstr	s15, [r3]

			//__HAL_TIM_SET_COUNTER(htim,0);
			IsFirstCapturedChannel1 = 0;
 8000f86:	4b25      	ldr	r3, [pc, #148]	; (800101c <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]

		}
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7f1b      	ldrb	r3, [r3, #28]
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d13f      	bne.n	8001014 <HAL_TIM_IC_CaptureCallback+0x118>
		if(IsFirstCapturedChannel2==0){
 8000f94:	4b27      	ldr	r3, [pc, #156]	; (8001034 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d10a      	bne.n	8000fb2 <HAL_TIM_IC_CaptureCallback+0xb6>
			IcChannel2Down = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000f9c:	2104      	movs	r1, #4
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f003 f95e 	bl	8004260 <HAL_TIM_ReadCapturedValue>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4a24      	ldr	r2, [pc, #144]	; (8001038 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000fa8:	6013      	str	r3, [r2, #0]
			IsFirstCapturedChannel2 = 1;
 8000faa:	4b22      	ldr	r3, [pc, #136]	; (8001034 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	601a      	str	r2, [r3, #0]

		}
	}


}
 8000fb0:	e030      	b.n	8001014 <HAL_TIM_IC_CaptureCallback+0x118>
			IcChannel2Up = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000fb2:	2104      	movs	r1, #4
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f003 f953 	bl	8004260 <HAL_TIM_ReadCapturedValue>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4a1f      	ldr	r2, [pc, #124]	; (800103c <HAL_TIM_IC_CaptureCallback+0x140>)
 8000fbe:	6013      	str	r3, [r2, #0]
			if(IcChannel2Down > IcChannel2Up){
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	; (800103c <HAL_TIM_IC_CaptureCallback+0x140>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d907      	bls.n	8000fdc <HAL_TIM_IC_CaptureCallback+0xe0>
				IcDiffChannel2 = IcChannel2Down-IcChannel2Up;
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <HAL_TIM_IC_CaptureCallback+0x140>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	4a1a      	ldr	r2, [pc, #104]	; (8001040 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	e009      	b.n	8000ff0 <HAL_TIM_IC_CaptureCallback+0xf4>
				IcDiffChannel2 = (0xFFFF- IcChannel2Up) + IcChannel2Down;
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <HAL_TIM_IC_CaptureCallback+0x140>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000fea:	33ff      	adds	r3, #255	; 0xff
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000fee:	6013      	str	r3, [r2, #0]
			float refClk = 1000000;
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ff2:	60bb      	str	r3, [r7, #8]
			frequency2 = refClk/IcDiffChannel2;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	ee07 3a90 	vmov	s15, r3
 8000ffc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001000:	edd7 6a02 	vldr	s13, [r7, #8]
 8001004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001008:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <HAL_TIM_IC_CaptureCallback+0x148>)
 800100a:	edc3 7a00 	vstr	s15, [r3]
			IsFirstCapturedChannel2 = 0;
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	2000037c 	.word	0x2000037c
 8001020:	20000364 	.word	0x20000364
 8001024:	20000368 	.word	0x20000368
 8001028:	20000374 	.word	0x20000374
 800102c:	49742400 	.word	0x49742400
 8001030:	20000384 	.word	0x20000384
 8001034:	20000380 	.word	0x20000380
 8001038:	20000370 	.word	0x20000370
 800103c:	2000036c 	.word	0x2000036c
 8001040:	20000378 	.word	0x20000378
 8001044:	20000388 	.word	0x20000388

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	b5b0      	push	{r4, r5, r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104e:	f000 fd78 	bl	8001b42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001052:	f000 f855 	bl	8001100 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001056:	f000 fa15 	bl	8001484 <MX_GPIO_Init>
  MX_TIM8_Init();
 800105a:	f000 f917 	bl	800128c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800105e:	f000 f9c5 	bl	80013ec <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001062:	f000 f897 	bl	8001194 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,300);
 8001066:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <main+0x98>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800106e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001070:	2100      	movs	r1, #0
 8001072:	481b      	ldr	r0, [pc, #108]	; (80010e0 <main+0x98>)
 8001074:	f002 fa26 	bl	80034c4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8001078:	2100      	movs	r1, #0
 800107a:	4819      	ldr	r0, [pc, #100]	; (80010e0 <main+0x98>)
 800107c:	f003 feb8 	bl	8004df0 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001080:	2100      	movs	r1, #0
 8001082:	4818      	ldr	r0, [pc, #96]	; (80010e4 <main+0x9c>)
 8001084:	f002 fb80 	bl	8003788 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001088:	2104      	movs	r1, #4
 800108a:	4816      	ldr	r0, [pc, #88]	; (80010e4 <main+0x9c>)
 800108c:	f002 fb7c 	bl	8003788 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(countPrint==0){
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <main+0xa0>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d11e      	bne.n	80010d6 <main+0x8e>
			int printSize;
			printSize = snprintf(uartTxBuffer, uartTxBufferSize,"Frequency = %5.1f,Frequency = %5.1f,\r\n",frequency1,frequency2);
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <main+0xa4>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fa7b 	bl	8000598 <__aeabi_f2d>
 80010a2:	4604      	mov	r4, r0
 80010a4:	460d      	mov	r5, r1
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <main+0xa8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa74 	bl	8000598 <__aeabi_f2d>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80010b8:	e9cd 4500 	strd	r4, r5, [sp]
 80010bc:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <main+0xac>)
 80010be:	2140      	movs	r1, #64	; 0x40
 80010c0:	480d      	ldr	r0, [pc, #52]	; (80010f8 <main+0xb0>)
 80010c2:	f005 ffdb 	bl	800707c <sniprintf>
 80010c6:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, printSize, 100);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	2364      	movs	r3, #100	; 0x64
 80010ce:	490a      	ldr	r1, [pc, #40]	; (80010f8 <main+0xb0>)
 80010d0:	480a      	ldr	r0, [pc, #40]	; (80010fc <main+0xb4>)
 80010d2:	f004 f91e 	bl	8005312 <HAL_UART_Transmit>

		}
		HAL_Delay(1000);
 80010d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010da:	f000 fd69 	bl	8001bb0 <HAL_Delay>
		if(countPrint==0){
 80010de:	e7d7      	b.n	8001090 <main+0x48>
 80010e0:	20000244 	.word	0x20000244
 80010e4:	200001f8 	.word	0x200001f8
 80010e8:	20000360 	.word	0x20000360
 80010ec:	20000384 	.word	0x20000384
 80010f0:	20000388 	.word	0x20000388
 80010f4:	080095b0 	.word	0x080095b0
 80010f8:	20000320 	.word	0x20000320
 80010fc:	20000290 	.word	0x20000290

08001100 <SystemClock_Config>:
/**
  * @brief System Clock Configurat500ion
  * @retval None
  */
void SystemClock_Config(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b094      	sub	sp, #80	; 0x50
 8001104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001106:	f107 0318 	add.w	r3, r7, #24
 800110a:	2238      	movs	r2, #56	; 0x38
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f005 fb42 	bl	8006798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001122:	2000      	movs	r0, #0
 8001124:	f001 f8a0 	bl	8002268 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001128:	2301      	movs	r3, #1
 800112a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800112c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001130:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001132:	2302      	movs	r3, #2
 8001134:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001136:	2303      	movs	r3, #3
 8001138:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 800113a:	2303      	movs	r3, #3
 800113c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800113e:	2328      	movs	r3, #40	; 0x28
 8001140:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001142:	2302      	movs	r3, #2
 8001144:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001146:	2302      	movs	r3, #2
 8001148:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800114a:	2302      	movs	r3, #2
 800114c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114e:	f107 0318 	add.w	r3, r7, #24
 8001152:	4618      	mov	r0, r3
 8001154:	f001 f93c 	bl	80023d0 <HAL_RCC_OscConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800115e:	f000 f9fd 	bl	800155c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001162:	230f      	movs	r3, #15
 8001164:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001166:	2303      	movs	r3, #3
 8001168:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2104      	movs	r1, #4
 800117a:	4618      	mov	r0, r3
 800117c:	f001 fc40 	bl	8002a00 <HAL_RCC_ClockConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001186:	f000 f9e9 	bl	800155c <Error_Handler>
  }
}
 800118a:	bf00      	nop
 800118c:	3750      	adds	r7, #80	; 0x50
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08c      	sub	sp, #48	; 0x30
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119a:	f107 0320 	add.w	r3, r7, #32
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011c0:	4b31      	ldr	r3, [pc, #196]	; (8001288 <MX_TIM2_Init+0xf4>)
 80011c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 80011c8:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <MX_TIM2_Init+0xf4>)
 80011ca:	229f      	movs	r2, #159	; 0x9f
 80011cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ce:	4b2e      	ldr	r3, [pc, #184]	; (8001288 <MX_TIM2_Init+0xf4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80011d4:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <MX_TIM2_Init+0xf4>)
 80011d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011dc:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <MX_TIM2_Init+0xf4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e2:	4b29      	ldr	r3, [pc, #164]	; (8001288 <MX_TIM2_Init+0xf4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011e8:	4827      	ldr	r0, [pc, #156]	; (8001288 <MX_TIM2_Init+0xf4>)
 80011ea:	f002 f847 	bl	800327c <HAL_TIM_Base_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80011f4:	f000 f9b2 	bl	800155c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011fe:	f107 0320 	add.w	r3, r7, #32
 8001202:	4619      	mov	r1, r3
 8001204:	4820      	ldr	r0, [pc, #128]	; (8001288 <MX_TIM2_Init+0xf4>)
 8001206:	f002 ff31 	bl	800406c <HAL_TIM_ConfigClockSource>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001210:	f000 f9a4 	bl	800155c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001214:	481c      	ldr	r0, [pc, #112]	; (8001288 <MX_TIM2_Init+0xf4>)
 8001216:	f002 fa55 	bl	80036c4 <HAL_TIM_IC_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001220:	f000 f99c 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	4815      	ldr	r0, [pc, #84]	; (8001288 <MX_TIM2_Init+0xf4>)
 8001234:	f003 fe90 	bl	8004f58 <HAL_TIMEx_MasterConfigSynchronization>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800123e:	f000 f98d 	bl	800155c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001242:	230a      	movs	r3, #10
 8001244:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001246:	2301      	movs	r3, #1
 8001248:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2200      	movs	r2, #0
 8001256:	4619      	mov	r1, r3
 8001258:	480b      	ldr	r0, [pc, #44]	; (8001288 <MX_TIM2_Init+0xf4>)
 800125a:	f002 fd56 	bl	8003d0a <HAL_TIM_IC_ConfigChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001264:	f000 f97a 	bl	800155c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2204      	movs	r2, #4
 800126c:	4619      	mov	r1, r3
 800126e:	4806      	ldr	r0, [pc, #24]	; (8001288 <MX_TIM2_Init+0xf4>)
 8001270:	f002 fd4b 	bl	8003d0a <HAL_TIM_IC_ConfigChannel>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 800127a:	f000 f96f 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	3730      	adds	r7, #48	; 0x30
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200001f8 	.word	0x200001f8

0800128c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b09c      	sub	sp, #112	; 0x70
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001292:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
 80012bc:	615a      	str	r2, [r3, #20]
 80012be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2234      	movs	r2, #52	; 0x34
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f005 fa66 	bl	8006798 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80012cc:	4b45      	ldr	r3, [pc, #276]	; (80013e4 <MX_TIM8_Init+0x158>)
 80012ce:	4a46      	ldr	r2, [pc, #280]	; (80013e8 <MX_TIM8_Init+0x15c>)
 80012d0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 8-1;
 80012d2:	4b44      	ldr	r3, [pc, #272]	; (80013e4 <MX_TIM8_Init+0x158>)
 80012d4:	2207      	movs	r2, #7
 80012d6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d8:	4b42      	ldr	r3, [pc, #264]	; (80013e4 <MX_TIM8_Init+0x158>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 80012de:	4b41      	ldr	r3, [pc, #260]	; (80013e4 <MX_TIM8_Init+0x158>)
 80012e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012e4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e6:	4b3f      	ldr	r3, [pc, #252]	; (80013e4 <MX_TIM8_Init+0x158>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80012ec:	4b3d      	ldr	r3, [pc, #244]	; (80013e4 <MX_TIM8_Init+0x158>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f2:	4b3c      	ldr	r3, [pc, #240]	; (80013e4 <MX_TIM8_Init+0x158>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80012f8:	483a      	ldr	r0, [pc, #232]	; (80013e4 <MX_TIM8_Init+0x158>)
 80012fa:	f001 ffbf 	bl	800327c <HAL_TIM_Base_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001304:	f000 f92a 	bl	800155c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800130e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001312:	4619      	mov	r1, r3
 8001314:	4833      	ldr	r0, [pc, #204]	; (80013e4 <MX_TIM8_Init+0x158>)
 8001316:	f002 fea9 	bl	800406c <HAL_TIM_ConfigClockSource>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001320:	f000 f91c 	bl	800155c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001324:	482f      	ldr	r0, [pc, #188]	; (80013e4 <MX_TIM8_Init+0x158>)
 8001326:	f002 f86b 	bl	8003400 <HAL_TIM_PWM_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001330:	f000 f914 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001334:	2300      	movs	r3, #0
 8001336:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001338:	2300      	movs	r3, #0
 800133a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001340:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001344:	4619      	mov	r1, r3
 8001346:	4827      	ldr	r0, [pc, #156]	; (80013e4 <MX_TIM8_Init+0x158>)
 8001348:	f003 fe06 	bl	8004f58 <HAL_TIMEx_MasterConfigSynchronization>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001352:	f000 f903 	bl	800155c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001356:	2360      	movs	r3, #96	; 0x60
 8001358:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800135e:	2300      	movs	r3, #0
 8001360:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001362:	2300      	movs	r3, #0
 8001364:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001372:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001376:	2200      	movs	r2, #0
 8001378:	4619      	mov	r1, r3
 800137a:	481a      	ldr	r0, [pc, #104]	; (80013e4 <MX_TIM8_Init+0x158>)
 800137c:	f002 fd62 	bl	8003e44 <HAL_TIM_PWM_ConfigChannel>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8001386:	f000 f8e9 	bl	800155c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800139e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80013a8:	2300      	movs	r3, #0
 80013aa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80013ba:	2300      	movs	r3, #0
 80013bc:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	4619      	mov	r1, r3
 80013c6:	4807      	ldr	r0, [pc, #28]	; (80013e4 <MX_TIM8_Init+0x158>)
 80013c8:	f003 fe48 	bl	800505c <HAL_TIMEx_ConfigBreakDeadTime>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 80013d2:	f000 f8c3 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80013d6:	4803      	ldr	r0, [pc, #12]	; (80013e4 <MX_TIM8_Init+0x158>)
 80013d8:	f000 f946 	bl	8001668 <HAL_TIM_MspPostInit>

}
 80013dc:	bf00      	nop
 80013de:	3770      	adds	r7, #112	; 0x70
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000244 	.word	0x20000244
 80013e8:	40013400 	.word	0x40013400

080013ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f0:	4b22      	ldr	r3, [pc, #136]	; (800147c <MX_USART2_UART_Init+0x90>)
 80013f2:	4a23      	ldr	r2, [pc, #140]	; (8001480 <MX_USART2_UART_Init+0x94>)
 80013f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013f6:	4b21      	ldr	r3, [pc, #132]	; (800147c <MX_USART2_UART_Init+0x90>)
 80013f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013fe:	4b1f      	ldr	r3, [pc, #124]	; (800147c <MX_USART2_UART_Init+0x90>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001404:	4b1d      	ldr	r3, [pc, #116]	; (800147c <MX_USART2_UART_Init+0x90>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800140a:	4b1c      	ldr	r3, [pc, #112]	; (800147c <MX_USART2_UART_Init+0x90>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001410:	4b1a      	ldr	r3, [pc, #104]	; (800147c <MX_USART2_UART_Init+0x90>)
 8001412:	220c      	movs	r2, #12
 8001414:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001416:	4b19      	ldr	r3, [pc, #100]	; (800147c <MX_USART2_UART_Init+0x90>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800141c:	4b17      	ldr	r3, [pc, #92]	; (800147c <MX_USART2_UART_Init+0x90>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <MX_USART2_UART_Init+0x90>)
 8001424:	2200      	movs	r2, #0
 8001426:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <MX_USART2_UART_Init+0x90>)
 800142a:	2200      	movs	r2, #0
 800142c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <MX_USART2_UART_Init+0x90>)
 8001430:	2200      	movs	r2, #0
 8001432:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001434:	4811      	ldr	r0, [pc, #68]	; (800147c <MX_USART2_UART_Init+0x90>)
 8001436:	f003 ff1c 	bl	8005272 <HAL_UART_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001440:	f000 f88c 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001444:	2100      	movs	r1, #0
 8001446:	480d      	ldr	r0, [pc, #52]	; (800147c <MX_USART2_UART_Init+0x90>)
 8001448:	f005 f8b1 	bl	80065ae <HAL_UARTEx_SetTxFifoThreshold>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001452:	f000 f883 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001456:	2100      	movs	r1, #0
 8001458:	4808      	ldr	r0, [pc, #32]	; (800147c <MX_USART2_UART_Init+0x90>)
 800145a:	f005 f8e6 	bl	800662a <HAL_UARTEx_SetRxFifoThreshold>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001464:	f000 f87a 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <MX_USART2_UART_Init+0x90>)
 800146a:	f005 f867 	bl	800653c <HAL_UARTEx_DisableFifoMode>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001474:	f000 f872 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000290 	.word	0x20000290
 8001480:	40004400 	.word	0x40004400

08001484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	4b25      	ldr	r3, [pc, #148]	; (8001530 <MX_GPIO_Init+0xac>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a24      	ldr	r2, [pc, #144]	; (8001530 <MX_GPIO_Init+0xac>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b22      	ldr	r3, [pc, #136]	; (8001530 <MX_GPIO_Init+0xac>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014b2:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <MX_GPIO_Init+0xac>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4a1e      	ldr	r2, [pc, #120]	; (8001530 <MX_GPIO_Init+0xac>)
 80014b8:	f043 0320 	orr.w	r3, r3, #32
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <MX_GPIO_Init+0xac>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0320 	and.w	r3, r3, #32
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <MX_GPIO_Init+0xac>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	4a18      	ldr	r2, [pc, #96]	; (8001530 <MX_GPIO_Init+0xac>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <MX_GPIO_Init+0xac>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2120      	movs	r1, #32
 80014e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ea:	f000 fea5 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014fe:	f107 030c 	add.w	r3, r7, #12
 8001502:	4619      	mov	r1, r3
 8001504:	480b      	ldr	r0, [pc, #44]	; (8001534 <MX_GPIO_Init+0xb0>)
 8001506:	f000 fd15 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800150a:	2320      	movs	r3, #32
 800150c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150e:	2301      	movs	r3, #1
 8001510:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	4619      	mov	r1, r3
 8001520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001524:	f000 fd06 	bl	8001f34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001528:	bf00      	nop
 800152a:	3720      	adds	r7, #32
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40021000 	.word	0x40021000
 8001534:	48000800 	.word	0x48000800

08001538 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a04      	ldr	r2, [pc, #16]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d101      	bne.n	800154e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800154a:	f000 fb13 	bl	8001b74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40001000 	.word	0x40001000

0800155c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001560:	b672      	cpsid	i
}
 8001562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001564:	e7fe      	b.n	8001564 <Error_Handler+0x8>
	...

08001568 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_MspInit+0x44>)
 8001570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001572:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <HAL_MspInit+0x44>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6613      	str	r3, [r2, #96]	; 0x60
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_MspInit+0x44>)
 800157c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_MspInit+0x44>)
 8001588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158a:	4a08      	ldr	r2, [pc, #32]	; (80015ac <HAL_MspInit+0x44>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001590:	6593      	str	r3, [r2, #88]	; 0x58
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_MspInit+0x44>)
 8001594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800159e:	f000 ff07 	bl	80023b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000

080015b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015d0:	d131      	bne.n	8001636 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015d2:	4b23      	ldr	r3, [pc, #140]	; (8001660 <HAL_TIM_Base_MspInit+0xb0>)
 80015d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d6:	4a22      	ldr	r2, [pc, #136]	; (8001660 <HAL_TIM_Base_MspInit+0xb0>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6593      	str	r3, [r2, #88]	; 0x58
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <HAL_TIM_Base_MspInit+0xb0>)
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <HAL_TIM_Base_MspInit+0xb0>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	4a1c      	ldr	r2, [pc, #112]	; (8001660 <HAL_TIM_Base_MspInit+0xb0>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <HAL_TIM_Base_MspInit+0xb0>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001602:	2303      	movs	r3, #3
 8001604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001612:	2301      	movs	r3, #1
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001620:	f000 fc88 	bl	8001f34 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001624:	2200      	movs	r2, #0
 8001626:	2100      	movs	r1, #0
 8001628:	201c      	movs	r0, #28
 800162a:	f000 fb9b 	bl	8001d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800162e:	201c      	movs	r0, #28
 8001630:	f000 fbb2 	bl	8001d98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001634:	e010      	b.n	8001658 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM8)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <HAL_TIM_Base_MspInit+0xb4>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d10b      	bne.n	8001658 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001640:	4b07      	ldr	r3, [pc, #28]	; (8001660 <HAL_TIM_Base_MspInit+0xb0>)
 8001642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001644:	4a06      	ldr	r2, [pc, #24]	; (8001660 <HAL_TIM_Base_MspInit+0xb0>)
 8001646:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800164a:	6613      	str	r3, [r2, #96]	; 0x60
 800164c:	4b04      	ldr	r3, [pc, #16]	; (8001660 <HAL_TIM_Base_MspInit+0xb0>)
 800164e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	68bb      	ldr	r3, [r7, #8]
}
 8001658:	bf00      	nop
 800165a:	3728      	adds	r7, #40	; 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40021000 	.word	0x40021000
 8001664:	40013400 	.word	0x40013400

08001668 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a20      	ldr	r2, [pc, #128]	; (8001708 <HAL_TIM_MspPostInit+0xa0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d13a      	bne.n	8001700 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <HAL_TIM_MspPostInit+0xa4>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	4a1f      	ldr	r2, [pc, #124]	; (800170c <HAL_TIM_MspPostInit+0xa4>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001696:	4b1d      	ldr	r3, [pc, #116]	; (800170c <HAL_TIM_MspPostInit+0xa4>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	4b1a      	ldr	r3, [pc, #104]	; (800170c <HAL_TIM_MspPostInit+0xa4>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	4a19      	ldr	r2, [pc, #100]	; (800170c <HAL_TIM_MspPostInit+0xa4>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ae:	4b17      	ldr	r3, [pc, #92]	; (800170c <HAL_TIM_MspPostInit+0xa4>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA15     ------> TIM8_CH1
    PC10     ------> TIM8_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 80016cc:	2302      	movs	r3, #2
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016da:	f000 fc2b 	bl	8001f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80016f0:	2304      	movs	r3, #4
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4619      	mov	r1, r3
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <HAL_TIM_MspPostInit+0xa8>)
 80016fc:	f000 fc1a 	bl	8001f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001700:	bf00      	nop
 8001702:	3728      	adds	r7, #40	; 0x28
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40013400 	.word	0x40013400
 800170c:	40021000 	.word	0x40021000
 8001710:	48000800 	.word	0x48000800

08001714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b09a      	sub	sp, #104	; 0x68
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	2244      	movs	r2, #68	; 0x44
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f005 f82f 	bl	8006798 <memset>
  if(huart->Instance==USART2)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a23      	ldr	r2, [pc, #140]	; (80017cc <HAL_UART_MspInit+0xb8>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d13e      	bne.n	80017c2 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001744:	2302      	movs	r3, #2
 8001746:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001748:	2300      	movs	r3, #0
 800174a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	4618      	mov	r0, r3
 8001752:	f001 fba3 	bl	8002e9c <HAL_RCCEx_PeriphCLKConfig>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800175c:	f7ff fefe 	bl	800155c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <HAL_UART_MspInit+0xbc>)
 8001762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001764:	4a1a      	ldr	r2, [pc, #104]	; (80017d0 <HAL_UART_MspInit+0xbc>)
 8001766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800176a:	6593      	str	r3, [r2, #88]	; 0x58
 800176c:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <HAL_UART_MspInit+0xbc>)
 800176e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_UART_MspInit+0xbc>)
 800177a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177c:	4a14      	ldr	r2, [pc, #80]	; (80017d0 <HAL_UART_MspInit+0xbc>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_UART_MspInit+0xbc>)
 8001786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001790:	230c      	movs	r3, #12
 8001792:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2300      	movs	r3, #0
 800179e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017a0:	2307      	movs	r3, #7
 80017a2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017a8:	4619      	mov	r1, r3
 80017aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ae:	f000 fbc1 	bl	8001f34 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	2026      	movs	r0, #38	; 0x26
 80017b8:	f000 fad4 	bl	8001d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017bc:	2026      	movs	r0, #38	; 0x26
 80017be:	f000 faeb 	bl	8001d98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017c2:	bf00      	nop
 80017c4:	3768      	adds	r7, #104	; 0x68
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40004400 	.word	0x40004400
 80017d0:	40021000 	.word	0x40021000

080017d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08c      	sub	sp, #48	; 0x30
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017e4:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <HAL_InitTick+0xc4>)
 80017e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e8:	4a2b      	ldr	r2, [pc, #172]	; (8001898 <HAL_InitTick+0xc4>)
 80017ea:	f043 0310 	orr.w	r3, r3, #16
 80017ee:	6593      	str	r3, [r2, #88]	; 0x58
 80017f0:	4b29      	ldr	r3, [pc, #164]	; (8001898 <HAL_InitTick+0xc4>)
 80017f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f4:	f003 0310 	and.w	r3, r3, #16
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017fc:	f107 020c 	add.w	r2, r7, #12
 8001800:	f107 0310 	add.w	r3, r7, #16
 8001804:	4611      	mov	r1, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f001 fad0 	bl	8002dac <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800180c:	f001 faa2 	bl	8002d54 <HAL_RCC_GetPCLK1Freq>
 8001810:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001814:	4a21      	ldr	r2, [pc, #132]	; (800189c <HAL_InitTick+0xc8>)
 8001816:	fba2 2303 	umull	r2, r3, r2, r3
 800181a:	0c9b      	lsrs	r3, r3, #18
 800181c:	3b01      	subs	r3, #1
 800181e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001820:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <HAL_InitTick+0xcc>)
 8001822:	4a20      	ldr	r2, [pc, #128]	; (80018a4 <HAL_InitTick+0xd0>)
 8001824:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001826:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <HAL_InitTick+0xcc>)
 8001828:	f240 32e7 	movw	r2, #999	; 0x3e7
 800182c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800182e:	4a1c      	ldr	r2, [pc, #112]	; (80018a0 <HAL_InitTick+0xcc>)
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001834:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <HAL_InitTick+0xcc>)
 8001836:	2200      	movs	r2, #0
 8001838:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183a:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <HAL_InitTick+0xcc>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001840:	4817      	ldr	r0, [pc, #92]	; (80018a0 <HAL_InitTick+0xcc>)
 8001842:	f001 fd1b 	bl	800327c <HAL_TIM_Base_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800184c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001850:	2b00      	cmp	r3, #0
 8001852:	d11b      	bne.n	800188c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001854:	4812      	ldr	r0, [pc, #72]	; (80018a0 <HAL_InitTick+0xcc>)
 8001856:	f001 fd69 	bl	800332c <HAL_TIM_Base_Start_IT>
 800185a:	4603      	mov	r3, r0
 800185c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001860:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001864:	2b00      	cmp	r3, #0
 8001866:	d111      	bne.n	800188c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001868:	2036      	movs	r0, #54	; 0x36
 800186a:	f000 fa95 	bl	8001d98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b0f      	cmp	r3, #15
 8001872:	d808      	bhi.n	8001886 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001874:	2200      	movs	r2, #0
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	2036      	movs	r0, #54	; 0x36
 800187a:	f000 fa73 	bl	8001d64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <HAL_InitTick+0xd4>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	e002      	b.n	800188c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800188c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001890:	4618      	mov	r0, r3
 8001892:	3730      	adds	r7, #48	; 0x30
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40021000 	.word	0x40021000
 800189c:	431bde83 	.word	0x431bde83
 80018a0:	2000038c 	.word	0x2000038c
 80018a4:	40001000 	.word	0x40001000
 80018a8:	20000004 	.word	0x20000004

080018ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <NMI_Handler+0x4>

080018b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <HardFault_Handler+0x4>

080018b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <MemManage_Handler+0x4>

080018be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c2:	e7fe      	b.n	80018c2 <BusFault_Handler+0x4>

080018c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <UsageFault_Handler+0x4>

080018ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <TIM2_IRQHandler+0x10>)
 800190a:	f002 f87f 	bl	8003a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200001f8 	.word	0x200001f8

08001918 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <USART2_IRQHandler+0x10>)
 800191e:	f003 fd8f 	bl	8005440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000290 	.word	0x20000290

0800192c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <TIM6_DAC_IRQHandler+0x10>)
 8001932:	f002 f86b 	bl	8003a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2000038c 	.word	0x2000038c

08001940 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return 1;
 8001944:	2301      	movs	r3, #1
}
 8001946:	4618      	mov	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <_kill>:

int _kill(int pid, int sig)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800195a:	f004 fef3 	bl	8006744 <__errno>
 800195e:	4603      	mov	r3, r0
 8001960:	2216      	movs	r2, #22
 8001962:	601a      	str	r2, [r3, #0]
  return -1;
 8001964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <_exit>:

void _exit (int status)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001978:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ffe7 	bl	8001950 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001982:	e7fe      	b.n	8001982 <_exit+0x12>

08001984 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e00a      	b.n	80019ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001996:	f3af 8000 	nop.w
 800199a:	4601      	mov	r1, r0
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	60ba      	str	r2, [r7, #8]
 80019a2:	b2ca      	uxtb	r2, r1
 80019a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dbf0      	blt.n	8001996 <_read+0x12>
  }

  return len;
 80019b4:	687b      	ldr	r3, [r7, #4]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	e009      	b.n	80019e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	60ba      	str	r2, [r7, #8]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	3301      	adds	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	dbf1      	blt.n	80019d0 <_write+0x12>
  }
  return len;
 80019ec:	687b      	ldr	r3, [r7, #4]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <_close>:

int _close(int file)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a1e:	605a      	str	r2, [r3, #4]
  return 0;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <_isatty>:

int _isatty(int file)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a68:	4a14      	ldr	r2, [pc, #80]	; (8001abc <_sbrk+0x5c>)
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <_sbrk+0x60>)
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a74:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <_sbrk+0x64>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d102      	bne.n	8001a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <_sbrk+0x64>)
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <_sbrk+0x68>)
 8001a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <_sbrk+0x64>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d207      	bcs.n	8001aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a90:	f004 fe58 	bl	8006744 <__errno>
 8001a94:	4603      	mov	r3, r0
 8001a96:	220c      	movs	r2, #12
 8001a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a9e:	e009      	b.n	8001ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <_sbrk+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <_sbrk+0x64>)
 8001ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20008000 	.word	0x20008000
 8001ac0:	00000400 	.word	0x00000400
 8001ac4:	200003d8 	.word	0x200003d8
 8001ac8:	200003f0 	.word	0x200003f0

08001acc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <SystemInit+0x20>)
 8001ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad6:	4a05      	ldr	r2, [pc, #20]	; (8001aec <SystemInit+0x20>)
 8001ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001af0:	480d      	ldr	r0, [pc, #52]	; (8001b28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001af2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001af4:	480d      	ldr	r0, [pc, #52]	; (8001b2c <LoopForever+0x6>)
  ldr r1, =_edata
 8001af6:	490e      	ldr	r1, [pc, #56]	; (8001b30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001af8:	4a0e      	ldr	r2, [pc, #56]	; (8001b34 <LoopForever+0xe>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001afc:	e002      	b.n	8001b04 <LoopCopyDataInit>

08001afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b02:	3304      	adds	r3, #4

08001b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b08:	d3f9      	bcc.n	8001afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0a:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b0c:	4c0b      	ldr	r4, [pc, #44]	; (8001b3c <LoopForever+0x16>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b10:	e001      	b.n	8001b16 <LoopFillZerobss>

08001b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b14:	3204      	adds	r2, #4

08001b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b18:	d3fb      	bcc.n	8001b12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b1a:	f7ff ffd7 	bl	8001acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b1e:	f004 fe17 	bl	8006750 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b22:	f7ff fa91 	bl	8001048 <main>

08001b26 <LoopForever>:

LoopForever:
    b LoopForever
 8001b26:	e7fe      	b.n	8001b26 <LoopForever>
  ldr   r0, =_estack
 8001b28:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b30:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b34:	08009a04 	.word	0x08009a04
  ldr r2, =_sbss
 8001b38:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b3c:	200003f0 	.word	0x200003f0

08001b40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b40:	e7fe      	b.n	8001b40 <ADC1_2_IRQHandler>

08001b42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b4c:	2003      	movs	r0, #3
 8001b4e:	f000 f8fe 	bl	8001d4e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b52:	200f      	movs	r0, #15
 8001b54:	f7ff fe3e 	bl	80017d4 <HAL_InitTick>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	71fb      	strb	r3, [r7, #7]
 8001b62:	e001      	b.n	8001b68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b64:	f7ff fd00 	bl	8001568 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b68:	79fb      	ldrb	r3, [r7, #7]

}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_IncTick+0x1c>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_IncTick+0x20>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4413      	add	r3, r2
 8001b82:	4a03      	ldr	r2, [pc, #12]	; (8001b90 <HAL_IncTick+0x1c>)
 8001b84:	6013      	str	r3, [r2, #0]
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	200003dc 	.word	0x200003dc
 8001b94:	20000008 	.word	0x20000008

08001b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <HAL_GetTick+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	200003dc 	.word	0x200003dc

08001bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff ffee 	bl	8001b98 <HAL_GetTick>
 8001bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bc8:	d004      	beq.n	8001bd4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_Delay+0x40>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bd4:	bf00      	nop
 8001bd6:	f7ff ffdf 	bl	8001b98 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d8f7      	bhi.n	8001bd6 <HAL_Delay+0x26>
  {
  }
}
 8001be6:	bf00      	nop
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000008 	.word	0x20000008

08001bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c10:	4013      	ands	r3, r2
 8001c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c26:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	60d3      	str	r3, [r2, #12]
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <__NVIC_GetPriorityGrouping+0x18>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	f003 0307 	and.w	r3, r3, #7
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	db0b      	blt.n	8001c82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	f003 021f 	and.w	r2, r3, #31
 8001c70:	4907      	ldr	r1, [pc, #28]	; (8001c90 <__NVIC_EnableIRQ+0x38>)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	2001      	movs	r0, #1
 8001c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000e100 	.word	0xe000e100

08001c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	6039      	str	r1, [r7, #0]
 8001c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	db0a      	blt.n	8001cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	490c      	ldr	r1, [pc, #48]	; (8001ce0 <__NVIC_SetPriority+0x4c>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	0112      	lsls	r2, r2, #4
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cbc:	e00a      	b.n	8001cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4908      	ldr	r1, [pc, #32]	; (8001ce4 <__NVIC_SetPriority+0x50>)
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	3b04      	subs	r3, #4
 8001ccc:	0112      	lsls	r2, r2, #4
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	761a      	strb	r2, [r3, #24]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000e100 	.word	0xe000e100
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	; 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f1c3 0307 	rsb	r3, r3, #7
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	bf28      	it	cs
 8001d06:	2304      	movcs	r3, #4
 8001d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	2b06      	cmp	r3, #6
 8001d10:	d902      	bls.n	8001d18 <NVIC_EncodePriority+0x30>
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3b03      	subs	r3, #3
 8001d16:	e000      	b.n	8001d1a <NVIC_EncodePriority+0x32>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43da      	mvns	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3a:	43d9      	mvns	r1, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	4313      	orrs	r3, r2
         );
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3724      	adds	r7, #36	; 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff ff4c 	bl	8001bf4 <__NVIC_SetPriorityGrouping>
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d72:	f7ff ff63 	bl	8001c3c <__NVIC_GetPriorityGrouping>
 8001d76:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	68b9      	ldr	r1, [r7, #8]
 8001d7c:	6978      	ldr	r0, [r7, #20]
 8001d7e:	f7ff ffb3 	bl	8001ce8 <NVIC_EncodePriority>
 8001d82:	4602      	mov	r2, r0
 8001d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ff82 	bl	8001c94 <__NVIC_SetPriority>
}
 8001d90:	bf00      	nop
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ff56 	bl	8001c58 <__NVIC_EnableIRQ>
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d005      	beq.n	8001dd8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2204      	movs	r2, #4
 8001dd0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	73fb      	strb	r3, [r7, #15]
 8001dd6:	e037      	b.n	8001e48 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 020e 	bic.w	r2, r2, #14
 8001de6:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001df6:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0201 	bic.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0c:	f003 021f 	and.w	r2, r3, #31
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	2101      	movs	r1, #1
 8001e16:	fa01 f202 	lsl.w	r2, r1, r2
 8001e1a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e24:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00c      	beq.n	8001e48 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e3c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e46:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d00d      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2204      	movs	r2, #4
 8001e82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	e047      	b.n	8001f2a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 020e 	bic.w	r2, r2, #14
 8001ea8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0201 	bic.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ec8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	f003 021f 	and.w	r2, r3, #31
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8001edc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ee6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00c      	beq.n	8001f0a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001efe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f08:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	4798      	blx	r3
    }
  }
  return status;
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f42:	e15a      	b.n	80021fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	2101      	movs	r1, #1
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f50:	4013      	ands	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 814c 	beq.w	80021f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d005      	beq.n	8001f74 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d130      	bne.n	8001fd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	2203      	movs	r2, #3
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001faa:	2201      	movs	r2, #1
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	091b      	lsrs	r3, r3, #4
 8001fc0:	f003 0201 	and.w	r2, r3, #1
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d017      	beq.n	8002012 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d123      	bne.n	8002066 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	08da      	lsrs	r2, r3, #3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3208      	adds	r2, #8
 8002026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800202a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	220f      	movs	r2, #15
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	691a      	ldr	r2, [r3, #16]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	08da      	lsrs	r2, r3, #3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3208      	adds	r2, #8
 8002060:	6939      	ldr	r1, [r7, #16]
 8002062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	2203      	movs	r2, #3
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0203 	and.w	r2, r3, #3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 80a6 	beq.w	80021f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a8:	4b5b      	ldr	r3, [pc, #364]	; (8002218 <HAL_GPIO_Init+0x2e4>)
 80020aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ac:	4a5a      	ldr	r2, [pc, #360]	; (8002218 <HAL_GPIO_Init+0x2e4>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6613      	str	r3, [r2, #96]	; 0x60
 80020b4:	4b58      	ldr	r3, [pc, #352]	; (8002218 <HAL_GPIO_Init+0x2e4>)
 80020b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020c0:	4a56      	ldr	r2, [pc, #344]	; (800221c <HAL_GPIO_Init+0x2e8>)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	089b      	lsrs	r3, r3, #2
 80020c6:	3302      	adds	r3, #2
 80020c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	220f      	movs	r2, #15
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020ea:	d01f      	beq.n	800212c <HAL_GPIO_Init+0x1f8>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a4c      	ldr	r2, [pc, #304]	; (8002220 <HAL_GPIO_Init+0x2ec>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d019      	beq.n	8002128 <HAL_GPIO_Init+0x1f4>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a4b      	ldr	r2, [pc, #300]	; (8002224 <HAL_GPIO_Init+0x2f0>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d013      	beq.n	8002124 <HAL_GPIO_Init+0x1f0>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a4a      	ldr	r2, [pc, #296]	; (8002228 <HAL_GPIO_Init+0x2f4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d00d      	beq.n	8002120 <HAL_GPIO_Init+0x1ec>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a49      	ldr	r2, [pc, #292]	; (800222c <HAL_GPIO_Init+0x2f8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d007      	beq.n	800211c <HAL_GPIO_Init+0x1e8>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a48      	ldr	r2, [pc, #288]	; (8002230 <HAL_GPIO_Init+0x2fc>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d101      	bne.n	8002118 <HAL_GPIO_Init+0x1e4>
 8002114:	2305      	movs	r3, #5
 8002116:	e00a      	b.n	800212e <HAL_GPIO_Init+0x1fa>
 8002118:	2306      	movs	r3, #6
 800211a:	e008      	b.n	800212e <HAL_GPIO_Init+0x1fa>
 800211c:	2304      	movs	r3, #4
 800211e:	e006      	b.n	800212e <HAL_GPIO_Init+0x1fa>
 8002120:	2303      	movs	r3, #3
 8002122:	e004      	b.n	800212e <HAL_GPIO_Init+0x1fa>
 8002124:	2302      	movs	r3, #2
 8002126:	e002      	b.n	800212e <HAL_GPIO_Init+0x1fa>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <HAL_GPIO_Init+0x1fa>
 800212c:	2300      	movs	r3, #0
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	f002 0203 	and.w	r2, r2, #3
 8002134:	0092      	lsls	r2, r2, #2
 8002136:	4093      	lsls	r3, r2
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800213e:	4937      	ldr	r1, [pc, #220]	; (800221c <HAL_GPIO_Init+0x2e8>)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800214c:	4b39      	ldr	r3, [pc, #228]	; (8002234 <HAL_GPIO_Init+0x300>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	43db      	mvns	r3, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002170:	4a30      	ldr	r2, [pc, #192]	; (8002234 <HAL_GPIO_Init+0x300>)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002176:	4b2f      	ldr	r3, [pc, #188]	; (8002234 <HAL_GPIO_Init+0x300>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800219a:	4a26      	ldr	r2, [pc, #152]	; (8002234 <HAL_GPIO_Init+0x300>)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80021a0:	4b24      	ldr	r3, [pc, #144]	; (8002234 <HAL_GPIO_Init+0x300>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021c4:	4a1b      	ldr	r2, [pc, #108]	; (8002234 <HAL_GPIO_Init+0x300>)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80021ca:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <HAL_GPIO_Init+0x300>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021ee:	4a11      	ldr	r2, [pc, #68]	; (8002234 <HAL_GPIO_Init+0x300>)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	3301      	adds	r3, #1
 80021f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	f47f ae9d 	bne.w	8001f44 <HAL_GPIO_Init+0x10>
  }
}
 800220a:	bf00      	nop
 800220c:	bf00      	nop
 800220e:	371c      	adds	r7, #28
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	40021000 	.word	0x40021000
 800221c:	40010000 	.word	0x40010000
 8002220:	48000400 	.word	0x48000400
 8002224:	48000800 	.word	0x48000800
 8002228:	48000c00 	.word	0x48000c00
 800222c:	48001000 	.word	0x48001000
 8002230:	48001400 	.word	0x48001400
 8002234:	40010400 	.word	0x40010400

08002238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	807b      	strh	r3, [r7, #2]
 8002244:	4613      	mov	r3, r2
 8002246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002248:	787b      	ldrb	r3, [r7, #1]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800224e:	887a      	ldrh	r2, [r7, #2]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002254:	e002      	b.n	800225c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002256:	887a      	ldrh	r2, [r7, #2]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d141      	bne.n	80022fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002276:	4b4b      	ldr	r3, [pc, #300]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800227e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002282:	d131      	bne.n	80022e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002284:	4b47      	ldr	r3, [pc, #284]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800228a:	4a46      	ldr	r2, [pc, #280]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002290:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002294:	4b43      	ldr	r3, [pc, #268]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800229c:	4a41      	ldr	r2, [pc, #260]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800229e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022a4:	4b40      	ldr	r3, [pc, #256]	; (80023a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2232      	movs	r2, #50	; 0x32
 80022aa:	fb02 f303 	mul.w	r3, r2, r3
 80022ae:	4a3f      	ldr	r2, [pc, #252]	; (80023ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022b0:	fba2 2303 	umull	r2, r3, r2, r3
 80022b4:	0c9b      	lsrs	r3, r3, #18
 80022b6:	3301      	adds	r3, #1
 80022b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ba:	e002      	b.n	80022c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	3b01      	subs	r3, #1
 80022c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022c2:	4b38      	ldr	r3, [pc, #224]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ce:	d102      	bne.n	80022d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f2      	bne.n	80022bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022d6:	4b33      	ldr	r3, [pc, #204]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e2:	d158      	bne.n	8002396 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e057      	b.n	8002398 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022e8:	4b2e      	ldr	r3, [pc, #184]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ee:	4a2d      	ldr	r2, [pc, #180]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022f8:	e04d      	b.n	8002396 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002300:	d141      	bne.n	8002386 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002302:	4b28      	ldr	r3, [pc, #160]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800230a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800230e:	d131      	bne.n	8002374 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002310:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002316:	4a23      	ldr	r2, [pc, #140]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002320:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002328:	4a1e      	ldr	r2, [pc, #120]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800232a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800232e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002330:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2232      	movs	r2, #50	; 0x32
 8002336:	fb02 f303 	mul.w	r3, r2, r3
 800233a:	4a1c      	ldr	r2, [pc, #112]	; (80023ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800233c:	fba2 2303 	umull	r2, r3, r2, r3
 8002340:	0c9b      	lsrs	r3, r3, #18
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002346:	e002      	b.n	800234e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	3b01      	subs	r3, #1
 800234c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800235a:	d102      	bne.n	8002362 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f2      	bne.n	8002348 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800236a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800236e:	d112      	bne.n	8002396 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e011      	b.n	8002398 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800237a:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800237c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002380:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002384:	e007      	b.n	8002396 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800238e:	4a05      	ldr	r2, [pc, #20]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002390:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002394:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40007000 	.word	0x40007000
 80023a8:	20000000 	.word	0x20000000
 80023ac:	431bde83 	.word	0x431bde83

080023b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4a04      	ldr	r2, [pc, #16]	; (80023cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80023ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023be:	6093      	str	r3, [r2, #8]
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40007000 	.word	0x40007000

080023d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e306      	b.n	80029f0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d075      	beq.n	80024da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ee:	4b97      	ldr	r3, [pc, #604]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023f8:	4b94      	ldr	r3, [pc, #592]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	2b0c      	cmp	r3, #12
 8002406:	d102      	bne.n	800240e <HAL_RCC_OscConfig+0x3e>
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	2b03      	cmp	r3, #3
 800240c:	d002      	beq.n	8002414 <HAL_RCC_OscConfig+0x44>
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	2b08      	cmp	r3, #8
 8002412:	d10b      	bne.n	800242c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002414:	4b8d      	ldr	r3, [pc, #564]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d05b      	beq.n	80024d8 <HAL_RCC_OscConfig+0x108>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d157      	bne.n	80024d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e2e1      	b.n	80029f0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002434:	d106      	bne.n	8002444 <HAL_RCC_OscConfig+0x74>
 8002436:	4b85      	ldr	r3, [pc, #532]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a84      	ldr	r2, [pc, #528]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 800243c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e01d      	b.n	8002480 <HAL_RCC_OscConfig+0xb0>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0x98>
 800244e:	4b7f      	ldr	r3, [pc, #508]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a7e      	ldr	r2, [pc, #504]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b7c      	ldr	r3, [pc, #496]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a7b      	ldr	r2, [pc, #492]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e00b      	b.n	8002480 <HAL_RCC_OscConfig+0xb0>
 8002468:	4b78      	ldr	r3, [pc, #480]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a77      	ldr	r2, [pc, #476]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 800246e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b75      	ldr	r3, [pc, #468]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a74      	ldr	r2, [pc, #464]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 800247a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800247e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d013      	beq.n	80024b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002488:	f7ff fb86 	bl	8001b98 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002490:	f7ff fb82 	bl	8001b98 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	; 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e2a6      	b.n	80029f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024a2:	4b6a      	ldr	r3, [pc, #424]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0xc0>
 80024ae:	e014      	b.n	80024da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7ff fb72 	bl	8001b98 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b8:	f7ff fb6e 	bl	8001b98 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e292      	b.n	80029f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ca:	4b60      	ldr	r3, [pc, #384]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0xe8>
 80024d6:	e000      	b.n	80024da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d075      	beq.n	80025d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024e6:	4b59      	ldr	r3, [pc, #356]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024f0:	4b56      	ldr	r3, [pc, #344]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	2b0c      	cmp	r3, #12
 80024fe:	d102      	bne.n	8002506 <HAL_RCC_OscConfig+0x136>
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d002      	beq.n	800250c <HAL_RCC_OscConfig+0x13c>
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	2b04      	cmp	r3, #4
 800250a:	d11f      	bne.n	800254c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800250c:	4b4f      	ldr	r3, [pc, #316]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_OscConfig+0x154>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e265      	b.n	80029f0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002524:	4b49      	ldr	r3, [pc, #292]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	061b      	lsls	r3, r3, #24
 8002532:	4946      	ldr	r1, [pc, #280]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002534:	4313      	orrs	r3, r2
 8002536:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002538:	4b45      	ldr	r3, [pc, #276]	; (8002650 <HAL_RCC_OscConfig+0x280>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff f949 	bl	80017d4 <HAL_InitTick>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d043      	beq.n	80025d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e251      	b.n	80029f0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d023      	beq.n	800259c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002554:	4b3d      	ldr	r3, [pc, #244]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a3c      	ldr	r2, [pc, #240]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 800255a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7ff fb1a 	bl	8001b98 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002568:	f7ff fb16 	bl	8001b98 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e23a      	b.n	80029f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800257a:	4b34      	ldr	r3, [pc, #208]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002586:	4b31      	ldr	r3, [pc, #196]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	061b      	lsls	r3, r3, #24
 8002594:	492d      	ldr	r1, [pc, #180]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002596:	4313      	orrs	r3, r2
 8002598:	604b      	str	r3, [r1, #4]
 800259a:	e01a      	b.n	80025d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259c:	4b2b      	ldr	r3, [pc, #172]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a2a      	ldr	r2, [pc, #168]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 80025a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a8:	f7ff faf6 	bl	8001b98 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b0:	f7ff faf2 	bl	8001b98 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e216      	b.n	80029f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025c2:	4b22      	ldr	r3, [pc, #136]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x1e0>
 80025ce:	e000      	b.n	80025d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d041      	beq.n	8002662 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d01c      	beq.n	8002620 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e6:	4b19      	ldr	r3, [pc, #100]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 80025e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ec:	4a17      	ldr	r2, [pc, #92]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f6:	f7ff facf 	bl	8001b98 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025fe:	f7ff facb 	bl	8001b98 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e1ef      	b.n	80029f0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002610:	4b0e      	ldr	r3, [pc, #56]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0ef      	beq.n	80025fe <HAL_RCC_OscConfig+0x22e>
 800261e:	e020      	b.n	8002662 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002620:	4b0a      	ldr	r3, [pc, #40]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002626:	4a09      	ldr	r2, [pc, #36]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002628:	f023 0301 	bic.w	r3, r3, #1
 800262c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002630:	f7ff fab2 	bl	8001b98 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002636:	e00d      	b.n	8002654 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002638:	f7ff faae 	bl	8001b98 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d906      	bls.n	8002654 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e1d2      	b.n	80029f0 <HAL_RCC_OscConfig+0x620>
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002654:	4b8c      	ldr	r3, [pc, #560]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1ea      	bne.n	8002638 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 80a6 	beq.w	80027bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002670:	2300      	movs	r3, #0
 8002672:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002674:	4b84      	ldr	r3, [pc, #528]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_RCC_OscConfig+0x2b4>
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <HAL_RCC_OscConfig+0x2b6>
 8002684:	2300      	movs	r3, #0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00d      	beq.n	80026a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268a:	4b7f      	ldr	r3, [pc, #508]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 800268c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268e:	4a7e      	ldr	r2, [pc, #504]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002694:	6593      	str	r3, [r2, #88]	; 0x58
 8002696:	4b7c      	ldr	r3, [pc, #496]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026a2:	2301      	movs	r3, #1
 80026a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026a6:	4b79      	ldr	r3, [pc, #484]	; (800288c <HAL_RCC_OscConfig+0x4bc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d118      	bne.n	80026e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026b2:	4b76      	ldr	r3, [pc, #472]	; (800288c <HAL_RCC_OscConfig+0x4bc>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a75      	ldr	r2, [pc, #468]	; (800288c <HAL_RCC_OscConfig+0x4bc>)
 80026b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026be:	f7ff fa6b 	bl	8001b98 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c6:	f7ff fa67 	bl	8001b98 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e18b      	b.n	80029f0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026d8:	4b6c      	ldr	r3, [pc, #432]	; (800288c <HAL_RCC_OscConfig+0x4bc>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d108      	bne.n	80026fe <HAL_RCC_OscConfig+0x32e>
 80026ec:	4b66      	ldr	r3, [pc, #408]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 80026ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f2:	4a65      	ldr	r2, [pc, #404]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026fc:	e024      	b.n	8002748 <HAL_RCC_OscConfig+0x378>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b05      	cmp	r3, #5
 8002704:	d110      	bne.n	8002728 <HAL_RCC_OscConfig+0x358>
 8002706:	4b60      	ldr	r3, [pc, #384]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270c:	4a5e      	ldr	r2, [pc, #376]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 800270e:	f043 0304 	orr.w	r3, r3, #4
 8002712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002716:	4b5c      	ldr	r3, [pc, #368]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271c:	4a5a      	ldr	r2, [pc, #360]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002726:	e00f      	b.n	8002748 <HAL_RCC_OscConfig+0x378>
 8002728:	4b57      	ldr	r3, [pc, #348]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 800272a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272e:	4a56      	ldr	r2, [pc, #344]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002738:	4b53      	ldr	r3, [pc, #332]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 800273a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273e:	4a52      	ldr	r2, [pc, #328]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002740:	f023 0304 	bic.w	r3, r3, #4
 8002744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d016      	beq.n	800277e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7ff fa22 	bl	8001b98 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002756:	e00a      	b.n	800276e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002758:	f7ff fa1e 	bl	8001b98 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	; 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e140      	b.n	80029f0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800276e:	4b46      	ldr	r3, [pc, #280]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0ed      	beq.n	8002758 <HAL_RCC_OscConfig+0x388>
 800277c:	e015      	b.n	80027aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277e:	f7ff fa0b 	bl	8001b98 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002784:	e00a      	b.n	800279c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002786:	f7ff fa07 	bl	8001b98 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	f241 3288 	movw	r2, #5000	; 0x1388
 8002794:	4293      	cmp	r3, r2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e129      	b.n	80029f0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800279c:	4b3a      	ldr	r3, [pc, #232]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 800279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1ed      	bne.n	8002786 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027aa:	7ffb      	ldrb	r3, [r7, #31]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d105      	bne.n	80027bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b0:	4b35      	ldr	r3, [pc, #212]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 80027b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b4:	4a34      	ldr	r2, [pc, #208]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 80027b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0320 	and.w	r3, r3, #32
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d03c      	beq.n	8002842 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01c      	beq.n	800280a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027d0:	4b2d      	ldr	r3, [pc, #180]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 80027d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027d6:	4a2c      	ldr	r2, [pc, #176]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e0:	f7ff f9da 	bl	8001b98 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027e8:	f7ff f9d6 	bl	8001b98 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e0fa      	b.n	80029f0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027fa:	4b23      	ldr	r3, [pc, #140]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 80027fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0ef      	beq.n	80027e8 <HAL_RCC_OscConfig+0x418>
 8002808:	e01b      	b.n	8002842 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800280a:	4b1f      	ldr	r3, [pc, #124]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 800280c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002810:	4a1d      	ldr	r2, [pc, #116]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002812:	f023 0301 	bic.w	r3, r3, #1
 8002816:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281a:	f7ff f9bd 	bl	8001b98 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002822:	f7ff f9b9 	bl	8001b98 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e0dd      	b.n	80029f0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002834:	4b14      	ldr	r3, [pc, #80]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002836:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1ef      	bne.n	8002822 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 80d1 	beq.w	80029ee <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800284c:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	2b0c      	cmp	r3, #12
 8002856:	f000 808b 	beq.w	8002970 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d15e      	bne.n	8002920 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a08      	ldr	r2, [pc, #32]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002868:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800286c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286e:	f7ff f993 	bl	8001b98 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002874:	e00c      	b.n	8002890 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002876:	f7ff f98f 	bl	8001b98 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d905      	bls.n	8002890 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e0b3      	b.n	80029f0 <HAL_RCC_OscConfig+0x620>
 8002888:	40021000 	.word	0x40021000
 800288c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002890:	4b59      	ldr	r3, [pc, #356]	; (80029f8 <HAL_RCC_OscConfig+0x628>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1ec      	bne.n	8002876 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800289c:	4b56      	ldr	r3, [pc, #344]	; (80029f8 <HAL_RCC_OscConfig+0x628>)
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	4b56      	ldr	r3, [pc, #344]	; (80029fc <HAL_RCC_OscConfig+0x62c>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6a11      	ldr	r1, [r2, #32]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028ac:	3a01      	subs	r2, #1
 80028ae:	0112      	lsls	r2, r2, #4
 80028b0:	4311      	orrs	r1, r2
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80028b6:	0212      	lsls	r2, r2, #8
 80028b8:	4311      	orrs	r1, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028be:	0852      	lsrs	r2, r2, #1
 80028c0:	3a01      	subs	r2, #1
 80028c2:	0552      	lsls	r2, r2, #21
 80028c4:	4311      	orrs	r1, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028ca:	0852      	lsrs	r2, r2, #1
 80028cc:	3a01      	subs	r2, #1
 80028ce:	0652      	lsls	r2, r2, #25
 80028d0:	4311      	orrs	r1, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028d6:	06d2      	lsls	r2, r2, #27
 80028d8:	430a      	orrs	r2, r1
 80028da:	4947      	ldr	r1, [pc, #284]	; (80029f8 <HAL_RCC_OscConfig+0x628>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e0:	4b45      	ldr	r3, [pc, #276]	; (80029f8 <HAL_RCC_OscConfig+0x628>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a44      	ldr	r2, [pc, #272]	; (80029f8 <HAL_RCC_OscConfig+0x628>)
 80028e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028ec:	4b42      	ldr	r3, [pc, #264]	; (80029f8 <HAL_RCC_OscConfig+0x628>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4a41      	ldr	r2, [pc, #260]	; (80029f8 <HAL_RCC_OscConfig+0x628>)
 80028f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7ff f94e 	bl	8001b98 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002900:	f7ff f94a 	bl	8001b98 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e06e      	b.n	80029f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002912:	4b39      	ldr	r3, [pc, #228]	; (80029f8 <HAL_RCC_OscConfig+0x628>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x530>
 800291e:	e066      	b.n	80029ee <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002920:	4b35      	ldr	r3, [pc, #212]	; (80029f8 <HAL_RCC_OscConfig+0x628>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a34      	ldr	r2, [pc, #208]	; (80029f8 <HAL_RCC_OscConfig+0x628>)
 8002926:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800292a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800292c:	4b32      	ldr	r3, [pc, #200]	; (80029f8 <HAL_RCC_OscConfig+0x628>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4a31      	ldr	r2, [pc, #196]	; (80029f8 <HAL_RCC_OscConfig+0x628>)
 8002932:	f023 0303 	bic.w	r3, r3, #3
 8002936:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002938:	4b2f      	ldr	r3, [pc, #188]	; (80029f8 <HAL_RCC_OscConfig+0x628>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4a2e      	ldr	r2, [pc, #184]	; (80029f8 <HAL_RCC_OscConfig+0x628>)
 800293e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002946:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7ff f926 	bl	8001b98 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002950:	f7ff f922 	bl	8001b98 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e046      	b.n	80029f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002962:	4b25      	ldr	r3, [pc, #148]	; (80029f8 <HAL_RCC_OscConfig+0x628>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x580>
 800296e:	e03e      	b.n	80029ee <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e039      	b.n	80029f0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800297c:	4b1e      	ldr	r3, [pc, #120]	; (80029f8 <HAL_RCC_OscConfig+0x628>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f003 0203 	and.w	r2, r3, #3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	429a      	cmp	r2, r3
 800298e:	d12c      	bne.n	80029ea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	3b01      	subs	r3, #1
 800299c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800299e:	429a      	cmp	r2, r3
 80029a0:	d123      	bne.n	80029ea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d11b      	bne.n	80029ea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80029be:	429a      	cmp	r2, r3
 80029c0:	d113      	bne.n	80029ea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	085b      	lsrs	r3, r3, #1
 80029ce:	3b01      	subs	r3, #1
 80029d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d109      	bne.n	80029ea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e0:	085b      	lsrs	r3, r3, #1
 80029e2:	3b01      	subs	r3, #1
 80029e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d001      	beq.n	80029ee <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3720      	adds	r7, #32
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40021000 	.word	0x40021000
 80029fc:	019f800c 	.word	0x019f800c

08002a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e11e      	b.n	8002c56 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a18:	4b91      	ldr	r3, [pc, #580]	; (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d910      	bls.n	8002a48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	4b8e      	ldr	r3, [pc, #568]	; (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 020f 	bic.w	r2, r3, #15
 8002a2e:	498c      	ldr	r1, [pc, #560]	; (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a36:	4b8a      	ldr	r3, [pc, #552]	; (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e106      	b.n	8002c56 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d073      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d129      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a5c:	4b81      	ldr	r3, [pc, #516]	; (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0f4      	b.n	8002c56 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002a6c:	f000 f9d0 	bl	8002e10 <RCC_GetSysClockFreqFromPLLSource>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4a7c      	ldr	r2, [pc, #496]	; (8002c68 <HAL_RCC_ClockConfig+0x268>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d93f      	bls.n	8002afa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a7a:	4b7a      	ldr	r3, [pc, #488]	; (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d009      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d033      	beq.n	8002afa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d12f      	bne.n	8002afa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a9a:	4b72      	ldr	r3, [pc, #456]	; (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aa2:	4a70      	ldr	r2, [pc, #448]	; (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002aaa:	2380      	movs	r3, #128	; 0x80
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	e024      	b.n	8002afa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d107      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ab8:	4b6a      	ldr	r3, [pc, #424]	; (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d109      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0c6      	b.n	8002c56 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac8:	4b66      	ldr	r3, [pc, #408]	; (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0be      	b.n	8002c56 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002ad8:	f000 f8ce 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8002adc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4a61      	ldr	r2, [pc, #388]	; (8002c68 <HAL_RCC_ClockConfig+0x268>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d909      	bls.n	8002afa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ae6:	4b5f      	ldr	r3, [pc, #380]	; (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aee:	4a5d      	ldr	r2, [pc, #372]	; (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002afa:	4b5a      	ldr	r3, [pc, #360]	; (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f023 0203 	bic.w	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4957      	ldr	r1, [pc, #348]	; (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b0c:	f7ff f844 	bl	8001b98 <HAL_GetTick>
 8002b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b12:	e00a      	b.n	8002b2a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b14:	f7ff f840 	bl	8001b98 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e095      	b.n	8002c56 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2a:	4b4e      	ldr	r3, [pc, #312]	; (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 020c 	and.w	r2, r3, #12
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d1eb      	bne.n	8002b14 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d023      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b54:	4b43      	ldr	r3, [pc, #268]	; (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a42      	ldr	r2, [pc, #264]	; (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002b5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b5e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d007      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002b6c:	4b3d      	ldr	r3, [pc, #244]	; (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002b74:	4a3b      	ldr	r2, [pc, #236]	; (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002b76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b7c:	4b39      	ldr	r3, [pc, #228]	; (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	4936      	ldr	r1, [pc, #216]	; (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	608b      	str	r3, [r1, #8]
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2b80      	cmp	r3, #128	; 0x80
 8002b94:	d105      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b96:	4b33      	ldr	r3, [pc, #204]	; (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	4a32      	ldr	r2, [pc, #200]	; (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002b9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ba0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba2:	4b2f      	ldr	r3, [pc, #188]	; (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d21d      	bcs.n	8002bec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb0:	4b2b      	ldr	r3, [pc, #172]	; (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f023 020f 	bic.w	r2, r3, #15
 8002bb8:	4929      	ldr	r1, [pc, #164]	; (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bc0:	f7fe ffea 	bl	8001b98 <HAL_GetTick>
 8002bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc8:	f7fe ffe6 	bl	8001b98 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e03b      	b.n	8002c56 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bde:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d1ed      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf8:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4917      	ldr	r1, [pc, #92]	; (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d009      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c16:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	490f      	ldr	r1, [pc, #60]	; (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c2a:	f000 f825 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	091b      	lsrs	r3, r3, #4
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	490c      	ldr	r1, [pc, #48]	; (8002c6c <HAL_RCC_ClockConfig+0x26c>)
 8002c3c:	5ccb      	ldrb	r3, [r1, r3]
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	fa22 f303 	lsr.w	r3, r2, r3
 8002c46:	4a0a      	ldr	r2, [pc, #40]	; (8002c70 <HAL_RCC_ClockConfig+0x270>)
 8002c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <HAL_RCC_ClockConfig+0x274>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe fdc0 	bl	80017d4 <HAL_InitTick>
 8002c54:	4603      	mov	r3, r0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40022000 	.word	0x40022000
 8002c64:	40021000 	.word	0x40021000
 8002c68:	04c4b400 	.word	0x04c4b400
 8002c6c:	080095d8 	.word	0x080095d8
 8002c70:	20000000 	.word	0x20000000
 8002c74:	20000004 	.word	0x20000004

08002c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c7e:	4b2c      	ldr	r3, [pc, #176]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d102      	bne.n	8002c90 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c8a:	4b2a      	ldr	r3, [pc, #168]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	e047      	b.n	8002d20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c90:	4b27      	ldr	r3, [pc, #156]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 030c 	and.w	r3, r3, #12
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d102      	bne.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c9c:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	e03e      	b.n	8002d20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002ca2:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d136      	bne.n	8002d1c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cae:	4b20      	ldr	r3, [pc, #128]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cb8:	4b1d      	ldr	r3, [pc, #116]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d10c      	bne.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ccc:	4a1a      	ldr	r2, [pc, #104]	; (8002d38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd4:	4a16      	ldr	r2, [pc, #88]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cd6:	68d2      	ldr	r2, [r2, #12]
 8002cd8:	0a12      	lsrs	r2, r2, #8
 8002cda:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	617b      	str	r3, [r7, #20]
      break;
 8002ce4:	e00c      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ce6:	4a13      	ldr	r2, [pc, #76]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cee:	4a10      	ldr	r2, [pc, #64]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cf0:	68d2      	ldr	r2, [r2, #12]
 8002cf2:	0a12      	lsrs	r2, r2, #8
 8002cf4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cf8:	fb02 f303 	mul.w	r3, r2, r3
 8002cfc:	617b      	str	r3, [r7, #20]
      break;
 8002cfe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	0e5b      	lsrs	r3, r3, #25
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	e001      	b.n	8002d20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d20:	693b      	ldr	r3, [r7, #16]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	371c      	adds	r7, #28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000
 8002d34:	00f42400 	.word	0x00f42400
 8002d38:	016e3600 	.word	0x016e3600

08002d3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d40:	4b03      	ldr	r3, [pc, #12]	; (8002d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d42:	681b      	ldr	r3, [r3, #0]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20000000 	.word	0x20000000

08002d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d58:	f7ff fff0 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	0a1b      	lsrs	r3, r3, #8
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	4904      	ldr	r1, [pc, #16]	; (8002d7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d6a:	5ccb      	ldrb	r3, [r1, r3]
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	080095e8 	.word	0x080095e8

08002d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d84:	f7ff ffda 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	0adb      	lsrs	r3, r3, #11
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	4904      	ldr	r1, [pc, #16]	; (8002da8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d96:	5ccb      	ldrb	r3, [r1, r3]
 8002d98:	f003 031f 	and.w	r3, r3, #31
 8002d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40021000 	.word	0x40021000
 8002da8:	080095e8 	.word	0x080095e8

08002dac <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	220f      	movs	r2, #15
 8002dba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002dbc:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <HAL_RCC_GetClockConfig+0x5c>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 0203 	and.w	r2, r3, #3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <HAL_RCC_GetClockConfig+0x5c>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <HAL_RCC_GetClockConfig+0x5c>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002de0:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <HAL_RCC_GetClockConfig+0x5c>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	08db      	lsrs	r3, r3, #3
 8002de6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002dee:	4b07      	ldr	r3, [pc, #28]	; (8002e0c <HAL_RCC_GetClockConfig+0x60>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 020f 	and.w	r2, r3, #15
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	601a      	str	r2, [r3, #0]
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40022000 	.word	0x40022000

08002e10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b087      	sub	sp, #28
 8002e14:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e16:	4b1e      	ldr	r3, [pc, #120]	; (8002e90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e20:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	091b      	lsrs	r3, r3, #4
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d10c      	bne.n	8002e4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e34:	4a17      	ldr	r2, [pc, #92]	; (8002e94 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3c:	4a14      	ldr	r2, [pc, #80]	; (8002e90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e3e:	68d2      	ldr	r2, [r2, #12]
 8002e40:	0a12      	lsrs	r2, r2, #8
 8002e42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e46:	fb02 f303 	mul.w	r3, r2, r3
 8002e4a:	617b      	str	r3, [r7, #20]
    break;
 8002e4c:	e00c      	b.n	8002e68 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e4e:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e56:	4a0e      	ldr	r2, [pc, #56]	; (8002e90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e58:	68d2      	ldr	r2, [r2, #12]
 8002e5a:	0a12      	lsrs	r2, r2, #8
 8002e5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e60:	fb02 f303 	mul.w	r3, r2, r3
 8002e64:	617b      	str	r3, [r7, #20]
    break;
 8002e66:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e68:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	0e5b      	lsrs	r3, r3, #25
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	3301      	adds	r3, #1
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e80:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002e82:	687b      	ldr	r3, [r7, #4]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	371c      	adds	r7, #28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	40021000 	.word	0x40021000
 8002e94:	016e3600 	.word	0x016e3600
 8002e98:	00f42400 	.word	0x00f42400

08002e9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 8098 	beq.w	8002fea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ebe:	4b43      	ldr	r3, [pc, #268]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10d      	bne.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eca:	4b40      	ldr	r3, [pc, #256]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ece:	4a3f      	ldr	r2, [pc, #252]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ed6:	4b3d      	ldr	r3, [pc, #244]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ede:	60bb      	str	r3, [r7, #8]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ee6:	4b3a      	ldr	r3, [pc, #232]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a39      	ldr	r2, [pc, #228]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ef2:	f7fe fe51 	bl	8001b98 <HAL_GetTick>
 8002ef6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ef8:	e009      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efa:	f7fe fe4d 	bl	8001b98 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d902      	bls.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	74fb      	strb	r3, [r7, #19]
        break;
 8002f0c:	e005      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f0e:	4b30      	ldr	r3, [pc, #192]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0ef      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002f1a:	7cfb      	ldrb	r3, [r7, #19]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d159      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f20:	4b2a      	ldr	r3, [pc, #168]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d01e      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d019      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f3c:	4b23      	ldr	r3, [pc, #140]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f48:	4b20      	ldr	r3, [pc, #128]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4e:	4a1f      	ldr	r2, [pc, #124]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f58:	4b1c      	ldr	r3, [pc, #112]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5e:	4a1b      	ldr	r2, [pc, #108]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f68:	4a18      	ldr	r2, [pc, #96]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d016      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7a:	f7fe fe0d 	bl	8001b98 <HAL_GetTick>
 8002f7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f80:	e00b      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f82:	f7fe fe09 	bl	8001b98 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d902      	bls.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	74fb      	strb	r3, [r7, #19]
            break;
 8002f98:	e006      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f9a:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0ec      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002fa8:	7cfb      	ldrb	r3, [r7, #19]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10b      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fae:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	4903      	ldr	r1, [pc, #12]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fc6:	7cfb      	ldrb	r3, [r7, #19]
 8002fc8:	74bb      	strb	r3, [r7, #18]
 8002fca:	e005      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd4:	7cfb      	ldrb	r3, [r7, #19]
 8002fd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fd8:	7c7b      	ldrb	r3, [r7, #17]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d105      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fde:	4ba6      	ldr	r3, [pc, #664]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe2:	4aa5      	ldr	r2, [pc, #660]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00a      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ff6:	4ba0      	ldr	r3, [pc, #640]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffc:	f023 0203 	bic.w	r2, r3, #3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	499c      	ldr	r1, [pc, #624]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00a      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003018:	4b97      	ldr	r3, [pc, #604]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301e:	f023 020c 	bic.w	r2, r3, #12
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	4994      	ldr	r1, [pc, #592]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00a      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800303a:	4b8f      	ldr	r3, [pc, #572]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800303c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003040:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	498b      	ldr	r1, [pc, #556]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800305c:	4b86      	ldr	r3, [pc, #536]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003062:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	4983      	ldr	r1, [pc, #524]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800307e:	4b7e      	ldr	r3, [pc, #504]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003084:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	497a      	ldr	r1, [pc, #488]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800308e:	4313      	orrs	r3, r2
 8003090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030a0:	4b75      	ldr	r3, [pc, #468]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	4972      	ldr	r1, [pc, #456]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030c2:	4b6d      	ldr	r3, [pc, #436]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	4969      	ldr	r1, [pc, #420]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030e4:	4b64      	ldr	r3, [pc, #400]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	4961      	ldr	r1, [pc, #388]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003106:	4b5c      	ldr	r3, [pc, #368]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	4958      	ldr	r1, [pc, #352]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003124:	2b00      	cmp	r3, #0
 8003126:	d015      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003128:	4b53      	ldr	r3, [pc, #332]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	4950      	ldr	r1, [pc, #320]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003146:	d105      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003148:	4b4b      	ldr	r3, [pc, #300]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	4a4a      	ldr	r2, [pc, #296]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800314e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003152:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800315c:	2b00      	cmp	r3, #0
 800315e:	d015      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003160:	4b45      	ldr	r3, [pc, #276]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003166:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	4942      	ldr	r1, [pc, #264]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003170:	4313      	orrs	r3, r2
 8003172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800317e:	d105      	bne.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003180:	4b3d      	ldr	r3, [pc, #244]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	4a3c      	ldr	r2, [pc, #240]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003186:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800318a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d015      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003198:	4b37      	ldr	r3, [pc, #220]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	4934      	ldr	r1, [pc, #208]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031b6:	d105      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031b8:	4b2f      	ldr	r3, [pc, #188]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4a2e      	ldr	r2, [pc, #184]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d015      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031d0:	4b29      	ldr	r3, [pc, #164]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031de:	4926      	ldr	r1, [pc, #152]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031ee:	d105      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031f0:	4b21      	ldr	r3, [pc, #132]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	4a20      	ldr	r2, [pc, #128]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d015      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003208:	4b1b      	ldr	r3, [pc, #108]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800320a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	4918      	ldr	r1, [pc, #96]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003226:	d105      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003228:	4b13      	ldr	r3, [pc, #76]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	4a12      	ldr	r2, [pc, #72]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800322e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003232:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d015      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003240:	4b0d      	ldr	r3, [pc, #52]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003246:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324e:	490a      	ldr	r1, [pc, #40]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800325e:	d105      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003260:	4b05      	ldr	r3, [pc, #20]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4a04      	ldr	r2, [pc, #16]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800326a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800326c:	7cbb      	ldrb	r3, [r7, #18]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40021000 	.word	0x40021000

0800327c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e049      	b.n	8003322 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d106      	bne.n	80032a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7fe f984 	bl	80015b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3304      	adds	r3, #4
 80032b8:	4619      	mov	r1, r3
 80032ba:	4610      	mov	r0, r2
 80032bc:	f001 f832 	bl	8004324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b01      	cmp	r3, #1
 800333e:	d001      	beq.n	8003344 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e04a      	b.n	80033da <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a21      	ldr	r2, [pc, #132]	; (80033e8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d018      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0x6c>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800336e:	d013      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0x6c>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a1d      	ldr	r2, [pc, #116]	; (80033ec <HAL_TIM_Base_Start_IT+0xc0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00e      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0x6c>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a1c      	ldr	r2, [pc, #112]	; (80033f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d009      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0x6c>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a1a      	ldr	r2, [pc, #104]	; (80033f4 <HAL_TIM_Base_Start_IT+0xc8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d004      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0x6c>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a19      	ldr	r2, [pc, #100]	; (80033f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d115      	bne.n	80033c4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	4b17      	ldr	r3, [pc, #92]	; (80033fc <HAL_TIM_Base_Start_IT+0xd0>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b06      	cmp	r3, #6
 80033a8:	d015      	beq.n	80033d6 <HAL_TIM_Base_Start_IT+0xaa>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b0:	d011      	beq.n	80033d6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0201 	orr.w	r2, r2, #1
 80033c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c2:	e008      	b.n	80033d6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	e000      	b.n	80033d8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40012c00 	.word	0x40012c00
 80033ec:	40000400 	.word	0x40000400
 80033f0:	40000800 	.word	0x40000800
 80033f4:	40013400 	.word	0x40013400
 80033f8:	40014000 	.word	0x40014000
 80033fc:	00010007 	.word	0x00010007

08003400 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e049      	b.n	80034a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d106      	bne.n	800342c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f841 	bl	80034ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3304      	adds	r3, #4
 800343c:	4619      	mov	r1, r3
 800343e:	4610      	mov	r0, r2
 8003440:	f000 ff70 	bl	8004324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d109      	bne.n	80034e8 <HAL_TIM_PWM_Start+0x24>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b01      	cmp	r3, #1
 80034de:	bf14      	ite	ne
 80034e0:	2301      	movne	r3, #1
 80034e2:	2300      	moveq	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	e03c      	b.n	8003562 <HAL_TIM_PWM_Start+0x9e>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d109      	bne.n	8003502 <HAL_TIM_PWM_Start+0x3e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	bf14      	ite	ne
 80034fa:	2301      	movne	r3, #1
 80034fc:	2300      	moveq	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	e02f      	b.n	8003562 <HAL_TIM_PWM_Start+0x9e>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b08      	cmp	r3, #8
 8003506:	d109      	bne.n	800351c <HAL_TIM_PWM_Start+0x58>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b01      	cmp	r3, #1
 8003512:	bf14      	ite	ne
 8003514:	2301      	movne	r3, #1
 8003516:	2300      	moveq	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	e022      	b.n	8003562 <HAL_TIM_PWM_Start+0x9e>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	2b0c      	cmp	r3, #12
 8003520:	d109      	bne.n	8003536 <HAL_TIM_PWM_Start+0x72>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b01      	cmp	r3, #1
 800352c:	bf14      	ite	ne
 800352e:	2301      	movne	r3, #1
 8003530:	2300      	moveq	r3, #0
 8003532:	b2db      	uxtb	r3, r3
 8003534:	e015      	b.n	8003562 <HAL_TIM_PWM_Start+0x9e>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b10      	cmp	r3, #16
 800353a:	d109      	bne.n	8003550 <HAL_TIM_PWM_Start+0x8c>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b01      	cmp	r3, #1
 8003546:	bf14      	ite	ne
 8003548:	2301      	movne	r3, #1
 800354a:	2300      	moveq	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	e008      	b.n	8003562 <HAL_TIM_PWM_Start+0x9e>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b01      	cmp	r3, #1
 800355a:	bf14      	ite	ne
 800355c:	2301      	movne	r3, #1
 800355e:	2300      	moveq	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e097      	b.n	800369a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d104      	bne.n	800357a <HAL_TIM_PWM_Start+0xb6>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003578:	e023      	b.n	80035c2 <HAL_TIM_PWM_Start+0xfe>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b04      	cmp	r3, #4
 800357e:	d104      	bne.n	800358a <HAL_TIM_PWM_Start+0xc6>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003588:	e01b      	b.n	80035c2 <HAL_TIM_PWM_Start+0xfe>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b08      	cmp	r3, #8
 800358e:	d104      	bne.n	800359a <HAL_TIM_PWM_Start+0xd6>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003598:	e013      	b.n	80035c2 <HAL_TIM_PWM_Start+0xfe>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b0c      	cmp	r3, #12
 800359e:	d104      	bne.n	80035aa <HAL_TIM_PWM_Start+0xe6>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035a8:	e00b      	b.n	80035c2 <HAL_TIM_PWM_Start+0xfe>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b10      	cmp	r3, #16
 80035ae:	d104      	bne.n	80035ba <HAL_TIM_PWM_Start+0xf6>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035b8:	e003      	b.n	80035c2 <HAL_TIM_PWM_Start+0xfe>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2202      	movs	r2, #2
 80035be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2201      	movs	r2, #1
 80035c8:	6839      	ldr	r1, [r7, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f001 fbea 	bl	8004da4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a33      	ldr	r2, [pc, #204]	; (80036a4 <HAL_TIM_PWM_Start+0x1e0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d013      	beq.n	8003602 <HAL_TIM_PWM_Start+0x13e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a32      	ldr	r2, [pc, #200]	; (80036a8 <HAL_TIM_PWM_Start+0x1e4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00e      	beq.n	8003602 <HAL_TIM_PWM_Start+0x13e>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a30      	ldr	r2, [pc, #192]	; (80036ac <HAL_TIM_PWM_Start+0x1e8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d009      	beq.n	8003602 <HAL_TIM_PWM_Start+0x13e>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a2f      	ldr	r2, [pc, #188]	; (80036b0 <HAL_TIM_PWM_Start+0x1ec>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d004      	beq.n	8003602 <HAL_TIM_PWM_Start+0x13e>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a2d      	ldr	r2, [pc, #180]	; (80036b4 <HAL_TIM_PWM_Start+0x1f0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d101      	bne.n	8003606 <HAL_TIM_PWM_Start+0x142>
 8003602:	2301      	movs	r3, #1
 8003604:	e000      	b.n	8003608 <HAL_TIM_PWM_Start+0x144>
 8003606:	2300      	movs	r3, #0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d007      	beq.n	800361c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800361a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a20      	ldr	r2, [pc, #128]	; (80036a4 <HAL_TIM_PWM_Start+0x1e0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d018      	beq.n	8003658 <HAL_TIM_PWM_Start+0x194>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362e:	d013      	beq.n	8003658 <HAL_TIM_PWM_Start+0x194>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a20      	ldr	r2, [pc, #128]	; (80036b8 <HAL_TIM_PWM_Start+0x1f4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00e      	beq.n	8003658 <HAL_TIM_PWM_Start+0x194>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a1f      	ldr	r2, [pc, #124]	; (80036bc <HAL_TIM_PWM_Start+0x1f8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d009      	beq.n	8003658 <HAL_TIM_PWM_Start+0x194>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a17      	ldr	r2, [pc, #92]	; (80036a8 <HAL_TIM_PWM_Start+0x1e4>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d004      	beq.n	8003658 <HAL_TIM_PWM_Start+0x194>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a16      	ldr	r2, [pc, #88]	; (80036ac <HAL_TIM_PWM_Start+0x1e8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d115      	bne.n	8003684 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	4b18      	ldr	r3, [pc, #96]	; (80036c0 <HAL_TIM_PWM_Start+0x1fc>)
 8003660:	4013      	ands	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2b06      	cmp	r3, #6
 8003668:	d015      	beq.n	8003696 <HAL_TIM_PWM_Start+0x1d2>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003670:	d011      	beq.n	8003696 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f042 0201 	orr.w	r2, r2, #1
 8003680:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003682:	e008      	b.n	8003696 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0201 	orr.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	e000      	b.n	8003698 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003696:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40012c00 	.word	0x40012c00
 80036a8:	40013400 	.word	0x40013400
 80036ac:	40014000 	.word	0x40014000
 80036b0:	40014400 	.word	0x40014400
 80036b4:	40014800 	.word	0x40014800
 80036b8:	40000400 	.word	0x40000400
 80036bc:	40000800 	.word	0x40000800
 80036c0:	00010007 	.word	0x00010007

080036c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e049      	b.n	800376a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f841 	bl	8003772 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3304      	adds	r3, #4
 8003700:	4619      	mov	r1, r3
 8003702:	4610      	mov	r0, r2
 8003704:	f000 fe0e 	bl	8004324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
	...

08003788 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d104      	bne.n	80037a6 <HAL_TIM_IC_Start_IT+0x1e>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	e023      	b.n	80037ee <HAL_TIM_IC_Start_IT+0x66>
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d104      	bne.n	80037b6 <HAL_TIM_IC_Start_IT+0x2e>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	e01b      	b.n	80037ee <HAL_TIM_IC_Start_IT+0x66>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d104      	bne.n	80037c6 <HAL_TIM_IC_Start_IT+0x3e>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	e013      	b.n	80037ee <HAL_TIM_IC_Start_IT+0x66>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b0c      	cmp	r3, #12
 80037ca:	d104      	bne.n	80037d6 <HAL_TIM_IC_Start_IT+0x4e>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	e00b      	b.n	80037ee <HAL_TIM_IC_Start_IT+0x66>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b10      	cmp	r3, #16
 80037da:	d104      	bne.n	80037e6 <HAL_TIM_IC_Start_IT+0x5e>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	e003      	b.n	80037ee <HAL_TIM_IC_Start_IT+0x66>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d104      	bne.n	8003800 <HAL_TIM_IC_Start_IT+0x78>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	e013      	b.n	8003828 <HAL_TIM_IC_Start_IT+0xa0>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2b04      	cmp	r3, #4
 8003804:	d104      	bne.n	8003810 <HAL_TIM_IC_Start_IT+0x88>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800380c:	b2db      	uxtb	r3, r3
 800380e:	e00b      	b.n	8003828 <HAL_TIM_IC_Start_IT+0xa0>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	2b08      	cmp	r3, #8
 8003814:	d104      	bne.n	8003820 <HAL_TIM_IC_Start_IT+0x98>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800381c:	b2db      	uxtb	r3, r3
 800381e:	e003      	b.n	8003828 <HAL_TIM_IC_Start_IT+0xa0>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003826:	b2db      	uxtb	r3, r3
 8003828:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800382a:	7bbb      	ldrb	r3, [r7, #14]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d102      	bne.n	8003836 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003830:	7b7b      	ldrb	r3, [r7, #13]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d001      	beq.n	800383a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e0d8      	b.n	80039ec <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d104      	bne.n	800384a <HAL_TIM_IC_Start_IT+0xc2>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003848:	e023      	b.n	8003892 <HAL_TIM_IC_Start_IT+0x10a>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b04      	cmp	r3, #4
 800384e:	d104      	bne.n	800385a <HAL_TIM_IC_Start_IT+0xd2>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003858:	e01b      	b.n	8003892 <HAL_TIM_IC_Start_IT+0x10a>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b08      	cmp	r3, #8
 800385e:	d104      	bne.n	800386a <HAL_TIM_IC_Start_IT+0xe2>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003868:	e013      	b.n	8003892 <HAL_TIM_IC_Start_IT+0x10a>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b0c      	cmp	r3, #12
 800386e:	d104      	bne.n	800387a <HAL_TIM_IC_Start_IT+0xf2>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003878:	e00b      	b.n	8003892 <HAL_TIM_IC_Start_IT+0x10a>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b10      	cmp	r3, #16
 800387e:	d104      	bne.n	800388a <HAL_TIM_IC_Start_IT+0x102>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003888:	e003      	b.n	8003892 <HAL_TIM_IC_Start_IT+0x10a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2202      	movs	r2, #2
 800388e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d104      	bne.n	80038a2 <HAL_TIM_IC_Start_IT+0x11a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a0:	e013      	b.n	80038ca <HAL_TIM_IC_Start_IT+0x142>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d104      	bne.n	80038b2 <HAL_TIM_IC_Start_IT+0x12a>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038b0:	e00b      	b.n	80038ca <HAL_TIM_IC_Start_IT+0x142>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d104      	bne.n	80038c2 <HAL_TIM_IC_Start_IT+0x13a>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038c0:	e003      	b.n	80038ca <HAL_TIM_IC_Start_IT+0x142>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2202      	movs	r2, #2
 80038c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b0c      	cmp	r3, #12
 80038ce:	d841      	bhi.n	8003954 <HAL_TIM_IC_Start_IT+0x1cc>
 80038d0:	a201      	add	r2, pc, #4	; (adr r2, 80038d8 <HAL_TIM_IC_Start_IT+0x150>)
 80038d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d6:	bf00      	nop
 80038d8:	0800390d 	.word	0x0800390d
 80038dc:	08003955 	.word	0x08003955
 80038e0:	08003955 	.word	0x08003955
 80038e4:	08003955 	.word	0x08003955
 80038e8:	0800391f 	.word	0x0800391f
 80038ec:	08003955 	.word	0x08003955
 80038f0:	08003955 	.word	0x08003955
 80038f4:	08003955 	.word	0x08003955
 80038f8:	08003931 	.word	0x08003931
 80038fc:	08003955 	.word	0x08003955
 8003900:	08003955 	.word	0x08003955
 8003904:	08003955 	.word	0x08003955
 8003908:	08003943 	.word	0x08003943
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0202 	orr.w	r2, r2, #2
 800391a:	60da      	str	r2, [r3, #12]
      break;
 800391c:	e01d      	b.n	800395a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0204 	orr.w	r2, r2, #4
 800392c:	60da      	str	r2, [r3, #12]
      break;
 800392e:	e014      	b.n	800395a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0208 	orr.w	r2, r2, #8
 800393e:	60da      	str	r2, [r3, #12]
      break;
 8003940:	e00b      	b.n	800395a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f042 0210 	orr.w	r2, r2, #16
 8003950:	60da      	str	r2, [r3, #12]
      break;
 8003952:	e002      	b.n	800395a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	73fb      	strb	r3, [r7, #15]
      break;
 8003958:	bf00      	nop
  }

  if (status == HAL_OK)
 800395a:	7bfb      	ldrb	r3, [r7, #15]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d144      	bne.n	80039ea <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2201      	movs	r2, #1
 8003966:	6839      	ldr	r1, [r7, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f001 fa1b 	bl	8004da4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a20      	ldr	r2, [pc, #128]	; (80039f4 <HAL_TIM_IC_Start_IT+0x26c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d018      	beq.n	80039aa <HAL_TIM_IC_Start_IT+0x222>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003980:	d013      	beq.n	80039aa <HAL_TIM_IC_Start_IT+0x222>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a1c      	ldr	r2, [pc, #112]	; (80039f8 <HAL_TIM_IC_Start_IT+0x270>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d00e      	beq.n	80039aa <HAL_TIM_IC_Start_IT+0x222>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a1a      	ldr	r2, [pc, #104]	; (80039fc <HAL_TIM_IC_Start_IT+0x274>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d009      	beq.n	80039aa <HAL_TIM_IC_Start_IT+0x222>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a19      	ldr	r2, [pc, #100]	; (8003a00 <HAL_TIM_IC_Start_IT+0x278>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d004      	beq.n	80039aa <HAL_TIM_IC_Start_IT+0x222>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a17      	ldr	r2, [pc, #92]	; (8003a04 <HAL_TIM_IC_Start_IT+0x27c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d115      	bne.n	80039d6 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <HAL_TIM_IC_Start_IT+0x280>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b06      	cmp	r3, #6
 80039ba:	d015      	beq.n	80039e8 <HAL_TIM_IC_Start_IT+0x260>
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c2:	d011      	beq.n	80039e8 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0201 	orr.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d4:	e008      	b.n	80039e8 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0201 	orr.w	r2, r2, #1
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	e000      	b.n	80039ea <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40012c00 	.word	0x40012c00
 80039f8:	40000400 	.word	0x40000400
 80039fc:	40000800 	.word	0x40000800
 8003a00:	40013400 	.word	0x40013400
 8003a04:	40014000 	.word	0x40014000
 8003a08:	00010007 	.word	0x00010007

08003a0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d122      	bne.n	8003a68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d11b      	bne.n	8003a68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f06f 0202 	mvn.w	r2, #2
 8003a38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7fd fa54 	bl	8000efc <HAL_TIM_IC_CaptureCallback>
 8003a54:	e005      	b.n	8003a62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fc46 	bl	80042e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fc4d 	bl	80042fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f003 0304 	and.w	r3, r3, #4
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d122      	bne.n	8003abc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d11b      	bne.n	8003abc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f06f 0204 	mvn.w	r2, #4
 8003a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2202      	movs	r2, #2
 8003a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fd fa2a 	bl	8000efc <HAL_TIM_IC_CaptureCallback>
 8003aa8:	e005      	b.n	8003ab6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fc1c 	bl	80042e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 fc23 	bl	80042fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b08      	cmp	r3, #8
 8003ac8:	d122      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d11b      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f06f 0208 	mvn.w	r2, #8
 8003ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2204      	movs	r2, #4
 8003ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7fd fa00 	bl	8000efc <HAL_TIM_IC_CaptureCallback>
 8003afc:	e005      	b.n	8003b0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fbf2 	bl	80042e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fbf9 	bl	80042fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f003 0310 	and.w	r3, r3, #16
 8003b1a:	2b10      	cmp	r3, #16
 8003b1c:	d122      	bne.n	8003b64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f003 0310 	and.w	r3, r3, #16
 8003b28:	2b10      	cmp	r3, #16
 8003b2a:	d11b      	bne.n	8003b64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0210 	mvn.w	r2, #16
 8003b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2208      	movs	r2, #8
 8003b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7fd f9d6 	bl	8000efc <HAL_TIM_IC_CaptureCallback>
 8003b50:	e005      	b.n	8003b5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fbc8 	bl	80042e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fbcf 	bl	80042fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d10e      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d107      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f06f 0201 	mvn.w	r2, #1
 8003b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fd fcd4 	bl	8001538 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9a:	2b80      	cmp	r3, #128	; 0x80
 8003b9c:	d10e      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba8:	2b80      	cmp	r3, #128	; 0x80
 8003baa:	d107      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f001 fafa 	bl	80051b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bca:	d10e      	bne.n	8003bea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd6:	2b80      	cmp	r3, #128	; 0x80
 8003bd8:	d107      	bne.n	8003bea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f001 faed 	bl	80051c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf4:	2b40      	cmp	r3, #64	; 0x40
 8003bf6:	d10e      	bne.n	8003c16 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c02:	2b40      	cmp	r3, #64	; 0x40
 8003c04:	d107      	bne.n	8003c16 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 fb7d 	bl	8004310 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	d10e      	bne.n	8003c42 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f003 0320 	and.w	r3, r3, #32
 8003c2e:	2b20      	cmp	r3, #32
 8003c30:	d107      	bne.n	8003c42 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f06f 0220 	mvn.w	r2, #32
 8003c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f001 faad 	bl	800519c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c50:	d10f      	bne.n	8003c72 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c60:	d107      	bne.n	8003c72 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f001 fab3 	bl	80051d8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c80:	d10f      	bne.n	8003ca2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c90:	d107      	bne.n	8003ca2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f001 faa5 	bl	80051ec <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cb0:	d10f      	bne.n	8003cd2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cc0:	d107      	bne.n	8003cd2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f001 fa97 	bl	8005200 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ce0:	d10f      	bne.n	8003d02 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cf0:	d107      	bne.n	8003d02 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f001 fa89 	bl	8005214 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d02:	bf00      	nop
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b086      	sub	sp, #24
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003d24:	2302      	movs	r3, #2
 8003d26:	e088      	b.n	8003e3a <HAL_TIM_IC_ConfigChannel+0x130>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d11b      	bne.n	8003d6e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	6819      	ldr	r1, [r3, #0]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f000 fe73 	bl	8004a30 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	699a      	ldr	r2, [r3, #24]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 020c 	bic.w	r2, r2, #12
 8003d58:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6999      	ldr	r1, [r3, #24]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	619a      	str	r2, [r3, #24]
 8003d6c:	e060      	b.n	8003e30 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d11c      	bne.n	8003dae <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6818      	ldr	r0, [r3, #0]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	6819      	ldr	r1, [r3, #0]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f000 feeb 	bl	8004b5e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d96:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6999      	ldr	r1, [r3, #24]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	021a      	lsls	r2, r3, #8
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	619a      	str	r2, [r3, #24]
 8003dac:	e040      	b.n	8003e30 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d11b      	bne.n	8003dec <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6818      	ldr	r0, [r3, #0]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	6819      	ldr	r1, [r3, #0]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f000 ff38 	bl	8004c38 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69da      	ldr	r2, [r3, #28]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 020c 	bic.w	r2, r2, #12
 8003dd6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	69d9      	ldr	r1, [r3, #28]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	61da      	str	r2, [r3, #28]
 8003dea:	e021      	b.n	8003e30 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b0c      	cmp	r3, #12
 8003df0:	d11c      	bne.n	8003e2c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	6819      	ldr	r1, [r3, #0]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f000 ff55 	bl	8004cb0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69da      	ldr	r2, [r3, #28]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003e14:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69d9      	ldr	r1, [r3, #28]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	021a      	lsls	r2, r3, #8
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	61da      	str	r2, [r3, #28]
 8003e2a:	e001      	b.n	8003e30 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e0ff      	b.n	8004062 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b14      	cmp	r3, #20
 8003e6e:	f200 80f0 	bhi.w	8004052 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003e72:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e78:	08003ecd 	.word	0x08003ecd
 8003e7c:	08004053 	.word	0x08004053
 8003e80:	08004053 	.word	0x08004053
 8003e84:	08004053 	.word	0x08004053
 8003e88:	08003f0d 	.word	0x08003f0d
 8003e8c:	08004053 	.word	0x08004053
 8003e90:	08004053 	.word	0x08004053
 8003e94:	08004053 	.word	0x08004053
 8003e98:	08003f4f 	.word	0x08003f4f
 8003e9c:	08004053 	.word	0x08004053
 8003ea0:	08004053 	.word	0x08004053
 8003ea4:	08004053 	.word	0x08004053
 8003ea8:	08003f8f 	.word	0x08003f8f
 8003eac:	08004053 	.word	0x08004053
 8003eb0:	08004053 	.word	0x08004053
 8003eb4:	08004053 	.word	0x08004053
 8003eb8:	08003fd1 	.word	0x08003fd1
 8003ebc:	08004053 	.word	0x08004053
 8003ec0:	08004053 	.word	0x08004053
 8003ec4:	08004053 	.word	0x08004053
 8003ec8:	08004011 	.word	0x08004011
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68b9      	ldr	r1, [r7, #8]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fab6 	bl	8004444 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699a      	ldr	r2, [r3, #24]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0208 	orr.w	r2, r2, #8
 8003ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0204 	bic.w	r2, r2, #4
 8003ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6999      	ldr	r1, [r3, #24]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	619a      	str	r2, [r3, #24]
      break;
 8003f0a:	e0a5      	b.n	8004058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fb26 	bl	8004564 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699a      	ldr	r2, [r3, #24]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699a      	ldr	r2, [r3, #24]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6999      	ldr	r1, [r3, #24]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	021a      	lsls	r2, r3, #8
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	619a      	str	r2, [r3, #24]
      break;
 8003f4c:	e084      	b.n	8004058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68b9      	ldr	r1, [r7, #8]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fb8f 	bl	8004678 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	69da      	ldr	r2, [r3, #28]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0208 	orr.w	r2, r2, #8
 8003f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0204 	bic.w	r2, r2, #4
 8003f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69d9      	ldr	r1, [r3, #28]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	61da      	str	r2, [r3, #28]
      break;
 8003f8c:	e064      	b.n	8004058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fbf7 	bl	8004788 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69da      	ldr	r2, [r3, #28]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69d9      	ldr	r1, [r3, #28]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	021a      	lsls	r2, r3, #8
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	61da      	str	r2, [r3, #28]
      break;
 8003fce:	e043      	b.n	8004058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68b9      	ldr	r1, [r7, #8]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 fc60 	bl	800489c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0208 	orr.w	r2, r2, #8
 8003fea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0204 	bic.w	r2, r2, #4
 8003ffa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	691a      	ldr	r2, [r3, #16]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800400e:	e023      	b.n	8004058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68b9      	ldr	r1, [r7, #8]
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fca4 	bl	8004964 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800402a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800403a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	021a      	lsls	r2, r3, #8
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004050:	e002      	b.n	8004058 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	75fb      	strb	r3, [r7, #23]
      break;
 8004056:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004060:	7dfb      	ldrb	r3, [r7, #23]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop

0800406c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_TIM_ConfigClockSource+0x1c>
 8004084:	2302      	movs	r3, #2
 8004086:	e0de      	b.n	8004246 <HAL_TIM_ConfigClockSource+0x1da>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80040a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a63      	ldr	r2, [pc, #396]	; (8004250 <HAL_TIM_ConfigClockSource+0x1e4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	f000 80a9 	beq.w	800421a <HAL_TIM_ConfigClockSource+0x1ae>
 80040c8:	4a61      	ldr	r2, [pc, #388]	; (8004250 <HAL_TIM_ConfigClockSource+0x1e4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	f200 80ae 	bhi.w	800422c <HAL_TIM_ConfigClockSource+0x1c0>
 80040d0:	4a60      	ldr	r2, [pc, #384]	; (8004254 <HAL_TIM_ConfigClockSource+0x1e8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	f000 80a1 	beq.w	800421a <HAL_TIM_ConfigClockSource+0x1ae>
 80040d8:	4a5e      	ldr	r2, [pc, #376]	; (8004254 <HAL_TIM_ConfigClockSource+0x1e8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	f200 80a6 	bhi.w	800422c <HAL_TIM_ConfigClockSource+0x1c0>
 80040e0:	4a5d      	ldr	r2, [pc, #372]	; (8004258 <HAL_TIM_ConfigClockSource+0x1ec>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	f000 8099 	beq.w	800421a <HAL_TIM_ConfigClockSource+0x1ae>
 80040e8:	4a5b      	ldr	r2, [pc, #364]	; (8004258 <HAL_TIM_ConfigClockSource+0x1ec>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	f200 809e 	bhi.w	800422c <HAL_TIM_ConfigClockSource+0x1c0>
 80040f0:	4a5a      	ldr	r2, [pc, #360]	; (800425c <HAL_TIM_ConfigClockSource+0x1f0>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	f000 8091 	beq.w	800421a <HAL_TIM_ConfigClockSource+0x1ae>
 80040f8:	4a58      	ldr	r2, [pc, #352]	; (800425c <HAL_TIM_ConfigClockSource+0x1f0>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	f200 8096 	bhi.w	800422c <HAL_TIM_ConfigClockSource+0x1c0>
 8004100:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004104:	f000 8089 	beq.w	800421a <HAL_TIM_ConfigClockSource+0x1ae>
 8004108:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800410c:	f200 808e 	bhi.w	800422c <HAL_TIM_ConfigClockSource+0x1c0>
 8004110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004114:	d03e      	beq.n	8004194 <HAL_TIM_ConfigClockSource+0x128>
 8004116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800411a:	f200 8087 	bhi.w	800422c <HAL_TIM_ConfigClockSource+0x1c0>
 800411e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004122:	f000 8086 	beq.w	8004232 <HAL_TIM_ConfigClockSource+0x1c6>
 8004126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412a:	d87f      	bhi.n	800422c <HAL_TIM_ConfigClockSource+0x1c0>
 800412c:	2b70      	cmp	r3, #112	; 0x70
 800412e:	d01a      	beq.n	8004166 <HAL_TIM_ConfigClockSource+0xfa>
 8004130:	2b70      	cmp	r3, #112	; 0x70
 8004132:	d87b      	bhi.n	800422c <HAL_TIM_ConfigClockSource+0x1c0>
 8004134:	2b60      	cmp	r3, #96	; 0x60
 8004136:	d050      	beq.n	80041da <HAL_TIM_ConfigClockSource+0x16e>
 8004138:	2b60      	cmp	r3, #96	; 0x60
 800413a:	d877      	bhi.n	800422c <HAL_TIM_ConfigClockSource+0x1c0>
 800413c:	2b50      	cmp	r3, #80	; 0x50
 800413e:	d03c      	beq.n	80041ba <HAL_TIM_ConfigClockSource+0x14e>
 8004140:	2b50      	cmp	r3, #80	; 0x50
 8004142:	d873      	bhi.n	800422c <HAL_TIM_ConfigClockSource+0x1c0>
 8004144:	2b40      	cmp	r3, #64	; 0x40
 8004146:	d058      	beq.n	80041fa <HAL_TIM_ConfigClockSource+0x18e>
 8004148:	2b40      	cmp	r3, #64	; 0x40
 800414a:	d86f      	bhi.n	800422c <HAL_TIM_ConfigClockSource+0x1c0>
 800414c:	2b30      	cmp	r3, #48	; 0x30
 800414e:	d064      	beq.n	800421a <HAL_TIM_ConfigClockSource+0x1ae>
 8004150:	2b30      	cmp	r3, #48	; 0x30
 8004152:	d86b      	bhi.n	800422c <HAL_TIM_ConfigClockSource+0x1c0>
 8004154:	2b20      	cmp	r3, #32
 8004156:	d060      	beq.n	800421a <HAL_TIM_ConfigClockSource+0x1ae>
 8004158:	2b20      	cmp	r3, #32
 800415a:	d867      	bhi.n	800422c <HAL_TIM_ConfigClockSource+0x1c0>
 800415c:	2b00      	cmp	r3, #0
 800415e:	d05c      	beq.n	800421a <HAL_TIM_ConfigClockSource+0x1ae>
 8004160:	2b10      	cmp	r3, #16
 8004162:	d05a      	beq.n	800421a <HAL_TIM_ConfigClockSource+0x1ae>
 8004164:	e062      	b.n	800422c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	6899      	ldr	r1, [r3, #8]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f000 fdf5 	bl	8004d64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004188:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	609a      	str	r2, [r3, #8]
      break;
 8004192:	e04f      	b.n	8004234 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	6899      	ldr	r1, [r3, #8]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f000 fdde 	bl	8004d64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041b6:	609a      	str	r2, [r3, #8]
      break;
 80041b8:	e03c      	b.n	8004234 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6818      	ldr	r0, [r3, #0]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	6859      	ldr	r1, [r3, #4]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	461a      	mov	r2, r3
 80041c8:	f000 fc9a 	bl	8004b00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2150      	movs	r1, #80	; 0x50
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 fda9 	bl	8004d2a <TIM_ITRx_SetConfig>
      break;
 80041d8:	e02c      	b.n	8004234 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6818      	ldr	r0, [r3, #0]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	6859      	ldr	r1, [r3, #4]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	461a      	mov	r2, r3
 80041e8:	f000 fcf6 	bl	8004bd8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2160      	movs	r1, #96	; 0x60
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fd99 	bl	8004d2a <TIM_ITRx_SetConfig>
      break;
 80041f8:	e01c      	b.n	8004234 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6818      	ldr	r0, [r3, #0]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	6859      	ldr	r1, [r3, #4]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	461a      	mov	r2, r3
 8004208:	f000 fc7a 	bl	8004b00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2140      	movs	r1, #64	; 0x40
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fd89 	bl	8004d2a <TIM_ITRx_SetConfig>
      break;
 8004218:	e00c      	b.n	8004234 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4619      	mov	r1, r3
 8004224:	4610      	mov	r0, r2
 8004226:	f000 fd80 	bl	8004d2a <TIM_ITRx_SetConfig>
      break;
 800422a:	e003      	b.n	8004234 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	73fb      	strb	r3, [r7, #15]
      break;
 8004230:	e000      	b.n	8004234 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004232:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004244:	7bfb      	ldrb	r3, [r7, #15]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	00100070 	.word	0x00100070
 8004254:	00100040 	.word	0x00100040
 8004258:	00100030 	.word	0x00100030
 800425c:	00100020 	.word	0x00100020

08004260 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b0c      	cmp	r3, #12
 8004272:	d831      	bhi.n	80042d8 <HAL_TIM_ReadCapturedValue+0x78>
 8004274:	a201      	add	r2, pc, #4	; (adr r2, 800427c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427a:	bf00      	nop
 800427c:	080042b1 	.word	0x080042b1
 8004280:	080042d9 	.word	0x080042d9
 8004284:	080042d9 	.word	0x080042d9
 8004288:	080042d9 	.word	0x080042d9
 800428c:	080042bb 	.word	0x080042bb
 8004290:	080042d9 	.word	0x080042d9
 8004294:	080042d9 	.word	0x080042d9
 8004298:	080042d9 	.word	0x080042d9
 800429c:	080042c5 	.word	0x080042c5
 80042a0:	080042d9 	.word	0x080042d9
 80042a4:	080042d9 	.word	0x080042d9
 80042a8:	080042d9 	.word	0x080042d9
 80042ac:	080042cf 	.word	0x080042cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b6:	60fb      	str	r3, [r7, #12]

      break;
 80042b8:	e00f      	b.n	80042da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c0:	60fb      	str	r3, [r7, #12]

      break;
 80042c2:	e00a      	b.n	80042da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ca:	60fb      	str	r3, [r7, #12]

      break;
 80042cc:	e005      	b.n	80042da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	60fb      	str	r3, [r7, #12]

      break;
 80042d6:	e000      	b.n	80042da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80042d8:	bf00      	nop
  }

  return tmpreg;
 80042da:	68fb      	ldr	r3, [r7, #12]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a3c      	ldr	r2, [pc, #240]	; (8004428 <TIM_Base_SetConfig+0x104>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d00f      	beq.n	800435c <TIM_Base_SetConfig+0x38>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004342:	d00b      	beq.n	800435c <TIM_Base_SetConfig+0x38>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a39      	ldr	r2, [pc, #228]	; (800442c <TIM_Base_SetConfig+0x108>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d007      	beq.n	800435c <TIM_Base_SetConfig+0x38>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a38      	ldr	r2, [pc, #224]	; (8004430 <TIM_Base_SetConfig+0x10c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d003      	beq.n	800435c <TIM_Base_SetConfig+0x38>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a37      	ldr	r2, [pc, #220]	; (8004434 <TIM_Base_SetConfig+0x110>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d108      	bne.n	800436e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a2d      	ldr	r2, [pc, #180]	; (8004428 <TIM_Base_SetConfig+0x104>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d01b      	beq.n	80043ae <TIM_Base_SetConfig+0x8a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437c:	d017      	beq.n	80043ae <TIM_Base_SetConfig+0x8a>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a2a      	ldr	r2, [pc, #168]	; (800442c <TIM_Base_SetConfig+0x108>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d013      	beq.n	80043ae <TIM_Base_SetConfig+0x8a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a29      	ldr	r2, [pc, #164]	; (8004430 <TIM_Base_SetConfig+0x10c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00f      	beq.n	80043ae <TIM_Base_SetConfig+0x8a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a28      	ldr	r2, [pc, #160]	; (8004434 <TIM_Base_SetConfig+0x110>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00b      	beq.n	80043ae <TIM_Base_SetConfig+0x8a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a27      	ldr	r2, [pc, #156]	; (8004438 <TIM_Base_SetConfig+0x114>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d007      	beq.n	80043ae <TIM_Base_SetConfig+0x8a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a26      	ldr	r2, [pc, #152]	; (800443c <TIM_Base_SetConfig+0x118>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d003      	beq.n	80043ae <TIM_Base_SetConfig+0x8a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a25      	ldr	r2, [pc, #148]	; (8004440 <TIM_Base_SetConfig+0x11c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d108      	bne.n	80043c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4313      	orrs	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a10      	ldr	r2, [pc, #64]	; (8004428 <TIM_Base_SetConfig+0x104>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d00f      	beq.n	800440c <TIM_Base_SetConfig+0xe8>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a11      	ldr	r2, [pc, #68]	; (8004434 <TIM_Base_SetConfig+0x110>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d00b      	beq.n	800440c <TIM_Base_SetConfig+0xe8>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a10      	ldr	r2, [pc, #64]	; (8004438 <TIM_Base_SetConfig+0x114>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d007      	beq.n	800440c <TIM_Base_SetConfig+0xe8>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a0f      	ldr	r2, [pc, #60]	; (800443c <TIM_Base_SetConfig+0x118>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d003      	beq.n	800440c <TIM_Base_SetConfig+0xe8>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a0e      	ldr	r2, [pc, #56]	; (8004440 <TIM_Base_SetConfig+0x11c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d103      	bne.n	8004414 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	615a      	str	r2, [r3, #20]
}
 800441a:	bf00      	nop
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40012c00 	.word	0x40012c00
 800442c:	40000400 	.word	0x40000400
 8004430:	40000800 	.word	0x40000800
 8004434:	40013400 	.word	0x40013400
 8004438:	40014000 	.word	0x40014000
 800443c:	40014400 	.word	0x40014400
 8004440:	40014800 	.word	0x40014800

08004444 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	f023 0201 	bic.w	r2, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0303 	bic.w	r3, r3, #3
 800447e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f023 0302 	bic.w	r3, r3, #2
 8004490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a2c      	ldr	r2, [pc, #176]	; (8004550 <TIM_OC1_SetConfig+0x10c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00f      	beq.n	80044c4 <TIM_OC1_SetConfig+0x80>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a2b      	ldr	r2, [pc, #172]	; (8004554 <TIM_OC1_SetConfig+0x110>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00b      	beq.n	80044c4 <TIM_OC1_SetConfig+0x80>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a2a      	ldr	r2, [pc, #168]	; (8004558 <TIM_OC1_SetConfig+0x114>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d007      	beq.n	80044c4 <TIM_OC1_SetConfig+0x80>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a29      	ldr	r2, [pc, #164]	; (800455c <TIM_OC1_SetConfig+0x118>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d003      	beq.n	80044c4 <TIM_OC1_SetConfig+0x80>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a28      	ldr	r2, [pc, #160]	; (8004560 <TIM_OC1_SetConfig+0x11c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d10c      	bne.n	80044de <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f023 0308 	bic.w	r3, r3, #8
 80044ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f023 0304 	bic.w	r3, r3, #4
 80044dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a1b      	ldr	r2, [pc, #108]	; (8004550 <TIM_OC1_SetConfig+0x10c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00f      	beq.n	8004506 <TIM_OC1_SetConfig+0xc2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a1a      	ldr	r2, [pc, #104]	; (8004554 <TIM_OC1_SetConfig+0x110>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d00b      	beq.n	8004506 <TIM_OC1_SetConfig+0xc2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a19      	ldr	r2, [pc, #100]	; (8004558 <TIM_OC1_SetConfig+0x114>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d007      	beq.n	8004506 <TIM_OC1_SetConfig+0xc2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a18      	ldr	r2, [pc, #96]	; (800455c <TIM_OC1_SetConfig+0x118>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d003      	beq.n	8004506 <TIM_OC1_SetConfig+0xc2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a17      	ldr	r2, [pc, #92]	; (8004560 <TIM_OC1_SetConfig+0x11c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d111      	bne.n	800452a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800450c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	4313      	orrs	r3, r2
 8004528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	621a      	str	r2, [r3, #32]
}
 8004544:	bf00      	nop
 8004546:	371c      	adds	r7, #28
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	40012c00 	.word	0x40012c00
 8004554:	40013400 	.word	0x40013400
 8004558:	40014000 	.word	0x40014000
 800455c:	40014400 	.word	0x40014400
 8004560:	40014800 	.word	0x40014800

08004564 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	f023 0210 	bic.w	r2, r3, #16
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800459e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	021b      	lsls	r3, r3, #8
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f023 0320 	bic.w	r3, r3, #32
 80045b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4313      	orrs	r3, r2
 80045be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a28      	ldr	r2, [pc, #160]	; (8004664 <TIM_OC2_SetConfig+0x100>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d003      	beq.n	80045d0 <TIM_OC2_SetConfig+0x6c>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a27      	ldr	r2, [pc, #156]	; (8004668 <TIM_OC2_SetConfig+0x104>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d10d      	bne.n	80045ec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a1d      	ldr	r2, [pc, #116]	; (8004664 <TIM_OC2_SetConfig+0x100>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d00f      	beq.n	8004614 <TIM_OC2_SetConfig+0xb0>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a1c      	ldr	r2, [pc, #112]	; (8004668 <TIM_OC2_SetConfig+0x104>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d00b      	beq.n	8004614 <TIM_OC2_SetConfig+0xb0>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a1b      	ldr	r2, [pc, #108]	; (800466c <TIM_OC2_SetConfig+0x108>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d007      	beq.n	8004614 <TIM_OC2_SetConfig+0xb0>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a1a      	ldr	r2, [pc, #104]	; (8004670 <TIM_OC2_SetConfig+0x10c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d003      	beq.n	8004614 <TIM_OC2_SetConfig+0xb0>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a19      	ldr	r2, [pc, #100]	; (8004674 <TIM_OC2_SetConfig+0x110>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d113      	bne.n	800463c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800461a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004622:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	4313      	orrs	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	621a      	str	r2, [r3, #32]
}
 8004656:	bf00      	nop
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	40012c00 	.word	0x40012c00
 8004668:	40013400 	.word	0x40013400
 800466c:	40014000 	.word	0x40014000
 8004670:	40014400 	.word	0x40014400
 8004674:	40014800 	.word	0x40014800

08004678 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0303 	bic.w	r3, r3, #3
 80046b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	021b      	lsls	r3, r3, #8
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a27      	ldr	r2, [pc, #156]	; (8004774 <TIM_OC3_SetConfig+0xfc>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d003      	beq.n	80046e2 <TIM_OC3_SetConfig+0x6a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a26      	ldr	r2, [pc, #152]	; (8004778 <TIM_OC3_SetConfig+0x100>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d10d      	bne.n	80046fe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	021b      	lsls	r3, r3, #8
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a1c      	ldr	r2, [pc, #112]	; (8004774 <TIM_OC3_SetConfig+0xfc>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00f      	beq.n	8004726 <TIM_OC3_SetConfig+0xae>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a1b      	ldr	r2, [pc, #108]	; (8004778 <TIM_OC3_SetConfig+0x100>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00b      	beq.n	8004726 <TIM_OC3_SetConfig+0xae>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a1a      	ldr	r2, [pc, #104]	; (800477c <TIM_OC3_SetConfig+0x104>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d007      	beq.n	8004726 <TIM_OC3_SetConfig+0xae>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a19      	ldr	r2, [pc, #100]	; (8004780 <TIM_OC3_SetConfig+0x108>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d003      	beq.n	8004726 <TIM_OC3_SetConfig+0xae>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a18      	ldr	r2, [pc, #96]	; (8004784 <TIM_OC3_SetConfig+0x10c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d113      	bne.n	800474e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800472c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	621a      	str	r2, [r3, #32]
}
 8004768:	bf00      	nop
 800476a:	371c      	adds	r7, #28
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	40012c00 	.word	0x40012c00
 8004778:	40013400 	.word	0x40013400
 800477c:	40014000 	.word	0x40014000
 8004780:	40014400 	.word	0x40014400
 8004784:	40014800 	.word	0x40014800

08004788 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	021b      	lsls	r3, r3, #8
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	031b      	lsls	r3, r3, #12
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a28      	ldr	r2, [pc, #160]	; (8004888 <TIM_OC4_SetConfig+0x100>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d003      	beq.n	80047f4 <TIM_OC4_SetConfig+0x6c>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a27      	ldr	r2, [pc, #156]	; (800488c <TIM_OC4_SetConfig+0x104>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d10d      	bne.n	8004810 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80047fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	031b      	lsls	r3, r3, #12
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	4313      	orrs	r3, r2
 8004806:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800480e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a1d      	ldr	r2, [pc, #116]	; (8004888 <TIM_OC4_SetConfig+0x100>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d00f      	beq.n	8004838 <TIM_OC4_SetConfig+0xb0>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a1c      	ldr	r2, [pc, #112]	; (800488c <TIM_OC4_SetConfig+0x104>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d00b      	beq.n	8004838 <TIM_OC4_SetConfig+0xb0>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a1b      	ldr	r2, [pc, #108]	; (8004890 <TIM_OC4_SetConfig+0x108>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d007      	beq.n	8004838 <TIM_OC4_SetConfig+0xb0>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a1a      	ldr	r2, [pc, #104]	; (8004894 <TIM_OC4_SetConfig+0x10c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d003      	beq.n	8004838 <TIM_OC4_SetConfig+0xb0>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a19      	ldr	r2, [pc, #100]	; (8004898 <TIM_OC4_SetConfig+0x110>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d113      	bne.n	8004860 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800483e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004846:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	019b      	lsls	r3, r3, #6
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	019b      	lsls	r3, r3, #6
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4313      	orrs	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	621a      	str	r2, [r3, #32]
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40012c00 	.word	0x40012c00
 800488c:	40013400 	.word	0x40013400
 8004890:	40014000 	.word	0x40014000
 8004894:	40014400 	.word	0x40014400
 8004898:	40014800 	.word	0x40014800

0800489c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80048e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	041b      	lsls	r3, r3, #16
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a17      	ldr	r2, [pc, #92]	; (8004950 <TIM_OC5_SetConfig+0xb4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00f      	beq.n	8004916 <TIM_OC5_SetConfig+0x7a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a16      	ldr	r2, [pc, #88]	; (8004954 <TIM_OC5_SetConfig+0xb8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d00b      	beq.n	8004916 <TIM_OC5_SetConfig+0x7a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a15      	ldr	r2, [pc, #84]	; (8004958 <TIM_OC5_SetConfig+0xbc>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d007      	beq.n	8004916 <TIM_OC5_SetConfig+0x7a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a14      	ldr	r2, [pc, #80]	; (800495c <TIM_OC5_SetConfig+0xc0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d003      	beq.n	8004916 <TIM_OC5_SetConfig+0x7a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a13      	ldr	r2, [pc, #76]	; (8004960 <TIM_OC5_SetConfig+0xc4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d109      	bne.n	800492a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800491c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	021b      	lsls	r3, r3, #8
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	4313      	orrs	r3, r2
 8004928:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	621a      	str	r2, [r3, #32]
}
 8004944:	bf00      	nop
 8004946:	371c      	adds	r7, #28
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	40012c00 	.word	0x40012c00
 8004954:	40013400 	.word	0x40013400
 8004958:	40014000 	.word	0x40014000
 800495c:	40014400 	.word	0x40014400
 8004960:	40014800 	.word	0x40014800

08004964 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	021b      	lsls	r3, r3, #8
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	051b      	lsls	r3, r3, #20
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a18      	ldr	r2, [pc, #96]	; (8004a1c <TIM_OC6_SetConfig+0xb8>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00f      	beq.n	80049e0 <TIM_OC6_SetConfig+0x7c>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a17      	ldr	r2, [pc, #92]	; (8004a20 <TIM_OC6_SetConfig+0xbc>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d00b      	beq.n	80049e0 <TIM_OC6_SetConfig+0x7c>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a16      	ldr	r2, [pc, #88]	; (8004a24 <TIM_OC6_SetConfig+0xc0>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d007      	beq.n	80049e0 <TIM_OC6_SetConfig+0x7c>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a15      	ldr	r2, [pc, #84]	; (8004a28 <TIM_OC6_SetConfig+0xc4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d003      	beq.n	80049e0 <TIM_OC6_SetConfig+0x7c>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a14      	ldr	r2, [pc, #80]	; (8004a2c <TIM_OC6_SetConfig+0xc8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d109      	bne.n	80049f4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	029b      	lsls	r3, r3, #10
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	621a      	str	r2, [r3, #32]
}
 8004a0e:	bf00      	nop
 8004a10:	371c      	adds	r7, #28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40012c00 	.word	0x40012c00
 8004a20:	40013400 	.word	0x40013400
 8004a24:	40014000 	.word	0x40014000
 8004a28:	40014400 	.word	0x40014400
 8004a2c:	40014800 	.word	0x40014800

08004a30 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	f023 0201 	bic.w	r2, r3, #1
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4a24      	ldr	r2, [pc, #144]	; (8004aec <TIM_TI1_SetConfig+0xbc>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d013      	beq.n	8004a86 <TIM_TI1_SetConfig+0x56>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a64:	d00f      	beq.n	8004a86 <TIM_TI1_SetConfig+0x56>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4a21      	ldr	r2, [pc, #132]	; (8004af0 <TIM_TI1_SetConfig+0xc0>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d00b      	beq.n	8004a86 <TIM_TI1_SetConfig+0x56>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4a20      	ldr	r2, [pc, #128]	; (8004af4 <TIM_TI1_SetConfig+0xc4>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d007      	beq.n	8004a86 <TIM_TI1_SetConfig+0x56>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4a1f      	ldr	r2, [pc, #124]	; (8004af8 <TIM_TI1_SetConfig+0xc8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d003      	beq.n	8004a86 <TIM_TI1_SetConfig+0x56>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4a1e      	ldr	r2, [pc, #120]	; (8004afc <TIM_TI1_SetConfig+0xcc>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d101      	bne.n	8004a8a <TIM_TI1_SetConfig+0x5a>
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <TIM_TI1_SetConfig+0x5c>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d008      	beq.n	8004aa2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f023 0303 	bic.w	r3, r3, #3
 8004a96:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	e003      	b.n	8004aaa <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f043 0301 	orr.w	r3, r3, #1
 8004aa8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ab0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	011b      	lsls	r3, r3, #4
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f023 030a 	bic.w	r3, r3, #10
 8004ac4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f003 030a 	and.w	r3, r3, #10
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	621a      	str	r2, [r3, #32]
}
 8004ade:	bf00      	nop
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	40012c00 	.word	0x40012c00
 8004af0:	40000400 	.word	0x40000400
 8004af4:	40000800 	.word	0x40000800
 8004af8:	40013400 	.word	0x40013400
 8004afc:	40014000 	.word	0x40014000

08004b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	f023 0201 	bic.w	r2, r3, #1
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f023 030a 	bic.w	r3, r3, #10
 8004b3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	621a      	str	r2, [r3, #32]
}
 8004b52:	bf00      	nop
 8004b54:	371c      	adds	r7, #28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b087      	sub	sp, #28
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	60f8      	str	r0, [r7, #12]
 8004b66:	60b9      	str	r1, [r7, #8]
 8004b68:	607a      	str	r2, [r7, #4]
 8004b6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	f023 0210 	bic.w	r2, r3, #16
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	021b      	lsls	r3, r3, #8
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	031b      	lsls	r3, r3, #12
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bb0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	621a      	str	r2, [r3, #32]
}
 8004bcc:	bf00      	nop
 8004bce:	371c      	adds	r7, #28
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	f023 0210 	bic.w	r2, r3, #16
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	031b      	lsls	r3, r3, #12
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	621a      	str	r2, [r3, #32]
}
 8004c2c:	bf00      	nop
 8004c2e:	371c      	adds	r7, #28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f023 0303 	bic.w	r3, r3, #3
 8004c64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	011b      	lsls	r3, r3, #4
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004c88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	621a      	str	r2, [r3, #32]
}
 8004ca4:	bf00      	nop
 8004ca6:	371c      	adds	r7, #28
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cdc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	031b      	lsls	r3, r3, #12
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004d02:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	031b      	lsls	r3, r3, #12
 8004d08:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	621a      	str	r2, [r3, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b085      	sub	sp, #20
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
 8004d32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f043 0307 	orr.w	r3, r3, #7
 8004d50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	609a      	str	r2, [r3, #8]
}
 8004d58:	bf00      	nop
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	021a      	lsls	r2, r3, #8
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	431a      	orrs	r2, r3
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	609a      	str	r2, [r3, #8]
}
 8004d98:	bf00      	nop
 8004d9a:	371c      	adds	r7, #28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f003 031f 	and.w	r3, r3, #31
 8004db6:	2201      	movs	r2, #1
 8004db8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a1a      	ldr	r2, [r3, #32]
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	43db      	mvns	r3, r3
 8004dc6:	401a      	ands	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a1a      	ldr	r2, [r3, #32]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f003 031f 	and.w	r3, r3, #31
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	621a      	str	r2, [r3, #32]
}
 8004de2:	bf00      	nop
 8004de4:	371c      	adds	r7, #28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
	...

08004df0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d109      	bne.n	8004e14 <HAL_TIMEx_PWMN_Start+0x24>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	bf14      	ite	ne
 8004e0c:	2301      	movne	r3, #1
 8004e0e:	2300      	moveq	r3, #0
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	e022      	b.n	8004e5a <HAL_TIMEx_PWMN_Start+0x6a>
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d109      	bne.n	8004e2e <HAL_TIMEx_PWMN_Start+0x3e>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	bf14      	ite	ne
 8004e26:	2301      	movne	r3, #1
 8004e28:	2300      	moveq	r3, #0
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	e015      	b.n	8004e5a <HAL_TIMEx_PWMN_Start+0x6a>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d109      	bne.n	8004e48 <HAL_TIMEx_PWMN_Start+0x58>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	bf14      	ite	ne
 8004e40:	2301      	movne	r3, #1
 8004e42:	2300      	moveq	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	e008      	b.n	8004e5a <HAL_TIMEx_PWMN_Start+0x6a>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	bf14      	ite	ne
 8004e54:	2301      	movne	r3, #1
 8004e56:	2300      	moveq	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e069      	b.n	8004f36 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d104      	bne.n	8004e72 <HAL_TIMEx_PWMN_Start+0x82>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e70:	e013      	b.n	8004e9a <HAL_TIMEx_PWMN_Start+0xaa>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	d104      	bne.n	8004e82 <HAL_TIMEx_PWMN_Start+0x92>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e80:	e00b      	b.n	8004e9a <HAL_TIMEx_PWMN_Start+0xaa>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d104      	bne.n	8004e92 <HAL_TIMEx_PWMN_Start+0xa2>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e90:	e003      	b.n	8004e9a <HAL_TIMEx_PWMN_Start+0xaa>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2202      	movs	r2, #2
 8004e96:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2204      	movs	r2, #4
 8004ea0:	6839      	ldr	r1, [r7, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 f9c0 	bl	8005228 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eb6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a20      	ldr	r2, [pc, #128]	; (8004f40 <HAL_TIMEx_PWMN_Start+0x150>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d018      	beq.n	8004ef4 <HAL_TIMEx_PWMN_Start+0x104>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eca:	d013      	beq.n	8004ef4 <HAL_TIMEx_PWMN_Start+0x104>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a1c      	ldr	r2, [pc, #112]	; (8004f44 <HAL_TIMEx_PWMN_Start+0x154>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00e      	beq.n	8004ef4 <HAL_TIMEx_PWMN_Start+0x104>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a1b      	ldr	r2, [pc, #108]	; (8004f48 <HAL_TIMEx_PWMN_Start+0x158>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d009      	beq.n	8004ef4 <HAL_TIMEx_PWMN_Start+0x104>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a19      	ldr	r2, [pc, #100]	; (8004f4c <HAL_TIMEx_PWMN_Start+0x15c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d004      	beq.n	8004ef4 <HAL_TIMEx_PWMN_Start+0x104>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a18      	ldr	r2, [pc, #96]	; (8004f50 <HAL_TIMEx_PWMN_Start+0x160>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d115      	bne.n	8004f20 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689a      	ldr	r2, [r3, #8]
 8004efa:	4b16      	ldr	r3, [pc, #88]	; (8004f54 <HAL_TIMEx_PWMN_Start+0x164>)
 8004efc:	4013      	ands	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b06      	cmp	r3, #6
 8004f04:	d015      	beq.n	8004f32 <HAL_TIMEx_PWMN_Start+0x142>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0c:	d011      	beq.n	8004f32 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f042 0201 	orr.w	r2, r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1e:	e008      	b.n	8004f32 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0201 	orr.w	r2, r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	e000      	b.n	8004f34 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	40012c00 	.word	0x40012c00
 8004f44:	40000400 	.word	0x40000400
 8004f48:	40000800 	.word	0x40000800
 8004f4c:	40013400 	.word	0x40013400
 8004f50:	40014000 	.word	0x40014000
 8004f54:	00010007 	.word	0x00010007

08004f58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e065      	b.n	800503c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a2c      	ldr	r2, [pc, #176]	; (8005048 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d004      	beq.n	8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a2b      	ldr	r2, [pc, #172]	; (800504c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d108      	bne.n	8004fb6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004faa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a1b      	ldr	r2, [pc, #108]	; (8005048 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d018      	beq.n	8005010 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe6:	d013      	beq.n	8005010 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a18      	ldr	r2, [pc, #96]	; (8005050 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d00e      	beq.n	8005010 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a17      	ldr	r2, [pc, #92]	; (8005054 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d009      	beq.n	8005010 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a12      	ldr	r2, [pc, #72]	; (800504c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d004      	beq.n	8005010 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a13      	ldr	r2, [pc, #76]	; (8005058 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d10c      	bne.n	800502a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005016:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	4313      	orrs	r3, r2
 8005020:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	40012c00 	.word	0x40012c00
 800504c:	40013400 	.word	0x40013400
 8005050:	40000400 	.word	0x40000400
 8005054:	40000800 	.word	0x40000800
 8005058:	40014000 	.word	0x40014000

0800505c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005074:	2302      	movs	r3, #2
 8005076:	e087      	b.n	8005188 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	4313      	orrs	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	041b      	lsls	r3, r3, #16
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a27      	ldr	r2, [pc, #156]	; (8005194 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d004      	beq.n	8005106 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a25      	ldr	r2, [pc, #148]	; (8005198 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d106      	bne.n	8005114 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	4313      	orrs	r3, r2
 8005112:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a1e      	ldr	r2, [pc, #120]	; (8005194 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d004      	beq.n	8005128 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a1d      	ldr	r2, [pc, #116]	; (8005198 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d126      	bne.n	8005176 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005132:	051b      	lsls	r3, r3, #20
 8005134:	4313      	orrs	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	4313      	orrs	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a0e      	ldr	r2, [pc, #56]	; (8005194 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d004      	beq.n	8005168 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a0d      	ldr	r2, [pc, #52]	; (8005198 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d106      	bne.n	8005176 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	40012c00 	.word	0x40012c00
 8005198:	40013400 	.word	0x40013400

0800519c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f003 031f 	and.w	r3, r3, #31
 800523a:	2204      	movs	r2, #4
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a1a      	ldr	r2, [r3, #32]
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	43db      	mvns	r3, r3
 800524a:	401a      	ands	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a1a      	ldr	r2, [r3, #32]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f003 031f 	and.w	r3, r3, #31
 800525a:	6879      	ldr	r1, [r7, #4]
 800525c:	fa01 f303 	lsl.w	r3, r1, r3
 8005260:	431a      	orrs	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	621a      	str	r2, [r3, #32]
}
 8005266:	bf00      	nop
 8005268:	371c      	adds	r7, #28
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b082      	sub	sp, #8
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e042      	b.n	800530a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fc fa3c 	bl	8001714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2224      	movs	r2, #36	; 0x24
 80052a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0201 	bic.w	r2, r2, #1
 80052b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fbfb 	bl	8005ab0 <UART_SetConfig>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e022      	b.n	800530a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 febb 	bl	8006048 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f042 0201 	orr.w	r2, r2, #1
 8005300:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 ff42 	bl	800618c <UART_CheckIdleState>
 8005308:	4603      	mov	r3, r0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b08a      	sub	sp, #40	; 0x28
 8005316:	af02      	add	r7, sp, #8
 8005318:	60f8      	str	r0, [r7, #12]
 800531a:	60b9      	str	r1, [r7, #8]
 800531c:	603b      	str	r3, [r7, #0]
 800531e:	4613      	mov	r3, r2
 8005320:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005328:	2b20      	cmp	r3, #32
 800532a:	f040 8083 	bne.w	8005434 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <HAL_UART_Transmit+0x28>
 8005334:	88fb      	ldrh	r3, [r7, #6]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e07b      	b.n	8005436 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <HAL_UART_Transmit+0x3a>
 8005348:	2302      	movs	r3, #2
 800534a:	e074      	b.n	8005436 <HAL_UART_Transmit+0x124>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2221      	movs	r2, #33	; 0x21
 8005360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005364:	f7fc fc18 	bl	8001b98 <HAL_GetTick>
 8005368:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	88fa      	ldrh	r2, [r7, #6]
 800536e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	88fa      	ldrh	r2, [r7, #6]
 8005376:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005382:	d108      	bne.n	8005396 <HAL_UART_Transmit+0x84>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d104      	bne.n	8005396 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800538c:	2300      	movs	r3, #0
 800538e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	61bb      	str	r3, [r7, #24]
 8005394:	e003      	b.n	800539e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800539a:	2300      	movs	r3, #0
 800539c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80053a6:	e02c      	b.n	8005402 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	2200      	movs	r2, #0
 80053b0:	2180      	movs	r1, #128	; 0x80
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 ff35 	bl	8006222 <UART_WaitOnFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e039      	b.n	8005436 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10b      	bne.n	80053e0 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	881b      	ldrh	r3, [r3, #0]
 80053cc:	461a      	mov	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	3302      	adds	r3, #2
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	e007      	b.n	80053f0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	781a      	ldrb	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	3301      	adds	r3, #1
 80053ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005408:	b29b      	uxth	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1cc      	bne.n	80053a8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	2200      	movs	r2, #0
 8005416:	2140      	movs	r1, #64	; 0x40
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 ff02 	bl	8006222 <UART_WaitOnFlagUntilTimeout>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e006      	b.n	8005436 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2220      	movs	r2, #32
 800542c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005430:	2300      	movs	r3, #0
 8005432:	e000      	b.n	8005436 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005434:	2302      	movs	r3, #2
  }
}
 8005436:	4618      	mov	r0, r3
 8005438:	3720      	adds	r7, #32
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
	...

08005440 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b0ba      	sub	sp, #232	; 0xe8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005466:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800546a:	f640 030f 	movw	r3, #2063	; 0x80f
 800546e:	4013      	ands	r3, r2
 8005470:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005474:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005478:	2b00      	cmp	r3, #0
 800547a:	d11b      	bne.n	80054b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800547c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005480:	f003 0320 	and.w	r3, r3, #32
 8005484:	2b00      	cmp	r3, #0
 8005486:	d015      	beq.n	80054b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800548c:	f003 0320 	and.w	r3, r3, #32
 8005490:	2b00      	cmp	r3, #0
 8005492:	d105      	bne.n	80054a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d009      	beq.n	80054b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 82d6 	beq.w	8005a56 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	4798      	blx	r3
      }
      return;
 80054b2:	e2d0      	b.n	8005a56 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80054b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 811f 	beq.w	80056fc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80054be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80054c2:	4b8b      	ldr	r3, [pc, #556]	; (80056f0 <HAL_UART_IRQHandler+0x2b0>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80054ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80054ce:	4b89      	ldr	r3, [pc, #548]	; (80056f4 <HAL_UART_IRQHandler+0x2b4>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 8112 	beq.w	80056fc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d011      	beq.n	8005508 <HAL_UART_IRQHandler+0xc8>
 80054e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00b      	beq.n	8005508 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2201      	movs	r2, #1
 80054f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054fe:	f043 0201 	orr.w	r2, r3, #1
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d011      	beq.n	8005538 <HAL_UART_IRQHandler+0xf8>
 8005514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00b      	beq.n	8005538 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2202      	movs	r2, #2
 8005526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800552e:	f043 0204 	orr.w	r2, r3, #4
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b00      	cmp	r3, #0
 8005542:	d011      	beq.n	8005568 <HAL_UART_IRQHandler+0x128>
 8005544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00b      	beq.n	8005568 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2204      	movs	r2, #4
 8005556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800555e:	f043 0202 	orr.w	r2, r3, #2
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b00      	cmp	r3, #0
 8005572:	d017      	beq.n	80055a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005578:	f003 0320 	and.w	r3, r3, #32
 800557c:	2b00      	cmp	r3, #0
 800557e:	d105      	bne.n	800558c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005580:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005584:	4b5a      	ldr	r3, [pc, #360]	; (80056f0 <HAL_UART_IRQHandler+0x2b0>)
 8005586:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00b      	beq.n	80055a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2208      	movs	r2, #8
 8005592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800559a:	f043 0208 	orr.w	r2, r3, #8
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80055a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d012      	beq.n	80055d6 <HAL_UART_IRQHandler+0x196>
 80055b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00c      	beq.n	80055d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055cc:	f043 0220 	orr.w	r2, r3, #32
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 823c 	beq.w	8005a5a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80055e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d013      	beq.n	8005616 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80055ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055f2:	f003 0320 	and.w	r3, r3, #32
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d105      	bne.n	8005606 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80055fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d007      	beq.n	8005616 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800561c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562a:	2b40      	cmp	r3, #64	; 0x40
 800562c:	d005      	beq.n	800563a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800562e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005632:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005636:	2b00      	cmp	r3, #0
 8005638:	d04f      	beq.n	80056da <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 feb9 	bl	80063b2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564a:	2b40      	cmp	r3, #64	; 0x40
 800564c:	d141      	bne.n	80056d2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3308      	adds	r3, #8
 8005654:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005658:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800565c:	e853 3f00 	ldrex	r3, [r3]
 8005660:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005664:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800566c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	3308      	adds	r3, #8
 8005676:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800567a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800567e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005682:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005686:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800568a:	e841 2300 	strex	r3, r2, [r1]
 800568e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1d9      	bne.n	800564e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d013      	beq.n	80056ca <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056a6:	4a14      	ldr	r2, [pc, #80]	; (80056f8 <HAL_UART_IRQHandler+0x2b8>)
 80056a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fc fbd9 	bl	8001e66 <HAL_DMA_Abort_IT>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d017      	beq.n	80056ea <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80056c4:	4610      	mov	r0, r2
 80056c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c8:	e00f      	b.n	80056ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f9da 	bl	8005a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d0:	e00b      	b.n	80056ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f9d6 	bl	8005a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d8:	e007      	b.n	80056ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f9d2 	bl	8005a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80056e8:	e1b7      	b.n	8005a5a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ea:	bf00      	nop
    return;
 80056ec:	e1b5      	b.n	8005a5a <HAL_UART_IRQHandler+0x61a>
 80056ee:	bf00      	nop
 80056f0:	10000001 	.word	0x10000001
 80056f4:	04000120 	.word	0x04000120
 80056f8:	0800647f 	.word	0x0800647f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005700:	2b01      	cmp	r3, #1
 8005702:	f040 814a 	bne.w	800599a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800570a:	f003 0310 	and.w	r3, r3, #16
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 8143 	beq.w	800599a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005718:	f003 0310 	and.w	r3, r3, #16
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 813c 	beq.w	800599a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2210      	movs	r2, #16
 8005728:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005734:	2b40      	cmp	r3, #64	; 0x40
 8005736:	f040 80b5 	bne.w	80058a4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005746:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 8187 	beq.w	8005a5e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800575a:	429a      	cmp	r2, r3
 800575c:	f080 817f 	bcs.w	8005a5e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005766:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b00      	cmp	r3, #0
 8005778:	f040 8086 	bne.w	8005888 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005784:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005788:	e853 3f00 	ldrex	r3, [r3]
 800578c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005790:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005798:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	461a      	mov	r2, r3
 80057a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80057aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80057b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057b6:	e841 2300 	strex	r3, r2, [r1]
 80057ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80057be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1da      	bne.n	800577c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3308      	adds	r3, #8
 80057cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80057d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057d8:	f023 0301 	bic.w	r3, r3, #1
 80057dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3308      	adds	r3, #8
 80057e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80057ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80057ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80057f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80057f6:	e841 2300 	strex	r3, r2, [r1]
 80057fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80057fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1e1      	bne.n	80057c6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	3308      	adds	r3, #8
 8005808:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800580c:	e853 3f00 	ldrex	r3, [r3]
 8005810:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005818:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3308      	adds	r3, #8
 8005822:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005826:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005828:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800582c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800582e:	e841 2300 	strex	r3, r2, [r1]
 8005832:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1e3      	bne.n	8005802 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2220      	movs	r2, #32
 800583e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005858:	f023 0310 	bic.w	r3, r3, #16
 800585c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	461a      	mov	r2, r3
 8005866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800586a:	65bb      	str	r3, [r7, #88]	; 0x58
 800586c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005870:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005872:	e841 2300 	strex	r3, r2, [r1]
 8005876:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1e4      	bne.n	8005848 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005882:	4618      	mov	r0, r3
 8005884:	f7fc fa96 	bl	8001db4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005894:	b29b      	uxth	r3, r3
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	b29b      	uxth	r3, r3
 800589a:	4619      	mov	r1, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f8fb 	bl	8005a98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058a2:	e0dc      	b.n	8005a5e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80058be:	b29b      	uxth	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 80ce 	beq.w	8005a62 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80058c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 80c9 	beq.w	8005a62 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d8:	e853 3f00 	ldrex	r3, [r3]
 80058dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	461a      	mov	r2, r3
 80058ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058f2:	647b      	str	r3, [r7, #68]	; 0x44
 80058f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e4      	bne.n	80058d0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3308      	adds	r3, #8
 800590c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	623b      	str	r3, [r7, #32]
   return(result);
 8005916:	6a3b      	ldr	r3, [r7, #32]
 8005918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800591c:	f023 0301 	bic.w	r3, r3, #1
 8005920:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	3308      	adds	r3, #8
 800592a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800592e:	633a      	str	r2, [r7, #48]	; 0x30
 8005930:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800593c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1e1      	bne.n	8005906 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	e853 3f00 	ldrex	r3, [r3]
 8005962:	60fb      	str	r3, [r7, #12]
   return(result);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0310 	bic.w	r3, r3, #16
 800596a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	461a      	mov	r2, r3
 8005974:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005978:	61fb      	str	r3, [r7, #28]
 800597a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597c:	69b9      	ldr	r1, [r7, #24]
 800597e:	69fa      	ldr	r2, [r7, #28]
 8005980:	e841 2300 	strex	r3, r2, [r1]
 8005984:	617b      	str	r3, [r7, #20]
   return(result);
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1e4      	bne.n	8005956 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800598c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005990:	4619      	mov	r1, r3
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f880 	bl	8005a98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005998:	e063      	b.n	8005a62 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800599a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800599e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00e      	beq.n	80059c4 <HAL_UART_IRQHandler+0x584>
 80059a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d008      	beq.n	80059c4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80059ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fd9f 	bl	8006500 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059c2:	e051      	b.n	8005a68 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80059c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d014      	beq.n	80059fa <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80059d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d105      	bne.n	80059e8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80059dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d008      	beq.n	80059fa <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d03a      	beq.n	8005a66 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	4798      	blx	r3
    }
    return;
 80059f8:	e035      	b.n	8005a66 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80059fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d009      	beq.n	8005a1a <HAL_UART_IRQHandler+0x5da>
 8005a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fd49 	bl	80064aa <UART_EndTransmit_IT>
    return;
 8005a18:	e026      	b.n	8005a68 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d009      	beq.n	8005a3a <HAL_UART_IRQHandler+0x5fa>
 8005a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a2a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fd78 	bl	8006528 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a38:	e016      	b.n	8005a68 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d010      	beq.n	8005a68 <HAL_UART_IRQHandler+0x628>
 8005a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	da0c      	bge.n	8005a68 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fd60 	bl	8006514 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a54:	e008      	b.n	8005a68 <HAL_UART_IRQHandler+0x628>
      return;
 8005a56:	bf00      	nop
 8005a58:	e006      	b.n	8005a68 <HAL_UART_IRQHandler+0x628>
    return;
 8005a5a:	bf00      	nop
 8005a5c:	e004      	b.n	8005a68 <HAL_UART_IRQHandler+0x628>
      return;
 8005a5e:	bf00      	nop
 8005a60:	e002      	b.n	8005a68 <HAL_UART_IRQHandler+0x628>
      return;
 8005a62:	bf00      	nop
 8005a64:	e000      	b.n	8005a68 <HAL_UART_IRQHandler+0x628>
    return;
 8005a66:	bf00      	nop
  }
}
 8005a68:	37e8      	adds	r7, #232	; 0xe8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop

08005a70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ab4:	b08c      	sub	sp, #48	; 0x30
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	4bab      	ldr	r3, [pc, #684]	; (8005d8c <UART_SetConfig+0x2dc>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	6812      	ldr	r2, [r2, #0]
 8005ae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ae8:	430b      	orrs	r3, r1
 8005aea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4aa0      	ldr	r2, [pc, #640]	; (8005d90 <UART_SetConfig+0x2e0>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d004      	beq.n	8005b1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005b26:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	6812      	ldr	r2, [r2, #0]
 8005b2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b30:	430b      	orrs	r3, r1
 8005b32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	f023 010f 	bic.w	r1, r3, #15
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a91      	ldr	r2, [pc, #580]	; (8005d94 <UART_SetConfig+0x2e4>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d125      	bne.n	8005ba0 <UART_SetConfig+0xf0>
 8005b54:	4b90      	ldr	r3, [pc, #576]	; (8005d98 <UART_SetConfig+0x2e8>)
 8005b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b5a:	f003 0303 	and.w	r3, r3, #3
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d81a      	bhi.n	8005b98 <UART_SetConfig+0xe8>
 8005b62:	a201      	add	r2, pc, #4	; (adr r2, 8005b68 <UART_SetConfig+0xb8>)
 8005b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b68:	08005b79 	.word	0x08005b79
 8005b6c:	08005b89 	.word	0x08005b89
 8005b70:	08005b81 	.word	0x08005b81
 8005b74:	08005b91 	.word	0x08005b91
 8005b78:	2301      	movs	r3, #1
 8005b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b7e:	e0d6      	b.n	8005d2e <UART_SetConfig+0x27e>
 8005b80:	2302      	movs	r3, #2
 8005b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b86:	e0d2      	b.n	8005d2e <UART_SetConfig+0x27e>
 8005b88:	2304      	movs	r3, #4
 8005b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b8e:	e0ce      	b.n	8005d2e <UART_SetConfig+0x27e>
 8005b90:	2308      	movs	r3, #8
 8005b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b96:	e0ca      	b.n	8005d2e <UART_SetConfig+0x27e>
 8005b98:	2310      	movs	r3, #16
 8005b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b9e:	e0c6      	b.n	8005d2e <UART_SetConfig+0x27e>
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a7d      	ldr	r2, [pc, #500]	; (8005d9c <UART_SetConfig+0x2ec>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d138      	bne.n	8005c1c <UART_SetConfig+0x16c>
 8005baa:	4b7b      	ldr	r3, [pc, #492]	; (8005d98 <UART_SetConfig+0x2e8>)
 8005bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb0:	f003 030c 	and.w	r3, r3, #12
 8005bb4:	2b0c      	cmp	r3, #12
 8005bb6:	d82d      	bhi.n	8005c14 <UART_SetConfig+0x164>
 8005bb8:	a201      	add	r2, pc, #4	; (adr r2, 8005bc0 <UART_SetConfig+0x110>)
 8005bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbe:	bf00      	nop
 8005bc0:	08005bf5 	.word	0x08005bf5
 8005bc4:	08005c15 	.word	0x08005c15
 8005bc8:	08005c15 	.word	0x08005c15
 8005bcc:	08005c15 	.word	0x08005c15
 8005bd0:	08005c05 	.word	0x08005c05
 8005bd4:	08005c15 	.word	0x08005c15
 8005bd8:	08005c15 	.word	0x08005c15
 8005bdc:	08005c15 	.word	0x08005c15
 8005be0:	08005bfd 	.word	0x08005bfd
 8005be4:	08005c15 	.word	0x08005c15
 8005be8:	08005c15 	.word	0x08005c15
 8005bec:	08005c15 	.word	0x08005c15
 8005bf0:	08005c0d 	.word	0x08005c0d
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bfa:	e098      	b.n	8005d2e <UART_SetConfig+0x27e>
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c02:	e094      	b.n	8005d2e <UART_SetConfig+0x27e>
 8005c04:	2304      	movs	r3, #4
 8005c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c0a:	e090      	b.n	8005d2e <UART_SetConfig+0x27e>
 8005c0c:	2308      	movs	r3, #8
 8005c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c12:	e08c      	b.n	8005d2e <UART_SetConfig+0x27e>
 8005c14:	2310      	movs	r3, #16
 8005c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c1a:	e088      	b.n	8005d2e <UART_SetConfig+0x27e>
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a5f      	ldr	r2, [pc, #380]	; (8005da0 <UART_SetConfig+0x2f0>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d125      	bne.n	8005c72 <UART_SetConfig+0x1c2>
 8005c26:	4b5c      	ldr	r3, [pc, #368]	; (8005d98 <UART_SetConfig+0x2e8>)
 8005c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c30:	2b30      	cmp	r3, #48	; 0x30
 8005c32:	d016      	beq.n	8005c62 <UART_SetConfig+0x1b2>
 8005c34:	2b30      	cmp	r3, #48	; 0x30
 8005c36:	d818      	bhi.n	8005c6a <UART_SetConfig+0x1ba>
 8005c38:	2b20      	cmp	r3, #32
 8005c3a:	d00a      	beq.n	8005c52 <UART_SetConfig+0x1a2>
 8005c3c:	2b20      	cmp	r3, #32
 8005c3e:	d814      	bhi.n	8005c6a <UART_SetConfig+0x1ba>
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <UART_SetConfig+0x19a>
 8005c44:	2b10      	cmp	r3, #16
 8005c46:	d008      	beq.n	8005c5a <UART_SetConfig+0x1aa>
 8005c48:	e00f      	b.n	8005c6a <UART_SetConfig+0x1ba>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c50:	e06d      	b.n	8005d2e <UART_SetConfig+0x27e>
 8005c52:	2302      	movs	r3, #2
 8005c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c58:	e069      	b.n	8005d2e <UART_SetConfig+0x27e>
 8005c5a:	2304      	movs	r3, #4
 8005c5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c60:	e065      	b.n	8005d2e <UART_SetConfig+0x27e>
 8005c62:	2308      	movs	r3, #8
 8005c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c68:	e061      	b.n	8005d2e <UART_SetConfig+0x27e>
 8005c6a:	2310      	movs	r3, #16
 8005c6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c70:	e05d      	b.n	8005d2e <UART_SetConfig+0x27e>
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a4b      	ldr	r2, [pc, #300]	; (8005da4 <UART_SetConfig+0x2f4>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d125      	bne.n	8005cc8 <UART_SetConfig+0x218>
 8005c7c:	4b46      	ldr	r3, [pc, #280]	; (8005d98 <UART_SetConfig+0x2e8>)
 8005c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c86:	2bc0      	cmp	r3, #192	; 0xc0
 8005c88:	d016      	beq.n	8005cb8 <UART_SetConfig+0x208>
 8005c8a:	2bc0      	cmp	r3, #192	; 0xc0
 8005c8c:	d818      	bhi.n	8005cc0 <UART_SetConfig+0x210>
 8005c8e:	2b80      	cmp	r3, #128	; 0x80
 8005c90:	d00a      	beq.n	8005ca8 <UART_SetConfig+0x1f8>
 8005c92:	2b80      	cmp	r3, #128	; 0x80
 8005c94:	d814      	bhi.n	8005cc0 <UART_SetConfig+0x210>
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d002      	beq.n	8005ca0 <UART_SetConfig+0x1f0>
 8005c9a:	2b40      	cmp	r3, #64	; 0x40
 8005c9c:	d008      	beq.n	8005cb0 <UART_SetConfig+0x200>
 8005c9e:	e00f      	b.n	8005cc0 <UART_SetConfig+0x210>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ca6:	e042      	b.n	8005d2e <UART_SetConfig+0x27e>
 8005ca8:	2302      	movs	r3, #2
 8005caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cae:	e03e      	b.n	8005d2e <UART_SetConfig+0x27e>
 8005cb0:	2304      	movs	r3, #4
 8005cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cb6:	e03a      	b.n	8005d2e <UART_SetConfig+0x27e>
 8005cb8:	2308      	movs	r3, #8
 8005cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cbe:	e036      	b.n	8005d2e <UART_SetConfig+0x27e>
 8005cc0:	2310      	movs	r3, #16
 8005cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cc6:	e032      	b.n	8005d2e <UART_SetConfig+0x27e>
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a30      	ldr	r2, [pc, #192]	; (8005d90 <UART_SetConfig+0x2e0>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d12a      	bne.n	8005d28 <UART_SetConfig+0x278>
 8005cd2:	4b31      	ldr	r3, [pc, #196]	; (8005d98 <UART_SetConfig+0x2e8>)
 8005cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cdc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ce0:	d01a      	beq.n	8005d18 <UART_SetConfig+0x268>
 8005ce2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ce6:	d81b      	bhi.n	8005d20 <UART_SetConfig+0x270>
 8005ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cec:	d00c      	beq.n	8005d08 <UART_SetConfig+0x258>
 8005cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cf2:	d815      	bhi.n	8005d20 <UART_SetConfig+0x270>
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <UART_SetConfig+0x250>
 8005cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cfc:	d008      	beq.n	8005d10 <UART_SetConfig+0x260>
 8005cfe:	e00f      	b.n	8005d20 <UART_SetConfig+0x270>
 8005d00:	2300      	movs	r3, #0
 8005d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d06:	e012      	b.n	8005d2e <UART_SetConfig+0x27e>
 8005d08:	2302      	movs	r3, #2
 8005d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d0e:	e00e      	b.n	8005d2e <UART_SetConfig+0x27e>
 8005d10:	2304      	movs	r3, #4
 8005d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d16:	e00a      	b.n	8005d2e <UART_SetConfig+0x27e>
 8005d18:	2308      	movs	r3, #8
 8005d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d1e:	e006      	b.n	8005d2e <UART_SetConfig+0x27e>
 8005d20:	2310      	movs	r3, #16
 8005d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d26:	e002      	b.n	8005d2e <UART_SetConfig+0x27e>
 8005d28:	2310      	movs	r3, #16
 8005d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a17      	ldr	r2, [pc, #92]	; (8005d90 <UART_SetConfig+0x2e0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	f040 80a8 	bne.w	8005e8a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d3e:	2b08      	cmp	r3, #8
 8005d40:	d834      	bhi.n	8005dac <UART_SetConfig+0x2fc>
 8005d42:	a201      	add	r2, pc, #4	; (adr r2, 8005d48 <UART_SetConfig+0x298>)
 8005d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d48:	08005d6d 	.word	0x08005d6d
 8005d4c:	08005dad 	.word	0x08005dad
 8005d50:	08005d75 	.word	0x08005d75
 8005d54:	08005dad 	.word	0x08005dad
 8005d58:	08005d7b 	.word	0x08005d7b
 8005d5c:	08005dad 	.word	0x08005dad
 8005d60:	08005dad 	.word	0x08005dad
 8005d64:	08005dad 	.word	0x08005dad
 8005d68:	08005d83 	.word	0x08005d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d6c:	f7fc fff2 	bl	8002d54 <HAL_RCC_GetPCLK1Freq>
 8005d70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d72:	e021      	b.n	8005db8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d74:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <UART_SetConfig+0x2f8>)
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d78:	e01e      	b.n	8005db8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d7a:	f7fc ff7d 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8005d7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d80:	e01a      	b.n	8005db8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d88:	e016      	b.n	8005db8 <UART_SetConfig+0x308>
 8005d8a:	bf00      	nop
 8005d8c:	cfff69f3 	.word	0xcfff69f3
 8005d90:	40008000 	.word	0x40008000
 8005d94:	40013800 	.word	0x40013800
 8005d98:	40021000 	.word	0x40021000
 8005d9c:	40004400 	.word	0x40004400
 8005da0:	40004800 	.word	0x40004800
 8005da4:	40004c00 	.word	0x40004c00
 8005da8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005db6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 812a 	beq.w	8006014 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	4a9e      	ldr	r2, [pc, #632]	; (8006040 <UART_SetConfig+0x590>)
 8005dc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dd2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	005b      	lsls	r3, r3, #1
 8005ddc:	4413      	add	r3, r2
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d305      	bcc.n	8005df0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d903      	bls.n	8005df8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005df6:	e10d      	b.n	8006014 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	60bb      	str	r3, [r7, #8]
 8005dfe:	60fa      	str	r2, [r7, #12]
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	4a8e      	ldr	r2, [pc, #568]	; (8006040 <UART_SetConfig+0x590>)
 8005e06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	603b      	str	r3, [r7, #0]
 8005e10:	607a      	str	r2, [r7, #4]
 8005e12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e1a:	f7fa feed 	bl	8000bf8 <__aeabi_uldivmod>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	4610      	mov	r0, r2
 8005e24:	4619      	mov	r1, r3
 8005e26:	f04f 0200 	mov.w	r2, #0
 8005e2a:	f04f 0300 	mov.w	r3, #0
 8005e2e:	020b      	lsls	r3, r1, #8
 8005e30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e34:	0202      	lsls	r2, r0, #8
 8005e36:	6979      	ldr	r1, [r7, #20]
 8005e38:	6849      	ldr	r1, [r1, #4]
 8005e3a:	0849      	lsrs	r1, r1, #1
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	460c      	mov	r4, r1
 8005e40:	4605      	mov	r5, r0
 8005e42:	eb12 0804 	adds.w	r8, r2, r4
 8005e46:	eb43 0905 	adc.w	r9, r3, r5
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	469a      	mov	sl, r3
 8005e52:	4693      	mov	fp, r2
 8005e54:	4652      	mov	r2, sl
 8005e56:	465b      	mov	r3, fp
 8005e58:	4640      	mov	r0, r8
 8005e5a:	4649      	mov	r1, r9
 8005e5c:	f7fa fecc 	bl	8000bf8 <__aeabi_uldivmod>
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	4613      	mov	r3, r2
 8005e66:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e6e:	d308      	bcc.n	8005e82 <UART_SetConfig+0x3d2>
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e76:	d204      	bcs.n	8005e82 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6a3a      	ldr	r2, [r7, #32]
 8005e7e:	60da      	str	r2, [r3, #12]
 8005e80:	e0c8      	b.n	8006014 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e88:	e0c4      	b.n	8006014 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e92:	d167      	bne.n	8005f64 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005e94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d828      	bhi.n	8005eee <UART_SetConfig+0x43e>
 8005e9c:	a201      	add	r2, pc, #4	; (adr r2, 8005ea4 <UART_SetConfig+0x3f4>)
 8005e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea2:	bf00      	nop
 8005ea4:	08005ec9 	.word	0x08005ec9
 8005ea8:	08005ed1 	.word	0x08005ed1
 8005eac:	08005ed9 	.word	0x08005ed9
 8005eb0:	08005eef 	.word	0x08005eef
 8005eb4:	08005edf 	.word	0x08005edf
 8005eb8:	08005eef 	.word	0x08005eef
 8005ebc:	08005eef 	.word	0x08005eef
 8005ec0:	08005eef 	.word	0x08005eef
 8005ec4:	08005ee7 	.word	0x08005ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ec8:	f7fc ff44 	bl	8002d54 <HAL_RCC_GetPCLK1Freq>
 8005ecc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ece:	e014      	b.n	8005efa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ed0:	f7fc ff56 	bl	8002d80 <HAL_RCC_GetPCLK2Freq>
 8005ed4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ed6:	e010      	b.n	8005efa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ed8:	4b5a      	ldr	r3, [pc, #360]	; (8006044 <UART_SetConfig+0x594>)
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005edc:	e00d      	b.n	8005efa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ede:	f7fc fecb 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8005ee2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ee4:	e009      	b.n	8005efa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005eec:	e005      	b.n	8005efa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ef8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 8089 	beq.w	8006014 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f06:	4a4e      	ldr	r2, [pc, #312]	; (8006040 <UART_SetConfig+0x590>)
 8005f08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f14:	005a      	lsls	r2, r3, #1
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	085b      	lsrs	r3, r3, #1
 8005f1c:	441a      	add	r2, r3
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f28:	6a3b      	ldr	r3, [r7, #32]
 8005f2a:	2b0f      	cmp	r3, #15
 8005f2c:	d916      	bls.n	8005f5c <UART_SetConfig+0x4ac>
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f34:	d212      	bcs.n	8005f5c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	f023 030f 	bic.w	r3, r3, #15
 8005f3e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	085b      	lsrs	r3, r3, #1
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	f003 0307 	and.w	r3, r3, #7
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	8bfb      	ldrh	r3, [r7, #30]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	8bfa      	ldrh	r2, [r7, #30]
 8005f58:	60da      	str	r2, [r3, #12]
 8005f5a:	e05b      	b.n	8006014 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005f62:	e057      	b.n	8006014 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f68:	2b08      	cmp	r3, #8
 8005f6a:	d828      	bhi.n	8005fbe <UART_SetConfig+0x50e>
 8005f6c:	a201      	add	r2, pc, #4	; (adr r2, 8005f74 <UART_SetConfig+0x4c4>)
 8005f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f72:	bf00      	nop
 8005f74:	08005f99 	.word	0x08005f99
 8005f78:	08005fa1 	.word	0x08005fa1
 8005f7c:	08005fa9 	.word	0x08005fa9
 8005f80:	08005fbf 	.word	0x08005fbf
 8005f84:	08005faf 	.word	0x08005faf
 8005f88:	08005fbf 	.word	0x08005fbf
 8005f8c:	08005fbf 	.word	0x08005fbf
 8005f90:	08005fbf 	.word	0x08005fbf
 8005f94:	08005fb7 	.word	0x08005fb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f98:	f7fc fedc 	bl	8002d54 <HAL_RCC_GetPCLK1Freq>
 8005f9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f9e:	e014      	b.n	8005fca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fa0:	f7fc feee 	bl	8002d80 <HAL_RCC_GetPCLK2Freq>
 8005fa4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fa6:	e010      	b.n	8005fca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fa8:	4b26      	ldr	r3, [pc, #152]	; (8006044 <UART_SetConfig+0x594>)
 8005faa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fac:	e00d      	b.n	8005fca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fae:	f7fc fe63 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8005fb2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fb4:	e009      	b.n	8005fca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fbc:	e005      	b.n	8005fca <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005fc8:	bf00      	nop
    }

    if (pclk != 0U)
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d021      	beq.n	8006014 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd4:	4a1a      	ldr	r2, [pc, #104]	; (8006040 <UART_SetConfig+0x590>)
 8005fd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	085b      	lsrs	r3, r3, #1
 8005fe8:	441a      	add	r2, r3
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	2b0f      	cmp	r3, #15
 8005ff8:	d909      	bls.n	800600e <UART_SetConfig+0x55e>
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006000:	d205      	bcs.n	800600e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	b29a      	uxth	r2, r3
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	60da      	str	r2, [r3, #12]
 800600c:	e002      	b.n	8006014 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	2201      	movs	r2, #1
 8006018:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	2201      	movs	r2, #1
 8006020:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	2200      	movs	r2, #0
 8006028:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2200      	movs	r2, #0
 800602e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006030:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006034:	4618      	mov	r0, r3
 8006036:	3730      	adds	r7, #48	; 0x30
 8006038:	46bd      	mov	sp, r7
 800603a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800603e:	bf00      	nop
 8006040:	080095f0 	.word	0x080095f0
 8006044:	00f42400 	.word	0x00f42400

08006048 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00a      	beq.n	8006072 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00a      	beq.n	8006094 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	430a      	orrs	r2, r1
 8006092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006098:	f003 0304 	and.w	r3, r3, #4
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00a      	beq.n	80060b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ba:	f003 0308 	and.w	r3, r3, #8
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00a      	beq.n	80060d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	430a      	orrs	r2, r1
 80060d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060dc:	f003 0310 	and.w	r3, r3, #16
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00a      	beq.n	80060fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fe:	f003 0320 	and.w	r3, r3, #32
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006124:	2b00      	cmp	r3, #0
 8006126:	d01a      	beq.n	800615e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006146:	d10a      	bne.n	800615e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00a      	beq.n	8006180 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	605a      	str	r2, [r3, #4]
  }
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af02      	add	r7, sp, #8
 8006192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800619c:	f7fb fcfc 	bl	8001b98 <HAL_GetTick>
 80061a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0308 	and.w	r3, r3, #8
 80061ac:	2b08      	cmp	r3, #8
 80061ae:	d10e      	bne.n	80061ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f82f 	bl	8006222 <UART_WaitOnFlagUntilTimeout>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e025      	b.n	800621a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b04      	cmp	r3, #4
 80061da:	d10e      	bne.n	80061fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f819 	bl	8006222 <UART_WaitOnFlagUntilTimeout>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e00f      	b.n	800621a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2220      	movs	r2, #32
 8006206:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b09c      	sub	sp, #112	; 0x70
 8006226:	af00      	add	r7, sp, #0
 8006228:	60f8      	str	r0, [r7, #12]
 800622a:	60b9      	str	r1, [r7, #8]
 800622c:	603b      	str	r3, [r7, #0]
 800622e:	4613      	mov	r3, r2
 8006230:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006232:	e0a9      	b.n	8006388 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800623a:	f000 80a5 	beq.w	8006388 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800623e:	f7fb fcab 	bl	8001b98 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800624a:	429a      	cmp	r2, r3
 800624c:	d302      	bcc.n	8006254 <UART_WaitOnFlagUntilTimeout+0x32>
 800624e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006250:	2b00      	cmp	r3, #0
 8006252:	d140      	bne.n	80062d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800625c:	e853 3f00 	ldrex	r3, [r3]
 8006260:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006264:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006268:	667b      	str	r3, [r7, #100]	; 0x64
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	461a      	mov	r2, r3
 8006270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006272:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006274:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006276:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006278:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800627a:	e841 2300 	strex	r3, r2, [r1]
 800627e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1e6      	bne.n	8006254 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3308      	adds	r3, #8
 800628c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006290:	e853 3f00 	ldrex	r3, [r3]
 8006294:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006298:	f023 0301 	bic.w	r3, r3, #1
 800629c:	663b      	str	r3, [r7, #96]	; 0x60
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3308      	adds	r3, #8
 80062a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80062a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062ae:	e841 2300 	strex	r3, r2, [r1]
 80062b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80062b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1e5      	bne.n	8006286 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2220      	movs	r2, #32
 80062be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2220      	movs	r2, #32
 80062c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e069      	b.n	80063aa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d051      	beq.n	8006388 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062f2:	d149      	bne.n	8006388 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006306:	e853 3f00 	ldrex	r3, [r3]
 800630a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006312:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	461a      	mov	r2, r3
 800631a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800631c:	637b      	str	r3, [r7, #52]	; 0x34
 800631e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006320:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006324:	e841 2300 	strex	r3, r2, [r1]
 8006328:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1e6      	bne.n	80062fe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	3308      	adds	r3, #8
 8006336:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	e853 3f00 	ldrex	r3, [r3]
 800633e:	613b      	str	r3, [r7, #16]
   return(result);
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f023 0301 	bic.w	r3, r3, #1
 8006346:	66bb      	str	r3, [r7, #104]	; 0x68
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3308      	adds	r3, #8
 800634e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006350:	623a      	str	r2, [r7, #32]
 8006352:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006354:	69f9      	ldr	r1, [r7, #28]
 8006356:	6a3a      	ldr	r2, [r7, #32]
 8006358:	e841 2300 	strex	r3, r2, [r1]
 800635c:	61bb      	str	r3, [r7, #24]
   return(result);
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1e5      	bne.n	8006330 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2220      	movs	r2, #32
 8006368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2220      	movs	r2, #32
 8006370:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2220      	movs	r2, #32
 8006378:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e010      	b.n	80063aa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	69da      	ldr	r2, [r3, #28]
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	4013      	ands	r3, r2
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	429a      	cmp	r2, r3
 8006396:	bf0c      	ite	eq
 8006398:	2301      	moveq	r3, #1
 800639a:	2300      	movne	r3, #0
 800639c:	b2db      	uxtb	r3, r3
 800639e:	461a      	mov	r2, r3
 80063a0:	79fb      	ldrb	r3, [r7, #7]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	f43f af46 	beq.w	8006234 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3770      	adds	r7, #112	; 0x70
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b095      	sub	sp, #84	; 0x54
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c2:	e853 3f00 	ldrex	r3, [r3]
 80063c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	461a      	mov	r2, r3
 80063d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063d8:	643b      	str	r3, [r7, #64]	; 0x40
 80063da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063e0:	e841 2300 	strex	r3, r2, [r1]
 80063e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1e6      	bne.n	80063ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3308      	adds	r3, #8
 80063f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	e853 3f00 	ldrex	r3, [r3]
 80063fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006402:	f023 0301 	bic.w	r3, r3, #1
 8006406:	64bb      	str	r3, [r7, #72]	; 0x48
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3308      	adds	r3, #8
 800640e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006410:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006412:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006418:	e841 2300 	strex	r3, r2, [r1]
 800641c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1e3      	bne.n	80063ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006428:	2b01      	cmp	r3, #1
 800642a:	d118      	bne.n	800645e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	e853 3f00 	ldrex	r3, [r3]
 8006438:	60bb      	str	r3, [r7, #8]
   return(result);
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	f023 0310 	bic.w	r3, r3, #16
 8006440:	647b      	str	r3, [r7, #68]	; 0x44
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	461a      	mov	r2, r3
 8006448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800644a:	61bb      	str	r3, [r7, #24]
 800644c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644e:	6979      	ldr	r1, [r7, #20]
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	e841 2300 	strex	r3, r2, [r1]
 8006456:	613b      	str	r3, [r7, #16]
   return(result);
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1e6      	bne.n	800642c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2220      	movs	r2, #32
 8006462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006472:	bf00      	nop
 8006474:	3754      	adds	r7, #84	; 0x54
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b084      	sub	sp, #16
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f7ff faf1 	bl	8005a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b088      	sub	sp, #32
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	e853 3f00 	ldrex	r3, [r3]
 80064be:	60bb      	str	r3, [r7, #8]
   return(result);
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c6:	61fb      	str	r3, [r7, #28]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	461a      	mov	r2, r3
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	61bb      	str	r3, [r7, #24]
 80064d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d4:	6979      	ldr	r1, [r7, #20]
 80064d6:	69ba      	ldr	r2, [r7, #24]
 80064d8:	e841 2300 	strex	r3, r2, [r1]
 80064dc:	613b      	str	r3, [r7, #16]
   return(result);
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1e6      	bne.n	80064b2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2220      	movs	r2, #32
 80064e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7ff fabc 	bl	8005a70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064f8:	bf00      	nop
 80064fa:	3720      	adds	r7, #32
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800654a:	2b01      	cmp	r3, #1
 800654c:	d101      	bne.n	8006552 <HAL_UARTEx_DisableFifoMode+0x16>
 800654e:	2302      	movs	r3, #2
 8006550:	e027      	b.n	80065a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2224      	movs	r2, #36	; 0x24
 800655e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f022 0201 	bic.w	r2, r2, #1
 8006578:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006580:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2220      	movs	r2, #32
 8006594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b084      	sub	sp, #16
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d101      	bne.n	80065c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80065c2:	2302      	movs	r3, #2
 80065c4:	e02d      	b.n	8006622 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2224      	movs	r2, #36	; 0x24
 80065d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 0201 	bic.w	r2, r2, #1
 80065ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f850 	bl	80066a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2220      	movs	r2, #32
 8006614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b084      	sub	sp, #16
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800663a:	2b01      	cmp	r3, #1
 800663c:	d101      	bne.n	8006642 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800663e:	2302      	movs	r3, #2
 8006640:	e02d      	b.n	800669e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2224      	movs	r2, #36	; 0x24
 800664e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0201 	bic.w	r2, r2, #1
 8006668:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f812 	bl	80066a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2220      	movs	r2, #32
 8006690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d108      	bne.n	80066ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80066c8:	e031      	b.n	800672e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80066ca:	2308      	movs	r3, #8
 80066cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80066ce:	2308      	movs	r3, #8
 80066d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	0e5b      	lsrs	r3, r3, #25
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	f003 0307 	and.w	r3, r3, #7
 80066e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	0f5b      	lsrs	r3, r3, #29
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	f003 0307 	and.w	r3, r3, #7
 80066f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066f2:	7bbb      	ldrb	r3, [r7, #14]
 80066f4:	7b3a      	ldrb	r2, [r7, #12]
 80066f6:	4911      	ldr	r1, [pc, #68]	; (800673c <UARTEx_SetNbDataToProcess+0x94>)
 80066f8:	5c8a      	ldrb	r2, [r1, r2]
 80066fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80066fe:	7b3a      	ldrb	r2, [r7, #12]
 8006700:	490f      	ldr	r1, [pc, #60]	; (8006740 <UARTEx_SetNbDataToProcess+0x98>)
 8006702:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006704:	fb93 f3f2 	sdiv	r3, r3, r2
 8006708:	b29a      	uxth	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006710:	7bfb      	ldrb	r3, [r7, #15]
 8006712:	7b7a      	ldrb	r2, [r7, #13]
 8006714:	4909      	ldr	r1, [pc, #36]	; (800673c <UARTEx_SetNbDataToProcess+0x94>)
 8006716:	5c8a      	ldrb	r2, [r1, r2]
 8006718:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800671c:	7b7a      	ldrb	r2, [r7, #13]
 800671e:	4908      	ldr	r1, [pc, #32]	; (8006740 <UARTEx_SetNbDataToProcess+0x98>)
 8006720:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006722:	fb93 f3f2 	sdiv	r3, r3, r2
 8006726:	b29a      	uxth	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800672e:	bf00      	nop
 8006730:	3714      	adds	r7, #20
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	08009608 	.word	0x08009608
 8006740:	08009610 	.word	0x08009610

08006744 <__errno>:
 8006744:	4b01      	ldr	r3, [pc, #4]	; (800674c <__errno+0x8>)
 8006746:	6818      	ldr	r0, [r3, #0]
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	2000000c 	.word	0x2000000c

08006750 <__libc_init_array>:
 8006750:	b570      	push	{r4, r5, r6, lr}
 8006752:	4d0d      	ldr	r5, [pc, #52]	; (8006788 <__libc_init_array+0x38>)
 8006754:	4c0d      	ldr	r4, [pc, #52]	; (800678c <__libc_init_array+0x3c>)
 8006756:	1b64      	subs	r4, r4, r5
 8006758:	10a4      	asrs	r4, r4, #2
 800675a:	2600      	movs	r6, #0
 800675c:	42a6      	cmp	r6, r4
 800675e:	d109      	bne.n	8006774 <__libc_init_array+0x24>
 8006760:	4d0b      	ldr	r5, [pc, #44]	; (8006790 <__libc_init_array+0x40>)
 8006762:	4c0c      	ldr	r4, [pc, #48]	; (8006794 <__libc_init_array+0x44>)
 8006764:	f002 ff18 	bl	8009598 <_init>
 8006768:	1b64      	subs	r4, r4, r5
 800676a:	10a4      	asrs	r4, r4, #2
 800676c:	2600      	movs	r6, #0
 800676e:	42a6      	cmp	r6, r4
 8006770:	d105      	bne.n	800677e <__libc_init_array+0x2e>
 8006772:	bd70      	pop	{r4, r5, r6, pc}
 8006774:	f855 3b04 	ldr.w	r3, [r5], #4
 8006778:	4798      	blx	r3
 800677a:	3601      	adds	r6, #1
 800677c:	e7ee      	b.n	800675c <__libc_init_array+0xc>
 800677e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006782:	4798      	blx	r3
 8006784:	3601      	adds	r6, #1
 8006786:	e7f2      	b.n	800676e <__libc_init_array+0x1e>
 8006788:	080099fc 	.word	0x080099fc
 800678c:	080099fc 	.word	0x080099fc
 8006790:	080099fc 	.word	0x080099fc
 8006794:	08009a00 	.word	0x08009a00

08006798 <memset>:
 8006798:	4402      	add	r2, r0
 800679a:	4603      	mov	r3, r0
 800679c:	4293      	cmp	r3, r2
 800679e:	d100      	bne.n	80067a2 <memset+0xa>
 80067a0:	4770      	bx	lr
 80067a2:	f803 1b01 	strb.w	r1, [r3], #1
 80067a6:	e7f9      	b.n	800679c <memset+0x4>

080067a8 <__cvt>:
 80067a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067ac:	ec55 4b10 	vmov	r4, r5, d0
 80067b0:	2d00      	cmp	r5, #0
 80067b2:	460e      	mov	r6, r1
 80067b4:	4619      	mov	r1, r3
 80067b6:	462b      	mov	r3, r5
 80067b8:	bfbb      	ittet	lt
 80067ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80067be:	461d      	movlt	r5, r3
 80067c0:	2300      	movge	r3, #0
 80067c2:	232d      	movlt	r3, #45	; 0x2d
 80067c4:	700b      	strb	r3, [r1, #0]
 80067c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80067cc:	4691      	mov	r9, r2
 80067ce:	f023 0820 	bic.w	r8, r3, #32
 80067d2:	bfbc      	itt	lt
 80067d4:	4622      	movlt	r2, r4
 80067d6:	4614      	movlt	r4, r2
 80067d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067dc:	d005      	beq.n	80067ea <__cvt+0x42>
 80067de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80067e2:	d100      	bne.n	80067e6 <__cvt+0x3e>
 80067e4:	3601      	adds	r6, #1
 80067e6:	2102      	movs	r1, #2
 80067e8:	e000      	b.n	80067ec <__cvt+0x44>
 80067ea:	2103      	movs	r1, #3
 80067ec:	ab03      	add	r3, sp, #12
 80067ee:	9301      	str	r3, [sp, #4]
 80067f0:	ab02      	add	r3, sp, #8
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	ec45 4b10 	vmov	d0, r4, r5
 80067f8:	4653      	mov	r3, sl
 80067fa:	4632      	mov	r2, r6
 80067fc:	f000 fd00 	bl	8007200 <_dtoa_r>
 8006800:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006804:	4607      	mov	r7, r0
 8006806:	d102      	bne.n	800680e <__cvt+0x66>
 8006808:	f019 0f01 	tst.w	r9, #1
 800680c:	d022      	beq.n	8006854 <__cvt+0xac>
 800680e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006812:	eb07 0906 	add.w	r9, r7, r6
 8006816:	d110      	bne.n	800683a <__cvt+0x92>
 8006818:	783b      	ldrb	r3, [r7, #0]
 800681a:	2b30      	cmp	r3, #48	; 0x30
 800681c:	d10a      	bne.n	8006834 <__cvt+0x8c>
 800681e:	2200      	movs	r2, #0
 8006820:	2300      	movs	r3, #0
 8006822:	4620      	mov	r0, r4
 8006824:	4629      	mov	r1, r5
 8006826:	f7fa f977 	bl	8000b18 <__aeabi_dcmpeq>
 800682a:	b918      	cbnz	r0, 8006834 <__cvt+0x8c>
 800682c:	f1c6 0601 	rsb	r6, r6, #1
 8006830:	f8ca 6000 	str.w	r6, [sl]
 8006834:	f8da 3000 	ldr.w	r3, [sl]
 8006838:	4499      	add	r9, r3
 800683a:	2200      	movs	r2, #0
 800683c:	2300      	movs	r3, #0
 800683e:	4620      	mov	r0, r4
 8006840:	4629      	mov	r1, r5
 8006842:	f7fa f969 	bl	8000b18 <__aeabi_dcmpeq>
 8006846:	b108      	cbz	r0, 800684c <__cvt+0xa4>
 8006848:	f8cd 900c 	str.w	r9, [sp, #12]
 800684c:	2230      	movs	r2, #48	; 0x30
 800684e:	9b03      	ldr	r3, [sp, #12]
 8006850:	454b      	cmp	r3, r9
 8006852:	d307      	bcc.n	8006864 <__cvt+0xbc>
 8006854:	9b03      	ldr	r3, [sp, #12]
 8006856:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006858:	1bdb      	subs	r3, r3, r7
 800685a:	4638      	mov	r0, r7
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	b004      	add	sp, #16
 8006860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006864:	1c59      	adds	r1, r3, #1
 8006866:	9103      	str	r1, [sp, #12]
 8006868:	701a      	strb	r2, [r3, #0]
 800686a:	e7f0      	b.n	800684e <__cvt+0xa6>

0800686c <__exponent>:
 800686c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800686e:	4603      	mov	r3, r0
 8006870:	2900      	cmp	r1, #0
 8006872:	bfb8      	it	lt
 8006874:	4249      	neglt	r1, r1
 8006876:	f803 2b02 	strb.w	r2, [r3], #2
 800687a:	bfb4      	ite	lt
 800687c:	222d      	movlt	r2, #45	; 0x2d
 800687e:	222b      	movge	r2, #43	; 0x2b
 8006880:	2909      	cmp	r1, #9
 8006882:	7042      	strb	r2, [r0, #1]
 8006884:	dd2a      	ble.n	80068dc <__exponent+0x70>
 8006886:	f10d 0407 	add.w	r4, sp, #7
 800688a:	46a4      	mov	ip, r4
 800688c:	270a      	movs	r7, #10
 800688e:	46a6      	mov	lr, r4
 8006890:	460a      	mov	r2, r1
 8006892:	fb91 f6f7 	sdiv	r6, r1, r7
 8006896:	fb07 1516 	mls	r5, r7, r6, r1
 800689a:	3530      	adds	r5, #48	; 0x30
 800689c:	2a63      	cmp	r2, #99	; 0x63
 800689e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80068a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80068a6:	4631      	mov	r1, r6
 80068a8:	dcf1      	bgt.n	800688e <__exponent+0x22>
 80068aa:	3130      	adds	r1, #48	; 0x30
 80068ac:	f1ae 0502 	sub.w	r5, lr, #2
 80068b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80068b4:	1c44      	adds	r4, r0, #1
 80068b6:	4629      	mov	r1, r5
 80068b8:	4561      	cmp	r1, ip
 80068ba:	d30a      	bcc.n	80068d2 <__exponent+0x66>
 80068bc:	f10d 0209 	add.w	r2, sp, #9
 80068c0:	eba2 020e 	sub.w	r2, r2, lr
 80068c4:	4565      	cmp	r5, ip
 80068c6:	bf88      	it	hi
 80068c8:	2200      	movhi	r2, #0
 80068ca:	4413      	add	r3, r2
 80068cc:	1a18      	subs	r0, r3, r0
 80068ce:	b003      	add	sp, #12
 80068d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80068da:	e7ed      	b.n	80068b8 <__exponent+0x4c>
 80068dc:	2330      	movs	r3, #48	; 0x30
 80068de:	3130      	adds	r1, #48	; 0x30
 80068e0:	7083      	strb	r3, [r0, #2]
 80068e2:	70c1      	strb	r1, [r0, #3]
 80068e4:	1d03      	adds	r3, r0, #4
 80068e6:	e7f1      	b.n	80068cc <__exponent+0x60>

080068e8 <_printf_float>:
 80068e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ec:	ed2d 8b02 	vpush	{d8}
 80068f0:	b08d      	sub	sp, #52	; 0x34
 80068f2:	460c      	mov	r4, r1
 80068f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80068f8:	4616      	mov	r6, r2
 80068fa:	461f      	mov	r7, r3
 80068fc:	4605      	mov	r5, r0
 80068fe:	f001 fa6d 	bl	8007ddc <_localeconv_r>
 8006902:	f8d0 a000 	ldr.w	sl, [r0]
 8006906:	4650      	mov	r0, sl
 8006908:	f7f9 fc8a 	bl	8000220 <strlen>
 800690c:	2300      	movs	r3, #0
 800690e:	930a      	str	r3, [sp, #40]	; 0x28
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	9305      	str	r3, [sp, #20]
 8006914:	f8d8 3000 	ldr.w	r3, [r8]
 8006918:	f894 b018 	ldrb.w	fp, [r4, #24]
 800691c:	3307      	adds	r3, #7
 800691e:	f023 0307 	bic.w	r3, r3, #7
 8006922:	f103 0208 	add.w	r2, r3, #8
 8006926:	f8c8 2000 	str.w	r2, [r8]
 800692a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006932:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006936:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800693a:	9307      	str	r3, [sp, #28]
 800693c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006940:	ee08 0a10 	vmov	s16, r0
 8006944:	4b9f      	ldr	r3, [pc, #636]	; (8006bc4 <_printf_float+0x2dc>)
 8006946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800694a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800694e:	f7fa f915 	bl	8000b7c <__aeabi_dcmpun>
 8006952:	bb88      	cbnz	r0, 80069b8 <_printf_float+0xd0>
 8006954:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006958:	4b9a      	ldr	r3, [pc, #616]	; (8006bc4 <_printf_float+0x2dc>)
 800695a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800695e:	f7fa f8ef 	bl	8000b40 <__aeabi_dcmple>
 8006962:	bb48      	cbnz	r0, 80069b8 <_printf_float+0xd0>
 8006964:	2200      	movs	r2, #0
 8006966:	2300      	movs	r3, #0
 8006968:	4640      	mov	r0, r8
 800696a:	4649      	mov	r1, r9
 800696c:	f7fa f8de 	bl	8000b2c <__aeabi_dcmplt>
 8006970:	b110      	cbz	r0, 8006978 <_printf_float+0x90>
 8006972:	232d      	movs	r3, #45	; 0x2d
 8006974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006978:	4b93      	ldr	r3, [pc, #588]	; (8006bc8 <_printf_float+0x2e0>)
 800697a:	4894      	ldr	r0, [pc, #592]	; (8006bcc <_printf_float+0x2e4>)
 800697c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006980:	bf94      	ite	ls
 8006982:	4698      	movls	r8, r3
 8006984:	4680      	movhi	r8, r0
 8006986:	2303      	movs	r3, #3
 8006988:	6123      	str	r3, [r4, #16]
 800698a:	9b05      	ldr	r3, [sp, #20]
 800698c:	f023 0204 	bic.w	r2, r3, #4
 8006990:	6022      	str	r2, [r4, #0]
 8006992:	f04f 0900 	mov.w	r9, #0
 8006996:	9700      	str	r7, [sp, #0]
 8006998:	4633      	mov	r3, r6
 800699a:	aa0b      	add	r2, sp, #44	; 0x2c
 800699c:	4621      	mov	r1, r4
 800699e:	4628      	mov	r0, r5
 80069a0:	f000 f9d8 	bl	8006d54 <_printf_common>
 80069a4:	3001      	adds	r0, #1
 80069a6:	f040 8090 	bne.w	8006aca <_printf_float+0x1e2>
 80069aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069ae:	b00d      	add	sp, #52	; 0x34
 80069b0:	ecbd 8b02 	vpop	{d8}
 80069b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b8:	4642      	mov	r2, r8
 80069ba:	464b      	mov	r3, r9
 80069bc:	4640      	mov	r0, r8
 80069be:	4649      	mov	r1, r9
 80069c0:	f7fa f8dc 	bl	8000b7c <__aeabi_dcmpun>
 80069c4:	b140      	cbz	r0, 80069d8 <_printf_float+0xf0>
 80069c6:	464b      	mov	r3, r9
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	bfbc      	itt	lt
 80069cc:	232d      	movlt	r3, #45	; 0x2d
 80069ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80069d2:	487f      	ldr	r0, [pc, #508]	; (8006bd0 <_printf_float+0x2e8>)
 80069d4:	4b7f      	ldr	r3, [pc, #508]	; (8006bd4 <_printf_float+0x2ec>)
 80069d6:	e7d1      	b.n	800697c <_printf_float+0x94>
 80069d8:	6863      	ldr	r3, [r4, #4]
 80069da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80069de:	9206      	str	r2, [sp, #24]
 80069e0:	1c5a      	adds	r2, r3, #1
 80069e2:	d13f      	bne.n	8006a64 <_printf_float+0x17c>
 80069e4:	2306      	movs	r3, #6
 80069e6:	6063      	str	r3, [r4, #4]
 80069e8:	9b05      	ldr	r3, [sp, #20]
 80069ea:	6861      	ldr	r1, [r4, #4]
 80069ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80069f0:	2300      	movs	r3, #0
 80069f2:	9303      	str	r3, [sp, #12]
 80069f4:	ab0a      	add	r3, sp, #40	; 0x28
 80069f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80069fa:	ab09      	add	r3, sp, #36	; 0x24
 80069fc:	ec49 8b10 	vmov	d0, r8, r9
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	6022      	str	r2, [r4, #0]
 8006a04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a08:	4628      	mov	r0, r5
 8006a0a:	f7ff fecd 	bl	80067a8 <__cvt>
 8006a0e:	9b06      	ldr	r3, [sp, #24]
 8006a10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a12:	2b47      	cmp	r3, #71	; 0x47
 8006a14:	4680      	mov	r8, r0
 8006a16:	d108      	bne.n	8006a2a <_printf_float+0x142>
 8006a18:	1cc8      	adds	r0, r1, #3
 8006a1a:	db02      	blt.n	8006a22 <_printf_float+0x13a>
 8006a1c:	6863      	ldr	r3, [r4, #4]
 8006a1e:	4299      	cmp	r1, r3
 8006a20:	dd41      	ble.n	8006aa6 <_printf_float+0x1be>
 8006a22:	f1ab 0b02 	sub.w	fp, fp, #2
 8006a26:	fa5f fb8b 	uxtb.w	fp, fp
 8006a2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a2e:	d820      	bhi.n	8006a72 <_printf_float+0x18a>
 8006a30:	3901      	subs	r1, #1
 8006a32:	465a      	mov	r2, fp
 8006a34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a38:	9109      	str	r1, [sp, #36]	; 0x24
 8006a3a:	f7ff ff17 	bl	800686c <__exponent>
 8006a3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a40:	1813      	adds	r3, r2, r0
 8006a42:	2a01      	cmp	r2, #1
 8006a44:	4681      	mov	r9, r0
 8006a46:	6123      	str	r3, [r4, #16]
 8006a48:	dc02      	bgt.n	8006a50 <_printf_float+0x168>
 8006a4a:	6822      	ldr	r2, [r4, #0]
 8006a4c:	07d2      	lsls	r2, r2, #31
 8006a4e:	d501      	bpl.n	8006a54 <_printf_float+0x16c>
 8006a50:	3301      	adds	r3, #1
 8006a52:	6123      	str	r3, [r4, #16]
 8006a54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d09c      	beq.n	8006996 <_printf_float+0xae>
 8006a5c:	232d      	movs	r3, #45	; 0x2d
 8006a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a62:	e798      	b.n	8006996 <_printf_float+0xae>
 8006a64:	9a06      	ldr	r2, [sp, #24]
 8006a66:	2a47      	cmp	r2, #71	; 0x47
 8006a68:	d1be      	bne.n	80069e8 <_printf_float+0x100>
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1bc      	bne.n	80069e8 <_printf_float+0x100>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e7b9      	b.n	80069e6 <_printf_float+0xfe>
 8006a72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006a76:	d118      	bne.n	8006aaa <_printf_float+0x1c2>
 8006a78:	2900      	cmp	r1, #0
 8006a7a:	6863      	ldr	r3, [r4, #4]
 8006a7c:	dd0b      	ble.n	8006a96 <_printf_float+0x1ae>
 8006a7e:	6121      	str	r1, [r4, #16]
 8006a80:	b913      	cbnz	r3, 8006a88 <_printf_float+0x1a0>
 8006a82:	6822      	ldr	r2, [r4, #0]
 8006a84:	07d0      	lsls	r0, r2, #31
 8006a86:	d502      	bpl.n	8006a8e <_printf_float+0x1a6>
 8006a88:	3301      	adds	r3, #1
 8006a8a:	440b      	add	r3, r1
 8006a8c:	6123      	str	r3, [r4, #16]
 8006a8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a90:	f04f 0900 	mov.w	r9, #0
 8006a94:	e7de      	b.n	8006a54 <_printf_float+0x16c>
 8006a96:	b913      	cbnz	r3, 8006a9e <_printf_float+0x1b6>
 8006a98:	6822      	ldr	r2, [r4, #0]
 8006a9a:	07d2      	lsls	r2, r2, #31
 8006a9c:	d501      	bpl.n	8006aa2 <_printf_float+0x1ba>
 8006a9e:	3302      	adds	r3, #2
 8006aa0:	e7f4      	b.n	8006a8c <_printf_float+0x1a4>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e7f2      	b.n	8006a8c <_printf_float+0x1a4>
 8006aa6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aac:	4299      	cmp	r1, r3
 8006aae:	db05      	blt.n	8006abc <_printf_float+0x1d4>
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	6121      	str	r1, [r4, #16]
 8006ab4:	07d8      	lsls	r0, r3, #31
 8006ab6:	d5ea      	bpl.n	8006a8e <_printf_float+0x1a6>
 8006ab8:	1c4b      	adds	r3, r1, #1
 8006aba:	e7e7      	b.n	8006a8c <_printf_float+0x1a4>
 8006abc:	2900      	cmp	r1, #0
 8006abe:	bfd4      	ite	le
 8006ac0:	f1c1 0202 	rsble	r2, r1, #2
 8006ac4:	2201      	movgt	r2, #1
 8006ac6:	4413      	add	r3, r2
 8006ac8:	e7e0      	b.n	8006a8c <_printf_float+0x1a4>
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	055a      	lsls	r2, r3, #21
 8006ace:	d407      	bmi.n	8006ae0 <_printf_float+0x1f8>
 8006ad0:	6923      	ldr	r3, [r4, #16]
 8006ad2:	4642      	mov	r2, r8
 8006ad4:	4631      	mov	r1, r6
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	47b8      	blx	r7
 8006ada:	3001      	adds	r0, #1
 8006adc:	d12c      	bne.n	8006b38 <_printf_float+0x250>
 8006ade:	e764      	b.n	80069aa <_printf_float+0xc2>
 8006ae0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ae4:	f240 80e0 	bls.w	8006ca8 <_printf_float+0x3c0>
 8006ae8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006aec:	2200      	movs	r2, #0
 8006aee:	2300      	movs	r3, #0
 8006af0:	f7fa f812 	bl	8000b18 <__aeabi_dcmpeq>
 8006af4:	2800      	cmp	r0, #0
 8006af6:	d034      	beq.n	8006b62 <_printf_float+0x27a>
 8006af8:	4a37      	ldr	r2, [pc, #220]	; (8006bd8 <_printf_float+0x2f0>)
 8006afa:	2301      	movs	r3, #1
 8006afc:	4631      	mov	r1, r6
 8006afe:	4628      	mov	r0, r5
 8006b00:	47b8      	blx	r7
 8006b02:	3001      	adds	r0, #1
 8006b04:	f43f af51 	beq.w	80069aa <_printf_float+0xc2>
 8006b08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	db02      	blt.n	8006b16 <_printf_float+0x22e>
 8006b10:	6823      	ldr	r3, [r4, #0]
 8006b12:	07d8      	lsls	r0, r3, #31
 8006b14:	d510      	bpl.n	8006b38 <_printf_float+0x250>
 8006b16:	ee18 3a10 	vmov	r3, s16
 8006b1a:	4652      	mov	r2, sl
 8006b1c:	4631      	mov	r1, r6
 8006b1e:	4628      	mov	r0, r5
 8006b20:	47b8      	blx	r7
 8006b22:	3001      	adds	r0, #1
 8006b24:	f43f af41 	beq.w	80069aa <_printf_float+0xc2>
 8006b28:	f04f 0800 	mov.w	r8, #0
 8006b2c:	f104 091a 	add.w	r9, r4, #26
 8006b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b32:	3b01      	subs	r3, #1
 8006b34:	4543      	cmp	r3, r8
 8006b36:	dc09      	bgt.n	8006b4c <_printf_float+0x264>
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	079b      	lsls	r3, r3, #30
 8006b3c:	f100 8105 	bmi.w	8006d4a <_printf_float+0x462>
 8006b40:	68e0      	ldr	r0, [r4, #12]
 8006b42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b44:	4298      	cmp	r0, r3
 8006b46:	bfb8      	it	lt
 8006b48:	4618      	movlt	r0, r3
 8006b4a:	e730      	b.n	80069ae <_printf_float+0xc6>
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	464a      	mov	r2, r9
 8006b50:	4631      	mov	r1, r6
 8006b52:	4628      	mov	r0, r5
 8006b54:	47b8      	blx	r7
 8006b56:	3001      	adds	r0, #1
 8006b58:	f43f af27 	beq.w	80069aa <_printf_float+0xc2>
 8006b5c:	f108 0801 	add.w	r8, r8, #1
 8006b60:	e7e6      	b.n	8006b30 <_printf_float+0x248>
 8006b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	dc39      	bgt.n	8006bdc <_printf_float+0x2f4>
 8006b68:	4a1b      	ldr	r2, [pc, #108]	; (8006bd8 <_printf_float+0x2f0>)
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	4631      	mov	r1, r6
 8006b6e:	4628      	mov	r0, r5
 8006b70:	47b8      	blx	r7
 8006b72:	3001      	adds	r0, #1
 8006b74:	f43f af19 	beq.w	80069aa <_printf_float+0xc2>
 8006b78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	d102      	bne.n	8006b86 <_printf_float+0x29e>
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	07d9      	lsls	r1, r3, #31
 8006b84:	d5d8      	bpl.n	8006b38 <_printf_float+0x250>
 8006b86:	ee18 3a10 	vmov	r3, s16
 8006b8a:	4652      	mov	r2, sl
 8006b8c:	4631      	mov	r1, r6
 8006b8e:	4628      	mov	r0, r5
 8006b90:	47b8      	blx	r7
 8006b92:	3001      	adds	r0, #1
 8006b94:	f43f af09 	beq.w	80069aa <_printf_float+0xc2>
 8006b98:	f04f 0900 	mov.w	r9, #0
 8006b9c:	f104 0a1a 	add.w	sl, r4, #26
 8006ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba2:	425b      	negs	r3, r3
 8006ba4:	454b      	cmp	r3, r9
 8006ba6:	dc01      	bgt.n	8006bac <_printf_float+0x2c4>
 8006ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006baa:	e792      	b.n	8006ad2 <_printf_float+0x1ea>
 8006bac:	2301      	movs	r3, #1
 8006bae:	4652      	mov	r2, sl
 8006bb0:	4631      	mov	r1, r6
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	47b8      	blx	r7
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	f43f aef7 	beq.w	80069aa <_printf_float+0xc2>
 8006bbc:	f109 0901 	add.w	r9, r9, #1
 8006bc0:	e7ee      	b.n	8006ba0 <_printf_float+0x2b8>
 8006bc2:	bf00      	nop
 8006bc4:	7fefffff 	.word	0x7fefffff
 8006bc8:	0800961c 	.word	0x0800961c
 8006bcc:	08009620 	.word	0x08009620
 8006bd0:	08009628 	.word	0x08009628
 8006bd4:	08009624 	.word	0x08009624
 8006bd8:	0800962c 	.word	0x0800962c
 8006bdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006be0:	429a      	cmp	r2, r3
 8006be2:	bfa8      	it	ge
 8006be4:	461a      	movge	r2, r3
 8006be6:	2a00      	cmp	r2, #0
 8006be8:	4691      	mov	r9, r2
 8006bea:	dc37      	bgt.n	8006c5c <_printf_float+0x374>
 8006bec:	f04f 0b00 	mov.w	fp, #0
 8006bf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bf4:	f104 021a 	add.w	r2, r4, #26
 8006bf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bfa:	9305      	str	r3, [sp, #20]
 8006bfc:	eba3 0309 	sub.w	r3, r3, r9
 8006c00:	455b      	cmp	r3, fp
 8006c02:	dc33      	bgt.n	8006c6c <_printf_float+0x384>
 8006c04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	db3b      	blt.n	8006c84 <_printf_float+0x39c>
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	07da      	lsls	r2, r3, #31
 8006c10:	d438      	bmi.n	8006c84 <_printf_float+0x39c>
 8006c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c14:	9a05      	ldr	r2, [sp, #20]
 8006c16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c18:	1a9a      	subs	r2, r3, r2
 8006c1a:	eba3 0901 	sub.w	r9, r3, r1
 8006c1e:	4591      	cmp	r9, r2
 8006c20:	bfa8      	it	ge
 8006c22:	4691      	movge	r9, r2
 8006c24:	f1b9 0f00 	cmp.w	r9, #0
 8006c28:	dc35      	bgt.n	8006c96 <_printf_float+0x3ae>
 8006c2a:	f04f 0800 	mov.w	r8, #0
 8006c2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c32:	f104 0a1a 	add.w	sl, r4, #26
 8006c36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c3a:	1a9b      	subs	r3, r3, r2
 8006c3c:	eba3 0309 	sub.w	r3, r3, r9
 8006c40:	4543      	cmp	r3, r8
 8006c42:	f77f af79 	ble.w	8006b38 <_printf_float+0x250>
 8006c46:	2301      	movs	r3, #1
 8006c48:	4652      	mov	r2, sl
 8006c4a:	4631      	mov	r1, r6
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	47b8      	blx	r7
 8006c50:	3001      	adds	r0, #1
 8006c52:	f43f aeaa 	beq.w	80069aa <_printf_float+0xc2>
 8006c56:	f108 0801 	add.w	r8, r8, #1
 8006c5a:	e7ec      	b.n	8006c36 <_printf_float+0x34e>
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	4631      	mov	r1, r6
 8006c60:	4642      	mov	r2, r8
 8006c62:	4628      	mov	r0, r5
 8006c64:	47b8      	blx	r7
 8006c66:	3001      	adds	r0, #1
 8006c68:	d1c0      	bne.n	8006bec <_printf_float+0x304>
 8006c6a:	e69e      	b.n	80069aa <_printf_float+0xc2>
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	4631      	mov	r1, r6
 8006c70:	4628      	mov	r0, r5
 8006c72:	9205      	str	r2, [sp, #20]
 8006c74:	47b8      	blx	r7
 8006c76:	3001      	adds	r0, #1
 8006c78:	f43f ae97 	beq.w	80069aa <_printf_float+0xc2>
 8006c7c:	9a05      	ldr	r2, [sp, #20]
 8006c7e:	f10b 0b01 	add.w	fp, fp, #1
 8006c82:	e7b9      	b.n	8006bf8 <_printf_float+0x310>
 8006c84:	ee18 3a10 	vmov	r3, s16
 8006c88:	4652      	mov	r2, sl
 8006c8a:	4631      	mov	r1, r6
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	47b8      	blx	r7
 8006c90:	3001      	adds	r0, #1
 8006c92:	d1be      	bne.n	8006c12 <_printf_float+0x32a>
 8006c94:	e689      	b.n	80069aa <_printf_float+0xc2>
 8006c96:	9a05      	ldr	r2, [sp, #20]
 8006c98:	464b      	mov	r3, r9
 8006c9a:	4442      	add	r2, r8
 8006c9c:	4631      	mov	r1, r6
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	47b8      	blx	r7
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	d1c1      	bne.n	8006c2a <_printf_float+0x342>
 8006ca6:	e680      	b.n	80069aa <_printf_float+0xc2>
 8006ca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006caa:	2a01      	cmp	r2, #1
 8006cac:	dc01      	bgt.n	8006cb2 <_printf_float+0x3ca>
 8006cae:	07db      	lsls	r3, r3, #31
 8006cb0:	d538      	bpl.n	8006d24 <_printf_float+0x43c>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	4642      	mov	r2, r8
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	4628      	mov	r0, r5
 8006cba:	47b8      	blx	r7
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	f43f ae74 	beq.w	80069aa <_printf_float+0xc2>
 8006cc2:	ee18 3a10 	vmov	r3, s16
 8006cc6:	4652      	mov	r2, sl
 8006cc8:	4631      	mov	r1, r6
 8006cca:	4628      	mov	r0, r5
 8006ccc:	47b8      	blx	r7
 8006cce:	3001      	adds	r0, #1
 8006cd0:	f43f ae6b 	beq.w	80069aa <_printf_float+0xc2>
 8006cd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006cd8:	2200      	movs	r2, #0
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f7f9 ff1c 	bl	8000b18 <__aeabi_dcmpeq>
 8006ce0:	b9d8      	cbnz	r0, 8006d1a <_printf_float+0x432>
 8006ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ce4:	f108 0201 	add.w	r2, r8, #1
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	4631      	mov	r1, r6
 8006cec:	4628      	mov	r0, r5
 8006cee:	47b8      	blx	r7
 8006cf0:	3001      	adds	r0, #1
 8006cf2:	d10e      	bne.n	8006d12 <_printf_float+0x42a>
 8006cf4:	e659      	b.n	80069aa <_printf_float+0xc2>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	4652      	mov	r2, sl
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	47b8      	blx	r7
 8006d00:	3001      	adds	r0, #1
 8006d02:	f43f ae52 	beq.w	80069aa <_printf_float+0xc2>
 8006d06:	f108 0801 	add.w	r8, r8, #1
 8006d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	4543      	cmp	r3, r8
 8006d10:	dcf1      	bgt.n	8006cf6 <_printf_float+0x40e>
 8006d12:	464b      	mov	r3, r9
 8006d14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006d18:	e6dc      	b.n	8006ad4 <_printf_float+0x1ec>
 8006d1a:	f04f 0800 	mov.w	r8, #0
 8006d1e:	f104 0a1a 	add.w	sl, r4, #26
 8006d22:	e7f2      	b.n	8006d0a <_printf_float+0x422>
 8006d24:	2301      	movs	r3, #1
 8006d26:	4642      	mov	r2, r8
 8006d28:	e7df      	b.n	8006cea <_printf_float+0x402>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	464a      	mov	r2, r9
 8006d2e:	4631      	mov	r1, r6
 8006d30:	4628      	mov	r0, r5
 8006d32:	47b8      	blx	r7
 8006d34:	3001      	adds	r0, #1
 8006d36:	f43f ae38 	beq.w	80069aa <_printf_float+0xc2>
 8006d3a:	f108 0801 	add.w	r8, r8, #1
 8006d3e:	68e3      	ldr	r3, [r4, #12]
 8006d40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d42:	1a5b      	subs	r3, r3, r1
 8006d44:	4543      	cmp	r3, r8
 8006d46:	dcf0      	bgt.n	8006d2a <_printf_float+0x442>
 8006d48:	e6fa      	b.n	8006b40 <_printf_float+0x258>
 8006d4a:	f04f 0800 	mov.w	r8, #0
 8006d4e:	f104 0919 	add.w	r9, r4, #25
 8006d52:	e7f4      	b.n	8006d3e <_printf_float+0x456>

08006d54 <_printf_common>:
 8006d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d58:	4616      	mov	r6, r2
 8006d5a:	4699      	mov	r9, r3
 8006d5c:	688a      	ldr	r2, [r1, #8]
 8006d5e:	690b      	ldr	r3, [r1, #16]
 8006d60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d64:	4293      	cmp	r3, r2
 8006d66:	bfb8      	it	lt
 8006d68:	4613      	movlt	r3, r2
 8006d6a:	6033      	str	r3, [r6, #0]
 8006d6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d70:	4607      	mov	r7, r0
 8006d72:	460c      	mov	r4, r1
 8006d74:	b10a      	cbz	r2, 8006d7a <_printf_common+0x26>
 8006d76:	3301      	adds	r3, #1
 8006d78:	6033      	str	r3, [r6, #0]
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	0699      	lsls	r1, r3, #26
 8006d7e:	bf42      	ittt	mi
 8006d80:	6833      	ldrmi	r3, [r6, #0]
 8006d82:	3302      	addmi	r3, #2
 8006d84:	6033      	strmi	r3, [r6, #0]
 8006d86:	6825      	ldr	r5, [r4, #0]
 8006d88:	f015 0506 	ands.w	r5, r5, #6
 8006d8c:	d106      	bne.n	8006d9c <_printf_common+0x48>
 8006d8e:	f104 0a19 	add.w	sl, r4, #25
 8006d92:	68e3      	ldr	r3, [r4, #12]
 8006d94:	6832      	ldr	r2, [r6, #0]
 8006d96:	1a9b      	subs	r3, r3, r2
 8006d98:	42ab      	cmp	r3, r5
 8006d9a:	dc26      	bgt.n	8006dea <_printf_common+0x96>
 8006d9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006da0:	1e13      	subs	r3, r2, #0
 8006da2:	6822      	ldr	r2, [r4, #0]
 8006da4:	bf18      	it	ne
 8006da6:	2301      	movne	r3, #1
 8006da8:	0692      	lsls	r2, r2, #26
 8006daa:	d42b      	bmi.n	8006e04 <_printf_common+0xb0>
 8006dac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006db0:	4649      	mov	r1, r9
 8006db2:	4638      	mov	r0, r7
 8006db4:	47c0      	blx	r8
 8006db6:	3001      	adds	r0, #1
 8006db8:	d01e      	beq.n	8006df8 <_printf_common+0xa4>
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	68e5      	ldr	r5, [r4, #12]
 8006dbe:	6832      	ldr	r2, [r6, #0]
 8006dc0:	f003 0306 	and.w	r3, r3, #6
 8006dc4:	2b04      	cmp	r3, #4
 8006dc6:	bf08      	it	eq
 8006dc8:	1aad      	subeq	r5, r5, r2
 8006dca:	68a3      	ldr	r3, [r4, #8]
 8006dcc:	6922      	ldr	r2, [r4, #16]
 8006dce:	bf0c      	ite	eq
 8006dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dd4:	2500      	movne	r5, #0
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	bfc4      	itt	gt
 8006dda:	1a9b      	subgt	r3, r3, r2
 8006ddc:	18ed      	addgt	r5, r5, r3
 8006dde:	2600      	movs	r6, #0
 8006de0:	341a      	adds	r4, #26
 8006de2:	42b5      	cmp	r5, r6
 8006de4:	d11a      	bne.n	8006e1c <_printf_common+0xc8>
 8006de6:	2000      	movs	r0, #0
 8006de8:	e008      	b.n	8006dfc <_printf_common+0xa8>
 8006dea:	2301      	movs	r3, #1
 8006dec:	4652      	mov	r2, sl
 8006dee:	4649      	mov	r1, r9
 8006df0:	4638      	mov	r0, r7
 8006df2:	47c0      	blx	r8
 8006df4:	3001      	adds	r0, #1
 8006df6:	d103      	bne.n	8006e00 <_printf_common+0xac>
 8006df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e00:	3501      	adds	r5, #1
 8006e02:	e7c6      	b.n	8006d92 <_printf_common+0x3e>
 8006e04:	18e1      	adds	r1, r4, r3
 8006e06:	1c5a      	adds	r2, r3, #1
 8006e08:	2030      	movs	r0, #48	; 0x30
 8006e0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e0e:	4422      	add	r2, r4
 8006e10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e18:	3302      	adds	r3, #2
 8006e1a:	e7c7      	b.n	8006dac <_printf_common+0x58>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	4622      	mov	r2, r4
 8006e20:	4649      	mov	r1, r9
 8006e22:	4638      	mov	r0, r7
 8006e24:	47c0      	blx	r8
 8006e26:	3001      	adds	r0, #1
 8006e28:	d0e6      	beq.n	8006df8 <_printf_common+0xa4>
 8006e2a:	3601      	adds	r6, #1
 8006e2c:	e7d9      	b.n	8006de2 <_printf_common+0x8e>
	...

08006e30 <_printf_i>:
 8006e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e34:	7e0f      	ldrb	r7, [r1, #24]
 8006e36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e38:	2f78      	cmp	r7, #120	; 0x78
 8006e3a:	4691      	mov	r9, r2
 8006e3c:	4680      	mov	r8, r0
 8006e3e:	460c      	mov	r4, r1
 8006e40:	469a      	mov	sl, r3
 8006e42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e46:	d807      	bhi.n	8006e58 <_printf_i+0x28>
 8006e48:	2f62      	cmp	r7, #98	; 0x62
 8006e4a:	d80a      	bhi.n	8006e62 <_printf_i+0x32>
 8006e4c:	2f00      	cmp	r7, #0
 8006e4e:	f000 80d8 	beq.w	8007002 <_printf_i+0x1d2>
 8006e52:	2f58      	cmp	r7, #88	; 0x58
 8006e54:	f000 80a3 	beq.w	8006f9e <_printf_i+0x16e>
 8006e58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e60:	e03a      	b.n	8006ed8 <_printf_i+0xa8>
 8006e62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e66:	2b15      	cmp	r3, #21
 8006e68:	d8f6      	bhi.n	8006e58 <_printf_i+0x28>
 8006e6a:	a101      	add	r1, pc, #4	; (adr r1, 8006e70 <_printf_i+0x40>)
 8006e6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e70:	08006ec9 	.word	0x08006ec9
 8006e74:	08006edd 	.word	0x08006edd
 8006e78:	08006e59 	.word	0x08006e59
 8006e7c:	08006e59 	.word	0x08006e59
 8006e80:	08006e59 	.word	0x08006e59
 8006e84:	08006e59 	.word	0x08006e59
 8006e88:	08006edd 	.word	0x08006edd
 8006e8c:	08006e59 	.word	0x08006e59
 8006e90:	08006e59 	.word	0x08006e59
 8006e94:	08006e59 	.word	0x08006e59
 8006e98:	08006e59 	.word	0x08006e59
 8006e9c:	08006fe9 	.word	0x08006fe9
 8006ea0:	08006f0d 	.word	0x08006f0d
 8006ea4:	08006fcb 	.word	0x08006fcb
 8006ea8:	08006e59 	.word	0x08006e59
 8006eac:	08006e59 	.word	0x08006e59
 8006eb0:	0800700b 	.word	0x0800700b
 8006eb4:	08006e59 	.word	0x08006e59
 8006eb8:	08006f0d 	.word	0x08006f0d
 8006ebc:	08006e59 	.word	0x08006e59
 8006ec0:	08006e59 	.word	0x08006e59
 8006ec4:	08006fd3 	.word	0x08006fd3
 8006ec8:	682b      	ldr	r3, [r5, #0]
 8006eca:	1d1a      	adds	r2, r3, #4
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	602a      	str	r2, [r5, #0]
 8006ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ed4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e0a3      	b.n	8007024 <_printf_i+0x1f4>
 8006edc:	6820      	ldr	r0, [r4, #0]
 8006ede:	6829      	ldr	r1, [r5, #0]
 8006ee0:	0606      	lsls	r6, r0, #24
 8006ee2:	f101 0304 	add.w	r3, r1, #4
 8006ee6:	d50a      	bpl.n	8006efe <_printf_i+0xce>
 8006ee8:	680e      	ldr	r6, [r1, #0]
 8006eea:	602b      	str	r3, [r5, #0]
 8006eec:	2e00      	cmp	r6, #0
 8006eee:	da03      	bge.n	8006ef8 <_printf_i+0xc8>
 8006ef0:	232d      	movs	r3, #45	; 0x2d
 8006ef2:	4276      	negs	r6, r6
 8006ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ef8:	485e      	ldr	r0, [pc, #376]	; (8007074 <_printf_i+0x244>)
 8006efa:	230a      	movs	r3, #10
 8006efc:	e019      	b.n	8006f32 <_printf_i+0x102>
 8006efe:	680e      	ldr	r6, [r1, #0]
 8006f00:	602b      	str	r3, [r5, #0]
 8006f02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f06:	bf18      	it	ne
 8006f08:	b236      	sxthne	r6, r6
 8006f0a:	e7ef      	b.n	8006eec <_printf_i+0xbc>
 8006f0c:	682b      	ldr	r3, [r5, #0]
 8006f0e:	6820      	ldr	r0, [r4, #0]
 8006f10:	1d19      	adds	r1, r3, #4
 8006f12:	6029      	str	r1, [r5, #0]
 8006f14:	0601      	lsls	r1, r0, #24
 8006f16:	d501      	bpl.n	8006f1c <_printf_i+0xec>
 8006f18:	681e      	ldr	r6, [r3, #0]
 8006f1a:	e002      	b.n	8006f22 <_printf_i+0xf2>
 8006f1c:	0646      	lsls	r6, r0, #25
 8006f1e:	d5fb      	bpl.n	8006f18 <_printf_i+0xe8>
 8006f20:	881e      	ldrh	r6, [r3, #0]
 8006f22:	4854      	ldr	r0, [pc, #336]	; (8007074 <_printf_i+0x244>)
 8006f24:	2f6f      	cmp	r7, #111	; 0x6f
 8006f26:	bf0c      	ite	eq
 8006f28:	2308      	moveq	r3, #8
 8006f2a:	230a      	movne	r3, #10
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f32:	6865      	ldr	r5, [r4, #4]
 8006f34:	60a5      	str	r5, [r4, #8]
 8006f36:	2d00      	cmp	r5, #0
 8006f38:	bfa2      	ittt	ge
 8006f3a:	6821      	ldrge	r1, [r4, #0]
 8006f3c:	f021 0104 	bicge.w	r1, r1, #4
 8006f40:	6021      	strge	r1, [r4, #0]
 8006f42:	b90e      	cbnz	r6, 8006f48 <_printf_i+0x118>
 8006f44:	2d00      	cmp	r5, #0
 8006f46:	d04d      	beq.n	8006fe4 <_printf_i+0x1b4>
 8006f48:	4615      	mov	r5, r2
 8006f4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f4e:	fb03 6711 	mls	r7, r3, r1, r6
 8006f52:	5dc7      	ldrb	r7, [r0, r7]
 8006f54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f58:	4637      	mov	r7, r6
 8006f5a:	42bb      	cmp	r3, r7
 8006f5c:	460e      	mov	r6, r1
 8006f5e:	d9f4      	bls.n	8006f4a <_printf_i+0x11a>
 8006f60:	2b08      	cmp	r3, #8
 8006f62:	d10b      	bne.n	8006f7c <_printf_i+0x14c>
 8006f64:	6823      	ldr	r3, [r4, #0]
 8006f66:	07de      	lsls	r6, r3, #31
 8006f68:	d508      	bpl.n	8006f7c <_printf_i+0x14c>
 8006f6a:	6923      	ldr	r3, [r4, #16]
 8006f6c:	6861      	ldr	r1, [r4, #4]
 8006f6e:	4299      	cmp	r1, r3
 8006f70:	bfde      	ittt	le
 8006f72:	2330      	movle	r3, #48	; 0x30
 8006f74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f78:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006f7c:	1b52      	subs	r2, r2, r5
 8006f7e:	6122      	str	r2, [r4, #16]
 8006f80:	f8cd a000 	str.w	sl, [sp]
 8006f84:	464b      	mov	r3, r9
 8006f86:	aa03      	add	r2, sp, #12
 8006f88:	4621      	mov	r1, r4
 8006f8a:	4640      	mov	r0, r8
 8006f8c:	f7ff fee2 	bl	8006d54 <_printf_common>
 8006f90:	3001      	adds	r0, #1
 8006f92:	d14c      	bne.n	800702e <_printf_i+0x1fe>
 8006f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f98:	b004      	add	sp, #16
 8006f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f9e:	4835      	ldr	r0, [pc, #212]	; (8007074 <_printf_i+0x244>)
 8006fa0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006fa4:	6829      	ldr	r1, [r5, #0]
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006fac:	6029      	str	r1, [r5, #0]
 8006fae:	061d      	lsls	r5, r3, #24
 8006fb0:	d514      	bpl.n	8006fdc <_printf_i+0x1ac>
 8006fb2:	07df      	lsls	r7, r3, #31
 8006fb4:	bf44      	itt	mi
 8006fb6:	f043 0320 	orrmi.w	r3, r3, #32
 8006fba:	6023      	strmi	r3, [r4, #0]
 8006fbc:	b91e      	cbnz	r6, 8006fc6 <_printf_i+0x196>
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	f023 0320 	bic.w	r3, r3, #32
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	2310      	movs	r3, #16
 8006fc8:	e7b0      	b.n	8006f2c <_printf_i+0xfc>
 8006fca:	6823      	ldr	r3, [r4, #0]
 8006fcc:	f043 0320 	orr.w	r3, r3, #32
 8006fd0:	6023      	str	r3, [r4, #0]
 8006fd2:	2378      	movs	r3, #120	; 0x78
 8006fd4:	4828      	ldr	r0, [pc, #160]	; (8007078 <_printf_i+0x248>)
 8006fd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fda:	e7e3      	b.n	8006fa4 <_printf_i+0x174>
 8006fdc:	0659      	lsls	r1, r3, #25
 8006fde:	bf48      	it	mi
 8006fe0:	b2b6      	uxthmi	r6, r6
 8006fe2:	e7e6      	b.n	8006fb2 <_printf_i+0x182>
 8006fe4:	4615      	mov	r5, r2
 8006fe6:	e7bb      	b.n	8006f60 <_printf_i+0x130>
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	6826      	ldr	r6, [r4, #0]
 8006fec:	6961      	ldr	r1, [r4, #20]
 8006fee:	1d18      	adds	r0, r3, #4
 8006ff0:	6028      	str	r0, [r5, #0]
 8006ff2:	0635      	lsls	r5, r6, #24
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	d501      	bpl.n	8006ffc <_printf_i+0x1cc>
 8006ff8:	6019      	str	r1, [r3, #0]
 8006ffa:	e002      	b.n	8007002 <_printf_i+0x1d2>
 8006ffc:	0670      	lsls	r0, r6, #25
 8006ffe:	d5fb      	bpl.n	8006ff8 <_printf_i+0x1c8>
 8007000:	8019      	strh	r1, [r3, #0]
 8007002:	2300      	movs	r3, #0
 8007004:	6123      	str	r3, [r4, #16]
 8007006:	4615      	mov	r5, r2
 8007008:	e7ba      	b.n	8006f80 <_printf_i+0x150>
 800700a:	682b      	ldr	r3, [r5, #0]
 800700c:	1d1a      	adds	r2, r3, #4
 800700e:	602a      	str	r2, [r5, #0]
 8007010:	681d      	ldr	r5, [r3, #0]
 8007012:	6862      	ldr	r2, [r4, #4]
 8007014:	2100      	movs	r1, #0
 8007016:	4628      	mov	r0, r5
 8007018:	f7f9 f90a 	bl	8000230 <memchr>
 800701c:	b108      	cbz	r0, 8007022 <_printf_i+0x1f2>
 800701e:	1b40      	subs	r0, r0, r5
 8007020:	6060      	str	r0, [r4, #4]
 8007022:	6863      	ldr	r3, [r4, #4]
 8007024:	6123      	str	r3, [r4, #16]
 8007026:	2300      	movs	r3, #0
 8007028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800702c:	e7a8      	b.n	8006f80 <_printf_i+0x150>
 800702e:	6923      	ldr	r3, [r4, #16]
 8007030:	462a      	mov	r2, r5
 8007032:	4649      	mov	r1, r9
 8007034:	4640      	mov	r0, r8
 8007036:	47d0      	blx	sl
 8007038:	3001      	adds	r0, #1
 800703a:	d0ab      	beq.n	8006f94 <_printf_i+0x164>
 800703c:	6823      	ldr	r3, [r4, #0]
 800703e:	079b      	lsls	r3, r3, #30
 8007040:	d413      	bmi.n	800706a <_printf_i+0x23a>
 8007042:	68e0      	ldr	r0, [r4, #12]
 8007044:	9b03      	ldr	r3, [sp, #12]
 8007046:	4298      	cmp	r0, r3
 8007048:	bfb8      	it	lt
 800704a:	4618      	movlt	r0, r3
 800704c:	e7a4      	b.n	8006f98 <_printf_i+0x168>
 800704e:	2301      	movs	r3, #1
 8007050:	4632      	mov	r2, r6
 8007052:	4649      	mov	r1, r9
 8007054:	4640      	mov	r0, r8
 8007056:	47d0      	blx	sl
 8007058:	3001      	adds	r0, #1
 800705a:	d09b      	beq.n	8006f94 <_printf_i+0x164>
 800705c:	3501      	adds	r5, #1
 800705e:	68e3      	ldr	r3, [r4, #12]
 8007060:	9903      	ldr	r1, [sp, #12]
 8007062:	1a5b      	subs	r3, r3, r1
 8007064:	42ab      	cmp	r3, r5
 8007066:	dcf2      	bgt.n	800704e <_printf_i+0x21e>
 8007068:	e7eb      	b.n	8007042 <_printf_i+0x212>
 800706a:	2500      	movs	r5, #0
 800706c:	f104 0619 	add.w	r6, r4, #25
 8007070:	e7f5      	b.n	800705e <_printf_i+0x22e>
 8007072:	bf00      	nop
 8007074:	0800962e 	.word	0x0800962e
 8007078:	0800963f 	.word	0x0800963f

0800707c <sniprintf>:
 800707c:	b40c      	push	{r2, r3}
 800707e:	b530      	push	{r4, r5, lr}
 8007080:	4b17      	ldr	r3, [pc, #92]	; (80070e0 <sniprintf+0x64>)
 8007082:	1e0c      	subs	r4, r1, #0
 8007084:	681d      	ldr	r5, [r3, #0]
 8007086:	b09d      	sub	sp, #116	; 0x74
 8007088:	da08      	bge.n	800709c <sniprintf+0x20>
 800708a:	238b      	movs	r3, #139	; 0x8b
 800708c:	602b      	str	r3, [r5, #0]
 800708e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007092:	b01d      	add	sp, #116	; 0x74
 8007094:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007098:	b002      	add	sp, #8
 800709a:	4770      	bx	lr
 800709c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80070a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80070a4:	bf14      	ite	ne
 80070a6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80070aa:	4623      	moveq	r3, r4
 80070ac:	9304      	str	r3, [sp, #16]
 80070ae:	9307      	str	r3, [sp, #28]
 80070b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070b4:	9002      	str	r0, [sp, #8]
 80070b6:	9006      	str	r0, [sp, #24]
 80070b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80070bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80070be:	ab21      	add	r3, sp, #132	; 0x84
 80070c0:	a902      	add	r1, sp, #8
 80070c2:	4628      	mov	r0, r5
 80070c4:	9301      	str	r3, [sp, #4]
 80070c6:	f001 fb79 	bl	80087bc <_svfiprintf_r>
 80070ca:	1c43      	adds	r3, r0, #1
 80070cc:	bfbc      	itt	lt
 80070ce:	238b      	movlt	r3, #139	; 0x8b
 80070d0:	602b      	strlt	r3, [r5, #0]
 80070d2:	2c00      	cmp	r4, #0
 80070d4:	d0dd      	beq.n	8007092 <sniprintf+0x16>
 80070d6:	9b02      	ldr	r3, [sp, #8]
 80070d8:	2200      	movs	r2, #0
 80070da:	701a      	strb	r2, [r3, #0]
 80070dc:	e7d9      	b.n	8007092 <sniprintf+0x16>
 80070de:	bf00      	nop
 80070e0:	2000000c 	.word	0x2000000c

080070e4 <quorem>:
 80070e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e8:	6903      	ldr	r3, [r0, #16]
 80070ea:	690c      	ldr	r4, [r1, #16]
 80070ec:	42a3      	cmp	r3, r4
 80070ee:	4607      	mov	r7, r0
 80070f0:	f2c0 8081 	blt.w	80071f6 <quorem+0x112>
 80070f4:	3c01      	subs	r4, #1
 80070f6:	f101 0814 	add.w	r8, r1, #20
 80070fa:	f100 0514 	add.w	r5, r0, #20
 80070fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007102:	9301      	str	r3, [sp, #4]
 8007104:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007108:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800710c:	3301      	adds	r3, #1
 800710e:	429a      	cmp	r2, r3
 8007110:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007114:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007118:	fbb2 f6f3 	udiv	r6, r2, r3
 800711c:	d331      	bcc.n	8007182 <quorem+0x9e>
 800711e:	f04f 0e00 	mov.w	lr, #0
 8007122:	4640      	mov	r0, r8
 8007124:	46ac      	mov	ip, r5
 8007126:	46f2      	mov	sl, lr
 8007128:	f850 2b04 	ldr.w	r2, [r0], #4
 800712c:	b293      	uxth	r3, r2
 800712e:	fb06 e303 	mla	r3, r6, r3, lr
 8007132:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007136:	b29b      	uxth	r3, r3
 8007138:	ebaa 0303 	sub.w	r3, sl, r3
 800713c:	f8dc a000 	ldr.w	sl, [ip]
 8007140:	0c12      	lsrs	r2, r2, #16
 8007142:	fa13 f38a 	uxtah	r3, r3, sl
 8007146:	fb06 e202 	mla	r2, r6, r2, lr
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	9b00      	ldr	r3, [sp, #0]
 800714e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007152:	b292      	uxth	r2, r2
 8007154:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007158:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800715c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007160:	4581      	cmp	r9, r0
 8007162:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007166:	f84c 3b04 	str.w	r3, [ip], #4
 800716a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800716e:	d2db      	bcs.n	8007128 <quorem+0x44>
 8007170:	f855 300b 	ldr.w	r3, [r5, fp]
 8007174:	b92b      	cbnz	r3, 8007182 <quorem+0x9e>
 8007176:	9b01      	ldr	r3, [sp, #4]
 8007178:	3b04      	subs	r3, #4
 800717a:	429d      	cmp	r5, r3
 800717c:	461a      	mov	r2, r3
 800717e:	d32e      	bcc.n	80071de <quorem+0xfa>
 8007180:	613c      	str	r4, [r7, #16]
 8007182:	4638      	mov	r0, r7
 8007184:	f001 f8c6 	bl	8008314 <__mcmp>
 8007188:	2800      	cmp	r0, #0
 800718a:	db24      	blt.n	80071d6 <quorem+0xf2>
 800718c:	3601      	adds	r6, #1
 800718e:	4628      	mov	r0, r5
 8007190:	f04f 0c00 	mov.w	ip, #0
 8007194:	f858 2b04 	ldr.w	r2, [r8], #4
 8007198:	f8d0 e000 	ldr.w	lr, [r0]
 800719c:	b293      	uxth	r3, r2
 800719e:	ebac 0303 	sub.w	r3, ip, r3
 80071a2:	0c12      	lsrs	r2, r2, #16
 80071a4:	fa13 f38e 	uxtah	r3, r3, lr
 80071a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80071ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071b6:	45c1      	cmp	r9, r8
 80071b8:	f840 3b04 	str.w	r3, [r0], #4
 80071bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80071c0:	d2e8      	bcs.n	8007194 <quorem+0xb0>
 80071c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071ca:	b922      	cbnz	r2, 80071d6 <quorem+0xf2>
 80071cc:	3b04      	subs	r3, #4
 80071ce:	429d      	cmp	r5, r3
 80071d0:	461a      	mov	r2, r3
 80071d2:	d30a      	bcc.n	80071ea <quorem+0x106>
 80071d4:	613c      	str	r4, [r7, #16]
 80071d6:	4630      	mov	r0, r6
 80071d8:	b003      	add	sp, #12
 80071da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071de:	6812      	ldr	r2, [r2, #0]
 80071e0:	3b04      	subs	r3, #4
 80071e2:	2a00      	cmp	r2, #0
 80071e4:	d1cc      	bne.n	8007180 <quorem+0x9c>
 80071e6:	3c01      	subs	r4, #1
 80071e8:	e7c7      	b.n	800717a <quorem+0x96>
 80071ea:	6812      	ldr	r2, [r2, #0]
 80071ec:	3b04      	subs	r3, #4
 80071ee:	2a00      	cmp	r2, #0
 80071f0:	d1f0      	bne.n	80071d4 <quorem+0xf0>
 80071f2:	3c01      	subs	r4, #1
 80071f4:	e7eb      	b.n	80071ce <quorem+0xea>
 80071f6:	2000      	movs	r0, #0
 80071f8:	e7ee      	b.n	80071d8 <quorem+0xf4>
 80071fa:	0000      	movs	r0, r0
 80071fc:	0000      	movs	r0, r0
	...

08007200 <_dtoa_r>:
 8007200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007204:	ed2d 8b04 	vpush	{d8-d9}
 8007208:	ec57 6b10 	vmov	r6, r7, d0
 800720c:	b093      	sub	sp, #76	; 0x4c
 800720e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007210:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007214:	9106      	str	r1, [sp, #24]
 8007216:	ee10 aa10 	vmov	sl, s0
 800721a:	4604      	mov	r4, r0
 800721c:	9209      	str	r2, [sp, #36]	; 0x24
 800721e:	930c      	str	r3, [sp, #48]	; 0x30
 8007220:	46bb      	mov	fp, r7
 8007222:	b975      	cbnz	r5, 8007242 <_dtoa_r+0x42>
 8007224:	2010      	movs	r0, #16
 8007226:	f000 fddd 	bl	8007de4 <malloc>
 800722a:	4602      	mov	r2, r0
 800722c:	6260      	str	r0, [r4, #36]	; 0x24
 800722e:	b920      	cbnz	r0, 800723a <_dtoa_r+0x3a>
 8007230:	4ba7      	ldr	r3, [pc, #668]	; (80074d0 <_dtoa_r+0x2d0>)
 8007232:	21ea      	movs	r1, #234	; 0xea
 8007234:	48a7      	ldr	r0, [pc, #668]	; (80074d4 <_dtoa_r+0x2d4>)
 8007236:	f001 fbd1 	bl	80089dc <__assert_func>
 800723a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800723e:	6005      	str	r5, [r0, #0]
 8007240:	60c5      	str	r5, [r0, #12]
 8007242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007244:	6819      	ldr	r1, [r3, #0]
 8007246:	b151      	cbz	r1, 800725e <_dtoa_r+0x5e>
 8007248:	685a      	ldr	r2, [r3, #4]
 800724a:	604a      	str	r2, [r1, #4]
 800724c:	2301      	movs	r3, #1
 800724e:	4093      	lsls	r3, r2
 8007250:	608b      	str	r3, [r1, #8]
 8007252:	4620      	mov	r0, r4
 8007254:	f000 fe1c 	bl	8007e90 <_Bfree>
 8007258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800725a:	2200      	movs	r2, #0
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	1e3b      	subs	r3, r7, #0
 8007260:	bfaa      	itet	ge
 8007262:	2300      	movge	r3, #0
 8007264:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007268:	f8c8 3000 	strge.w	r3, [r8]
 800726c:	4b9a      	ldr	r3, [pc, #616]	; (80074d8 <_dtoa_r+0x2d8>)
 800726e:	bfbc      	itt	lt
 8007270:	2201      	movlt	r2, #1
 8007272:	f8c8 2000 	strlt.w	r2, [r8]
 8007276:	ea33 030b 	bics.w	r3, r3, fp
 800727a:	d11b      	bne.n	80072b4 <_dtoa_r+0xb4>
 800727c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800727e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007282:	6013      	str	r3, [r2, #0]
 8007284:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007288:	4333      	orrs	r3, r6
 800728a:	f000 8592 	beq.w	8007db2 <_dtoa_r+0xbb2>
 800728e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007290:	b963      	cbnz	r3, 80072ac <_dtoa_r+0xac>
 8007292:	4b92      	ldr	r3, [pc, #584]	; (80074dc <_dtoa_r+0x2dc>)
 8007294:	e022      	b.n	80072dc <_dtoa_r+0xdc>
 8007296:	4b92      	ldr	r3, [pc, #584]	; (80074e0 <_dtoa_r+0x2e0>)
 8007298:	9301      	str	r3, [sp, #4]
 800729a:	3308      	adds	r3, #8
 800729c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800729e:	6013      	str	r3, [r2, #0]
 80072a0:	9801      	ldr	r0, [sp, #4]
 80072a2:	b013      	add	sp, #76	; 0x4c
 80072a4:	ecbd 8b04 	vpop	{d8-d9}
 80072a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ac:	4b8b      	ldr	r3, [pc, #556]	; (80074dc <_dtoa_r+0x2dc>)
 80072ae:	9301      	str	r3, [sp, #4]
 80072b0:	3303      	adds	r3, #3
 80072b2:	e7f3      	b.n	800729c <_dtoa_r+0x9c>
 80072b4:	2200      	movs	r2, #0
 80072b6:	2300      	movs	r3, #0
 80072b8:	4650      	mov	r0, sl
 80072ba:	4659      	mov	r1, fp
 80072bc:	f7f9 fc2c 	bl	8000b18 <__aeabi_dcmpeq>
 80072c0:	ec4b ab19 	vmov	d9, sl, fp
 80072c4:	4680      	mov	r8, r0
 80072c6:	b158      	cbz	r0, 80072e0 <_dtoa_r+0xe0>
 80072c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072ca:	2301      	movs	r3, #1
 80072cc:	6013      	str	r3, [r2, #0]
 80072ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 856b 	beq.w	8007dac <_dtoa_r+0xbac>
 80072d6:	4883      	ldr	r0, [pc, #524]	; (80074e4 <_dtoa_r+0x2e4>)
 80072d8:	6018      	str	r0, [r3, #0]
 80072da:	1e43      	subs	r3, r0, #1
 80072dc:	9301      	str	r3, [sp, #4]
 80072de:	e7df      	b.n	80072a0 <_dtoa_r+0xa0>
 80072e0:	ec4b ab10 	vmov	d0, sl, fp
 80072e4:	aa10      	add	r2, sp, #64	; 0x40
 80072e6:	a911      	add	r1, sp, #68	; 0x44
 80072e8:	4620      	mov	r0, r4
 80072ea:	f001 f8b9 	bl	8008460 <__d2b>
 80072ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80072f2:	ee08 0a10 	vmov	s16, r0
 80072f6:	2d00      	cmp	r5, #0
 80072f8:	f000 8084 	beq.w	8007404 <_dtoa_r+0x204>
 80072fc:	ee19 3a90 	vmov	r3, s19
 8007300:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007304:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007308:	4656      	mov	r6, sl
 800730a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800730e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007312:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007316:	4b74      	ldr	r3, [pc, #464]	; (80074e8 <_dtoa_r+0x2e8>)
 8007318:	2200      	movs	r2, #0
 800731a:	4630      	mov	r0, r6
 800731c:	4639      	mov	r1, r7
 800731e:	f7f8 ffdb 	bl	80002d8 <__aeabi_dsub>
 8007322:	a365      	add	r3, pc, #404	; (adr r3, 80074b8 <_dtoa_r+0x2b8>)
 8007324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007328:	f7f9 f98e 	bl	8000648 <__aeabi_dmul>
 800732c:	a364      	add	r3, pc, #400	; (adr r3, 80074c0 <_dtoa_r+0x2c0>)
 800732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007332:	f7f8 ffd3 	bl	80002dc <__adddf3>
 8007336:	4606      	mov	r6, r0
 8007338:	4628      	mov	r0, r5
 800733a:	460f      	mov	r7, r1
 800733c:	f7f9 f91a 	bl	8000574 <__aeabi_i2d>
 8007340:	a361      	add	r3, pc, #388	; (adr r3, 80074c8 <_dtoa_r+0x2c8>)
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	f7f9 f97f 	bl	8000648 <__aeabi_dmul>
 800734a:	4602      	mov	r2, r0
 800734c:	460b      	mov	r3, r1
 800734e:	4630      	mov	r0, r6
 8007350:	4639      	mov	r1, r7
 8007352:	f7f8 ffc3 	bl	80002dc <__adddf3>
 8007356:	4606      	mov	r6, r0
 8007358:	460f      	mov	r7, r1
 800735a:	f7f9 fc25 	bl	8000ba8 <__aeabi_d2iz>
 800735e:	2200      	movs	r2, #0
 8007360:	9000      	str	r0, [sp, #0]
 8007362:	2300      	movs	r3, #0
 8007364:	4630      	mov	r0, r6
 8007366:	4639      	mov	r1, r7
 8007368:	f7f9 fbe0 	bl	8000b2c <__aeabi_dcmplt>
 800736c:	b150      	cbz	r0, 8007384 <_dtoa_r+0x184>
 800736e:	9800      	ldr	r0, [sp, #0]
 8007370:	f7f9 f900 	bl	8000574 <__aeabi_i2d>
 8007374:	4632      	mov	r2, r6
 8007376:	463b      	mov	r3, r7
 8007378:	f7f9 fbce 	bl	8000b18 <__aeabi_dcmpeq>
 800737c:	b910      	cbnz	r0, 8007384 <_dtoa_r+0x184>
 800737e:	9b00      	ldr	r3, [sp, #0]
 8007380:	3b01      	subs	r3, #1
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	9b00      	ldr	r3, [sp, #0]
 8007386:	2b16      	cmp	r3, #22
 8007388:	d85a      	bhi.n	8007440 <_dtoa_r+0x240>
 800738a:	9a00      	ldr	r2, [sp, #0]
 800738c:	4b57      	ldr	r3, [pc, #348]	; (80074ec <_dtoa_r+0x2ec>)
 800738e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007396:	ec51 0b19 	vmov	r0, r1, d9
 800739a:	f7f9 fbc7 	bl	8000b2c <__aeabi_dcmplt>
 800739e:	2800      	cmp	r0, #0
 80073a0:	d050      	beq.n	8007444 <_dtoa_r+0x244>
 80073a2:	9b00      	ldr	r3, [sp, #0]
 80073a4:	3b01      	subs	r3, #1
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	2300      	movs	r3, #0
 80073aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80073ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073ae:	1b5d      	subs	r5, r3, r5
 80073b0:	1e6b      	subs	r3, r5, #1
 80073b2:	9305      	str	r3, [sp, #20]
 80073b4:	bf45      	ittet	mi
 80073b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80073ba:	9304      	strmi	r3, [sp, #16]
 80073bc:	2300      	movpl	r3, #0
 80073be:	2300      	movmi	r3, #0
 80073c0:	bf4c      	ite	mi
 80073c2:	9305      	strmi	r3, [sp, #20]
 80073c4:	9304      	strpl	r3, [sp, #16]
 80073c6:	9b00      	ldr	r3, [sp, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	db3d      	blt.n	8007448 <_dtoa_r+0x248>
 80073cc:	9b05      	ldr	r3, [sp, #20]
 80073ce:	9a00      	ldr	r2, [sp, #0]
 80073d0:	920a      	str	r2, [sp, #40]	; 0x28
 80073d2:	4413      	add	r3, r2
 80073d4:	9305      	str	r3, [sp, #20]
 80073d6:	2300      	movs	r3, #0
 80073d8:	9307      	str	r3, [sp, #28]
 80073da:	9b06      	ldr	r3, [sp, #24]
 80073dc:	2b09      	cmp	r3, #9
 80073de:	f200 8089 	bhi.w	80074f4 <_dtoa_r+0x2f4>
 80073e2:	2b05      	cmp	r3, #5
 80073e4:	bfc4      	itt	gt
 80073e6:	3b04      	subgt	r3, #4
 80073e8:	9306      	strgt	r3, [sp, #24]
 80073ea:	9b06      	ldr	r3, [sp, #24]
 80073ec:	f1a3 0302 	sub.w	r3, r3, #2
 80073f0:	bfcc      	ite	gt
 80073f2:	2500      	movgt	r5, #0
 80073f4:	2501      	movle	r5, #1
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	f200 8087 	bhi.w	800750a <_dtoa_r+0x30a>
 80073fc:	e8df f003 	tbb	[pc, r3]
 8007400:	59383a2d 	.word	0x59383a2d
 8007404:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007408:	441d      	add	r5, r3
 800740a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800740e:	2b20      	cmp	r3, #32
 8007410:	bfc1      	itttt	gt
 8007412:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007416:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800741a:	fa0b f303 	lslgt.w	r3, fp, r3
 800741e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007422:	bfda      	itte	le
 8007424:	f1c3 0320 	rsble	r3, r3, #32
 8007428:	fa06 f003 	lslle.w	r0, r6, r3
 800742c:	4318      	orrgt	r0, r3
 800742e:	f7f9 f891 	bl	8000554 <__aeabi_ui2d>
 8007432:	2301      	movs	r3, #1
 8007434:	4606      	mov	r6, r0
 8007436:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800743a:	3d01      	subs	r5, #1
 800743c:	930e      	str	r3, [sp, #56]	; 0x38
 800743e:	e76a      	b.n	8007316 <_dtoa_r+0x116>
 8007440:	2301      	movs	r3, #1
 8007442:	e7b2      	b.n	80073aa <_dtoa_r+0x1aa>
 8007444:	900b      	str	r0, [sp, #44]	; 0x2c
 8007446:	e7b1      	b.n	80073ac <_dtoa_r+0x1ac>
 8007448:	9b04      	ldr	r3, [sp, #16]
 800744a:	9a00      	ldr	r2, [sp, #0]
 800744c:	1a9b      	subs	r3, r3, r2
 800744e:	9304      	str	r3, [sp, #16]
 8007450:	4253      	negs	r3, r2
 8007452:	9307      	str	r3, [sp, #28]
 8007454:	2300      	movs	r3, #0
 8007456:	930a      	str	r3, [sp, #40]	; 0x28
 8007458:	e7bf      	b.n	80073da <_dtoa_r+0x1da>
 800745a:	2300      	movs	r3, #0
 800745c:	9308      	str	r3, [sp, #32]
 800745e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007460:	2b00      	cmp	r3, #0
 8007462:	dc55      	bgt.n	8007510 <_dtoa_r+0x310>
 8007464:	2301      	movs	r3, #1
 8007466:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800746a:	461a      	mov	r2, r3
 800746c:	9209      	str	r2, [sp, #36]	; 0x24
 800746e:	e00c      	b.n	800748a <_dtoa_r+0x28a>
 8007470:	2301      	movs	r3, #1
 8007472:	e7f3      	b.n	800745c <_dtoa_r+0x25c>
 8007474:	2300      	movs	r3, #0
 8007476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007478:	9308      	str	r3, [sp, #32]
 800747a:	9b00      	ldr	r3, [sp, #0]
 800747c:	4413      	add	r3, r2
 800747e:	9302      	str	r3, [sp, #8]
 8007480:	3301      	adds	r3, #1
 8007482:	2b01      	cmp	r3, #1
 8007484:	9303      	str	r3, [sp, #12]
 8007486:	bfb8      	it	lt
 8007488:	2301      	movlt	r3, #1
 800748a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800748c:	2200      	movs	r2, #0
 800748e:	6042      	str	r2, [r0, #4]
 8007490:	2204      	movs	r2, #4
 8007492:	f102 0614 	add.w	r6, r2, #20
 8007496:	429e      	cmp	r6, r3
 8007498:	6841      	ldr	r1, [r0, #4]
 800749a:	d93d      	bls.n	8007518 <_dtoa_r+0x318>
 800749c:	4620      	mov	r0, r4
 800749e:	f000 fcb7 	bl	8007e10 <_Balloc>
 80074a2:	9001      	str	r0, [sp, #4]
 80074a4:	2800      	cmp	r0, #0
 80074a6:	d13b      	bne.n	8007520 <_dtoa_r+0x320>
 80074a8:	4b11      	ldr	r3, [pc, #68]	; (80074f0 <_dtoa_r+0x2f0>)
 80074aa:	4602      	mov	r2, r0
 80074ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80074b0:	e6c0      	b.n	8007234 <_dtoa_r+0x34>
 80074b2:	2301      	movs	r3, #1
 80074b4:	e7df      	b.n	8007476 <_dtoa_r+0x276>
 80074b6:	bf00      	nop
 80074b8:	636f4361 	.word	0x636f4361
 80074bc:	3fd287a7 	.word	0x3fd287a7
 80074c0:	8b60c8b3 	.word	0x8b60c8b3
 80074c4:	3fc68a28 	.word	0x3fc68a28
 80074c8:	509f79fb 	.word	0x509f79fb
 80074cc:	3fd34413 	.word	0x3fd34413
 80074d0:	0800965d 	.word	0x0800965d
 80074d4:	08009674 	.word	0x08009674
 80074d8:	7ff00000 	.word	0x7ff00000
 80074dc:	08009659 	.word	0x08009659
 80074e0:	08009650 	.word	0x08009650
 80074e4:	0800962d 	.word	0x0800962d
 80074e8:	3ff80000 	.word	0x3ff80000
 80074ec:	08009768 	.word	0x08009768
 80074f0:	080096cf 	.word	0x080096cf
 80074f4:	2501      	movs	r5, #1
 80074f6:	2300      	movs	r3, #0
 80074f8:	9306      	str	r3, [sp, #24]
 80074fa:	9508      	str	r5, [sp, #32]
 80074fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007500:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007504:	2200      	movs	r2, #0
 8007506:	2312      	movs	r3, #18
 8007508:	e7b0      	b.n	800746c <_dtoa_r+0x26c>
 800750a:	2301      	movs	r3, #1
 800750c:	9308      	str	r3, [sp, #32]
 800750e:	e7f5      	b.n	80074fc <_dtoa_r+0x2fc>
 8007510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007512:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007516:	e7b8      	b.n	800748a <_dtoa_r+0x28a>
 8007518:	3101      	adds	r1, #1
 800751a:	6041      	str	r1, [r0, #4]
 800751c:	0052      	lsls	r2, r2, #1
 800751e:	e7b8      	b.n	8007492 <_dtoa_r+0x292>
 8007520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007522:	9a01      	ldr	r2, [sp, #4]
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	9b03      	ldr	r3, [sp, #12]
 8007528:	2b0e      	cmp	r3, #14
 800752a:	f200 809d 	bhi.w	8007668 <_dtoa_r+0x468>
 800752e:	2d00      	cmp	r5, #0
 8007530:	f000 809a 	beq.w	8007668 <_dtoa_r+0x468>
 8007534:	9b00      	ldr	r3, [sp, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	dd32      	ble.n	80075a0 <_dtoa_r+0x3a0>
 800753a:	4ab7      	ldr	r2, [pc, #732]	; (8007818 <_dtoa_r+0x618>)
 800753c:	f003 030f 	and.w	r3, r3, #15
 8007540:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007544:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007548:	9b00      	ldr	r3, [sp, #0]
 800754a:	05d8      	lsls	r0, r3, #23
 800754c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007550:	d516      	bpl.n	8007580 <_dtoa_r+0x380>
 8007552:	4bb2      	ldr	r3, [pc, #712]	; (800781c <_dtoa_r+0x61c>)
 8007554:	ec51 0b19 	vmov	r0, r1, d9
 8007558:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800755c:	f7f9 f99e 	bl	800089c <__aeabi_ddiv>
 8007560:	f007 070f 	and.w	r7, r7, #15
 8007564:	4682      	mov	sl, r0
 8007566:	468b      	mov	fp, r1
 8007568:	2503      	movs	r5, #3
 800756a:	4eac      	ldr	r6, [pc, #688]	; (800781c <_dtoa_r+0x61c>)
 800756c:	b957      	cbnz	r7, 8007584 <_dtoa_r+0x384>
 800756e:	4642      	mov	r2, r8
 8007570:	464b      	mov	r3, r9
 8007572:	4650      	mov	r0, sl
 8007574:	4659      	mov	r1, fp
 8007576:	f7f9 f991 	bl	800089c <__aeabi_ddiv>
 800757a:	4682      	mov	sl, r0
 800757c:	468b      	mov	fp, r1
 800757e:	e028      	b.n	80075d2 <_dtoa_r+0x3d2>
 8007580:	2502      	movs	r5, #2
 8007582:	e7f2      	b.n	800756a <_dtoa_r+0x36a>
 8007584:	07f9      	lsls	r1, r7, #31
 8007586:	d508      	bpl.n	800759a <_dtoa_r+0x39a>
 8007588:	4640      	mov	r0, r8
 800758a:	4649      	mov	r1, r9
 800758c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007590:	f7f9 f85a 	bl	8000648 <__aeabi_dmul>
 8007594:	3501      	adds	r5, #1
 8007596:	4680      	mov	r8, r0
 8007598:	4689      	mov	r9, r1
 800759a:	107f      	asrs	r7, r7, #1
 800759c:	3608      	adds	r6, #8
 800759e:	e7e5      	b.n	800756c <_dtoa_r+0x36c>
 80075a0:	f000 809b 	beq.w	80076da <_dtoa_r+0x4da>
 80075a4:	9b00      	ldr	r3, [sp, #0]
 80075a6:	4f9d      	ldr	r7, [pc, #628]	; (800781c <_dtoa_r+0x61c>)
 80075a8:	425e      	negs	r6, r3
 80075aa:	4b9b      	ldr	r3, [pc, #620]	; (8007818 <_dtoa_r+0x618>)
 80075ac:	f006 020f 	and.w	r2, r6, #15
 80075b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b8:	ec51 0b19 	vmov	r0, r1, d9
 80075bc:	f7f9 f844 	bl	8000648 <__aeabi_dmul>
 80075c0:	1136      	asrs	r6, r6, #4
 80075c2:	4682      	mov	sl, r0
 80075c4:	468b      	mov	fp, r1
 80075c6:	2300      	movs	r3, #0
 80075c8:	2502      	movs	r5, #2
 80075ca:	2e00      	cmp	r6, #0
 80075cc:	d17a      	bne.n	80076c4 <_dtoa_r+0x4c4>
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1d3      	bne.n	800757a <_dtoa_r+0x37a>
 80075d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 8082 	beq.w	80076de <_dtoa_r+0x4de>
 80075da:	4b91      	ldr	r3, [pc, #580]	; (8007820 <_dtoa_r+0x620>)
 80075dc:	2200      	movs	r2, #0
 80075de:	4650      	mov	r0, sl
 80075e0:	4659      	mov	r1, fp
 80075e2:	f7f9 faa3 	bl	8000b2c <__aeabi_dcmplt>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	d079      	beq.n	80076de <_dtoa_r+0x4de>
 80075ea:	9b03      	ldr	r3, [sp, #12]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d076      	beq.n	80076de <_dtoa_r+0x4de>
 80075f0:	9b02      	ldr	r3, [sp, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	dd36      	ble.n	8007664 <_dtoa_r+0x464>
 80075f6:	9b00      	ldr	r3, [sp, #0]
 80075f8:	4650      	mov	r0, sl
 80075fa:	4659      	mov	r1, fp
 80075fc:	1e5f      	subs	r7, r3, #1
 80075fe:	2200      	movs	r2, #0
 8007600:	4b88      	ldr	r3, [pc, #544]	; (8007824 <_dtoa_r+0x624>)
 8007602:	f7f9 f821 	bl	8000648 <__aeabi_dmul>
 8007606:	9e02      	ldr	r6, [sp, #8]
 8007608:	4682      	mov	sl, r0
 800760a:	468b      	mov	fp, r1
 800760c:	3501      	adds	r5, #1
 800760e:	4628      	mov	r0, r5
 8007610:	f7f8 ffb0 	bl	8000574 <__aeabi_i2d>
 8007614:	4652      	mov	r2, sl
 8007616:	465b      	mov	r3, fp
 8007618:	f7f9 f816 	bl	8000648 <__aeabi_dmul>
 800761c:	4b82      	ldr	r3, [pc, #520]	; (8007828 <_dtoa_r+0x628>)
 800761e:	2200      	movs	r2, #0
 8007620:	f7f8 fe5c 	bl	80002dc <__adddf3>
 8007624:	46d0      	mov	r8, sl
 8007626:	46d9      	mov	r9, fp
 8007628:	4682      	mov	sl, r0
 800762a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800762e:	2e00      	cmp	r6, #0
 8007630:	d158      	bne.n	80076e4 <_dtoa_r+0x4e4>
 8007632:	4b7e      	ldr	r3, [pc, #504]	; (800782c <_dtoa_r+0x62c>)
 8007634:	2200      	movs	r2, #0
 8007636:	4640      	mov	r0, r8
 8007638:	4649      	mov	r1, r9
 800763a:	f7f8 fe4d 	bl	80002d8 <__aeabi_dsub>
 800763e:	4652      	mov	r2, sl
 8007640:	465b      	mov	r3, fp
 8007642:	4680      	mov	r8, r0
 8007644:	4689      	mov	r9, r1
 8007646:	f7f9 fa8f 	bl	8000b68 <__aeabi_dcmpgt>
 800764a:	2800      	cmp	r0, #0
 800764c:	f040 8295 	bne.w	8007b7a <_dtoa_r+0x97a>
 8007650:	4652      	mov	r2, sl
 8007652:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007656:	4640      	mov	r0, r8
 8007658:	4649      	mov	r1, r9
 800765a:	f7f9 fa67 	bl	8000b2c <__aeabi_dcmplt>
 800765e:	2800      	cmp	r0, #0
 8007660:	f040 8289 	bne.w	8007b76 <_dtoa_r+0x976>
 8007664:	ec5b ab19 	vmov	sl, fp, d9
 8007668:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800766a:	2b00      	cmp	r3, #0
 800766c:	f2c0 8148 	blt.w	8007900 <_dtoa_r+0x700>
 8007670:	9a00      	ldr	r2, [sp, #0]
 8007672:	2a0e      	cmp	r2, #14
 8007674:	f300 8144 	bgt.w	8007900 <_dtoa_r+0x700>
 8007678:	4b67      	ldr	r3, [pc, #412]	; (8007818 <_dtoa_r+0x618>)
 800767a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800767e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007684:	2b00      	cmp	r3, #0
 8007686:	f280 80d5 	bge.w	8007834 <_dtoa_r+0x634>
 800768a:	9b03      	ldr	r3, [sp, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	f300 80d1 	bgt.w	8007834 <_dtoa_r+0x634>
 8007692:	f040 826f 	bne.w	8007b74 <_dtoa_r+0x974>
 8007696:	4b65      	ldr	r3, [pc, #404]	; (800782c <_dtoa_r+0x62c>)
 8007698:	2200      	movs	r2, #0
 800769a:	4640      	mov	r0, r8
 800769c:	4649      	mov	r1, r9
 800769e:	f7f8 ffd3 	bl	8000648 <__aeabi_dmul>
 80076a2:	4652      	mov	r2, sl
 80076a4:	465b      	mov	r3, fp
 80076a6:	f7f9 fa55 	bl	8000b54 <__aeabi_dcmpge>
 80076aa:	9e03      	ldr	r6, [sp, #12]
 80076ac:	4637      	mov	r7, r6
 80076ae:	2800      	cmp	r0, #0
 80076b0:	f040 8245 	bne.w	8007b3e <_dtoa_r+0x93e>
 80076b4:	9d01      	ldr	r5, [sp, #4]
 80076b6:	2331      	movs	r3, #49	; 0x31
 80076b8:	f805 3b01 	strb.w	r3, [r5], #1
 80076bc:	9b00      	ldr	r3, [sp, #0]
 80076be:	3301      	adds	r3, #1
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	e240      	b.n	8007b46 <_dtoa_r+0x946>
 80076c4:	07f2      	lsls	r2, r6, #31
 80076c6:	d505      	bpl.n	80076d4 <_dtoa_r+0x4d4>
 80076c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076cc:	f7f8 ffbc 	bl	8000648 <__aeabi_dmul>
 80076d0:	3501      	adds	r5, #1
 80076d2:	2301      	movs	r3, #1
 80076d4:	1076      	asrs	r6, r6, #1
 80076d6:	3708      	adds	r7, #8
 80076d8:	e777      	b.n	80075ca <_dtoa_r+0x3ca>
 80076da:	2502      	movs	r5, #2
 80076dc:	e779      	b.n	80075d2 <_dtoa_r+0x3d2>
 80076de:	9f00      	ldr	r7, [sp, #0]
 80076e0:	9e03      	ldr	r6, [sp, #12]
 80076e2:	e794      	b.n	800760e <_dtoa_r+0x40e>
 80076e4:	9901      	ldr	r1, [sp, #4]
 80076e6:	4b4c      	ldr	r3, [pc, #304]	; (8007818 <_dtoa_r+0x618>)
 80076e8:	4431      	add	r1, r6
 80076ea:	910d      	str	r1, [sp, #52]	; 0x34
 80076ec:	9908      	ldr	r1, [sp, #32]
 80076ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80076f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076f6:	2900      	cmp	r1, #0
 80076f8:	d043      	beq.n	8007782 <_dtoa_r+0x582>
 80076fa:	494d      	ldr	r1, [pc, #308]	; (8007830 <_dtoa_r+0x630>)
 80076fc:	2000      	movs	r0, #0
 80076fe:	f7f9 f8cd 	bl	800089c <__aeabi_ddiv>
 8007702:	4652      	mov	r2, sl
 8007704:	465b      	mov	r3, fp
 8007706:	f7f8 fde7 	bl	80002d8 <__aeabi_dsub>
 800770a:	9d01      	ldr	r5, [sp, #4]
 800770c:	4682      	mov	sl, r0
 800770e:	468b      	mov	fp, r1
 8007710:	4649      	mov	r1, r9
 8007712:	4640      	mov	r0, r8
 8007714:	f7f9 fa48 	bl	8000ba8 <__aeabi_d2iz>
 8007718:	4606      	mov	r6, r0
 800771a:	f7f8 ff2b 	bl	8000574 <__aeabi_i2d>
 800771e:	4602      	mov	r2, r0
 8007720:	460b      	mov	r3, r1
 8007722:	4640      	mov	r0, r8
 8007724:	4649      	mov	r1, r9
 8007726:	f7f8 fdd7 	bl	80002d8 <__aeabi_dsub>
 800772a:	3630      	adds	r6, #48	; 0x30
 800772c:	f805 6b01 	strb.w	r6, [r5], #1
 8007730:	4652      	mov	r2, sl
 8007732:	465b      	mov	r3, fp
 8007734:	4680      	mov	r8, r0
 8007736:	4689      	mov	r9, r1
 8007738:	f7f9 f9f8 	bl	8000b2c <__aeabi_dcmplt>
 800773c:	2800      	cmp	r0, #0
 800773e:	d163      	bne.n	8007808 <_dtoa_r+0x608>
 8007740:	4642      	mov	r2, r8
 8007742:	464b      	mov	r3, r9
 8007744:	4936      	ldr	r1, [pc, #216]	; (8007820 <_dtoa_r+0x620>)
 8007746:	2000      	movs	r0, #0
 8007748:	f7f8 fdc6 	bl	80002d8 <__aeabi_dsub>
 800774c:	4652      	mov	r2, sl
 800774e:	465b      	mov	r3, fp
 8007750:	f7f9 f9ec 	bl	8000b2c <__aeabi_dcmplt>
 8007754:	2800      	cmp	r0, #0
 8007756:	f040 80b5 	bne.w	80078c4 <_dtoa_r+0x6c4>
 800775a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800775c:	429d      	cmp	r5, r3
 800775e:	d081      	beq.n	8007664 <_dtoa_r+0x464>
 8007760:	4b30      	ldr	r3, [pc, #192]	; (8007824 <_dtoa_r+0x624>)
 8007762:	2200      	movs	r2, #0
 8007764:	4650      	mov	r0, sl
 8007766:	4659      	mov	r1, fp
 8007768:	f7f8 ff6e 	bl	8000648 <__aeabi_dmul>
 800776c:	4b2d      	ldr	r3, [pc, #180]	; (8007824 <_dtoa_r+0x624>)
 800776e:	4682      	mov	sl, r0
 8007770:	468b      	mov	fp, r1
 8007772:	4640      	mov	r0, r8
 8007774:	4649      	mov	r1, r9
 8007776:	2200      	movs	r2, #0
 8007778:	f7f8 ff66 	bl	8000648 <__aeabi_dmul>
 800777c:	4680      	mov	r8, r0
 800777e:	4689      	mov	r9, r1
 8007780:	e7c6      	b.n	8007710 <_dtoa_r+0x510>
 8007782:	4650      	mov	r0, sl
 8007784:	4659      	mov	r1, fp
 8007786:	f7f8 ff5f 	bl	8000648 <__aeabi_dmul>
 800778a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800778c:	9d01      	ldr	r5, [sp, #4]
 800778e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007790:	4682      	mov	sl, r0
 8007792:	468b      	mov	fp, r1
 8007794:	4649      	mov	r1, r9
 8007796:	4640      	mov	r0, r8
 8007798:	f7f9 fa06 	bl	8000ba8 <__aeabi_d2iz>
 800779c:	4606      	mov	r6, r0
 800779e:	f7f8 fee9 	bl	8000574 <__aeabi_i2d>
 80077a2:	3630      	adds	r6, #48	; 0x30
 80077a4:	4602      	mov	r2, r0
 80077a6:	460b      	mov	r3, r1
 80077a8:	4640      	mov	r0, r8
 80077aa:	4649      	mov	r1, r9
 80077ac:	f7f8 fd94 	bl	80002d8 <__aeabi_dsub>
 80077b0:	f805 6b01 	strb.w	r6, [r5], #1
 80077b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077b6:	429d      	cmp	r5, r3
 80077b8:	4680      	mov	r8, r0
 80077ba:	4689      	mov	r9, r1
 80077bc:	f04f 0200 	mov.w	r2, #0
 80077c0:	d124      	bne.n	800780c <_dtoa_r+0x60c>
 80077c2:	4b1b      	ldr	r3, [pc, #108]	; (8007830 <_dtoa_r+0x630>)
 80077c4:	4650      	mov	r0, sl
 80077c6:	4659      	mov	r1, fp
 80077c8:	f7f8 fd88 	bl	80002dc <__adddf3>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	4640      	mov	r0, r8
 80077d2:	4649      	mov	r1, r9
 80077d4:	f7f9 f9c8 	bl	8000b68 <__aeabi_dcmpgt>
 80077d8:	2800      	cmp	r0, #0
 80077da:	d173      	bne.n	80078c4 <_dtoa_r+0x6c4>
 80077dc:	4652      	mov	r2, sl
 80077de:	465b      	mov	r3, fp
 80077e0:	4913      	ldr	r1, [pc, #76]	; (8007830 <_dtoa_r+0x630>)
 80077e2:	2000      	movs	r0, #0
 80077e4:	f7f8 fd78 	bl	80002d8 <__aeabi_dsub>
 80077e8:	4602      	mov	r2, r0
 80077ea:	460b      	mov	r3, r1
 80077ec:	4640      	mov	r0, r8
 80077ee:	4649      	mov	r1, r9
 80077f0:	f7f9 f99c 	bl	8000b2c <__aeabi_dcmplt>
 80077f4:	2800      	cmp	r0, #0
 80077f6:	f43f af35 	beq.w	8007664 <_dtoa_r+0x464>
 80077fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80077fc:	1e6b      	subs	r3, r5, #1
 80077fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007800:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007804:	2b30      	cmp	r3, #48	; 0x30
 8007806:	d0f8      	beq.n	80077fa <_dtoa_r+0x5fa>
 8007808:	9700      	str	r7, [sp, #0]
 800780a:	e049      	b.n	80078a0 <_dtoa_r+0x6a0>
 800780c:	4b05      	ldr	r3, [pc, #20]	; (8007824 <_dtoa_r+0x624>)
 800780e:	f7f8 ff1b 	bl	8000648 <__aeabi_dmul>
 8007812:	4680      	mov	r8, r0
 8007814:	4689      	mov	r9, r1
 8007816:	e7bd      	b.n	8007794 <_dtoa_r+0x594>
 8007818:	08009768 	.word	0x08009768
 800781c:	08009740 	.word	0x08009740
 8007820:	3ff00000 	.word	0x3ff00000
 8007824:	40240000 	.word	0x40240000
 8007828:	401c0000 	.word	0x401c0000
 800782c:	40140000 	.word	0x40140000
 8007830:	3fe00000 	.word	0x3fe00000
 8007834:	9d01      	ldr	r5, [sp, #4]
 8007836:	4656      	mov	r6, sl
 8007838:	465f      	mov	r7, fp
 800783a:	4642      	mov	r2, r8
 800783c:	464b      	mov	r3, r9
 800783e:	4630      	mov	r0, r6
 8007840:	4639      	mov	r1, r7
 8007842:	f7f9 f82b 	bl	800089c <__aeabi_ddiv>
 8007846:	f7f9 f9af 	bl	8000ba8 <__aeabi_d2iz>
 800784a:	4682      	mov	sl, r0
 800784c:	f7f8 fe92 	bl	8000574 <__aeabi_i2d>
 8007850:	4642      	mov	r2, r8
 8007852:	464b      	mov	r3, r9
 8007854:	f7f8 fef8 	bl	8000648 <__aeabi_dmul>
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	4630      	mov	r0, r6
 800785e:	4639      	mov	r1, r7
 8007860:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007864:	f7f8 fd38 	bl	80002d8 <__aeabi_dsub>
 8007868:	f805 6b01 	strb.w	r6, [r5], #1
 800786c:	9e01      	ldr	r6, [sp, #4]
 800786e:	9f03      	ldr	r7, [sp, #12]
 8007870:	1bae      	subs	r6, r5, r6
 8007872:	42b7      	cmp	r7, r6
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	d135      	bne.n	80078e6 <_dtoa_r+0x6e6>
 800787a:	f7f8 fd2f 	bl	80002dc <__adddf3>
 800787e:	4642      	mov	r2, r8
 8007880:	464b      	mov	r3, r9
 8007882:	4606      	mov	r6, r0
 8007884:	460f      	mov	r7, r1
 8007886:	f7f9 f96f 	bl	8000b68 <__aeabi_dcmpgt>
 800788a:	b9d0      	cbnz	r0, 80078c2 <_dtoa_r+0x6c2>
 800788c:	4642      	mov	r2, r8
 800788e:	464b      	mov	r3, r9
 8007890:	4630      	mov	r0, r6
 8007892:	4639      	mov	r1, r7
 8007894:	f7f9 f940 	bl	8000b18 <__aeabi_dcmpeq>
 8007898:	b110      	cbz	r0, 80078a0 <_dtoa_r+0x6a0>
 800789a:	f01a 0f01 	tst.w	sl, #1
 800789e:	d110      	bne.n	80078c2 <_dtoa_r+0x6c2>
 80078a0:	4620      	mov	r0, r4
 80078a2:	ee18 1a10 	vmov	r1, s16
 80078a6:	f000 faf3 	bl	8007e90 <_Bfree>
 80078aa:	2300      	movs	r3, #0
 80078ac:	9800      	ldr	r0, [sp, #0]
 80078ae:	702b      	strb	r3, [r5, #0]
 80078b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078b2:	3001      	adds	r0, #1
 80078b4:	6018      	str	r0, [r3, #0]
 80078b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f43f acf1 	beq.w	80072a0 <_dtoa_r+0xa0>
 80078be:	601d      	str	r5, [r3, #0]
 80078c0:	e4ee      	b.n	80072a0 <_dtoa_r+0xa0>
 80078c2:	9f00      	ldr	r7, [sp, #0]
 80078c4:	462b      	mov	r3, r5
 80078c6:	461d      	mov	r5, r3
 80078c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078cc:	2a39      	cmp	r2, #57	; 0x39
 80078ce:	d106      	bne.n	80078de <_dtoa_r+0x6de>
 80078d0:	9a01      	ldr	r2, [sp, #4]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d1f7      	bne.n	80078c6 <_dtoa_r+0x6c6>
 80078d6:	9901      	ldr	r1, [sp, #4]
 80078d8:	2230      	movs	r2, #48	; 0x30
 80078da:	3701      	adds	r7, #1
 80078dc:	700a      	strb	r2, [r1, #0]
 80078de:	781a      	ldrb	r2, [r3, #0]
 80078e0:	3201      	adds	r2, #1
 80078e2:	701a      	strb	r2, [r3, #0]
 80078e4:	e790      	b.n	8007808 <_dtoa_r+0x608>
 80078e6:	4ba6      	ldr	r3, [pc, #664]	; (8007b80 <_dtoa_r+0x980>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	f7f8 fead 	bl	8000648 <__aeabi_dmul>
 80078ee:	2200      	movs	r2, #0
 80078f0:	2300      	movs	r3, #0
 80078f2:	4606      	mov	r6, r0
 80078f4:	460f      	mov	r7, r1
 80078f6:	f7f9 f90f 	bl	8000b18 <__aeabi_dcmpeq>
 80078fa:	2800      	cmp	r0, #0
 80078fc:	d09d      	beq.n	800783a <_dtoa_r+0x63a>
 80078fe:	e7cf      	b.n	80078a0 <_dtoa_r+0x6a0>
 8007900:	9a08      	ldr	r2, [sp, #32]
 8007902:	2a00      	cmp	r2, #0
 8007904:	f000 80d7 	beq.w	8007ab6 <_dtoa_r+0x8b6>
 8007908:	9a06      	ldr	r2, [sp, #24]
 800790a:	2a01      	cmp	r2, #1
 800790c:	f300 80ba 	bgt.w	8007a84 <_dtoa_r+0x884>
 8007910:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007912:	2a00      	cmp	r2, #0
 8007914:	f000 80b2 	beq.w	8007a7c <_dtoa_r+0x87c>
 8007918:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800791c:	9e07      	ldr	r6, [sp, #28]
 800791e:	9d04      	ldr	r5, [sp, #16]
 8007920:	9a04      	ldr	r2, [sp, #16]
 8007922:	441a      	add	r2, r3
 8007924:	9204      	str	r2, [sp, #16]
 8007926:	9a05      	ldr	r2, [sp, #20]
 8007928:	2101      	movs	r1, #1
 800792a:	441a      	add	r2, r3
 800792c:	4620      	mov	r0, r4
 800792e:	9205      	str	r2, [sp, #20]
 8007930:	f000 fb66 	bl	8008000 <__i2b>
 8007934:	4607      	mov	r7, r0
 8007936:	2d00      	cmp	r5, #0
 8007938:	dd0c      	ble.n	8007954 <_dtoa_r+0x754>
 800793a:	9b05      	ldr	r3, [sp, #20]
 800793c:	2b00      	cmp	r3, #0
 800793e:	dd09      	ble.n	8007954 <_dtoa_r+0x754>
 8007940:	42ab      	cmp	r3, r5
 8007942:	9a04      	ldr	r2, [sp, #16]
 8007944:	bfa8      	it	ge
 8007946:	462b      	movge	r3, r5
 8007948:	1ad2      	subs	r2, r2, r3
 800794a:	9204      	str	r2, [sp, #16]
 800794c:	9a05      	ldr	r2, [sp, #20]
 800794e:	1aed      	subs	r5, r5, r3
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	9305      	str	r3, [sp, #20]
 8007954:	9b07      	ldr	r3, [sp, #28]
 8007956:	b31b      	cbz	r3, 80079a0 <_dtoa_r+0x7a0>
 8007958:	9b08      	ldr	r3, [sp, #32]
 800795a:	2b00      	cmp	r3, #0
 800795c:	f000 80af 	beq.w	8007abe <_dtoa_r+0x8be>
 8007960:	2e00      	cmp	r6, #0
 8007962:	dd13      	ble.n	800798c <_dtoa_r+0x78c>
 8007964:	4639      	mov	r1, r7
 8007966:	4632      	mov	r2, r6
 8007968:	4620      	mov	r0, r4
 800796a:	f000 fc09 	bl	8008180 <__pow5mult>
 800796e:	ee18 2a10 	vmov	r2, s16
 8007972:	4601      	mov	r1, r0
 8007974:	4607      	mov	r7, r0
 8007976:	4620      	mov	r0, r4
 8007978:	f000 fb58 	bl	800802c <__multiply>
 800797c:	ee18 1a10 	vmov	r1, s16
 8007980:	4680      	mov	r8, r0
 8007982:	4620      	mov	r0, r4
 8007984:	f000 fa84 	bl	8007e90 <_Bfree>
 8007988:	ee08 8a10 	vmov	s16, r8
 800798c:	9b07      	ldr	r3, [sp, #28]
 800798e:	1b9a      	subs	r2, r3, r6
 8007990:	d006      	beq.n	80079a0 <_dtoa_r+0x7a0>
 8007992:	ee18 1a10 	vmov	r1, s16
 8007996:	4620      	mov	r0, r4
 8007998:	f000 fbf2 	bl	8008180 <__pow5mult>
 800799c:	ee08 0a10 	vmov	s16, r0
 80079a0:	2101      	movs	r1, #1
 80079a2:	4620      	mov	r0, r4
 80079a4:	f000 fb2c 	bl	8008000 <__i2b>
 80079a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	4606      	mov	r6, r0
 80079ae:	f340 8088 	ble.w	8007ac2 <_dtoa_r+0x8c2>
 80079b2:	461a      	mov	r2, r3
 80079b4:	4601      	mov	r1, r0
 80079b6:	4620      	mov	r0, r4
 80079b8:	f000 fbe2 	bl	8008180 <__pow5mult>
 80079bc:	9b06      	ldr	r3, [sp, #24]
 80079be:	2b01      	cmp	r3, #1
 80079c0:	4606      	mov	r6, r0
 80079c2:	f340 8081 	ble.w	8007ac8 <_dtoa_r+0x8c8>
 80079c6:	f04f 0800 	mov.w	r8, #0
 80079ca:	6933      	ldr	r3, [r6, #16]
 80079cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80079d0:	6918      	ldr	r0, [r3, #16]
 80079d2:	f000 fac5 	bl	8007f60 <__hi0bits>
 80079d6:	f1c0 0020 	rsb	r0, r0, #32
 80079da:	9b05      	ldr	r3, [sp, #20]
 80079dc:	4418      	add	r0, r3
 80079de:	f010 001f 	ands.w	r0, r0, #31
 80079e2:	f000 8092 	beq.w	8007b0a <_dtoa_r+0x90a>
 80079e6:	f1c0 0320 	rsb	r3, r0, #32
 80079ea:	2b04      	cmp	r3, #4
 80079ec:	f340 808a 	ble.w	8007b04 <_dtoa_r+0x904>
 80079f0:	f1c0 001c 	rsb	r0, r0, #28
 80079f4:	9b04      	ldr	r3, [sp, #16]
 80079f6:	4403      	add	r3, r0
 80079f8:	9304      	str	r3, [sp, #16]
 80079fa:	9b05      	ldr	r3, [sp, #20]
 80079fc:	4403      	add	r3, r0
 80079fe:	4405      	add	r5, r0
 8007a00:	9305      	str	r3, [sp, #20]
 8007a02:	9b04      	ldr	r3, [sp, #16]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	dd07      	ble.n	8007a18 <_dtoa_r+0x818>
 8007a08:	ee18 1a10 	vmov	r1, s16
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	4620      	mov	r0, r4
 8007a10:	f000 fc10 	bl	8008234 <__lshift>
 8007a14:	ee08 0a10 	vmov	s16, r0
 8007a18:	9b05      	ldr	r3, [sp, #20]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	dd05      	ble.n	8007a2a <_dtoa_r+0x82a>
 8007a1e:	4631      	mov	r1, r6
 8007a20:	461a      	mov	r2, r3
 8007a22:	4620      	mov	r0, r4
 8007a24:	f000 fc06 	bl	8008234 <__lshift>
 8007a28:	4606      	mov	r6, r0
 8007a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d06e      	beq.n	8007b0e <_dtoa_r+0x90e>
 8007a30:	ee18 0a10 	vmov	r0, s16
 8007a34:	4631      	mov	r1, r6
 8007a36:	f000 fc6d 	bl	8008314 <__mcmp>
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	da67      	bge.n	8007b0e <_dtoa_r+0x90e>
 8007a3e:	9b00      	ldr	r3, [sp, #0]
 8007a40:	3b01      	subs	r3, #1
 8007a42:	ee18 1a10 	vmov	r1, s16
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	220a      	movs	r2, #10
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	f000 fa41 	bl	8007ed4 <__multadd>
 8007a52:	9b08      	ldr	r3, [sp, #32]
 8007a54:	ee08 0a10 	vmov	s16, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f000 81b1 	beq.w	8007dc0 <_dtoa_r+0xbc0>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	4639      	mov	r1, r7
 8007a62:	220a      	movs	r2, #10
 8007a64:	4620      	mov	r0, r4
 8007a66:	f000 fa35 	bl	8007ed4 <__multadd>
 8007a6a:	9b02      	ldr	r3, [sp, #8]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	4607      	mov	r7, r0
 8007a70:	f300 808e 	bgt.w	8007b90 <_dtoa_r+0x990>
 8007a74:	9b06      	ldr	r3, [sp, #24]
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	dc51      	bgt.n	8007b1e <_dtoa_r+0x91e>
 8007a7a:	e089      	b.n	8007b90 <_dtoa_r+0x990>
 8007a7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a82:	e74b      	b.n	800791c <_dtoa_r+0x71c>
 8007a84:	9b03      	ldr	r3, [sp, #12]
 8007a86:	1e5e      	subs	r6, r3, #1
 8007a88:	9b07      	ldr	r3, [sp, #28]
 8007a8a:	42b3      	cmp	r3, r6
 8007a8c:	bfbf      	itttt	lt
 8007a8e:	9b07      	ldrlt	r3, [sp, #28]
 8007a90:	9607      	strlt	r6, [sp, #28]
 8007a92:	1af2      	sublt	r2, r6, r3
 8007a94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007a96:	bfb6      	itet	lt
 8007a98:	189b      	addlt	r3, r3, r2
 8007a9a:	1b9e      	subge	r6, r3, r6
 8007a9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007a9e:	9b03      	ldr	r3, [sp, #12]
 8007aa0:	bfb8      	it	lt
 8007aa2:	2600      	movlt	r6, #0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	bfb7      	itett	lt
 8007aa8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007aac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007ab0:	1a9d      	sublt	r5, r3, r2
 8007ab2:	2300      	movlt	r3, #0
 8007ab4:	e734      	b.n	8007920 <_dtoa_r+0x720>
 8007ab6:	9e07      	ldr	r6, [sp, #28]
 8007ab8:	9d04      	ldr	r5, [sp, #16]
 8007aba:	9f08      	ldr	r7, [sp, #32]
 8007abc:	e73b      	b.n	8007936 <_dtoa_r+0x736>
 8007abe:	9a07      	ldr	r2, [sp, #28]
 8007ac0:	e767      	b.n	8007992 <_dtoa_r+0x792>
 8007ac2:	9b06      	ldr	r3, [sp, #24]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	dc18      	bgt.n	8007afa <_dtoa_r+0x8fa>
 8007ac8:	f1ba 0f00 	cmp.w	sl, #0
 8007acc:	d115      	bne.n	8007afa <_dtoa_r+0x8fa>
 8007ace:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ad2:	b993      	cbnz	r3, 8007afa <_dtoa_r+0x8fa>
 8007ad4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ad8:	0d1b      	lsrs	r3, r3, #20
 8007ada:	051b      	lsls	r3, r3, #20
 8007adc:	b183      	cbz	r3, 8007b00 <_dtoa_r+0x900>
 8007ade:	9b04      	ldr	r3, [sp, #16]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	9304      	str	r3, [sp, #16]
 8007ae4:	9b05      	ldr	r3, [sp, #20]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	9305      	str	r3, [sp, #20]
 8007aea:	f04f 0801 	mov.w	r8, #1
 8007aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f47f af6a 	bne.w	80079ca <_dtoa_r+0x7ca>
 8007af6:	2001      	movs	r0, #1
 8007af8:	e76f      	b.n	80079da <_dtoa_r+0x7da>
 8007afa:	f04f 0800 	mov.w	r8, #0
 8007afe:	e7f6      	b.n	8007aee <_dtoa_r+0x8ee>
 8007b00:	4698      	mov	r8, r3
 8007b02:	e7f4      	b.n	8007aee <_dtoa_r+0x8ee>
 8007b04:	f43f af7d 	beq.w	8007a02 <_dtoa_r+0x802>
 8007b08:	4618      	mov	r0, r3
 8007b0a:	301c      	adds	r0, #28
 8007b0c:	e772      	b.n	80079f4 <_dtoa_r+0x7f4>
 8007b0e:	9b03      	ldr	r3, [sp, #12]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	dc37      	bgt.n	8007b84 <_dtoa_r+0x984>
 8007b14:	9b06      	ldr	r3, [sp, #24]
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	dd34      	ble.n	8007b84 <_dtoa_r+0x984>
 8007b1a:	9b03      	ldr	r3, [sp, #12]
 8007b1c:	9302      	str	r3, [sp, #8]
 8007b1e:	9b02      	ldr	r3, [sp, #8]
 8007b20:	b96b      	cbnz	r3, 8007b3e <_dtoa_r+0x93e>
 8007b22:	4631      	mov	r1, r6
 8007b24:	2205      	movs	r2, #5
 8007b26:	4620      	mov	r0, r4
 8007b28:	f000 f9d4 	bl	8007ed4 <__multadd>
 8007b2c:	4601      	mov	r1, r0
 8007b2e:	4606      	mov	r6, r0
 8007b30:	ee18 0a10 	vmov	r0, s16
 8007b34:	f000 fbee 	bl	8008314 <__mcmp>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	f73f adbb 	bgt.w	80076b4 <_dtoa_r+0x4b4>
 8007b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b40:	9d01      	ldr	r5, [sp, #4]
 8007b42:	43db      	mvns	r3, r3
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	f04f 0800 	mov.w	r8, #0
 8007b4a:	4631      	mov	r1, r6
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f000 f99f 	bl	8007e90 <_Bfree>
 8007b52:	2f00      	cmp	r7, #0
 8007b54:	f43f aea4 	beq.w	80078a0 <_dtoa_r+0x6a0>
 8007b58:	f1b8 0f00 	cmp.w	r8, #0
 8007b5c:	d005      	beq.n	8007b6a <_dtoa_r+0x96a>
 8007b5e:	45b8      	cmp	r8, r7
 8007b60:	d003      	beq.n	8007b6a <_dtoa_r+0x96a>
 8007b62:	4641      	mov	r1, r8
 8007b64:	4620      	mov	r0, r4
 8007b66:	f000 f993 	bl	8007e90 <_Bfree>
 8007b6a:	4639      	mov	r1, r7
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f000 f98f 	bl	8007e90 <_Bfree>
 8007b72:	e695      	b.n	80078a0 <_dtoa_r+0x6a0>
 8007b74:	2600      	movs	r6, #0
 8007b76:	4637      	mov	r7, r6
 8007b78:	e7e1      	b.n	8007b3e <_dtoa_r+0x93e>
 8007b7a:	9700      	str	r7, [sp, #0]
 8007b7c:	4637      	mov	r7, r6
 8007b7e:	e599      	b.n	80076b4 <_dtoa_r+0x4b4>
 8007b80:	40240000 	.word	0x40240000
 8007b84:	9b08      	ldr	r3, [sp, #32]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f000 80ca 	beq.w	8007d20 <_dtoa_r+0xb20>
 8007b8c:	9b03      	ldr	r3, [sp, #12]
 8007b8e:	9302      	str	r3, [sp, #8]
 8007b90:	2d00      	cmp	r5, #0
 8007b92:	dd05      	ble.n	8007ba0 <_dtoa_r+0x9a0>
 8007b94:	4639      	mov	r1, r7
 8007b96:	462a      	mov	r2, r5
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f000 fb4b 	bl	8008234 <__lshift>
 8007b9e:	4607      	mov	r7, r0
 8007ba0:	f1b8 0f00 	cmp.w	r8, #0
 8007ba4:	d05b      	beq.n	8007c5e <_dtoa_r+0xa5e>
 8007ba6:	6879      	ldr	r1, [r7, #4]
 8007ba8:	4620      	mov	r0, r4
 8007baa:	f000 f931 	bl	8007e10 <_Balloc>
 8007bae:	4605      	mov	r5, r0
 8007bb0:	b928      	cbnz	r0, 8007bbe <_dtoa_r+0x9be>
 8007bb2:	4b87      	ldr	r3, [pc, #540]	; (8007dd0 <_dtoa_r+0xbd0>)
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007bba:	f7ff bb3b 	b.w	8007234 <_dtoa_r+0x34>
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	3202      	adds	r2, #2
 8007bc2:	0092      	lsls	r2, r2, #2
 8007bc4:	f107 010c 	add.w	r1, r7, #12
 8007bc8:	300c      	adds	r0, #12
 8007bca:	f000 f913 	bl	8007df4 <memcpy>
 8007bce:	2201      	movs	r2, #1
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f000 fb2e 	bl	8008234 <__lshift>
 8007bd8:	9b01      	ldr	r3, [sp, #4]
 8007bda:	f103 0901 	add.w	r9, r3, #1
 8007bde:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007be2:	4413      	add	r3, r2
 8007be4:	9305      	str	r3, [sp, #20]
 8007be6:	f00a 0301 	and.w	r3, sl, #1
 8007bea:	46b8      	mov	r8, r7
 8007bec:	9304      	str	r3, [sp, #16]
 8007bee:	4607      	mov	r7, r0
 8007bf0:	4631      	mov	r1, r6
 8007bf2:	ee18 0a10 	vmov	r0, s16
 8007bf6:	f7ff fa75 	bl	80070e4 <quorem>
 8007bfa:	4641      	mov	r1, r8
 8007bfc:	9002      	str	r0, [sp, #8]
 8007bfe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007c02:	ee18 0a10 	vmov	r0, s16
 8007c06:	f000 fb85 	bl	8008314 <__mcmp>
 8007c0a:	463a      	mov	r2, r7
 8007c0c:	9003      	str	r0, [sp, #12]
 8007c0e:	4631      	mov	r1, r6
 8007c10:	4620      	mov	r0, r4
 8007c12:	f000 fb9b 	bl	800834c <__mdiff>
 8007c16:	68c2      	ldr	r2, [r0, #12]
 8007c18:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007c1c:	4605      	mov	r5, r0
 8007c1e:	bb02      	cbnz	r2, 8007c62 <_dtoa_r+0xa62>
 8007c20:	4601      	mov	r1, r0
 8007c22:	ee18 0a10 	vmov	r0, s16
 8007c26:	f000 fb75 	bl	8008314 <__mcmp>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	4629      	mov	r1, r5
 8007c2e:	4620      	mov	r0, r4
 8007c30:	9207      	str	r2, [sp, #28]
 8007c32:	f000 f92d 	bl	8007e90 <_Bfree>
 8007c36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007c3a:	ea43 0102 	orr.w	r1, r3, r2
 8007c3e:	9b04      	ldr	r3, [sp, #16]
 8007c40:	430b      	orrs	r3, r1
 8007c42:	464d      	mov	r5, r9
 8007c44:	d10f      	bne.n	8007c66 <_dtoa_r+0xa66>
 8007c46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007c4a:	d02a      	beq.n	8007ca2 <_dtoa_r+0xaa2>
 8007c4c:	9b03      	ldr	r3, [sp, #12]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	dd02      	ble.n	8007c58 <_dtoa_r+0xa58>
 8007c52:	9b02      	ldr	r3, [sp, #8]
 8007c54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007c58:	f88b a000 	strb.w	sl, [fp]
 8007c5c:	e775      	b.n	8007b4a <_dtoa_r+0x94a>
 8007c5e:	4638      	mov	r0, r7
 8007c60:	e7ba      	b.n	8007bd8 <_dtoa_r+0x9d8>
 8007c62:	2201      	movs	r2, #1
 8007c64:	e7e2      	b.n	8007c2c <_dtoa_r+0xa2c>
 8007c66:	9b03      	ldr	r3, [sp, #12]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	db04      	blt.n	8007c76 <_dtoa_r+0xa76>
 8007c6c:	9906      	ldr	r1, [sp, #24]
 8007c6e:	430b      	orrs	r3, r1
 8007c70:	9904      	ldr	r1, [sp, #16]
 8007c72:	430b      	orrs	r3, r1
 8007c74:	d122      	bne.n	8007cbc <_dtoa_r+0xabc>
 8007c76:	2a00      	cmp	r2, #0
 8007c78:	ddee      	ble.n	8007c58 <_dtoa_r+0xa58>
 8007c7a:	ee18 1a10 	vmov	r1, s16
 8007c7e:	2201      	movs	r2, #1
 8007c80:	4620      	mov	r0, r4
 8007c82:	f000 fad7 	bl	8008234 <__lshift>
 8007c86:	4631      	mov	r1, r6
 8007c88:	ee08 0a10 	vmov	s16, r0
 8007c8c:	f000 fb42 	bl	8008314 <__mcmp>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	dc03      	bgt.n	8007c9c <_dtoa_r+0xa9c>
 8007c94:	d1e0      	bne.n	8007c58 <_dtoa_r+0xa58>
 8007c96:	f01a 0f01 	tst.w	sl, #1
 8007c9a:	d0dd      	beq.n	8007c58 <_dtoa_r+0xa58>
 8007c9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ca0:	d1d7      	bne.n	8007c52 <_dtoa_r+0xa52>
 8007ca2:	2339      	movs	r3, #57	; 0x39
 8007ca4:	f88b 3000 	strb.w	r3, [fp]
 8007ca8:	462b      	mov	r3, r5
 8007caa:	461d      	mov	r5, r3
 8007cac:	3b01      	subs	r3, #1
 8007cae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007cb2:	2a39      	cmp	r2, #57	; 0x39
 8007cb4:	d071      	beq.n	8007d9a <_dtoa_r+0xb9a>
 8007cb6:	3201      	adds	r2, #1
 8007cb8:	701a      	strb	r2, [r3, #0]
 8007cba:	e746      	b.n	8007b4a <_dtoa_r+0x94a>
 8007cbc:	2a00      	cmp	r2, #0
 8007cbe:	dd07      	ble.n	8007cd0 <_dtoa_r+0xad0>
 8007cc0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007cc4:	d0ed      	beq.n	8007ca2 <_dtoa_r+0xaa2>
 8007cc6:	f10a 0301 	add.w	r3, sl, #1
 8007cca:	f88b 3000 	strb.w	r3, [fp]
 8007cce:	e73c      	b.n	8007b4a <_dtoa_r+0x94a>
 8007cd0:	9b05      	ldr	r3, [sp, #20]
 8007cd2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007cd6:	4599      	cmp	r9, r3
 8007cd8:	d047      	beq.n	8007d6a <_dtoa_r+0xb6a>
 8007cda:	ee18 1a10 	vmov	r1, s16
 8007cde:	2300      	movs	r3, #0
 8007ce0:	220a      	movs	r2, #10
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f000 f8f6 	bl	8007ed4 <__multadd>
 8007ce8:	45b8      	cmp	r8, r7
 8007cea:	ee08 0a10 	vmov	s16, r0
 8007cee:	f04f 0300 	mov.w	r3, #0
 8007cf2:	f04f 020a 	mov.w	r2, #10
 8007cf6:	4641      	mov	r1, r8
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	d106      	bne.n	8007d0a <_dtoa_r+0xb0a>
 8007cfc:	f000 f8ea 	bl	8007ed4 <__multadd>
 8007d00:	4680      	mov	r8, r0
 8007d02:	4607      	mov	r7, r0
 8007d04:	f109 0901 	add.w	r9, r9, #1
 8007d08:	e772      	b.n	8007bf0 <_dtoa_r+0x9f0>
 8007d0a:	f000 f8e3 	bl	8007ed4 <__multadd>
 8007d0e:	4639      	mov	r1, r7
 8007d10:	4680      	mov	r8, r0
 8007d12:	2300      	movs	r3, #0
 8007d14:	220a      	movs	r2, #10
 8007d16:	4620      	mov	r0, r4
 8007d18:	f000 f8dc 	bl	8007ed4 <__multadd>
 8007d1c:	4607      	mov	r7, r0
 8007d1e:	e7f1      	b.n	8007d04 <_dtoa_r+0xb04>
 8007d20:	9b03      	ldr	r3, [sp, #12]
 8007d22:	9302      	str	r3, [sp, #8]
 8007d24:	9d01      	ldr	r5, [sp, #4]
 8007d26:	ee18 0a10 	vmov	r0, s16
 8007d2a:	4631      	mov	r1, r6
 8007d2c:	f7ff f9da 	bl	80070e4 <quorem>
 8007d30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007d34:	9b01      	ldr	r3, [sp, #4]
 8007d36:	f805 ab01 	strb.w	sl, [r5], #1
 8007d3a:	1aea      	subs	r2, r5, r3
 8007d3c:	9b02      	ldr	r3, [sp, #8]
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	dd09      	ble.n	8007d56 <_dtoa_r+0xb56>
 8007d42:	ee18 1a10 	vmov	r1, s16
 8007d46:	2300      	movs	r3, #0
 8007d48:	220a      	movs	r2, #10
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	f000 f8c2 	bl	8007ed4 <__multadd>
 8007d50:	ee08 0a10 	vmov	s16, r0
 8007d54:	e7e7      	b.n	8007d26 <_dtoa_r+0xb26>
 8007d56:	9b02      	ldr	r3, [sp, #8]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	bfc8      	it	gt
 8007d5c:	461d      	movgt	r5, r3
 8007d5e:	9b01      	ldr	r3, [sp, #4]
 8007d60:	bfd8      	it	le
 8007d62:	2501      	movle	r5, #1
 8007d64:	441d      	add	r5, r3
 8007d66:	f04f 0800 	mov.w	r8, #0
 8007d6a:	ee18 1a10 	vmov	r1, s16
 8007d6e:	2201      	movs	r2, #1
 8007d70:	4620      	mov	r0, r4
 8007d72:	f000 fa5f 	bl	8008234 <__lshift>
 8007d76:	4631      	mov	r1, r6
 8007d78:	ee08 0a10 	vmov	s16, r0
 8007d7c:	f000 faca 	bl	8008314 <__mcmp>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	dc91      	bgt.n	8007ca8 <_dtoa_r+0xaa8>
 8007d84:	d102      	bne.n	8007d8c <_dtoa_r+0xb8c>
 8007d86:	f01a 0f01 	tst.w	sl, #1
 8007d8a:	d18d      	bne.n	8007ca8 <_dtoa_r+0xaa8>
 8007d8c:	462b      	mov	r3, r5
 8007d8e:	461d      	mov	r5, r3
 8007d90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d94:	2a30      	cmp	r2, #48	; 0x30
 8007d96:	d0fa      	beq.n	8007d8e <_dtoa_r+0xb8e>
 8007d98:	e6d7      	b.n	8007b4a <_dtoa_r+0x94a>
 8007d9a:	9a01      	ldr	r2, [sp, #4]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d184      	bne.n	8007caa <_dtoa_r+0xaaa>
 8007da0:	9b00      	ldr	r3, [sp, #0]
 8007da2:	3301      	adds	r3, #1
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	2331      	movs	r3, #49	; 0x31
 8007da8:	7013      	strb	r3, [r2, #0]
 8007daa:	e6ce      	b.n	8007b4a <_dtoa_r+0x94a>
 8007dac:	4b09      	ldr	r3, [pc, #36]	; (8007dd4 <_dtoa_r+0xbd4>)
 8007dae:	f7ff ba95 	b.w	80072dc <_dtoa_r+0xdc>
 8007db2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f47f aa6e 	bne.w	8007296 <_dtoa_r+0x96>
 8007dba:	4b07      	ldr	r3, [pc, #28]	; (8007dd8 <_dtoa_r+0xbd8>)
 8007dbc:	f7ff ba8e 	b.w	80072dc <_dtoa_r+0xdc>
 8007dc0:	9b02      	ldr	r3, [sp, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	dcae      	bgt.n	8007d24 <_dtoa_r+0xb24>
 8007dc6:	9b06      	ldr	r3, [sp, #24]
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	f73f aea8 	bgt.w	8007b1e <_dtoa_r+0x91e>
 8007dce:	e7a9      	b.n	8007d24 <_dtoa_r+0xb24>
 8007dd0:	080096cf 	.word	0x080096cf
 8007dd4:	0800962c 	.word	0x0800962c
 8007dd8:	08009650 	.word	0x08009650

08007ddc <_localeconv_r>:
 8007ddc:	4800      	ldr	r0, [pc, #0]	; (8007de0 <_localeconv_r+0x4>)
 8007dde:	4770      	bx	lr
 8007de0:	20000160 	.word	0x20000160

08007de4 <malloc>:
 8007de4:	4b02      	ldr	r3, [pc, #8]	; (8007df0 <malloc+0xc>)
 8007de6:	4601      	mov	r1, r0
 8007de8:	6818      	ldr	r0, [r3, #0]
 8007dea:	f000 bc17 	b.w	800861c <_malloc_r>
 8007dee:	bf00      	nop
 8007df0:	2000000c 	.word	0x2000000c

08007df4 <memcpy>:
 8007df4:	440a      	add	r2, r1
 8007df6:	4291      	cmp	r1, r2
 8007df8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007dfc:	d100      	bne.n	8007e00 <memcpy+0xc>
 8007dfe:	4770      	bx	lr
 8007e00:	b510      	push	{r4, lr}
 8007e02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e0a:	4291      	cmp	r1, r2
 8007e0c:	d1f9      	bne.n	8007e02 <memcpy+0xe>
 8007e0e:	bd10      	pop	{r4, pc}

08007e10 <_Balloc>:
 8007e10:	b570      	push	{r4, r5, r6, lr}
 8007e12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e14:	4604      	mov	r4, r0
 8007e16:	460d      	mov	r5, r1
 8007e18:	b976      	cbnz	r6, 8007e38 <_Balloc+0x28>
 8007e1a:	2010      	movs	r0, #16
 8007e1c:	f7ff ffe2 	bl	8007de4 <malloc>
 8007e20:	4602      	mov	r2, r0
 8007e22:	6260      	str	r0, [r4, #36]	; 0x24
 8007e24:	b920      	cbnz	r0, 8007e30 <_Balloc+0x20>
 8007e26:	4b18      	ldr	r3, [pc, #96]	; (8007e88 <_Balloc+0x78>)
 8007e28:	4818      	ldr	r0, [pc, #96]	; (8007e8c <_Balloc+0x7c>)
 8007e2a:	2166      	movs	r1, #102	; 0x66
 8007e2c:	f000 fdd6 	bl	80089dc <__assert_func>
 8007e30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e34:	6006      	str	r6, [r0, #0]
 8007e36:	60c6      	str	r6, [r0, #12]
 8007e38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007e3a:	68f3      	ldr	r3, [r6, #12]
 8007e3c:	b183      	cbz	r3, 8007e60 <_Balloc+0x50>
 8007e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e46:	b9b8      	cbnz	r0, 8007e78 <_Balloc+0x68>
 8007e48:	2101      	movs	r1, #1
 8007e4a:	fa01 f605 	lsl.w	r6, r1, r5
 8007e4e:	1d72      	adds	r2, r6, #5
 8007e50:	0092      	lsls	r2, r2, #2
 8007e52:	4620      	mov	r0, r4
 8007e54:	f000 fb60 	bl	8008518 <_calloc_r>
 8007e58:	b160      	cbz	r0, 8007e74 <_Balloc+0x64>
 8007e5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e5e:	e00e      	b.n	8007e7e <_Balloc+0x6e>
 8007e60:	2221      	movs	r2, #33	; 0x21
 8007e62:	2104      	movs	r1, #4
 8007e64:	4620      	mov	r0, r4
 8007e66:	f000 fb57 	bl	8008518 <_calloc_r>
 8007e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e6c:	60f0      	str	r0, [r6, #12]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1e4      	bne.n	8007e3e <_Balloc+0x2e>
 8007e74:	2000      	movs	r0, #0
 8007e76:	bd70      	pop	{r4, r5, r6, pc}
 8007e78:	6802      	ldr	r2, [r0, #0]
 8007e7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e7e:	2300      	movs	r3, #0
 8007e80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e84:	e7f7      	b.n	8007e76 <_Balloc+0x66>
 8007e86:	bf00      	nop
 8007e88:	0800965d 	.word	0x0800965d
 8007e8c:	080096e0 	.word	0x080096e0

08007e90 <_Bfree>:
 8007e90:	b570      	push	{r4, r5, r6, lr}
 8007e92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e94:	4605      	mov	r5, r0
 8007e96:	460c      	mov	r4, r1
 8007e98:	b976      	cbnz	r6, 8007eb8 <_Bfree+0x28>
 8007e9a:	2010      	movs	r0, #16
 8007e9c:	f7ff ffa2 	bl	8007de4 <malloc>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	6268      	str	r0, [r5, #36]	; 0x24
 8007ea4:	b920      	cbnz	r0, 8007eb0 <_Bfree+0x20>
 8007ea6:	4b09      	ldr	r3, [pc, #36]	; (8007ecc <_Bfree+0x3c>)
 8007ea8:	4809      	ldr	r0, [pc, #36]	; (8007ed0 <_Bfree+0x40>)
 8007eaa:	218a      	movs	r1, #138	; 0x8a
 8007eac:	f000 fd96 	bl	80089dc <__assert_func>
 8007eb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007eb4:	6006      	str	r6, [r0, #0]
 8007eb6:	60c6      	str	r6, [r0, #12]
 8007eb8:	b13c      	cbz	r4, 8007eca <_Bfree+0x3a>
 8007eba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ebc:	6862      	ldr	r2, [r4, #4]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ec4:	6021      	str	r1, [r4, #0]
 8007ec6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007eca:	bd70      	pop	{r4, r5, r6, pc}
 8007ecc:	0800965d 	.word	0x0800965d
 8007ed0:	080096e0 	.word	0x080096e0

08007ed4 <__multadd>:
 8007ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed8:	690d      	ldr	r5, [r1, #16]
 8007eda:	4607      	mov	r7, r0
 8007edc:	460c      	mov	r4, r1
 8007ede:	461e      	mov	r6, r3
 8007ee0:	f101 0c14 	add.w	ip, r1, #20
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	f8dc 3000 	ldr.w	r3, [ip]
 8007eea:	b299      	uxth	r1, r3
 8007eec:	fb02 6101 	mla	r1, r2, r1, r6
 8007ef0:	0c1e      	lsrs	r6, r3, #16
 8007ef2:	0c0b      	lsrs	r3, r1, #16
 8007ef4:	fb02 3306 	mla	r3, r2, r6, r3
 8007ef8:	b289      	uxth	r1, r1
 8007efa:	3001      	adds	r0, #1
 8007efc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f00:	4285      	cmp	r5, r0
 8007f02:	f84c 1b04 	str.w	r1, [ip], #4
 8007f06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f0a:	dcec      	bgt.n	8007ee6 <__multadd+0x12>
 8007f0c:	b30e      	cbz	r6, 8007f52 <__multadd+0x7e>
 8007f0e:	68a3      	ldr	r3, [r4, #8]
 8007f10:	42ab      	cmp	r3, r5
 8007f12:	dc19      	bgt.n	8007f48 <__multadd+0x74>
 8007f14:	6861      	ldr	r1, [r4, #4]
 8007f16:	4638      	mov	r0, r7
 8007f18:	3101      	adds	r1, #1
 8007f1a:	f7ff ff79 	bl	8007e10 <_Balloc>
 8007f1e:	4680      	mov	r8, r0
 8007f20:	b928      	cbnz	r0, 8007f2e <__multadd+0x5a>
 8007f22:	4602      	mov	r2, r0
 8007f24:	4b0c      	ldr	r3, [pc, #48]	; (8007f58 <__multadd+0x84>)
 8007f26:	480d      	ldr	r0, [pc, #52]	; (8007f5c <__multadd+0x88>)
 8007f28:	21b5      	movs	r1, #181	; 0xb5
 8007f2a:	f000 fd57 	bl	80089dc <__assert_func>
 8007f2e:	6922      	ldr	r2, [r4, #16]
 8007f30:	3202      	adds	r2, #2
 8007f32:	f104 010c 	add.w	r1, r4, #12
 8007f36:	0092      	lsls	r2, r2, #2
 8007f38:	300c      	adds	r0, #12
 8007f3a:	f7ff ff5b 	bl	8007df4 <memcpy>
 8007f3e:	4621      	mov	r1, r4
 8007f40:	4638      	mov	r0, r7
 8007f42:	f7ff ffa5 	bl	8007e90 <_Bfree>
 8007f46:	4644      	mov	r4, r8
 8007f48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f4c:	3501      	adds	r5, #1
 8007f4e:	615e      	str	r6, [r3, #20]
 8007f50:	6125      	str	r5, [r4, #16]
 8007f52:	4620      	mov	r0, r4
 8007f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f58:	080096cf 	.word	0x080096cf
 8007f5c:	080096e0 	.word	0x080096e0

08007f60 <__hi0bits>:
 8007f60:	0c03      	lsrs	r3, r0, #16
 8007f62:	041b      	lsls	r3, r3, #16
 8007f64:	b9d3      	cbnz	r3, 8007f9c <__hi0bits+0x3c>
 8007f66:	0400      	lsls	r0, r0, #16
 8007f68:	2310      	movs	r3, #16
 8007f6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007f6e:	bf04      	itt	eq
 8007f70:	0200      	lsleq	r0, r0, #8
 8007f72:	3308      	addeq	r3, #8
 8007f74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007f78:	bf04      	itt	eq
 8007f7a:	0100      	lsleq	r0, r0, #4
 8007f7c:	3304      	addeq	r3, #4
 8007f7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007f82:	bf04      	itt	eq
 8007f84:	0080      	lsleq	r0, r0, #2
 8007f86:	3302      	addeq	r3, #2
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	db05      	blt.n	8007f98 <__hi0bits+0x38>
 8007f8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007f90:	f103 0301 	add.w	r3, r3, #1
 8007f94:	bf08      	it	eq
 8007f96:	2320      	moveq	r3, #32
 8007f98:	4618      	mov	r0, r3
 8007f9a:	4770      	bx	lr
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	e7e4      	b.n	8007f6a <__hi0bits+0xa>

08007fa0 <__lo0bits>:
 8007fa0:	6803      	ldr	r3, [r0, #0]
 8007fa2:	f013 0207 	ands.w	r2, r3, #7
 8007fa6:	4601      	mov	r1, r0
 8007fa8:	d00b      	beq.n	8007fc2 <__lo0bits+0x22>
 8007faa:	07da      	lsls	r2, r3, #31
 8007fac:	d423      	bmi.n	8007ff6 <__lo0bits+0x56>
 8007fae:	0798      	lsls	r0, r3, #30
 8007fb0:	bf49      	itett	mi
 8007fb2:	085b      	lsrmi	r3, r3, #1
 8007fb4:	089b      	lsrpl	r3, r3, #2
 8007fb6:	2001      	movmi	r0, #1
 8007fb8:	600b      	strmi	r3, [r1, #0]
 8007fba:	bf5c      	itt	pl
 8007fbc:	600b      	strpl	r3, [r1, #0]
 8007fbe:	2002      	movpl	r0, #2
 8007fc0:	4770      	bx	lr
 8007fc2:	b298      	uxth	r0, r3
 8007fc4:	b9a8      	cbnz	r0, 8007ff2 <__lo0bits+0x52>
 8007fc6:	0c1b      	lsrs	r3, r3, #16
 8007fc8:	2010      	movs	r0, #16
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	b90a      	cbnz	r2, 8007fd2 <__lo0bits+0x32>
 8007fce:	3008      	adds	r0, #8
 8007fd0:	0a1b      	lsrs	r3, r3, #8
 8007fd2:	071a      	lsls	r2, r3, #28
 8007fd4:	bf04      	itt	eq
 8007fd6:	091b      	lsreq	r3, r3, #4
 8007fd8:	3004      	addeq	r0, #4
 8007fda:	079a      	lsls	r2, r3, #30
 8007fdc:	bf04      	itt	eq
 8007fde:	089b      	lsreq	r3, r3, #2
 8007fe0:	3002      	addeq	r0, #2
 8007fe2:	07da      	lsls	r2, r3, #31
 8007fe4:	d403      	bmi.n	8007fee <__lo0bits+0x4e>
 8007fe6:	085b      	lsrs	r3, r3, #1
 8007fe8:	f100 0001 	add.w	r0, r0, #1
 8007fec:	d005      	beq.n	8007ffa <__lo0bits+0x5a>
 8007fee:	600b      	str	r3, [r1, #0]
 8007ff0:	4770      	bx	lr
 8007ff2:	4610      	mov	r0, r2
 8007ff4:	e7e9      	b.n	8007fca <__lo0bits+0x2a>
 8007ff6:	2000      	movs	r0, #0
 8007ff8:	4770      	bx	lr
 8007ffa:	2020      	movs	r0, #32
 8007ffc:	4770      	bx	lr
	...

08008000 <__i2b>:
 8008000:	b510      	push	{r4, lr}
 8008002:	460c      	mov	r4, r1
 8008004:	2101      	movs	r1, #1
 8008006:	f7ff ff03 	bl	8007e10 <_Balloc>
 800800a:	4602      	mov	r2, r0
 800800c:	b928      	cbnz	r0, 800801a <__i2b+0x1a>
 800800e:	4b05      	ldr	r3, [pc, #20]	; (8008024 <__i2b+0x24>)
 8008010:	4805      	ldr	r0, [pc, #20]	; (8008028 <__i2b+0x28>)
 8008012:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008016:	f000 fce1 	bl	80089dc <__assert_func>
 800801a:	2301      	movs	r3, #1
 800801c:	6144      	str	r4, [r0, #20]
 800801e:	6103      	str	r3, [r0, #16]
 8008020:	bd10      	pop	{r4, pc}
 8008022:	bf00      	nop
 8008024:	080096cf 	.word	0x080096cf
 8008028:	080096e0 	.word	0x080096e0

0800802c <__multiply>:
 800802c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008030:	4691      	mov	r9, r2
 8008032:	690a      	ldr	r2, [r1, #16]
 8008034:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008038:	429a      	cmp	r2, r3
 800803a:	bfb8      	it	lt
 800803c:	460b      	movlt	r3, r1
 800803e:	460c      	mov	r4, r1
 8008040:	bfbc      	itt	lt
 8008042:	464c      	movlt	r4, r9
 8008044:	4699      	movlt	r9, r3
 8008046:	6927      	ldr	r7, [r4, #16]
 8008048:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800804c:	68a3      	ldr	r3, [r4, #8]
 800804e:	6861      	ldr	r1, [r4, #4]
 8008050:	eb07 060a 	add.w	r6, r7, sl
 8008054:	42b3      	cmp	r3, r6
 8008056:	b085      	sub	sp, #20
 8008058:	bfb8      	it	lt
 800805a:	3101      	addlt	r1, #1
 800805c:	f7ff fed8 	bl	8007e10 <_Balloc>
 8008060:	b930      	cbnz	r0, 8008070 <__multiply+0x44>
 8008062:	4602      	mov	r2, r0
 8008064:	4b44      	ldr	r3, [pc, #272]	; (8008178 <__multiply+0x14c>)
 8008066:	4845      	ldr	r0, [pc, #276]	; (800817c <__multiply+0x150>)
 8008068:	f240 115d 	movw	r1, #349	; 0x15d
 800806c:	f000 fcb6 	bl	80089dc <__assert_func>
 8008070:	f100 0514 	add.w	r5, r0, #20
 8008074:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008078:	462b      	mov	r3, r5
 800807a:	2200      	movs	r2, #0
 800807c:	4543      	cmp	r3, r8
 800807e:	d321      	bcc.n	80080c4 <__multiply+0x98>
 8008080:	f104 0314 	add.w	r3, r4, #20
 8008084:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008088:	f109 0314 	add.w	r3, r9, #20
 800808c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008090:	9202      	str	r2, [sp, #8]
 8008092:	1b3a      	subs	r2, r7, r4
 8008094:	3a15      	subs	r2, #21
 8008096:	f022 0203 	bic.w	r2, r2, #3
 800809a:	3204      	adds	r2, #4
 800809c:	f104 0115 	add.w	r1, r4, #21
 80080a0:	428f      	cmp	r7, r1
 80080a2:	bf38      	it	cc
 80080a4:	2204      	movcc	r2, #4
 80080a6:	9201      	str	r2, [sp, #4]
 80080a8:	9a02      	ldr	r2, [sp, #8]
 80080aa:	9303      	str	r3, [sp, #12]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d80c      	bhi.n	80080ca <__multiply+0x9e>
 80080b0:	2e00      	cmp	r6, #0
 80080b2:	dd03      	ble.n	80080bc <__multiply+0x90>
 80080b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d05a      	beq.n	8008172 <__multiply+0x146>
 80080bc:	6106      	str	r6, [r0, #16]
 80080be:	b005      	add	sp, #20
 80080c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c4:	f843 2b04 	str.w	r2, [r3], #4
 80080c8:	e7d8      	b.n	800807c <__multiply+0x50>
 80080ca:	f8b3 a000 	ldrh.w	sl, [r3]
 80080ce:	f1ba 0f00 	cmp.w	sl, #0
 80080d2:	d024      	beq.n	800811e <__multiply+0xf2>
 80080d4:	f104 0e14 	add.w	lr, r4, #20
 80080d8:	46a9      	mov	r9, r5
 80080da:	f04f 0c00 	mov.w	ip, #0
 80080de:	f85e 2b04 	ldr.w	r2, [lr], #4
 80080e2:	f8d9 1000 	ldr.w	r1, [r9]
 80080e6:	fa1f fb82 	uxth.w	fp, r2
 80080ea:	b289      	uxth	r1, r1
 80080ec:	fb0a 110b 	mla	r1, sl, fp, r1
 80080f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80080f4:	f8d9 2000 	ldr.w	r2, [r9]
 80080f8:	4461      	add	r1, ip
 80080fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80080fe:	fb0a c20b 	mla	r2, sl, fp, ip
 8008102:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008106:	b289      	uxth	r1, r1
 8008108:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800810c:	4577      	cmp	r7, lr
 800810e:	f849 1b04 	str.w	r1, [r9], #4
 8008112:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008116:	d8e2      	bhi.n	80080de <__multiply+0xb2>
 8008118:	9a01      	ldr	r2, [sp, #4]
 800811a:	f845 c002 	str.w	ip, [r5, r2]
 800811e:	9a03      	ldr	r2, [sp, #12]
 8008120:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008124:	3304      	adds	r3, #4
 8008126:	f1b9 0f00 	cmp.w	r9, #0
 800812a:	d020      	beq.n	800816e <__multiply+0x142>
 800812c:	6829      	ldr	r1, [r5, #0]
 800812e:	f104 0c14 	add.w	ip, r4, #20
 8008132:	46ae      	mov	lr, r5
 8008134:	f04f 0a00 	mov.w	sl, #0
 8008138:	f8bc b000 	ldrh.w	fp, [ip]
 800813c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008140:	fb09 220b 	mla	r2, r9, fp, r2
 8008144:	4492      	add	sl, r2
 8008146:	b289      	uxth	r1, r1
 8008148:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800814c:	f84e 1b04 	str.w	r1, [lr], #4
 8008150:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008154:	f8be 1000 	ldrh.w	r1, [lr]
 8008158:	0c12      	lsrs	r2, r2, #16
 800815a:	fb09 1102 	mla	r1, r9, r2, r1
 800815e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008162:	4567      	cmp	r7, ip
 8008164:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008168:	d8e6      	bhi.n	8008138 <__multiply+0x10c>
 800816a:	9a01      	ldr	r2, [sp, #4]
 800816c:	50a9      	str	r1, [r5, r2]
 800816e:	3504      	adds	r5, #4
 8008170:	e79a      	b.n	80080a8 <__multiply+0x7c>
 8008172:	3e01      	subs	r6, #1
 8008174:	e79c      	b.n	80080b0 <__multiply+0x84>
 8008176:	bf00      	nop
 8008178:	080096cf 	.word	0x080096cf
 800817c:	080096e0 	.word	0x080096e0

08008180 <__pow5mult>:
 8008180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008184:	4615      	mov	r5, r2
 8008186:	f012 0203 	ands.w	r2, r2, #3
 800818a:	4606      	mov	r6, r0
 800818c:	460f      	mov	r7, r1
 800818e:	d007      	beq.n	80081a0 <__pow5mult+0x20>
 8008190:	4c25      	ldr	r4, [pc, #148]	; (8008228 <__pow5mult+0xa8>)
 8008192:	3a01      	subs	r2, #1
 8008194:	2300      	movs	r3, #0
 8008196:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800819a:	f7ff fe9b 	bl	8007ed4 <__multadd>
 800819e:	4607      	mov	r7, r0
 80081a0:	10ad      	asrs	r5, r5, #2
 80081a2:	d03d      	beq.n	8008220 <__pow5mult+0xa0>
 80081a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80081a6:	b97c      	cbnz	r4, 80081c8 <__pow5mult+0x48>
 80081a8:	2010      	movs	r0, #16
 80081aa:	f7ff fe1b 	bl	8007de4 <malloc>
 80081ae:	4602      	mov	r2, r0
 80081b0:	6270      	str	r0, [r6, #36]	; 0x24
 80081b2:	b928      	cbnz	r0, 80081c0 <__pow5mult+0x40>
 80081b4:	4b1d      	ldr	r3, [pc, #116]	; (800822c <__pow5mult+0xac>)
 80081b6:	481e      	ldr	r0, [pc, #120]	; (8008230 <__pow5mult+0xb0>)
 80081b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80081bc:	f000 fc0e 	bl	80089dc <__assert_func>
 80081c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081c4:	6004      	str	r4, [r0, #0]
 80081c6:	60c4      	str	r4, [r0, #12]
 80081c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80081cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081d0:	b94c      	cbnz	r4, 80081e6 <__pow5mult+0x66>
 80081d2:	f240 2171 	movw	r1, #625	; 0x271
 80081d6:	4630      	mov	r0, r6
 80081d8:	f7ff ff12 	bl	8008000 <__i2b>
 80081dc:	2300      	movs	r3, #0
 80081de:	f8c8 0008 	str.w	r0, [r8, #8]
 80081e2:	4604      	mov	r4, r0
 80081e4:	6003      	str	r3, [r0, #0]
 80081e6:	f04f 0900 	mov.w	r9, #0
 80081ea:	07eb      	lsls	r3, r5, #31
 80081ec:	d50a      	bpl.n	8008204 <__pow5mult+0x84>
 80081ee:	4639      	mov	r1, r7
 80081f0:	4622      	mov	r2, r4
 80081f2:	4630      	mov	r0, r6
 80081f4:	f7ff ff1a 	bl	800802c <__multiply>
 80081f8:	4639      	mov	r1, r7
 80081fa:	4680      	mov	r8, r0
 80081fc:	4630      	mov	r0, r6
 80081fe:	f7ff fe47 	bl	8007e90 <_Bfree>
 8008202:	4647      	mov	r7, r8
 8008204:	106d      	asrs	r5, r5, #1
 8008206:	d00b      	beq.n	8008220 <__pow5mult+0xa0>
 8008208:	6820      	ldr	r0, [r4, #0]
 800820a:	b938      	cbnz	r0, 800821c <__pow5mult+0x9c>
 800820c:	4622      	mov	r2, r4
 800820e:	4621      	mov	r1, r4
 8008210:	4630      	mov	r0, r6
 8008212:	f7ff ff0b 	bl	800802c <__multiply>
 8008216:	6020      	str	r0, [r4, #0]
 8008218:	f8c0 9000 	str.w	r9, [r0]
 800821c:	4604      	mov	r4, r0
 800821e:	e7e4      	b.n	80081ea <__pow5mult+0x6a>
 8008220:	4638      	mov	r0, r7
 8008222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008226:	bf00      	nop
 8008228:	08009830 	.word	0x08009830
 800822c:	0800965d 	.word	0x0800965d
 8008230:	080096e0 	.word	0x080096e0

08008234 <__lshift>:
 8008234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008238:	460c      	mov	r4, r1
 800823a:	6849      	ldr	r1, [r1, #4]
 800823c:	6923      	ldr	r3, [r4, #16]
 800823e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008242:	68a3      	ldr	r3, [r4, #8]
 8008244:	4607      	mov	r7, r0
 8008246:	4691      	mov	r9, r2
 8008248:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800824c:	f108 0601 	add.w	r6, r8, #1
 8008250:	42b3      	cmp	r3, r6
 8008252:	db0b      	blt.n	800826c <__lshift+0x38>
 8008254:	4638      	mov	r0, r7
 8008256:	f7ff fddb 	bl	8007e10 <_Balloc>
 800825a:	4605      	mov	r5, r0
 800825c:	b948      	cbnz	r0, 8008272 <__lshift+0x3e>
 800825e:	4602      	mov	r2, r0
 8008260:	4b2a      	ldr	r3, [pc, #168]	; (800830c <__lshift+0xd8>)
 8008262:	482b      	ldr	r0, [pc, #172]	; (8008310 <__lshift+0xdc>)
 8008264:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008268:	f000 fbb8 	bl	80089dc <__assert_func>
 800826c:	3101      	adds	r1, #1
 800826e:	005b      	lsls	r3, r3, #1
 8008270:	e7ee      	b.n	8008250 <__lshift+0x1c>
 8008272:	2300      	movs	r3, #0
 8008274:	f100 0114 	add.w	r1, r0, #20
 8008278:	f100 0210 	add.w	r2, r0, #16
 800827c:	4618      	mov	r0, r3
 800827e:	4553      	cmp	r3, sl
 8008280:	db37      	blt.n	80082f2 <__lshift+0xbe>
 8008282:	6920      	ldr	r0, [r4, #16]
 8008284:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008288:	f104 0314 	add.w	r3, r4, #20
 800828c:	f019 091f 	ands.w	r9, r9, #31
 8008290:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008294:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008298:	d02f      	beq.n	80082fa <__lshift+0xc6>
 800829a:	f1c9 0e20 	rsb	lr, r9, #32
 800829e:	468a      	mov	sl, r1
 80082a0:	f04f 0c00 	mov.w	ip, #0
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	fa02 f209 	lsl.w	r2, r2, r9
 80082aa:	ea42 020c 	orr.w	r2, r2, ip
 80082ae:	f84a 2b04 	str.w	r2, [sl], #4
 80082b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80082b6:	4298      	cmp	r0, r3
 80082b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80082bc:	d8f2      	bhi.n	80082a4 <__lshift+0x70>
 80082be:	1b03      	subs	r3, r0, r4
 80082c0:	3b15      	subs	r3, #21
 80082c2:	f023 0303 	bic.w	r3, r3, #3
 80082c6:	3304      	adds	r3, #4
 80082c8:	f104 0215 	add.w	r2, r4, #21
 80082cc:	4290      	cmp	r0, r2
 80082ce:	bf38      	it	cc
 80082d0:	2304      	movcc	r3, #4
 80082d2:	f841 c003 	str.w	ip, [r1, r3]
 80082d6:	f1bc 0f00 	cmp.w	ip, #0
 80082da:	d001      	beq.n	80082e0 <__lshift+0xac>
 80082dc:	f108 0602 	add.w	r6, r8, #2
 80082e0:	3e01      	subs	r6, #1
 80082e2:	4638      	mov	r0, r7
 80082e4:	612e      	str	r6, [r5, #16]
 80082e6:	4621      	mov	r1, r4
 80082e8:	f7ff fdd2 	bl	8007e90 <_Bfree>
 80082ec:	4628      	mov	r0, r5
 80082ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80082f6:	3301      	adds	r3, #1
 80082f8:	e7c1      	b.n	800827e <__lshift+0x4a>
 80082fa:	3904      	subs	r1, #4
 80082fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008300:	f841 2f04 	str.w	r2, [r1, #4]!
 8008304:	4298      	cmp	r0, r3
 8008306:	d8f9      	bhi.n	80082fc <__lshift+0xc8>
 8008308:	e7ea      	b.n	80082e0 <__lshift+0xac>
 800830a:	bf00      	nop
 800830c:	080096cf 	.word	0x080096cf
 8008310:	080096e0 	.word	0x080096e0

08008314 <__mcmp>:
 8008314:	b530      	push	{r4, r5, lr}
 8008316:	6902      	ldr	r2, [r0, #16]
 8008318:	690c      	ldr	r4, [r1, #16]
 800831a:	1b12      	subs	r2, r2, r4
 800831c:	d10e      	bne.n	800833c <__mcmp+0x28>
 800831e:	f100 0314 	add.w	r3, r0, #20
 8008322:	3114      	adds	r1, #20
 8008324:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008328:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800832c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008330:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008334:	42a5      	cmp	r5, r4
 8008336:	d003      	beq.n	8008340 <__mcmp+0x2c>
 8008338:	d305      	bcc.n	8008346 <__mcmp+0x32>
 800833a:	2201      	movs	r2, #1
 800833c:	4610      	mov	r0, r2
 800833e:	bd30      	pop	{r4, r5, pc}
 8008340:	4283      	cmp	r3, r0
 8008342:	d3f3      	bcc.n	800832c <__mcmp+0x18>
 8008344:	e7fa      	b.n	800833c <__mcmp+0x28>
 8008346:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800834a:	e7f7      	b.n	800833c <__mcmp+0x28>

0800834c <__mdiff>:
 800834c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008350:	460c      	mov	r4, r1
 8008352:	4606      	mov	r6, r0
 8008354:	4611      	mov	r1, r2
 8008356:	4620      	mov	r0, r4
 8008358:	4690      	mov	r8, r2
 800835a:	f7ff ffdb 	bl	8008314 <__mcmp>
 800835e:	1e05      	subs	r5, r0, #0
 8008360:	d110      	bne.n	8008384 <__mdiff+0x38>
 8008362:	4629      	mov	r1, r5
 8008364:	4630      	mov	r0, r6
 8008366:	f7ff fd53 	bl	8007e10 <_Balloc>
 800836a:	b930      	cbnz	r0, 800837a <__mdiff+0x2e>
 800836c:	4b3a      	ldr	r3, [pc, #232]	; (8008458 <__mdiff+0x10c>)
 800836e:	4602      	mov	r2, r0
 8008370:	f240 2132 	movw	r1, #562	; 0x232
 8008374:	4839      	ldr	r0, [pc, #228]	; (800845c <__mdiff+0x110>)
 8008376:	f000 fb31 	bl	80089dc <__assert_func>
 800837a:	2301      	movs	r3, #1
 800837c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008380:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008384:	bfa4      	itt	ge
 8008386:	4643      	movge	r3, r8
 8008388:	46a0      	movge	r8, r4
 800838a:	4630      	mov	r0, r6
 800838c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008390:	bfa6      	itte	ge
 8008392:	461c      	movge	r4, r3
 8008394:	2500      	movge	r5, #0
 8008396:	2501      	movlt	r5, #1
 8008398:	f7ff fd3a 	bl	8007e10 <_Balloc>
 800839c:	b920      	cbnz	r0, 80083a8 <__mdiff+0x5c>
 800839e:	4b2e      	ldr	r3, [pc, #184]	; (8008458 <__mdiff+0x10c>)
 80083a0:	4602      	mov	r2, r0
 80083a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80083a6:	e7e5      	b.n	8008374 <__mdiff+0x28>
 80083a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80083ac:	6926      	ldr	r6, [r4, #16]
 80083ae:	60c5      	str	r5, [r0, #12]
 80083b0:	f104 0914 	add.w	r9, r4, #20
 80083b4:	f108 0514 	add.w	r5, r8, #20
 80083b8:	f100 0e14 	add.w	lr, r0, #20
 80083bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80083c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80083c4:	f108 0210 	add.w	r2, r8, #16
 80083c8:	46f2      	mov	sl, lr
 80083ca:	2100      	movs	r1, #0
 80083cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80083d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80083d4:	fa1f f883 	uxth.w	r8, r3
 80083d8:	fa11 f18b 	uxtah	r1, r1, fp
 80083dc:	0c1b      	lsrs	r3, r3, #16
 80083de:	eba1 0808 	sub.w	r8, r1, r8
 80083e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80083e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80083ea:	fa1f f888 	uxth.w	r8, r8
 80083ee:	1419      	asrs	r1, r3, #16
 80083f0:	454e      	cmp	r6, r9
 80083f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80083f6:	f84a 3b04 	str.w	r3, [sl], #4
 80083fa:	d8e7      	bhi.n	80083cc <__mdiff+0x80>
 80083fc:	1b33      	subs	r3, r6, r4
 80083fe:	3b15      	subs	r3, #21
 8008400:	f023 0303 	bic.w	r3, r3, #3
 8008404:	3304      	adds	r3, #4
 8008406:	3415      	adds	r4, #21
 8008408:	42a6      	cmp	r6, r4
 800840a:	bf38      	it	cc
 800840c:	2304      	movcc	r3, #4
 800840e:	441d      	add	r5, r3
 8008410:	4473      	add	r3, lr
 8008412:	469e      	mov	lr, r3
 8008414:	462e      	mov	r6, r5
 8008416:	4566      	cmp	r6, ip
 8008418:	d30e      	bcc.n	8008438 <__mdiff+0xec>
 800841a:	f10c 0203 	add.w	r2, ip, #3
 800841e:	1b52      	subs	r2, r2, r5
 8008420:	f022 0203 	bic.w	r2, r2, #3
 8008424:	3d03      	subs	r5, #3
 8008426:	45ac      	cmp	ip, r5
 8008428:	bf38      	it	cc
 800842a:	2200      	movcc	r2, #0
 800842c:	441a      	add	r2, r3
 800842e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008432:	b17b      	cbz	r3, 8008454 <__mdiff+0x108>
 8008434:	6107      	str	r7, [r0, #16]
 8008436:	e7a3      	b.n	8008380 <__mdiff+0x34>
 8008438:	f856 8b04 	ldr.w	r8, [r6], #4
 800843c:	fa11 f288 	uxtah	r2, r1, r8
 8008440:	1414      	asrs	r4, r2, #16
 8008442:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008446:	b292      	uxth	r2, r2
 8008448:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800844c:	f84e 2b04 	str.w	r2, [lr], #4
 8008450:	1421      	asrs	r1, r4, #16
 8008452:	e7e0      	b.n	8008416 <__mdiff+0xca>
 8008454:	3f01      	subs	r7, #1
 8008456:	e7ea      	b.n	800842e <__mdiff+0xe2>
 8008458:	080096cf 	.word	0x080096cf
 800845c:	080096e0 	.word	0x080096e0

08008460 <__d2b>:
 8008460:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008464:	4689      	mov	r9, r1
 8008466:	2101      	movs	r1, #1
 8008468:	ec57 6b10 	vmov	r6, r7, d0
 800846c:	4690      	mov	r8, r2
 800846e:	f7ff fccf 	bl	8007e10 <_Balloc>
 8008472:	4604      	mov	r4, r0
 8008474:	b930      	cbnz	r0, 8008484 <__d2b+0x24>
 8008476:	4602      	mov	r2, r0
 8008478:	4b25      	ldr	r3, [pc, #148]	; (8008510 <__d2b+0xb0>)
 800847a:	4826      	ldr	r0, [pc, #152]	; (8008514 <__d2b+0xb4>)
 800847c:	f240 310a 	movw	r1, #778	; 0x30a
 8008480:	f000 faac 	bl	80089dc <__assert_func>
 8008484:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008488:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800848c:	bb35      	cbnz	r5, 80084dc <__d2b+0x7c>
 800848e:	2e00      	cmp	r6, #0
 8008490:	9301      	str	r3, [sp, #4]
 8008492:	d028      	beq.n	80084e6 <__d2b+0x86>
 8008494:	4668      	mov	r0, sp
 8008496:	9600      	str	r6, [sp, #0]
 8008498:	f7ff fd82 	bl	8007fa0 <__lo0bits>
 800849c:	9900      	ldr	r1, [sp, #0]
 800849e:	b300      	cbz	r0, 80084e2 <__d2b+0x82>
 80084a0:	9a01      	ldr	r2, [sp, #4]
 80084a2:	f1c0 0320 	rsb	r3, r0, #32
 80084a6:	fa02 f303 	lsl.w	r3, r2, r3
 80084aa:	430b      	orrs	r3, r1
 80084ac:	40c2      	lsrs	r2, r0
 80084ae:	6163      	str	r3, [r4, #20]
 80084b0:	9201      	str	r2, [sp, #4]
 80084b2:	9b01      	ldr	r3, [sp, #4]
 80084b4:	61a3      	str	r3, [r4, #24]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	bf14      	ite	ne
 80084ba:	2202      	movne	r2, #2
 80084bc:	2201      	moveq	r2, #1
 80084be:	6122      	str	r2, [r4, #16]
 80084c0:	b1d5      	cbz	r5, 80084f8 <__d2b+0x98>
 80084c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80084c6:	4405      	add	r5, r0
 80084c8:	f8c9 5000 	str.w	r5, [r9]
 80084cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80084d0:	f8c8 0000 	str.w	r0, [r8]
 80084d4:	4620      	mov	r0, r4
 80084d6:	b003      	add	sp, #12
 80084d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084e0:	e7d5      	b.n	800848e <__d2b+0x2e>
 80084e2:	6161      	str	r1, [r4, #20]
 80084e4:	e7e5      	b.n	80084b2 <__d2b+0x52>
 80084e6:	a801      	add	r0, sp, #4
 80084e8:	f7ff fd5a 	bl	8007fa0 <__lo0bits>
 80084ec:	9b01      	ldr	r3, [sp, #4]
 80084ee:	6163      	str	r3, [r4, #20]
 80084f0:	2201      	movs	r2, #1
 80084f2:	6122      	str	r2, [r4, #16]
 80084f4:	3020      	adds	r0, #32
 80084f6:	e7e3      	b.n	80084c0 <__d2b+0x60>
 80084f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80084fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008500:	f8c9 0000 	str.w	r0, [r9]
 8008504:	6918      	ldr	r0, [r3, #16]
 8008506:	f7ff fd2b 	bl	8007f60 <__hi0bits>
 800850a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800850e:	e7df      	b.n	80084d0 <__d2b+0x70>
 8008510:	080096cf 	.word	0x080096cf
 8008514:	080096e0 	.word	0x080096e0

08008518 <_calloc_r>:
 8008518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800851a:	fba1 2402 	umull	r2, r4, r1, r2
 800851e:	b94c      	cbnz	r4, 8008534 <_calloc_r+0x1c>
 8008520:	4611      	mov	r1, r2
 8008522:	9201      	str	r2, [sp, #4]
 8008524:	f000 f87a 	bl	800861c <_malloc_r>
 8008528:	9a01      	ldr	r2, [sp, #4]
 800852a:	4605      	mov	r5, r0
 800852c:	b930      	cbnz	r0, 800853c <_calloc_r+0x24>
 800852e:	4628      	mov	r0, r5
 8008530:	b003      	add	sp, #12
 8008532:	bd30      	pop	{r4, r5, pc}
 8008534:	220c      	movs	r2, #12
 8008536:	6002      	str	r2, [r0, #0]
 8008538:	2500      	movs	r5, #0
 800853a:	e7f8      	b.n	800852e <_calloc_r+0x16>
 800853c:	4621      	mov	r1, r4
 800853e:	f7fe f92b 	bl	8006798 <memset>
 8008542:	e7f4      	b.n	800852e <_calloc_r+0x16>

08008544 <_free_r>:
 8008544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008546:	2900      	cmp	r1, #0
 8008548:	d044      	beq.n	80085d4 <_free_r+0x90>
 800854a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800854e:	9001      	str	r0, [sp, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	f1a1 0404 	sub.w	r4, r1, #4
 8008556:	bfb8      	it	lt
 8008558:	18e4      	addlt	r4, r4, r3
 800855a:	f000 fa9b 	bl	8008a94 <__malloc_lock>
 800855e:	4a1e      	ldr	r2, [pc, #120]	; (80085d8 <_free_r+0x94>)
 8008560:	9801      	ldr	r0, [sp, #4]
 8008562:	6813      	ldr	r3, [r2, #0]
 8008564:	b933      	cbnz	r3, 8008574 <_free_r+0x30>
 8008566:	6063      	str	r3, [r4, #4]
 8008568:	6014      	str	r4, [r2, #0]
 800856a:	b003      	add	sp, #12
 800856c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008570:	f000 ba96 	b.w	8008aa0 <__malloc_unlock>
 8008574:	42a3      	cmp	r3, r4
 8008576:	d908      	bls.n	800858a <_free_r+0x46>
 8008578:	6825      	ldr	r5, [r4, #0]
 800857a:	1961      	adds	r1, r4, r5
 800857c:	428b      	cmp	r3, r1
 800857e:	bf01      	itttt	eq
 8008580:	6819      	ldreq	r1, [r3, #0]
 8008582:	685b      	ldreq	r3, [r3, #4]
 8008584:	1949      	addeq	r1, r1, r5
 8008586:	6021      	streq	r1, [r4, #0]
 8008588:	e7ed      	b.n	8008566 <_free_r+0x22>
 800858a:	461a      	mov	r2, r3
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	b10b      	cbz	r3, 8008594 <_free_r+0x50>
 8008590:	42a3      	cmp	r3, r4
 8008592:	d9fa      	bls.n	800858a <_free_r+0x46>
 8008594:	6811      	ldr	r1, [r2, #0]
 8008596:	1855      	adds	r5, r2, r1
 8008598:	42a5      	cmp	r5, r4
 800859a:	d10b      	bne.n	80085b4 <_free_r+0x70>
 800859c:	6824      	ldr	r4, [r4, #0]
 800859e:	4421      	add	r1, r4
 80085a0:	1854      	adds	r4, r2, r1
 80085a2:	42a3      	cmp	r3, r4
 80085a4:	6011      	str	r1, [r2, #0]
 80085a6:	d1e0      	bne.n	800856a <_free_r+0x26>
 80085a8:	681c      	ldr	r4, [r3, #0]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	6053      	str	r3, [r2, #4]
 80085ae:	4421      	add	r1, r4
 80085b0:	6011      	str	r1, [r2, #0]
 80085b2:	e7da      	b.n	800856a <_free_r+0x26>
 80085b4:	d902      	bls.n	80085bc <_free_r+0x78>
 80085b6:	230c      	movs	r3, #12
 80085b8:	6003      	str	r3, [r0, #0]
 80085ba:	e7d6      	b.n	800856a <_free_r+0x26>
 80085bc:	6825      	ldr	r5, [r4, #0]
 80085be:	1961      	adds	r1, r4, r5
 80085c0:	428b      	cmp	r3, r1
 80085c2:	bf04      	itt	eq
 80085c4:	6819      	ldreq	r1, [r3, #0]
 80085c6:	685b      	ldreq	r3, [r3, #4]
 80085c8:	6063      	str	r3, [r4, #4]
 80085ca:	bf04      	itt	eq
 80085cc:	1949      	addeq	r1, r1, r5
 80085ce:	6021      	streq	r1, [r4, #0]
 80085d0:	6054      	str	r4, [r2, #4]
 80085d2:	e7ca      	b.n	800856a <_free_r+0x26>
 80085d4:	b003      	add	sp, #12
 80085d6:	bd30      	pop	{r4, r5, pc}
 80085d8:	200003e0 	.word	0x200003e0

080085dc <sbrk_aligned>:
 80085dc:	b570      	push	{r4, r5, r6, lr}
 80085de:	4e0e      	ldr	r6, [pc, #56]	; (8008618 <sbrk_aligned+0x3c>)
 80085e0:	460c      	mov	r4, r1
 80085e2:	6831      	ldr	r1, [r6, #0]
 80085e4:	4605      	mov	r5, r0
 80085e6:	b911      	cbnz	r1, 80085ee <sbrk_aligned+0x12>
 80085e8:	f000 f9e8 	bl	80089bc <_sbrk_r>
 80085ec:	6030      	str	r0, [r6, #0]
 80085ee:	4621      	mov	r1, r4
 80085f0:	4628      	mov	r0, r5
 80085f2:	f000 f9e3 	bl	80089bc <_sbrk_r>
 80085f6:	1c43      	adds	r3, r0, #1
 80085f8:	d00a      	beq.n	8008610 <sbrk_aligned+0x34>
 80085fa:	1cc4      	adds	r4, r0, #3
 80085fc:	f024 0403 	bic.w	r4, r4, #3
 8008600:	42a0      	cmp	r0, r4
 8008602:	d007      	beq.n	8008614 <sbrk_aligned+0x38>
 8008604:	1a21      	subs	r1, r4, r0
 8008606:	4628      	mov	r0, r5
 8008608:	f000 f9d8 	bl	80089bc <_sbrk_r>
 800860c:	3001      	adds	r0, #1
 800860e:	d101      	bne.n	8008614 <sbrk_aligned+0x38>
 8008610:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008614:	4620      	mov	r0, r4
 8008616:	bd70      	pop	{r4, r5, r6, pc}
 8008618:	200003e4 	.word	0x200003e4

0800861c <_malloc_r>:
 800861c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008620:	1ccd      	adds	r5, r1, #3
 8008622:	f025 0503 	bic.w	r5, r5, #3
 8008626:	3508      	adds	r5, #8
 8008628:	2d0c      	cmp	r5, #12
 800862a:	bf38      	it	cc
 800862c:	250c      	movcc	r5, #12
 800862e:	2d00      	cmp	r5, #0
 8008630:	4607      	mov	r7, r0
 8008632:	db01      	blt.n	8008638 <_malloc_r+0x1c>
 8008634:	42a9      	cmp	r1, r5
 8008636:	d905      	bls.n	8008644 <_malloc_r+0x28>
 8008638:	230c      	movs	r3, #12
 800863a:	603b      	str	r3, [r7, #0]
 800863c:	2600      	movs	r6, #0
 800863e:	4630      	mov	r0, r6
 8008640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008644:	4e2e      	ldr	r6, [pc, #184]	; (8008700 <_malloc_r+0xe4>)
 8008646:	f000 fa25 	bl	8008a94 <__malloc_lock>
 800864a:	6833      	ldr	r3, [r6, #0]
 800864c:	461c      	mov	r4, r3
 800864e:	bb34      	cbnz	r4, 800869e <_malloc_r+0x82>
 8008650:	4629      	mov	r1, r5
 8008652:	4638      	mov	r0, r7
 8008654:	f7ff ffc2 	bl	80085dc <sbrk_aligned>
 8008658:	1c43      	adds	r3, r0, #1
 800865a:	4604      	mov	r4, r0
 800865c:	d14d      	bne.n	80086fa <_malloc_r+0xde>
 800865e:	6834      	ldr	r4, [r6, #0]
 8008660:	4626      	mov	r6, r4
 8008662:	2e00      	cmp	r6, #0
 8008664:	d140      	bne.n	80086e8 <_malloc_r+0xcc>
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	4631      	mov	r1, r6
 800866a:	4638      	mov	r0, r7
 800866c:	eb04 0803 	add.w	r8, r4, r3
 8008670:	f000 f9a4 	bl	80089bc <_sbrk_r>
 8008674:	4580      	cmp	r8, r0
 8008676:	d13a      	bne.n	80086ee <_malloc_r+0xd2>
 8008678:	6821      	ldr	r1, [r4, #0]
 800867a:	3503      	adds	r5, #3
 800867c:	1a6d      	subs	r5, r5, r1
 800867e:	f025 0503 	bic.w	r5, r5, #3
 8008682:	3508      	adds	r5, #8
 8008684:	2d0c      	cmp	r5, #12
 8008686:	bf38      	it	cc
 8008688:	250c      	movcc	r5, #12
 800868a:	4629      	mov	r1, r5
 800868c:	4638      	mov	r0, r7
 800868e:	f7ff ffa5 	bl	80085dc <sbrk_aligned>
 8008692:	3001      	adds	r0, #1
 8008694:	d02b      	beq.n	80086ee <_malloc_r+0xd2>
 8008696:	6823      	ldr	r3, [r4, #0]
 8008698:	442b      	add	r3, r5
 800869a:	6023      	str	r3, [r4, #0]
 800869c:	e00e      	b.n	80086bc <_malloc_r+0xa0>
 800869e:	6822      	ldr	r2, [r4, #0]
 80086a0:	1b52      	subs	r2, r2, r5
 80086a2:	d41e      	bmi.n	80086e2 <_malloc_r+0xc6>
 80086a4:	2a0b      	cmp	r2, #11
 80086a6:	d916      	bls.n	80086d6 <_malloc_r+0xba>
 80086a8:	1961      	adds	r1, r4, r5
 80086aa:	42a3      	cmp	r3, r4
 80086ac:	6025      	str	r5, [r4, #0]
 80086ae:	bf18      	it	ne
 80086b0:	6059      	strne	r1, [r3, #4]
 80086b2:	6863      	ldr	r3, [r4, #4]
 80086b4:	bf08      	it	eq
 80086b6:	6031      	streq	r1, [r6, #0]
 80086b8:	5162      	str	r2, [r4, r5]
 80086ba:	604b      	str	r3, [r1, #4]
 80086bc:	4638      	mov	r0, r7
 80086be:	f104 060b 	add.w	r6, r4, #11
 80086c2:	f000 f9ed 	bl	8008aa0 <__malloc_unlock>
 80086c6:	f026 0607 	bic.w	r6, r6, #7
 80086ca:	1d23      	adds	r3, r4, #4
 80086cc:	1af2      	subs	r2, r6, r3
 80086ce:	d0b6      	beq.n	800863e <_malloc_r+0x22>
 80086d0:	1b9b      	subs	r3, r3, r6
 80086d2:	50a3      	str	r3, [r4, r2]
 80086d4:	e7b3      	b.n	800863e <_malloc_r+0x22>
 80086d6:	6862      	ldr	r2, [r4, #4]
 80086d8:	42a3      	cmp	r3, r4
 80086da:	bf0c      	ite	eq
 80086dc:	6032      	streq	r2, [r6, #0]
 80086de:	605a      	strne	r2, [r3, #4]
 80086e0:	e7ec      	b.n	80086bc <_malloc_r+0xa0>
 80086e2:	4623      	mov	r3, r4
 80086e4:	6864      	ldr	r4, [r4, #4]
 80086e6:	e7b2      	b.n	800864e <_malloc_r+0x32>
 80086e8:	4634      	mov	r4, r6
 80086ea:	6876      	ldr	r6, [r6, #4]
 80086ec:	e7b9      	b.n	8008662 <_malloc_r+0x46>
 80086ee:	230c      	movs	r3, #12
 80086f0:	603b      	str	r3, [r7, #0]
 80086f2:	4638      	mov	r0, r7
 80086f4:	f000 f9d4 	bl	8008aa0 <__malloc_unlock>
 80086f8:	e7a1      	b.n	800863e <_malloc_r+0x22>
 80086fa:	6025      	str	r5, [r4, #0]
 80086fc:	e7de      	b.n	80086bc <_malloc_r+0xa0>
 80086fe:	bf00      	nop
 8008700:	200003e0 	.word	0x200003e0

08008704 <__ssputs_r>:
 8008704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008708:	688e      	ldr	r6, [r1, #8]
 800870a:	429e      	cmp	r6, r3
 800870c:	4682      	mov	sl, r0
 800870e:	460c      	mov	r4, r1
 8008710:	4690      	mov	r8, r2
 8008712:	461f      	mov	r7, r3
 8008714:	d838      	bhi.n	8008788 <__ssputs_r+0x84>
 8008716:	898a      	ldrh	r2, [r1, #12]
 8008718:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800871c:	d032      	beq.n	8008784 <__ssputs_r+0x80>
 800871e:	6825      	ldr	r5, [r4, #0]
 8008720:	6909      	ldr	r1, [r1, #16]
 8008722:	eba5 0901 	sub.w	r9, r5, r1
 8008726:	6965      	ldr	r5, [r4, #20]
 8008728:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800872c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008730:	3301      	adds	r3, #1
 8008732:	444b      	add	r3, r9
 8008734:	106d      	asrs	r5, r5, #1
 8008736:	429d      	cmp	r5, r3
 8008738:	bf38      	it	cc
 800873a:	461d      	movcc	r5, r3
 800873c:	0553      	lsls	r3, r2, #21
 800873e:	d531      	bpl.n	80087a4 <__ssputs_r+0xa0>
 8008740:	4629      	mov	r1, r5
 8008742:	f7ff ff6b 	bl	800861c <_malloc_r>
 8008746:	4606      	mov	r6, r0
 8008748:	b950      	cbnz	r0, 8008760 <__ssputs_r+0x5c>
 800874a:	230c      	movs	r3, #12
 800874c:	f8ca 3000 	str.w	r3, [sl]
 8008750:	89a3      	ldrh	r3, [r4, #12]
 8008752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008756:	81a3      	strh	r3, [r4, #12]
 8008758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800875c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008760:	6921      	ldr	r1, [r4, #16]
 8008762:	464a      	mov	r2, r9
 8008764:	f7ff fb46 	bl	8007df4 <memcpy>
 8008768:	89a3      	ldrh	r3, [r4, #12]
 800876a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800876e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008772:	81a3      	strh	r3, [r4, #12]
 8008774:	6126      	str	r6, [r4, #16]
 8008776:	6165      	str	r5, [r4, #20]
 8008778:	444e      	add	r6, r9
 800877a:	eba5 0509 	sub.w	r5, r5, r9
 800877e:	6026      	str	r6, [r4, #0]
 8008780:	60a5      	str	r5, [r4, #8]
 8008782:	463e      	mov	r6, r7
 8008784:	42be      	cmp	r6, r7
 8008786:	d900      	bls.n	800878a <__ssputs_r+0x86>
 8008788:	463e      	mov	r6, r7
 800878a:	6820      	ldr	r0, [r4, #0]
 800878c:	4632      	mov	r2, r6
 800878e:	4641      	mov	r1, r8
 8008790:	f000 f966 	bl	8008a60 <memmove>
 8008794:	68a3      	ldr	r3, [r4, #8]
 8008796:	1b9b      	subs	r3, r3, r6
 8008798:	60a3      	str	r3, [r4, #8]
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	4433      	add	r3, r6
 800879e:	6023      	str	r3, [r4, #0]
 80087a0:	2000      	movs	r0, #0
 80087a2:	e7db      	b.n	800875c <__ssputs_r+0x58>
 80087a4:	462a      	mov	r2, r5
 80087a6:	f000 f981 	bl	8008aac <_realloc_r>
 80087aa:	4606      	mov	r6, r0
 80087ac:	2800      	cmp	r0, #0
 80087ae:	d1e1      	bne.n	8008774 <__ssputs_r+0x70>
 80087b0:	6921      	ldr	r1, [r4, #16]
 80087b2:	4650      	mov	r0, sl
 80087b4:	f7ff fec6 	bl	8008544 <_free_r>
 80087b8:	e7c7      	b.n	800874a <__ssputs_r+0x46>
	...

080087bc <_svfiprintf_r>:
 80087bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c0:	4698      	mov	r8, r3
 80087c2:	898b      	ldrh	r3, [r1, #12]
 80087c4:	061b      	lsls	r3, r3, #24
 80087c6:	b09d      	sub	sp, #116	; 0x74
 80087c8:	4607      	mov	r7, r0
 80087ca:	460d      	mov	r5, r1
 80087cc:	4614      	mov	r4, r2
 80087ce:	d50e      	bpl.n	80087ee <_svfiprintf_r+0x32>
 80087d0:	690b      	ldr	r3, [r1, #16]
 80087d2:	b963      	cbnz	r3, 80087ee <_svfiprintf_r+0x32>
 80087d4:	2140      	movs	r1, #64	; 0x40
 80087d6:	f7ff ff21 	bl	800861c <_malloc_r>
 80087da:	6028      	str	r0, [r5, #0]
 80087dc:	6128      	str	r0, [r5, #16]
 80087de:	b920      	cbnz	r0, 80087ea <_svfiprintf_r+0x2e>
 80087e0:	230c      	movs	r3, #12
 80087e2:	603b      	str	r3, [r7, #0]
 80087e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087e8:	e0d1      	b.n	800898e <_svfiprintf_r+0x1d2>
 80087ea:	2340      	movs	r3, #64	; 0x40
 80087ec:	616b      	str	r3, [r5, #20]
 80087ee:	2300      	movs	r3, #0
 80087f0:	9309      	str	r3, [sp, #36]	; 0x24
 80087f2:	2320      	movs	r3, #32
 80087f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80087fc:	2330      	movs	r3, #48	; 0x30
 80087fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80089a8 <_svfiprintf_r+0x1ec>
 8008802:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008806:	f04f 0901 	mov.w	r9, #1
 800880a:	4623      	mov	r3, r4
 800880c:	469a      	mov	sl, r3
 800880e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008812:	b10a      	cbz	r2, 8008818 <_svfiprintf_r+0x5c>
 8008814:	2a25      	cmp	r2, #37	; 0x25
 8008816:	d1f9      	bne.n	800880c <_svfiprintf_r+0x50>
 8008818:	ebba 0b04 	subs.w	fp, sl, r4
 800881c:	d00b      	beq.n	8008836 <_svfiprintf_r+0x7a>
 800881e:	465b      	mov	r3, fp
 8008820:	4622      	mov	r2, r4
 8008822:	4629      	mov	r1, r5
 8008824:	4638      	mov	r0, r7
 8008826:	f7ff ff6d 	bl	8008704 <__ssputs_r>
 800882a:	3001      	adds	r0, #1
 800882c:	f000 80aa 	beq.w	8008984 <_svfiprintf_r+0x1c8>
 8008830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008832:	445a      	add	r2, fp
 8008834:	9209      	str	r2, [sp, #36]	; 0x24
 8008836:	f89a 3000 	ldrb.w	r3, [sl]
 800883a:	2b00      	cmp	r3, #0
 800883c:	f000 80a2 	beq.w	8008984 <_svfiprintf_r+0x1c8>
 8008840:	2300      	movs	r3, #0
 8008842:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800884a:	f10a 0a01 	add.w	sl, sl, #1
 800884e:	9304      	str	r3, [sp, #16]
 8008850:	9307      	str	r3, [sp, #28]
 8008852:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008856:	931a      	str	r3, [sp, #104]	; 0x68
 8008858:	4654      	mov	r4, sl
 800885a:	2205      	movs	r2, #5
 800885c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008860:	4851      	ldr	r0, [pc, #324]	; (80089a8 <_svfiprintf_r+0x1ec>)
 8008862:	f7f7 fce5 	bl	8000230 <memchr>
 8008866:	9a04      	ldr	r2, [sp, #16]
 8008868:	b9d8      	cbnz	r0, 80088a2 <_svfiprintf_r+0xe6>
 800886a:	06d0      	lsls	r0, r2, #27
 800886c:	bf44      	itt	mi
 800886e:	2320      	movmi	r3, #32
 8008870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008874:	0711      	lsls	r1, r2, #28
 8008876:	bf44      	itt	mi
 8008878:	232b      	movmi	r3, #43	; 0x2b
 800887a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800887e:	f89a 3000 	ldrb.w	r3, [sl]
 8008882:	2b2a      	cmp	r3, #42	; 0x2a
 8008884:	d015      	beq.n	80088b2 <_svfiprintf_r+0xf6>
 8008886:	9a07      	ldr	r2, [sp, #28]
 8008888:	4654      	mov	r4, sl
 800888a:	2000      	movs	r0, #0
 800888c:	f04f 0c0a 	mov.w	ip, #10
 8008890:	4621      	mov	r1, r4
 8008892:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008896:	3b30      	subs	r3, #48	; 0x30
 8008898:	2b09      	cmp	r3, #9
 800889a:	d94e      	bls.n	800893a <_svfiprintf_r+0x17e>
 800889c:	b1b0      	cbz	r0, 80088cc <_svfiprintf_r+0x110>
 800889e:	9207      	str	r2, [sp, #28]
 80088a0:	e014      	b.n	80088cc <_svfiprintf_r+0x110>
 80088a2:	eba0 0308 	sub.w	r3, r0, r8
 80088a6:	fa09 f303 	lsl.w	r3, r9, r3
 80088aa:	4313      	orrs	r3, r2
 80088ac:	9304      	str	r3, [sp, #16]
 80088ae:	46a2      	mov	sl, r4
 80088b0:	e7d2      	b.n	8008858 <_svfiprintf_r+0x9c>
 80088b2:	9b03      	ldr	r3, [sp, #12]
 80088b4:	1d19      	adds	r1, r3, #4
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	9103      	str	r1, [sp, #12]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	bfbb      	ittet	lt
 80088be:	425b      	neglt	r3, r3
 80088c0:	f042 0202 	orrlt.w	r2, r2, #2
 80088c4:	9307      	strge	r3, [sp, #28]
 80088c6:	9307      	strlt	r3, [sp, #28]
 80088c8:	bfb8      	it	lt
 80088ca:	9204      	strlt	r2, [sp, #16]
 80088cc:	7823      	ldrb	r3, [r4, #0]
 80088ce:	2b2e      	cmp	r3, #46	; 0x2e
 80088d0:	d10c      	bne.n	80088ec <_svfiprintf_r+0x130>
 80088d2:	7863      	ldrb	r3, [r4, #1]
 80088d4:	2b2a      	cmp	r3, #42	; 0x2a
 80088d6:	d135      	bne.n	8008944 <_svfiprintf_r+0x188>
 80088d8:	9b03      	ldr	r3, [sp, #12]
 80088da:	1d1a      	adds	r2, r3, #4
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	9203      	str	r2, [sp, #12]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	bfb8      	it	lt
 80088e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80088e8:	3402      	adds	r4, #2
 80088ea:	9305      	str	r3, [sp, #20]
 80088ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80089b8 <_svfiprintf_r+0x1fc>
 80088f0:	7821      	ldrb	r1, [r4, #0]
 80088f2:	2203      	movs	r2, #3
 80088f4:	4650      	mov	r0, sl
 80088f6:	f7f7 fc9b 	bl	8000230 <memchr>
 80088fa:	b140      	cbz	r0, 800890e <_svfiprintf_r+0x152>
 80088fc:	2340      	movs	r3, #64	; 0x40
 80088fe:	eba0 000a 	sub.w	r0, r0, sl
 8008902:	fa03 f000 	lsl.w	r0, r3, r0
 8008906:	9b04      	ldr	r3, [sp, #16]
 8008908:	4303      	orrs	r3, r0
 800890a:	3401      	adds	r4, #1
 800890c:	9304      	str	r3, [sp, #16]
 800890e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008912:	4826      	ldr	r0, [pc, #152]	; (80089ac <_svfiprintf_r+0x1f0>)
 8008914:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008918:	2206      	movs	r2, #6
 800891a:	f7f7 fc89 	bl	8000230 <memchr>
 800891e:	2800      	cmp	r0, #0
 8008920:	d038      	beq.n	8008994 <_svfiprintf_r+0x1d8>
 8008922:	4b23      	ldr	r3, [pc, #140]	; (80089b0 <_svfiprintf_r+0x1f4>)
 8008924:	bb1b      	cbnz	r3, 800896e <_svfiprintf_r+0x1b2>
 8008926:	9b03      	ldr	r3, [sp, #12]
 8008928:	3307      	adds	r3, #7
 800892a:	f023 0307 	bic.w	r3, r3, #7
 800892e:	3308      	adds	r3, #8
 8008930:	9303      	str	r3, [sp, #12]
 8008932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008934:	4433      	add	r3, r6
 8008936:	9309      	str	r3, [sp, #36]	; 0x24
 8008938:	e767      	b.n	800880a <_svfiprintf_r+0x4e>
 800893a:	fb0c 3202 	mla	r2, ip, r2, r3
 800893e:	460c      	mov	r4, r1
 8008940:	2001      	movs	r0, #1
 8008942:	e7a5      	b.n	8008890 <_svfiprintf_r+0xd4>
 8008944:	2300      	movs	r3, #0
 8008946:	3401      	adds	r4, #1
 8008948:	9305      	str	r3, [sp, #20]
 800894a:	4619      	mov	r1, r3
 800894c:	f04f 0c0a 	mov.w	ip, #10
 8008950:	4620      	mov	r0, r4
 8008952:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008956:	3a30      	subs	r2, #48	; 0x30
 8008958:	2a09      	cmp	r2, #9
 800895a:	d903      	bls.n	8008964 <_svfiprintf_r+0x1a8>
 800895c:	2b00      	cmp	r3, #0
 800895e:	d0c5      	beq.n	80088ec <_svfiprintf_r+0x130>
 8008960:	9105      	str	r1, [sp, #20]
 8008962:	e7c3      	b.n	80088ec <_svfiprintf_r+0x130>
 8008964:	fb0c 2101 	mla	r1, ip, r1, r2
 8008968:	4604      	mov	r4, r0
 800896a:	2301      	movs	r3, #1
 800896c:	e7f0      	b.n	8008950 <_svfiprintf_r+0x194>
 800896e:	ab03      	add	r3, sp, #12
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	462a      	mov	r2, r5
 8008974:	4b0f      	ldr	r3, [pc, #60]	; (80089b4 <_svfiprintf_r+0x1f8>)
 8008976:	a904      	add	r1, sp, #16
 8008978:	4638      	mov	r0, r7
 800897a:	f7fd ffb5 	bl	80068e8 <_printf_float>
 800897e:	1c42      	adds	r2, r0, #1
 8008980:	4606      	mov	r6, r0
 8008982:	d1d6      	bne.n	8008932 <_svfiprintf_r+0x176>
 8008984:	89ab      	ldrh	r3, [r5, #12]
 8008986:	065b      	lsls	r3, r3, #25
 8008988:	f53f af2c 	bmi.w	80087e4 <_svfiprintf_r+0x28>
 800898c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800898e:	b01d      	add	sp, #116	; 0x74
 8008990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008994:	ab03      	add	r3, sp, #12
 8008996:	9300      	str	r3, [sp, #0]
 8008998:	462a      	mov	r2, r5
 800899a:	4b06      	ldr	r3, [pc, #24]	; (80089b4 <_svfiprintf_r+0x1f8>)
 800899c:	a904      	add	r1, sp, #16
 800899e:	4638      	mov	r0, r7
 80089a0:	f7fe fa46 	bl	8006e30 <_printf_i>
 80089a4:	e7eb      	b.n	800897e <_svfiprintf_r+0x1c2>
 80089a6:	bf00      	nop
 80089a8:	0800983c 	.word	0x0800983c
 80089ac:	08009846 	.word	0x08009846
 80089b0:	080068e9 	.word	0x080068e9
 80089b4:	08008705 	.word	0x08008705
 80089b8:	08009842 	.word	0x08009842

080089bc <_sbrk_r>:
 80089bc:	b538      	push	{r3, r4, r5, lr}
 80089be:	4d06      	ldr	r5, [pc, #24]	; (80089d8 <_sbrk_r+0x1c>)
 80089c0:	2300      	movs	r3, #0
 80089c2:	4604      	mov	r4, r0
 80089c4:	4608      	mov	r0, r1
 80089c6:	602b      	str	r3, [r5, #0]
 80089c8:	f7f9 f84a 	bl	8001a60 <_sbrk>
 80089cc:	1c43      	adds	r3, r0, #1
 80089ce:	d102      	bne.n	80089d6 <_sbrk_r+0x1a>
 80089d0:	682b      	ldr	r3, [r5, #0]
 80089d2:	b103      	cbz	r3, 80089d6 <_sbrk_r+0x1a>
 80089d4:	6023      	str	r3, [r4, #0]
 80089d6:	bd38      	pop	{r3, r4, r5, pc}
 80089d8:	200003e8 	.word	0x200003e8

080089dc <__assert_func>:
 80089dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089de:	4614      	mov	r4, r2
 80089e0:	461a      	mov	r2, r3
 80089e2:	4b09      	ldr	r3, [pc, #36]	; (8008a08 <__assert_func+0x2c>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4605      	mov	r5, r0
 80089e8:	68d8      	ldr	r0, [r3, #12]
 80089ea:	b14c      	cbz	r4, 8008a00 <__assert_func+0x24>
 80089ec:	4b07      	ldr	r3, [pc, #28]	; (8008a0c <__assert_func+0x30>)
 80089ee:	9100      	str	r1, [sp, #0]
 80089f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089f4:	4906      	ldr	r1, [pc, #24]	; (8008a10 <__assert_func+0x34>)
 80089f6:	462b      	mov	r3, r5
 80089f8:	f000 f80e 	bl	8008a18 <fiprintf>
 80089fc:	f000 faac 	bl	8008f58 <abort>
 8008a00:	4b04      	ldr	r3, [pc, #16]	; (8008a14 <__assert_func+0x38>)
 8008a02:	461c      	mov	r4, r3
 8008a04:	e7f3      	b.n	80089ee <__assert_func+0x12>
 8008a06:	bf00      	nop
 8008a08:	2000000c 	.word	0x2000000c
 8008a0c:	0800984d 	.word	0x0800984d
 8008a10:	0800985a 	.word	0x0800985a
 8008a14:	08009888 	.word	0x08009888

08008a18 <fiprintf>:
 8008a18:	b40e      	push	{r1, r2, r3}
 8008a1a:	b503      	push	{r0, r1, lr}
 8008a1c:	4601      	mov	r1, r0
 8008a1e:	ab03      	add	r3, sp, #12
 8008a20:	4805      	ldr	r0, [pc, #20]	; (8008a38 <fiprintf+0x20>)
 8008a22:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a26:	6800      	ldr	r0, [r0, #0]
 8008a28:	9301      	str	r3, [sp, #4]
 8008a2a:	f000 f897 	bl	8008b5c <_vfiprintf_r>
 8008a2e:	b002      	add	sp, #8
 8008a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a34:	b003      	add	sp, #12
 8008a36:	4770      	bx	lr
 8008a38:	2000000c 	.word	0x2000000c

08008a3c <__ascii_mbtowc>:
 8008a3c:	b082      	sub	sp, #8
 8008a3e:	b901      	cbnz	r1, 8008a42 <__ascii_mbtowc+0x6>
 8008a40:	a901      	add	r1, sp, #4
 8008a42:	b142      	cbz	r2, 8008a56 <__ascii_mbtowc+0x1a>
 8008a44:	b14b      	cbz	r3, 8008a5a <__ascii_mbtowc+0x1e>
 8008a46:	7813      	ldrb	r3, [r2, #0]
 8008a48:	600b      	str	r3, [r1, #0]
 8008a4a:	7812      	ldrb	r2, [r2, #0]
 8008a4c:	1e10      	subs	r0, r2, #0
 8008a4e:	bf18      	it	ne
 8008a50:	2001      	movne	r0, #1
 8008a52:	b002      	add	sp, #8
 8008a54:	4770      	bx	lr
 8008a56:	4610      	mov	r0, r2
 8008a58:	e7fb      	b.n	8008a52 <__ascii_mbtowc+0x16>
 8008a5a:	f06f 0001 	mvn.w	r0, #1
 8008a5e:	e7f8      	b.n	8008a52 <__ascii_mbtowc+0x16>

08008a60 <memmove>:
 8008a60:	4288      	cmp	r0, r1
 8008a62:	b510      	push	{r4, lr}
 8008a64:	eb01 0402 	add.w	r4, r1, r2
 8008a68:	d902      	bls.n	8008a70 <memmove+0x10>
 8008a6a:	4284      	cmp	r4, r0
 8008a6c:	4623      	mov	r3, r4
 8008a6e:	d807      	bhi.n	8008a80 <memmove+0x20>
 8008a70:	1e43      	subs	r3, r0, #1
 8008a72:	42a1      	cmp	r1, r4
 8008a74:	d008      	beq.n	8008a88 <memmove+0x28>
 8008a76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a7e:	e7f8      	b.n	8008a72 <memmove+0x12>
 8008a80:	4402      	add	r2, r0
 8008a82:	4601      	mov	r1, r0
 8008a84:	428a      	cmp	r2, r1
 8008a86:	d100      	bne.n	8008a8a <memmove+0x2a>
 8008a88:	bd10      	pop	{r4, pc}
 8008a8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a92:	e7f7      	b.n	8008a84 <memmove+0x24>

08008a94 <__malloc_lock>:
 8008a94:	4801      	ldr	r0, [pc, #4]	; (8008a9c <__malloc_lock+0x8>)
 8008a96:	f000 bc1f 	b.w	80092d8 <__retarget_lock_acquire_recursive>
 8008a9a:	bf00      	nop
 8008a9c:	200003ec 	.word	0x200003ec

08008aa0 <__malloc_unlock>:
 8008aa0:	4801      	ldr	r0, [pc, #4]	; (8008aa8 <__malloc_unlock+0x8>)
 8008aa2:	f000 bc1a 	b.w	80092da <__retarget_lock_release_recursive>
 8008aa6:	bf00      	nop
 8008aa8:	200003ec 	.word	0x200003ec

08008aac <_realloc_r>:
 8008aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab0:	4680      	mov	r8, r0
 8008ab2:	4614      	mov	r4, r2
 8008ab4:	460e      	mov	r6, r1
 8008ab6:	b921      	cbnz	r1, 8008ac2 <_realloc_r+0x16>
 8008ab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008abc:	4611      	mov	r1, r2
 8008abe:	f7ff bdad 	b.w	800861c <_malloc_r>
 8008ac2:	b92a      	cbnz	r2, 8008ad0 <_realloc_r+0x24>
 8008ac4:	f7ff fd3e 	bl	8008544 <_free_r>
 8008ac8:	4625      	mov	r5, r4
 8008aca:	4628      	mov	r0, r5
 8008acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ad0:	f000 fc6a 	bl	80093a8 <_malloc_usable_size_r>
 8008ad4:	4284      	cmp	r4, r0
 8008ad6:	4607      	mov	r7, r0
 8008ad8:	d802      	bhi.n	8008ae0 <_realloc_r+0x34>
 8008ada:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ade:	d812      	bhi.n	8008b06 <_realloc_r+0x5a>
 8008ae0:	4621      	mov	r1, r4
 8008ae2:	4640      	mov	r0, r8
 8008ae4:	f7ff fd9a 	bl	800861c <_malloc_r>
 8008ae8:	4605      	mov	r5, r0
 8008aea:	2800      	cmp	r0, #0
 8008aec:	d0ed      	beq.n	8008aca <_realloc_r+0x1e>
 8008aee:	42bc      	cmp	r4, r7
 8008af0:	4622      	mov	r2, r4
 8008af2:	4631      	mov	r1, r6
 8008af4:	bf28      	it	cs
 8008af6:	463a      	movcs	r2, r7
 8008af8:	f7ff f97c 	bl	8007df4 <memcpy>
 8008afc:	4631      	mov	r1, r6
 8008afe:	4640      	mov	r0, r8
 8008b00:	f7ff fd20 	bl	8008544 <_free_r>
 8008b04:	e7e1      	b.n	8008aca <_realloc_r+0x1e>
 8008b06:	4635      	mov	r5, r6
 8008b08:	e7df      	b.n	8008aca <_realloc_r+0x1e>

08008b0a <__sfputc_r>:
 8008b0a:	6893      	ldr	r3, [r2, #8]
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	b410      	push	{r4}
 8008b12:	6093      	str	r3, [r2, #8]
 8008b14:	da08      	bge.n	8008b28 <__sfputc_r+0x1e>
 8008b16:	6994      	ldr	r4, [r2, #24]
 8008b18:	42a3      	cmp	r3, r4
 8008b1a:	db01      	blt.n	8008b20 <__sfputc_r+0x16>
 8008b1c:	290a      	cmp	r1, #10
 8008b1e:	d103      	bne.n	8008b28 <__sfputc_r+0x1e>
 8008b20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b24:	f000 b94a 	b.w	8008dbc <__swbuf_r>
 8008b28:	6813      	ldr	r3, [r2, #0]
 8008b2a:	1c58      	adds	r0, r3, #1
 8008b2c:	6010      	str	r0, [r2, #0]
 8008b2e:	7019      	strb	r1, [r3, #0]
 8008b30:	4608      	mov	r0, r1
 8008b32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <__sfputs_r>:
 8008b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3a:	4606      	mov	r6, r0
 8008b3c:	460f      	mov	r7, r1
 8008b3e:	4614      	mov	r4, r2
 8008b40:	18d5      	adds	r5, r2, r3
 8008b42:	42ac      	cmp	r4, r5
 8008b44:	d101      	bne.n	8008b4a <__sfputs_r+0x12>
 8008b46:	2000      	movs	r0, #0
 8008b48:	e007      	b.n	8008b5a <__sfputs_r+0x22>
 8008b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b4e:	463a      	mov	r2, r7
 8008b50:	4630      	mov	r0, r6
 8008b52:	f7ff ffda 	bl	8008b0a <__sfputc_r>
 8008b56:	1c43      	adds	r3, r0, #1
 8008b58:	d1f3      	bne.n	8008b42 <__sfputs_r+0xa>
 8008b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b5c <_vfiprintf_r>:
 8008b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b60:	460d      	mov	r5, r1
 8008b62:	b09d      	sub	sp, #116	; 0x74
 8008b64:	4614      	mov	r4, r2
 8008b66:	4698      	mov	r8, r3
 8008b68:	4606      	mov	r6, r0
 8008b6a:	b118      	cbz	r0, 8008b74 <_vfiprintf_r+0x18>
 8008b6c:	6983      	ldr	r3, [r0, #24]
 8008b6e:	b90b      	cbnz	r3, 8008b74 <_vfiprintf_r+0x18>
 8008b70:	f000 fb14 	bl	800919c <__sinit>
 8008b74:	4b89      	ldr	r3, [pc, #548]	; (8008d9c <_vfiprintf_r+0x240>)
 8008b76:	429d      	cmp	r5, r3
 8008b78:	d11b      	bne.n	8008bb2 <_vfiprintf_r+0x56>
 8008b7a:	6875      	ldr	r5, [r6, #4]
 8008b7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b7e:	07d9      	lsls	r1, r3, #31
 8008b80:	d405      	bmi.n	8008b8e <_vfiprintf_r+0x32>
 8008b82:	89ab      	ldrh	r3, [r5, #12]
 8008b84:	059a      	lsls	r2, r3, #22
 8008b86:	d402      	bmi.n	8008b8e <_vfiprintf_r+0x32>
 8008b88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b8a:	f000 fba5 	bl	80092d8 <__retarget_lock_acquire_recursive>
 8008b8e:	89ab      	ldrh	r3, [r5, #12]
 8008b90:	071b      	lsls	r3, r3, #28
 8008b92:	d501      	bpl.n	8008b98 <_vfiprintf_r+0x3c>
 8008b94:	692b      	ldr	r3, [r5, #16]
 8008b96:	b9eb      	cbnz	r3, 8008bd4 <_vfiprintf_r+0x78>
 8008b98:	4629      	mov	r1, r5
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	f000 f96e 	bl	8008e7c <__swsetup_r>
 8008ba0:	b1c0      	cbz	r0, 8008bd4 <_vfiprintf_r+0x78>
 8008ba2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ba4:	07dc      	lsls	r4, r3, #31
 8008ba6:	d50e      	bpl.n	8008bc6 <_vfiprintf_r+0x6a>
 8008ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bac:	b01d      	add	sp, #116	; 0x74
 8008bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb2:	4b7b      	ldr	r3, [pc, #492]	; (8008da0 <_vfiprintf_r+0x244>)
 8008bb4:	429d      	cmp	r5, r3
 8008bb6:	d101      	bne.n	8008bbc <_vfiprintf_r+0x60>
 8008bb8:	68b5      	ldr	r5, [r6, #8]
 8008bba:	e7df      	b.n	8008b7c <_vfiprintf_r+0x20>
 8008bbc:	4b79      	ldr	r3, [pc, #484]	; (8008da4 <_vfiprintf_r+0x248>)
 8008bbe:	429d      	cmp	r5, r3
 8008bc0:	bf08      	it	eq
 8008bc2:	68f5      	ldreq	r5, [r6, #12]
 8008bc4:	e7da      	b.n	8008b7c <_vfiprintf_r+0x20>
 8008bc6:	89ab      	ldrh	r3, [r5, #12]
 8008bc8:	0598      	lsls	r0, r3, #22
 8008bca:	d4ed      	bmi.n	8008ba8 <_vfiprintf_r+0x4c>
 8008bcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bce:	f000 fb84 	bl	80092da <__retarget_lock_release_recursive>
 8008bd2:	e7e9      	b.n	8008ba8 <_vfiprintf_r+0x4c>
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8008bd8:	2320      	movs	r3, #32
 8008bda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bde:	f8cd 800c 	str.w	r8, [sp, #12]
 8008be2:	2330      	movs	r3, #48	; 0x30
 8008be4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008da8 <_vfiprintf_r+0x24c>
 8008be8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bec:	f04f 0901 	mov.w	r9, #1
 8008bf0:	4623      	mov	r3, r4
 8008bf2:	469a      	mov	sl, r3
 8008bf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bf8:	b10a      	cbz	r2, 8008bfe <_vfiprintf_r+0xa2>
 8008bfa:	2a25      	cmp	r2, #37	; 0x25
 8008bfc:	d1f9      	bne.n	8008bf2 <_vfiprintf_r+0x96>
 8008bfe:	ebba 0b04 	subs.w	fp, sl, r4
 8008c02:	d00b      	beq.n	8008c1c <_vfiprintf_r+0xc0>
 8008c04:	465b      	mov	r3, fp
 8008c06:	4622      	mov	r2, r4
 8008c08:	4629      	mov	r1, r5
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	f7ff ff94 	bl	8008b38 <__sfputs_r>
 8008c10:	3001      	adds	r0, #1
 8008c12:	f000 80aa 	beq.w	8008d6a <_vfiprintf_r+0x20e>
 8008c16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c18:	445a      	add	r2, fp
 8008c1a:	9209      	str	r2, [sp, #36]	; 0x24
 8008c1c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f000 80a2 	beq.w	8008d6a <_vfiprintf_r+0x20e>
 8008c26:	2300      	movs	r3, #0
 8008c28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c30:	f10a 0a01 	add.w	sl, sl, #1
 8008c34:	9304      	str	r3, [sp, #16]
 8008c36:	9307      	str	r3, [sp, #28]
 8008c38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c3c:	931a      	str	r3, [sp, #104]	; 0x68
 8008c3e:	4654      	mov	r4, sl
 8008c40:	2205      	movs	r2, #5
 8008c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c46:	4858      	ldr	r0, [pc, #352]	; (8008da8 <_vfiprintf_r+0x24c>)
 8008c48:	f7f7 faf2 	bl	8000230 <memchr>
 8008c4c:	9a04      	ldr	r2, [sp, #16]
 8008c4e:	b9d8      	cbnz	r0, 8008c88 <_vfiprintf_r+0x12c>
 8008c50:	06d1      	lsls	r1, r2, #27
 8008c52:	bf44      	itt	mi
 8008c54:	2320      	movmi	r3, #32
 8008c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c5a:	0713      	lsls	r3, r2, #28
 8008c5c:	bf44      	itt	mi
 8008c5e:	232b      	movmi	r3, #43	; 0x2b
 8008c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c64:	f89a 3000 	ldrb.w	r3, [sl]
 8008c68:	2b2a      	cmp	r3, #42	; 0x2a
 8008c6a:	d015      	beq.n	8008c98 <_vfiprintf_r+0x13c>
 8008c6c:	9a07      	ldr	r2, [sp, #28]
 8008c6e:	4654      	mov	r4, sl
 8008c70:	2000      	movs	r0, #0
 8008c72:	f04f 0c0a 	mov.w	ip, #10
 8008c76:	4621      	mov	r1, r4
 8008c78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c7c:	3b30      	subs	r3, #48	; 0x30
 8008c7e:	2b09      	cmp	r3, #9
 8008c80:	d94e      	bls.n	8008d20 <_vfiprintf_r+0x1c4>
 8008c82:	b1b0      	cbz	r0, 8008cb2 <_vfiprintf_r+0x156>
 8008c84:	9207      	str	r2, [sp, #28]
 8008c86:	e014      	b.n	8008cb2 <_vfiprintf_r+0x156>
 8008c88:	eba0 0308 	sub.w	r3, r0, r8
 8008c8c:	fa09 f303 	lsl.w	r3, r9, r3
 8008c90:	4313      	orrs	r3, r2
 8008c92:	9304      	str	r3, [sp, #16]
 8008c94:	46a2      	mov	sl, r4
 8008c96:	e7d2      	b.n	8008c3e <_vfiprintf_r+0xe2>
 8008c98:	9b03      	ldr	r3, [sp, #12]
 8008c9a:	1d19      	adds	r1, r3, #4
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	9103      	str	r1, [sp, #12]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	bfbb      	ittet	lt
 8008ca4:	425b      	neglt	r3, r3
 8008ca6:	f042 0202 	orrlt.w	r2, r2, #2
 8008caa:	9307      	strge	r3, [sp, #28]
 8008cac:	9307      	strlt	r3, [sp, #28]
 8008cae:	bfb8      	it	lt
 8008cb0:	9204      	strlt	r2, [sp, #16]
 8008cb2:	7823      	ldrb	r3, [r4, #0]
 8008cb4:	2b2e      	cmp	r3, #46	; 0x2e
 8008cb6:	d10c      	bne.n	8008cd2 <_vfiprintf_r+0x176>
 8008cb8:	7863      	ldrb	r3, [r4, #1]
 8008cba:	2b2a      	cmp	r3, #42	; 0x2a
 8008cbc:	d135      	bne.n	8008d2a <_vfiprintf_r+0x1ce>
 8008cbe:	9b03      	ldr	r3, [sp, #12]
 8008cc0:	1d1a      	adds	r2, r3, #4
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	9203      	str	r2, [sp, #12]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	bfb8      	it	lt
 8008cca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008cce:	3402      	adds	r4, #2
 8008cd0:	9305      	str	r3, [sp, #20]
 8008cd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008db8 <_vfiprintf_r+0x25c>
 8008cd6:	7821      	ldrb	r1, [r4, #0]
 8008cd8:	2203      	movs	r2, #3
 8008cda:	4650      	mov	r0, sl
 8008cdc:	f7f7 faa8 	bl	8000230 <memchr>
 8008ce0:	b140      	cbz	r0, 8008cf4 <_vfiprintf_r+0x198>
 8008ce2:	2340      	movs	r3, #64	; 0x40
 8008ce4:	eba0 000a 	sub.w	r0, r0, sl
 8008ce8:	fa03 f000 	lsl.w	r0, r3, r0
 8008cec:	9b04      	ldr	r3, [sp, #16]
 8008cee:	4303      	orrs	r3, r0
 8008cf0:	3401      	adds	r4, #1
 8008cf2:	9304      	str	r3, [sp, #16]
 8008cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cf8:	482c      	ldr	r0, [pc, #176]	; (8008dac <_vfiprintf_r+0x250>)
 8008cfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cfe:	2206      	movs	r2, #6
 8008d00:	f7f7 fa96 	bl	8000230 <memchr>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	d03f      	beq.n	8008d88 <_vfiprintf_r+0x22c>
 8008d08:	4b29      	ldr	r3, [pc, #164]	; (8008db0 <_vfiprintf_r+0x254>)
 8008d0a:	bb1b      	cbnz	r3, 8008d54 <_vfiprintf_r+0x1f8>
 8008d0c:	9b03      	ldr	r3, [sp, #12]
 8008d0e:	3307      	adds	r3, #7
 8008d10:	f023 0307 	bic.w	r3, r3, #7
 8008d14:	3308      	adds	r3, #8
 8008d16:	9303      	str	r3, [sp, #12]
 8008d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d1a:	443b      	add	r3, r7
 8008d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d1e:	e767      	b.n	8008bf0 <_vfiprintf_r+0x94>
 8008d20:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d24:	460c      	mov	r4, r1
 8008d26:	2001      	movs	r0, #1
 8008d28:	e7a5      	b.n	8008c76 <_vfiprintf_r+0x11a>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	3401      	adds	r4, #1
 8008d2e:	9305      	str	r3, [sp, #20]
 8008d30:	4619      	mov	r1, r3
 8008d32:	f04f 0c0a 	mov.w	ip, #10
 8008d36:	4620      	mov	r0, r4
 8008d38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d3c:	3a30      	subs	r2, #48	; 0x30
 8008d3e:	2a09      	cmp	r2, #9
 8008d40:	d903      	bls.n	8008d4a <_vfiprintf_r+0x1ee>
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d0c5      	beq.n	8008cd2 <_vfiprintf_r+0x176>
 8008d46:	9105      	str	r1, [sp, #20]
 8008d48:	e7c3      	b.n	8008cd2 <_vfiprintf_r+0x176>
 8008d4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d4e:	4604      	mov	r4, r0
 8008d50:	2301      	movs	r3, #1
 8008d52:	e7f0      	b.n	8008d36 <_vfiprintf_r+0x1da>
 8008d54:	ab03      	add	r3, sp, #12
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	462a      	mov	r2, r5
 8008d5a:	4b16      	ldr	r3, [pc, #88]	; (8008db4 <_vfiprintf_r+0x258>)
 8008d5c:	a904      	add	r1, sp, #16
 8008d5e:	4630      	mov	r0, r6
 8008d60:	f7fd fdc2 	bl	80068e8 <_printf_float>
 8008d64:	4607      	mov	r7, r0
 8008d66:	1c78      	adds	r0, r7, #1
 8008d68:	d1d6      	bne.n	8008d18 <_vfiprintf_r+0x1bc>
 8008d6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d6c:	07d9      	lsls	r1, r3, #31
 8008d6e:	d405      	bmi.n	8008d7c <_vfiprintf_r+0x220>
 8008d70:	89ab      	ldrh	r3, [r5, #12]
 8008d72:	059a      	lsls	r2, r3, #22
 8008d74:	d402      	bmi.n	8008d7c <_vfiprintf_r+0x220>
 8008d76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d78:	f000 faaf 	bl	80092da <__retarget_lock_release_recursive>
 8008d7c:	89ab      	ldrh	r3, [r5, #12]
 8008d7e:	065b      	lsls	r3, r3, #25
 8008d80:	f53f af12 	bmi.w	8008ba8 <_vfiprintf_r+0x4c>
 8008d84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d86:	e711      	b.n	8008bac <_vfiprintf_r+0x50>
 8008d88:	ab03      	add	r3, sp, #12
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	462a      	mov	r2, r5
 8008d8e:	4b09      	ldr	r3, [pc, #36]	; (8008db4 <_vfiprintf_r+0x258>)
 8008d90:	a904      	add	r1, sp, #16
 8008d92:	4630      	mov	r0, r6
 8008d94:	f7fe f84c 	bl	8006e30 <_printf_i>
 8008d98:	e7e4      	b.n	8008d64 <_vfiprintf_r+0x208>
 8008d9a:	bf00      	nop
 8008d9c:	080099b4 	.word	0x080099b4
 8008da0:	080099d4 	.word	0x080099d4
 8008da4:	08009994 	.word	0x08009994
 8008da8:	0800983c 	.word	0x0800983c
 8008dac:	08009846 	.word	0x08009846
 8008db0:	080068e9 	.word	0x080068e9
 8008db4:	08008b39 	.word	0x08008b39
 8008db8:	08009842 	.word	0x08009842

08008dbc <__swbuf_r>:
 8008dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dbe:	460e      	mov	r6, r1
 8008dc0:	4614      	mov	r4, r2
 8008dc2:	4605      	mov	r5, r0
 8008dc4:	b118      	cbz	r0, 8008dce <__swbuf_r+0x12>
 8008dc6:	6983      	ldr	r3, [r0, #24]
 8008dc8:	b90b      	cbnz	r3, 8008dce <__swbuf_r+0x12>
 8008dca:	f000 f9e7 	bl	800919c <__sinit>
 8008dce:	4b21      	ldr	r3, [pc, #132]	; (8008e54 <__swbuf_r+0x98>)
 8008dd0:	429c      	cmp	r4, r3
 8008dd2:	d12b      	bne.n	8008e2c <__swbuf_r+0x70>
 8008dd4:	686c      	ldr	r4, [r5, #4]
 8008dd6:	69a3      	ldr	r3, [r4, #24]
 8008dd8:	60a3      	str	r3, [r4, #8]
 8008dda:	89a3      	ldrh	r3, [r4, #12]
 8008ddc:	071a      	lsls	r2, r3, #28
 8008dde:	d52f      	bpl.n	8008e40 <__swbuf_r+0x84>
 8008de0:	6923      	ldr	r3, [r4, #16]
 8008de2:	b36b      	cbz	r3, 8008e40 <__swbuf_r+0x84>
 8008de4:	6923      	ldr	r3, [r4, #16]
 8008de6:	6820      	ldr	r0, [r4, #0]
 8008de8:	1ac0      	subs	r0, r0, r3
 8008dea:	6963      	ldr	r3, [r4, #20]
 8008dec:	b2f6      	uxtb	r6, r6
 8008dee:	4283      	cmp	r3, r0
 8008df0:	4637      	mov	r7, r6
 8008df2:	dc04      	bgt.n	8008dfe <__swbuf_r+0x42>
 8008df4:	4621      	mov	r1, r4
 8008df6:	4628      	mov	r0, r5
 8008df8:	f000 f93c 	bl	8009074 <_fflush_r>
 8008dfc:	bb30      	cbnz	r0, 8008e4c <__swbuf_r+0x90>
 8008dfe:	68a3      	ldr	r3, [r4, #8]
 8008e00:	3b01      	subs	r3, #1
 8008e02:	60a3      	str	r3, [r4, #8]
 8008e04:	6823      	ldr	r3, [r4, #0]
 8008e06:	1c5a      	adds	r2, r3, #1
 8008e08:	6022      	str	r2, [r4, #0]
 8008e0a:	701e      	strb	r6, [r3, #0]
 8008e0c:	6963      	ldr	r3, [r4, #20]
 8008e0e:	3001      	adds	r0, #1
 8008e10:	4283      	cmp	r3, r0
 8008e12:	d004      	beq.n	8008e1e <__swbuf_r+0x62>
 8008e14:	89a3      	ldrh	r3, [r4, #12]
 8008e16:	07db      	lsls	r3, r3, #31
 8008e18:	d506      	bpl.n	8008e28 <__swbuf_r+0x6c>
 8008e1a:	2e0a      	cmp	r6, #10
 8008e1c:	d104      	bne.n	8008e28 <__swbuf_r+0x6c>
 8008e1e:	4621      	mov	r1, r4
 8008e20:	4628      	mov	r0, r5
 8008e22:	f000 f927 	bl	8009074 <_fflush_r>
 8008e26:	b988      	cbnz	r0, 8008e4c <__swbuf_r+0x90>
 8008e28:	4638      	mov	r0, r7
 8008e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e2c:	4b0a      	ldr	r3, [pc, #40]	; (8008e58 <__swbuf_r+0x9c>)
 8008e2e:	429c      	cmp	r4, r3
 8008e30:	d101      	bne.n	8008e36 <__swbuf_r+0x7a>
 8008e32:	68ac      	ldr	r4, [r5, #8]
 8008e34:	e7cf      	b.n	8008dd6 <__swbuf_r+0x1a>
 8008e36:	4b09      	ldr	r3, [pc, #36]	; (8008e5c <__swbuf_r+0xa0>)
 8008e38:	429c      	cmp	r4, r3
 8008e3a:	bf08      	it	eq
 8008e3c:	68ec      	ldreq	r4, [r5, #12]
 8008e3e:	e7ca      	b.n	8008dd6 <__swbuf_r+0x1a>
 8008e40:	4621      	mov	r1, r4
 8008e42:	4628      	mov	r0, r5
 8008e44:	f000 f81a 	bl	8008e7c <__swsetup_r>
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	d0cb      	beq.n	8008de4 <__swbuf_r+0x28>
 8008e4c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008e50:	e7ea      	b.n	8008e28 <__swbuf_r+0x6c>
 8008e52:	bf00      	nop
 8008e54:	080099b4 	.word	0x080099b4
 8008e58:	080099d4 	.word	0x080099d4
 8008e5c:	08009994 	.word	0x08009994

08008e60 <__ascii_wctomb>:
 8008e60:	b149      	cbz	r1, 8008e76 <__ascii_wctomb+0x16>
 8008e62:	2aff      	cmp	r2, #255	; 0xff
 8008e64:	bf85      	ittet	hi
 8008e66:	238a      	movhi	r3, #138	; 0x8a
 8008e68:	6003      	strhi	r3, [r0, #0]
 8008e6a:	700a      	strbls	r2, [r1, #0]
 8008e6c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008e70:	bf98      	it	ls
 8008e72:	2001      	movls	r0, #1
 8008e74:	4770      	bx	lr
 8008e76:	4608      	mov	r0, r1
 8008e78:	4770      	bx	lr
	...

08008e7c <__swsetup_r>:
 8008e7c:	4b32      	ldr	r3, [pc, #200]	; (8008f48 <__swsetup_r+0xcc>)
 8008e7e:	b570      	push	{r4, r5, r6, lr}
 8008e80:	681d      	ldr	r5, [r3, #0]
 8008e82:	4606      	mov	r6, r0
 8008e84:	460c      	mov	r4, r1
 8008e86:	b125      	cbz	r5, 8008e92 <__swsetup_r+0x16>
 8008e88:	69ab      	ldr	r3, [r5, #24]
 8008e8a:	b913      	cbnz	r3, 8008e92 <__swsetup_r+0x16>
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	f000 f985 	bl	800919c <__sinit>
 8008e92:	4b2e      	ldr	r3, [pc, #184]	; (8008f4c <__swsetup_r+0xd0>)
 8008e94:	429c      	cmp	r4, r3
 8008e96:	d10f      	bne.n	8008eb8 <__swsetup_r+0x3c>
 8008e98:	686c      	ldr	r4, [r5, #4]
 8008e9a:	89a3      	ldrh	r3, [r4, #12]
 8008e9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ea0:	0719      	lsls	r1, r3, #28
 8008ea2:	d42c      	bmi.n	8008efe <__swsetup_r+0x82>
 8008ea4:	06dd      	lsls	r5, r3, #27
 8008ea6:	d411      	bmi.n	8008ecc <__swsetup_r+0x50>
 8008ea8:	2309      	movs	r3, #9
 8008eaa:	6033      	str	r3, [r6, #0]
 8008eac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008eb0:	81a3      	strh	r3, [r4, #12]
 8008eb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008eb6:	e03e      	b.n	8008f36 <__swsetup_r+0xba>
 8008eb8:	4b25      	ldr	r3, [pc, #148]	; (8008f50 <__swsetup_r+0xd4>)
 8008eba:	429c      	cmp	r4, r3
 8008ebc:	d101      	bne.n	8008ec2 <__swsetup_r+0x46>
 8008ebe:	68ac      	ldr	r4, [r5, #8]
 8008ec0:	e7eb      	b.n	8008e9a <__swsetup_r+0x1e>
 8008ec2:	4b24      	ldr	r3, [pc, #144]	; (8008f54 <__swsetup_r+0xd8>)
 8008ec4:	429c      	cmp	r4, r3
 8008ec6:	bf08      	it	eq
 8008ec8:	68ec      	ldreq	r4, [r5, #12]
 8008eca:	e7e6      	b.n	8008e9a <__swsetup_r+0x1e>
 8008ecc:	0758      	lsls	r0, r3, #29
 8008ece:	d512      	bpl.n	8008ef6 <__swsetup_r+0x7a>
 8008ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ed2:	b141      	cbz	r1, 8008ee6 <__swsetup_r+0x6a>
 8008ed4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ed8:	4299      	cmp	r1, r3
 8008eda:	d002      	beq.n	8008ee2 <__swsetup_r+0x66>
 8008edc:	4630      	mov	r0, r6
 8008ede:	f7ff fb31 	bl	8008544 <_free_r>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	6363      	str	r3, [r4, #52]	; 0x34
 8008ee6:	89a3      	ldrh	r3, [r4, #12]
 8008ee8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008eec:	81a3      	strh	r3, [r4, #12]
 8008eee:	2300      	movs	r3, #0
 8008ef0:	6063      	str	r3, [r4, #4]
 8008ef2:	6923      	ldr	r3, [r4, #16]
 8008ef4:	6023      	str	r3, [r4, #0]
 8008ef6:	89a3      	ldrh	r3, [r4, #12]
 8008ef8:	f043 0308 	orr.w	r3, r3, #8
 8008efc:	81a3      	strh	r3, [r4, #12]
 8008efe:	6923      	ldr	r3, [r4, #16]
 8008f00:	b94b      	cbnz	r3, 8008f16 <__swsetup_r+0x9a>
 8008f02:	89a3      	ldrh	r3, [r4, #12]
 8008f04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f0c:	d003      	beq.n	8008f16 <__swsetup_r+0x9a>
 8008f0e:	4621      	mov	r1, r4
 8008f10:	4630      	mov	r0, r6
 8008f12:	f000 fa09 	bl	8009328 <__smakebuf_r>
 8008f16:	89a0      	ldrh	r0, [r4, #12]
 8008f18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f1c:	f010 0301 	ands.w	r3, r0, #1
 8008f20:	d00a      	beq.n	8008f38 <__swsetup_r+0xbc>
 8008f22:	2300      	movs	r3, #0
 8008f24:	60a3      	str	r3, [r4, #8]
 8008f26:	6963      	ldr	r3, [r4, #20]
 8008f28:	425b      	negs	r3, r3
 8008f2a:	61a3      	str	r3, [r4, #24]
 8008f2c:	6923      	ldr	r3, [r4, #16]
 8008f2e:	b943      	cbnz	r3, 8008f42 <__swsetup_r+0xc6>
 8008f30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f34:	d1ba      	bne.n	8008eac <__swsetup_r+0x30>
 8008f36:	bd70      	pop	{r4, r5, r6, pc}
 8008f38:	0781      	lsls	r1, r0, #30
 8008f3a:	bf58      	it	pl
 8008f3c:	6963      	ldrpl	r3, [r4, #20]
 8008f3e:	60a3      	str	r3, [r4, #8]
 8008f40:	e7f4      	b.n	8008f2c <__swsetup_r+0xb0>
 8008f42:	2000      	movs	r0, #0
 8008f44:	e7f7      	b.n	8008f36 <__swsetup_r+0xba>
 8008f46:	bf00      	nop
 8008f48:	2000000c 	.word	0x2000000c
 8008f4c:	080099b4 	.word	0x080099b4
 8008f50:	080099d4 	.word	0x080099d4
 8008f54:	08009994 	.word	0x08009994

08008f58 <abort>:
 8008f58:	b508      	push	{r3, lr}
 8008f5a:	2006      	movs	r0, #6
 8008f5c:	f000 fa54 	bl	8009408 <raise>
 8008f60:	2001      	movs	r0, #1
 8008f62:	f7f8 fd05 	bl	8001970 <_exit>
	...

08008f68 <__sflush_r>:
 8008f68:	898a      	ldrh	r2, [r1, #12]
 8008f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f6e:	4605      	mov	r5, r0
 8008f70:	0710      	lsls	r0, r2, #28
 8008f72:	460c      	mov	r4, r1
 8008f74:	d458      	bmi.n	8009028 <__sflush_r+0xc0>
 8008f76:	684b      	ldr	r3, [r1, #4]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	dc05      	bgt.n	8008f88 <__sflush_r+0x20>
 8008f7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	dc02      	bgt.n	8008f88 <__sflush_r+0x20>
 8008f82:	2000      	movs	r0, #0
 8008f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f8a:	2e00      	cmp	r6, #0
 8008f8c:	d0f9      	beq.n	8008f82 <__sflush_r+0x1a>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f94:	682f      	ldr	r7, [r5, #0]
 8008f96:	602b      	str	r3, [r5, #0]
 8008f98:	d032      	beq.n	8009000 <__sflush_r+0x98>
 8008f9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f9c:	89a3      	ldrh	r3, [r4, #12]
 8008f9e:	075a      	lsls	r2, r3, #29
 8008fa0:	d505      	bpl.n	8008fae <__sflush_r+0x46>
 8008fa2:	6863      	ldr	r3, [r4, #4]
 8008fa4:	1ac0      	subs	r0, r0, r3
 8008fa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fa8:	b10b      	cbz	r3, 8008fae <__sflush_r+0x46>
 8008faa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fac:	1ac0      	subs	r0, r0, r3
 8008fae:	2300      	movs	r3, #0
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fb4:	6a21      	ldr	r1, [r4, #32]
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	47b0      	blx	r6
 8008fba:	1c43      	adds	r3, r0, #1
 8008fbc:	89a3      	ldrh	r3, [r4, #12]
 8008fbe:	d106      	bne.n	8008fce <__sflush_r+0x66>
 8008fc0:	6829      	ldr	r1, [r5, #0]
 8008fc2:	291d      	cmp	r1, #29
 8008fc4:	d82c      	bhi.n	8009020 <__sflush_r+0xb8>
 8008fc6:	4a2a      	ldr	r2, [pc, #168]	; (8009070 <__sflush_r+0x108>)
 8008fc8:	40ca      	lsrs	r2, r1
 8008fca:	07d6      	lsls	r6, r2, #31
 8008fcc:	d528      	bpl.n	8009020 <__sflush_r+0xb8>
 8008fce:	2200      	movs	r2, #0
 8008fd0:	6062      	str	r2, [r4, #4]
 8008fd2:	04d9      	lsls	r1, r3, #19
 8008fd4:	6922      	ldr	r2, [r4, #16]
 8008fd6:	6022      	str	r2, [r4, #0]
 8008fd8:	d504      	bpl.n	8008fe4 <__sflush_r+0x7c>
 8008fda:	1c42      	adds	r2, r0, #1
 8008fdc:	d101      	bne.n	8008fe2 <__sflush_r+0x7a>
 8008fde:	682b      	ldr	r3, [r5, #0]
 8008fe0:	b903      	cbnz	r3, 8008fe4 <__sflush_r+0x7c>
 8008fe2:	6560      	str	r0, [r4, #84]	; 0x54
 8008fe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fe6:	602f      	str	r7, [r5, #0]
 8008fe8:	2900      	cmp	r1, #0
 8008fea:	d0ca      	beq.n	8008f82 <__sflush_r+0x1a>
 8008fec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ff0:	4299      	cmp	r1, r3
 8008ff2:	d002      	beq.n	8008ffa <__sflush_r+0x92>
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	f7ff faa5 	bl	8008544 <_free_r>
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	6360      	str	r0, [r4, #52]	; 0x34
 8008ffe:	e7c1      	b.n	8008f84 <__sflush_r+0x1c>
 8009000:	6a21      	ldr	r1, [r4, #32]
 8009002:	2301      	movs	r3, #1
 8009004:	4628      	mov	r0, r5
 8009006:	47b0      	blx	r6
 8009008:	1c41      	adds	r1, r0, #1
 800900a:	d1c7      	bne.n	8008f9c <__sflush_r+0x34>
 800900c:	682b      	ldr	r3, [r5, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d0c4      	beq.n	8008f9c <__sflush_r+0x34>
 8009012:	2b1d      	cmp	r3, #29
 8009014:	d001      	beq.n	800901a <__sflush_r+0xb2>
 8009016:	2b16      	cmp	r3, #22
 8009018:	d101      	bne.n	800901e <__sflush_r+0xb6>
 800901a:	602f      	str	r7, [r5, #0]
 800901c:	e7b1      	b.n	8008f82 <__sflush_r+0x1a>
 800901e:	89a3      	ldrh	r3, [r4, #12]
 8009020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009024:	81a3      	strh	r3, [r4, #12]
 8009026:	e7ad      	b.n	8008f84 <__sflush_r+0x1c>
 8009028:	690f      	ldr	r7, [r1, #16]
 800902a:	2f00      	cmp	r7, #0
 800902c:	d0a9      	beq.n	8008f82 <__sflush_r+0x1a>
 800902e:	0793      	lsls	r3, r2, #30
 8009030:	680e      	ldr	r6, [r1, #0]
 8009032:	bf08      	it	eq
 8009034:	694b      	ldreq	r3, [r1, #20]
 8009036:	600f      	str	r7, [r1, #0]
 8009038:	bf18      	it	ne
 800903a:	2300      	movne	r3, #0
 800903c:	eba6 0807 	sub.w	r8, r6, r7
 8009040:	608b      	str	r3, [r1, #8]
 8009042:	f1b8 0f00 	cmp.w	r8, #0
 8009046:	dd9c      	ble.n	8008f82 <__sflush_r+0x1a>
 8009048:	6a21      	ldr	r1, [r4, #32]
 800904a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800904c:	4643      	mov	r3, r8
 800904e:	463a      	mov	r2, r7
 8009050:	4628      	mov	r0, r5
 8009052:	47b0      	blx	r6
 8009054:	2800      	cmp	r0, #0
 8009056:	dc06      	bgt.n	8009066 <__sflush_r+0xfe>
 8009058:	89a3      	ldrh	r3, [r4, #12]
 800905a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800905e:	81a3      	strh	r3, [r4, #12]
 8009060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009064:	e78e      	b.n	8008f84 <__sflush_r+0x1c>
 8009066:	4407      	add	r7, r0
 8009068:	eba8 0800 	sub.w	r8, r8, r0
 800906c:	e7e9      	b.n	8009042 <__sflush_r+0xda>
 800906e:	bf00      	nop
 8009070:	20400001 	.word	0x20400001

08009074 <_fflush_r>:
 8009074:	b538      	push	{r3, r4, r5, lr}
 8009076:	690b      	ldr	r3, [r1, #16]
 8009078:	4605      	mov	r5, r0
 800907a:	460c      	mov	r4, r1
 800907c:	b913      	cbnz	r3, 8009084 <_fflush_r+0x10>
 800907e:	2500      	movs	r5, #0
 8009080:	4628      	mov	r0, r5
 8009082:	bd38      	pop	{r3, r4, r5, pc}
 8009084:	b118      	cbz	r0, 800908e <_fflush_r+0x1a>
 8009086:	6983      	ldr	r3, [r0, #24]
 8009088:	b90b      	cbnz	r3, 800908e <_fflush_r+0x1a>
 800908a:	f000 f887 	bl	800919c <__sinit>
 800908e:	4b14      	ldr	r3, [pc, #80]	; (80090e0 <_fflush_r+0x6c>)
 8009090:	429c      	cmp	r4, r3
 8009092:	d11b      	bne.n	80090cc <_fflush_r+0x58>
 8009094:	686c      	ldr	r4, [r5, #4]
 8009096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d0ef      	beq.n	800907e <_fflush_r+0xa>
 800909e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090a0:	07d0      	lsls	r0, r2, #31
 80090a2:	d404      	bmi.n	80090ae <_fflush_r+0x3a>
 80090a4:	0599      	lsls	r1, r3, #22
 80090a6:	d402      	bmi.n	80090ae <_fflush_r+0x3a>
 80090a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090aa:	f000 f915 	bl	80092d8 <__retarget_lock_acquire_recursive>
 80090ae:	4628      	mov	r0, r5
 80090b0:	4621      	mov	r1, r4
 80090b2:	f7ff ff59 	bl	8008f68 <__sflush_r>
 80090b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090b8:	07da      	lsls	r2, r3, #31
 80090ba:	4605      	mov	r5, r0
 80090bc:	d4e0      	bmi.n	8009080 <_fflush_r+0xc>
 80090be:	89a3      	ldrh	r3, [r4, #12]
 80090c0:	059b      	lsls	r3, r3, #22
 80090c2:	d4dd      	bmi.n	8009080 <_fflush_r+0xc>
 80090c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090c6:	f000 f908 	bl	80092da <__retarget_lock_release_recursive>
 80090ca:	e7d9      	b.n	8009080 <_fflush_r+0xc>
 80090cc:	4b05      	ldr	r3, [pc, #20]	; (80090e4 <_fflush_r+0x70>)
 80090ce:	429c      	cmp	r4, r3
 80090d0:	d101      	bne.n	80090d6 <_fflush_r+0x62>
 80090d2:	68ac      	ldr	r4, [r5, #8]
 80090d4:	e7df      	b.n	8009096 <_fflush_r+0x22>
 80090d6:	4b04      	ldr	r3, [pc, #16]	; (80090e8 <_fflush_r+0x74>)
 80090d8:	429c      	cmp	r4, r3
 80090da:	bf08      	it	eq
 80090dc:	68ec      	ldreq	r4, [r5, #12]
 80090de:	e7da      	b.n	8009096 <_fflush_r+0x22>
 80090e0:	080099b4 	.word	0x080099b4
 80090e4:	080099d4 	.word	0x080099d4
 80090e8:	08009994 	.word	0x08009994

080090ec <std>:
 80090ec:	2300      	movs	r3, #0
 80090ee:	b510      	push	{r4, lr}
 80090f0:	4604      	mov	r4, r0
 80090f2:	e9c0 3300 	strd	r3, r3, [r0]
 80090f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090fa:	6083      	str	r3, [r0, #8]
 80090fc:	8181      	strh	r1, [r0, #12]
 80090fe:	6643      	str	r3, [r0, #100]	; 0x64
 8009100:	81c2      	strh	r2, [r0, #14]
 8009102:	6183      	str	r3, [r0, #24]
 8009104:	4619      	mov	r1, r3
 8009106:	2208      	movs	r2, #8
 8009108:	305c      	adds	r0, #92	; 0x5c
 800910a:	f7fd fb45 	bl	8006798 <memset>
 800910e:	4b05      	ldr	r3, [pc, #20]	; (8009124 <std+0x38>)
 8009110:	6263      	str	r3, [r4, #36]	; 0x24
 8009112:	4b05      	ldr	r3, [pc, #20]	; (8009128 <std+0x3c>)
 8009114:	62a3      	str	r3, [r4, #40]	; 0x28
 8009116:	4b05      	ldr	r3, [pc, #20]	; (800912c <std+0x40>)
 8009118:	62e3      	str	r3, [r4, #44]	; 0x2c
 800911a:	4b05      	ldr	r3, [pc, #20]	; (8009130 <std+0x44>)
 800911c:	6224      	str	r4, [r4, #32]
 800911e:	6323      	str	r3, [r4, #48]	; 0x30
 8009120:	bd10      	pop	{r4, pc}
 8009122:	bf00      	nop
 8009124:	08009441 	.word	0x08009441
 8009128:	08009463 	.word	0x08009463
 800912c:	0800949b 	.word	0x0800949b
 8009130:	080094bf 	.word	0x080094bf

08009134 <_cleanup_r>:
 8009134:	4901      	ldr	r1, [pc, #4]	; (800913c <_cleanup_r+0x8>)
 8009136:	f000 b8af 	b.w	8009298 <_fwalk_reent>
 800913a:	bf00      	nop
 800913c:	08009075 	.word	0x08009075

08009140 <__sfmoreglue>:
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	2268      	movs	r2, #104	; 0x68
 8009144:	1e4d      	subs	r5, r1, #1
 8009146:	4355      	muls	r5, r2
 8009148:	460e      	mov	r6, r1
 800914a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800914e:	f7ff fa65 	bl	800861c <_malloc_r>
 8009152:	4604      	mov	r4, r0
 8009154:	b140      	cbz	r0, 8009168 <__sfmoreglue+0x28>
 8009156:	2100      	movs	r1, #0
 8009158:	e9c0 1600 	strd	r1, r6, [r0]
 800915c:	300c      	adds	r0, #12
 800915e:	60a0      	str	r0, [r4, #8]
 8009160:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009164:	f7fd fb18 	bl	8006798 <memset>
 8009168:	4620      	mov	r0, r4
 800916a:	bd70      	pop	{r4, r5, r6, pc}

0800916c <__sfp_lock_acquire>:
 800916c:	4801      	ldr	r0, [pc, #4]	; (8009174 <__sfp_lock_acquire+0x8>)
 800916e:	f000 b8b3 	b.w	80092d8 <__retarget_lock_acquire_recursive>
 8009172:	bf00      	nop
 8009174:	200003ed 	.word	0x200003ed

08009178 <__sfp_lock_release>:
 8009178:	4801      	ldr	r0, [pc, #4]	; (8009180 <__sfp_lock_release+0x8>)
 800917a:	f000 b8ae 	b.w	80092da <__retarget_lock_release_recursive>
 800917e:	bf00      	nop
 8009180:	200003ed 	.word	0x200003ed

08009184 <__sinit_lock_acquire>:
 8009184:	4801      	ldr	r0, [pc, #4]	; (800918c <__sinit_lock_acquire+0x8>)
 8009186:	f000 b8a7 	b.w	80092d8 <__retarget_lock_acquire_recursive>
 800918a:	bf00      	nop
 800918c:	200003ee 	.word	0x200003ee

08009190 <__sinit_lock_release>:
 8009190:	4801      	ldr	r0, [pc, #4]	; (8009198 <__sinit_lock_release+0x8>)
 8009192:	f000 b8a2 	b.w	80092da <__retarget_lock_release_recursive>
 8009196:	bf00      	nop
 8009198:	200003ee 	.word	0x200003ee

0800919c <__sinit>:
 800919c:	b510      	push	{r4, lr}
 800919e:	4604      	mov	r4, r0
 80091a0:	f7ff fff0 	bl	8009184 <__sinit_lock_acquire>
 80091a4:	69a3      	ldr	r3, [r4, #24]
 80091a6:	b11b      	cbz	r3, 80091b0 <__sinit+0x14>
 80091a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091ac:	f7ff bff0 	b.w	8009190 <__sinit_lock_release>
 80091b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091b4:	6523      	str	r3, [r4, #80]	; 0x50
 80091b6:	4b13      	ldr	r3, [pc, #76]	; (8009204 <__sinit+0x68>)
 80091b8:	4a13      	ldr	r2, [pc, #76]	; (8009208 <__sinit+0x6c>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80091be:	42a3      	cmp	r3, r4
 80091c0:	bf04      	itt	eq
 80091c2:	2301      	moveq	r3, #1
 80091c4:	61a3      	streq	r3, [r4, #24]
 80091c6:	4620      	mov	r0, r4
 80091c8:	f000 f820 	bl	800920c <__sfp>
 80091cc:	6060      	str	r0, [r4, #4]
 80091ce:	4620      	mov	r0, r4
 80091d0:	f000 f81c 	bl	800920c <__sfp>
 80091d4:	60a0      	str	r0, [r4, #8]
 80091d6:	4620      	mov	r0, r4
 80091d8:	f000 f818 	bl	800920c <__sfp>
 80091dc:	2200      	movs	r2, #0
 80091de:	60e0      	str	r0, [r4, #12]
 80091e0:	2104      	movs	r1, #4
 80091e2:	6860      	ldr	r0, [r4, #4]
 80091e4:	f7ff ff82 	bl	80090ec <std>
 80091e8:	68a0      	ldr	r0, [r4, #8]
 80091ea:	2201      	movs	r2, #1
 80091ec:	2109      	movs	r1, #9
 80091ee:	f7ff ff7d 	bl	80090ec <std>
 80091f2:	68e0      	ldr	r0, [r4, #12]
 80091f4:	2202      	movs	r2, #2
 80091f6:	2112      	movs	r1, #18
 80091f8:	f7ff ff78 	bl	80090ec <std>
 80091fc:	2301      	movs	r3, #1
 80091fe:	61a3      	str	r3, [r4, #24]
 8009200:	e7d2      	b.n	80091a8 <__sinit+0xc>
 8009202:	bf00      	nop
 8009204:	08009618 	.word	0x08009618
 8009208:	08009135 	.word	0x08009135

0800920c <__sfp>:
 800920c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920e:	4607      	mov	r7, r0
 8009210:	f7ff ffac 	bl	800916c <__sfp_lock_acquire>
 8009214:	4b1e      	ldr	r3, [pc, #120]	; (8009290 <__sfp+0x84>)
 8009216:	681e      	ldr	r6, [r3, #0]
 8009218:	69b3      	ldr	r3, [r6, #24]
 800921a:	b913      	cbnz	r3, 8009222 <__sfp+0x16>
 800921c:	4630      	mov	r0, r6
 800921e:	f7ff ffbd 	bl	800919c <__sinit>
 8009222:	3648      	adds	r6, #72	; 0x48
 8009224:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009228:	3b01      	subs	r3, #1
 800922a:	d503      	bpl.n	8009234 <__sfp+0x28>
 800922c:	6833      	ldr	r3, [r6, #0]
 800922e:	b30b      	cbz	r3, 8009274 <__sfp+0x68>
 8009230:	6836      	ldr	r6, [r6, #0]
 8009232:	e7f7      	b.n	8009224 <__sfp+0x18>
 8009234:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009238:	b9d5      	cbnz	r5, 8009270 <__sfp+0x64>
 800923a:	4b16      	ldr	r3, [pc, #88]	; (8009294 <__sfp+0x88>)
 800923c:	60e3      	str	r3, [r4, #12]
 800923e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009242:	6665      	str	r5, [r4, #100]	; 0x64
 8009244:	f000 f847 	bl	80092d6 <__retarget_lock_init_recursive>
 8009248:	f7ff ff96 	bl	8009178 <__sfp_lock_release>
 800924c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009250:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009254:	6025      	str	r5, [r4, #0]
 8009256:	61a5      	str	r5, [r4, #24]
 8009258:	2208      	movs	r2, #8
 800925a:	4629      	mov	r1, r5
 800925c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009260:	f7fd fa9a 	bl	8006798 <memset>
 8009264:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009268:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800926c:	4620      	mov	r0, r4
 800926e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009270:	3468      	adds	r4, #104	; 0x68
 8009272:	e7d9      	b.n	8009228 <__sfp+0x1c>
 8009274:	2104      	movs	r1, #4
 8009276:	4638      	mov	r0, r7
 8009278:	f7ff ff62 	bl	8009140 <__sfmoreglue>
 800927c:	4604      	mov	r4, r0
 800927e:	6030      	str	r0, [r6, #0]
 8009280:	2800      	cmp	r0, #0
 8009282:	d1d5      	bne.n	8009230 <__sfp+0x24>
 8009284:	f7ff ff78 	bl	8009178 <__sfp_lock_release>
 8009288:	230c      	movs	r3, #12
 800928a:	603b      	str	r3, [r7, #0]
 800928c:	e7ee      	b.n	800926c <__sfp+0x60>
 800928e:	bf00      	nop
 8009290:	08009618 	.word	0x08009618
 8009294:	ffff0001 	.word	0xffff0001

08009298 <_fwalk_reent>:
 8009298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800929c:	4606      	mov	r6, r0
 800929e:	4688      	mov	r8, r1
 80092a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092a4:	2700      	movs	r7, #0
 80092a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092aa:	f1b9 0901 	subs.w	r9, r9, #1
 80092ae:	d505      	bpl.n	80092bc <_fwalk_reent+0x24>
 80092b0:	6824      	ldr	r4, [r4, #0]
 80092b2:	2c00      	cmp	r4, #0
 80092b4:	d1f7      	bne.n	80092a6 <_fwalk_reent+0xe>
 80092b6:	4638      	mov	r0, r7
 80092b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092bc:	89ab      	ldrh	r3, [r5, #12]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d907      	bls.n	80092d2 <_fwalk_reent+0x3a>
 80092c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092c6:	3301      	adds	r3, #1
 80092c8:	d003      	beq.n	80092d2 <_fwalk_reent+0x3a>
 80092ca:	4629      	mov	r1, r5
 80092cc:	4630      	mov	r0, r6
 80092ce:	47c0      	blx	r8
 80092d0:	4307      	orrs	r7, r0
 80092d2:	3568      	adds	r5, #104	; 0x68
 80092d4:	e7e9      	b.n	80092aa <_fwalk_reent+0x12>

080092d6 <__retarget_lock_init_recursive>:
 80092d6:	4770      	bx	lr

080092d8 <__retarget_lock_acquire_recursive>:
 80092d8:	4770      	bx	lr

080092da <__retarget_lock_release_recursive>:
 80092da:	4770      	bx	lr

080092dc <__swhatbuf_r>:
 80092dc:	b570      	push	{r4, r5, r6, lr}
 80092de:	460e      	mov	r6, r1
 80092e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092e4:	2900      	cmp	r1, #0
 80092e6:	b096      	sub	sp, #88	; 0x58
 80092e8:	4614      	mov	r4, r2
 80092ea:	461d      	mov	r5, r3
 80092ec:	da08      	bge.n	8009300 <__swhatbuf_r+0x24>
 80092ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80092f2:	2200      	movs	r2, #0
 80092f4:	602a      	str	r2, [r5, #0]
 80092f6:	061a      	lsls	r2, r3, #24
 80092f8:	d410      	bmi.n	800931c <__swhatbuf_r+0x40>
 80092fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092fe:	e00e      	b.n	800931e <__swhatbuf_r+0x42>
 8009300:	466a      	mov	r2, sp
 8009302:	f000 f903 	bl	800950c <_fstat_r>
 8009306:	2800      	cmp	r0, #0
 8009308:	dbf1      	blt.n	80092ee <__swhatbuf_r+0x12>
 800930a:	9a01      	ldr	r2, [sp, #4]
 800930c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009310:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009314:	425a      	negs	r2, r3
 8009316:	415a      	adcs	r2, r3
 8009318:	602a      	str	r2, [r5, #0]
 800931a:	e7ee      	b.n	80092fa <__swhatbuf_r+0x1e>
 800931c:	2340      	movs	r3, #64	; 0x40
 800931e:	2000      	movs	r0, #0
 8009320:	6023      	str	r3, [r4, #0]
 8009322:	b016      	add	sp, #88	; 0x58
 8009324:	bd70      	pop	{r4, r5, r6, pc}
	...

08009328 <__smakebuf_r>:
 8009328:	898b      	ldrh	r3, [r1, #12]
 800932a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800932c:	079d      	lsls	r5, r3, #30
 800932e:	4606      	mov	r6, r0
 8009330:	460c      	mov	r4, r1
 8009332:	d507      	bpl.n	8009344 <__smakebuf_r+0x1c>
 8009334:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009338:	6023      	str	r3, [r4, #0]
 800933a:	6123      	str	r3, [r4, #16]
 800933c:	2301      	movs	r3, #1
 800933e:	6163      	str	r3, [r4, #20]
 8009340:	b002      	add	sp, #8
 8009342:	bd70      	pop	{r4, r5, r6, pc}
 8009344:	ab01      	add	r3, sp, #4
 8009346:	466a      	mov	r2, sp
 8009348:	f7ff ffc8 	bl	80092dc <__swhatbuf_r>
 800934c:	9900      	ldr	r1, [sp, #0]
 800934e:	4605      	mov	r5, r0
 8009350:	4630      	mov	r0, r6
 8009352:	f7ff f963 	bl	800861c <_malloc_r>
 8009356:	b948      	cbnz	r0, 800936c <__smakebuf_r+0x44>
 8009358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800935c:	059a      	lsls	r2, r3, #22
 800935e:	d4ef      	bmi.n	8009340 <__smakebuf_r+0x18>
 8009360:	f023 0303 	bic.w	r3, r3, #3
 8009364:	f043 0302 	orr.w	r3, r3, #2
 8009368:	81a3      	strh	r3, [r4, #12]
 800936a:	e7e3      	b.n	8009334 <__smakebuf_r+0xc>
 800936c:	4b0d      	ldr	r3, [pc, #52]	; (80093a4 <__smakebuf_r+0x7c>)
 800936e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009370:	89a3      	ldrh	r3, [r4, #12]
 8009372:	6020      	str	r0, [r4, #0]
 8009374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009378:	81a3      	strh	r3, [r4, #12]
 800937a:	9b00      	ldr	r3, [sp, #0]
 800937c:	6163      	str	r3, [r4, #20]
 800937e:	9b01      	ldr	r3, [sp, #4]
 8009380:	6120      	str	r0, [r4, #16]
 8009382:	b15b      	cbz	r3, 800939c <__smakebuf_r+0x74>
 8009384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009388:	4630      	mov	r0, r6
 800938a:	f000 f8d1 	bl	8009530 <_isatty_r>
 800938e:	b128      	cbz	r0, 800939c <__smakebuf_r+0x74>
 8009390:	89a3      	ldrh	r3, [r4, #12]
 8009392:	f023 0303 	bic.w	r3, r3, #3
 8009396:	f043 0301 	orr.w	r3, r3, #1
 800939a:	81a3      	strh	r3, [r4, #12]
 800939c:	89a0      	ldrh	r0, [r4, #12]
 800939e:	4305      	orrs	r5, r0
 80093a0:	81a5      	strh	r5, [r4, #12]
 80093a2:	e7cd      	b.n	8009340 <__smakebuf_r+0x18>
 80093a4:	08009135 	.word	0x08009135

080093a8 <_malloc_usable_size_r>:
 80093a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093ac:	1f18      	subs	r0, r3, #4
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	bfbc      	itt	lt
 80093b2:	580b      	ldrlt	r3, [r1, r0]
 80093b4:	18c0      	addlt	r0, r0, r3
 80093b6:	4770      	bx	lr

080093b8 <_raise_r>:
 80093b8:	291f      	cmp	r1, #31
 80093ba:	b538      	push	{r3, r4, r5, lr}
 80093bc:	4604      	mov	r4, r0
 80093be:	460d      	mov	r5, r1
 80093c0:	d904      	bls.n	80093cc <_raise_r+0x14>
 80093c2:	2316      	movs	r3, #22
 80093c4:	6003      	str	r3, [r0, #0]
 80093c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093ca:	bd38      	pop	{r3, r4, r5, pc}
 80093cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80093ce:	b112      	cbz	r2, 80093d6 <_raise_r+0x1e>
 80093d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093d4:	b94b      	cbnz	r3, 80093ea <_raise_r+0x32>
 80093d6:	4620      	mov	r0, r4
 80093d8:	f000 f830 	bl	800943c <_getpid_r>
 80093dc:	462a      	mov	r2, r5
 80093de:	4601      	mov	r1, r0
 80093e0:	4620      	mov	r0, r4
 80093e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093e6:	f000 b817 	b.w	8009418 <_kill_r>
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d00a      	beq.n	8009404 <_raise_r+0x4c>
 80093ee:	1c59      	adds	r1, r3, #1
 80093f0:	d103      	bne.n	80093fa <_raise_r+0x42>
 80093f2:	2316      	movs	r3, #22
 80093f4:	6003      	str	r3, [r0, #0]
 80093f6:	2001      	movs	r0, #1
 80093f8:	e7e7      	b.n	80093ca <_raise_r+0x12>
 80093fa:	2400      	movs	r4, #0
 80093fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009400:	4628      	mov	r0, r5
 8009402:	4798      	blx	r3
 8009404:	2000      	movs	r0, #0
 8009406:	e7e0      	b.n	80093ca <_raise_r+0x12>

08009408 <raise>:
 8009408:	4b02      	ldr	r3, [pc, #8]	; (8009414 <raise+0xc>)
 800940a:	4601      	mov	r1, r0
 800940c:	6818      	ldr	r0, [r3, #0]
 800940e:	f7ff bfd3 	b.w	80093b8 <_raise_r>
 8009412:	bf00      	nop
 8009414:	2000000c 	.word	0x2000000c

08009418 <_kill_r>:
 8009418:	b538      	push	{r3, r4, r5, lr}
 800941a:	4d07      	ldr	r5, [pc, #28]	; (8009438 <_kill_r+0x20>)
 800941c:	2300      	movs	r3, #0
 800941e:	4604      	mov	r4, r0
 8009420:	4608      	mov	r0, r1
 8009422:	4611      	mov	r1, r2
 8009424:	602b      	str	r3, [r5, #0]
 8009426:	f7f8 fa93 	bl	8001950 <_kill>
 800942a:	1c43      	adds	r3, r0, #1
 800942c:	d102      	bne.n	8009434 <_kill_r+0x1c>
 800942e:	682b      	ldr	r3, [r5, #0]
 8009430:	b103      	cbz	r3, 8009434 <_kill_r+0x1c>
 8009432:	6023      	str	r3, [r4, #0]
 8009434:	bd38      	pop	{r3, r4, r5, pc}
 8009436:	bf00      	nop
 8009438:	200003e8 	.word	0x200003e8

0800943c <_getpid_r>:
 800943c:	f7f8 ba80 	b.w	8001940 <_getpid>

08009440 <__sread>:
 8009440:	b510      	push	{r4, lr}
 8009442:	460c      	mov	r4, r1
 8009444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009448:	f000 f894 	bl	8009574 <_read_r>
 800944c:	2800      	cmp	r0, #0
 800944e:	bfab      	itete	ge
 8009450:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009452:	89a3      	ldrhlt	r3, [r4, #12]
 8009454:	181b      	addge	r3, r3, r0
 8009456:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800945a:	bfac      	ite	ge
 800945c:	6563      	strge	r3, [r4, #84]	; 0x54
 800945e:	81a3      	strhlt	r3, [r4, #12]
 8009460:	bd10      	pop	{r4, pc}

08009462 <__swrite>:
 8009462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009466:	461f      	mov	r7, r3
 8009468:	898b      	ldrh	r3, [r1, #12]
 800946a:	05db      	lsls	r3, r3, #23
 800946c:	4605      	mov	r5, r0
 800946e:	460c      	mov	r4, r1
 8009470:	4616      	mov	r6, r2
 8009472:	d505      	bpl.n	8009480 <__swrite+0x1e>
 8009474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009478:	2302      	movs	r3, #2
 800947a:	2200      	movs	r2, #0
 800947c:	f000 f868 	bl	8009550 <_lseek_r>
 8009480:	89a3      	ldrh	r3, [r4, #12]
 8009482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009486:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800948a:	81a3      	strh	r3, [r4, #12]
 800948c:	4632      	mov	r2, r6
 800948e:	463b      	mov	r3, r7
 8009490:	4628      	mov	r0, r5
 8009492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009496:	f000 b817 	b.w	80094c8 <_write_r>

0800949a <__sseek>:
 800949a:	b510      	push	{r4, lr}
 800949c:	460c      	mov	r4, r1
 800949e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094a2:	f000 f855 	bl	8009550 <_lseek_r>
 80094a6:	1c43      	adds	r3, r0, #1
 80094a8:	89a3      	ldrh	r3, [r4, #12]
 80094aa:	bf15      	itete	ne
 80094ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80094ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094b6:	81a3      	strheq	r3, [r4, #12]
 80094b8:	bf18      	it	ne
 80094ba:	81a3      	strhne	r3, [r4, #12]
 80094bc:	bd10      	pop	{r4, pc}

080094be <__sclose>:
 80094be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c2:	f000 b813 	b.w	80094ec <_close_r>
	...

080094c8 <_write_r>:
 80094c8:	b538      	push	{r3, r4, r5, lr}
 80094ca:	4d07      	ldr	r5, [pc, #28]	; (80094e8 <_write_r+0x20>)
 80094cc:	4604      	mov	r4, r0
 80094ce:	4608      	mov	r0, r1
 80094d0:	4611      	mov	r1, r2
 80094d2:	2200      	movs	r2, #0
 80094d4:	602a      	str	r2, [r5, #0]
 80094d6:	461a      	mov	r2, r3
 80094d8:	f7f8 fa71 	bl	80019be <_write>
 80094dc:	1c43      	adds	r3, r0, #1
 80094de:	d102      	bne.n	80094e6 <_write_r+0x1e>
 80094e0:	682b      	ldr	r3, [r5, #0]
 80094e2:	b103      	cbz	r3, 80094e6 <_write_r+0x1e>
 80094e4:	6023      	str	r3, [r4, #0]
 80094e6:	bd38      	pop	{r3, r4, r5, pc}
 80094e8:	200003e8 	.word	0x200003e8

080094ec <_close_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4d06      	ldr	r5, [pc, #24]	; (8009508 <_close_r+0x1c>)
 80094f0:	2300      	movs	r3, #0
 80094f2:	4604      	mov	r4, r0
 80094f4:	4608      	mov	r0, r1
 80094f6:	602b      	str	r3, [r5, #0]
 80094f8:	f7f8 fa7d 	bl	80019f6 <_close>
 80094fc:	1c43      	adds	r3, r0, #1
 80094fe:	d102      	bne.n	8009506 <_close_r+0x1a>
 8009500:	682b      	ldr	r3, [r5, #0]
 8009502:	b103      	cbz	r3, 8009506 <_close_r+0x1a>
 8009504:	6023      	str	r3, [r4, #0]
 8009506:	bd38      	pop	{r3, r4, r5, pc}
 8009508:	200003e8 	.word	0x200003e8

0800950c <_fstat_r>:
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	4d07      	ldr	r5, [pc, #28]	; (800952c <_fstat_r+0x20>)
 8009510:	2300      	movs	r3, #0
 8009512:	4604      	mov	r4, r0
 8009514:	4608      	mov	r0, r1
 8009516:	4611      	mov	r1, r2
 8009518:	602b      	str	r3, [r5, #0]
 800951a:	f7f8 fa78 	bl	8001a0e <_fstat>
 800951e:	1c43      	adds	r3, r0, #1
 8009520:	d102      	bne.n	8009528 <_fstat_r+0x1c>
 8009522:	682b      	ldr	r3, [r5, #0]
 8009524:	b103      	cbz	r3, 8009528 <_fstat_r+0x1c>
 8009526:	6023      	str	r3, [r4, #0]
 8009528:	bd38      	pop	{r3, r4, r5, pc}
 800952a:	bf00      	nop
 800952c:	200003e8 	.word	0x200003e8

08009530 <_isatty_r>:
 8009530:	b538      	push	{r3, r4, r5, lr}
 8009532:	4d06      	ldr	r5, [pc, #24]	; (800954c <_isatty_r+0x1c>)
 8009534:	2300      	movs	r3, #0
 8009536:	4604      	mov	r4, r0
 8009538:	4608      	mov	r0, r1
 800953a:	602b      	str	r3, [r5, #0]
 800953c:	f7f8 fa77 	bl	8001a2e <_isatty>
 8009540:	1c43      	adds	r3, r0, #1
 8009542:	d102      	bne.n	800954a <_isatty_r+0x1a>
 8009544:	682b      	ldr	r3, [r5, #0]
 8009546:	b103      	cbz	r3, 800954a <_isatty_r+0x1a>
 8009548:	6023      	str	r3, [r4, #0]
 800954a:	bd38      	pop	{r3, r4, r5, pc}
 800954c:	200003e8 	.word	0x200003e8

08009550 <_lseek_r>:
 8009550:	b538      	push	{r3, r4, r5, lr}
 8009552:	4d07      	ldr	r5, [pc, #28]	; (8009570 <_lseek_r+0x20>)
 8009554:	4604      	mov	r4, r0
 8009556:	4608      	mov	r0, r1
 8009558:	4611      	mov	r1, r2
 800955a:	2200      	movs	r2, #0
 800955c:	602a      	str	r2, [r5, #0]
 800955e:	461a      	mov	r2, r3
 8009560:	f7f8 fa70 	bl	8001a44 <_lseek>
 8009564:	1c43      	adds	r3, r0, #1
 8009566:	d102      	bne.n	800956e <_lseek_r+0x1e>
 8009568:	682b      	ldr	r3, [r5, #0]
 800956a:	b103      	cbz	r3, 800956e <_lseek_r+0x1e>
 800956c:	6023      	str	r3, [r4, #0]
 800956e:	bd38      	pop	{r3, r4, r5, pc}
 8009570:	200003e8 	.word	0x200003e8

08009574 <_read_r>:
 8009574:	b538      	push	{r3, r4, r5, lr}
 8009576:	4d07      	ldr	r5, [pc, #28]	; (8009594 <_read_r+0x20>)
 8009578:	4604      	mov	r4, r0
 800957a:	4608      	mov	r0, r1
 800957c:	4611      	mov	r1, r2
 800957e:	2200      	movs	r2, #0
 8009580:	602a      	str	r2, [r5, #0]
 8009582:	461a      	mov	r2, r3
 8009584:	f7f8 f9fe 	bl	8001984 <_read>
 8009588:	1c43      	adds	r3, r0, #1
 800958a:	d102      	bne.n	8009592 <_read_r+0x1e>
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	b103      	cbz	r3, 8009592 <_read_r+0x1e>
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	bd38      	pop	{r3, r4, r5, pc}
 8009594:	200003e8 	.word	0x200003e8

08009598 <_init>:
 8009598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959a:	bf00      	nop
 800959c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800959e:	bc08      	pop	{r3}
 80095a0:	469e      	mov	lr, r3
 80095a2:	4770      	bx	lr

080095a4 <_fini>:
 80095a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a6:	bf00      	nop
 80095a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095aa:	bc08      	pop	{r3}
 80095ac:	469e      	mov	lr, r3
 80095ae:	4770      	bx	lr
